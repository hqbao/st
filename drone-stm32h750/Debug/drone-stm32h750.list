
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9bc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad0  0800cc58  0800cc58  0001cc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e728  0800e728  0001e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e734  0800e734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800e738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017a0  240000a0  0800e7d8  000200a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001840  0800e7d8  00021840  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eff3  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032bc  00000000  00000000  0003f0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  00042380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001530  00000000  00000000  000439c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391eb  00000000  00000000  00044ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f4c0  00000000  00000000  0007e0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b344  00000000  00000000  0009d59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002088df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064e0  00000000  00000000  00208930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cc3c 	.word	0x0800cc3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0800cc3c 	.word	0x0800cc3c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80005e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80005ec:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	609a      	str	r2, [r3, #8]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f04f 0200 	mov.w	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0008 	add.w	r0, r3, #8
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	461a      	mov	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f00b f89f 	bl	800b780 <memset>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800065c:	3301      	adds	r3, #1
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	fb93 f1f2 	sdiv	r1, r3, r2
 8000666:	fb01 f202 	mul.w	r2, r1, r2
 800066a:	1a9a      	subs	r2, r3, r2
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	ed93 7a01 	vldr	s14, [r3, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	3302      	adds	r3, #2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	edd3 7a00 	vldr	s15, [r3]
 800068a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	ed93 7a01 	vldr	s14, [r3, #4]
 800069a:	edd7 7a00 	vldr	s15, [r7]
 800069e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	3302      	adds	r3, #2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80006d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80006d4:	eeb0 0a67 	vmov.f32	s0, s15
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e010      	b.n	8000716 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006f4:	2102      	movs	r1, #2
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <flash+0x48>)
 80006f8:	f004 f961 	bl	80049be <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80006fc:	2032      	movs	r0, #50	; 0x32
 80006fe:	f003 f8d9 	bl	80038b4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000702:	2102      	movs	r1, #2
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <flash+0x48>)
 8000706:	f004 f95a 	bl	80049be <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800070a:	2032      	movs	r0, #50	; 0x32
 800070c:	f003 f8d2 	bl	80038b4 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbea      	blt.n	80006f4 <flash+0x10>
  }

  HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f003 f8c8 	bl	80038b4 <HAL_Delay>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020000 	.word	0x58020000

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f003 f82b 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f8b7 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 fcc9 	bl	80010d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000742:	f000 f92d 	bl	80009a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000746:	f000 fc79 	bl	800103c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800074a:	f000 fc0b 	bl	8000f64 <MX_TIM6_Init>
  MX_TIM2_Init();
 800074e:	f000 f9bd 	bl	8000acc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000752:	f000 fa53 	bl	8000bfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000756:	f000 fae9 	bl	8000d2c <MX_TIM4_Init>
  MX_TIM5_Init();
 800075a:	f000 fb7b 	bl	8000e54 <MX_TIM5_Init>
  MX_TIM7_Init();
 800075e:	f000 fc37 	bl	8000fd0 <MX_TIM7_Init>
  MX_SPI2_Init();
 8000762:	f000 f95d 	bl	8000a20 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2102      	movs	r1, #2
 800076a:	483e      	ldr	r0, [pc, #248]	; (8000864 <main+0x134>)
 800076c:	f004 f90e 	bl	800498c <HAL_GPIO_WritePin>

  flash(5);
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ffb7 	bl	80006e4 <flash>

  // Initialise filters for remote control
  average_filter_init(&g_af[0], 5); // Thrust
 8000776:	2105      	movs	r1, #5
 8000778:	483b      	ldr	r0, [pc, #236]	; (8000868 <main+0x138>)
 800077a:	f7ff ff48 	bl	800060e <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 800077e:	2105      	movs	r1, #5
 8000780:	483a      	ldr	r0, [pc, #232]	; (800086c <main+0x13c>)
 8000782:	f7ff ff44 	bl	800060e <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8000786:	2105      	movs	r1, #5
 8000788:	4839      	ldr	r0, [pc, #228]	; (8000870 <main+0x140>)
 800078a:	f7ff ff40 	bl	800060e <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 800078e:	2105      	movs	r1, #5
 8000790:	4838      	ldr	r0, [pc, #224]	; (8000874 <main+0x144>)
 8000792:	f7ff ff3c 	bl	800060e <average_filter_init>
  average_filter_init(&g_af[4], 5); // Tune 1
 8000796:	2105      	movs	r1, #5
 8000798:	4837      	ldr	r0, [pc, #220]	; (8000878 <main+0x148>)
 800079a:	f7ff ff38 	bl	800060e <average_filter_init>
  average_filter_init(&g_af[5], 5); // Tune 2
 800079e:	2105      	movs	r1, #5
 80007a0:	4836      	ldr	r0, [pc, #216]	; (800087c <main+0x14c>)
 80007a2:	f7ff ff34 	bl	800060e <average_filter_init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80007a6:	2303      	movs	r3, #3
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2303      	movs	r3, #3
 80007ac:	2200      	movs	r2, #0
 80007ae:	4934      	ldr	r1, [pc, #208]	; (8000880 <main+0x150>)
 80007b0:	4834      	ldr	r0, [pc, #208]	; (8000884 <main+0x154>)
 80007b2:	f000 febf 	bl	8001534 <MPU6050_init>
 80007b6:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <main+0x9a>
    flash(error);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff8e 	bl	80006e4 <flash>
  while (1) {
 80007c8:	e7ed      	b.n	80007a6 <main+0x76>
    if (error == 0) break;
 80007ca:	bf00      	nop
  }

  MPU6050_set_offset(&g_mpu6050, 3.0, -5.1, 0, -125, -270, -10);
 80007cc:	eefa 2a04 	vmov.f32	s5, #164	; 0xc1200000 -10.0
 80007d0:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8000888 <main+0x158>
 80007d4:	eddf 1a2d 	vldr	s3, [pc, #180]	; 800088c <main+0x15c>
 80007d8:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8000890 <main+0x160>
 80007dc:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000894 <main+0x164>
 80007e0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80007e4:	4827      	ldr	r0, [pc, #156]	; (8000884 <main+0x154>)
 80007e6:	f001 f8b7 	bl	8001958 <MPU6050_set_offset>
//    if (error == 0) break;
//    flash(error);
//  }

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	482a      	ldr	r0, [pc, #168]	; (8000898 <main+0x168>)
 80007ee:	f007 ff25 	bl	800863c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80007f2:	2104      	movs	r1, #4
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <main+0x168>)
 80007f6:	f007 ff21 	bl	800863c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80007fa:	2108      	movs	r1, #8
 80007fc:	4826      	ldr	r0, [pc, #152]	; (8000898 <main+0x168>)
 80007fe:	f007 ff1d 	bl	800863c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000802:	210c      	movs	r1, #12
 8000804:	4824      	ldr	r0, [pc, #144]	; (8000898 <main+0x168>)
 8000806:	f007 ff19 	bl	800863c <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 800080a:	2108      	movs	r1, #8
 800080c:	4823      	ldr	r0, [pc, #140]	; (800089c <main+0x16c>)
 800080e:	f007 ff15 	bl	800863c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000812:	210c      	movs	r1, #12
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <main+0x16c>)
 8000816:	f007 ff11 	bl	800863c <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800081a:	2100      	movs	r1, #0
 800081c:	4820      	ldr	r0, [pc, #128]	; (80008a0 <main+0x170>)
 800081e:	f007 fd9d 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000822:	2104      	movs	r1, #4
 8000824:	481e      	ldr	r0, [pc, #120]	; (80008a0 <main+0x170>)
 8000826:	f007 fd99 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800082a:	2108      	movs	r1, #8
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <main+0x170>)
 800082e:	f007 fd95 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000832:	210c      	movs	r1, #12
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <main+0x170>)
 8000836:	f007 fd91 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800083a:	2100      	movs	r1, #0
 800083c:	4819      	ldr	r0, [pc, #100]	; (80008a4 <main+0x174>)
 800083e:	f007 fd8d 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000842:	2104      	movs	r1, #4
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <main+0x174>)
 8000846:	f007 fd89 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800084a:	2108      	movs	r1, #8
 800084c:	4815      	ldr	r0, [pc, #84]	; (80008a4 <main+0x174>)
 800084e:	f007 fd85 	bl	800835c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000852:	210c      	movs	r1, #12
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <main+0x174>)
 8000856:	f007 fd81 	bl	800835c <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim7);
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <main+0x178>)
 800085c:	f007 fca4 	bl	80081a8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x130>
 8000862:	bf00      	nop
 8000864:	58020000 	.word	0x58020000
 8000868:	240003e8 	.word	0x240003e8
 800086c:	24000584 	.word	0x24000584
 8000870:	24000720 	.word	0x24000720
 8000874:	240008bc 	.word	0x240008bc
 8000878:	24000a58 	.word	0x24000a58
 800087c:	24000bf4 	.word	0x24000bf4
 8000880:	240000bc 	.word	0x240000bc
 8000884:	24001400 	.word	0x24001400
 8000888:	c3870000 	.word	0xc3870000
 800088c:	c2fa0000 	.word	0xc2fa0000
 8000890:	00000000 	.word	0x00000000
 8000894:	c0a33333 	.word	0xc0a33333
 8000898:	24000228 	.word	0x24000228
 800089c:	24000274 	.word	0x24000274
 80008a0:	24000190 	.word	0x24000190
 80008a4:	240001dc 	.word	0x240001dc
 80008a8:	2400030c 	.word	0x2400030c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00a ff60 	bl	800b780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a ff5a 	bl	800b780 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f004 ff97 	bl	8005800 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <SystemClock_Config+0xec>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <SystemClock_Config+0xec>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <SystemClock_Config+0xec>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <SystemClock_Config+0xf0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	; (800099c <SystemClock_Config+0xf0>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemClock_Config+0xf0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xf0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000926:	2305      	movs	r3, #5
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800093a:	2308      	movs	r3, #8
 800093c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f004 ff92 	bl	8005874 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 fc2f 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000966:	2308      	movs	r3, #8
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fba5 	bl	80060d0 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800098c:	f000 fc14 	bl	80011b8 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	; 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58000400 	.word	0x58000400
 800099c:	58024800 	.word	0x58024800

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <MX_I2C1_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <MX_I2C1_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009dc:	f004 f80a 	bl	80049f4 <HAL_I2C_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009e6:	f000 fbe7 	bl	80011b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009ee:	f004 fe6f 	bl	80056d0 <HAL_I2CEx_ConfigAnalogFilter>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 fbde 	bl	80011b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_I2C1_Init+0x74>)
 8000a00:	f004 feb1 	bl	8005766 <HAL_I2CEx_ConfigDigitalFilter>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 fbd5 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000bc 	.word	0x240000bc
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	10c0ecff 	.word	0x10c0ecff

08000a20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <MX_SPI2_Init+0xa8>)
 8000a28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a54:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_SPI2_Init+0xa4>)
 8000ab2:	f007 fa01 	bl	8007eb8 <HAL_SPI_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000abc:	f000 fb7c 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000108 	.word	0x24000108
 8000ac8:	40003800 	.word	0x40003800

08000acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
 8000afa:	615a      	str	r2, [r3, #20]
 8000afc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000b06:	4b3c      	ldr	r3, [pc, #240]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b14:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000b18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b26:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b28:	f007 fae7 	bl	80080fa <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 fb41 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b40:	4619      	mov	r1, r3
 8000b42:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b44:	f008 f99a 	bl	8008e7c <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b4e:	f000 fb33 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b52:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b54:	f007 fba0 	bl	8008298 <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b5e:	f000 fb2b 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b72:	f009 f845 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b7c:	f000 fb1c 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000b98:	f008 f85c 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ba2:	f000 fb09 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000bae:	f008 f851 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000bb8:	f000 fafe 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000bc4:	f008 f846 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000bce:	f000 faf3 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000bda:	f008 f83b 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000be4:	f000 fae8 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM2_Init+0x12c>)
 8000bea:	f001 fa25 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000190 	.word	0x24000190

08000bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c30:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <MX_TIM3_Init+0x12c>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c36:	220a      	movs	r2, #10
 8000c38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000;
 8000c40:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c42:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000c46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c54:	4833      	ldr	r0, [pc, #204]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c56:	f007 fa50 	bl	80080fa <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c60:	f000 faaa 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482c      	ldr	r0, [pc, #176]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c72:	f008 f903 	bl	8008e7c <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c7c:	f000 fa9c 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000c82:	f007 fb09 	bl	8008298 <HAL_TIM_PWM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c8c:	f000 fa94 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000ca0:	f008 ffae 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000caa:	f000 fa85 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4817      	ldr	r0, [pc, #92]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cc6:	f007 ffc5 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cd0:	f000 fa72 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cdc:	f007 ffba 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ce6:	f000 fa67 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2208      	movs	r2, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000cf2:	f007 ffaf 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000cfc:	f000 fa5c 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	220c      	movs	r2, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000d08:	f007 ffa4 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000d12:	f000 fa51 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <MX_TIM3_Init+0x128>)
 8000d18:	f001 f98e 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	240001dc 	.word	0x240001dc
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d58:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <MX_TIM4_Init+0x124>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d6e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d80:	4832      	ldr	r0, [pc, #200]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d82:	f007 f9ba 	bl	80080fa <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000d8c:	f000 fa14 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000d9e:	f008 f86d 	bl	8008e7c <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000da8:	f000 fa06 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000dac:	4827      	ldr	r0, [pc, #156]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000dae:	f007 fbe3 	bl	8008578 <HAL_TIM_IC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000db8:	f000 f9fe 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000dcc:	f008 ff18 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000dd6:	f000 f9ef 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000dda:	230a      	movs	r3, #10
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4816      	ldr	r0, [pc, #88]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000df2:	f007 fe92 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000dfc:	f000 f9dc 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2204      	movs	r2, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000e08:	f007 fe87 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000e12:	f000 f9d1 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2208      	movs	r2, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000e1e:	f007 fe7c 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000e28:	f000 f9c6 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	220c      	movs	r2, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_TIM4_Init+0x120>)
 8000e34:	f007 fe71 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000e3e:	f000 f9bb 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	; 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000228 	.word	0x24000228
 8000e50:	40000800 	.word	0x40000800

08000e54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000e82:	4a37      	ldr	r2, [pc, #220]	; (8000f60 <MX_TIM5_Init+0x10c>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000e88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8000e94:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000e96:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ea8:	482c      	ldr	r0, [pc, #176]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000eaa:	f007 f926 	bl	80080fa <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f000 f980 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4825      	ldr	r0, [pc, #148]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000ec6:	f007 ffd9 	bl	8008e7c <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f000 f972 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000ed4:	4821      	ldr	r0, [pc, #132]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000ed6:	f007 fb4f 	bl	8008578 <HAL_TIM_IC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f000 f96a 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481a      	ldr	r0, [pc, #104]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000ef4:	f008 fe84 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000efe:	f000 f95b 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f02:	230a      	movs	r3, #10
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000f1a:	f007 fdfe 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000f24:	f000 f948 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000f30:	f007 fdf3 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8000f3a:	f000 f93d 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	220c      	movs	r2, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_TIM5_Init+0x108>)
 8000f46:	f007 fde8 	bl	8008b1a <HAL_TIM_IC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 8000f50:	f000 f932 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000274 	.word	0x24000274
 8000f60:	40000c00 	.word	0x40000c00

08000f64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_TIM6_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f7c:	2264      	movs	r2, #100	; 0x64
 8000f7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f88:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f96:	f007 f8b0 	bl	80080fa <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fa0:	f000 f90a 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000fb2:	f008 fe25 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f8fc 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	240002c0 	.word	0x240002c0
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_TIM7_Init+0x64>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_TIM7_Init+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_TIM7_Init+0x64>)
 8000fe8:	2264      	movs	r2, #100	; 0x64
 8000fea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_TIM7_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2500;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_TIM7_Init+0x64>)
 8000ff4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ff8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_TIM7_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_TIM7_Init+0x64>)
 8001002:	f007 f87a 	bl	80080fa <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800100c:	f000 f8d4 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_TIM7_Init+0x64>)
 800101e:	f008 fdef 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001028:	f000 f8c6 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2400030c 	.word	0x2400030c
 8001038:	40001400 	.word	0x40001400

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f008 fe67 	bl	8009d58 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f892 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f00a fa7e 	bl	800b598 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f889 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f00a fab3 	bl	800b614 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f880 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f00a fa34 	bl	800b526 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f878 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	24000358 	.word	0x24000358
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <MX_GPIO_Init+0xdc>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <MX_GPIO_Init+0xdc>)
 80010f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_GPIO_Init+0xdc>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_GPIO_Init+0xe0>)
 8001186:	f003 fc01 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_GPIO_Init+0xe0>)
 80011a2:	f003 fa2b 	bl	80045fc <HAL_GPIO_Init>

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020000 	.word	0x58020000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
 80011c2:	0000      	movs	r0, r0
 80011c4:	0000      	movs	r0, r0
	...

080011c8 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	ed2d 8b04 	vpush	{d8-d9}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80011e0:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001530 <calc_angles+0x368>
 80011e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80011fe:	eef1 6a67 	vneg.f32	s13, s15
 8001202:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001530 <calc_angles+0x368>
 8001206:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800121a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001224:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edd3 7a08 	vldr	s15, [r3, #32]
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001508 <calc_angles+0x340>
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	eeb0 0b47 	vmov.f64	d0, d7
 800123e:	f00a fd2f 	bl	800bca0 <sin>
 8001242:	eeb0 7b40 	vmov.f64	d7, d0
 8001246:	ee29 7b07 	vmul.f64	d7, d9, d7
 800124a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800124e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800125e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001268:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001272:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001276:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001508 <calc_angles+0x340>
 800127a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800127e:	eeb0 0b47 	vmov.f64	d0, d7
 8001282:	f00a fd0d 	bl	800bca0 <sin>
 8001286:	eeb0 7b40 	vmov.f64	d7, d0
 800128a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800128e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001292:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edd3 7a02 	vldr	s15, [r3, #8]
 80012a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012aa:	eeb0 0b47 	vmov.f64	d0, d7
 80012ae:	f00a faa3 	bl	800b7f8 <pow>
 80012b2:	eeb0 8b40 	vmov.f64	d8, d0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012c4:	eeb0 0b47 	vmov.f64	d0, d7
 80012c8:	f00a fa96 	bl	800b7f8 <pow>
 80012cc:	eeb0 7b40 	vmov.f64	d7, d0
 80012d0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80012da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012e2:	eeb0 0b47 	vmov.f64	d0, d7
 80012e6:	f00a fa87 	bl	800b7f8 <pow>
 80012ea:	eeb0 7b40 	vmov.f64	d7, d0
 80012ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012f2:	eeb0 0b47 	vmov.f64	d0, d7
 80012f6:	f00a fd4b 	bl	800bd90 <sqrt>
 80012fa:	eeb0 7b40 	vmov.f64	d7, d0
 80012fe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800131c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001324:	429a      	cmp	r2, r3
 8001326:	da1b      	bge.n	8001360 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 6a03 	vldr	s13, [r3, #12]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001342:	eeb0 0b47 	vmov.f64	d0, d7
 8001346:	f00a fcf7 	bl	800bd38 <asin>
 800134a:	eeb0 7b40 	vmov.f64	d7, d0
 800134e:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001510 <calc_angles+0x348>
 8001352:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001356:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a03 	vldr	s15, [r3, #12]
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001372:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800137a:	429a      	cmp	r2, r3
 800137c:	da1b      	bge.n	80013b6 <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edd3 6a02 	vldr	s13, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001394:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001398:	eeb0 0b47 	vmov.f64	d0, d7
 800139c:	f00a fccc 	bl	800bd38 <asin>
 80013a0:	eeb0 7b40 	vmov.f64	d7, d0
 80013a4:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001510 <calc_angles+0x348>
 80013a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d132      	bne.n	8001426 <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80013c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80013ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80013d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013dc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80013e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80013f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001400:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800140a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001412:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001416:	ee36 7b07 	vadd.f64	d7, d6, d7
 800141a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8001424:	e00b      	b.n	800143e <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001444:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001448:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001518 <calc_angles+0x350>
 800144c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001456:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001520 <calc_angles+0x358>
 800145e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001462:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001466:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001476:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001518 <calc_angles+0x350>
 800147e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800148c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001520 <calc_angles+0x358>
 8001490:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001494:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001498:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80014a8:	eef1 7a67 	vneg.f32	s15, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80014b8:	eef1 7a67 	vneg.f32	s15, s15
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80014c8:	eef1 7a67 	vneg.f32	s15, s15
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001528 <calc_angles+0x360>
 80014ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	ecbd 8b04 	vpop	{d8-d9}
 8001506:	bd80      	pop	{r7, pc}
 8001508:	695f8190 	.word	0x695f8190
 800150c:	3f06e05a 	.word	0x3f06e05a
 8001510:	1a63c1f8 	.word	0x1a63c1f8
 8001514:	404ca5dc 	.word	0x404ca5dc
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	3feccccc 	.word	0x3feccccc
 8001520:	9999999a 	.word	0x9999999a
 8001524:	3fb99999 	.word	0x3fb99999
 8001528:	d2f1a9fc 	.word	0xd2f1a9fc
 800152c:	3f50624d 	.word	0x3f50624d
 8001530:	43c80000 	.word	0x43c80000

08001534 <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	4613      	mov	r3, r2
 8001548:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	22d0      	movs	r2, #208	; 0xd0
 8001554:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e00a      	b.n	8001572 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fddb 	bl	800511c <HAL_I2C_GetState>
 8001566:	4603      	mov	r3, r0
 8001568:	2b20      	cmp	r3, #32
 800156a:	d006      	beq.n	800157a <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	3301      	adds	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	2b04      	cmp	r3, #4
 8001576:	ddf1      	ble.n	800155c <MPU6050_init+0x28>
 8001578:	e000      	b.n	800157c <MPU6050_init+0x48>
      break;
 800157a:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b04      	cmp	r3, #4
 8001580:	dd01      	ble.n	8001586 <MPU6050_init+0x52>
 8001582:	2301      	movs	r3, #1
 8001584:	e1e1      	b.n	800194a <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001586:	2375      	movs	r3, #117	; 0x75
 8001588:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e011      	b.n	80015b4 <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	b299      	uxth	r1, r3
 800159a:	f107 021b 	add.w	r2, r7, #27
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	f003 fab6 	bl	8004b14 <HAL_I2C_Master_Transmit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	ddea      	ble.n	8001590 <MPU6050_init+0x5c>
 80015ba:	e000      	b.n	80015be <MPU6050_init+0x8a>
      break;
 80015bc:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	dd01      	ble.n	80015c8 <MPU6050_init+0x94>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1c0      	b.n	800194a <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e011      	b.n	80015f2 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	f107 021a 	add.w	r2, r7, #26
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f003 fb8b 	bl	8004cfc <HAL_I2C_Master_Receive>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	ddea      	ble.n	80015ce <MPU6050_init+0x9a>
 80015f8:	e000      	b.n	80015fc <MPU6050_init+0xc8>
      break;
 80015fa:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	dd01      	ble.n	8001606 <MPU6050_init+0xd2>
 8001602:	2304      	movs	r3, #4
 8001604:	e1a1      	b.n	800194a <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 8001606:	7ebb      	ldrb	r3, [r7, #26]
 8001608:	2b68      	cmp	r3, #104	; 0x68
 800160a:	d001      	beq.n	8001610 <MPU6050_init+0xdc>
 800160c:	2305      	movs	r3, #5
 800160e:	e19c      	b.n	800194a <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001610:	236b      	movs	r3, #107	; 0x6b
 8001612:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	e011      	b.n	800163e <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	b299      	uxth	r1, r3
 8001624:	f107 0218 	add.w	r2, r7, #24
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2302      	movs	r3, #2
 800162e:	f003 fa71 	bl	8004b14 <HAL_I2C_Master_Transmit>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2b04      	cmp	r3, #4
 8001642:	ddea      	ble.n	800161a <MPU6050_init+0xe6>
 8001644:	e000      	b.n	8001648 <MPU6050_init+0x114>
      break;
 8001646:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b04      	cmp	r3, #4
 800164c:	dd01      	ble.n	8001652 <MPU6050_init+0x11e>
 800164e:	2306      	movs	r3, #6
 8001650:	e17b      	b.n	800194a <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001652:	2319      	movs	r3, #25
 8001654:	753b      	strb	r3, [r7, #20]
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e011      	b.n	8001684 <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	b299      	uxth	r1, r3
 800166a:	f107 0214 	add.w	r2, r7, #20
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2302      	movs	r3, #2
 8001674:	f003 fa4e 	bl	8004b14 <HAL_I2C_Master_Transmit>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b04      	cmp	r3, #4
 8001688:	ddea      	ble.n	8001660 <MPU6050_init+0x12c>
 800168a:	e000      	b.n	800168e <MPU6050_init+0x15a>
      break;
 800168c:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b04      	cmp	r3, #4
 8001692:	dd01      	ble.n	8001698 <MPU6050_init+0x164>
 8001694:	2307      	movs	r3, #7
 8001696:	e158      	b.n	800194a <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001698:	231c      	movs	r3, #28
 800169a:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e011      	b.n	80016c6 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	791b      	ldrb	r3, [r3, #4]
 80016aa:	b299      	uxth	r1, r3
 80016ac:	f107 0213 	add.w	r2, r7, #19
 80016b0:	2364      	movs	r3, #100	; 0x64
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	f003 fa2d 	bl	8004b14 <HAL_I2C_Master_Transmit>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	ddea      	ble.n	80016a2 <MPU6050_init+0x16e>
 80016cc:	e000      	b.n	80016d0 <MPU6050_init+0x19c>
      break;
 80016ce:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	dd01      	ble.n	80016da <MPU6050_init+0x1a6>
 80016d6:	2308      	movs	r3, #8
 80016d8:	e137      	b.n	800194a <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e011      	b.n	8001704 <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	791b      	ldrb	r3, [r3, #4]
 80016e8:	b299      	uxth	r1, r3
 80016ea:	f107 0213 	add.w	r2, r7, #19
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	f003 fb02 	bl	8004cfc <HAL_I2C_Master_Receive>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b04      	cmp	r3, #4
 8001708:	ddea      	ble.n	80016e0 <MPU6050_init+0x1ac>
 800170a:	e000      	b.n	800170e <MPU6050_init+0x1da>
      break;
 800170c:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	2b04      	cmp	r3, #4
 8001712:	dd01      	ble.n	8001718 <MPU6050_init+0x1e4>
 8001714:	2309      	movs	r3, #9
 8001716:	e118      	b.n	800194a <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001718:	7cfb      	ldrb	r3, [r7, #19]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	f023 0318 	bic.w	r3, r3, #24
 8001720:	b25a      	sxtb	r2, r3
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e011      	b.n	800175a <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	b299      	uxth	r1, r3
 8001740:	f107 0213 	add.w	r2, r7, #19
 8001744:	2364      	movs	r3, #100	; 0x64
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	f003 f9e3 	bl	8004b14 <HAL_I2C_Master_Transmit>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	3301      	adds	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	2b04      	cmp	r3, #4
 800175e:	ddea      	ble.n	8001736 <MPU6050_init+0x202>
 8001760:	e000      	b.n	8001764 <MPU6050_init+0x230>
      break;
 8001762:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b04      	cmp	r3, #4
 8001768:	dd01      	ble.n	800176e <MPU6050_init+0x23a>
 800176a:	230a      	movs	r3, #10
 800176c:	e0ed      	b.n	800194a <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 800176e:	231b      	movs	r3, #27
 8001770:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e011      	b.n	800179c <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	b299      	uxth	r1, r3
 8001782:	f107 0212 	add.w	r2, r7, #18
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	f003 f9c2 	bl	8004b14 <HAL_I2C_Master_Transmit>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	ddea      	ble.n	8001778 <MPU6050_init+0x244>
 80017a2:	e000      	b.n	80017a6 <MPU6050_init+0x272>
      break;
 80017a4:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	dd01      	ble.n	80017b0 <MPU6050_init+0x27c>
 80017ac:	230b      	movs	r3, #11
 80017ae:	e0cc      	b.n	800194a <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e011      	b.n	80017da <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	b299      	uxth	r1, r3
 80017c0:	f107 0212 	add.w	r2, r7, #18
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	f003 fa97 	bl	8004cfc <HAL_I2C_Master_Receive>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	ddea      	ble.n	80017b6 <MPU6050_init+0x282>
 80017e0:	e000      	b.n	80017e4 <MPU6050_init+0x2b0>
      break;
 80017e2:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	dd01      	ble.n	80017ee <MPU6050_init+0x2ba>
 80017ea:	230c      	movs	r3, #12
 80017ec:	e0ad      	b.n	800194a <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 80017ee:	7cfb      	ldrb	r3, [r7, #19]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f023 0318 	bic.w	r3, r3, #24
 80017f6:	b25a      	sxtb	r2, r3
 80017f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b25b      	sxtb	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	e011      	b.n	8001832 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	b299      	uxth	r1, r3
 8001818:	f107 0212 	add.w	r2, r7, #18
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	f003 f977 	bl	8004b14 <HAL_I2C_Master_Transmit>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3301      	adds	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	2b04      	cmp	r3, #4
 8001836:	ddea      	ble.n	800180e <MPU6050_init+0x2da>
 8001838:	e000      	b.n	800183c <MPU6050_init+0x308>
      break;
 800183a:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b04      	cmp	r3, #4
 8001840:	dd01      	ble.n	8001846 <MPU6050_init+0x312>
 8001842:	230d      	movs	r3, #13
 8001844:	e081      	b.n	800194a <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_184};
 8001846:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800184a:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e011      	b.n	8001876 <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	b299      	uxth	r1, r3
 800185c:	f107 0210 	add.w	r2, r7, #16
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2302      	movs	r3, #2
 8001866:	f003 f955 	bl	8004b14 <HAL_I2C_Master_Transmit>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	2b04      	cmp	r3, #4
 800187a:	ddea      	ble.n	8001852 <MPU6050_init+0x31e>
 800187c:	e000      	b.n	8001880 <MPU6050_init+0x34c>
      break;
 800187e:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b04      	cmp	r3, #4
 8001884:	dd01      	ble.n	800188a <MPU6050_init+0x356>
 8001886:	230e      	movs	r3, #14
 8001888:	e05f      	b.n	800194a <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3380      	adds	r3, #128	; 0x80
 800188e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001954 <MPU6050_init+0x420>
 8001892:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001896:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe9e 	bl	80005dc <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3398      	adds	r3, #152	; 0x98
 80018a4:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001954 <MPU6050_init+0x420>
 80018a8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018ac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe93 	bl	80005dc <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	33b0      	adds	r3, #176	; 0xb0
 80018ba:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001954 <MPU6050_init+0x420>
 80018be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe88 	bl	80005dc <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	33c8      	adds	r3, #200	; 0xc8
 80018d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018d4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018d8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe7d 	bl	80005dc <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	33e0      	adds	r3, #224	; 0xe0
 80018e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018ea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe72 	bl	80005dc <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	33f8      	adds	r3, #248	; 0xf8
 80018fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001900:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001904:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe67 	bl	80005dc <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3354      	adds	r3, #84	; 0x54
 8001912:	220c      	movs	r2, #12
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f009 ff32 	bl	800b780 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3360      	adds	r3, #96	; 0x60
 8001920:	220c      	movs	r2, #12
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f009 ff2b 	bl	800b780 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	336c      	adds	r3, #108	; 0x6c
 800192e:	220c      	movs	r2, #12
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f009 ff24 	bl	800b780 <memset>
  mpu6050->initialized = 0;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	3dcccccd 	.word	0x3dcccccd

08001958 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float angle_x_offset, float angle_y_offset, float angle_z_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	61f8      	str	r0, [r7, #28]
 8001960:	ed87 0a06 	vstr	s0, [r7, #24]
 8001964:	edc7 0a05 	vstr	s1, [r7, #20]
 8001968:	ed87 1a04 	vstr	s2, [r7, #16]
 800196c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001970:	ed87 2a02 	vstr	s4, [r7, #8]
 8001974:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->angle_x_offset = angle_x_offset;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->angle_y_offset = angle_y_offset;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->angle_z_offset = angle_z_offset;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800199c:	bf00      	nop
 800199e:	3724      	adds	r7, #36	; 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af04      	add	r7, sp, #16
 80019ae:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	b299      	uxth	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80019c0:	220a      	movs	r2, #10
 80019c2:	9202      	str	r2, [sp, #8]
 80019c4:	220e      	movs	r2, #14
 80019c6:	9201      	str	r2, [sp, #4]
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	223b      	movs	r2, #59	; 0x3b
 80019ce:	f003 fa8b 	bl	8004ee8 <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f804 	bl	80019e0 <MPU6050_parse_6axis>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001bcc <MPU6050_parse_6axis+0x1ec>
 8001a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001bd0 <MPU6050_parse_6axis+0x1f0>
 8001a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	425b      	negs	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b44:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001bd4 <MPU6050_parse_6axis+0x1f4>
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b58:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001bd4 <MPU6050_parse_6axis+0x1f4>
 8001b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b6c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001bd4 <MPU6050_parse_6axis+0x1f4>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fb24 	bl	80011c8 <calc_angles>

  mpu6050->angle_x = mpu6050->angle_x + mpu6050->angle_x_offset;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = mpu6050->angle_y + mpu6050->angle_y_offset;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z = mpu6050->angle_z + mpu6050->angle_z_offset;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	43aa0000 	.word	0x43aa0000
 8001bd0:	42121eb8 	.word	0x42121eb8
 8001bd4:	42830000 	.word	0x42830000

08001bd8 <limit>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

float limit(float number, float min, float max) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0a03 	vstr	s0, [r7, #12]
 8001be2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001be6:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8001bea:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d501      	bpl.n	8001c00 <limit+0x28>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	e00b      	b.n	8001c18 <limit+0x40>
 8001c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd01      	ble.n	8001c16 <limit+0x3e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	e000      	b.n	8001c18 <limit+0x40>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_MspInit+0x30>)
 8001c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x30>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x30>)
 8001c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	58024400 	.word	0x58024400

08001c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0b8      	sub	sp, #224	; 0xe0
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	22bc      	movs	r2, #188	; 0xbc
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f009 fd7d 	bl	800b780 <memset>
  if(hi2c->Instance==I2C1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_I2C_MspInit+0xbc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d141      	bne.n	8001d14 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c90:	2308      	movs	r3, #8
 8001c92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fda2 	bl	80067e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001caa:	f7ff fa85 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd2:	2312      	movs	r3, #18
 8001cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_I2C_MspInit+0xc4>)
 8001cf2:	f002 fc83 	bl	80045fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_I2C_MspInit+0xc0>)
 8001d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	37e0      	adds	r7, #224	; 0xe0
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020400 	.word	0x58020400

08001d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ba      	sub	sp, #232	; 0xe8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	22bc      	movs	r2, #188	; 0xbc
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f009 fd19 	bl	800b780 <memset>
  if(hspi->Instance==SPI2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_SPI_MspInit+0x108>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d166      	bne.n	8001e26 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fd3e 	bl	80067e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d72:	f7ff fa21 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_SPI_MspInit+0x10c>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001de8:	2305      	movs	r3, #5
 8001dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <HAL_SPI_MspInit+0x110>)
 8001df6:	f002 fc01 	bl	80045fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_SPI_MspInit+0x114>)
 8001e22:	f002 fbeb 	bl	80045fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	37e8      	adds	r7, #232	; 0xe8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40003800 	.word	0x40003800
 8001e34:	58024400 	.word	0x58024400
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	58020400 	.word	0x58020400

08001e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	; 0x40
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d10f      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e68:	4a6b      	ldr	r2, [pc, #428]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e72:	4b69      	ldr	r3, [pc, #420]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e80:	e0c6      	b.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a65      	ldr	r2, [pc, #404]	; (800201c <HAL_TIM_Base_MspInit+0x1dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8c:	4b62      	ldr	r3, [pc, #392]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e92:	4a61      	ldr	r2, [pc, #388]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001eaa:	e0b1      	b.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <HAL_TIM_Base_MspInit+0x1e0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d137      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	623b      	str	r3, [r7, #32]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed4:	4b50      	ldr	r3, [pc, #320]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ef2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4845      	ldr	r0, [pc, #276]	; (8002024 <HAL_TIM_Base_MspInit+0x1e4>)
 8001f10:	f002 fb74 	bl	80045fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	201e      	movs	r0, #30
 8001f1a:	f001 fdd6 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f1e:	201e      	movs	r0, #30
 8001f20:	f001 fded 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 8001f24:	e074      	b.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM5)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_TIM_Base_MspInit+0x1e8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d136      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f36:	4a38      	ldr	r2, [pc, #224]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001f6c:	230d      	movs	r3, #13
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4829      	ldr	r0, [pc, #164]	; (800202c <HAL_TIM_Base_MspInit+0x1ec>)
 8001f88:	f002 fb38 	bl	80045fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2032      	movs	r0, #50	; 0x32
 8001f92:	f001 fd9a 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f96:	2032      	movs	r0, #50	; 0x32
 8001f98:	f001 fdb1 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 8001f9c:	e038      	b.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM6)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_TIM_Base_MspInit+0x1f0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d117      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2036      	movs	r0, #54	; 0x36
 8001fcc:	f001 fd7d 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fd0:	2036      	movs	r0, #54	; 0x36
 8001fd2:	f001 fd94 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 8001fd6:	e01b      	b.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM7)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d116      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2037      	movs	r0, #55	; 0x37
 8002006:	f001 fd60 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800200a:	2037      	movs	r0, #55	; 0x37
 800200c:	f001 fd77 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3740      	adds	r7, #64	; 0x40
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58024400 	.word	0x58024400
 800201c:	40000400 	.word	0x40000400
 8002020:	40000800 	.word	0x40000800
 8002024:	58020c00 	.word	0x58020c00
 8002028:	40000c00 	.word	0x40000c00
 800202c:	58020000 	.word	0x58020000
 8002030:	40001000 	.word	0x40001000
 8002034:	40001400 	.word	0x40001400

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d13f      	bne.n	80020da <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002060:	4a41      	ldr	r2, [pc, #260]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002096:	2320      	movs	r3, #32
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	482e      	ldr	r0, [pc, #184]	; (800216c <HAL_TIM_MspPostInit+0x134>)
 80020b2:	f002 faa3 	bl	80045fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80020b6:	f640 4308 	movw	r3, #3080	; 0xc08
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4827      	ldr	r0, [pc, #156]	; (8002170 <HAL_TIM_MspPostInit+0x138>)
 80020d4:	f002 fa92 	bl	80045fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020d8:	e042      	b.n	8002160 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_TIM_MspPostInit+0x13c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d13d      	bne.n	8002160 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_TIM_MspPostInit+0x130>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002130:	2302      	movs	r3, #2
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <HAL_TIM_MspPostInit+0x134>)
 800213c:	f002 fa5e 	bl	80045fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002140:	2303      	movs	r3, #3
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002150:	2302      	movs	r3, #2
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_TIM_MspPostInit+0x138>)
 800215c:	f002 fa4e 	bl	80045fc <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3730      	adds	r7, #48	; 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58024400 	.word	0x58024400
 800216c:	58020000 	.word	0x58020000
 8002170:	58020400 	.word	0x58020400
 8002174:	40000400 	.word	0x40000400

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0ba      	sub	sp, #232	; 0xe8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	22bc      	movs	r2, #188	; 0xbc
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f009 faf1 	bl	800b780 <memset>
  if(huart->Instance==USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <HAL_UART_MspInit+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d16f      	bne.n	8002288 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	f107 0318 	add.w	r3, r7, #24
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fb16 	bl	80067e8 <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021c2:	f7fe fff9 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_UART_MspInit+0x11c>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_UART_MspInit+0x11c>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_UART_MspInit+0x11c>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_UART_MspInit+0x11c>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800223a:	2304      	movs	r3, #4
 800223c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002244:	4619      	mov	r1, r3
 8002246:	4814      	ldr	r0, [pc, #80]	; (8002298 <HAL_UART_MspInit+0x120>)
 8002248:	f002 f9d8 	bl	80045fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002266:	2307      	movs	r3, #7
 8002268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002270:	4619      	mov	r1, r3
 8002272:	480a      	ldr	r0, [pc, #40]	; (800229c <HAL_UART_MspInit+0x124>)
 8002274:	f002 f9c2 	bl	80045fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2025      	movs	r0, #37	; 0x25
 800227e:	f001 fc24 	bl	8003aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002282:	2025      	movs	r0, #37	; 0x25
 8002284:	f001 fc3b 	bl	8003afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	37e8      	adds	r7, #232	; 0xe8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40011000 	.word	0x40011000
 8002294:	58024400 	.word	0x58024400
 8002298:	58020400 	.word	0x58020400
 800229c:	58020000 	.word	0x58020000

080022a0 <set_speed>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4,
    uint32_t m5, uint32_t m6, uint32_t m7, uint32_t m8) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m3;
 80022b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m5;
 80022be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m7;
 80022c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
  TIM3->CCR1 = m2;
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <set_speed+0x54>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6353      	str	r3, [r2, #52]	; 0x34
  TIM3->CCR2 = m4;
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <set_speed+0x54>)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38
  TIM3->CCR3 = m6;
 80022da:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <set_speed+0x54>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM3->CCR4 = m8;
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <set_speed+0x54>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40000400 	.word	0x40000400

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <NMI_Handler+0x4>

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002344:	f001 fa96 	bl	8003874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM4_IRQHandler+0x10>)
 8002352:	f006 fac3 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	24000228 	.word	0x24000228

08002360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART1_IRQHandler+0x10>)
 8002366:	f007 fd47 	bl	8009df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	24000358 	.word	0x24000358

08002374 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM5_IRQHandler+0x10>)
 800237a:	f006 faaf 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24000274 	.word	0x24000274

08002388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <TIM6_DAC_IRQHandler+0x10>)
 800238e:	f006 faa5 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	240002c0 	.word	0x240002c0

0800239c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  fly();
 80023a0:	f000 fa1e 	bl	80027e0 <fly>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <TIM7_IRQHandler+0x14>)
 80023a6:	f006 fa99 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2400030c 	.word	0x2400030c

080023b4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80023bc:	2102      	movs	r1, #2
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <HAL_UART_TxCpltCallback+0x18>)
 80023c0:	f002 fafd 	bl	80049be <HAL_GPIO_TogglePin>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58020000 	.word	0x58020000

080023d0 <HAL_TIM_IC_CaptureCallback>:
  send_data(monitor[0], monitor[1], monitor[2],
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4aa5      	ldr	r2, [pc, #660]	; (8002674 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f040 813b 	bne.w	800265a <HAL_TIM_IC_CaptureCallback+0x28a>
    switch (htim->Channel) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f1b      	ldrb	r3, [r3, #28]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	f200 80e4 	bhi.w	80025b8 <HAL_TIM_IC_CaptureCallback+0x1e8>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_TIM_IC_CaptureCallback+0x28>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002419 	.word	0x08002419
 80023fc:	08002485 	.word	0x08002485
 8002400:	080025b9 	.word	0x080025b9
 8002404:	080024ed 	.word	0x080024ed
 8002408:	080025b9 	.word	0x080025b9
 800240c:	080025b9 	.word	0x080025b9
 8002410:	080025b9 	.word	0x080025b9
 8002414:	08002553 	.word	0x08002553
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8002418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241c:	4896      	ldr	r0, [pc, #600]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800241e:	f002 fa9d 	bl	800495c <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002428:	2100      	movs	r1, #0
 800242a:	4894      	ldr	r0, [pc, #592]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800242c:	f006 fe1e 	bl	800906c <HAL_TIM_ReadCapturedValue>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002436:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	488e      	ldr	r0, [pc, #568]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800243e:	f002 fa8d 	bl	800495c <HAL_GPIO_ReadPin>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 80b9 	bne.w	80025bc <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800244a:	2100      	movs	r1, #0
 800244c:	488b      	ldr	r0, [pc, #556]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800244e:	f006 fe0d 	bl	800906c <HAL_TIM_ReadCapturedValue>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b8a      	ldr	r3, [pc, #552]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002458:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 800245a:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	613b      	str	r3, [r7, #16]
          if (value >= 350 && value <= 850) { // [400, 798]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800246c:	f2c0 80a6 	blt.w	80025bc <HAL_TIM_IC_CaptureCallback+0x1ec>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f240 3252 	movw	r2, #850	; 0x352
 8002476:	4293      	cmp	r3, r2
 8002478:	f300 80a0 	bgt.w	80025bc <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[2] = value;
 800247c:	4a80      	ldr	r2, [pc, #512]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8002482:	e09b      	b.n	80025bc <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002488:	487b      	ldr	r0, [pc, #492]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800248a:	f002 fa67 	bl	800495c <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IC_CaptureCallback+0xd4>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002494:	2104      	movs	r1, #4
 8002496:	4879      	ldr	r0, [pc, #484]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002498:	f006 fde8 	bl	800906c <HAL_TIM_ReadCapturedValue>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	4b77      	ldr	r3, [pc, #476]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80024a2:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80024a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a8:	4873      	ldr	r0, [pc, #460]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80024aa:	f002 fa57 	bl	800495c <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 8085 	bne.w	80025c0 <HAL_TIM_IC_CaptureCallback+0x1f0>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80024b6:	2104      	movs	r1, #4
 80024b8:	4870      	ldr	r0, [pc, #448]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80024ba:	f006 fdd7 	bl	800906c <HAL_TIM_ReadCapturedValue>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80024c4:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
          if (value >= 350 && value <= 850) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80024d8:	db72      	blt.n	80025c0 <HAL_TIM_IC_CaptureCallback+0x1f0>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f240 3252 	movw	r2, #850	; 0x352
 80024e0:	4293      	cmp	r3, r2
 80024e2:	dc6d      	bgt.n	80025c0 <HAL_TIM_IC_CaptureCallback+0x1f0>
            pwm_in[5] = value;
 80024e4:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 80024ea:	e069      	b.n	80025c0 <HAL_TIM_IC_CaptureCallback+0x1f0>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 80024ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f0:	4861      	ldr	r0, [pc, #388]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80024f2:	f002 fa33 	bl	800495c <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_TIM_IC_CaptureCallback+0x13c>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80024fc:	2108      	movs	r1, #8
 80024fe:	485f      	ldr	r0, [pc, #380]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002500:	f006 fdb4 	bl	800906c <HAL_TIM_ReadCapturedValue>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800250a:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 800250c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002510:	4859      	ldr	r0, [pc, #356]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002512:	f002 fa23 	bl	800495c <HAL_GPIO_ReadPin>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d153      	bne.n	80025c4 <HAL_TIM_IC_CaptureCallback+0x1f4>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 800251c:	2108      	movs	r1, #8
 800251e:	4857      	ldr	r0, [pc, #348]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002520:	f006 fda4 	bl	800906c <HAL_TIM_ReadCapturedValue>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800252a:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
          if (value >= 350 && value <= 850) {
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800253e:	db41      	blt.n	80025c4 <HAL_TIM_IC_CaptureCallback+0x1f4>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f240 3252 	movw	r2, #850	; 0x352
 8002546:	4293      	cmp	r3, r2
 8002548:	dc3c      	bgt.n	80025c4 <HAL_TIM_IC_CaptureCallback+0x1f4>
            pwm_in[8] = value;
 800254a:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8002550:	e038      	b.n	80025c4 <HAL_TIM_IC_CaptureCallback+0x1f4>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8002552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002556:	4848      	ldr	r0, [pc, #288]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002558:	f002 fa00 	bl	800495c <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_TIM_IC_CaptureCallback+0x1a2>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8002562:	210c      	movs	r1, #12
 8002564:	4845      	ldr	r0, [pc, #276]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002566:	f006 fd81 	bl	800906c <HAL_TIM_ReadCapturedValue>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8002572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002576:	4840      	ldr	r0, [pc, #256]	; (8002678 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002578:	f002 f9f0 	bl	800495c <HAL_GPIO_ReadPin>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x1f8>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8002582:	210c      	movs	r1, #12
 8002584:	483d      	ldr	r0, [pc, #244]	; (800267c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002586:	f006 fd71 	bl	800906c <HAL_TIM_ReadCapturedValue>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	61fb      	str	r3, [r7, #28]
          if (value >= 350 && value <= 850) {
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80025a4:	db10      	blt.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x1f8>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f240 3252 	movw	r2, #850	; 0x352
 80025ac:	4293      	cmp	r3, r2
 80025ae:	dc0b      	bgt.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x1f8>
            pwm_in[11] = value;
 80025b0:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x1f8>
      default:
        break;
 80025b8:	bf00      	nop
 80025ba:	e006      	b.n	80025ca <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 80025bc:	bf00      	nop
 80025be:	e004      	b.n	80025ca <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 80025c0:	bf00      	nop
 80025c2:	e002      	b.n	80025ca <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 80025c4:	bf00      	nop
 80025c6:	e000      	b.n	80025ca <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 80025c8:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - 400);
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	4829      	ldr	r0, [pc, #164]	; (8002684 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80025e0:	f7fe f833 	bl	800064a <average_filter_update>
 80025e4:	eef0 7a40 	vmov.f32	s15, s0
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80025ea:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[8] - 600);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	4822      	ldr	r0, [pc, #136]	; (800268c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002604:	f7fe f821 	bl	800064a <average_filter_update>
 8002608:	eef0 7a40 	vmov.f32	s15, s0
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800260e:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[11] - 600);
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	481b      	ldr	r0, [pc, #108]	; (8002694 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002628:	f7fe f80f 	bl	800064a <average_filter_update>
 800262c:	eef0 7a40 	vmov.f32	s15, s0
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002632:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[5] - 600);
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	4814      	ldr	r0, [pc, #80]	; (800269c <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800264c:	f7fd fffd 	bl	800064a <average_filter_update>
 8002650:	eef0 7a40 	vmov.f32	s15, s0
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8002656:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	f040 80aa 	bne.w	80027ba <HAL_TIM_IC_CaptureCallback+0x3ea>
    switch (htim->Channel) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d01c      	beq.n	80026a8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 800266e:	2b08      	cmp	r3, #8
 8002670:	d04b      	beq.n	800270a <HAL_TIM_IC_CaptureCallback+0x33a>
            pwm_in[17] = value;
          }
        }
        break;
      default:
        break;
 8002672:	e07e      	b.n	8002772 <HAL_TIM_IC_CaptureCallback+0x3a2>
 8002674:	40000800 	.word	0x40000800
 8002678:	58020c00 	.word	0x58020c00
 800267c:	24000228 	.word	0x24000228
 8002680:	24001780 	.word	0x24001780
 8002684:	240003e8 	.word	0x240003e8
 8002688:	240017f8 	.word	0x240017f8
 800268c:	24000584 	.word	0x24000584
 8002690:	24001804 	.word	0x24001804
 8002694:	24000720 	.word	0x24000720
 8002698:	240017fc 	.word	0x240017fc
 800269c:	240008bc 	.word	0x240008bc
 80026a0:	24001800 	.word	0x24001800
 80026a4:	40000c00 	.word	0x40000c00
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 80026a8:	2104      	movs	r1, #4
 80026aa:	4846      	ldr	r0, [pc, #280]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80026ac:	f002 f956 	bl	800495c <HAL_GPIO_ReadPin>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_IC_CaptureCallback+0x2f6>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 80026b6:	2108      	movs	r1, #8
 80026b8:	4843      	ldr	r0, [pc, #268]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80026ba:	f006 fcd7 	bl	800906c <HAL_TIM_ReadCapturedValue>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 80026c6:	2104      	movs	r1, #4
 80026c8:	483e      	ldr	r0, [pc, #248]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80026ca:	f002 f947 	bl	800495c <HAL_GPIO_ReadPin>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d14b      	bne.n	800276c <HAL_TIM_IC_CaptureCallback+0x39c>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 80026d4:	2108      	movs	r1, #8
 80026d6:	483c      	ldr	r0, [pc, #240]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80026d8:	f006 fcc8 	bl	800906c <HAL_TIM_ReadCapturedValue>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80026e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	60bb      	str	r3, [r7, #8]
          if (value >= 350 && value <= 850) { // [399, 799]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80026f6:	db39      	blt.n	800276c <HAL_TIM_IC_CaptureCallback+0x39c>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f240 3252 	movw	r2, #850	; 0x352
 80026fe:	4293      	cmp	r3, r2
 8002700:	dc34      	bgt.n	800276c <HAL_TIM_IC_CaptureCallback+0x39c>
            pwm_in[14] = value;
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6393      	str	r3, [r2, #56]	; 0x38
        break;
 8002708:	e030      	b.n	800276c <HAL_TIM_IC_CaptureCallback+0x39c>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 800270a:	2108      	movs	r1, #8
 800270c:	482d      	ldr	r0, [pc, #180]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800270e:	f002 f925 	bl	800495c <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IC_CaptureCallback+0x358>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002718:	210c      	movs	r1, #12
 800271a:	482b      	ldr	r0, [pc, #172]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800271c:	f006 fca6 	bl	800906c <HAL_TIM_ReadCapturedValue>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8002728:	2108      	movs	r1, #8
 800272a:	4826      	ldr	r0, [pc, #152]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800272c:	f002 f916 	bl	800495c <HAL_GPIO_ReadPin>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11c      	bne.n	8002770 <HAL_TIM_IC_CaptureCallback+0x3a0>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002736:	210c      	movs	r1, #12
 8002738:	4823      	ldr	r0, [pc, #140]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800273a:	f006 fc97 	bl	800906c <HAL_TIM_ReadCapturedValue>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	60fb      	str	r3, [r7, #12]
          if (value >= 350 && value <= 850) {
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002758:	db0a      	blt.n	8002770 <HAL_TIM_IC_CaptureCallback+0x3a0>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f240 3252 	movw	r2, #850	; 0x352
 8002760:	4293      	cmp	r3, r2
 8002762:	dc05      	bgt.n	8002770 <HAL_TIM_IC_CaptureCallback+0x3a0>
            pwm_in[17] = value;
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
        break;
 800276a:	e001      	b.n	8002770 <HAL_TIM_IC_CaptureCallback+0x3a0>
        break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_TIM_IC_CaptureCallback+0x3a2>
        break;
 8002770:	bf00      	nop
    }

    g_tune1 = average_filter_update(&g_af[4], pwm_in[14] - 400);
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	eeb0 0a67 	vmov.f32	s0, s15
 8002786:	4812      	ldr	r0, [pc, #72]	; (80027d0 <HAL_TIM_IC_CaptureCallback+0x400>)
 8002788:	f7fd ff5f 	bl	800064a <average_filter_update>
 800278c:	eef0 7a40 	vmov.f32	s15, s0
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002792:	edc3 7a00 	vstr	s15, [r3]
    g_tune2 = average_filter_update(&g_af[5], pwm_in[17] - 400);
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a6:	eeb0 0a67 	vmov.f32	s0, s15
 80027aa:	480b      	ldr	r0, [pc, #44]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x408>)
 80027ac:	f7fd ff4d 	bl	800064a <average_filter_update>
 80027b0:	eef0 7a40 	vmov.f32	s15, s0
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x40c>)
 80027b6:	edc3 7a00 	vstr	s15, [r3]
  monitor[5] = g_I_yaw_period;
  monitor[6] = g_D_pitch_gain;
  monitor[7] = g_D_roll_gain;
  monitor[8] = g_D_yaw_gain;
#endif
}
 80027ba:	bf00      	nop
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	58020000 	.word	0x58020000
 80027c8:	24000274 	.word	0x24000274
 80027cc:	24001780 	.word	0x24001780
 80027d0:	24000a58 	.word	0x24000a58
 80027d4:	24001808 	.word	0x24001808
 80027d8:	24000bf4 	.word	0x24000bf4
 80027dc:	2400180c 	.word	0x2400180c

080027e0 <fly>:

void fly() {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08e      	sub	sp, #56	; 0x38
 80027e4:	af04      	add	r7, sp, #16
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <fly+0x220>)
 80027e8:	f7ff f8de 	bl	80019a8 <MPU6050_update>
//  MS5611_update(&g_ms5611);

  float angle_x = g_mpu6050.angle_x;
 80027ec:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <fly+0x220>)
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 80027f2:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <fly+0x220>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <fly+0x220>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 80027fe:	4b80      	ldr	r3, [pc, #512]	; (8002a00 <fly+0x220>)
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 8002804:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <fly+0x220>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <fly+0x220>)
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	60fb      	str	r3, [r7, #12]
//  prev_angle_x = angle_x;
//  prev_angle_y = angle_y;
//  prev_angle_z = angle_z;

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 8002810:	edd7 7a07 	vldr	s15, [r7, #28]
 8002814:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002818:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <fly+0x224>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002822:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800282a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800282e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002832:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 8002836:	edd7 7a08 	vldr	s15, [r7, #32]
 800283a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <fly+0x228>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002848:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 800284c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002850:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002858:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <fly+0x22c>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800286a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002872:	d409      	bmi.n	8002888 <fly+0xa8>
 8002874:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <fly+0x22c>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	dd0c      	ble.n	80028a2 <fly+0xc2>
    angle_error_z = g_yaw > 0 ? -0.5*g_yaw : -0.5*g_yaw;
 8002888:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <fly+0x22c>)
 800288a:	edd3 7a00 	vldr	s15, [r3]
 800288e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002896:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 800289a:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <fly+0x220>)
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_tune1 < 100) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <fly+0x230>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	f200 864d 	bhi.w	8003546 <fly+0xd66>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <fly+0xd4>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028cd 	.word	0x080028cd
 80028b8:	0800299f 	.word	0x0800299f
 80028bc:	08003547 	.word	0x08003547
 80028c0:	08002a71 	.word	0x08002a71
 80028c4:	08003547 	.word	0x08003547
 80028c8:	08003349 	.word	0x08003349
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 80028cc:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <fly+0x234>)
 80028ce:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <fly+0x238>)
 80028d0:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 80028d2:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <fly+0x23c>)
 80028d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028d8:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <fly+0x240>)
 80028dc:	4a51      	ldr	r2, [pc, #324]	; (8002a24 <fly+0x244>)
 80028de:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 80028e0:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <fly+0x248>)
 80028e2:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <fly+0x24c>)
 80028e4:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <fly+0x250>)
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <fly+0x238>)
 80028ea:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 80028ec:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <fly+0x254>)
 80028ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028f2:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <fly+0x258>)
 80028f6:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <fly+0x244>)
 80028f8:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 80028fa:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <fly+0x25c>)
 80028fc:	4a4b      	ldr	r2, [pc, #300]	; (8002a2c <fly+0x24c>)
 80028fe:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <fly+0x260>)
 8002902:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <fly+0x264>)
 8002904:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8002906:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <fly+0x268>)
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 800290e:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <fly+0x26c>)
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <fly+0x270>)
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <fly+0x274>)
 800291a:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED,
 800291c:	23c8      	movs	r3, #200	; 0xc8
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	23c8      	movs	r3, #200	; 0xc8
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	23c8      	movs	r3, #200	; 0xc8
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	23c8      	movs	r3, #200	; 0xc8
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	23c8      	movs	r3, #200	; 0xc8
 800292e:	22c8      	movs	r2, #200	; 0xc8
 8002930:	21c8      	movs	r1, #200	; 0xc8
 8002932:	20c8      	movs	r0, #200	; 0xc8
 8002934:	f7ff fcb4 	bl	80022a0 <set_speed>
                INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002938:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <fly+0x278>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d901      	bls.n	800294c <fly+0x16c>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8002948:	f000 bdfd 	b.w	8003546 <fly+0xd66>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <fly+0x22c>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002a5c <fly+0x27c>
 8002956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	d901      	bls.n	8002964 <fly+0x184>
      break;
 8002960:	f000 bdf1 	b.w	8003546 <fly+0xd66>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <fly+0x224>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002a5c <fly+0x27c>
 800296e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	d901      	bls.n	800297c <fly+0x19c>
      break;
 8002978:	f000 bde5 	b.w	8003546 <fly+0xd66>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 800297c:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <fly+0x228>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002a60 <fly+0x280>
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	da01      	bge.n	8002994 <fly+0x1b4>
      break;
 8002990:	f000 bdd9 	b.w	8003546 <fly+0xd66>
        fly_mode = ready;
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <fly+0x230>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
      break;
 800299a:	f000 bdd4 	b.w	8003546 <fly+0xd66>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <fly+0x284>)
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <fly+0x288>)
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <fly+0x28c>)
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED,
 80029b6:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80029ba:	9303      	str	r3, [sp, #12]
 80029bc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80029d2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80029d6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80029da:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80029de:	f7ff fc5f 	bl	80022a0 <set_speed>
          MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);

      // Switch to fly mode
      if (g_throttle > 0) {
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <fly+0x278>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f0:	dc01      	bgt.n	80029f6 <fly+0x216>
        fly_mode = moving;
      }

      break;
 80029f2:	f000 bda8 	b.w	8003546 <fly+0xd66>
        fly_mode = moving;
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <fly+0x230>)
 80029f8:	2203      	movs	r2, #3
 80029fa:	701a      	strb	r2, [r3, #0]
      break;
 80029fc:	f000 bda3 	b.w	8003546 <fly+0xd66>
 8002a00:	24001400 	.word	0x24001400
 8002a04:	240017fc 	.word	0x240017fc
 8002a08:	24001800 	.word	0x24001800
 8002a0c:	24001804 	.word	0x24001804
 8002a10:	24000000 	.word	0x24000000
 8002a14:	24000004 	.word	0x24000004
 8002a18:	41200000 	.word	0x41200000
 8002a1c:	24000008 	.word	0x24000008
 8002a20:	2400000c 	.word	0x2400000c
 8002a24:	3b23d70a 	.word	0x3b23d70a
 8002a28:	24000010 	.word	0x24000010
 8002a2c:	41100000 	.word	0x41100000
 8002a30:	24000014 	.word	0x24000014
 8002a34:	24000018 	.word	0x24000018
 8002a38:	2400001c 	.word	0x2400001c
 8002a3c:	24000020 	.word	0x24000020
 8002a40:	24000024 	.word	0x24000024
 8002a44:	40e00000 	.word	0x40e00000
 8002a48:	24001810 	.word	0x24001810
 8002a4c:	24001814 	.word	0x24001814
 8002a50:	24000028 	.word	0x24000028
 8002a54:	40a00000 	.word	0x40a00000
 8002a58:	240017f8 	.word	0x240017f8
 8002a5c:	c3470000 	.word	0xc3470000
 8002a60:	43470000 	.word	0x43470000
 8002a64:	24001738 	.word	0x24001738
 8002a68:	24001748 	.word	0x24001748
 8002a6c:	24001758 	.word	0x24001758
    case holding:

      break;
    case moving:
      g_P_pitch = limit(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8002a70:	4bdd      	ldr	r3, [pc, #884]	; (8002de8 <fly+0x608>)
 8002a72:	ed93 7a00 	vldr	s14, [r3]
 8002a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	ed9f 1adb 	vldr	s2, [pc, #876]	; 8002dec <fly+0x60c>
 8002a82:	eddf 0adb 	vldr	s1, [pc, #876]	; 8002df0 <fly+0x610>
 8002a86:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8a:	f7ff f8a5 	bl	8001bd8 <limit>
 8002a8e:	eef0 7a40 	vmov.f32	s15, s0
 8002a92:	4bd8      	ldr	r3, [pc, #864]	; (8002df4 <fly+0x614>)
 8002a94:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8002a98:	4bd7      	ldr	r3, [pc, #860]	; (8002df8 <fly+0x618>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aaa:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8002dd0 <fly+0x5f0>
 8002aae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ab2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ab6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aba:	4bcf      	ldr	r3, [pc, #828]	; (8002df8 <fly+0x618>)
 8002abc:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = limit(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8002ac0:	4bcd      	ldr	r3, [pc, #820]	; (8002df8 <fly+0x618>)
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	4bcd      	ldr	r3, [pc, #820]	; (8002dfc <fly+0x61c>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ed9f 6acc 	vldr	s12, [pc, #816]	; 8002e00 <fly+0x620>
 8002ad0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002ad4:	4bc9      	ldr	r3, [pc, #804]	; (8002dfc <fly+0x61c>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	eddf 5aca 	vldr	s11, [pc, #808]	; 8002e04 <fly+0x624>
 8002ade:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002ae2:	eeb0 1a46 	vmov.f32	s2, s12
 8002ae6:	eef0 0a66 	vmov.f32	s1, s13
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	f7ff f873 	bl	8001bd8 <limit>
 8002af2:	eef0 7a40 	vmov.f32	s15, s0
 8002af6:	4bc0      	ldr	r3, [pc, #768]	; (8002df8 <fly+0x618>)
 8002af8:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8002afc:	4bbe      	ldr	r3, [pc, #760]	; (8002df8 <fly+0x618>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	4bbe      	ldr	r3, [pc, #760]	; (8002dfc <fly+0x61c>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0c:	4bbe      	ldr	r3, [pc, #760]	; (8002e08 <fly+0x628>)
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = limit(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8002b12:	4bbe      	ldr	r3, [pc, #760]	; (8002e0c <fly+0x62c>)
 8002b14:	ed93 7a00 	vldr	s14, [r3]
 8002b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b20:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 8002dec <fly+0x60c>
 8002b24:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8002df0 <fly+0x610>
 8002b28:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2c:	f7ff f854 	bl	8001bd8 <limit>
 8002b30:	eef0 7a40 	vmov.f32	s15, s0
 8002b34:	4bb6      	ldr	r3, [pc, #728]	; (8002e10 <fly+0x630>)
 8002b36:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = limit(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8002b3a:	4bb6      	ldr	r3, [pc, #728]	; (8002e14 <fly+0x634>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8002dec <fly+0x60c>
 8002b4c:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8002df0 <fly+0x610>
 8002b50:	eeb0 0a67 	vmov.f32	s0, s15
 8002b54:	f7ff f840 	bl	8001bd8 <limit>
 8002b58:	eef0 7a40 	vmov.f32	s15, s0
 8002b5c:	4bae      	ldr	r3, [pc, #696]	; (8002e18 <fly+0x638>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 8002b62:	4bae      	ldr	r3, [pc, #696]	; (8002e1c <fly+0x63c>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b74:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8002dd0 <fly+0x5f0>
 8002b78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b84:	4ba5      	ldr	r3, [pc, #660]	; (8002e1c <fly+0x63c>)
 8002b86:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = limit(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8002b8a:	4ba4      	ldr	r3, [pc, #656]	; (8002e1c <fly+0x63c>)
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	4ba3      	ldr	r3, [pc, #652]	; (8002e20 <fly+0x640>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 8002e00 <fly+0x620>
 8002b9a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002b9e:	4ba0      	ldr	r3, [pc, #640]	; (8002e20 <fly+0x640>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	eddf 5a97 	vldr	s11, [pc, #604]	; 8002e04 <fly+0x624>
 8002ba8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002bac:	eeb0 1a46 	vmov.f32	s2, s12
 8002bb0:	eef0 0a66 	vmov.f32	s1, s13
 8002bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb8:	f7ff f80e 	bl	8001bd8 <limit>
 8002bbc:	eef0 7a40 	vmov.f32	s15, s0
 8002bc0:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <fly+0x63c>)
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8002bc6:	4b95      	ldr	r3, [pc, #596]	; (8002e1c <fly+0x63c>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <fly+0x640>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	4b93      	ldr	r3, [pc, #588]	; (8002e24 <fly+0x644>)
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = limit(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8002bdc:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <fly+0x648>)
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8002dec <fly+0x60c>
 8002bee:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002df0 <fly+0x610>
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	f7fe ffef 	bl	8001bd8 <limit>
 8002bfa:	eef0 7a40 	vmov.f32	s15, s0
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <fly+0x64c>)
 8002c00:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = limit(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <fly+0x650>)
 8002c06:	ed93 7a00 	vldr	s14, [r3]
 8002c0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8002e34 <fly+0x654>
 8002c16:	eddf 0a88 	vldr	s1, [pc, #544]	; 8002e38 <fly+0x658>
 8002c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1e:	f7fe ffdb 	bl	8001bd8 <limit>
 8002c22:	eef0 7a40 	vmov.f32	s15, s0
 8002c26:	4b85      	ldr	r3, [pc, #532]	; (8002e3c <fly+0x65c>)
 8002c28:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 8002c2c:	4b84      	ldr	r3, [pc, #528]	; (8002e40 <fly+0x660>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c3e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002dd8 <fly+0x5f8>
 8002c42:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002c46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <fly+0x660>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = limit(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <fly+0x660>)
 8002c56:	ed93 7a00 	vldr	s14, [r3]
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <fly+0x664>)
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8002e00 <fly+0x620>
 8002c64:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <fly+0x664>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	eddf 5a65 	vldr	s11, [pc, #404]	; 8002e04 <fly+0x624>
 8002c72:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002c76:	eeb0 1a46 	vmov.f32	s2, s12
 8002c7a:	eef0 0a66 	vmov.f32	s1, s13
 8002c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c82:	f7fe ffa9 	bl	8001bd8 <limit>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <fly+0x660>)
 8002c8c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <fly+0x660>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <fly+0x664>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca0:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <fly+0x668>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = limit(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8002ca6:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <fly+0x66c>)
 8002ca8:	ed93 7a00 	vldr	s14, [r3]
 8002cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8002e34 <fly+0x654>
 8002cb8:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8002e38 <fly+0x658>
 8002cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc0:	f7fe ff8a 	bl	8001bd8 <limit>
 8002cc4:	eef0 7a40 	vmov.f32	s15, s0
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <fly+0x670>)
 8002cca:	edc3 7a00 	vstr	s15, [r3]

      int throttle = MIN_SPEED + (int)(70.0f*sqrt(g_throttle));
 8002cce:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <fly+0x674>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8002cdc:	f009 f858 	bl	800bd90 <sqrt>
 8002ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ce4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002de0 <fly+0x600>
 8002ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002cf0:	ee17 3a90 	vmov	r3, s15
 8002cf4:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002cf8:	603b      	str	r3, [r7, #0]

      g_sig1 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <fly+0x614>)
 8002d06:	edd3 6a00 	vldr	s13, [r3]
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <fly+0x628>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d14:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <fly+0x630>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <fly+0x638>)
 8002d24:	edd3 6a00 	vldr	s13, [r3]
 8002d28:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <fly+0x644>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <fly+0x64c>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d40:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <fly+0x65c>)
 8002d42:	edd3 6a00 	vldr	s13, [r3]
 8002d46:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <fly+0x668>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <fly+0x670>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <fly+0x678>)
 8002d60:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <fly+0x614>)
 8002d70:	edd3 6a00 	vldr	s13, [r3]
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <fly+0x628>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <fly+0x630>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <fly+0x638>)
 8002d8e:	edd3 6a00 	vldr	s13, [r3]
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <fly+0x644>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <fly+0x64c>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <fly+0x65c>)
 8002dac:	edd3 6a00 	vldr	s13, [r3]
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <fly+0x668>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <fly+0x670>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <fly+0x67c>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
 8002dce:	e047      	b.n	8002e60 <fly+0x680>
 8002dd0:	47ae147b 	.word	0x47ae147b
 8002dd4:	3f647ae1 	.word	0x3f647ae1
	...
 8002de4:	40518000 	.word	0x40518000
 8002de8:	24000004 	.word	0x24000004
 8002dec:	44340000 	.word	0x44340000
 8002df0:	c4340000 	.word	0xc4340000
 8002df4:	24001730 	.word	0x24001730
 8002df8:	24001738 	.word	0x24001738
 8002dfc:	24000008 	.word	0x24000008
 8002e00:	c3700000 	.word	0xc3700000
 8002e04:	43700000 	.word	0x43700000
 8002e08:	24001734 	.word	0x24001734
 8002e0c:	24000010 	.word	0x24000010
 8002e10:	2400173c 	.word	0x2400173c
 8002e14:	24000014 	.word	0x24000014
 8002e18:	24001740 	.word	0x24001740
 8002e1c:	24001748 	.word	0x24001748
 8002e20:	24000018 	.word	0x24000018
 8002e24:	24001744 	.word	0x24001744
 8002e28:	24000020 	.word	0x24000020
 8002e2c:	2400174c 	.word	0x2400174c
 8002e30:	24000024 	.word	0x24000024
 8002e34:	43f00000 	.word	0x43f00000
 8002e38:	c3f00000 	.word	0xc3f00000
 8002e3c:	24001750 	.word	0x24001750
 8002e40:	24001758 	.word	0x24001758
 8002e44:	24001810 	.word	0x24001810
 8002e48:	24001754 	.word	0x24001754
 8002e4c:	24000028 	.word	0x24000028
 8002e50:	2400175c 	.word	0x2400175c
 8002e54:	240017f8 	.word	0x240017f8
 8002e58:	24001760 	.word	0x24001760
 8002e5c:	24001764 	.word	0x24001764
      g_sig3 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e6a:	4bd5      	ldr	r3, [pc, #852]	; (80031c0 <fly+0x9e0>)
 8002e6c:	edd3 6a00 	vldr	s13, [r3]
 8002e70:	4bd4      	ldr	r3, [pc, #848]	; (80031c4 <fly+0x9e4>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e7a:	4bd3      	ldr	r3, [pc, #844]	; (80031c8 <fly+0x9e8>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e88:	4bd0      	ldr	r3, [pc, #832]	; (80031cc <fly+0x9ec>)
 8002e8a:	edd3 6a00 	vldr	s13, [r3]
 8002e8e:	4bd0      	ldr	r3, [pc, #832]	; (80031d0 <fly+0x9f0>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e98:	4bce      	ldr	r3, [pc, #824]	; (80031d4 <fly+0x9f4>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea6:	4bcc      	ldr	r3, [pc, #816]	; (80031d8 <fly+0x9f8>)
 8002ea8:	edd3 6a00 	vldr	s13, [r3]
 8002eac:	4bcb      	ldr	r3, [pc, #812]	; (80031dc <fly+0x9fc>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002eb6:	4bca      	ldr	r3, [pc, #808]	; (80031e0 <fly+0xa00>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	4bc7      	ldr	r3, [pc, #796]	; (80031e4 <fly+0xa04>)
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed4:	4bba      	ldr	r3, [pc, #744]	; (80031c0 <fly+0x9e0>)
 8002ed6:	edd3 6a00 	vldr	s13, [r3]
 8002eda:	4bba      	ldr	r3, [pc, #744]	; (80031c4 <fly+0x9e4>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	; (80031c8 <fly+0x9e8>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef2:	4bb6      	ldr	r3, [pc, #728]	; (80031cc <fly+0x9ec>)
 8002ef4:	edd3 6a00 	vldr	s13, [r3]
 8002ef8:	4bb5      	ldr	r3, [pc, #724]	; (80031d0 <fly+0x9f0>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f02:	4bb4      	ldr	r3, [pc, #720]	; (80031d4 <fly+0x9f4>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f10:	4bb1      	ldr	r3, [pc, #708]	; (80031d8 <fly+0x9f8>)
 8002f12:	edd3 6a00 	vldr	s13, [r3]
 8002f16:	4bb1      	ldr	r3, [pc, #708]	; (80031dc <fly+0x9fc>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f20:	4baf      	ldr	r3, [pc, #700]	; (80031e0 <fly+0xa00>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2e:	4bae      	ldr	r3, [pc, #696]	; (80031e8 <fly+0xa08>)
 8002f30:	edc3 7a00 	vstr	s15, [r3]
      g_sig5 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3e:	4ba0      	ldr	r3, [pc, #640]	; (80031c0 <fly+0x9e0>)
 8002f40:	edd3 6a00 	vldr	s13, [r3]
 8002f44:	4b9f      	ldr	r3, [pc, #636]	; (80031c4 <fly+0x9e4>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <fly+0x9e8>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5c:	4b9b      	ldr	r3, [pc, #620]	; (80031cc <fly+0x9ec>)
 8002f5e:	edd3 6a00 	vldr	s13, [r3]
 8002f62:	4b9b      	ldr	r3, [pc, #620]	; (80031d0 <fly+0x9f0>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f6c:	4b99      	ldr	r3, [pc, #612]	; (80031d4 <fly+0x9f4>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <fly+0x9f8>)
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	4b96      	ldr	r3, [pc, #600]	; (80031dc <fly+0x9fc>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f8a:	4b95      	ldr	r3, [pc, #596]	; (80031e0 <fly+0xa00>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f98:	4b94      	ldr	r3, [pc, #592]	; (80031ec <fly+0xa0c>)
 8002f9a:	edc3 7a00 	vstr	s15, [r3]
      g_sig6 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa8:	4b85      	ldr	r3, [pc, #532]	; (80031c0 <fly+0x9e0>)
 8002faa:	edd3 6a00 	vldr	s13, [r3]
 8002fae:	4b85      	ldr	r3, [pc, #532]	; (80031c4 <fly+0x9e4>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fb8:	4b83      	ldr	r3, [pc, #524]	; (80031c8 <fly+0x9e8>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <fly+0x9ec>)
 8002fc8:	edd3 6a00 	vldr	s13, [r3]
 8002fcc:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <fly+0x9f0>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <fly+0x9f4>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fe4:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <fly+0x9f8>)
 8002fe6:	edd3 6a00 	vldr	s13, [r3]
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <fly+0x9fc>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ff4:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <fly+0xa00>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003002:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <fly+0xa10>)
 8003004:	edc3 7a00 	vstr	s15, [r3]
      g_sig7 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003012:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <fly+0x9e0>)
 8003014:	edd3 6a00 	vldr	s13, [r3]
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <fly+0x9e4>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003022:	4b69      	ldr	r3, [pc, #420]	; (80031c8 <fly+0x9e8>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003030:	4b66      	ldr	r3, [pc, #408]	; (80031cc <fly+0x9ec>)
 8003032:	edd3 6a00 	vldr	s13, [r3]
 8003036:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <fly+0x9f0>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <fly+0x9f4>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800304e:	4b62      	ldr	r3, [pc, #392]	; (80031d8 <fly+0x9f8>)
 8003050:	edd3 6a00 	vldr	s13, [r3]
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <fly+0x9fc>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <fly+0xa00>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306c:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <fly+0xa14>)
 800306e:	edc3 7a00 	vstr	s15, [r3]
      g_sig8 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <fly+0x9e0>)
 800307e:	edd3 6a00 	vldr	s13, [r3]
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <fly+0x9e4>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800308c:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <fly+0x9e8>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <fly+0x9ec>)
 800309c:	edd3 6a00 	vldr	s13, [r3]
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <fly+0x9f0>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030aa:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <fly+0x9f4>)
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <fly+0x9f8>)
 80030ba:	edd3 6a00 	vldr	s13, [r3]
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <fly+0x9fc>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <fly+0xa00>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <fly+0xa18>)
 80030d8:	edc3 7a00 	vstr	s15, [r3]


      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 80030dc:	4b47      	ldr	r3, [pc, #284]	; (80031fc <fly+0xa1c>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8003200 <fly+0xa20>
 80030e6:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003204 <fly+0xa24>
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	f7fe fd73 	bl	8001bd8 <limit>
 80030f2:	eef0 7a40 	vmov.f32	s15, s0
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <fly+0xa1c>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <fly+0xa28>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8003200 <fly+0xa20>
 8003106:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8003204 <fly+0xa24>
 800310a:	eeb0 0a67 	vmov.f32	s0, s15
 800310e:	f7fe fd63 	bl	8001bd8 <limit>
 8003112:	eef0 7a40 	vmov.f32	s15, s0
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <fly+0xa28>)
 8003118:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <fly+0xa04>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8003200 <fly+0xa20>
 8003126:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003204 <fly+0xa24>
 800312a:	eeb0 0a67 	vmov.f32	s0, s15
 800312e:	f7fe fd53 	bl	8001bd8 <limit>
 8003132:	eef0 7a40 	vmov.f32	s15, s0
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <fly+0xa04>)
 8003138:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <fly+0xa08>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8003200 <fly+0xa20>
 8003146:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003204 <fly+0xa24>
 800314a:	eeb0 0a67 	vmov.f32	s0, s15
 800314e:	f7fe fd43 	bl	8001bd8 <limit>
 8003152:	eef0 7a40 	vmov.f32	s15, s0
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <fly+0xa08>)
 8003158:	edc3 7a00 	vstr	s15, [r3]
      g_sig5 = limit(g_sig5, MIN_SPEED, MAX_SPEED);
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <fly+0xa0c>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8003200 <fly+0xa20>
 8003166:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003204 <fly+0xa24>
 800316a:	eeb0 0a67 	vmov.f32	s0, s15
 800316e:	f7fe fd33 	bl	8001bd8 <limit>
 8003172:	eef0 7a40 	vmov.f32	s15, s0
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <fly+0xa0c>)
 8003178:	edc3 7a00 	vstr	s15, [r3]
      g_sig6 = limit(g_sig6, MIN_SPEED, MAX_SPEED);
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <fly+0xa10>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8003200 <fly+0xa20>
 8003186:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8003204 <fly+0xa24>
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	f7fe fd23 	bl	8001bd8 <limit>
 8003192:	eef0 7a40 	vmov.f32	s15, s0
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <fly+0xa10>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
      g_sig7 = limit(g_sig7, MIN_SPEED, MAX_SPEED);
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <fly+0xa14>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8003200 <fly+0xa20>
 80031a6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003204 <fly+0xa24>
 80031aa:	eeb0 0a67 	vmov.f32	s0, s15
 80031ae:	f7fe fd13 	bl	8001bd8 <limit>
 80031b2:	eef0 7a40 	vmov.f32	s15, s0
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <fly+0xa14>)
 80031b8:	edc3 7a00 	vstr	s15, [r3]
 80031bc:	e026      	b.n	800320c <fly+0xa2c>
 80031be:	bf00      	nop
 80031c0:	24001730 	.word	0x24001730
 80031c4:	24001734 	.word	0x24001734
 80031c8:	2400173c 	.word	0x2400173c
 80031cc:	24001740 	.word	0x24001740
 80031d0:	24001744 	.word	0x24001744
 80031d4:	2400174c 	.word	0x2400174c
 80031d8:	24001750 	.word	0x24001750
 80031dc:	24001754 	.word	0x24001754
 80031e0:	2400175c 	.word	0x2400175c
 80031e4:	24001768 	.word	0x24001768
 80031e8:	2400176c 	.word	0x2400176c
 80031ec:	24001770 	.word	0x24001770
 80031f0:	24001774 	.word	0x24001774
 80031f4:	24001778 	.word	0x24001778
 80031f8:	2400177c 	.word	0x2400177c
 80031fc:	24001760 	.word	0x24001760
 8003200:	45960000 	.word	0x45960000
 8003204:	45160000 	.word	0x45160000
 8003208:	24001764 	.word	0x24001764
      g_sig8 = limit(g_sig8, MIN_SPEED, MAX_SPEED);
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <fly+0xb30>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8003314 <fly+0xb34>
 8003216:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003318 <fly+0xb38>
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	f7fe fcdb 	bl	8001bd8 <limit>
 8003222:	eef0 7a40 	vmov.f32	s15, s0
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <fly+0xb30>)
 8003228:	edc3 7a00 	vstr	s15, [r3]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4, g_sig5, g_sig6, g_sig7, g_sig8);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <fly+0xb3c>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <fly+0xb40>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <fly+0xb44>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <fly+0xb48>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	eefc 5ae7 	vcvt.u32.f32	s11, s15
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <fly+0xb4c>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325e:	ee17 2a90 	vmov	r2, s15
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <fly+0xb50>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800326c:	ee17 1a90 	vmov	r1, s15
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <fly+0xb54>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327a:	ee17 0a90 	vmov	r0, s15
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <fly+0xb30>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	9002      	str	r0, [sp, #8]
 8003290:	9101      	str	r1, [sp, #4]
 8003292:	9200      	str	r2, [sp, #0]
 8003294:	ee15 3a90 	vmov	r3, s11
 8003298:	ee16 2a10 	vmov	r2, s12
 800329c:	ee16 1a90 	vmov	r1, s13
 80032a0:	ee17 0a10 	vmov	r0, s14
 80032a4:	f7fe fffc 	bl	80022a0 <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <fly+0xb58>)
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	d802      	bhi.n	80032be <fly+0xade>
        fly_mode = init;
 80032b8:	4b20      	ldr	r3, [pc, #128]	; (800333c <fly+0xb5c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 80032be:	edd7 7a01 	vldr	s15, [r7, #4]
 80032c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003340 <fly+0xb60>
 80032c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	d41b      	bmi.n	8003308 <fly+0xb28>
 80032d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003344 <fly+0xb64>
 80032d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	dc12      	bgt.n	8003308 <fly+0xb28>
 80032e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003340 <fly+0xb60>
 80032ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d409      	bmi.n	8003308 <fly+0xb28>
 80032f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003344 <fly+0xb64>
 80032fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	dc00      	bgt.n	8003308 <fly+0xb28>
        fly_mode = init;
      }

      break;
 8003306:	e11e      	b.n	8003546 <fly+0xd66>
        fly_mode = init;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <fly+0xb5c>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
      break;
 800330e:	e11a      	b.n	8003546 <fly+0xd66>
 8003310:	2400177c 	.word	0x2400177c
 8003314:	45960000 	.word	0x45960000
 8003318:	45160000 	.word	0x45160000
 800331c:	24001760 	.word	0x24001760
 8003320:	24001764 	.word	0x24001764
 8003324:	24001768 	.word	0x24001768
 8003328:	2400176c 	.word	0x2400176c
 800332c:	24001770 	.word	0x24001770
 8003330:	24001774 	.word	0x24001774
 8003334:	24001778 	.word	0x24001778
 8003338:	240017f8 	.word	0x240017f8
 800333c:	24000000 	.word	0x24000000
 8003340:	c2b40000 	.word	0xc2b40000
 8003344:	42b40000 	.word	0x42b40000
//      g_sig4 = MIN_SPEED - 100 + limit(5*g_yaw, 0, 4800);
//      g_sig5 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig6 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig7 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
//      g_sig8 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
      g_sig1 = limit(0 + 12*g_throttle, 0, 4800);
 8003348:	4ba5      	ldr	r3, [pc, #660]	; (80035e0 <fly+0xe00>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003356:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80035e4 <fly+0xe04>
 800335a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800335e:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 80035e8 <fly+0xe08>
 8003362:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80035e4 <fly+0xe04>
 8003366:	eeb0 0a67 	vmov.f32	s0, s15
 800336a:	f7fe fc35 	bl	8001bd8 <limit>
 800336e:	eef0 7a40 	vmov.f32	s15, s0
 8003372:	4b9e      	ldr	r3, [pc, #632]	; (80035ec <fly+0xe0c>)
 8003374:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(0 + 12*g_throttle, 0, 4800);
 8003378:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <fly+0xe00>)
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003386:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80035e4 <fly+0xe04>
 800338a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800338e:	ed9f 1a96 	vldr	s2, [pc, #600]	; 80035e8 <fly+0xe08>
 8003392:	eddf 0a94 	vldr	s1, [pc, #592]	; 80035e4 <fly+0xe04>
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	f7fe fc1d 	bl	8001bd8 <limit>
 800339e:	eef0 7a40 	vmov.f32	s15, s0
 80033a2:	4b93      	ldr	r3, [pc, #588]	; (80035f0 <fly+0xe10>)
 80033a4:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(0 + 12*g_throttle, 0, 4800);
 80033a8:	4b8d      	ldr	r3, [pc, #564]	; (80035e0 <fly+0xe00>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80033b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80035e4 <fly+0xe04>
 80033ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033be:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 80035e8 <fly+0xe08>
 80033c2:	eddf 0a88 	vldr	s1, [pc, #544]	; 80035e4 <fly+0xe04>
 80033c6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ca:	f7fe fc05 	bl	8001bd8 <limit>
 80033ce:	eef0 7a40 	vmov.f32	s15, s0
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <fly+0xe14>)
 80033d4:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(0 + 12*g_throttle, 0, 4800);
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <fly+0xe00>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80033e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80035e4 <fly+0xe04>
 80033ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ee:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 80035e8 <fly+0xe08>
 80033f2:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80035e4 <fly+0xe04>
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	f7fe fbed 	bl	8001bd8 <limit>
 80033fe:	eef0 7a40 	vmov.f32	s15, s0
 8003402:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <fly+0xe18>)
 8003404:	edc3 7a00 	vstr	s15, [r3]
      g_sig5 = limit(0 + 12*g_throttle, 0, 4800);
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <fly+0xe00>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003416:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80035e4 <fly+0xe04>
 800341a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800341e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 80035e8 <fly+0xe08>
 8003422:	eddf 0a70 	vldr	s1, [pc, #448]	; 80035e4 <fly+0xe04>
 8003426:	eeb0 0a67 	vmov.f32	s0, s15
 800342a:	f7fe fbd5 	bl	8001bd8 <limit>
 800342e:	eef0 7a40 	vmov.f32	s15, s0
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <fly+0xe1c>)
 8003434:	edc3 7a00 	vstr	s15, [r3]
      g_sig6 = limit(0 + 12*g_throttle, 0, 4800);
 8003438:	4b69      	ldr	r3, [pc, #420]	; (80035e0 <fly+0xe00>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003446:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80035e4 <fly+0xe04>
 800344a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800344e:	ed9f 1a66 	vldr	s2, [pc, #408]	; 80035e8 <fly+0xe08>
 8003452:	eddf 0a64 	vldr	s1, [pc, #400]	; 80035e4 <fly+0xe04>
 8003456:	eeb0 0a67 	vmov.f32	s0, s15
 800345a:	f7fe fbbd 	bl	8001bd8 <limit>
 800345e:	eef0 7a40 	vmov.f32	s15, s0
 8003462:	4b67      	ldr	r3, [pc, #412]	; (8003600 <fly+0xe20>)
 8003464:	edc3 7a00 	vstr	s15, [r3]
      g_sig7 = limit(0 + 12*g_throttle, 0, 4800);
 8003468:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <fly+0xe00>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003476:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80035e4 <fly+0xe04>
 800347a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800347e:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 80035e8 <fly+0xe08>
 8003482:	eddf 0a58 	vldr	s1, [pc, #352]	; 80035e4 <fly+0xe04>
 8003486:	eeb0 0a67 	vmov.f32	s0, s15
 800348a:	f7fe fba5 	bl	8001bd8 <limit>
 800348e:	eef0 7a40 	vmov.f32	s15, s0
 8003492:	4b5c      	ldr	r3, [pc, #368]	; (8003604 <fly+0xe24>)
 8003494:	edc3 7a00 	vstr	s15, [r3]
      g_sig8 = limit(0 + 12*g_throttle, 0, 4800);
 8003498:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <fly+0xe00>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80034a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80035e4 <fly+0xe04>
 80034aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ae:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 80035e8 <fly+0xe08>
 80034b2:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80035e4 <fly+0xe04>
 80034b6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ba:	f7fe fb8d 	bl	8001bd8 <limit>
 80034be:	eef0 7a40 	vmov.f32	s15, s0
 80034c2:	4b51      	ldr	r3, [pc, #324]	; (8003608 <fly+0xe28>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
      // Pull down the stick to stop
//      if (g_throttle <= MIN_THROTTLE) {
//        fly_mode = init;
//      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4, g_sig5, g_sig6, g_sig7, g_sig8);
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <fly+0xe0c>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <fly+0xe10>)
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <fly+0xe14>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <fly+0xe18>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	eefc 5ae7 	vcvt.u32.f32	s11, s15
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <fly+0xe1c>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fa:	ee17 2a90 	vmov	r2, s15
 80034fe:	4b40      	ldr	r3, [pc, #256]	; (8003600 <fly+0xe20>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003508:	ee17 1a90 	vmov	r1, s15
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <fly+0xe24>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <fly+0xe28>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003524:	ee17 3a90 	vmov	r3, s15
 8003528:	9303      	str	r3, [sp, #12]
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	9101      	str	r1, [sp, #4]
 800352e:	9200      	str	r2, [sp, #0]
 8003530:	ee15 3a90 	vmov	r3, s11
 8003534:	ee16 2a10 	vmov	r2, s12
 8003538:	ee16 1a90 	vmov	r1, s13
 800353c:	ee17 0a10 	vmov	r0, s14
 8003540:	f7fe feae 	bl	80022a0 <set_speed>
      break;
 8003544:	bf00      	nop
  monitor[7] = g_sig8;
  monitor[8] = g_sig8;
#endif

#if MONITOR == 6
  monitor[0] = g_mpu6050.angle_x;
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <fly+0xe2c>)
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <fly+0xe30>)
 800354c:	6013      	str	r3, [r2, #0]
  monitor[1] = g_mpu6050.angle_y;
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <fly+0xe2c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <fly+0xe30>)
 8003554:	6053      	str	r3, [r2, #4]
  monitor[2] = g_mpu6050.angle_z;
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <fly+0xe2c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a2d      	ldr	r2, [pc, #180]	; (8003610 <fly+0xe30>)
 800355c:	6093      	str	r3, [r2, #8]
  monitor[3] = g_mpu6050.gx;
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <fly+0xe2c>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <fly+0xe30>)
 8003564:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_mpu6050.gy;
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <fly+0xe2c>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <fly+0xe30>)
 800356c:	6113      	str	r3, [r2, #16]
  monitor[5] = g_mpu6050.gz;
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <fly+0xe2c>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4a27      	ldr	r2, [pc, #156]	; (8003610 <fly+0xe30>)
 8003574:	6153      	str	r3, [r2, #20]
  monitor[6] = ((float)g_ms5611.P/100.0f - 984)*1000;
 8003576:	4b27      	ldr	r3, [pc, #156]	; (8003614 <fly+0xe34>)
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003582:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003618 <fly+0xe38>
 8003586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800361c <fly+0xe3c>
 800358e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003592:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003620 <fly+0xe40>
 8003596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <fly+0xe30>)
 800359c:	edc3 7a06 	vstr	s15, [r3, #24]
  monitor[7] = (g_ms5611.fast_pressure - 984)*1000;
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <fly+0xe34>)
 80035a2:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 80035a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800361c <fly+0xe3c>
 80035aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003620 <fly+0xe40>
 80035b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <fly+0xe30>)
 80035b8:	edc3 7a07 	vstr	s15, [r3, #28]
  monitor[8] = (g_ms5611.slow_pressure - 984)*1000;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <fly+0xe34>)
 80035be:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80035c2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800361c <fly+0xe3c>
 80035c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003620 <fly+0xe40>
 80035ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <fly+0xe30>)
 80035d4:	edc3 7a08 	vstr	s15, [r3, #32]
#endif
}
 80035d8:	bf00      	nop
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	240017f8 	.word	0x240017f8
 80035e4:	00000000 	.word	0x00000000
 80035e8:	45960000 	.word	0x45960000
 80035ec:	24001760 	.word	0x24001760
 80035f0:	24001764 	.word	0x24001764
 80035f4:	24001768 	.word	0x24001768
 80035f8:	2400176c 	.word	0x2400176c
 80035fc:	24001770 	.word	0x24001770
 8003600:	24001774 	.word	0x24001774
 8003604:	24001778 	.word	0x24001778
 8003608:	2400177c 	.word	0x2400177c
 800360c:	24001400 	.word	0x24001400
 8003610:	24001818 	.word	0x24001818
 8003614:	24001530 	.word	0x24001530
 8003618:	42c80000 	.word	0x42c80000
 800361c:	44760000 	.word	0x44760000
 8003620:	447a0000 	.word	0x447a0000

08003624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <SystemInit+0xec>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	4a38      	ldr	r2, [pc, #224]	; (8003710 <SystemInit+0xec>)
 8003630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <SystemInit+0xf0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	2b06      	cmp	r3, #6
 8003642:	d807      	bhi.n	8003654 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <SystemInit+0xf0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 030f 	bic.w	r3, r3, #15
 800364c:	4a31      	ldr	r2, [pc, #196]	; (8003714 <SystemInit+0xf0>)
 800364e:	f043 0307 	orr.w	r3, r3, #7
 8003652:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <SystemInit+0xf4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2f      	ldr	r2, [pc, #188]	; (8003718 <SystemInit+0xf4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <SystemInit+0xf4>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <SystemInit+0xf4>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	492b      	ldr	r1, [pc, #172]	; (8003718 <SystemInit+0xf4>)
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <SystemInit+0xf8>)
 800366e:	4013      	ands	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003672:	4b28      	ldr	r3, [pc, #160]	; (8003714 <SystemInit+0xf0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <SystemInit+0xf0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 030f 	bic.w	r3, r3, #15
 8003686:	4a23      	ldr	r2, [pc, #140]	; (8003714 <SystemInit+0xf0>)
 8003688:	f043 0307 	orr.w	r3, r3, #7
 800368c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <SystemInit+0xf4>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <SystemInit+0xf4>)
 8003696:	2200      	movs	r2, #0
 8003698:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <SystemInit+0xf4>)
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <SystemInit+0xf4>)
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <SystemInit+0xfc>)
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <SystemInit+0xf4>)
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <SystemInit+0x100>)
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <SystemInit+0xf4>)
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <SystemInit+0x104>)
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <SystemInit+0xf4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <SystemInit+0xf4>)
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <SystemInit+0x104>)
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <SystemInit+0xf4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <SystemInit+0xf4>)
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <SystemInit+0x104>)
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <SystemInit+0xf4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <SystemInit+0xf4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a10      	ldr	r2, [pc, #64]	; (8003718 <SystemInit+0xf4>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <SystemInit+0xf4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <SystemInit+0x108>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <SystemInit+0x10c>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ee:	d202      	bcs.n	80036f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <SystemInit+0x110>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <SystemInit+0x114>)
 80036f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SystemInit+0xec>)
 8003700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003704:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00
 8003714:	52002000 	.word	0x52002000
 8003718:	58024400 	.word	0x58024400
 800371c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003720:	02020200 	.word	0x02020200
 8003724:	01ff0000 	.word	0x01ff0000
 8003728:	01010280 	.word	0x01010280
 800372c:	5c001000 	.word	0x5c001000
 8003730:	ffff0000 	.word	0xffff0000
 8003734:	51008108 	.word	0x51008108
 8003738:	52004000 	.word	0x52004000

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003740:	f7ff ff70 	bl	8003624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003746:	e003      	b.n	8003750 <LoopCopyDataInit>

08003748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800374a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800374c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800374e:	3104      	adds	r1, #4

08003750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003758:	d3f6      	bcc.n	8003748 <CopyDataInit>
  ldr  r2, =_sbss
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800375c:	e002      	b.n	8003764 <LoopFillZerobss>

0800375e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800375e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003760:	f842 3b04 	str.w	r3, [r2], #4

08003764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003768:	d3f9      	bcc.n	800375e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800376a:	f007 ffe5 	bl	800b738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7fc ffdf 	bl	8000730 <main>
  bx  lr    
 8003772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003774:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003778:	0800e738 	.word	0x0800e738
  ldr  r0, =_sdata
 800377c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003780:	240000a0 	.word	0x240000a0
  ldr  r2, =_sbss
 8003784:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 8003788:	24001840 	.word	0x24001840

0800378c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC3_IRQHandler>
	...

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003796:	2003      	movs	r0, #3
 8003798:	f000 f98c 	bl	8003ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800379c:	f002 fe4e 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_Init+0x68>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_Init+0x6c>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_Init+0x68>)
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_Init+0x6c>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_Init+0x70>)
 80037d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_Init+0x74>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037da:	2000      	movs	r0, #0
 80037dc:	f000 f814 	bl	8003808 <HAL_InitTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e002      	b.n	80037f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037ea:	f7fe fa1f 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	0800cc58 	.word	0x0800cc58
 8003800:	24000030 	.word	0x24000030
 8003804:	2400002c 	.word	0x2400002c

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_InitTick+0x60>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e021      	b.n	8003860 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_InitTick+0x64>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_InitTick+0x60>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382a:	fbb3 f3f1 	udiv	r3, r3, r1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f971 	bl	8003b1a <HAL_SYSTICK_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00e      	b.n	8003860 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d80a      	bhi.n	800385e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003848:	2200      	movs	r2, #0
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003850:	f000 f93b 	bl	8003aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003854:	4a06      	ldr	r2, [pc, #24]	; (8003870 <HAL_InitTick+0x68>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	24000038 	.word	0x24000038
 800386c:	2400002c 	.word	0x2400002c
 8003870:	24000034 	.word	0x24000034

08003874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x20>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_IncTick+0x24>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4413      	add	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_IncTick+0x24>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	24000038 	.word	0x24000038
 8003898:	2400183c 	.word	0x2400183c

0800389c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_GetTick+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2400183c 	.word	0x2400183c

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff ffee 	bl	800389c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038da:	bf00      	nop
 80038dc:	f7ff ffde 	bl	800389c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	24000038 	.word	0x24000038

080038fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_GetREVID+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0c1b      	lsrs	r3, r3, #16
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	5c001000 	.word	0x5c001000

08003914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <__NVIC_SetPriorityGrouping+0x40>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <__NVIC_SetPriorityGrouping+0x44>)
 800393e:	4313      	orrs	r3, r2
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <__NVIC_SetPriorityGrouping+0x40>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00
 8003958:	05fa0000 	.word	0x05fa0000

0800395c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <__NVIC_GetPriorityGrouping+0x18>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 0307 	and.w	r3, r3, #7
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	db0b      	blt.n	80039a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	4907      	ldr	r1, [pc, #28]	; (80039b0 <__NVIC_EnableIRQ+0x38>)
 8003992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2001      	movs	r0, #1
 800399a:	fa00 f202 	lsl.w	r2, r0, r2
 800399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	e000e100 	.word	0xe000e100

080039b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	6039      	str	r1, [r7, #0]
 80039be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	db0a      	blt.n	80039de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	490c      	ldr	r1, [pc, #48]	; (8003a00 <__NVIC_SetPriority+0x4c>)
 80039ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	440b      	add	r3, r1
 80039d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039dc:	e00a      	b.n	80039f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4908      	ldr	r1, [pc, #32]	; (8003a04 <__NVIC_SetPriority+0x50>)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	3b04      	subs	r3, #4
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	440b      	add	r3, r1
 80039f2:	761a      	strb	r2, [r3, #24]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000e100 	.word	0xe000e100
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f1c3 0307 	rsb	r3, r3, #7
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	bf28      	it	cs
 8003a26:	2304      	movcs	r3, #4
 8003a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d902      	bls.n	8003a38 <NVIC_EncodePriority+0x30>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3b03      	subs	r3, #3
 8003a36:	e000      	b.n	8003a3a <NVIC_EncodePriority+0x32>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43da      	mvns	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	43d9      	mvns	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	4313      	orrs	r3, r2
         );
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a80:	d301      	bcc.n	8003a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a82:	2301      	movs	r3, #1
 8003a84:	e00f      	b.n	8003aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <SysTick_Config+0x40>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8e:	210f      	movs	r1, #15
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a94:	f7ff ff8e 	bl	80039b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <SysTick_Config+0x40>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <SysTick_Config+0x40>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff29 	bl	8003914 <__NVIC_SetPriorityGrouping>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff40 	bl	800395c <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff90 	bl	8003a08 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5f 	bl	80039b4 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff33 	bl	8003978 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa4 	bl	8003a70 <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff feae 	bl	800389c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e2dc      	b.n	8004106 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e2cd      	b.n	8004106 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a76      	ldr	r2, [pc, #472]	; (8003d48 <HAL_DMA_Abort+0x214>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04a      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a74      	ldr	r2, [pc, #464]	; (8003d4c <HAL_DMA_Abort+0x218>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d045      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <HAL_DMA_Abort+0x21c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a71      	ldr	r2, [pc, #452]	; (8003d54 <HAL_DMA_Abort+0x220>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_DMA_Abort+0x224>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d036      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6e      	ldr	r2, [pc, #440]	; (8003d5c <HAL_DMA_Abort+0x228>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6d      	ldr	r2, [pc, #436]	; (8003d60 <HAL_DMA_Abort+0x22c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d02c      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	; (8003d64 <HAL_DMA_Abort+0x230>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d027      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <HAL_DMA_Abort+0x234>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_DMA_Abort+0x238>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a67      	ldr	r2, [pc, #412]	; (8003d70 <HAL_DMA_Abort+0x23c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_DMA_Abort+0x240>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a64      	ldr	r2, [pc, #400]	; (8003d78 <HAL_DMA_Abort+0x244>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <HAL_DMA_Abort+0x248>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_DMA_Abort+0x24c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_Abort+0xd6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5f      	ldr	r2, [pc, #380]	; (8003d84 <HAL_DMA_Abort+0x250>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_DMA_Abort+0xda>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_DMA_Abort+0xdc>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 021e 	bic.w	r2, r2, #30
 8003c22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e00a      	b.n	8003c52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 020e 	bic.w	r2, r2, #14
 8003c4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <HAL_DMA_Abort+0x214>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d072      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <HAL_DMA_Abort+0x218>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d06d      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a39      	ldr	r2, [pc, #228]	; (8003d50 <HAL_DMA_Abort+0x21c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d068      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a37      	ldr	r2, [pc, #220]	; (8003d54 <HAL_DMA_Abort+0x220>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d063      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a36      	ldr	r2, [pc, #216]	; (8003d58 <HAL_DMA_Abort+0x224>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d05e      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a34      	ldr	r2, [pc, #208]	; (8003d5c <HAL_DMA_Abort+0x228>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d059      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a33      	ldr	r2, [pc, #204]	; (8003d60 <HAL_DMA_Abort+0x22c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d054      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a31      	ldr	r2, [pc, #196]	; (8003d64 <HAL_DMA_Abort+0x230>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d04f      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a30      	ldr	r2, [pc, #192]	; (8003d68 <HAL_DMA_Abort+0x234>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2e      	ldr	r2, [pc, #184]	; (8003d6c <HAL_DMA_Abort+0x238>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2d      	ldr	r2, [pc, #180]	; (8003d70 <HAL_DMA_Abort+0x23c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <HAL_DMA_Abort+0x240>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_DMA_Abort+0x244>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <HAL_DMA_Abort+0x248>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <HAL_DMA_Abort+0x24c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <HAL_DMA_Abort+0x250>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <HAL_DMA_Abort+0x254>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_DMA_Abort+0x258>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <HAL_DMA_Abort+0x25c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_DMA_Abort+0x260>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_DMA_Abort+0x264>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_DMA_Abort+0x268>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_DMA_Abort+0x26c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_Abort+0x20e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_DMA_Abort+0x270>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d132      	bne.n	8003da8 <HAL_DMA_Abort+0x274>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e031      	b.n	8003daa <HAL_DMA_Abort+0x276>
 8003d46:	bf00      	nop
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	58025408 	.word	0x58025408
 8003d8c:	5802541c 	.word	0x5802541c
 8003d90:	58025430 	.word	0x58025430
 8003d94:	58025444 	.word	0x58025444
 8003d98:	58025458 	.word	0x58025458
 8003d9c:	5802546c 	.word	0x5802546c
 8003da0:	58025480 	.word	0x58025480
 8003da4:	58025494 	.word	0x58025494
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6d      	ldr	r2, [pc, #436]	; (8003f78 <HAL_DMA_Abort+0x444>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <HAL_DMA_Abort+0x448>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6a      	ldr	r2, [pc, #424]	; (8003f80 <HAL_DMA_Abort+0x44c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	; (8003f84 <HAL_DMA_Abort+0x450>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a67      	ldr	r2, [pc, #412]	; (8003f88 <HAL_DMA_Abort+0x454>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a65      	ldr	r2, [pc, #404]	; (8003f8c <HAL_DMA_Abort+0x458>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a64      	ldr	r2, [pc, #400]	; (8003f90 <HAL_DMA_Abort+0x45c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a62      	ldr	r2, [pc, #392]	; (8003f94 <HAL_DMA_Abort+0x460>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a61      	ldr	r2, [pc, #388]	; (8003f98 <HAL_DMA_Abort+0x464>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <HAL_DMA_Abort+0x468>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_DMA_Abort+0x46c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a5c      	ldr	r2, [pc, #368]	; (8003fa4 <HAL_DMA_Abort+0x470>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a5b      	ldr	r2, [pc, #364]	; (8003fa8 <HAL_DMA_Abort+0x474>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a59      	ldr	r2, [pc, #356]	; (8003fac <HAL_DMA_Abort+0x478>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_DMA_Abort+0x47c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_Abort+0x32a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a56      	ldr	r2, [pc, #344]	; (8003fb4 <HAL_DMA_Abort+0x480>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_Abort+0x33c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e007      	b.n	8003e80 <HAL_DMA_Abort+0x34c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e80:	e013      	b.n	8003eaa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e82:	f7ff fd0b 	bl	800389c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d90c      	bls.n	8003eaa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2203      	movs	r2, #3
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e12d      	b.n	8004106 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_DMA_Abort+0x444>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d04a      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_DMA_Abort+0x448>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d045      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <HAL_DMA_Abort+0x44c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d040      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <HAL_DMA_Abort+0x450>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d03b      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_DMA_Abort+0x454>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d036      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_DMA_Abort+0x458>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d031      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_DMA_Abort+0x45c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d02c      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <HAL_DMA_Abort+0x460>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <HAL_DMA_Abort+0x464>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_DMA_Abort+0x468>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_DMA_Abort+0x46c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <HAL_DMA_Abort+0x470>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_DMA_Abort+0x474>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_DMA_Abort+0x478>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_DMA_Abort+0x47c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DMA_Abort+0x422>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_DMA_Abort+0x480>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_DMA_Abort+0x426>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_DMA_Abort+0x428>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02b      	beq.n	8003fb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	223f      	movs	r2, #63	; 0x3f
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	e02a      	b.n	8003fce <HAL_DMA_Abort+0x49a>
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_DMA_Abort+0x5dc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d072      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <HAL_DMA_Abort+0x5e0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d06d      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <HAL_DMA_Abort+0x5e4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d068      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_DMA_Abort+0x5e8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d063      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_DMA_Abort+0x5ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d05e      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a47      	ldr	r2, [pc, #284]	; (8004124 <HAL_DMA_Abort+0x5f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d059      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_DMA_Abort+0x5f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d054      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a44      	ldr	r2, [pc, #272]	; (800412c <HAL_DMA_Abort+0x5f8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04f      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_DMA_Abort+0x5fc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d04a      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a41      	ldr	r2, [pc, #260]	; (8004134 <HAL_DMA_Abort+0x600>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d045      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a40      	ldr	r2, [pc, #256]	; (8004138 <HAL_DMA_Abort+0x604>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d040      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a3e      	ldr	r2, [pc, #248]	; (800413c <HAL_DMA_Abort+0x608>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d03b      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3d      	ldr	r2, [pc, #244]	; (8004140 <HAL_DMA_Abort+0x60c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d036      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3b      	ldr	r2, [pc, #236]	; (8004144 <HAL_DMA_Abort+0x610>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d031      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a3a      	ldr	r2, [pc, #232]	; (8004148 <HAL_DMA_Abort+0x614>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d02c      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_DMA_Abort+0x618>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d027      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a37      	ldr	r2, [pc, #220]	; (8004150 <HAL_DMA_Abort+0x61c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a35      	ldr	r2, [pc, #212]	; (8004154 <HAL_DMA_Abort+0x620>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01d      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a34      	ldr	r2, [pc, #208]	; (8004158 <HAL_DMA_Abort+0x624>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a32      	ldr	r2, [pc, #200]	; (800415c <HAL_DMA_Abort+0x628>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a31      	ldr	r2, [pc, #196]	; (8004160 <HAL_DMA_Abort+0x62c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_DMA_Abort+0x630>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2e      	ldr	r2, [pc, #184]	; (8004168 <HAL_DMA_Abort+0x634>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_DMA_Abort+0x58a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	; (800416c <HAL_DMA_Abort+0x638>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA_Abort+0x58e>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_DMA_Abort+0x590>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40020010 	.word	0x40020010
 8004114:	40020028 	.word	0x40020028
 8004118:	40020040 	.word	0x40020040
 800411c:	40020058 	.word	0x40020058
 8004120:	40020070 	.word	0x40020070
 8004124:	40020088 	.word	0x40020088
 8004128:	400200a0 	.word	0x400200a0
 800412c:	400200b8 	.word	0x400200b8
 8004130:	40020410 	.word	0x40020410
 8004134:	40020428 	.word	0x40020428
 8004138:	40020440 	.word	0x40020440
 800413c:	40020458 	.word	0x40020458
 8004140:	40020470 	.word	0x40020470
 8004144:	40020488 	.word	0x40020488
 8004148:	400204a0 	.word	0x400204a0
 800414c:	400204b8 	.word	0x400204b8
 8004150:	58025408 	.word	0x58025408
 8004154:	5802541c 	.word	0x5802541c
 8004158:	58025430 	.word	0x58025430
 800415c:	58025444 	.word	0x58025444
 8004160:	58025458 	.word	0x58025458
 8004164:	5802546c 	.word	0x5802546c
 8004168:	58025480 	.word	0x58025480
 800416c:	58025494 	.word	0x58025494

08004170 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e237      	b.n	80045f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d004      	beq.n	8004198 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e22c      	b.n	80045f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5c      	ldr	r2, [pc, #368]	; (8004310 <HAL_DMA_Abort_IT+0x1a0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04a      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_DMA_Abort_IT+0x1a4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d045      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a59      	ldr	r2, [pc, #356]	; (8004318 <HAL_DMA_Abort_IT+0x1a8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d040      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_DMA_Abort_IT+0x1ac>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d03b      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_DMA_Abort_IT+0x1b0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d036      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a55      	ldr	r2, [pc, #340]	; (8004324 <HAL_DMA_Abort_IT+0x1b4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d031      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a53      	ldr	r2, [pc, #332]	; (8004328 <HAL_DMA_Abort_IT+0x1b8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d02c      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a52      	ldr	r2, [pc, #328]	; (800432c <HAL_DMA_Abort_IT+0x1bc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d027      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a50      	ldr	r2, [pc, #320]	; (8004330 <HAL_DMA_Abort_IT+0x1c0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a4f      	ldr	r2, [pc, #316]	; (8004334 <HAL_DMA_Abort_IT+0x1c4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d01d      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a4d      	ldr	r2, [pc, #308]	; (8004338 <HAL_DMA_Abort_IT+0x1c8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4c      	ldr	r2, [pc, #304]	; (800433c <HAL_DMA_Abort_IT+0x1cc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_DMA_Abort_IT+0x1d0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a49      	ldr	r2, [pc, #292]	; (8004344 <HAL_DMA_Abort_IT+0x1d4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a47      	ldr	r2, [pc, #284]	; (8004348 <HAL_DMA_Abort_IT+0x1d8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_DMA_Abort_IT+0xc8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a46      	ldr	r2, [pc, #280]	; (800434c <HAL_DMA_Abort_IT+0x1dc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <HAL_DMA_Abort_IT+0xcc>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_DMA_Abort_IT+0xce>
 800423c:	2300      	movs	r3, #0
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8086 	beq.w	8004350 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <HAL_DMA_Abort_IT+0x1a0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d04a      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <HAL_DMA_Abort_IT+0x1a4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d045      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_DMA_Abort_IT+0x1a8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d040      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2b      	ldr	r2, [pc, #172]	; (800431c <HAL_DMA_Abort_IT+0x1ac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d03b      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a29      	ldr	r2, [pc, #164]	; (8004320 <HAL_DMA_Abort_IT+0x1b0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d036      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a28      	ldr	r2, [pc, #160]	; (8004324 <HAL_DMA_Abort_IT+0x1b4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d031      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <HAL_DMA_Abort_IT+0x1b8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02c      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <HAL_DMA_Abort_IT+0x1bc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d027      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_DMA_Abort_IT+0x1c0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d022      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a22      	ldr	r2, [pc, #136]	; (8004334 <HAL_DMA_Abort_IT+0x1c4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d01d      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_DMA_Abort_IT+0x1c8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_DMA_Abort_IT+0x1cc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_DMA_Abort_IT+0x1d0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_DMA_Abort_IT+0x1d4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <HAL_DMA_Abort_IT+0x1d8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_Abort_IT+0x17c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_DMA_Abort_IT+0x1dc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <HAL_DMA_Abort_IT+0x18e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e178      	b.n	80045f0 <HAL_DMA_Abort_IT+0x480>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e16f      	b.n	80045f0 <HAL_DMA_Abort_IT+0x480>
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020e 	bic.w	r2, r2, #14
 800435e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6c      	ldr	r2, [pc, #432]	; (8004518 <HAL_DMA_Abort_IT+0x3a8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d04a      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6b      	ldr	r2, [pc, #428]	; (800451c <HAL_DMA_Abort_IT+0x3ac>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d045      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_DMA_Abort_IT+0x3b0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d040      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a68      	ldr	r2, [pc, #416]	; (8004524 <HAL_DMA_Abort_IT+0x3b4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d03b      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a66      	ldr	r2, [pc, #408]	; (8004528 <HAL_DMA_Abort_IT+0x3b8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a65      	ldr	r2, [pc, #404]	; (800452c <HAL_DMA_Abort_IT+0x3bc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d031      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_DMA_Abort_IT+0x3c0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a62      	ldr	r2, [pc, #392]	; (8004534 <HAL_DMA_Abort_IT+0x3c4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a60      	ldr	r2, [pc, #384]	; (8004538 <HAL_DMA_Abort_IT+0x3c8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5f      	ldr	r2, [pc, #380]	; (800453c <HAL_DMA_Abort_IT+0x3cc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_DMA_Abort_IT+0x3d0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5c      	ldr	r2, [pc, #368]	; (8004544 <HAL_DMA_Abort_IT+0x3d4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <HAL_DMA_Abort_IT+0x3d8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a59      	ldr	r2, [pc, #356]	; (800454c <HAL_DMA_Abort_IT+0x3dc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a57      	ldr	r2, [pc, #348]	; (8004550 <HAL_DMA_Abort_IT+0x3e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_Abort_IT+0x290>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a56      	ldr	r2, [pc, #344]	; (8004554 <HAL_DMA_Abort_IT+0x3e4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d108      	bne.n	8004412 <HAL_DMA_Abort_IT+0x2a2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e007      	b.n	8004422 <HAL_DMA_Abort_IT+0x2b2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <HAL_DMA_Abort_IT+0x3a8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d072      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_DMA_Abort_IT+0x3ac>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d06d      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <HAL_DMA_Abort_IT+0x3b0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d068      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a37      	ldr	r2, [pc, #220]	; (8004524 <HAL_DMA_Abort_IT+0x3b4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d063      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a36      	ldr	r2, [pc, #216]	; (8004528 <HAL_DMA_Abort_IT+0x3b8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d05e      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a34      	ldr	r2, [pc, #208]	; (800452c <HAL_DMA_Abort_IT+0x3bc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d059      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a33      	ldr	r2, [pc, #204]	; (8004530 <HAL_DMA_Abort_IT+0x3c0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d054      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a31      	ldr	r2, [pc, #196]	; (8004534 <HAL_DMA_Abort_IT+0x3c4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d04f      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_DMA_Abort_IT+0x3c8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04a      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_DMA_Abort_IT+0x3cc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d045      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <HAL_DMA_Abort_IT+0x3d0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d040      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <HAL_DMA_Abort_IT+0x3d4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d03b      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <HAL_DMA_Abort_IT+0x3d8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d036      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a28      	ldr	r2, [pc, #160]	; (800454c <HAL_DMA_Abort_IT+0x3dc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d031      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_DMA_Abort_IT+0x3e0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02c      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_DMA_Abort_IT+0x3e4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d027      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_DMA_Abort_IT+0x3e8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <HAL_DMA_Abort_IT+0x3ec>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01d      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a21      	ldr	r2, [pc, #132]	; (8004560 <HAL_DMA_Abort_IT+0x3f0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_DMA_Abort_IT+0x3f4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_DMA_Abort_IT+0x3f8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_DMA_Abort_IT+0x3fc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_DMA_Abort_IT+0x400>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_DMA_Abort_IT+0x3a2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_DMA_Abort_IT+0x404>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d132      	bne.n	8004578 <HAL_DMA_Abort_IT+0x408>
 8004512:	2301      	movs	r3, #1
 8004514:	e031      	b.n	800457a <HAL_DMA_Abort_IT+0x40a>
 8004516:	bf00      	nop
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	58025408 	.word	0x58025408
 800455c:	5802541c 	.word	0x5802541c
 8004560:	58025430 	.word	0x58025430
 8004564:	58025444 	.word	0x58025444
 8004568:	58025458 	.word	0x58025458
 800456c:	5802546c 	.word	0x5802546c
 8004570:	58025480 	.word	0x58025480
 8004574:	58025494 	.word	0x58025494
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d028      	beq.n	80045d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800458c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2201      	movs	r2, #1
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop

080045fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800460a:	4b89      	ldr	r3, [pc, #548]	; (8004830 <HAL_GPIO_Init+0x234>)
 800460c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800460e:	e194      	b.n	800493a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8186 	beq.w	8004934 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d005      	beq.n	8004640 <HAL_GPIO_Init+0x44>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d130      	bne.n	80046a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2203      	movs	r2, #3
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004676:	2201      	movs	r2, #1
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0201 	and.w	r2, r3, #1
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d017      	beq.n	80046de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2203      	movs	r2, #3
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d123      	bne.n	8004732 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	08da      	lsrs	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3208      	adds	r2, #8
 80046f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	2203      	movs	r2, #3
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80e0 	beq.w	8004934 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x238>)
 8004776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800477a:	4a2e      	ldr	r2, [pc, #184]	; (8004834 <HAL_GPIO_Init+0x238>)
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_GPIO_Init+0x238>)
 8004786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_GPIO_Init+0x23c>)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_GPIO_Init+0x240>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d052      	beq.n	8004864 <HAL_GPIO_Init+0x268>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_GPIO_Init+0x244>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_GPIO_Init+0x22e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_GPIO_Init+0x248>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <HAL_GPIO_Init+0x22a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_GPIO_Init+0x24c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d025      	beq.n	8004822 <HAL_GPIO_Init+0x226>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_GPIO_Init+0x250>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <HAL_GPIO_Init+0x222>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_GPIO_Init+0x254>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x21e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_GPIO_Init+0x258>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x21a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_GPIO_Init+0x25c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x216>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_GPIO_Init+0x260>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x212>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_GPIO_Init+0x264>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x20e>
 8004806:	2309      	movs	r3, #9
 8004808:	e02d      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800480a:	230a      	movs	r3, #10
 800480c:	e02b      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800480e:	2308      	movs	r3, #8
 8004810:	e029      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004812:	2307      	movs	r3, #7
 8004814:	e027      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004816:	2306      	movs	r3, #6
 8004818:	e025      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800481a:	2305      	movs	r3, #5
 800481c:	e023      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800481e:	2304      	movs	r3, #4
 8004820:	e021      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004822:	2303      	movs	r3, #3
 8004824:	e01f      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004826:	2302      	movs	r3, #2
 8004828:	e01d      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800482a:	2301      	movs	r3, #1
 800482c:	e01b      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800482e:	bf00      	nop
 8004830:	58000080 	.word	0x58000080
 8004834:	58024400 	.word	0x58024400
 8004838:	58000400 	.word	0x58000400
 800483c:	58020000 	.word	0x58020000
 8004840:	58020400 	.word	0x58020400
 8004844:	58020800 	.word	0x58020800
 8004848:	58020c00 	.word	0x58020c00
 800484c:	58021000 	.word	0x58021000
 8004850:	58021400 	.word	0x58021400
 8004854:	58021800 	.word	0x58021800
 8004858:	58021c00 	.word	0x58021c00
 800485c:	58022000 	.word	0x58022000
 8004860:	58022400 	.word	0x58022400
 8004864:	2300      	movs	r3, #0
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	f002 0203 	and.w	r2, r2, #3
 800486c:	0092      	lsls	r2, r2, #2
 800486e:	4093      	lsls	r3, r2
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004876:	4938      	ldr	r1, [pc, #224]	; (8004958 <HAL_GPIO_Init+0x35c>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	f47f ae63 	bne.w	8004610 <HAL_GPIO_Init+0x14>
  }
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3724      	adds	r7, #36	; 0x24
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	58000400 	.word	0x58000400

0800495c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e001      	b.n	800497e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
 8004998:	4613      	mov	r3, r2
 800499a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800499c:	787b      	ldrb	r3, [r7, #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049a8:	e003      	b.n	80049b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	041a      	lsls	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049d0:	887a      	ldrh	r2, [r7, #2]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	041a      	lsls	r2, r3, #16
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43d9      	mvns	r1, r3
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	400b      	ands	r3, r1
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	619a      	str	r2, [r3, #24]
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd f920 	bl	8001c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d107      	bne.n	8004a6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	e006      	b.n	8004a7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d104      	bne.n	8004a8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_I2C_Init+0x11c>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69d9      	ldr	r1, [r3, #28]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	02008000 	.word	0x02008000

08004b14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	460b      	mov	r3, r1
 8004b22:	817b      	strh	r3, [r7, #10]
 8004b24:	4613      	mov	r3, r2
 8004b26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	f040 80da 	bne.w	8004cea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2C_Master_Transmit+0x30>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0d3      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fe fea6 	bl	800389c <HAL_GetTick>
 8004b50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2319      	movs	r3, #25
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fb62 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0be      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	; 0x21
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2210      	movs	r2, #16
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2bff      	cmp	r3, #255	; 0xff
 8004b9e:	d90e      	bls.n	8004bbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22ff      	movs	r2, #255	; 0xff
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fd58 	bl	800566c <I2C_TransferConfig>
 8004bbc:	e06c      	b.n	8004c98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	4b48      	ldr	r3, [pc, #288]	; (8004cf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fd47 	bl	800566c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bde:	e05b      	b.n	8004c98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	6a39      	ldr	r1, [r7, #32]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fb5f 	bl	80052a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e07b      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d034      	beq.n	8004c98 <HAL_I2C_Master_Transmit+0x184>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d130      	bne.n	8004c98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 faf1 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e04d      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2bff      	cmp	r3, #255	; 0xff
 8004c58:	d90e      	bls.n	8004c78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	8979      	ldrh	r1, [r7, #10]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fcfb 	bl	800566c <I2C_TransferConfig>
 8004c76:	e00f      	b.n	8004c98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	8979      	ldrh	r1, [r7, #10]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fcea 	bl	800566c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d19e      	bne.n	8004be0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fb3e 	bl	8005328 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e01a      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cca:	400b      	ands	r3, r1
 8004ccc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	80002000 	.word	0x80002000
 8004cf8:	fe00e800 	.word	0xfe00e800

08004cfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	461a      	mov	r2, r3
 8004d08:	460b      	mov	r3, r1
 8004d0a:	817b      	strh	r3, [r7, #10]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 80db 	bne.w	8004ed4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_I2C_Master_Receive+0x30>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0d4      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d34:	f7fe fdb2 	bl	800389c <HAL_GetTick>
 8004d38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2319      	movs	r3, #25
 8004d40:	2201      	movs	r2, #1
 8004d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa6e 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0bf      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2222      	movs	r2, #34	; 0x22
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2210      	movs	r2, #16
 8004d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	893a      	ldrh	r2, [r7, #8]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2bff      	cmp	r3, #255	; 0xff
 8004d86:	d90e      	bls.n	8004da6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	22ff      	movs	r2, #255	; 0xff
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	8979      	ldrh	r1, [r7, #10]
 8004d96:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <HAL_I2C_Master_Receive+0x1e4>)
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fc64 	bl	800566c <I2C_TransferConfig>
 8004da4:	e06d      	b.n	8004e82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	8979      	ldrh	r1, [r7, #10]
 8004db8:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <HAL_I2C_Master_Receive+0x1e4>)
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fc53 	bl	800566c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004dc6:	e05c      	b.n	8004e82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	6a39      	ldr	r1, [r7, #32]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fae7 	bl	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e07c      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d034      	beq.n	8004e82 <HAL_I2C_Master_Receive+0x186>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d130      	bne.n	8004e82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f9fc 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e04d      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2bff      	cmp	r3, #255	; 0xff
 8004e42:	d90e      	bls.n	8004e62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	22ff      	movs	r2, #255	; 0xff
 8004e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	8979      	ldrh	r1, [r7, #10]
 8004e52:	2300      	movs	r3, #0
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fc06 	bl	800566c <I2C_TransferConfig>
 8004e60:	e00f      	b.n	8004e82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	8979      	ldrh	r1, [r7, #10]
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fbf5 	bl	800566c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d19d      	bne.n	8004dc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	6a39      	ldr	r1, [r7, #32]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fa49 	bl	8005328 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e01a      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_I2C_Master_Receive+0x1e8>)
 8004eb4:	400b      	ands	r3, r1
 8004eb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	80002400 	.word	0x80002400
 8004ee4:	fe00e800 	.word	0xfe00e800

08004ee8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	460b      	mov	r3, r1
 8004efc:	813b      	strh	r3, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	f040 80fd 	bne.w	800510a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_I2C_Mem_Read+0x34>
 8004f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0f1      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2C_Mem_Read+0x4e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0ea      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fe fcad 	bl	800389c <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2319      	movs	r3, #25
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f969 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0d5      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2222      	movs	r2, #34	; 0x22
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a3a      	ldr	r2, [r7, #32]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f88:	88f8      	ldrh	r0, [r7, #6]
 8004f8a:	893a      	ldrh	r2, [r7, #8]
 8004f8c:	8979      	ldrh	r1, [r7, #10]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	4603      	mov	r3, r0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8cd 	bl	8005138 <I2C_RequestMemoryRead>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0ad      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d90e      	bls.n	8004fd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	8979      	ldrh	r1, [r7, #10]
 8004fc8:	4b52      	ldr	r3, [pc, #328]	; (8005114 <HAL_I2C_Mem_Read+0x22c>)
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fb4b 	bl	800566c <I2C_TransferConfig>
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	8979      	ldrh	r1, [r7, #10]
 8004fea:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <HAL_I2C_Mem_Read+0x22c>)
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fb3a 	bl	800566c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	2200      	movs	r2, #0
 8005000:	2104      	movs	r1, #4
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f910 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07c      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d034      	beq.n	80050b8 <HAL_I2C_Mem_Read+0x1d0>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d130      	bne.n	80050b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f8e1 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e04d      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2bff      	cmp	r3, #255	; 0xff
 8005078:	d90e      	bls.n	8005098 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	22ff      	movs	r2, #255	; 0xff
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	b2da      	uxtb	r2, r3
 8005086:	8979      	ldrh	r1, [r7, #10]
 8005088:	2300      	movs	r3, #0
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 faeb 	bl	800566c <I2C_TransferConfig>
 8005096:	e00f      	b.n	80050b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	8979      	ldrh	r1, [r7, #10]
 80050aa:	2300      	movs	r3, #0
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fada 	bl	800566c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d19a      	bne.n	8004ff8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f92e 	bl	8005328 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e01a      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2220      	movs	r2, #32
 80050dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_I2C_Mem_Read+0x230>)
 80050ea:	400b      	ands	r3, r1
 80050ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800510a:	2302      	movs	r3, #2
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	80002400 	.word	0x80002400
 8005118:	fe00e800 	.word	0xfe00e800

0800511c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512a:	b2db      	uxtb	r3, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	461a      	mov	r2, r3
 8005146:	4603      	mov	r3, r0
 8005148:	817b      	strh	r3, [r7, #10]
 800514a:	460b      	mov	r3, r1
 800514c:	813b      	strh	r3, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	8979      	ldrh	r1, [r7, #10]
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <I2C_RequestMemoryRead+0xa4>)
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2300      	movs	r3, #0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa84 	bl	800566c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	69b9      	ldr	r1, [r7, #24]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f89d 	bl	80052a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e02c      	b.n	80051d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d105      	bne.n	800518a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800517e:	893b      	ldrh	r3, [r7, #8]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
 8005188:	e015      	b.n	80051b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800518a:	893b      	ldrh	r3, [r7, #8]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	b29b      	uxth	r3, r3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f883 	bl	80052a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e012      	b.n	80051d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2200      	movs	r2, #0
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f831 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	80002000 	.word	0x80002000

080051e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d103      	bne.n	80051fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d007      	beq.n	800521c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	619a      	str	r2, [r3, #24]
  }
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005238:	e022      	b.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005240:	d01e      	beq.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fe fb2b 	bl	800389c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d113      	bne.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e00f      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	429a      	cmp	r2, r3
 800529c:	d0cd      	beq.n	800523a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052b4:	e02c      	b.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8ea 	bl	8005494 <I2C_IsErrorOccurred>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e02a      	b.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d0:	d01e      	beq.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fe fae3 	bl	800389c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d113      	bne.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d1cb      	bne.n	80052b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005334:	e028      	b.n	8005388 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f8aa 	bl	8005494 <I2C_IsErrorOccurred>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e026      	b.n	8005398 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fe faa7 	bl	800389c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d113      	bne.n	8005388 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d1cf      	bne.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ac:	e064      	b.n	8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f86e 	bl	8005494 <I2C_IsErrorOccurred>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e062      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d138      	bne.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d105      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e04e      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d107      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2210      	movs	r2, #16
 80053fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2204      	movs	r2, #4
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
 8005406:	e002      	b.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2220      	movs	r2, #32
 8005414:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6859      	ldr	r1, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005422:	400b      	ands	r3, r1
 8005424:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fe fa2b 	bl	800389c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10f      	bne.n	8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e007      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b04      	cmp	r3, #4
 8005484:	d193      	bne.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d075      	beq.n	80055ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2210      	movs	r2, #16
 80054c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054c8:	e056      	b.n	8005578 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d0:	d052      	beq.n	8005578 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe f9e3 	bl	800389c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_IsErrorOccurred+0x54>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d147      	bne.n	8005578 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d12e      	bne.n	800556a <I2C_IsErrorOccurred+0xd6>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005512:	d02a      	beq.n	800556a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	2b20      	cmp	r3, #32
 8005518:	d027      	beq.n	800556a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005528:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800552a:	f7fe f9b7 	bl	800389c <HAL_GetTick>
 800552e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005530:	e01b      	b.n	800556a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005532:	f7fe f9b3 	bl	800389c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b19      	cmp	r3, #25
 800553e:	d914      	bls.n	800556a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d1dc      	bne.n	8005532 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d003      	beq.n	800558e <I2C_IsErrorOccurred+0xfa>
 8005586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800558a:	2b00      	cmp	r3, #0
 800558c:	d09d      	beq.n	80054ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800558e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2220      	movs	r2, #32
 800559c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f043 0308 	orr.w	r3, r3, #8
 80055e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800561a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01c      	beq.n	800565c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff fddc 	bl	80051e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <I2C_IsErrorOccurred+0x1d4>)
 8005634:	400b      	ands	r3, r1
 8005636:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	431a      	orrs	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800565c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005660:	4618      	mov	r0, r3
 8005662:	3728      	adds	r7, #40	; 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	fe00e800 	.word	0xfe00e800

0800566c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	4613      	mov	r3, r2
 800567c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800567e:	897b      	ldrh	r3, [r7, #10]
 8005680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005684:	7a7b      	ldrb	r3, [r7, #9]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	4313      	orrs	r3, r2
 8005696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800569a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	0d5b      	lsrs	r3, r3, #21
 80056a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <I2C_TransferConfig+0x60>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	43db      	mvns	r3, r3
 80056b0:	ea02 0103 	and.w	r1, r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	03ff63ff 	.word	0x03ff63ff

080056d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d138      	bne.n	8005758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e032      	b.n	800575a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b20      	cmp	r3, #32
 800577a:	d139      	bne.n	80057f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005786:	2302      	movs	r3, #2
 8005788:	e033      	b.n	80057f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e000      	b.n	80057f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_PWREx_ConfigSupply+0x70>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b04      	cmp	r3, #4
 8005812:	d00a      	beq.n	800582a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_PWREx_ConfigSupply+0x70>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d001      	beq.n	8005826 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e01f      	b.n	8005866 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e01d      	b.n	8005866 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_PWREx_ConfigSupply+0x70>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f023 0207 	bic.w	r2, r3, #7
 8005832:	490f      	ldr	r1, [pc, #60]	; (8005870 <HAL_PWREx_ConfigSupply+0x70>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4313      	orrs	r3, r2
 8005838:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800583a:	f7fe f82f 	bl	800389c <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005840:	e009      	b.n	8005856 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005842:	f7fe f82b 	bl	800389c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005850:	d901      	bls.n	8005856 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e007      	b.n	8005866 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_PWREx_ConfigSupply+0x70>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005862:	d1ee      	bne.n	8005842 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	58024800 	.word	0x58024800

08005874 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	; 0x30
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f000 bc1d 	b.w	80060c2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8087 	beq.w	80059a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005896:	4b99      	ldr	r3, [pc, #612]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a0:	4b96      	ldr	r3, [pc, #600]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d007      	beq.n	80058bc <HAL_RCC_OscConfig+0x48>
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	d110      	bne.n	80058d4 <HAL_RCC_OscConfig+0x60>
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b8f      	ldr	r3, [pc, #572]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d06c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x12e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d168      	bne.n	80059a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e3f6      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x78>
 80058de:	4b87      	ldr	r3, [pc, #540]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a86      	ldr	r2, [pc, #536]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e02e      	b.n	800594a <HAL_RCC_OscConfig+0xd6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <HAL_RCC_OscConfig+0x9a>
 80058f4:	4b81      	ldr	r3, [pc, #516]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a80      	ldr	r2, [pc, #512]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80058fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4b7e      	ldr	r3, [pc, #504]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a7d      	ldr	r2, [pc, #500]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e01d      	b.n	800594a <HAL_RCC_OscConfig+0xd6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0xbe>
 8005918:	4b78      	ldr	r3, [pc, #480]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a77      	ldr	r2, [pc, #476]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 800591e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	4b75      	ldr	r3, [pc, #468]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a74      	ldr	r2, [pc, #464]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 800592a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e00b      	b.n	800594a <HAL_RCC_OscConfig+0xd6>
 8005932:	4b72      	ldr	r3, [pc, #456]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a71      	ldr	r2, [pc, #452]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6e      	ldr	r2, [pc, #440]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005948:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fd ffa3 	bl	800389c <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595a:	f7fd ff9f 	bl	800389c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b64      	cmp	r3, #100	; 0x64
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e3aa      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800596c:	4b63      	ldr	r3, [pc, #396]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0xe6>
 8005978:	e014      	b.n	80059a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597a:	f7fd ff8f 	bl	800389c <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005982:	f7fd ff8b 	bl	800389c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b64      	cmp	r3, #100	; 0x64
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e396      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCC_OscConfig+0x10e>
 80059a0:	e000      	b.n	80059a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80cb 	beq.w	8005b48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b2:	4b52      	ldr	r3, [pc, #328]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059bc:	4b4f      	ldr	r3, [pc, #316]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <HAL_RCC_OscConfig+0x164>
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2b18      	cmp	r3, #24
 80059cc:	d156      	bne.n	8005a7c <HAL_RCC_OscConfig+0x208>
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d151      	bne.n	8005a7c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d8:	4b48      	ldr	r3, [pc, #288]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_OscConfig+0x17c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e368      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059f0:	4b42      	ldr	r3, [pc, #264]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f023 0219 	bic.w	r2, r3, #25
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	493f      	ldr	r1, [pc, #252]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a02:	f7fd ff4b 	bl	800389c <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a0a:	f7fd ff47 	bl	800389c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e352      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a1c:	4b37      	ldr	r3, [pc, #220]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a28:	f7fd ff68 	bl	80038fc <HAL_GetREVID>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d817      	bhi.n	8005a66 <HAL_RCC_OscConfig+0x1f2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d108      	bne.n	8005a50 <HAL_RCC_OscConfig+0x1dc>
 8005a3e:	4b2f      	ldr	r3, [pc, #188]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a46:	4a2d      	ldr	r2, [pc, #180]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4e:	e07b      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	4927      	ldr	r1, [pc, #156]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a64:	e070      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a66:	4b25      	ldr	r3, [pc, #148]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	4921      	ldr	r1, [pc, #132]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a7a:	e065      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d048      	beq.n	8005b16 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 0219 	bic.w	r2, r3, #25
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	491a      	ldr	r1, [pc, #104]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fd ff01 	bl	800389c <HAL_GetTick>
 8005a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fd fefd 	bl	800389c <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e308      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab0:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	f7fd ff1e 	bl	80038fc <HAL_GetREVID>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d81a      	bhi.n	8005b00 <HAL_RCC_OscConfig+0x28c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d108      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x270>
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ada:	4a08      	ldr	r2, [pc, #32]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae0:	6053      	str	r3, [r2, #4]
 8005ae2:	e031      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	4902      	ldr	r1, [pc, #8]	; (8005afc <HAL_RCC_OscConfig+0x288>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	604b      	str	r3, [r1, #4]
 8005af8:	e026      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
 8005b00:	4b9a      	ldr	r3, [pc, #616]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	4997      	ldr	r1, [pc, #604]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
 8005b14:	e018      	b.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b16:	4b95      	ldr	r3, [pc, #596]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a94      	ldr	r2, [pc, #592]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fd febb 	bl	800389c <HAL_GetTick>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b2a:	f7fd feb7 	bl	800389c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e2c2      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b3c:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a9 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b56:	4b85      	ldr	r3, [pc, #532]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b60:	4b82      	ldr	r3, [pc, #520]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d007      	beq.n	8005b7c <HAL_RCC_OscConfig+0x308>
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b18      	cmp	r3, #24
 8005b70:	d13a      	bne.n	8005be8 <HAL_RCC_OscConfig+0x374>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d135      	bne.n	8005be8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b7c:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_OscConfig+0x320>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e296      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b94:	f7fd feb2 	bl	80038fc <HAL_GetREVID>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d817      	bhi.n	8005bd2 <HAL_RCC_OscConfig+0x35e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d108      	bne.n	8005bbc <HAL_RCC_OscConfig+0x348>
 8005baa:	4b70      	ldr	r3, [pc, #448]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bb2:	4a6e      	ldr	r2, [pc, #440]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bba:	e075      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bbc:	4b6b      	ldr	r3, [pc, #428]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	069b      	lsls	r3, r3, #26
 8005bca:	4968      	ldr	r1, [pc, #416]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bd0:	e06a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bd2:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	061b      	lsls	r3, r3, #24
 8005be0:	4962      	ldr	r1, [pc, #392]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005be6:	e05f      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d042      	beq.n	8005c76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bf0:	4b5e      	ldr	r3, [pc, #376]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5d      	ldr	r2, [pc, #372]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fd fe4e 	bl	800389c <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c04:	f7fd fe4a 	bl	800389c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e255      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c16:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c22:	f7fd fe6b 	bl	80038fc <HAL_GetREVID>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d817      	bhi.n	8005c60 <HAL_RCC_OscConfig+0x3ec>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d108      	bne.n	8005c4a <HAL_RCC_OscConfig+0x3d6>
 8005c38:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c40:	4a4a      	ldr	r2, [pc, #296]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c46:	6053      	str	r3, [r2, #4]
 8005c48:	e02e      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
 8005c4a:	4b48      	ldr	r3, [pc, #288]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	069b      	lsls	r3, r3, #26
 8005c58:	4944      	ldr	r1, [pc, #272]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
 8005c5e:	e023      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
 8005c60:	4b42      	ldr	r3, [pc, #264]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	493f      	ldr	r1, [pc, #252]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60cb      	str	r3, [r1, #12]
 8005c74:	e018      	b.n	8005ca8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c76:	4b3d      	ldr	r3, [pc, #244]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fd fe0b 	bl	800389c <HAL_GetTick>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c8a:	f7fd fe07 	bl	800389c <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e212      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c9c:	4b33      	ldr	r3, [pc, #204]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d036      	beq.n	8005d22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc8:	f7fd fde8 	bl	800389c <HAL_GetTick>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd0:	f7fd fde4 	bl	800389c <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e1ef      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x45c>
 8005cee:	e018      	b.n	8005d22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fd fdce 	bl	800389c <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d04:	f7fd fdca 	bl	800389c <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e1d5      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d16:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d039      	beq.n	8005da2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01c      	beq.n	8005d70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d42:	f7fd fdab 	bl	800389c <HAL_GetTick>
 8005d46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d4a:	f7fd fda7 	bl	800389c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e1b2      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_OscConfig+0x4f8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x4d6>
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_OscConfig+0x52e>
 8005d6a:	bf00      	nop
 8005d6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d70:	4b9b      	ldr	r3, [pc, #620]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a9a      	ldr	r2, [pc, #616]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d7c:	f7fd fd8e 	bl	800389c <HAL_GetTick>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d84:	f7fd fd8a 	bl	800389c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e195      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d96:	4b92      	ldr	r3, [pc, #584]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8081 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005db0:	4b8c      	ldr	r3, [pc, #560]	; (8005fe4 <HAL_RCC_OscConfig+0x770>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a8b      	ldr	r2, [pc, #556]	; (8005fe4 <HAL_RCC_OscConfig+0x770>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dbc:	f7fd fd6e 	bl	800389c <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fd fd6a 	bl	800389c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e175      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd6:	4b83      	ldr	r3, [pc, #524]	; (8005fe4 <HAL_RCC_OscConfig+0x770>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d106      	bne.n	8005df8 <HAL_RCC_OscConfig+0x584>
 8005dea:	4b7d      	ldr	r3, [pc, #500]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a7c      	ldr	r2, [pc, #496]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
 8005df6:	e02d      	b.n	8005e54 <HAL_RCC_OscConfig+0x5e0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <HAL_RCC_OscConfig+0x5a6>
 8005e00:	4b77      	ldr	r3, [pc, #476]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	4a76      	ldr	r2, [pc, #472]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0c:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4a73      	ldr	r2, [pc, #460]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e12:	f023 0304 	bic.w	r3, r3, #4
 8005e16:	6713      	str	r3, [r2, #112]	; 0x70
 8005e18:	e01c      	b.n	8005e54 <HAL_RCC_OscConfig+0x5e0>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c8>
 8005e22:	4b6f      	ldr	r3, [pc, #444]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	4a6e      	ldr	r2, [pc, #440]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2e:	4b6c      	ldr	r3, [pc, #432]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a6b      	ldr	r2, [pc, #428]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3a:	e00b      	b.n	8005e54 <HAL_RCC_OscConfig+0x5e0>
 8005e3c:	4b68      	ldr	r3, [pc, #416]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a67      	ldr	r2, [pc, #412]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a64      	ldr	r2, [pc, #400]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e4e:	f023 0304 	bic.w	r3, r3, #4
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d015      	beq.n	8005e88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fd fd1e 	bl	800389c <HAL_GetTick>
 8005e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e62:	e00a      	b.n	8005e7a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e64:	f7fd fd1a 	bl	800389c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e123      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e7a:	4b59      	ldr	r3, [pc, #356]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RCC_OscConfig+0x5f0>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fd fd08 	bl	800389c <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fd fd04 	bl	800389c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e10d      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1ee      	bne.n	8005e90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8102 	beq.w	80060c0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ebc:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec4:	2b18      	cmp	r3, #24
 8005ec6:	f000 80bd 	beq.w	8006044 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	f040 809e 	bne.w	8006010 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed4:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a41      	ldr	r2, [pc, #260]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fcdc 	bl	800389c <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fd fcd8 	bl	800389c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e0e3      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f0a:	4b37      	ldr	r3, [pc, #220]	; (8005fe8 <HAL_RCC_OscConfig+0x774>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f16:	0112      	lsls	r2, r2, #4
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	4931      	ldr	r1, [pc, #196]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	3b01      	subs	r3, #1
 8005f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	025b      	lsls	r3, r3, #9
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	061b      	lsls	r3, r3, #24
 8005f4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f50:	4923      	ldr	r1, [pc, #140]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	4a21      	ldr	r2, [pc, #132]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCC_OscConfig+0x778>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f6e:	00d2      	lsls	r2, r2, #3
 8005f70:	491b      	ldr	r1, [pc, #108]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	f023 020c 	bic.w	r2, r3, #12
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	4917      	ldr	r1, [pc, #92]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	f023 0202 	bic.w	r2, r3, #2
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f94:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <HAL_RCC_OscConfig+0x76c>)
 8005fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd6:	f7fd fc61 	bl	800389c <HAL_GetTick>
 8005fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fdc:	e011      	b.n	8006002 <HAL_RCC_OscConfig+0x78e>
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	58024800 	.word	0x58024800
 8005fe8:	fffffc0c 	.word	0xfffffc0c
 8005fec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fc54 	bl	800389c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e05f      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006002:	4b32      	ldr	r3, [pc, #200]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x77c>
 800600e:	e057      	b.n	80060c0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006010:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 8006016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fd fc3e 	bl	800389c <HAL_GetTick>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd fc3a 	bl	800389c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e045      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x7b0>
 8006042:	e03d      	b.n	80060c0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_RCC_OscConfig+0x858>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	2b01      	cmp	r3, #1
 8006056:	d031      	beq.n	80060bc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f003 0203 	and.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d12a      	bne.n	80060bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d122      	bne.n	80060bc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d11a      	bne.n	80060bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	0a5b      	lsrs	r3, r3, #9
 800608a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006092:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d111      	bne.n	80060bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d108      	bne.n	80060bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	0e1b      	lsrs	r3, r3, #24
 80060ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3730      	adds	r7, #48	; 0x30
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	58024400 	.word	0x58024400

080060d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e19c      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060e4:	4b8a      	ldr	r3, [pc, #552]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d910      	bls.n	8006114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b87      	ldr	r3, [pc, #540]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 020f 	bic.w	r2, r3, #15
 80060fa:	4985      	ldr	r1, [pc, #532]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006102:	4b83      	ldr	r3, [pc, #524]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d001      	beq.n	8006114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e184      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d010      	beq.n	8006142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	4b7b      	ldr	r3, [pc, #492]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800612c:	429a      	cmp	r2, r3
 800612e:	d908      	bls.n	8006142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006130:	4b78      	ldr	r3, [pc, #480]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4975      	ldr	r1, [pc, #468]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800613e:	4313      	orrs	r3, r2
 8006140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	4b70      	ldr	r3, [pc, #448]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800615a:	429a      	cmp	r2, r3
 800615c:	d908      	bls.n	8006170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800615e:	4b6d      	ldr	r3, [pc, #436]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	496a      	ldr	r1, [pc, #424]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800616c:	4313      	orrs	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d010      	beq.n	800619e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006188:	429a      	cmp	r2, r3
 800618a:	d908      	bls.n	800619e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800618c:	4b61      	ldr	r3, [pc, #388]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	495e      	ldr	r1, [pc, #376]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800619a:	4313      	orrs	r3, r2
 800619c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	4b59      	ldr	r3, [pc, #356]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d908      	bls.n	80061cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061ba:	4b56      	ldr	r3, [pc, #344]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4953      	ldr	r1, [pc, #332]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d010      	beq.n	80061fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	4b4d      	ldr	r3, [pc, #308]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d908      	bls.n	80061fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f023 020f 	bic.w	r2, r3, #15
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4947      	ldr	r1, [pc, #284]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d055      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006206:	4b43      	ldr	r3, [pc, #268]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4940      	ldr	r1, [pc, #256]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006220:	4b3c      	ldr	r3, [pc, #240]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d121      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0f6      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006238:	4b36      	ldr	r3, [pc, #216]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d115      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0ea      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006250:	4b30      	ldr	r3, [pc, #192]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0de      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006260:	4b2c      	ldr	r3, [pc, #176]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0d6      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f023 0207 	bic.w	r2, r3, #7
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4925      	ldr	r1, [pc, #148]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006282:	f7fd fb0b 	bl	800389c <HAL_GetTick>
 8006286:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006288:	e00a      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628a:	f7fd fb07 	bl	800389c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f241 3288 	movw	r2, #5000	; 0x1388
 8006298:	4293      	cmp	r3, r2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e0be      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d1eb      	bne.n	800628a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d208      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f023 020f 	bic.w	r2, r3, #15
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	490e      	ldr	r1, [pc, #56]	; (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d214      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	4906      	ldr	r1, [pc, #24]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_RCC_ClockConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d005      	beq.n	8006318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e086      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
 8006310:	52002000 	.word	0x52002000
 8006314:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	4b3f      	ldr	r3, [pc, #252]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006330:	429a      	cmp	r2, r3
 8006332:	d208      	bcs.n	8006346 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006334:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4939      	ldr	r1, [pc, #228]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006342:	4313      	orrs	r3, r2
 8006344:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d010      	beq.n	8006374 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800635e:	429a      	cmp	r2, r3
 8006360:	d208      	bcs.n	8006374 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006362:	4b31      	ldr	r3, [pc, #196]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	492e      	ldr	r1, [pc, #184]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006370:	4313      	orrs	r3, r2
 8006372:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d010      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	4b28      	ldr	r3, [pc, #160]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800638c:	429a      	cmp	r2, r3
 800638e:	d208      	bcs.n	80063a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	4922      	ldr	r1, [pc, #136]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d208      	bcs.n	80063d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	4917      	ldr	r1, [pc, #92]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063d0:	f000 f834 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	4912      	ldr	r1, [pc, #72]	; (800642c <HAL_RCC_ClockConfig+0x35c>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	4a0d      	ldr	r2, [pc, #52]	; (800642c <HAL_RCC_ClockConfig+0x35c>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <HAL_RCC_ClockConfig+0x360>)
 8006406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006408:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <HAL_RCC_ClockConfig+0x364>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_RCC_ClockConfig+0x368>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fd f9f8 	bl	8003808 <HAL_InitTick>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
 800642c:	0800cc58 	.word	0x0800cc58
 8006430:	24000030 	.word	0x24000030
 8006434:	2400002c 	.word	0x2400002c
 8006438:	24000034 	.word	0x24000034

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006442:	4bb3      	ldr	r3, [pc, #716]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800644a:	2b18      	cmp	r3, #24
 800644c:	f200 8155 	bhi.w	80066fa <HAL_RCC_GetSysClockFreq+0x2be>
 8006450:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080066fb 	.word	0x080066fb
 8006460:	080066fb 	.word	0x080066fb
 8006464:	080066fb 	.word	0x080066fb
 8006468:	080066fb 	.word	0x080066fb
 800646c:	080066fb 	.word	0x080066fb
 8006470:	080066fb 	.word	0x080066fb
 8006474:	080066fb 	.word	0x080066fb
 8006478:	080064e3 	.word	0x080064e3
 800647c:	080066fb 	.word	0x080066fb
 8006480:	080066fb 	.word	0x080066fb
 8006484:	080066fb 	.word	0x080066fb
 8006488:	080066fb 	.word	0x080066fb
 800648c:	080066fb 	.word	0x080066fb
 8006490:	080066fb 	.word	0x080066fb
 8006494:	080066fb 	.word	0x080066fb
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080066fb 	.word	0x080066fb
 80064a0:	080066fb 	.word	0x080066fb
 80064a4:	080066fb 	.word	0x080066fb
 80064a8:	080066fb 	.word	0x080066fb
 80064ac:	080066fb 	.word	0x080066fb
 80064b0:	080066fb 	.word	0x080066fb
 80064b4:	080066fb 	.word	0x080066fb
 80064b8:	080064ef 	.word	0x080064ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064bc:	4b94      	ldr	r3, [pc, #592]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064c8:	4b91      	ldr	r3, [pc, #580]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	4a90      	ldr	r2, [pc, #576]	; (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80064da:	e111      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064dc:	4b8d      	ldr	r3, [pc, #564]	; (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064de:	61bb      	str	r3, [r7, #24]
    break;
 80064e0:	e10e      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80064e2:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064e4:	61bb      	str	r3, [r7, #24]
    break;
 80064e6:	e10b      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80064e8:	4b8c      	ldr	r3, [pc, #560]	; (800671c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80064ea:	61bb      	str	r3, [r7, #24]
    break;
 80064ec:	e108      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064ee:	4b88      	ldr	r3, [pc, #544]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80064f8:	4b85      	ldr	r3, [pc, #532]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006502:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006504:	4b82      	ldr	r3, [pc, #520]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800650e:	4b80      	ldr	r3, [pc, #512]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80e1 	beq.w	80066f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f000 8083 	beq.w	8006640 <HAL_RCC_GetSysClockFreq+0x204>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b02      	cmp	r3, #2
 800653e:	f200 80a1 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x248>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x114>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d056      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800654e:	e099      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006550:	4b6f      	ldr	r3, [pc, #444]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02d      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800655c:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	4a6b      	ldr	r2, [pc, #428]	; (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006586:	4b62      	ldr	r3, [pc, #392]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006596:	ed97 6a02 	vldr	s12, [r7, #8]
 800659a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800659e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80065b6:	e087      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ca:	4b51      	ldr	r3, [pc, #324]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065da:	ed97 6a02 	vldr	s12, [r7, #8]
 80065de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065fa:	e065      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006606:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800660a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660e:	4b40      	ldr	r3, [pc, #256]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006622:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800663e:	e043      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800672c <HAL_RCC_GetSysClockFreq+0x2f0>
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b2f      	ldr	r3, [pc, #188]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006682:	e021      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	0a5b      	lsrs	r3, r3, #9
 80066ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d2:	3301      	adds	r3, #1
 80066d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ec:	ee17 3a90 	vmov	r3, s15
 80066f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80066f2:	e005      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    break;
 80066f8:	e002      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066fc:	61bb      	str	r3, [r7, #24]
    break;
 80066fe:	bf00      	nop
  }

  return sysclockfreq;
 8006700:	69bb      	ldr	r3, [r7, #24]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3724      	adds	r7, #36	; 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	03d09000 	.word	0x03d09000
 8006718:	003d0900 	.word	0x003d0900
 800671c:	017d7840 	.word	0x017d7840
 8006720:	46000000 	.word	0x46000000
 8006724:	4c742400 	.word	0x4c742400
 8006728:	4a742400 	.word	0x4a742400
 800672c:	4bbebc20 	.word	0x4bbebc20

08006730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006736:	f7ff fe81 	bl	800643c <HAL_RCC_GetSysClockFreq>
 800673a:	4602      	mov	r2, r0
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <HAL_RCC_GetHCLKFreq+0x50>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	490f      	ldr	r1, [pc, #60]	; (8006784 <HAL_RCC_GetHCLKFreq+0x54>)
 8006748:	5ccb      	ldrb	r3, [r1, r3]
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_GetHCLKFreq+0x50>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <HAL_RCC_GetHCLKFreq+0x54>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	fa22 f303 	lsr.w	r3, r2, r3
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <HAL_RCC_GetHCLKFreq+0x58>)
 800676c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800676e:	4a07      	ldr	r2, [pc, #28]	; (800678c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <HAL_RCC_GetHCLKFreq+0x58>)
 8006776:	681b      	ldr	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58024400 	.word	0x58024400
 8006784:	0800cc58 	.word	0x0800cc58
 8006788:	24000030 	.word	0x24000030
 800678c:	2400002c 	.word	0x2400002c

08006790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006794:	f7ff ffcc 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 8006798:	4602      	mov	r2, r0
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4904      	ldr	r1, [pc, #16]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067a6:	5ccb      	ldrb	r3, [r1, r3]
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	58024400 	.word	0x58024400
 80067b8:	0800cc58 	.word	0x0800cc58

080067bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067c0:	f7ff ffb6 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 80067c4:	4602      	mov	r2, r0
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	4904      	ldr	r1, [pc, #16]	; (80067e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067d2:	5ccb      	ldrb	r3, [r1, r3]
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	58024400 	.word	0x58024400
 80067e4:	0800cc58 	.word	0x0800cc58

080067e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067f4:	2300      	movs	r3, #0
 80067f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d03f      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800680c:	d02a      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800680e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006812:	d824      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006818:	d018      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800681a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800681e:	d81e      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006828:	d007      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800682a:	e018      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800682c:	4ba3      	ldr	r3, [pc, #652]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	4aa2      	ldr	r2, [pc, #648]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006838:	e015      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	2102      	movs	r1, #2
 8006840:	4618      	mov	r0, r3
 8006842:	f001 f9d5 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800684a:	e00c      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3324      	adds	r3, #36	; 0x24
 8006850:	2102      	movs	r1, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fa7e 	bl	8007d54 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800686c:	4b93      	ldr	r3, [pc, #588]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	4990      	ldr	r1, [pc, #576]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800687a:	4313      	orrs	r3, r2
 800687c:	650b      	str	r3, [r1, #80]	; 0x50
 800687e:	e001      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d03d      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	2b04      	cmp	r3, #4
 8006896:	d826      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068b5 	.word	0x080068b5
 80068a4:	080068c3 	.word	0x080068c3
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068ed 	.word	0x080068ed
 80068b0:	080068ed 	.word	0x080068ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4b81      	ldr	r3, [pc, #516]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4a80      	ldr	r2, [pc, #512]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068c0:	e015      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3304      	adds	r3, #4
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f991 	bl	8007bf0 <RCCEx_PLL2_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068d2:	e00c      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3324      	adds	r3, #36	; 0x24
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fa3a 	bl	8007d54 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80068ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068f4:	4b71      	ldr	r3, [pc, #452]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	f023 0207 	bic.w	r2, r3, #7
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	496e      	ldr	r1, [pc, #440]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006902:	4313      	orrs	r3, r2
 8006904:	650b      	str	r3, [r1, #80]	; 0x50
 8006906:	e001      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	2b00      	cmp	r3, #0
 8006916:	d042      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006920:	d02b      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006926:	d825      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006928:	2bc0      	cmp	r3, #192	; 0xc0
 800692a:	d028      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800692c:	2bc0      	cmp	r3, #192	; 0xc0
 800692e:	d821      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d016      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006934:	2b80      	cmp	r3, #128	; 0x80
 8006936:	d81d      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d007      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006940:	e018      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006942:	4b5e      	ldr	r3, [pc, #376]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	4a5d      	ldr	r2, [pc, #372]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800694e:	e017      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	2100      	movs	r1, #0
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f94a 	bl	8007bf0 <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006960:	e00e      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3324      	adds	r3, #36	; 0x24
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f9f3 	bl	8007d54 <RCCEx_PLL3_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006972:	e005      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	75fb      	strb	r3, [r7, #23]
      break;
 8006978:	e002      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800697a:	bf00      	nop
 800697c:	e000      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800697e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006986:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	494a      	ldr	r1, [pc, #296]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006994:	4313      	orrs	r3, r2
 8006996:	650b      	str	r3, [r1, #80]	; 0x50
 8006998:	e001      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d049      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b4:	d030      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80069b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ba:	d82a      	bhi.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c0:	d02c      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80069c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c6:	d824      	bhi.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069cc:	d018      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d2:	d81e      	bhi.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80069d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069dc:	d007      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80069de:	e018      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a35      	ldr	r2, [pc, #212]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069ec:	e017      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 f8fb 	bl	8007bf0 <RCCEx_PLL2_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80069fe:	e00e      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3324      	adds	r3, #36	; 0x24
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 f9a4 	bl	8007d54 <RCCEx_PLL3_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a10:	e005      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]
      break;
 8006a16:	e002      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a32:	4922      	ldr	r1, [pc, #136]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	658b      	str	r3, [r1, #88]	; 0x58
 8006a38:	e001      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d04b      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a54:	d030      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a5a:	d82a      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a60:	d02e      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a66:	d824      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a6c:	d018      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a72:	d81e      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a7c:	d007      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006a7e:	e018      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a0d      	ldr	r2, [pc, #52]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a8c:	e019      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f8ab 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a9e:	e010      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f954 	bl	8007d54 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ab0:	e007      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006abc:	58024400 	.word	0x58024400
      break;
 8006ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ac8:	4b99      	ldr	r3, [pc, #612]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ad6:	4996      	ldr	r1, [pc, #600]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	658b      	str	r3, [r1, #88]	; 0x58
 8006adc:	e001      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d032      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	2b30      	cmp	r3, #48	; 0x30
 8006af4:	d01c      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006af6:	2b30      	cmp	r3, #48	; 0x30
 8006af8:	d817      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d00c      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d813      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006b06:	2b10      	cmp	r3, #16
 8006b08:	d10f      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0a:	4b89      	ldr	r3, [pc, #548]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	4a88      	ldr	r2, [pc, #544]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b16:	e00e      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f866 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b28:	e005      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006b30:	bf00      	nop
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b3c:	4b7c      	ldr	r3, [pc, #496]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b48:	4979      	ldr	r1, [pc, #484]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b4e:	e001      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d047      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b68:	d030      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6e:	d82a      	bhi.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b74:	d02c      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b7a:	d824      	bhi.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b80:	d018      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b86:	d81e      	bhi.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b90:	d007      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006b92:	e018      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4b66      	ldr	r3, [pc, #408]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a65      	ldr	r2, [pc, #404]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ba0:	e017      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f821 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bb2:	e00e      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 f8ca 	bl	8007d54 <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bc4:	e005      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bd8:	4b55      	ldr	r3, [pc, #340]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	4952      	ldr	r1, [pc, #328]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	650b      	str	r3, [r1, #80]	; 0x50
 8006bea:	e001      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d049      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c04:	d02e      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c0a:	d828      	bhi.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c10:	d02a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c16:	d822      	bhi.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c1c:	d026      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c22:	d81c      	bhi.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c28:	d010      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c2e:	d816      	bhi.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01d      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d111      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 ffd5 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c4a:	e012      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3324      	adds	r3, #36	; 0x24
 8006c50:	2101      	movs	r1, #1
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 f87e 	bl	8007d54 <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c5c:	e009      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      break;
 8006c62:	e006      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c64:	bf00      	nop
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c78:	4b2d      	ldr	r3, [pc, #180]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c84:	492a      	ldr	r1, [pc, #168]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	650b      	str	r3, [r1, #80]	; 0x50
 8006c8a:	e001      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d04d      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca6:	d02e      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cac:	d828      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb2:	d02a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb8:	d822      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cbe:	d026      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cc4:	d81c      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cca:	d010      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd0:	d816      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01d      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cda:	d111      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 ff84 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006cec:	e012      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f82d 	bl	8007d54 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
      break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d28:	4901      	ldr	r1, [pc, #4]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2e:	e003      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02f      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4c:	d00e      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d52:	d814      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d5c:	d10f      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5e:	4baf      	ldr	r3, [pc, #700]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4aae      	ldr	r2, [pc, #696]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d6a:	e00c      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ff3c 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d7c:	e003      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
      break;
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d8c:	4ba3      	ldr	r3, [pc, #652]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d98:	49a0      	ldr	r1, [pc, #640]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d9e:	e001      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d032      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d81b      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006df7 	.word	0x08006df7
 8006dc4:	08006dd1 	.word	0x08006dd1
 8006dc8:	08006ddf 	.word	0x08006ddf
 8006dcc:	08006df7 	.word	0x08006df7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4b92      	ldr	r3, [pc, #584]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a91      	ldr	r2, [pc, #580]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ddc:	e00c      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 ff03 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
      break;
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006dfe:	4b87      	ldr	r3, [pc, #540]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f023 0203 	bic.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	4984      	ldr	r1, [pc, #528]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e10:	e001      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8086 	beq.w	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e24:	4b7e      	ldr	r3, [pc, #504]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a7d      	ldr	r2, [pc, #500]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e30:	f7fc fd34 	bl	800389c <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e36:	e009      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fc fd30 	bl	800389c <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b64      	cmp	r3, #100	; 0x64
 8006e44:	d902      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	75fb      	strb	r3, [r7, #23]
        break;
 8006e4a:	e005      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e4c:	4b74      	ldr	r3, [pc, #464]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ef      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d166      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e68:	4053      	eors	r3, r2
 8006e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d013      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e72:	4b6a      	ldr	r3, [pc, #424]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e7c:	4b67      	ldr	r3, [pc, #412]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	4a66      	ldr	r2, [pc, #408]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e88:	4b64      	ldr	r3, [pc, #400]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a63      	ldr	r2, [pc, #396]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e94:	4a61      	ldr	r2, [pc, #388]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d115      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea6:	f7fc fcf9 	bl	800389c <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eac:	e00b      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eae:	f7fc fcf5 	bl	800389c <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d902      	bls.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ec4:	e005      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec6:	4b55      	ldr	r3, [pc, #340]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0ed      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d126      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee6:	d10d      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006ee8:	4b4c      	ldr	r3, [pc, #304]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef6:	0919      	lsrs	r1, r3, #4
 8006ef8:	4b4a      	ldr	r3, [pc, #296]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006efa:	400b      	ands	r3, r1
 8006efc:	4947      	ldr	r1, [pc, #284]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	610b      	str	r3, [r1, #16]
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a44      	ldr	r2, [pc, #272]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f0e:	6113      	str	r3, [r2, #16]
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1e:	493f      	ldr	r1, [pc, #252]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	670b      	str	r3, [r1, #112]	; 0x70
 8006f24:	e004      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	75bb      	strb	r3, [r7, #22]
 8006f2a:	e001      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8085 	beq.w	8007048 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f42:	2b28      	cmp	r3, #40	; 0x28
 8006f44:	d866      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08007029 	.word	0x08007029
 8006f50:	08007015 	.word	0x08007015
 8006f54:	08007015 	.word	0x08007015
 8006f58:	08007015 	.word	0x08007015
 8006f5c:	08007015 	.word	0x08007015
 8006f60:	08007015 	.word	0x08007015
 8006f64:	08007015 	.word	0x08007015
 8006f68:	08007015 	.word	0x08007015
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08007015 	.word	0x08007015
 8006f74:	08007015 	.word	0x08007015
 8006f78:	08007015 	.word	0x08007015
 8006f7c:	08007015 	.word	0x08007015
 8006f80:	08007015 	.word	0x08007015
 8006f84:	08007015 	.word	0x08007015
 8006f88:	08007015 	.word	0x08007015
 8006f8c:	08007003 	.word	0x08007003
 8006f90:	08007015 	.word	0x08007015
 8006f94:	08007015 	.word	0x08007015
 8006f98:	08007015 	.word	0x08007015
 8006f9c:	08007015 	.word	0x08007015
 8006fa0:	08007015 	.word	0x08007015
 8006fa4:	08007015 	.word	0x08007015
 8006fa8:	08007015 	.word	0x08007015
 8006fac:	08007029 	.word	0x08007029
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007015 	.word	0x08007015
 8006fb8:	08007015 	.word	0x08007015
 8006fbc:	08007015 	.word	0x08007015
 8006fc0:	08007015 	.word	0x08007015
 8006fc4:	08007015 	.word	0x08007015
 8006fc8:	08007015 	.word	0x08007015
 8006fcc:	08007029 	.word	0x08007029
 8006fd0:	08007015 	.word	0x08007015
 8006fd4:	08007015 	.word	0x08007015
 8006fd8:	08007015 	.word	0x08007015
 8006fdc:	08007015 	.word	0x08007015
 8006fe0:	08007015 	.word	0x08007015
 8006fe4:	08007015 	.word	0x08007015
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	08007029 	.word	0x08007029
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fdfa 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007000:	e013      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3324      	adds	r3, #36	; 0x24
 8007006:	2101      	movs	r1, #1
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fea3 	bl	8007d54 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007012:	e00a      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
      break;
 8007018:	e007      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800701a:	bf00      	nop
 800701c:	58024400 	.word	0x58024400
 8007020:	58024800 	.word	0x58024800
 8007024:	00ffffcf 	.word	0x00ffffcf
      break;
 8007028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007030:	4b96      	ldr	r3, [pc, #600]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703c:	4993      	ldr	r1, [pc, #588]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800703e:	4313      	orrs	r3, r2
 8007040:	654b      	str	r3, [r1, #84]	; 0x54
 8007042:	e001      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d038      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007058:	2b05      	cmp	r3, #5
 800705a:	d821      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	080070a7 	.word	0x080070a7
 8007068:	0800707d 	.word	0x0800707d
 800706c:	0800708f 	.word	0x0800708f
 8007070:	080070a7 	.word	0x080070a7
 8007074:	080070a7 	.word	0x080070a7
 8007078:	080070a7 	.word	0x080070a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fdb4 	bl	8007bf0 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800708c:	e00c      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	2101      	movs	r1, #1
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fe5d 	bl	8007d54 <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	e000      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80070a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070ae:	4b77      	ldr	r3, [pc, #476]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	f023 0207 	bic.w	r2, r3, #7
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ba:	4974      	ldr	r1, [pc, #464]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	654b      	str	r3, [r1, #84]	; 0x54
 80070c0:	e001      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d03a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d821      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	08007127 	.word	0x08007127
 80070e8:	080070fd 	.word	0x080070fd
 80070ec:	0800710f 	.word	0x0800710f
 80070f0:	08007127 	.word	0x08007127
 80070f4:	08007127 	.word	0x08007127
 80070f8:	08007127 	.word	0x08007127
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fd74 	bl	8007bf0 <RCCEx_PLL2_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800710c:	e00c      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	2101      	movs	r1, #1
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fe1d 	bl	8007d54 <RCCEx_PLL3_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800711e:	e003      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
      break;
 8007124:	e000      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800712e:	4b57      	ldr	r3, [pc, #348]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	f023 0207 	bic.w	r2, r3, #7
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	4953      	ldr	r1, [pc, #332]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800713e:	4313      	orrs	r3, r2
 8007140:	658b      	str	r3, [r1, #88]	; 0x58
 8007142:	e001      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d04b      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800715e:	d02e      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007164:	d828      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716a:	d02a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800716c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007170:	d822      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007172:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007176:	d026      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800717c:	d81c      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007182:	d010      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007188:	d816      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01d      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800718e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007192:	d111      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fd28 	bl	8007bf0 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071a4:	e012      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2102      	movs	r1, #2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fdd1 	bl	8007d54 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071b6:	e009      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
      break;
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071be:	bf00      	nop
 80071c0:	e004      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e0:	492a      	ldr	r1, [pc, #168]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	654b      	str	r3, [r1, #84]	; 0x54
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d04d      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007202:	d02e      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007204:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007208:	d828      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800720a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720e:	d02a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007214:	d822      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800721a:	d026      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800721c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007220:	d81c      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007226:	d010      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800722c:	d816      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01d      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007236:	d111      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fcd6 	bl	8007bf0 <RCCEx_PLL2_Config>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007248:	e012      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	2102      	movs	r1, #2
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fd7f 	bl	8007d54 <RCCEx_PLL3_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800725a:	e009      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
      break;
 8007260:	e006      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007262:	bf00      	nop
 8007264:	e004      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007266:	bf00      	nop
 8007268:	e002      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800726e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10c      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007284:	4901      	ldr	r1, [pc, #4]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007286:	4313      	orrs	r3, r2
 8007288:	658b      	str	r3, [r1, #88]	; 0x58
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800728c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d04b      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072aa:	d02e      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80072ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072b0:	d828      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	d02a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	d822      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c2:	d026      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80072c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c8:	d81c      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ce:	d010      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80072d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d4:	d816      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01d      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80072da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072de:	d111      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fc82 	bl	8007bf0 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072f0:	e012      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3324      	adds	r3, #36	; 0x24
 80072f6:	2102      	movs	r1, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fd2b 	bl	8007d54 <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007302:	e009      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
      break;
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800730a:	bf00      	nop
 800730c:	e004      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800730e:	bf00      	nop
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800731e:	4b9d      	ldr	r3, [pc, #628]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800732c:	4999      	ldr	r1, [pc, #612]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800732e:	4313      	orrs	r3, r2
 8007330:	658b      	str	r3, [r1, #88]	; 0x58
 8007332:	e001      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734e:	d10a      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3324      	adds	r3, #36	; 0x24
 8007354:	2102      	movs	r1, #2
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fcfc 	bl	8007d54 <RCCEx_PLL3_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007366:	4b8b      	ldr	r3, [pc, #556]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007374:	4987      	ldr	r1, [pc, #540]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007376:	4313      	orrs	r3, r2
 8007378:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800738c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007390:	d10a      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3324      	adds	r3, #36	; 0x24
 8007396:	2102      	movs	r1, #2
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fcdb 	bl	8007d54 <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073a8:	4b7a      	ldr	r3, [pc, #488]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b6:	4977      	ldr	r1, [pc, #476]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d034      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d2:	d01d      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80073d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d8:	d817      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e2:	d009      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80073e4:	e011      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fbff 	bl	8007bf0 <RCCEx_PLL2_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073f6:	e00c      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3324      	adds	r3, #36	; 0x24
 80073fc:	2102      	movs	r1, #2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fca8 	bl	8007d54 <RCCEx_PLL3_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007408:	e003      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
      break;
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007418:	4b5e      	ldr	r3, [pc, #376]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007426:	495b      	ldr	r1, [pc, #364]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007428:	4313      	orrs	r3, r2
 800742a:	658b      	str	r3, [r1, #88]	; 0x58
 800742c:	e001      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d033      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007448:	d01c      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800744a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800744e:	d816      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007454:	d003      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800745a:	d007      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800745c:	e00f      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745e:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	4a4c      	ldr	r2, [pc, #304]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800746a:	e00c      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3324      	adds	r3, #36	; 0x24
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fc6e 	bl	8007d54 <RCCEx_PLL3_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800747c:	e003      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
      break;
 8007482:	e000      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800748c:	4b41      	ldr	r3, [pc, #260]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749a:	493e      	ldr	r1, [pc, #248]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800749c:	4313      	orrs	r3, r2
 800749e:	654b      	str	r3, [r1, #84]	; 0x54
 80074a0:	e001      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d029      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80074ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074be:	d007      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80074c0:	e00f      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c2:	4b34      	ldr	r3, [pc, #208]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4a33      	ldr	r2, [pc, #204]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074ce:	e00b      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	2102      	movs	r1, #2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fb8a 	bl	8007bf0 <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074e0:	e002      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
      break;
 80074e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fa:	4926      	ldr	r1, [pc, #152]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007500:	e001      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2102      	movs	r1, #2
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fc1b 	bl	8007d54 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d033      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753c:	d017      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800753e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007542:	d811      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007548:	d013      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800754a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754e:	d80b      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007558:	d106      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007566:	e007      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	e004      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800756e:	bf00      	nop
 8007570:	e002      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800758a:	4902      	ldr	r1, [pc, #8]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800758c:	4313      	orrs	r3, r2
 800758e:	654b      	str	r3, [r1, #84]	; 0x54
 8007590:	e004      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075a8:	4b31      	ldr	r3, [pc, #196]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b4:	492e      	ldr	r1, [pc, #184]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d009      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075c6:	4b2a      	ldr	r3, [pc, #168]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075d4:	4926      	ldr	r1, [pc, #152]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075e6:	4b22      	ldr	r3, [pc, #136]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f2:	491f      	ldr	r1, [pc, #124]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00d      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007604:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	4a19      	ldr	r2, [pc, #100]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800760a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800760e:	6113      	str	r3, [r2, #16]
 8007610:	4b17      	ldr	r3, [pc, #92]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800761a:	4915      	ldr	r1, [pc, #84]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800761c:	4313      	orrs	r3, r2
 800761e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	da08      	bge.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007634:	490e      	ldr	r1, [pc, #56]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007636:	4313      	orrs	r3, r2
 8007638:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	4906      	ldr	r1, [pc, #24]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007656:	4313      	orrs	r3, r2
 8007658:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800765a:	7dbb      	ldrb	r3, [r7, #22]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400

08007674 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007678:	f7ff f85a 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b06      	ldr	r3, [pc, #24]	; (8007698 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	4904      	ldr	r1, [pc, #16]	; (800769c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	58024400 	.word	0x58024400
 800769c:	0800cc58 	.word	0x0800cc58

080076a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	; 0x24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a8:	4ba1      	ldr	r3, [pc, #644]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80076b2:	4b9f      	ldr	r3, [pc, #636]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	0b1b      	lsrs	r3, r3, #12
 80076b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076be:	4b9c      	ldr	r3, [pc, #624]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80076ca:	4b99      	ldr	r3, [pc, #612]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8111 	beq.w	8007910 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	f000 8083 	beq.w	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	f200 80a1 	bhi.w	8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d056      	beq.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800770a:	e099      	b.n	8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800770c:	4b88      	ldr	r3, [pc, #544]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02d      	beq.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007718:	4b85      	ldr	r3, [pc, #532]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	08db      	lsrs	r3, r3, #3
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	4a84      	ldr	r2, [pc, #528]	; (8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b7b      	ldr	r3, [pc, #492]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007772:	e087      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800793c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b6a      	ldr	r3, [pc, #424]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b6:	e065      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b59      	ldr	r3, [pc, #356]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077fa:	e043      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780e:	4b48      	ldr	r3, [pc, #288]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007822:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800783e:	e021      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007852:	4b37      	ldr	r3, [pc, #220]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007862:	ed97 6a03 	vldr	s12, [r7, #12]
 8007866:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007882:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007884:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	0a5b      	lsrs	r3, r3, #9
 800788a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800789a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789e:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078aa:	ee17 2a90 	vmov	r2, s15
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80078b2:	4b1f      	ldr	r3, [pc, #124]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 2a90 	vmov	r2, s15
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80078e0:	4b13      	ldr	r3, [pc, #76]	; (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	0e1b      	lsrs	r3, r3, #24
 80078e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007906:	ee17 2a90 	vmov	r2, s15
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800790e:	e008      	b.n	8007922 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
}
 8007922:	bf00      	nop
 8007924:	3724      	adds	r7, #36	; 0x24
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	58024400 	.word	0x58024400
 8007934:	03d09000 	.word	0x03d09000
 8007938:	46000000 	.word	0x46000000
 800793c:	4c742400 	.word	0x4c742400
 8007940:	4a742400 	.word	0x4a742400
 8007944:	4bbebc20 	.word	0x4bbebc20

08007948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	; 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007950:	4ba1      	ldr	r3, [pc, #644]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800795a:	4b9f      	ldr	r3, [pc, #636]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	0d1b      	lsrs	r3, r3, #20
 8007960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007964:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007966:	4b9c      	ldr	r3, [pc, #624]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007972:	4b99      	ldr	r3, [pc, #612]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	08db      	lsrs	r3, r3, #3
 8007978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8111 	beq.w	8007bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b02      	cmp	r3, #2
 800799a:	f000 8083 	beq.w	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f200 80a1 	bhi.w	8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d056      	beq.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079b2:	e099      	b.n	8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b4:	4b88      	ldr	r3, [pc, #544]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02d      	beq.n	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c0:	4b85      	ldr	r3, [pc, #532]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	08db      	lsrs	r3, r3, #3
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	4a84      	ldr	r2, [pc, #528]	; (8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b7b      	ldr	r3, [pc, #492]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a1a:	e087      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a5e:	e065      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b59      	ldr	r3, [pc, #356]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aa2:	e043      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007bec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	4b48      	ldr	r3, [pc, #288]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ae6:	e021      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b37      	ldr	r3, [pc, #220]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	0a5b      	lsrs	r3, r3, #9
 8007b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b52:	ee17 2a90 	vmov	r2, s15
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007b5a:	4b1f      	ldr	r3, [pc, #124]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b80:	ee17 2a90 	vmov	r2, s15
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007b88:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bae:	ee17 2a90 	vmov	r2, s15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bb6:	e008      	b.n	8007bca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
}
 8007bca:	bf00      	nop
 8007bcc:	3724      	adds	r7, #36	; 0x24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	46000000 	.word	0x46000000
 8007be4:	4c742400 	.word	0x4c742400
 8007be8:	4a742400 	.word	0x4a742400
 8007bec:	4bbebc20 	.word	0x4bbebc20

08007bf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bfe:	4b53      	ldr	r3, [pc, #332]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d101      	bne.n	8007c0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e099      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c0e:	4b4f      	ldr	r3, [pc, #316]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a4e      	ldr	r2, [pc, #312]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1a:	f7fb fe3f 	bl	800389c <HAL_GetTick>
 8007c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c20:	e008      	b.n	8007c34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c22:	f7fb fe3b 	bl	800389c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e086      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c34:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f0      	bne.n	8007c22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c40:	4b42      	ldr	r3, [pc, #264]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	493f      	ldr	r1, [pc, #252]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	628b      	str	r3, [r1, #40]	; 0x28
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	025b      	lsls	r3, r3, #9
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	041b      	lsls	r3, r3, #16
 8007c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	061b      	lsls	r3, r3, #24
 8007c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c84:	4931      	ldr	r1, [pc, #196]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c8a:	4b30      	ldr	r3, [pc, #192]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	492d      	ldr	r1, [pc, #180]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c9c:	4b2b      	ldr	r3, [pc, #172]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	f023 0220 	bic.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4928      	ldr	r1, [pc, #160]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cae:	4b27      	ldr	r3, [pc, #156]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	4a26      	ldr	r2, [pc, #152]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	f023 0310 	bic.w	r3, r3, #16
 8007cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <RCCEx_PLL2_Config+0x160>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	69d2      	ldr	r2, [r2, #28]
 8007cc6:	00d2      	lsls	r2, r2, #3
 8007cc8:	4920      	ldr	r1, [pc, #128]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cce:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	f043 0310 	orr.w	r3, r3, #16
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4a19      	ldr	r2, [pc, #100]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cec:	e00f      	b.n	8007d0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d00:	e005      	b.n	8007d0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a0e      	ldr	r2, [pc, #56]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1a:	f7fb fdbf 	bl	800389c <HAL_GetTick>
 8007d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d20:	e008      	b.n	8007d34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d22:	f7fb fdbb 	bl	800389c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e006      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0f0      	beq.n	8007d22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	ffff0007 	.word	0xffff0007

08007d54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d62:	4b53      	ldr	r3, [pc, #332]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d101      	bne.n	8007d72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e099      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d72:	4b4f      	ldr	r3, [pc, #316]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a4e      	ldr	r2, [pc, #312]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7fb fd8d 	bl	800389c <HAL_GetTick>
 8007d82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d86:	f7fb fd89 	bl	800389c <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e086      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d98:	4b45      	ldr	r3, [pc, #276]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007da4:	4b42      	ldr	r3, [pc, #264]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	051b      	lsls	r3, r3, #20
 8007db2:	493f      	ldr	r1, [pc, #252]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	628b      	str	r3, [r1, #40]	; 0x28
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	025b      	lsls	r3, r3, #9
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007de8:	4931      	ldr	r1, [pc, #196]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dee:	4b30      	ldr	r3, [pc, #192]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	492d      	ldr	r1, [pc, #180]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e00:	4b2b      	ldr	r3, [pc, #172]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	4928      	ldr	r1, [pc, #160]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e12:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e1e:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <RCCEx_PLL3_Config+0x160>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	69d2      	ldr	r2, [r2, #28]
 8007e2a:	00d2      	lsls	r2, r2, #3
 8007e2c:	4920      	ldr	r1, [pc, #128]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e32:	4b1f      	ldr	r3, [pc, #124]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e44:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e50:	e00f      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e64:	e005      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e66:	4b12      	ldr	r3, [pc, #72]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	4a11      	ldr	r2, [pc, #68]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e72:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0e      	ldr	r2, [pc, #56]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7e:	f7fb fd0d 	bl	800389c <HAL_GetTick>
 8007e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e84:	e008      	b.n	8007e98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e86:	f7fb fd09 	bl	800389c <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e006      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f0      	beq.n	8007e86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	ffff0007 	.word	0xffff0007

08007eb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e0f1      	b.n	80080ae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a78      	ldr	r2, [pc, #480]	; (80080b8 <HAL_SPI_Init+0x200>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <HAL_SPI_Init+0x42>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a77      	ldr	r2, [pc, #476]	; (80080bc <HAL_SPI_Init+0x204>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00a      	beq.n	8007efa <HAL_SPI_Init+0x42>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a75      	ldr	r2, [pc, #468]	; (80080c0 <HAL_SPI_Init+0x208>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d005      	beq.n	8007efa <HAL_SPI_Init+0x42>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d901      	bls.n	8007efa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e0d9      	b.n	80080ae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8e2 	bl	80080c4 <SPI_GetPacketSize>
 8007f00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a6c      	ldr	r2, [pc, #432]	; (80080b8 <HAL_SPI_Init+0x200>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00c      	beq.n	8007f26 <HAL_SPI_Init+0x6e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a6a      	ldr	r2, [pc, #424]	; (80080bc <HAL_SPI_Init+0x204>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <HAL_SPI_Init+0x6e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a69      	ldr	r2, [pc, #420]	; (80080c0 <HAL_SPI_Init+0x208>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d002      	beq.n	8007f26 <HAL_SPI_Init+0x6e>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d811      	bhi.n	8007f4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f2a:	4a63      	ldr	r2, [pc, #396]	; (80080b8 <HAL_SPI_Init+0x200>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d009      	beq.n	8007f44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a61      	ldr	r2, [pc, #388]	; (80080bc <HAL_SPI_Init+0x204>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d004      	beq.n	8007f44 <HAL_SPI_Init+0x8c>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a60      	ldr	r2, [pc, #384]	; (80080c0 <HAL_SPI_Init+0x208>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d104      	bne.n	8007f4e <HAL_SPI_Init+0x96>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d901      	bls.n	8007f4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e0af      	b.n	80080ae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7f9 fee0 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007f8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f94:	d119      	bne.n	8007fca <HAL_SPI_Init+0x112>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f9e:	d103      	bne.n	8007fa8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb8:	d107      	bne.n	8007fca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69da      	ldr	r2, [r3, #28]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	ea42 0103 	orr.w	r1, r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802a:	ea42 0103 	orr.w	r1, r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d113      	bne.n	800806a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008054:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008068:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40013000 	.word	0x40013000
 80080bc:	40003800 	.word	0x40003800
 80080c0:	40003c00 	.word	0x40003c00

080080c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3307      	adds	r3, #7
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e049      	b.n	80081a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7f9 fe8d 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3304      	adds	r3, #4
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f001 f803 	bl	8009144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d001      	beq.n	80081c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e054      	b.n	800826a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a26      	ldr	r2, [pc, #152]	; (8008278 <HAL_TIM_Base_Start_IT+0xd0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d01d      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a22      	ldr	r2, [pc, #136]	; (800827c <HAL_TIM_Base_Start_IT+0xd4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a21      	ldr	r2, [pc, #132]	; (8008280 <HAL_TIM_Base_Start_IT+0xd8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <HAL_TIM_Base_Start_IT+0xdc>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1e      	ldr	r2, [pc, #120]	; (8008288 <HAL_TIM_Base_Start_IT+0xe0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1c      	ldr	r2, [pc, #112]	; (800828c <HAL_TIM_Base_Start_IT+0xe4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <HAL_TIM_Base_Start_IT+0xe8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d115      	bne.n	8008254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <HAL_TIM_Base_Start_IT+0xec>)
 8008230:	4013      	ands	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b06      	cmp	r3, #6
 8008238:	d015      	beq.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008240:	d011      	beq.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0201 	orr.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008252:	e008      	b.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	e000      	b.n	8008268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40010000 	.word	0x40010000
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40000c00 	.word	0x40000c00
 8008288:	40010400 	.word	0x40010400
 800828c:	40001800 	.word	0x40001800
 8008290:	40014000 	.word	0x40014000
 8008294:	00010007 	.word	0x00010007

08008298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e049      	b.n	800833e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f841 	bl	8008346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 ff34 	bl	8009144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_TIM_PWM_Start+0x24>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	bf14      	ite	ne
 8008378:	2301      	movne	r3, #1
 800837a:	2300      	moveq	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e03c      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d109      	bne.n	800839a <HAL_TIM_PWM_Start+0x3e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	bf14      	ite	ne
 8008392:	2301      	movne	r3, #1
 8008394:	2300      	moveq	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	e02f      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d109      	bne.n	80083b4 <HAL_TIM_PWM_Start+0x58>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e022      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b0c      	cmp	r3, #12
 80083b8:	d109      	bne.n	80083ce <HAL_TIM_PWM_Start+0x72>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	2300      	moveq	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	e015      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d109      	bne.n	80083e8 <HAL_TIM_PWM_Start+0x8c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	e008      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	bf14      	ite	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	2300      	moveq	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e0a1      	b.n	8008546 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_TIM_PWM_Start+0xb6>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008410:	e023      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b04      	cmp	r3, #4
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0xc6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008420:	e01b      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xd6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008430:	e013      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b0c      	cmp	r3, #12
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xe6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008440:	e00b      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b10      	cmp	r3, #16
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xf6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008450:	e003      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2201      	movs	r2, #1
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fba6 	bl	8009bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a38      	ldr	r2, [pc, #224]	; (8008550 <HAL_TIM_PWM_Start+0x1f4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a37      	ldr	r2, [pc, #220]	; (8008554 <HAL_TIM_PWM_Start+0x1f8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00e      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a35      	ldr	r2, [pc, #212]	; (8008558 <HAL_TIM_PWM_Start+0x1fc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a34      	ldr	r2, [pc, #208]	; (800855c <HAL_TIM_PWM_Start+0x200>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a32      	ldr	r2, [pc, #200]	; (8008560 <HAL_TIM_PWM_Start+0x204>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_TIM_PWM_Start+0x142>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_TIM_PWM_Start+0x144>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a25      	ldr	r2, [pc, #148]	; (8008550 <HAL_TIM_PWM_Start+0x1f4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d022      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c6:	d01d      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a25      	ldr	r2, [pc, #148]	; (8008564 <HAL_TIM_PWM_Start+0x208>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d018      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a24      	ldr	r2, [pc, #144]	; (8008568 <HAL_TIM_PWM_Start+0x20c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a22      	ldr	r2, [pc, #136]	; (800856c <HAL_TIM_PWM_Start+0x210>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00e      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <HAL_TIM_PWM_Start+0x1f8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d009      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a1e      	ldr	r2, [pc, #120]	; (8008570 <HAL_TIM_PWM_Start+0x214>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d004      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a16      	ldr	r2, [pc, #88]	; (8008558 <HAL_TIM_PWM_Start+0x1fc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d115      	bne.n	8008530 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <HAL_TIM_PWM_Start+0x218>)
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b06      	cmp	r3, #6
 8008514:	d015      	beq.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851c:	d011      	beq.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852e:	e008      	b.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e000      	b.n	8008544 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400
 8008560:	40014800 	.word	0x40014800
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40001800 	.word	0x40001800
 8008574:	00010007 	.word	0x00010007

08008578 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e049      	b.n	800861e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f841 	bl	8008626 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f000 fdc4 	bl	8009144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
	...

0800863c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d104      	bne.n	800865a <HAL_TIM_IC_Start_IT+0x1e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008656:	b2db      	uxtb	r3, r3
 8008658:	e023      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x66>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b04      	cmp	r3, #4
 800865e:	d104      	bne.n	800866a <HAL_TIM_IC_Start_IT+0x2e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008666:	b2db      	uxtb	r3, r3
 8008668:	e01b      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x66>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b08      	cmp	r3, #8
 800866e:	d104      	bne.n	800867a <HAL_TIM_IC_Start_IT+0x3e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008676:	b2db      	uxtb	r3, r3
 8008678:	e013      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x66>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b0c      	cmp	r3, #12
 800867e:	d104      	bne.n	800868a <HAL_TIM_IC_Start_IT+0x4e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e00b      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x66>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d104      	bne.n	800869a <HAL_TIM_IC_Start_IT+0x5e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008696:	b2db      	uxtb	r3, r3
 8008698:	e003      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x66>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <HAL_TIM_IC_Start_IT+0x78>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	e013      	b.n	80086dc <HAL_TIM_IC_Start_IT+0xa0>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d104      	bne.n	80086c4 <HAL_TIM_IC_Start_IT+0x88>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	e00b      	b.n	80086dc <HAL_TIM_IC_Start_IT+0xa0>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d104      	bne.n	80086d4 <HAL_TIM_IC_Start_IT+0x98>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	e003      	b.n	80086dc <HAL_TIM_IC_Start_IT+0xa0>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d102      	bne.n	80086ea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80086e4:	7b7b      	ldrb	r3, [r7, #13]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d001      	beq.n	80086ee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e0e2      	b.n	80088b4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <HAL_TIM_IC_Start_IT+0xc2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086fc:	e023      	b.n	8008746 <HAL_TIM_IC_Start_IT+0x10a>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b04      	cmp	r3, #4
 8008702:	d104      	bne.n	800870e <HAL_TIM_IC_Start_IT+0xd2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800870c:	e01b      	b.n	8008746 <HAL_TIM_IC_Start_IT+0x10a>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b08      	cmp	r3, #8
 8008712:	d104      	bne.n	800871e <HAL_TIM_IC_Start_IT+0xe2>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	e013      	b.n	8008746 <HAL_TIM_IC_Start_IT+0x10a>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b0c      	cmp	r3, #12
 8008722:	d104      	bne.n	800872e <HAL_TIM_IC_Start_IT+0xf2>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800872c:	e00b      	b.n	8008746 <HAL_TIM_IC_Start_IT+0x10a>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b10      	cmp	r3, #16
 8008732:	d104      	bne.n	800873e <HAL_TIM_IC_Start_IT+0x102>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800873c:	e003      	b.n	8008746 <HAL_TIM_IC_Start_IT+0x10a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2202      	movs	r2, #2
 8008742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <HAL_TIM_IC_Start_IT+0x11a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008754:	e013      	b.n	800877e <HAL_TIM_IC_Start_IT+0x142>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b04      	cmp	r3, #4
 800875a:	d104      	bne.n	8008766 <HAL_TIM_IC_Start_IT+0x12a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008764:	e00b      	b.n	800877e <HAL_TIM_IC_Start_IT+0x142>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b08      	cmp	r3, #8
 800876a:	d104      	bne.n	8008776 <HAL_TIM_IC_Start_IT+0x13a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008774:	e003      	b.n	800877e <HAL_TIM_IC_Start_IT+0x142>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b0c      	cmp	r3, #12
 8008782:	d841      	bhi.n	8008808 <HAL_TIM_IC_Start_IT+0x1cc>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <HAL_TIM_IC_Start_IT+0x150>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087c1 	.word	0x080087c1
 8008790:	08008809 	.word	0x08008809
 8008794:	08008809 	.word	0x08008809
 8008798:	08008809 	.word	0x08008809
 800879c:	080087d3 	.word	0x080087d3
 80087a0:	08008809 	.word	0x08008809
 80087a4:	08008809 	.word	0x08008809
 80087a8:	08008809 	.word	0x08008809
 80087ac:	080087e5 	.word	0x080087e5
 80087b0:	08008809 	.word	0x08008809
 80087b4:	08008809 	.word	0x08008809
 80087b8:	08008809 	.word	0x08008809
 80087bc:	080087f7 	.word	0x080087f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0202 	orr.w	r2, r2, #2
 80087ce:	60da      	str	r2, [r3, #12]
      break;
 80087d0:	e01d      	b.n	800880e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0204 	orr.w	r2, r2, #4
 80087e0:	60da      	str	r2, [r3, #12]
      break;
 80087e2:	e014      	b.n	800880e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0208 	orr.w	r2, r2, #8
 80087f2:	60da      	str	r2, [r3, #12]
      break;
 80087f4:	e00b      	b.n	800880e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0210 	orr.w	r2, r2, #16
 8008804:	60da      	str	r2, [r3, #12]
      break;
 8008806:	e002      	b.n	800880e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	73fb      	strb	r3, [r7, #15]
      break;
 800880c:	bf00      	nop
  }

  if (status == HAL_OK)
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d14e      	bne.n	80088b2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f9c9 	bl	8009bb4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a25      	ldr	r2, [pc, #148]	; (80088bc <HAL_TIM_IC_Start_IT+0x280>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d01d      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <HAL_TIM_IC_Start_IT+0x284>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <HAL_TIM_IC_Start_IT+0x288>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <HAL_TIM_IC_Start_IT+0x28c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_TIM_IC_Start_IT+0x290>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	; (80088d0 <HAL_TIM_IC_Start_IT+0x294>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_IC_Start_IT+0x236>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <HAL_TIM_IC_Start_IT+0x298>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d115      	bne.n	800889e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <HAL_TIM_IC_Start_IT+0x29c>)
 800887a:	4013      	ands	r3, r2
 800887c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d015      	beq.n	80088b0 <HAL_TIM_IC_Start_IT+0x274>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d011      	beq.n	80088b0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889c:	e008      	b.n	80088b0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40000400 	.word	0x40000400
 80088c4:	40000800 	.word	0x40000800
 80088c8:	40000c00 	.word	0x40000c00
 80088cc:	40010400 	.word	0x40010400
 80088d0:	40001800 	.word	0x40001800
 80088d4:	40014000 	.word	0x40014000
 80088d8:	00010007 	.word	0x00010007

080088dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d122      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d11b      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0202 	mvn.w	r2, #2
 8008908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7f9 fd56 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fbee 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fbf5 	bl	800911c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d122      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11b      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0204 	mvn.w	r2, #4
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f9 fd2c 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fbc4 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fbcb 	bl	800911c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b08      	cmp	r3, #8
 8008998:	d122      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d11b      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0208 	mvn.w	r2, #8
 80089b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2204      	movs	r2, #4
 80089b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f9 fd02 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 80089cc:	e005      	b.n	80089da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fb9a 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fba1 	bl	800911c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0310 	and.w	r3, r3, #16
 80089ea:	2b10      	cmp	r3, #16
 80089ec:	d122      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d11b      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f9 fcd8 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fb70 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb77 	bl	800911c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d10e      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0201 	mvn.w	r2, #1
 8008a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fb4a 	bl	80090f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b80      	cmp	r3, #128	; 0x80
 8008a6c:	d10e      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 f952 	bl	8009d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9a:	d10e      	bne.n	8008aba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa6:	2b80      	cmp	r3, #128	; 0x80
 8008aa8:	d107      	bne.n	8008aba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f945 	bl	8009d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	d10e      	bne.n	8008ae6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d107      	bne.n	8008ae6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fb25 	bl	8009130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d10e      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d107      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f06f 0220 	mvn.w	r2, #32
 8008b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f905 	bl	8009d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e088      	b.n	8008c4a <HAL_TIM_IC_ConfigChannel+0x130>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11b      	bne.n	8008b7e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f000 fe65 	bl	8009824 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 020c 	bic.w	r2, r2, #12
 8008b68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6999      	ldr	r1, [r3, #24]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	619a      	str	r2, [r3, #24]
 8008b7c:	e060      	b.n	8008c40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d11c      	bne.n	8008bbe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f000 fee9 	bl	800996a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ba6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6999      	ldr	r1, [r3, #24]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	021a      	lsls	r2, r3, #8
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	619a      	str	r2, [r3, #24]
 8008bbc:	e040      	b.n	8008c40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d11b      	bne.n	8008bfc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f000 ff36 	bl	8009a44 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69da      	ldr	r2, [r3, #28]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 020c 	bic.w	r2, r2, #12
 8008be6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69d9      	ldr	r1, [r3, #28]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	61da      	str	r2, [r3, #28]
 8008bfa:	e021      	b.n	8008c40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b0c      	cmp	r3, #12
 8008c00:	d11c      	bne.n	8008c3c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f000 ff53 	bl	8009abc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69d9      	ldr	r1, [r3, #28]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	021a      	lsls	r2, r3, #8
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	61da      	str	r2, [r3, #28]
 8008c3a:	e001      	b.n	8008c40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e0ff      	b.n	8008e72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b14      	cmp	r3, #20
 8008c7e:	f200 80f0 	bhi.w	8008e62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008e63 	.word	0x08008e63
 8008c90:	08008e63 	.word	0x08008e63
 8008c94:	08008e63 	.word	0x08008e63
 8008c98:	08008d1d 	.word	0x08008d1d
 8008c9c:	08008e63 	.word	0x08008e63
 8008ca0:	08008e63 	.word	0x08008e63
 8008ca4:	08008e63 	.word	0x08008e63
 8008ca8:	08008d5f 	.word	0x08008d5f
 8008cac:	08008e63 	.word	0x08008e63
 8008cb0:	08008e63 	.word	0x08008e63
 8008cb4:	08008e63 	.word	0x08008e63
 8008cb8:	08008d9f 	.word	0x08008d9f
 8008cbc:	08008e63 	.word	0x08008e63
 8008cc0:	08008e63 	.word	0x08008e63
 8008cc4:	08008e63 	.word	0x08008e63
 8008cc8:	08008de1 	.word	0x08008de1
 8008ccc:	08008e63 	.word	0x08008e63
 8008cd0:	08008e63 	.word	0x08008e63
 8008cd4:	08008e63 	.word	0x08008e63
 8008cd8:	08008e21 	.word	0x08008e21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fac8 	bl	8009278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699a      	ldr	r2, [r3, #24]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0208 	orr.w	r2, r2, #8
 8008cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0204 	bic.w	r2, r2, #4
 8008d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6999      	ldr	r1, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	691a      	ldr	r2, [r3, #16]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	619a      	str	r2, [r3, #24]
      break;
 8008d1a:	e0a5      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fb38 	bl	8009398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6999      	ldr	r1, [r3, #24]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	021a      	lsls	r2, r3, #8
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	619a      	str	r2, [r3, #24]
      break;
 8008d5c:	e084      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fba1 	bl	80094ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0208 	orr.w	r2, r2, #8
 8008d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0204 	bic.w	r2, r2, #4
 8008d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69d9      	ldr	r1, [r3, #28]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	61da      	str	r2, [r3, #28]
      break;
 8008d9c:	e064      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fc09 	bl	80095bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69da      	ldr	r2, [r3, #28]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	69da      	ldr	r2, [r3, #28]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69d9      	ldr	r1, [r3, #28]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	021a      	lsls	r2, r3, #8
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	61da      	str	r2, [r3, #28]
      break;
 8008dde:	e043      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fc52 	bl	8009690 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0208 	orr.w	r2, r2, #8
 8008dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0204 	bic.w	r2, r2, #4
 8008e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e1e:	e023      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fc96 	bl	8009758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	021a      	lsls	r2, r3, #8
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e60:	e002      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
      break;
 8008e66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop

08008e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_TIM_ConfigClockSource+0x1c>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e0dc      	b.n	8009052 <HAL_TIM_ConfigClockSource+0x1d6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	4b6a      	ldr	r3, [pc, #424]	; (800905c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a64      	ldr	r2, [pc, #400]	; (8009060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	f000 80a9 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ed4:	4a62      	ldr	r2, [pc, #392]	; (8009060 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	f200 80ae 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008edc:	4a61      	ldr	r2, [pc, #388]	; (8009064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	f000 80a1 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ee4:	4a5f      	ldr	r2, [pc, #380]	; (8009064 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	f200 80a6 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008eec:	4a5e      	ldr	r2, [pc, #376]	; (8009068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	f000 8099 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ef4:	4a5c      	ldr	r2, [pc, #368]	; (8009068 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	f200 809e 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008efc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f00:	f000 8091 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f08:	f200 8096 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f10:	f000 8089 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f18:	f200 808e 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f20:	d03e      	beq.n	8008fa0 <HAL_TIM_ConfigClockSource+0x124>
 8008f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f26:	f200 8087 	bhi.w	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	f000 8086 	beq.w	800903e <HAL_TIM_ConfigClockSource+0x1c2>
 8008f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f36:	d87f      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f38:	2b70      	cmp	r3, #112	; 0x70
 8008f3a:	d01a      	beq.n	8008f72 <HAL_TIM_ConfigClockSource+0xf6>
 8008f3c:	2b70      	cmp	r3, #112	; 0x70
 8008f3e:	d87b      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f40:	2b60      	cmp	r3, #96	; 0x60
 8008f42:	d050      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x16a>
 8008f44:	2b60      	cmp	r3, #96	; 0x60
 8008f46:	d877      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f48:	2b50      	cmp	r3, #80	; 0x50
 8008f4a:	d03c      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x14a>
 8008f4c:	2b50      	cmp	r3, #80	; 0x50
 8008f4e:	d873      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f50:	2b40      	cmp	r3, #64	; 0x40
 8008f52:	d058      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0x18a>
 8008f54:	2b40      	cmp	r3, #64	; 0x40
 8008f56:	d86f      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f58:	2b30      	cmp	r3, #48	; 0x30
 8008f5a:	d064      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f5c:	2b30      	cmp	r3, #48	; 0x30
 8008f5e:	d86b      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	d060      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	d867      	bhi.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d05c      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d05a      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f70:	e062      	b.n	8009038 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6899      	ldr	r1, [r3, #8]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f000 fdf7 	bl	8009b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	609a      	str	r2, [r3, #8]
      break;
 8008f9e:	e04f      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	6899      	ldr	r1, [r3, #8]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f000 fde0 	bl	8009b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fc2:	609a      	str	r2, [r3, #8]
      break;
 8008fc4:	e03c      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	6859      	ldr	r1, [r3, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f000 fc9a 	bl	800990c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2150      	movs	r1, #80	; 0x50
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fdaa 	bl	8009b38 <TIM_ITRx_SetConfig>
      break;
 8008fe4:	e02c      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6859      	ldr	r1, [r3, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f000 fcf6 	bl	80099e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2160      	movs	r1, #96	; 0x60
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fd9a 	bl	8009b38 <TIM_ITRx_SetConfig>
      break;
 8009004:	e01c      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	6859      	ldr	r1, [r3, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	461a      	mov	r2, r3
 8009014:	f000 fc7a 	bl	800990c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2140      	movs	r1, #64	; 0x40
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fd8a 	bl	8009b38 <TIM_ITRx_SetConfig>
      break;
 8009024:	e00c      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	4610      	mov	r0, r2
 8009032:	f000 fd81 	bl	8009b38 <TIM_ITRx_SetConfig>
      break;
 8009036:	e003      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
      break;
 800903c:	e000      	b.n	8009040 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800903e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	ffceff88 	.word	0xffceff88
 8009060:	00100040 	.word	0x00100040
 8009064:	00100030 	.word	0x00100030
 8009068:	00100020 	.word	0x00100020

0800906c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b0c      	cmp	r3, #12
 800907e:	d831      	bhi.n	80090e4 <HAL_TIM_ReadCapturedValue+0x78>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090bd 	.word	0x080090bd
 800908c:	080090e5 	.word	0x080090e5
 8009090:	080090e5 	.word	0x080090e5
 8009094:	080090e5 	.word	0x080090e5
 8009098:	080090c7 	.word	0x080090c7
 800909c:	080090e5 	.word	0x080090e5
 80090a0:	080090e5 	.word	0x080090e5
 80090a4:	080090e5 	.word	0x080090e5
 80090a8:	080090d1 	.word	0x080090d1
 80090ac:	080090e5 	.word	0x080090e5
 80090b0:	080090e5 	.word	0x080090e5
 80090b4:	080090e5 	.word	0x080090e5
 80090b8:	080090db 	.word	0x080090db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c2:	60fb      	str	r3, [r7, #12]

      break;
 80090c4:	e00f      	b.n	80090e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	60fb      	str	r3, [r7, #12]

      break;
 80090ce:	e00a      	b.n	80090e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	60fb      	str	r3, [r7, #12]

      break;
 80090d8:	e005      	b.n	80090e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	60fb      	str	r3, [r7, #12]

      break;
 80090e2:	e000      	b.n	80090e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80090e4:	bf00      	nop
  }

  return tmpreg;
 80090e6:	68fb      	ldr	r3, [r7, #12]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a40      	ldr	r2, [pc, #256]	; (8009258 <TIM_Base_SetConfig+0x114>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d013      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009162:	d00f      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a3d      	ldr	r2, [pc, #244]	; (800925c <TIM_Base_SetConfig+0x118>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00b      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a3c      	ldr	r2, [pc, #240]	; (8009260 <TIM_Base_SetConfig+0x11c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d007      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a3b      	ldr	r2, [pc, #236]	; (8009264 <TIM_Base_SetConfig+0x120>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_Base_SetConfig+0x40>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a3a      	ldr	r2, [pc, #232]	; (8009268 <TIM_Base_SetConfig+0x124>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d108      	bne.n	8009196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2f      	ldr	r2, [pc, #188]	; (8009258 <TIM_Base_SetConfig+0x114>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01f      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a4:	d01b      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2c      	ldr	r2, [pc, #176]	; (800925c <TIM_Base_SetConfig+0x118>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d017      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	; (8009260 <TIM_Base_SetConfig+0x11c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a2a      	ldr	r2, [pc, #168]	; (8009264 <TIM_Base_SetConfig+0x120>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00f      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a29      	ldr	r2, [pc, #164]	; (8009268 <TIM_Base_SetConfig+0x124>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00b      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a28      	ldr	r2, [pc, #160]	; (800926c <TIM_Base_SetConfig+0x128>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d007      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a27      	ldr	r2, [pc, #156]	; (8009270 <TIM_Base_SetConfig+0x12c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d003      	beq.n	80091de <TIM_Base_SetConfig+0x9a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a26      	ldr	r2, [pc, #152]	; (8009274 <TIM_Base_SetConfig+0x130>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d108      	bne.n	80091f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a10      	ldr	r2, [pc, #64]	; (8009258 <TIM_Base_SetConfig+0x114>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00f      	beq.n	800923c <TIM_Base_SetConfig+0xf8>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a12      	ldr	r2, [pc, #72]	; (8009268 <TIM_Base_SetConfig+0x124>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00b      	beq.n	800923c <TIM_Base_SetConfig+0xf8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a11      	ldr	r2, [pc, #68]	; (800926c <TIM_Base_SetConfig+0x128>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <TIM_Base_SetConfig+0xf8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a10      	ldr	r2, [pc, #64]	; (8009270 <TIM_Base_SetConfig+0x12c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <TIM_Base_SetConfig+0xf8>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a0f      	ldr	r2, [pc, #60]	; (8009274 <TIM_Base_SetConfig+0x130>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d103      	bne.n	8009244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	691a      	ldr	r2, [r3, #16]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	615a      	str	r2, [r3, #20]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40010000 	.word	0x40010000
 800925c:	40000400 	.word	0x40000400
 8009260:	40000800 	.word	0x40000800
 8009264:	40000c00 	.word	0x40000c00
 8009268:	40010400 	.word	0x40010400
 800926c:	40014000 	.word	0x40014000
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800

08009278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f023 0201 	bic.w	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4b37      	ldr	r3, [pc, #220]	; (8009380 <TIM_OC1_SetConfig+0x108>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f023 0302 	bic.w	r3, r3, #2
 80092c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <TIM_OC1_SetConfig+0x10c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d00f      	beq.n	80092f4 <TIM_OC1_SetConfig+0x7c>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a2c      	ldr	r2, [pc, #176]	; (8009388 <TIM_OC1_SetConfig+0x110>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00b      	beq.n	80092f4 <TIM_OC1_SetConfig+0x7c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a2b      	ldr	r2, [pc, #172]	; (800938c <TIM_OC1_SetConfig+0x114>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d007      	beq.n	80092f4 <TIM_OC1_SetConfig+0x7c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a2a      	ldr	r2, [pc, #168]	; (8009390 <TIM_OC1_SetConfig+0x118>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC1_SetConfig+0x7c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a29      	ldr	r2, [pc, #164]	; (8009394 <TIM_OC1_SetConfig+0x11c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d10c      	bne.n	800930e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 0308 	bic.w	r3, r3, #8
 80092fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f023 0304 	bic.w	r3, r3, #4
 800930c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a1c      	ldr	r2, [pc, #112]	; (8009384 <TIM_OC1_SetConfig+0x10c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00f      	beq.n	8009336 <TIM_OC1_SetConfig+0xbe>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a1b      	ldr	r2, [pc, #108]	; (8009388 <TIM_OC1_SetConfig+0x110>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00b      	beq.n	8009336 <TIM_OC1_SetConfig+0xbe>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a1a      	ldr	r2, [pc, #104]	; (800938c <TIM_OC1_SetConfig+0x114>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d007      	beq.n	8009336 <TIM_OC1_SetConfig+0xbe>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a19      	ldr	r2, [pc, #100]	; (8009390 <TIM_OC1_SetConfig+0x118>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d003      	beq.n	8009336 <TIM_OC1_SetConfig+0xbe>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a18      	ldr	r2, [pc, #96]	; (8009394 <TIM_OC1_SetConfig+0x11c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d111      	bne.n	800935a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	621a      	str	r2, [r3, #32]
}
 8009374:	bf00      	nop
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	fffeff8f 	.word	0xfffeff8f
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400
 800938c:	40014000 	.word	0x40014000
 8009390:	40014400 	.word	0x40014400
 8009394:	40014800 	.word	0x40014800

08009398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f023 0210 	bic.w	r2, r3, #16
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4b34      	ldr	r3, [pc, #208]	; (8009494 <TIM_OC2_SetConfig+0xfc>)
 80093c4:	4013      	ands	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f023 0320 	bic.w	r3, r3, #32
 80093e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	011b      	lsls	r3, r3, #4
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a29      	ldr	r2, [pc, #164]	; (8009498 <TIM_OC2_SetConfig+0x100>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d003      	beq.n	8009400 <TIM_OC2_SetConfig+0x68>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a28      	ldr	r2, [pc, #160]	; (800949c <TIM_OC2_SetConfig+0x104>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d10d      	bne.n	800941c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1e      	ldr	r2, [pc, #120]	; (8009498 <TIM_OC2_SetConfig+0x100>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00f      	beq.n	8009444 <TIM_OC2_SetConfig+0xac>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a1d      	ldr	r2, [pc, #116]	; (800949c <TIM_OC2_SetConfig+0x104>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00b      	beq.n	8009444 <TIM_OC2_SetConfig+0xac>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a1c      	ldr	r2, [pc, #112]	; (80094a0 <TIM_OC2_SetConfig+0x108>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d007      	beq.n	8009444 <TIM_OC2_SetConfig+0xac>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a1b      	ldr	r2, [pc, #108]	; (80094a4 <TIM_OC2_SetConfig+0x10c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d003      	beq.n	8009444 <TIM_OC2_SetConfig+0xac>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1a      	ldr	r2, [pc, #104]	; (80094a8 <TIM_OC2_SetConfig+0x110>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d113      	bne.n	800946c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800944a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4313      	orrs	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	621a      	str	r2, [r3, #32]
}
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	feff8fff 	.word	0xfeff8fff
 8009498:	40010000 	.word	0x40010000
 800949c:	40010400 	.word	0x40010400
 80094a0:	40014000 	.word	0x40014000
 80094a4:	40014400 	.word	0x40014400
 80094a8:	40014800 	.word	0x40014800

080094ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4b33      	ldr	r3, [pc, #204]	; (80095a4 <TIM_OC3_SetConfig+0xf8>)
 80094d8:	4013      	ands	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f023 0303 	bic.w	r3, r3, #3
 80094e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a28      	ldr	r2, [pc, #160]	; (80095a8 <TIM_OC3_SetConfig+0xfc>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d003      	beq.n	8009512 <TIM_OC3_SetConfig+0x66>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a27      	ldr	r2, [pc, #156]	; (80095ac <TIM_OC3_SetConfig+0x100>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d10d      	bne.n	800952e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800952c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a1d      	ldr	r2, [pc, #116]	; (80095a8 <TIM_OC3_SetConfig+0xfc>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00f      	beq.n	8009556 <TIM_OC3_SetConfig+0xaa>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a1c      	ldr	r2, [pc, #112]	; (80095ac <TIM_OC3_SetConfig+0x100>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00b      	beq.n	8009556 <TIM_OC3_SetConfig+0xaa>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a1b      	ldr	r2, [pc, #108]	; (80095b0 <TIM_OC3_SetConfig+0x104>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d007      	beq.n	8009556 <TIM_OC3_SetConfig+0xaa>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1a      	ldr	r2, [pc, #104]	; (80095b4 <TIM_OC3_SetConfig+0x108>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d003      	beq.n	8009556 <TIM_OC3_SetConfig+0xaa>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <TIM_OC3_SetConfig+0x10c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d113      	bne.n	800957e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800955c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	621a      	str	r2, [r3, #32]
}
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	fffeff8f 	.word	0xfffeff8f
 80095a8:	40010000 	.word	0x40010000
 80095ac:	40010400 	.word	0x40010400
 80095b0:	40014000 	.word	0x40014000
 80095b4:	40014400 	.word	0x40014400
 80095b8:	40014800 	.word	0x40014800

080095bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4b24      	ldr	r3, [pc, #144]	; (8009678 <TIM_OC4_SetConfig+0xbc>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	021b      	lsls	r3, r3, #8
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	031b      	lsls	r3, r3, #12
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a19      	ldr	r2, [pc, #100]	; (800967c <TIM_OC4_SetConfig+0xc0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d00f      	beq.n	800963c <TIM_OC4_SetConfig+0x80>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a18      	ldr	r2, [pc, #96]	; (8009680 <TIM_OC4_SetConfig+0xc4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00b      	beq.n	800963c <TIM_OC4_SetConfig+0x80>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a17      	ldr	r2, [pc, #92]	; (8009684 <TIM_OC4_SetConfig+0xc8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_OC4_SetConfig+0x80>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a16      	ldr	r2, [pc, #88]	; (8009688 <TIM_OC4_SetConfig+0xcc>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_OC4_SetConfig+0x80>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a15      	ldr	r2, [pc, #84]	; (800968c <TIM_OC4_SetConfig+0xd0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d109      	bne.n	8009650 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	019b      	lsls	r3, r3, #6
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	621a      	str	r2, [r3, #32]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	feff8fff 	.word	0xfeff8fff
 800967c:	40010000 	.word	0x40010000
 8009680:	40010400 	.word	0x40010400
 8009684:	40014000 	.word	0x40014000
 8009688:	40014400 	.word	0x40014400
 800968c:	40014800 	.word	0x40014800

08009690 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4b21      	ldr	r3, [pc, #132]	; (8009740 <TIM_OC5_SetConfig+0xb0>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a18      	ldr	r2, [pc, #96]	; (8009744 <TIM_OC5_SetConfig+0xb4>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00f      	beq.n	8009706 <TIM_OC5_SetConfig+0x76>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a17      	ldr	r2, [pc, #92]	; (8009748 <TIM_OC5_SetConfig+0xb8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00b      	beq.n	8009706 <TIM_OC5_SetConfig+0x76>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a16      	ldr	r2, [pc, #88]	; (800974c <TIM_OC5_SetConfig+0xbc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <TIM_OC5_SetConfig+0x76>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a15      	ldr	r2, [pc, #84]	; (8009750 <TIM_OC5_SetConfig+0xc0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d003      	beq.n	8009706 <TIM_OC5_SetConfig+0x76>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a14      	ldr	r2, [pc, #80]	; (8009754 <TIM_OC5_SetConfig+0xc4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d109      	bne.n	800971a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800970c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	621a      	str	r2, [r3, #32]
}
 8009734:	bf00      	nop
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	fffeff8f 	.word	0xfffeff8f
 8009744:	40010000 	.word	0x40010000
 8009748:	40010400 	.word	0x40010400
 800974c:	40014000 	.word	0x40014000
 8009750:	40014400 	.word	0x40014400
 8009754:	40014800 	.word	0x40014800

08009758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4b22      	ldr	r3, [pc, #136]	; (800980c <TIM_OC6_SetConfig+0xb4>)
 8009784:	4013      	ands	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800979a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	051b      	lsls	r3, r3, #20
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a19      	ldr	r2, [pc, #100]	; (8009810 <TIM_OC6_SetConfig+0xb8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00f      	beq.n	80097d0 <TIM_OC6_SetConfig+0x78>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <TIM_OC6_SetConfig+0xbc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00b      	beq.n	80097d0 <TIM_OC6_SetConfig+0x78>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a17      	ldr	r2, [pc, #92]	; (8009818 <TIM_OC6_SetConfig+0xc0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d007      	beq.n	80097d0 <TIM_OC6_SetConfig+0x78>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a16      	ldr	r2, [pc, #88]	; (800981c <TIM_OC6_SetConfig+0xc4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC6_SetConfig+0x78>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a15      	ldr	r2, [pc, #84]	; (8009820 <TIM_OC6_SetConfig+0xc8>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d109      	bne.n	80097e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	029b      	lsls	r3, r3, #10
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	621a      	str	r2, [r3, #32]
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	feff8fff 	.word	0xfeff8fff
 8009810:	40010000 	.word	0x40010000
 8009814:	40010400 	.word	0x40010400
 8009818:	40014000 	.word	0x40014000
 800981c:	40014400 	.word	0x40014400
 8009820:	40014800 	.word	0x40014800

08009824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	f023 0201 	bic.w	r2, r3, #1
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4a28      	ldr	r2, [pc, #160]	; (80098f0 <TIM_TI1_SetConfig+0xcc>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01b      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009858:	d017      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4a25      	ldr	r2, [pc, #148]	; (80098f4 <TIM_TI1_SetConfig+0xd0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a24      	ldr	r2, [pc, #144]	; (80098f8 <TIM_TI1_SetConfig+0xd4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4a23      	ldr	r2, [pc, #140]	; (80098fc <TIM_TI1_SetConfig+0xd8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a22      	ldr	r2, [pc, #136]	; (8009900 <TIM_TI1_SetConfig+0xdc>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a21      	ldr	r2, [pc, #132]	; (8009904 <TIM_TI1_SetConfig+0xe0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_TI1_SetConfig+0x66>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a20      	ldr	r2, [pc, #128]	; (8009908 <TIM_TI1_SetConfig+0xe4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d101      	bne.n	800988e <TIM_TI1_SetConfig+0x6a>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <TIM_TI1_SetConfig+0x6c>
 800988e:	2300      	movs	r3, #0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d008      	beq.n	80098a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f023 0303 	bic.w	r3, r3, #3
 800989a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	e003      	b.n	80098ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f023 030a 	bic.w	r3, r3, #10
 80098c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f003 030a 	and.w	r3, r3, #10
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	621a      	str	r2, [r3, #32]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40000400 	.word	0x40000400
 80098f8:	40000800 	.word	0x40000800
 80098fc:	40000c00 	.word	0x40000c00
 8009900:	40010400 	.word	0x40010400
 8009904:	40001800 	.word	0x40001800
 8009908:	40014000 	.word	0x40014000

0800990c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f023 030a 	bic.w	r3, r3, #10
 8009948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	621a      	str	r2, [r3, #32]
}
 800995e:	bf00      	nop
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800996a:	b480      	push	{r7}
 800996c:	b087      	sub	sp, #28
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	f023 0210 	bic.w	r2, r3, #16
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	031b      	lsls	r3, r3, #12
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	621a      	str	r2, [r3, #32]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	f023 0210 	bic.w	r2, r3, #16
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	031b      	lsls	r3, r3, #12
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	621a      	str	r2, [r3, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009a94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	621a      	str	r2, [r3, #32]
}
 8009ab0:	bf00      	nop
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	031b      	lsls	r3, r3, #12
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	031b      	lsls	r3, r3, #12
 8009b14:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
	...

08009b38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <TIM_ITRx_SetConfig+0x38>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f043 0307 	orr.w	r3, r3, #7
 8009b5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	609a      	str	r2, [r3, #8]
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	ffcfff8f 	.word	0xffcfff8f

08009b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	021a      	lsls	r2, r3, #8
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	431a      	orrs	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	609a      	str	r2, [r3, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1a      	ldr	r2, [r3, #32]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e06d      	b.n	8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a30      	ldr	r2, [pc, #192]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a2f      	ldr	r2, [pc, #188]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d108      	bne.n	8009c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a20      	ldr	r2, [pc, #128]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d022      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c8a:	d01d      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d018      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a1a      	ldr	r2, [pc, #104]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00e      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a15      	ldr	r2, [pc, #84]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d009      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400
 8009d08:	40000400 	.word	0x40000400
 8009d0c:	40000800 	.word	0x40000800
 8009d10:	40000c00 	.word	0x40000c00
 8009d14:	40001800 	.word	0x40001800
 8009d18:	40014000 	.word	0x40014000

08009d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e042      	b.n	8009df0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7f8 f9fb 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2224      	movs	r2, #36	; 0x24
 8009d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f022 0201 	bic.w	r2, r2, #1
 8009d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fbe0 	bl	800a560 <UART_SetConfig>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e022      	b.n	8009df0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 f93c 	bl	800b030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0201 	orr.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f9c3 	bl	800b174 <UART_CheckIdleState>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b0ba      	sub	sp, #232	; 0xe8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e22:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e26:	4013      	ands	r3, r2
 8009e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11b      	bne.n	8009e6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d015      	beq.n	8009e6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 835a 	beq.w	800a516 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
      }
      return;
 8009e6a:	e354      	b.n	800a516 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 811f 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e7a:	4b8b      	ldr	r3, [pc, #556]	; (800a0a8 <HAL_UART_IRQHandler+0x2b0>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e86:	4b89      	ldr	r3, [pc, #548]	; (800a0ac <HAL_UART_IRQHandler+0x2b4>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8112 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d011      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xc8>
 8009e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2201      	movs	r2, #1
 8009eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb6:	f043 0201 	orr.w	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d011      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xf8>
 8009ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2202      	movs	r2, #2
 8009ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d011      	beq.n	8009f20 <HAL_UART_IRQHandler+0x128>
 8009efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f16:	f043 0202 	orr.w	r2, r3, #2
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d017      	beq.n	8009f5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d105      	bne.n	8009f44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f3c:	4b5a      	ldr	r3, [pc, #360]	; (800a0a8 <HAL_UART_IRQHandler+0x2b0>)
 8009f3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f52:	f043 0208 	orr.w	r2, r3, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d012      	beq.n	8009f8e <HAL_UART_IRQHandler+0x196>
 8009f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00c      	beq.n	8009f8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f84:	f043 0220 	orr.w	r2, r3, #32
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 82c0 	beq.w	800a51a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d013      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d105      	bne.n	8009fbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d005      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d04f      	beq.n	800a092 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 f9d2 	bl	800b39c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a002:	2b40      	cmp	r3, #64	; 0x40
 800a004:	d141      	bne.n	800a08a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a01c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a03e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a04a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1d9      	bne.n	800a006 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d013      	beq.n	800a082 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a05e:	4a14      	ldr	r2, [pc, #80]	; (800a0b0 <HAL_UART_IRQHandler+0x2b8>)
 800a060:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a066:	4618      	mov	r0, r3
 800a068:	f7fa f882 	bl	8004170 <HAL_DMA_Abort_IT>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d017      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a080:	e00f      	b.n	800a0a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa56 	bl	800a534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a088:	e00b      	b.n	800a0a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa52 	bl	800a534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a090:	e007      	b.n	800a0a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa4e 	bl	800a534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a0a0:	e23b      	b.n	800a51a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a2:	bf00      	nop
    return;
 800a0a4:	e239      	b.n	800a51a <HAL_UART_IRQHandler+0x722>
 800a0a6:	bf00      	nop
 800a0a8:	10000001 	.word	0x10000001
 800a0ac:	04000120 	.word	0x04000120
 800a0b0:	0800b469 	.word	0x0800b469

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	f040 81ce 	bne.w	800a45a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 81c7 	beq.w	800a45a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 81c0 	beq.w	800a45a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2210      	movs	r2, #16
 800a0e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	f040 813b 	bne.w	800a368 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a8b      	ldr	r2, [pc, #556]	; (800a328 <HAL_UART_IRQHandler+0x530>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d059      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a89      	ldr	r2, [pc, #548]	; (800a32c <HAL_UART_IRQHandler+0x534>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d053      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a87      	ldr	r2, [pc, #540]	; (800a330 <HAL_UART_IRQHandler+0x538>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d04d      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a85      	ldr	r2, [pc, #532]	; (800a334 <HAL_UART_IRQHandler+0x53c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d047      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a83      	ldr	r2, [pc, #524]	; (800a338 <HAL_UART_IRQHandler+0x540>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d041      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a81      	ldr	r2, [pc, #516]	; (800a33c <HAL_UART_IRQHandler+0x544>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d03b      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a7f      	ldr	r2, [pc, #508]	; (800a340 <HAL_UART_IRQHandler+0x548>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d035      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a7d      	ldr	r2, [pc, #500]	; (800a344 <HAL_UART_IRQHandler+0x54c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d02f      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a7b      	ldr	r2, [pc, #492]	; (800a348 <HAL_UART_IRQHandler+0x550>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d029      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a79      	ldr	r2, [pc, #484]	; (800a34c <HAL_UART_IRQHandler+0x554>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d023      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a77      	ldr	r2, [pc, #476]	; (800a350 <HAL_UART_IRQHandler+0x558>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d01d      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a75      	ldr	r2, [pc, #468]	; (800a354 <HAL_UART_IRQHandler+0x55c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d017      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a73      	ldr	r2, [pc, #460]	; (800a358 <HAL_UART_IRQHandler+0x560>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d011      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a71      	ldr	r2, [pc, #452]	; (800a35c <HAL_UART_IRQHandler+0x564>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a6f      	ldr	r2, [pc, #444]	; (800a360 <HAL_UART_IRQHandler+0x568>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d005      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x3ba>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a6d      	ldr	r2, [pc, #436]	; (800a364 <HAL_UART_IRQHandler+0x56c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d105      	bne.n	800a1be <HAL_UART_IRQHandler+0x3c6>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	e004      	b.n	800a1c8 <HAL_UART_IRQHandler+0x3d0>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 81a4 	beq.w	800a51e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	f080 819c 	bcs.w	800a51e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fa:	f000 8086 	beq.w	800a30a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a21a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a22c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a234:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1da      	bne.n	800a1fe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a26c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a270:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a274:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a27e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e1      	bne.n	800a248 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3308      	adds	r3, #8
 800a28a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e3      	bne.n	800a284 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2da:	f023 0310 	bic.w	r3, r3, #16
 800a2de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e4      	bne.n	800a2ca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a304:	4618      	mov	r0, r3
 800a306:	f7f9 fc15 	bl	8003b34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a316:	b29b      	uxth	r3, r3
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f912 	bl	800a548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a324:	e0fb      	b.n	800a51e <HAL_UART_IRQHandler+0x726>
 800a326:	bf00      	nop
 800a328:	40020010 	.word	0x40020010
 800a32c:	40020028 	.word	0x40020028
 800a330:	40020040 	.word	0x40020040
 800a334:	40020058 	.word	0x40020058
 800a338:	40020070 	.word	0x40020070
 800a33c:	40020088 	.word	0x40020088
 800a340:	400200a0 	.word	0x400200a0
 800a344:	400200b8 	.word	0x400200b8
 800a348:	40020410 	.word	0x40020410
 800a34c:	40020428 	.word	0x40020428
 800a350:	40020440 	.word	0x40020440
 800a354:	40020458 	.word	0x40020458
 800a358:	40020470 	.word	0x40020470
 800a35c:	40020488 	.word	0x40020488
 800a360:	400204a0 	.word	0x400204a0
 800a364:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a374:	b29b      	uxth	r3, r3
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 80cc 	beq.w	800a522 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a38a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80c7 	beq.w	800a522 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e4      	bne.n	800a394 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a3da:	6a3a      	ldr	r2, [r7, #32]
 800a3dc:	4b54      	ldr	r3, [pc, #336]	; (800a530 <HAL_UART_IRQHandler+0x738>)
 800a3de:	4013      	ands	r3, r2
 800a3e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3ee:	633a      	str	r2, [r7, #48]	; 0x30
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e3      	bne.n	800a3ca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	60fb      	str	r3, [r7, #12]
   return(result);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0310 	bic.w	r3, r3, #16
 800a42a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	69b9      	ldr	r1, [r7, #24]
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	617b      	str	r3, [r7, #20]
   return(result);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e4      	bne.n	800a416 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a44c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f878 	bl	800a548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a458:	e063      	b.n	800a522 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a45e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <HAL_UART_IRQHandler+0x68c>
 800a466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d008      	beq.n	800a484 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a47a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 f834 	bl	800b4ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a482:	e051      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d014      	beq.n	800a4ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d008      	beq.n	800a4ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d03a      	beq.n	800a526 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	4798      	blx	r3
    }
    return;
 800a4b8:	e035      	b.n	800a526 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <HAL_UART_IRQHandler+0x6e2>
 800a4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 ffde 	bl	800b494 <UART_EndTransmit_IT>
    return;
 800a4d8:	e026      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <HAL_UART_IRQHandler+0x702>
 800a4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 f80d 	bl	800b512 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4f8:	e016      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d010      	beq.n	800a528 <HAL_UART_IRQHandler+0x730>
 800a506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	da0c      	bge.n	800a528 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fff5 	bl	800b4fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a514:	e008      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
      return;
 800a516:	bf00      	nop
 800a518:	e006      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
    return;
 800a51a:	bf00      	nop
 800a51c:	e004      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
      return;
 800a51e:	bf00      	nop
 800a520:	e002      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
      return;
 800a522:	bf00      	nop
 800a524:	e000      	b.n	800a528 <HAL_UART_IRQHandler+0x730>
    return;
 800a526:	bf00      	nop
  }
}
 800a528:	37e8      	adds	r7, #232	; 0xe8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	effffffe 	.word	0xeffffffe

0800a534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a564:	b092      	sub	sp, #72	; 0x48
 800a566:	af00      	add	r7, sp, #0
 800a568:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	431a      	orrs	r2, r3
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	431a      	orrs	r2, r3
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	4313      	orrs	r3, r2
 800a586:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4bbe      	ldr	r3, [pc, #760]	; (800a888 <UART_SetConfig+0x328>)
 800a590:	4013      	ands	r3, r2
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	6812      	ldr	r2, [r2, #0]
 800a596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a598:	430b      	orrs	r3, r1
 800a59a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4ab3      	ldr	r2, [pc, #716]	; (800a88c <UART_SetConfig+0x32c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d004      	beq.n	800a5cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	4baf      	ldr	r3, [pc, #700]	; (800a890 <UART_SetConfig+0x330>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	6812      	ldr	r2, [r2, #0]
 800a5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	f023 010f 	bic.w	r1, r3, #15
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4aa6      	ldr	r2, [pc, #664]	; (800a894 <UART_SetConfig+0x334>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d177      	bne.n	800a6f0 <UART_SetConfig+0x190>
 800a600:	4ba5      	ldr	r3, [pc, #660]	; (800a898 <UART_SetConfig+0x338>)
 800a602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a608:	2b28      	cmp	r3, #40	; 0x28
 800a60a:	d86d      	bhi.n	800a6e8 <UART_SetConfig+0x188>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0xb4>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a6b9 	.word	0x0800a6b9
 800a618:	0800a6e9 	.word	0x0800a6e9
 800a61c:	0800a6e9 	.word	0x0800a6e9
 800a620:	0800a6e9 	.word	0x0800a6e9
 800a624:	0800a6e9 	.word	0x0800a6e9
 800a628:	0800a6e9 	.word	0x0800a6e9
 800a62c:	0800a6e9 	.word	0x0800a6e9
 800a630:	0800a6e9 	.word	0x0800a6e9
 800a634:	0800a6c1 	.word	0x0800a6c1
 800a638:	0800a6e9 	.word	0x0800a6e9
 800a63c:	0800a6e9 	.word	0x0800a6e9
 800a640:	0800a6e9 	.word	0x0800a6e9
 800a644:	0800a6e9 	.word	0x0800a6e9
 800a648:	0800a6e9 	.word	0x0800a6e9
 800a64c:	0800a6e9 	.word	0x0800a6e9
 800a650:	0800a6e9 	.word	0x0800a6e9
 800a654:	0800a6c9 	.word	0x0800a6c9
 800a658:	0800a6e9 	.word	0x0800a6e9
 800a65c:	0800a6e9 	.word	0x0800a6e9
 800a660:	0800a6e9 	.word	0x0800a6e9
 800a664:	0800a6e9 	.word	0x0800a6e9
 800a668:	0800a6e9 	.word	0x0800a6e9
 800a66c:	0800a6e9 	.word	0x0800a6e9
 800a670:	0800a6e9 	.word	0x0800a6e9
 800a674:	0800a6d1 	.word	0x0800a6d1
 800a678:	0800a6e9 	.word	0x0800a6e9
 800a67c:	0800a6e9 	.word	0x0800a6e9
 800a680:	0800a6e9 	.word	0x0800a6e9
 800a684:	0800a6e9 	.word	0x0800a6e9
 800a688:	0800a6e9 	.word	0x0800a6e9
 800a68c:	0800a6e9 	.word	0x0800a6e9
 800a690:	0800a6e9 	.word	0x0800a6e9
 800a694:	0800a6d9 	.word	0x0800a6d9
 800a698:	0800a6e9 	.word	0x0800a6e9
 800a69c:	0800a6e9 	.word	0x0800a6e9
 800a6a0:	0800a6e9 	.word	0x0800a6e9
 800a6a4:	0800a6e9 	.word	0x0800a6e9
 800a6a8:	0800a6e9 	.word	0x0800a6e9
 800a6ac:	0800a6e9 	.word	0x0800a6e9
 800a6b0:	0800a6e9 	.word	0x0800a6e9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6be:	e222      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6c0:	2304      	movs	r3, #4
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c6:	e21e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ce:	e21a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d6:	e216      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6d8:	2320      	movs	r3, #32
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6de:	e212      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e6:	e20e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e20a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a69      	ldr	r2, [pc, #420]	; (800a89c <UART_SetConfig+0x33c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d130      	bne.n	800a75c <UART_SetConfig+0x1fc>
 800a6fa:	4b67      	ldr	r3, [pc, #412]	; (800a898 <UART_SetConfig+0x338>)
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b05      	cmp	r3, #5
 800a704:	d826      	bhi.n	800a754 <UART_SetConfig+0x1f4>
 800a706:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <UART_SetConfig+0x1ac>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a725 	.word	0x0800a725
 800a710:	0800a72d 	.word	0x0800a72d
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a73d 	.word	0x0800a73d
 800a71c:	0800a745 	.word	0x0800a745
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e1ec      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e1e8      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e1e4      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e1e0      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a744:	2320      	movs	r3, #32
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e1dc      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e1d8      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a754:	2380      	movs	r3, #128	; 0x80
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e1d4      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a4f      	ldr	r2, [pc, #316]	; (800a8a0 <UART_SetConfig+0x340>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d130      	bne.n	800a7c8 <UART_SetConfig+0x268>
 800a766:	4b4c      	ldr	r3, [pc, #304]	; (800a898 <UART_SetConfig+0x338>)
 800a768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d826      	bhi.n	800a7c0 <UART_SetConfig+0x260>
 800a772:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0x218>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e1b6      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e1b2      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e1ae      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e1aa      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e1a6      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e1a2      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e19e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a35      	ldr	r2, [pc, #212]	; (800a8a4 <UART_SetConfig+0x344>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d130      	bne.n	800a834 <UART_SetConfig+0x2d4>
 800a7d2:	4b31      	ldr	r3, [pc, #196]	; (800a898 <UART_SetConfig+0x338>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d826      	bhi.n	800a82c <UART_SetConfig+0x2cc>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <UART_SetConfig+0x284>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a7fd 	.word	0x0800a7fd
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e180      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e17c      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e178      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e174      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a81c:	2320      	movs	r3, #32
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a822:	e170      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a824:	2340      	movs	r3, #64	; 0x40
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82a:	e16c      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a832:	e168      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a1b      	ldr	r2, [pc, #108]	; (800a8a8 <UART_SetConfig+0x348>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d142      	bne.n	800a8c4 <UART_SetConfig+0x364>
 800a83e:	4b16      	ldr	r3, [pc, #88]	; (800a898 <UART_SetConfig+0x338>)
 800a840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b05      	cmp	r3, #5
 800a848:	d838      	bhi.n	800a8bc <UART_SetConfig+0x35c>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0x2f0>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a869 	.word	0x0800a869
 800a854:	0800a871 	.word	0x0800a871
 800a858:	0800a879 	.word	0x0800a879
 800a85c:	0800a881 	.word	0x0800a881
 800a860:	0800a8ad 	.word	0x0800a8ad
 800a864:	0800a8b5 	.word	0x0800a8b5
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e14a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a870:	2304      	movs	r3, #4
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e146      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a878:	2308      	movs	r3, #8
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e142      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a880:	2310      	movs	r3, #16
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e13e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a888:	cfff69f3 	.word	0xcfff69f3
 800a88c:	58000c00 	.word	0x58000c00
 800a890:	11fff4ff 	.word	0x11fff4ff
 800a894:	40011000 	.word	0x40011000
 800a898:	58024400 	.word	0x58024400
 800a89c:	40004400 	.word	0x40004400
 800a8a0:	40004800 	.word	0x40004800
 800a8a4:	40004c00 	.word	0x40004c00
 800a8a8:	40005000 	.word	0x40005000
 800a8ac:	2320      	movs	r3, #32
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b2:	e128      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e124      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e120      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4acb      	ldr	r2, [pc, #812]	; (800abf8 <UART_SetConfig+0x698>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d176      	bne.n	800a9bc <UART_SetConfig+0x45c>
 800a8ce:	4bcb      	ldr	r3, [pc, #812]	; (800abfc <UART_SetConfig+0x69c>)
 800a8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8d6:	2b28      	cmp	r3, #40	; 0x28
 800a8d8:	d86c      	bhi.n	800a9b4 <UART_SetConfig+0x454>
 800a8da:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <UART_SetConfig+0x380>)
 800a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e0:	0800a985 	.word	0x0800a985
 800a8e4:	0800a9b5 	.word	0x0800a9b5
 800a8e8:	0800a9b5 	.word	0x0800a9b5
 800a8ec:	0800a9b5 	.word	0x0800a9b5
 800a8f0:	0800a9b5 	.word	0x0800a9b5
 800a8f4:	0800a9b5 	.word	0x0800a9b5
 800a8f8:	0800a9b5 	.word	0x0800a9b5
 800a8fc:	0800a9b5 	.word	0x0800a9b5
 800a900:	0800a98d 	.word	0x0800a98d
 800a904:	0800a9b5 	.word	0x0800a9b5
 800a908:	0800a9b5 	.word	0x0800a9b5
 800a90c:	0800a9b5 	.word	0x0800a9b5
 800a910:	0800a9b5 	.word	0x0800a9b5
 800a914:	0800a9b5 	.word	0x0800a9b5
 800a918:	0800a9b5 	.word	0x0800a9b5
 800a91c:	0800a9b5 	.word	0x0800a9b5
 800a920:	0800a995 	.word	0x0800a995
 800a924:	0800a9b5 	.word	0x0800a9b5
 800a928:	0800a9b5 	.word	0x0800a9b5
 800a92c:	0800a9b5 	.word	0x0800a9b5
 800a930:	0800a9b5 	.word	0x0800a9b5
 800a934:	0800a9b5 	.word	0x0800a9b5
 800a938:	0800a9b5 	.word	0x0800a9b5
 800a93c:	0800a9b5 	.word	0x0800a9b5
 800a940:	0800a99d 	.word	0x0800a99d
 800a944:	0800a9b5 	.word	0x0800a9b5
 800a948:	0800a9b5 	.word	0x0800a9b5
 800a94c:	0800a9b5 	.word	0x0800a9b5
 800a950:	0800a9b5 	.word	0x0800a9b5
 800a954:	0800a9b5 	.word	0x0800a9b5
 800a958:	0800a9b5 	.word	0x0800a9b5
 800a95c:	0800a9b5 	.word	0x0800a9b5
 800a960:	0800a9a5 	.word	0x0800a9a5
 800a964:	0800a9b5 	.word	0x0800a9b5
 800a968:	0800a9b5 	.word	0x0800a9b5
 800a96c:	0800a9b5 	.word	0x0800a9b5
 800a970:	0800a9b5 	.word	0x0800a9b5
 800a974:	0800a9b5 	.word	0x0800a9b5
 800a978:	0800a9b5 	.word	0x0800a9b5
 800a97c:	0800a9b5 	.word	0x0800a9b5
 800a980:	0800a9ad 	.word	0x0800a9ad
 800a984:	2301      	movs	r3, #1
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98a:	e0bc      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a98c:	2304      	movs	r3, #4
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a992:	e0b8      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a994:	2308      	movs	r3, #8
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99a:	e0b4      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a99c:	2310      	movs	r3, #16
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a2:	e0b0      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9aa:	e0ac      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e0a8      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e0a4      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a8f      	ldr	r2, [pc, #572]	; (800ac00 <UART_SetConfig+0x6a0>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d130      	bne.n	800aa28 <UART_SetConfig+0x4c8>
 800a9c6:	4b8d      	ldr	r3, [pc, #564]	; (800abfc <UART_SetConfig+0x69c>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d826      	bhi.n	800aa20 <UART_SetConfig+0x4c0>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <UART_SetConfig+0x478>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800a9f1 	.word	0x0800a9f1
 800a9dc:	0800a9f9 	.word	0x0800a9f9
 800a9e0:	0800aa01 	.word	0x0800aa01
 800a9e4:	0800aa09 	.word	0x0800aa09
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e086      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e082      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e07e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e07a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa10:	2320      	movs	r3, #32
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e076      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e072      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa20:	2380      	movs	r3, #128	; 0x80
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e06e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a75      	ldr	r2, [pc, #468]	; (800ac04 <UART_SetConfig+0x6a4>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d130      	bne.n	800aa94 <UART_SetConfig+0x534>
 800aa32:	4b72      	ldr	r3, [pc, #456]	; (800abfc <UART_SetConfig+0x69c>)
 800aa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b05      	cmp	r3, #5
 800aa3c:	d826      	bhi.n	800aa8c <UART_SetConfig+0x52c>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <UART_SetConfig+0x4e4>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa5d 	.word	0x0800aa5d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	0800aa6d 	.word	0x0800aa6d
 800aa50:	0800aa75 	.word	0x0800aa75
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e050      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e04c      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e048      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7a:	e044      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa82:	e040      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa84:	2340      	movs	r3, #64	; 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e03c      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa8c:	2380      	movs	r3, #128	; 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e038      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a5b      	ldr	r2, [pc, #364]	; (800ac08 <UART_SetConfig+0x6a8>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d130      	bne.n	800ab00 <UART_SetConfig+0x5a0>
 800aa9e:	4b57      	ldr	r3, [pc, #348]	; (800abfc <UART_SetConfig+0x69c>)
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d826      	bhi.n	800aaf8 <UART_SetConfig+0x598>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <UART_SetConfig+0x550>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac9 	.word	0x0800aac9
 800aab4:	0800aad1 	.word	0x0800aad1
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800aae1 	.word	0x0800aae1
 800aac0:	0800aae9 	.word	0x0800aae9
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	2302      	movs	r3, #2
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aace:	e01a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad6:	e016      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aade:	e012      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae6:	e00e      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aae8:	2320      	movs	r3, #32
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaee:	e00a      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf6:	e006      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800aaf8:	2380      	movs	r3, #128	; 0x80
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafe:	e002      	b.n	800ab06 <UART_SetConfig+0x5a6>
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a3f      	ldr	r2, [pc, #252]	; (800ac08 <UART_SetConfig+0x6a8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	f040 80f8 	bne.w	800ad02 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	dc46      	bgt.n	800aba8 <UART_SetConfig+0x648>
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	f2c0 8082 	blt.w	800ac24 <UART_SetConfig+0x6c4>
 800ab20:	3b02      	subs	r3, #2
 800ab22:	2b1e      	cmp	r3, #30
 800ab24:	d87e      	bhi.n	800ac24 <UART_SetConfig+0x6c4>
 800ab26:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <UART_SetConfig+0x5cc>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800abaf 	.word	0x0800abaf
 800ab30:	0800ac25 	.word	0x0800ac25
 800ab34:	0800abb7 	.word	0x0800abb7
 800ab38:	0800ac25 	.word	0x0800ac25
 800ab3c:	0800ac25 	.word	0x0800ac25
 800ab40:	0800ac25 	.word	0x0800ac25
 800ab44:	0800abc7 	.word	0x0800abc7
 800ab48:	0800ac25 	.word	0x0800ac25
 800ab4c:	0800ac25 	.word	0x0800ac25
 800ab50:	0800ac25 	.word	0x0800ac25
 800ab54:	0800ac25 	.word	0x0800ac25
 800ab58:	0800ac25 	.word	0x0800ac25
 800ab5c:	0800ac25 	.word	0x0800ac25
 800ab60:	0800ac25 	.word	0x0800ac25
 800ab64:	0800abd7 	.word	0x0800abd7
 800ab68:	0800ac25 	.word	0x0800ac25
 800ab6c:	0800ac25 	.word	0x0800ac25
 800ab70:	0800ac25 	.word	0x0800ac25
 800ab74:	0800ac25 	.word	0x0800ac25
 800ab78:	0800ac25 	.word	0x0800ac25
 800ab7c:	0800ac25 	.word	0x0800ac25
 800ab80:	0800ac25 	.word	0x0800ac25
 800ab84:	0800ac25 	.word	0x0800ac25
 800ab88:	0800ac25 	.word	0x0800ac25
 800ab8c:	0800ac25 	.word	0x0800ac25
 800ab90:	0800ac25 	.word	0x0800ac25
 800ab94:	0800ac25 	.word	0x0800ac25
 800ab98:	0800ac25 	.word	0x0800ac25
 800ab9c:	0800ac25 	.word	0x0800ac25
 800aba0:	0800ac25 	.word	0x0800ac25
 800aba4:	0800ac17 	.word	0x0800ac17
 800aba8:	2b40      	cmp	r3, #64	; 0x40
 800abaa:	d037      	beq.n	800ac1c <UART_SetConfig+0x6bc>
 800abac:	e03a      	b.n	800ac24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abae:	f7fc fd61 	bl	8007674 <HAL_RCCEx_GetD3PCLK1Freq>
 800abb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abb4:	e03c      	b.n	800ac30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fc fd70 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc4:	e034      	b.n	800ac30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc6:	f107 0318 	add.w	r3, r7, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fc febc 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd4:	e02c      	b.n	800ac30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd6:	4b09      	ldr	r3, [pc, #36]	; (800abfc <UART_SetConfig+0x69c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d016      	beq.n	800ac10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abe2:	4b06      	ldr	r3, [pc, #24]	; (800abfc <UART_SetConfig+0x69c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	4a07      	ldr	r2, [pc, #28]	; (800ac0c <UART_SetConfig+0x6ac>)
 800abee:	fa22 f303 	lsr.w	r3, r2, r3
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abf4:	e01c      	b.n	800ac30 <UART_SetConfig+0x6d0>
 800abf6:	bf00      	nop
 800abf8:	40011400 	.word	0x40011400
 800abfc:	58024400 	.word	0x58024400
 800ac00:	40007800 	.word	0x40007800
 800ac04:	40007c00 	.word	0x40007c00
 800ac08:	58000c00 	.word	0x58000c00
 800ac0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ac10:	4b9d      	ldr	r3, [pc, #628]	; (800ae88 <UART_SetConfig+0x928>)
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac14:	e00c      	b.n	800ac30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac16:	4b9d      	ldr	r3, [pc, #628]	; (800ae8c <UART_SetConfig+0x92c>)
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1a:	e009      	b.n	800ac30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac22:	e005      	b.n	800ac30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 81de 	beq.w	800aff4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	4a94      	ldr	r2, [pc, #592]	; (800ae90 <UART_SetConfig+0x930>)
 800ac3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac42:	461a      	mov	r2, r3
 800ac44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac46:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac4a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4613      	mov	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4413      	add	r3, r2
 800ac56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d305      	bcc.n	800ac68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d903      	bls.n	800ac70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac6e:	e1c1      	b.n	800aff4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac72:	2200      	movs	r2, #0
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	60fa      	str	r2, [r7, #12]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	4a84      	ldr	r2, [pc, #528]	; (800ae90 <UART_SetConfig+0x930>)
 800ac7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	2200      	movs	r2, #0
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	607a      	str	r2, [r7, #4]
 800ac8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac92:	f7f5 fb21 	bl	80002d8 <__aeabi_uldivmod>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	020b      	lsls	r3, r1, #8
 800aca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acac:	0202      	lsls	r2, r0, #8
 800acae:	6979      	ldr	r1, [r7, #20]
 800acb0:	6849      	ldr	r1, [r1, #4]
 800acb2:	0849      	lsrs	r1, r1, #1
 800acb4:	2000      	movs	r0, #0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4605      	mov	r5, r0
 800acba:	eb12 0804 	adds.w	r8, r2, r4
 800acbe:	eb43 0905 	adc.w	r9, r3, r5
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	469a      	mov	sl, r3
 800acca:	4693      	mov	fp, r2
 800accc:	4652      	mov	r2, sl
 800acce:	465b      	mov	r3, fp
 800acd0:	4640      	mov	r0, r8
 800acd2:	4649      	mov	r1, r9
 800acd4:	f7f5 fb00 	bl	80002d8 <__aeabi_uldivmod>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4613      	mov	r3, r2
 800acde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ace6:	d308      	bcc.n	800acfa <UART_SetConfig+0x79a>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acee:	d204      	bcs.n	800acfa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acf6:	60da      	str	r2, [r3, #12]
 800acf8:	e17c      	b.n	800aff4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad00:	e178      	b.n	800aff4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad0a:	f040 80c5 	bne.w	800ae98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ad0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	dc48      	bgt.n	800ada8 <UART_SetConfig+0x848>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	db7b      	blt.n	800ae12 <UART_SetConfig+0x8b2>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d879      	bhi.n	800ae12 <UART_SetConfig+0x8b2>
 800ad1e:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <UART_SetConfig+0x7c4>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800adaf 	.word	0x0800adaf
 800ad28:	0800adb7 	.word	0x0800adb7
 800ad2c:	0800ae13 	.word	0x0800ae13
 800ad30:	0800ae13 	.word	0x0800ae13
 800ad34:	0800adbf 	.word	0x0800adbf
 800ad38:	0800ae13 	.word	0x0800ae13
 800ad3c:	0800ae13 	.word	0x0800ae13
 800ad40:	0800ae13 	.word	0x0800ae13
 800ad44:	0800adcf 	.word	0x0800adcf
 800ad48:	0800ae13 	.word	0x0800ae13
 800ad4c:	0800ae13 	.word	0x0800ae13
 800ad50:	0800ae13 	.word	0x0800ae13
 800ad54:	0800ae13 	.word	0x0800ae13
 800ad58:	0800ae13 	.word	0x0800ae13
 800ad5c:	0800ae13 	.word	0x0800ae13
 800ad60:	0800ae13 	.word	0x0800ae13
 800ad64:	0800addf 	.word	0x0800addf
 800ad68:	0800ae13 	.word	0x0800ae13
 800ad6c:	0800ae13 	.word	0x0800ae13
 800ad70:	0800ae13 	.word	0x0800ae13
 800ad74:	0800ae13 	.word	0x0800ae13
 800ad78:	0800ae13 	.word	0x0800ae13
 800ad7c:	0800ae13 	.word	0x0800ae13
 800ad80:	0800ae13 	.word	0x0800ae13
 800ad84:	0800ae13 	.word	0x0800ae13
 800ad88:	0800ae13 	.word	0x0800ae13
 800ad8c:	0800ae13 	.word	0x0800ae13
 800ad90:	0800ae13 	.word	0x0800ae13
 800ad94:	0800ae13 	.word	0x0800ae13
 800ad98:	0800ae13 	.word	0x0800ae13
 800ad9c:	0800ae13 	.word	0x0800ae13
 800ada0:	0800ae13 	.word	0x0800ae13
 800ada4:	0800ae05 	.word	0x0800ae05
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	d02e      	beq.n	800ae0a <UART_SetConfig+0x8aa>
 800adac:	e031      	b.n	800ae12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adae:	f7fb fcef 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 800adb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adb4:	e033      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adb6:	f7fb fd01 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 800adba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adbc:	e02f      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fc fc6c 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adcc:	e027      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adce:	f107 0318 	add.w	r3, r7, #24
 800add2:	4618      	mov	r0, r3
 800add4:	f7fc fdb8 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800addc:	e01f      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adde:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <UART_SetConfig+0x934>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adea:	4b2a      	ldr	r3, [pc, #168]	; (800ae94 <UART_SetConfig+0x934>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	4a24      	ldr	r2, [pc, #144]	; (800ae88 <UART_SetConfig+0x928>)
 800adf6:	fa22 f303 	lsr.w	r3, r2, r3
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adfc:	e00f      	b.n	800ae1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800adfe:	4b22      	ldr	r3, [pc, #136]	; (800ae88 <UART_SetConfig+0x928>)
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae02:	e00c      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae04:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <UART_SetConfig+0x92c>)
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae08:	e009      	b.n	800ae1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae10:	e005      	b.n	800ae1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 80e7 	beq.w	800aff4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	4a19      	ldr	r2, [pc, #100]	; (800ae90 <UART_SetConfig+0x930>)
 800ae2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae30:	461a      	mov	r2, r3
 800ae32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae38:	005a      	lsls	r2, r3, #1
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	085b      	lsrs	r3, r3, #1
 800ae40:	441a      	add	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d916      	bls.n	800ae80 <UART_SetConfig+0x920>
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae58:	d212      	bcs.n	800ae80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f023 030f 	bic.w	r3, r3, #15
 800ae62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	085b      	lsrs	r3, r3, #1
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae72:	4313      	orrs	r3, r2
 800ae74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ae7c:	60da      	str	r2, [r3, #12]
 800ae7e:	e0b9      	b.n	800aff4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae86:	e0b5      	b.n	800aff4 <UART_SetConfig+0xa94>
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	003d0900 	.word	0x003d0900
 800ae90:	0800cc68 	.word	0x0800cc68
 800ae94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae9c:	2b20      	cmp	r3, #32
 800ae9e:	dc49      	bgt.n	800af34 <UART_SetConfig+0x9d4>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	db7c      	blt.n	800af9e <UART_SetConfig+0xa3e>
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	d87a      	bhi.n	800af9e <UART_SetConfig+0xa3e>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <UART_SetConfig+0x950>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af43 	.word	0x0800af43
 800aeb8:	0800af9f 	.word	0x0800af9f
 800aebc:	0800af9f 	.word	0x0800af9f
 800aec0:	0800af4b 	.word	0x0800af4b
 800aec4:	0800af9f 	.word	0x0800af9f
 800aec8:	0800af9f 	.word	0x0800af9f
 800aecc:	0800af9f 	.word	0x0800af9f
 800aed0:	0800af5b 	.word	0x0800af5b
 800aed4:	0800af9f 	.word	0x0800af9f
 800aed8:	0800af9f 	.word	0x0800af9f
 800aedc:	0800af9f 	.word	0x0800af9f
 800aee0:	0800af9f 	.word	0x0800af9f
 800aee4:	0800af9f 	.word	0x0800af9f
 800aee8:	0800af9f 	.word	0x0800af9f
 800aeec:	0800af9f 	.word	0x0800af9f
 800aef0:	0800af6b 	.word	0x0800af6b
 800aef4:	0800af9f 	.word	0x0800af9f
 800aef8:	0800af9f 	.word	0x0800af9f
 800aefc:	0800af9f 	.word	0x0800af9f
 800af00:	0800af9f 	.word	0x0800af9f
 800af04:	0800af9f 	.word	0x0800af9f
 800af08:	0800af9f 	.word	0x0800af9f
 800af0c:	0800af9f 	.word	0x0800af9f
 800af10:	0800af9f 	.word	0x0800af9f
 800af14:	0800af9f 	.word	0x0800af9f
 800af18:	0800af9f 	.word	0x0800af9f
 800af1c:	0800af9f 	.word	0x0800af9f
 800af20:	0800af9f 	.word	0x0800af9f
 800af24:	0800af9f 	.word	0x0800af9f
 800af28:	0800af9f 	.word	0x0800af9f
 800af2c:	0800af9f 	.word	0x0800af9f
 800af30:	0800af91 	.word	0x0800af91
 800af34:	2b40      	cmp	r3, #64	; 0x40
 800af36:	d02e      	beq.n	800af96 <UART_SetConfig+0xa36>
 800af38:	e031      	b.n	800af9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af3a:	f7fb fc29 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 800af3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af40:	e033      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af42:	f7fb fc3b 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 800af46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af48:	e02f      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fc fba6 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af58:	e027      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af5a:	f107 0318 	add.w	r3, r7, #24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fc fcf2 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af68:	e01f      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af6a:	4b2d      	ldr	r3, [pc, #180]	; (800b020 <UART_SetConfig+0xac0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d009      	beq.n	800af8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af76:	4b2a      	ldr	r3, [pc, #168]	; (800b020 <UART_SetConfig+0xac0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	4a28      	ldr	r2, [pc, #160]	; (800b024 <UART_SetConfig+0xac4>)
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af88:	e00f      	b.n	800afaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800af8a:	4b26      	ldr	r3, [pc, #152]	; (800b024 <UART_SetConfig+0xac4>)
 800af8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af8e:	e00c      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <UART_SetConfig+0xac8>)
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af94:	e009      	b.n	800afaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af9c:	e005      	b.n	800afaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800afa8:	bf00      	nop
    }

    if (pclk != 0U)
 800afaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d021      	beq.n	800aff4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	4a1d      	ldr	r2, [pc, #116]	; (800b02c <UART_SetConfig+0xacc>)
 800afb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afba:	461a      	mov	r2, r3
 800afbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	085b      	lsrs	r3, r3, #1
 800afc8:	441a      	add	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	2b0f      	cmp	r3, #15
 800afd8:	d909      	bls.n	800afee <UART_SetConfig+0xa8e>
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe0:	d205      	bcs.n	800afee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60da      	str	r2, [r3, #12]
 800afec:	e002      	b.n	800aff4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2201      	movs	r2, #1
 800b000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2200      	movs	r2, #0
 800b008:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2200      	movs	r2, #0
 800b00e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b010:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b014:	4618      	mov	r0, r3
 800b016:	3748      	adds	r7, #72	; 0x48
 800b018:	46bd      	mov	sp, r7
 800b01a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b01e:	bf00      	nop
 800b020:	58024400 	.word	0x58024400
 800b024:	03d09000 	.word	0x03d09000
 800b028:	003d0900 	.word	0x003d0900
 800b02c:	0800cc68 	.word	0x0800cc68

0800b030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	430a      	orrs	r2, r1
 800b102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01a      	beq.n	800b146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b12e:	d10a      	bne.n	800b146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	605a      	str	r2, [r3, #4]
  }
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af02      	add	r7, sp, #8
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b184:	f7f8 fb8a 	bl	800389c <HAL_GetTick>
 800b188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b08      	cmp	r3, #8
 800b196:	d10e      	bne.n	800b1b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f82f 	bl	800b20a <UART_WaitOnFlagUntilTimeout>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e025      	b.n	800b202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d10e      	bne.n	800b1e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f819 	bl	800b20a <UART_WaitOnFlagUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e00f      	b.n	800b202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b09c      	sub	sp, #112	; 0x70
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	4613      	mov	r3, r2
 800b218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b21a:	e0a9      	b.n	800b370 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b222:	f000 80a5 	beq.w	800b370 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b226:	f7f8 fb39 	bl	800389c <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b232:	429a      	cmp	r2, r3
 800b234:	d302      	bcc.n	800b23c <UART_WaitOnFlagUntilTimeout+0x32>
 800b236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d140      	bne.n	800b2be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b250:	667b      	str	r3, [r7, #100]	; 0x64
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b25a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b25c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b260:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e6      	bne.n	800b23c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	663b      	str	r3, [r7, #96]	; 0x60
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b28e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b290:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b296:	e841 2300 	strex	r3, r2, [r1]
 800b29a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e5      	bne.n	800b26e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e069      	b.n	800b392 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d051      	beq.n	800b370 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2da:	d149      	bne.n	800b370 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b304:	637b      	str	r3, [r7, #52]	; 0x34
 800b306:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b30a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e6      	bne.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	613b      	str	r3, [r7, #16]
   return(result);
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3308      	adds	r3, #8
 800b336:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b338:	623a      	str	r2, [r7, #32]
 800b33a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	69f9      	ldr	r1, [r7, #28]
 800b33e:	6a3a      	ldr	r2, [r7, #32]
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	61bb      	str	r3, [r7, #24]
   return(result);
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2220      	movs	r2, #32
 800b358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2220      	movs	r2, #32
 800b360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e010      	b.n	800b392 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69da      	ldr	r2, [r3, #28]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4013      	ands	r3, r2
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	bf0c      	ite	eq
 800b380:	2301      	moveq	r3, #1
 800b382:	2300      	movne	r3, #0
 800b384:	b2db      	uxtb	r3, r3
 800b386:	461a      	mov	r2, r3
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	f43f af46 	beq.w	800b21c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3770      	adds	r7, #112	; 0x70
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b095      	sub	sp, #84	; 0x54
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800b3c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e6      	bne.n	800b3a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e6:	69fa      	ldr	r2, [r7, #28]
 800b3e8:	4b1e      	ldr	r3, [pc, #120]	; (800b464 <UART_EndRxTransfer+0xc8>)
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e5      	bne.n	800b3d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d118      	bne.n	800b444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f023 0310 	bic.w	r3, r3, #16
 800b426:	647b      	str	r3, [r7, #68]	; 0x44
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b430:	61bb      	str	r3, [r7, #24]
 800b432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6979      	ldr	r1, [r7, #20]
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	613b      	str	r3, [r7, #16]
   return(result);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e6      	bne.n	800b412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b458:	bf00      	nop
 800b45a:	3754      	adds	r7, #84	; 0x54
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	effffffe 	.word	0xeffffffe

0800b468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff f854 	bl	800a534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b48c:	bf00      	nop
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	e853 3f00 	ldrex	r3, [r3]
 800b4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b0:	61fb      	str	r3, [r7, #28]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	61bb      	str	r3, [r7, #24]
 800b4bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4be:	6979      	ldr	r1, [r7, #20]
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	e841 2300 	strex	r3, r2, [r1]
 800b4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1e6      	bne.n	800b49c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7f6 ff69 	bl	80023b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4e2:	bf00      	nop
 800b4e4:	3720      	adds	r7, #32
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b526:	b480      	push	{r7}
 800b528:	b085      	sub	sp, #20
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_UARTEx_DisableFifoMode+0x16>
 800b538:	2302      	movs	r3, #2
 800b53a:	e027      	b.n	800b58c <HAL_UARTEx_DisableFifoMode+0x66>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2224      	movs	r2, #36	; 0x24
 800b548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f022 0201 	bic.w	r2, r2, #1
 800b562:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b56a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d101      	bne.n	800b5b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	e02d      	b.n	800b60c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2224      	movs	r2, #36	; 0x24
 800b5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 0201 	bic.w	r2, r2, #1
 800b5d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f84f 	bl	800b690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2220      	movs	r2, #32
 800b5fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b624:	2b01      	cmp	r3, #1
 800b626:	d101      	bne.n	800b62c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b628:	2302      	movs	r3, #2
 800b62a:	e02d      	b.n	800b688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2224      	movs	r2, #36	; 0x24
 800b638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f811 	bl	800b690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d108      	bne.n	800b6b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6b0:	e031      	b.n	800b716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6b2:	2310      	movs	r3, #16
 800b6b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6b6:	2310      	movs	r3, #16
 800b6b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	0e5b      	lsrs	r3, r3, #25
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	f003 0307 	and.w	r3, r3, #7
 800b6c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	0f5b      	lsrs	r3, r3, #29
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	f003 0307 	and.w	r3, r3, #7
 800b6d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	7b3a      	ldrb	r2, [r7, #12]
 800b6de:	4911      	ldr	r1, [pc, #68]	; (800b724 <UARTEx_SetNbDataToProcess+0x94>)
 800b6e0:	5c8a      	ldrb	r2, [r1, r2]
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6e6:	7b3a      	ldrb	r2, [r7, #12]
 800b6e8:	490f      	ldr	r1, [pc, #60]	; (800b728 <UARTEx_SetNbDataToProcess+0x98>)
 800b6ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	7b7a      	ldrb	r2, [r7, #13]
 800b6fc:	4909      	ldr	r1, [pc, #36]	; (800b724 <UARTEx_SetNbDataToProcess+0x94>)
 800b6fe:	5c8a      	ldrb	r2, [r1, r2]
 800b700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b704:	7b7a      	ldrb	r2, [r7, #13]
 800b706:	4908      	ldr	r1, [pc, #32]	; (800b728 <UARTEx_SetNbDataToProcess+0x98>)
 800b708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b70a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b70e:	b29a      	uxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b716:	bf00      	nop
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	0800cc80 	.word	0x0800cc80
 800b728:	0800cc88 	.word	0x0800cc88

0800b72c <__errno>:
 800b72c:	4b01      	ldr	r3, [pc, #4]	; (800b734 <__errno+0x8>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	2400003c 	.word	0x2400003c

0800b738 <__libc_init_array>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4d0d      	ldr	r5, [pc, #52]	; (800b770 <__libc_init_array+0x38>)
 800b73c:	4c0d      	ldr	r4, [pc, #52]	; (800b774 <__libc_init_array+0x3c>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	2600      	movs	r6, #0
 800b744:	42a6      	cmp	r6, r4
 800b746:	d109      	bne.n	800b75c <__libc_init_array+0x24>
 800b748:	4d0b      	ldr	r5, [pc, #44]	; (800b778 <__libc_init_array+0x40>)
 800b74a:	4c0c      	ldr	r4, [pc, #48]	; (800b77c <__libc_init_array+0x44>)
 800b74c:	f001 fa76 	bl	800cc3c <_init>
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	2600      	movs	r6, #0
 800b756:	42a6      	cmp	r6, r4
 800b758:	d105      	bne.n	800b766 <__libc_init_array+0x2e>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b760:	4798      	blx	r3
 800b762:	3601      	adds	r6, #1
 800b764:	e7ee      	b.n	800b744 <__libc_init_array+0xc>
 800b766:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76a:	4798      	blx	r3
 800b76c:	3601      	adds	r6, #1
 800b76e:	e7f2      	b.n	800b756 <__libc_init_array+0x1e>
 800b770:	0800e730 	.word	0x0800e730
 800b774:	0800e730 	.word	0x0800e730
 800b778:	0800e730 	.word	0x0800e730
 800b77c:	0800e734 	.word	0x0800e734

0800b780 <memset>:
 800b780:	4402      	add	r2, r0
 800b782:	4603      	mov	r3, r0
 800b784:	4293      	cmp	r3, r2
 800b786:	d100      	bne.n	800b78a <memset+0xa>
 800b788:	4770      	bx	lr
 800b78a:	f803 1b01 	strb.w	r1, [r3], #1
 800b78e:	e7f9      	b.n	800b784 <memset+0x4>

0800b790 <checkint>:
 800b790:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b794:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800b798:	429a      	cmp	r2, r3
 800b79a:	b570      	push	{r4, r5, r6, lr}
 800b79c:	dd2a      	ble.n	800b7f4 <checkint+0x64>
 800b79e:	f240 4333 	movw	r3, #1075	; 0x433
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	dc24      	bgt.n	800b7f0 <checkint+0x60>
 800b7a6:	1a9b      	subs	r3, r3, r2
 800b7a8:	f1a3 0620 	sub.w	r6, r3, #32
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7b0:	fa02 f403 	lsl.w	r4, r2, r3
 800b7b4:	fa02 f606 	lsl.w	r6, r2, r6
 800b7b8:	f1c3 0520 	rsb	r5, r3, #32
 800b7bc:	fa22 f505 	lsr.w	r5, r2, r5
 800b7c0:	4334      	orrs	r4, r6
 800b7c2:	432c      	orrs	r4, r5
 800b7c4:	409a      	lsls	r2, r3
 800b7c6:	ea20 0202 	bic.w	r2, r0, r2
 800b7ca:	ea21 0404 	bic.w	r4, r1, r4
 800b7ce:	4322      	orrs	r2, r4
 800b7d0:	f1a3 0420 	sub.w	r4, r3, #32
 800b7d4:	f1c3 0220 	rsb	r2, r3, #32
 800b7d8:	d10c      	bne.n	800b7f4 <checkint+0x64>
 800b7da:	40d8      	lsrs	r0, r3
 800b7dc:	fa01 f302 	lsl.w	r3, r1, r2
 800b7e0:	4318      	orrs	r0, r3
 800b7e2:	40e1      	lsrs	r1, r4
 800b7e4:	4308      	orrs	r0, r1
 800b7e6:	f000 0001 	and.w	r0, r0, #1
 800b7ea:	f1d0 0002 	rsbs	r0, r0, #2
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	2002      	movs	r0, #2
 800b7f2:	e7fc      	b.n	800b7ee <checkint+0x5e>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7fa      	b.n	800b7ee <checkint+0x5e>

0800b7f8 <pow>:
 800b7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7fc:	ee10 4a90 	vmov	r4, s1
 800b800:	ed2d 8b0a 	vpush	{d8-d12}
 800b804:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800b808:	ee11 7a90 	vmov	r7, s3
 800b80c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800b810:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800b814:	429a      	cmp	r2, r3
 800b816:	ee10 6a10 	vmov	r6, s0
 800b81a:	ee11 0a10 	vmov	r0, s2
 800b81e:	b086      	sub	sp, #24
 800b820:	46d4      	mov	ip, sl
 800b822:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800b826:	d806      	bhi.n	800b836 <pow+0x3e>
 800b828:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800b82c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800b830:	2b7f      	cmp	r3, #127	; 0x7f
 800b832:	f240 8156 	bls.w	800bae2 <pow+0x2ea>
 800b836:	1802      	adds	r2, r0, r0
 800b838:	eb47 0107 	adc.w	r1, r7, r7
 800b83c:	f06f 0e01 	mvn.w	lr, #1
 800b840:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800b844:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800b848:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800b84c:	45ce      	cmp	lr, r9
 800b84e:	eb73 0808 	sbcs.w	r8, r3, r8
 800b852:	d23f      	bcs.n	800b8d4 <pow+0xdc>
 800b854:	ea52 0301 	orrs.w	r3, r2, r1
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	d10c      	bne.n	800b878 <pow+0x80>
 800b85e:	19b6      	adds	r6, r6, r6
 800b860:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800b864:	4164      	adcs	r4, r4
 800b866:	42b3      	cmp	r3, r6
 800b868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b86c:	41a3      	sbcs	r3, r4
 800b86e:	f0c0 808c 	bcc.w	800b98a <pow+0x192>
 800b872:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b876:	e028      	b.n	800b8ca <pow+0xd2>
 800b878:	4da3      	ldr	r5, [pc, #652]	; (800bb08 <pow+0x310>)
 800b87a:	42ac      	cmp	r4, r5
 800b87c:	bf08      	it	eq
 800b87e:	429e      	cmpeq	r6, r3
 800b880:	d107      	bne.n	800b892 <pow+0x9a>
 800b882:	1800      	adds	r0, r0, r0
 800b884:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800b888:	417f      	adcs	r7, r7
 800b88a:	4283      	cmp	r3, r0
 800b88c:	4b9f      	ldr	r3, [pc, #636]	; (800bb0c <pow+0x314>)
 800b88e:	41bb      	sbcs	r3, r7
 800b890:	e7ed      	b.n	800b86e <pow+0x76>
 800b892:	19b6      	adds	r6, r6, r6
 800b894:	489e      	ldr	r0, [pc, #632]	; (800bb10 <pow+0x318>)
 800b896:	4164      	adcs	r4, r4
 800b898:	42b3      	cmp	r3, r6
 800b89a:	eb70 0504 	sbcs.w	r5, r0, r4
 800b89e:	d374      	bcc.n	800b98a <pow+0x192>
 800b8a0:	4281      	cmp	r1, r0
 800b8a2:	bf08      	it	eq
 800b8a4:	429a      	cmpeq	r2, r3
 800b8a6:	d170      	bne.n	800b98a <pow+0x192>
 800b8a8:	4a9a      	ldr	r2, [pc, #616]	; (800bb14 <pow+0x31c>)
 800b8aa:	4294      	cmp	r4, r2
 800b8ac:	bf08      	it	eq
 800b8ae:	429e      	cmpeq	r6, r3
 800b8b0:	d0df      	beq.n	800b872 <pow+0x7a>
 800b8b2:	4294      	cmp	r4, r2
 800b8b4:	ea6f 0707 	mvn.w	r7, r7
 800b8b8:	bf34      	ite	cc
 800b8ba:	2400      	movcc	r4, #0
 800b8bc:	2401      	movcs	r4, #1
 800b8be:	0fff      	lsrs	r7, r7, #31
 800b8c0:	42bc      	cmp	r4, r7
 800b8c2:	f040 81d9 	bne.w	800bc78 <pow+0x480>
 800b8c6:	ee21 0b01 	vmul.f64	d0, d1, d1
 800b8ca:	b006      	add	sp, #24
 800b8cc:	ecbd 8b0a 	vpop	{d8-d12}
 800b8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d4:	eb16 0806 	adds.w	r8, r6, r6
 800b8d8:	eb44 0904 	adc.w	r9, r4, r4
 800b8dc:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800b8e0:	f169 0200 	sbc.w	r2, r9, #0
 800b8e4:	458e      	cmp	lr, r1
 800b8e6:	4193      	sbcs	r3, r2
 800b8e8:	d223      	bcs.n	800b932 <pow+0x13a>
 800b8ea:	ee20 0b00 	vmul.f64	d0, d0, d0
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	da12      	bge.n	800b918 <pow+0x120>
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7ff ff4c 	bl	800b790 <checkint>
 800b8f8:	2801      	cmp	r0, #1
 800b8fa:	d10d      	bne.n	800b918 <pow+0x120>
 800b8fc:	eeb1 0b40 	vneg.f64	d0, d0
 800b900:	ea58 0309 	orrs.w	r3, r8, r9
 800b904:	d10a      	bne.n	800b91c <pow+0x124>
 800b906:	2f00      	cmp	r7, #0
 800b908:	dadf      	bge.n	800b8ca <pow+0xd2>
 800b90a:	b006      	add	sp, #24
 800b90c:	ecbd 8b0a 	vpop	{d8-d12}
 800b910:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	f001 b83c 	b.w	800c990 <__math_divzero>
 800b918:	2000      	movs	r0, #0
 800b91a:	e7f1      	b.n	800b900 <pow+0x108>
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	dad4      	bge.n	800b8ca <pow+0xd2>
 800b920:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b924:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b928:	ed8d 7b00 	vstr	d7, [sp]
 800b92c:	ed9d 0b00 	vldr	d0, [sp]
 800b930:	e7cb      	b.n	800b8ca <pow+0xd2>
 800b932:	2c00      	cmp	r4, #0
 800b934:	da2c      	bge.n	800b990 <pow+0x198>
 800b936:	4639      	mov	r1, r7
 800b938:	f7ff ff2a 	bl	800b790 <checkint>
 800b93c:	b930      	cbnz	r0, 800b94c <pow+0x154>
 800b93e:	b006      	add	sp, #24
 800b940:	ecbd 8b0a 	vpop	{d8-d12}
 800b944:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	f001 b83a 	b.w	800c9c0 <__math_invalid>
 800b94c:	2801      	cmp	r0, #1
 800b94e:	bf14      	ite	ne
 800b950:	2000      	movne	r0, #0
 800b952:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800b956:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b95a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800b95e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800b962:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800b966:	2b7f      	cmp	r3, #127	; 0x7f
 800b968:	d92d      	bls.n	800b9c6 <pow+0x1ce>
 800b96a:	4b67      	ldr	r3, [pc, #412]	; (800bb08 <pow+0x310>)
 800b96c:	2000      	movs	r0, #0
 800b96e:	429c      	cmp	r4, r3
 800b970:	bf08      	it	eq
 800b972:	4286      	cmpeq	r6, r0
 800b974:	f43f af7d 	beq.w	800b872 <pow+0x7a>
 800b978:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b97c:	428a      	cmp	r2, r1
 800b97e:	d80c      	bhi.n	800b99a <pow+0x1a2>
 800b980:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b984:	42b0      	cmp	r0, r6
 800b986:	41a3      	sbcs	r3, r4
 800b988:	d204      	bcs.n	800b994 <pow+0x19c>
 800b98a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800b98e:	e79c      	b.n	800b8ca <pow+0xd2>
 800b990:	2000      	movs	r0, #0
 800b992:	e7e4      	b.n	800b95e <pow+0x166>
 800b994:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b998:	e797      	b.n	800b8ca <pow+0xd2>
 800b99a:	2e01      	cmp	r6, #1
 800b99c:	eb74 0303 	sbcs.w	r3, r4, r3
 800b9a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b9a4:	bf34      	ite	cc
 800b9a6:	2301      	movcc	r3, #1
 800b9a8:	2300      	movcs	r3, #0
 800b9aa:	4295      	cmp	r5, r2
 800b9ac:	bf8c      	ite	hi
 800b9ae:	2500      	movhi	r5, #0
 800b9b0:	2501      	movls	r5, #1
 800b9b2:	42ab      	cmp	r3, r5
 800b9b4:	f000 809d 	beq.w	800baf2 <pow+0x2fa>
 800b9b8:	b006      	add	sp, #24
 800b9ba:	ecbd 8b0a 	vpop	{d8-d12}
 800b9be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c2:	f000 bfdd 	b.w	800c980 <__math_oflow>
 800b9c6:	f1bc 0f00 	cmp.w	ip, #0
 800b9ca:	d10b      	bne.n	800b9e4 <pow+0x1ec>
 800b9cc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800bb00 <pow+0x308>
 800b9d0:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b9d4:	ec53 2b17 	vmov	r2, r3, d7
 800b9d8:	ee17 6a10 	vmov	r6, s14
 800b9dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b9e0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800b9e4:	4b4c      	ldr	r3, [pc, #304]	; (800bb18 <pow+0x320>)
 800b9e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b9ea:	4423      	add	r3, r4
 800b9ec:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800b9f0:	1519      	asrs	r1, r3, #20
 800b9f2:	0d1b      	lsrs	r3, r3, #20
 800b9f4:	051b      	lsls	r3, r3, #20
 800b9f6:	eba4 0903 	sub.w	r9, r4, r3
 800b9fa:	4b48      	ldr	r3, [pc, #288]	; (800bb1c <pow+0x324>)
 800b9fc:	ee04 1a10 	vmov	s8, r1
 800ba00:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800ba04:	f1b6 0800 	subs.w	r8, r6, #0
 800ba08:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800ba0c:	ec49 8b15 	vmov	d5, r8, r9
 800ba10:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800ba14:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ba18:	ed93 7b00 	vldr	d7, [r3]
 800ba1c:	ed93 5b02 	vldr	d5, [r3, #8]
 800ba20:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800ba24:	eea4 2b07 	vfma.f64	d2, d4, d7
 800ba28:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800ba2c:	ee36 ab02 	vadd.f64	d10, d6, d2
 800ba30:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800ba34:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ba38:	ed93 5b04 	vldr	d5, [r3, #16]
 800ba3c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ba40:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ba44:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ba48:	ed93 4b08 	vldr	d4, [r3, #32]
 800ba4c:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ba50:	eeb0 9b40 	vmov.f64	d9, d0
 800ba54:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800ba58:	ed93 5b06 	vldr	d5, [r3, #24]
 800ba5c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800ba60:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ba64:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800ba68:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ba6c:	ee3a ab48 	vsub.f64	d10, d10, d8
 800ba70:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800ba74:	ee37 9b09 	vadd.f64	d9, d7, d9
 800ba78:	ee3a ab00 	vadd.f64	d10, d10, d0
 800ba7c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ba80:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800ba84:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800ba88:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800ba8c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ba90:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ba94:	eea0 5b04 	vfma.f64	d5, d0, d4
 800ba98:	eeab ab05 	vfma.f64	d10, d11, d5
 800ba9c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800baa0:	ee21 7b06 	vmul.f64	d7, d1, d6
 800baa4:	ee17 3a90 	vmov	r3, s15
 800baa8:	eeb0 5b47 	vmov.f64	d5, d7
 800baac:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800bab0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800bab4:	18b2      	adds	r2, r6, r2
 800bab6:	2a3e      	cmp	r2, #62	; 0x3e
 800bab8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800babc:	ee38 8b46 	vsub.f64	d8, d8, d6
 800bac0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800bac4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800bac8:	d92b      	bls.n	800bb22 <pow+0x32a>
 800baca:	2a00      	cmp	r2, #0
 800bacc:	da0b      	bge.n	800bae6 <pow+0x2ee>
 800bace:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bad2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f aef7 	beq.w	800b8ca <pow+0xd2>
 800badc:	eeb1 0b40 	vneg.f64	d0, d0
 800bae0:	e6f3      	b.n	800b8ca <pow+0xd2>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e77e      	b.n	800b9e4 <pow+0x1ec>
 800bae6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800baea:	d919      	bls.n	800bb20 <pow+0x328>
 800baec:	2b00      	cmp	r3, #0
 800baee:	f6bf af63 	bge.w	800b9b8 <pow+0x1c0>
 800baf2:	b006      	add	sp, #24
 800baf4:	ecbd 8b0a 	vpop	{d8-d12}
 800baf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	f000 bf38 	b.w	800c970 <__math_uflow>
 800bb00:	00000000 	.word	0x00000000
 800bb04:	43300000 	.word	0x43300000
 800bb08:	3ff00000 	.word	0x3ff00000
 800bb0c:	fff00000 	.word	0xfff00000
 800bb10:	ffe00000 	.word	0xffe00000
 800bb14:	7fe00000 	.word	0x7fe00000
 800bb18:	c0196aab 	.word	0xc0196aab
 800bb1c:	0800cc90 	.word	0x0800cc90
 800bb20:	2600      	movs	r6, #0
 800bb22:	495d      	ldr	r1, [pc, #372]	; (800bc98 <pow+0x4a0>)
 800bb24:	ed91 4b02 	vldr	d4, [r1, #8]
 800bb28:	ed91 3b00 	vldr	d3, [r1]
 800bb2c:	eeb0 6b44 	vmov.f64	d6, d4
 800bb30:	eea7 6b03 	vfma.f64	d6, d7, d3
 800bb34:	ee16 5a10 	vmov	r5, s12
 800bb38:	ee36 6b44 	vsub.f64	d6, d6, d4
 800bb3c:	ed91 4b04 	vldr	d4, [r1, #16]
 800bb40:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800bb44:	eea6 7b04 	vfma.f64	d7, d6, d4
 800bb48:	eeb0 0b47 	vmov.f64	d0, d7
 800bb4c:	ed91 7b06 	vldr	d7, [r1, #24]
 800bb50:	18dc      	adds	r4, r3, r3
 800bb52:	f104 030f 	add.w	r3, r4, #15
 800bb56:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800bb5a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bb5e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800bb62:	ee35 0b00 	vadd.f64	d0, d5, d0
 800bb66:	ee20 6b00 	vmul.f64	d6, d0, d0
 800bb6a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800bb6e:	ed91 5b08 	vldr	d5, [r1, #32]
 800bb72:	ee30 7b07 	vadd.f64	d7, d0, d7
 800bb76:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800bb7a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800bb7e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800bb82:	eea6 7b05 	vfma.f64	d7, d6, d5
 800bb86:	ee26 6b06 	vmul.f64	d6, d6, d6
 800bb8a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800bb8e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800bb92:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800bb96:	eea0 5b04 	vfma.f64	d5, d0, d4
 800bb9a:	1940      	adds	r0, r0, r5
 800bb9c:	2700      	movs	r7, #0
 800bb9e:	eb17 020c 	adds.w	r2, r7, ip
 800bba2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800bba6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800bbaa:	2e00      	cmp	r6, #0
 800bbac:	d15f      	bne.n	800bc6e <pow+0x476>
 800bbae:	42bd      	cmp	r5, r7
 800bbb0:	db13      	blt.n	800bbda <pow+0x3e2>
 800bbb2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800bbb6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800bbba:	4610      	mov	r0, r2
 800bbbc:	ec41 0b10 	vmov	d0, r0, r1
 800bbc0:	eea7 0b00 	vfma.f64	d0, d7, d0
 800bbc4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bc80 <pow+0x488>
 800bbc8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bbcc:	b006      	add	sp, #24
 800bbce:	ecbd 8b0a 	vpop	{d8-d12}
 800bbd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd6:	f000 bf0b 	b.w	800c9f0 <__math_check_oflow>
 800bbda:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bbde:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	ec41 0b15 	vmov	d5, r0, r1
 800bbe8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800bbec:	ee27 6b05 	vmul.f64	d6, d7, d5
 800bbf0:	ee35 7b06 	vadd.f64	d7, d5, d6
 800bbf4:	eeb0 3bc7 	vabs.f64	d3, d7
 800bbf8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800bbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc00:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bc88 <pow+0x490>
 800bc04:	d52a      	bpl.n	800bc5c <pow+0x464>
 800bc06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bc0a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800bc16:	ee35 6b06 	vadd.f64	d6, d5, d6
 800bc1a:	bf48      	it	mi
 800bc1c:	eeb0 4b43 	vmovmi.f64	d4, d3
 800bc20:	ee37 3b04 	vadd.f64	d3, d7, d4
 800bc24:	ee34 5b43 	vsub.f64	d5, d4, d3
 800bc28:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bc2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc30:	ee37 7b03 	vadd.f64	d7, d7, d3
 800bc34:	ee37 7b44 	vsub.f64	d7, d7, d4
 800bc38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc40:	d104      	bne.n	800bc4c <pow+0x454>
 800bc42:	4632      	mov	r2, r6
 800bc44:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bc48:	ec43 2b17 	vmov	d7, r2, r3
 800bc4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc50:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bc54:	ee26 6b00 	vmul.f64	d6, d6, d0
 800bc58:	ed8d 6b04 	vstr	d6, [sp, #16]
 800bc5c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800bc60:	b006      	add	sp, #24
 800bc62:	ecbd 8b0a 	vpop	{d8-d12}
 800bc66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6a:	f000 beb8 	b.w	800c9de <__math_check_uflow>
 800bc6e:	ec43 2b10 	vmov	d0, r2, r3
 800bc72:	eea7 0b00 	vfma.f64	d0, d7, d0
 800bc76:	e628      	b.n	800b8ca <pow+0xd2>
 800bc78:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800bc90 <pow+0x498>
 800bc7c:	e625      	b.n	800b8ca <pow+0xd2>
 800bc7e:	bf00      	nop
 800bc80:	00000000 	.word	0x00000000
 800bc84:	7f000000 	.word	0x7f000000
 800bc88:	00000000 	.word	0x00000000
 800bc8c:	00100000 	.word	0x00100000
	...
 800bc98:	0800de68 	.word	0x0800de68
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <sin>:
 800bca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bca2:	eeb0 7b40 	vmov.f64	d7, d0
 800bca6:	ee17 3a90 	vmov	r3, s15
 800bcaa:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <sin+0x90>)
 800bcac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	dc07      	bgt.n	800bcc4 <sin+0x24>
 800bcb4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800bd28 <sin+0x88>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	b005      	add	sp, #20
 800bcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcc0:	f000 bde2 	b.w	800c888 <__kernel_sin>
 800bcc4:	4a1b      	ldr	r2, [pc, #108]	; (800bd34 <sin+0x94>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	dd04      	ble.n	800bcd4 <sin+0x34>
 800bcca:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bcce:	b005      	add	sp, #20
 800bcd0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcd4:	4668      	mov	r0, sp
 800bcd6:	f000 f98b 	bl	800bff0 <__ieee754_rem_pio2>
 800bcda:	f000 0003 	and.w	r0, r0, #3
 800bcde:	2801      	cmp	r0, #1
 800bce0:	d00a      	beq.n	800bcf8 <sin+0x58>
 800bce2:	2802      	cmp	r0, #2
 800bce4:	d00f      	beq.n	800bd06 <sin+0x66>
 800bce6:	b9c0      	cbnz	r0, 800bd1a <sin+0x7a>
 800bce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcec:	ed9d 0b00 	vldr	d0, [sp]
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	f000 fdc9 	bl	800c888 <__kernel_sin>
 800bcf6:	e7ea      	b.n	800bcce <sin+0x2e>
 800bcf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcfc:	ed9d 0b00 	vldr	d0, [sp]
 800bd00:	f000 fabe 	bl	800c280 <__kernel_cos>
 800bd04:	e7e3      	b.n	800bcce <sin+0x2e>
 800bd06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd0a:	ed9d 0b00 	vldr	d0, [sp]
 800bd0e:	2001      	movs	r0, #1
 800bd10:	f000 fdba 	bl	800c888 <__kernel_sin>
 800bd14:	eeb1 0b40 	vneg.f64	d0, d0
 800bd18:	e7d9      	b.n	800bcce <sin+0x2e>
 800bd1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd1e:	ed9d 0b00 	vldr	d0, [sp]
 800bd22:	f000 faad 	bl	800c280 <__kernel_cos>
 800bd26:	e7f5      	b.n	800bd14 <sin+0x74>
	...
 800bd30:	3fe921fb 	.word	0x3fe921fb
 800bd34:	7fefffff 	.word	0x7fefffff

0800bd38 <asin>:
 800bd38:	b508      	push	{r3, lr}
 800bd3a:	ed2d 8b04 	vpush	{d8-d9}
 800bd3e:	eeb0 8b40 	vmov.f64	d8, d0
 800bd42:	f000 f845 	bl	800bdd0 <__ieee754_asin>
 800bd46:	eeb4 8b48 	vcmp.f64	d8, d8
 800bd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4e:	eeb0 9b40 	vmov.f64	d9, d0
 800bd52:	d615      	bvs.n	800bd80 <asin+0x48>
 800bd54:	eeb0 0b48 	vmov.f64	d0, d8
 800bd58:	f000 fe5e 	bl	800ca18 <fabs>
 800bd5c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bd60:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd68:	dd0a      	ble.n	800bd80 <asin+0x48>
 800bd6a:	f7ff fcdf 	bl	800b72c <__errno>
 800bd6e:	ecbd 8b04 	vpop	{d8-d9}
 800bd72:	2321      	movs	r3, #33	; 0x21
 800bd74:	6003      	str	r3, [r0, #0]
 800bd76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bd7a:	4804      	ldr	r0, [pc, #16]	; (800bd8c <asin+0x54>)
 800bd7c:	f000 becc 	b.w	800cb18 <nan>
 800bd80:	eeb0 0b49 	vmov.f64	d0, d9
 800bd84:	ecbd 8b04 	vpop	{d8-d9}
 800bd88:	bd08      	pop	{r3, pc}
 800bd8a:	bf00      	nop
 800bd8c:	0800dcd8 	.word	0x0800dcd8

0800bd90 <sqrt>:
 800bd90:	b508      	push	{r3, lr}
 800bd92:	ed2d 8b04 	vpush	{d8-d9}
 800bd96:	eeb0 8b40 	vmov.f64	d8, d0
 800bd9a:	f000 fa6d 	bl	800c278 <__ieee754_sqrt>
 800bd9e:	eeb4 8b48 	vcmp.f64	d8, d8
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	d60c      	bvs.n	800bdc2 <sqrt+0x32>
 800bda8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800bdc8 <sqrt+0x38>
 800bdac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb4:	d505      	bpl.n	800bdc2 <sqrt+0x32>
 800bdb6:	f7ff fcb9 	bl	800b72c <__errno>
 800bdba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bdbe:	2321      	movs	r3, #33	; 0x21
 800bdc0:	6003      	str	r3, [r0, #0]
 800bdc2:	ecbd 8b04 	vpop	{d8-d9}
 800bdc6:	bd08      	pop	{r3, pc}
	...

0800bdd0 <__ieee754_asin>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	ee10 5a90 	vmov	r5, s1
 800bdd6:	4b82      	ldr	r3, [pc, #520]	; (800bfe0 <__ieee754_asin+0x210>)
 800bdd8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bddc:	429c      	cmp	r4, r3
 800bdde:	ed2d 8b06 	vpush	{d8-d10}
 800bde2:	dd19      	ble.n	800be18 <__ieee754_asin+0x48>
 800bde4:	ee10 3a10 	vmov	r3, s0
 800bde8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bdec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bdf0:	4323      	orrs	r3, r4
 800bdf2:	d10c      	bne.n	800be0e <__ieee754_asin+0x3e>
 800bdf4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800bf68 <__ieee754_asin+0x198>
 800bdf8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800bf70 <__ieee754_asin+0x1a0>
 800bdfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800be00:	eea0 7b06 	vfma.f64	d7, d0, d6
 800be04:	eeb0 0b47 	vmov.f64	d0, d7
 800be08:	ecbd 8b06 	vpop	{d8-d10}
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	ee30 7b40 	vsub.f64	d7, d0, d0
 800be12:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800be16:	e7f7      	b.n	800be08 <__ieee754_asin+0x38>
 800be18:	4b72      	ldr	r3, [pc, #456]	; (800bfe4 <__ieee754_asin+0x214>)
 800be1a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800be1e:	429c      	cmp	r4, r3
 800be20:	dc0b      	bgt.n	800be3a <__ieee754_asin+0x6a>
 800be22:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800be26:	da52      	bge.n	800bece <__ieee754_asin+0xfe>
 800be28:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800bf78 <__ieee754_asin+0x1a8>
 800be2c:	ee30 7b07 	vadd.f64	d7, d0, d7
 800be30:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800be34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be38:	dce6      	bgt.n	800be08 <__ieee754_asin+0x38>
 800be3a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800be3e:	f000 fdeb 	bl	800ca18 <fabs>
 800be42:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800bf80 <__ieee754_asin+0x1b0>
 800be46:	ee39 0b40 	vsub.f64	d0, d9, d0
 800be4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800be4e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800bf88 <__ieee754_asin+0x1b8>
 800be52:	eeb0 0b48 	vmov.f64	d0, d8
 800be56:	eea8 6b07 	vfma.f64	d6, d8, d7
 800be5a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800bf90 <__ieee754_asin+0x1c0>
 800be5e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800be62:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800bf98 <__ieee754_asin+0x1c8>
 800be66:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800bfa0 <__ieee754_asin+0x1d0>
 800be6a:	eea7 6b08 	vfma.f64	d6, d7, d8
 800be6e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800bfa8 <__ieee754_asin+0x1d8>
 800be72:	eea6 7b08 	vfma.f64	d7, d6, d8
 800be76:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800bfb0 <__ieee754_asin+0x1e0>
 800be7a:	eea7 ab08 	vfma.f64	d10, d7, d8
 800be7e:	ee2a ab08 	vmul.f64	d10, d10, d8
 800be82:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800bfb8 <__ieee754_asin+0x1e8>
 800be86:	eea8 7b06 	vfma.f64	d7, d8, d6
 800be8a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800bfc0 <__ieee754_asin+0x1f0>
 800be8e:	eea7 6b08 	vfma.f64	d6, d7, d8
 800be92:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800bfc8 <__ieee754_asin+0x1f8>
 800be96:	eea6 7b08 	vfma.f64	d7, d6, d8
 800be9a:	eea7 9b08 	vfma.f64	d9, d7, d8
 800be9e:	f000 f9eb 	bl	800c278 <__ieee754_sqrt>
 800bea2:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800bea6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800beaa:	4b4f      	ldr	r3, [pc, #316]	; (800bfe8 <__ieee754_asin+0x218>)
 800beac:	429c      	cmp	r4, r3
 800beae:	dd3d      	ble.n	800bf2c <__ieee754_asin+0x15c>
 800beb0:	eea0 0b05 	vfma.f64	d0, d0, d5
 800beb4:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800bfd0 <__ieee754_asin+0x200>
 800beb8:	eea0 7b04 	vfma.f64	d7, d0, d4
 800bebc:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800bf70 <__ieee754_asin+0x1a0>
 800bec0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	bfd8      	it	le
 800bec8:	eeb1 0b40 	vnegle.f64	d0, d0
 800becc:	e79c      	b.n	800be08 <__ieee754_asin+0x38>
 800bece:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800bf80 <__ieee754_asin+0x1b0>
 800bed2:	ee20 7b00 	vmul.f64	d7, d0, d0
 800bed6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800bf88 <__ieee754_asin+0x1b8>
 800beda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bede:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800bf90 <__ieee754_asin+0x1c0>
 800bee2:	eea6 5b07 	vfma.f64	d5, d6, d7
 800bee6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800bf98 <__ieee754_asin+0x1c8>
 800beea:	eea5 6b07 	vfma.f64	d6, d5, d7
 800beee:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800bfa8 <__ieee754_asin+0x1d8>
 800bef2:	eea6 5b07 	vfma.f64	d5, d6, d7
 800bef6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800bfa0 <__ieee754_asin+0x1d0>
 800befa:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800bfb0 <__ieee754_asin+0x1e0>
 800befe:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bf02:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bf06:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800bfb8 <__ieee754_asin+0x1e8>
 800bf0a:	eea7 5b04 	vfma.f64	d5, d7, d4
 800bf0e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800bfc0 <__ieee754_asin+0x1f0>
 800bf12:	eea5 4b07 	vfma.f64	d4, d5, d7
 800bf16:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800bfc8 <__ieee754_asin+0x1f8>
 800bf1a:	eea4 5b07 	vfma.f64	d5, d4, d7
 800bf1e:	eea5 9b07 	vfma.f64	d9, d5, d7
 800bf22:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800bf26:	eea0 0b07 	vfma.f64	d0, d0, d7
 800bf2a:	e76d      	b.n	800be08 <__ieee754_asin+0x38>
 800bf2c:	ec53 2b10 	vmov	r2, r3, d0
 800bf30:	2200      	movs	r2, #0
 800bf32:	ec43 2b16 	vmov	d6, r2, r3
 800bf36:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bf3a:	eea6 8b46 	vfms.f64	d8, d6, d6
 800bf3e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800bf42:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800bf68 <__ieee754_asin+0x198>
 800bf46:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bf4a:	eea3 7b44 	vfms.f64	d7, d3, d4
 800bf4e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800bf52:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800bfd8 <__ieee754_asin+0x208>
 800bf56:	eeb0 0b45 	vmov.f64	d0, d5
 800bf5a:	eea6 0b44 	vfms.f64	d0, d6, d4
 800bf5e:	ee37 0b40 	vsub.f64	d0, d7, d0
 800bf62:	ee35 0b40 	vsub.f64	d0, d5, d0
 800bf66:	e7ad      	b.n	800bec4 <__ieee754_asin+0xf4>
 800bf68:	33145c07 	.word	0x33145c07
 800bf6c:	3c91a626 	.word	0x3c91a626
 800bf70:	54442d18 	.word	0x54442d18
 800bf74:	3ff921fb 	.word	0x3ff921fb
 800bf78:	8800759c 	.word	0x8800759c
 800bf7c:	7e37e43c 	.word	0x7e37e43c
 800bf80:	0dfdf709 	.word	0x0dfdf709
 800bf84:	3f023de1 	.word	0x3f023de1
 800bf88:	7501b288 	.word	0x7501b288
 800bf8c:	3f49efe0 	.word	0x3f49efe0
 800bf90:	b5688f3b 	.word	0xb5688f3b
 800bf94:	bfa48228 	.word	0xbfa48228
 800bf98:	0e884455 	.word	0x0e884455
 800bf9c:	3fc9c155 	.word	0x3fc9c155
 800bfa0:	55555555 	.word	0x55555555
 800bfa4:	3fc55555 	.word	0x3fc55555
 800bfa8:	03eb6f7d 	.word	0x03eb6f7d
 800bfac:	bfd4d612 	.word	0xbfd4d612
 800bfb0:	b12e9282 	.word	0xb12e9282
 800bfb4:	3fb3b8c5 	.word	0x3fb3b8c5
 800bfb8:	1b8d0159 	.word	0x1b8d0159
 800bfbc:	bfe6066c 	.word	0xbfe6066c
 800bfc0:	9c598ac8 	.word	0x9c598ac8
 800bfc4:	40002ae5 	.word	0x40002ae5
 800bfc8:	1c8a2d4b 	.word	0x1c8a2d4b
 800bfcc:	c0033a27 	.word	0xc0033a27
 800bfd0:	33145c07 	.word	0x33145c07
 800bfd4:	bc91a626 	.word	0xbc91a626
 800bfd8:	54442d18 	.word	0x54442d18
 800bfdc:	3fe921fb 	.word	0x3fe921fb
 800bfe0:	3fefffff 	.word	0x3fefffff
 800bfe4:	3fdfffff 	.word	0x3fdfffff
 800bfe8:	3fef3332 	.word	0x3fef3332
 800bfec:	00000000 	.word	0x00000000

0800bff0 <__ieee754_rem_pio2>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	eeb0 7b40 	vmov.f64	d7, d0
 800bff6:	ee17 5a90 	vmov	r5, s15
 800bffa:	4b99      	ldr	r3, [pc, #612]	; (800c260 <__ieee754_rem_pio2+0x270>)
 800bffc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c000:	429e      	cmp	r6, r3
 800c002:	b088      	sub	sp, #32
 800c004:	4604      	mov	r4, r0
 800c006:	dc07      	bgt.n	800c018 <__ieee754_rem_pio2+0x28>
 800c008:	2200      	movs	r2, #0
 800c00a:	2300      	movs	r3, #0
 800c00c:	ed84 0b00 	vstr	d0, [r4]
 800c010:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c014:	2000      	movs	r0, #0
 800c016:	e01b      	b.n	800c050 <__ieee754_rem_pio2+0x60>
 800c018:	4b92      	ldr	r3, [pc, #584]	; (800c264 <__ieee754_rem_pio2+0x274>)
 800c01a:	429e      	cmp	r6, r3
 800c01c:	dc3b      	bgt.n	800c096 <__ieee754_rem_pio2+0xa6>
 800c01e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c022:	2d00      	cmp	r5, #0
 800c024:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800c220 <__ieee754_rem_pio2+0x230>
 800c028:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c02c:	dd19      	ble.n	800c062 <__ieee754_rem_pio2+0x72>
 800c02e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c032:	429e      	cmp	r6, r3
 800c034:	d00e      	beq.n	800c054 <__ieee754_rem_pio2+0x64>
 800c036:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c228 <__ieee754_rem_pio2+0x238>
 800c03a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c03e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c042:	ed84 5b00 	vstr	d5, [r4]
 800c046:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c04a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c04e:	2001      	movs	r0, #1
 800c050:	b008      	add	sp, #32
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c230 <__ieee754_rem_pio2+0x240>
 800c058:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c05c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c238 <__ieee754_rem_pio2+0x248>
 800c060:	e7eb      	b.n	800c03a <__ieee754_rem_pio2+0x4a>
 800c062:	429e      	cmp	r6, r3
 800c064:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c068:	d00e      	beq.n	800c088 <__ieee754_rem_pio2+0x98>
 800c06a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800c228 <__ieee754_rem_pio2+0x238>
 800c06e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c072:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c076:	ed84 5b00 	vstr	d5, [r4]
 800c07a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c082:	ed84 7b02 	vstr	d7, [r4, #8]
 800c086:	e7e3      	b.n	800c050 <__ieee754_rem_pio2+0x60>
 800c088:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c230 <__ieee754_rem_pio2+0x240>
 800c08c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c090:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c238 <__ieee754_rem_pio2+0x248>
 800c094:	e7eb      	b.n	800c06e <__ieee754_rem_pio2+0x7e>
 800c096:	4b74      	ldr	r3, [pc, #464]	; (800c268 <__ieee754_rem_pio2+0x278>)
 800c098:	429e      	cmp	r6, r3
 800c09a:	dc70      	bgt.n	800c17e <__ieee754_rem_pio2+0x18e>
 800c09c:	f000 fcbc 	bl	800ca18 <fabs>
 800c0a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c0a4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c240 <__ieee754_rem_pio2+0x250>
 800c0a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c0ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c0b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c0b4:	ee17 0a90 	vmov	r0, s15
 800c0b8:	eeb1 4b45 	vneg.f64	d4, d5
 800c0bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c220 <__ieee754_rem_pio2+0x230>
 800c0c0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c0c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c228 <__ieee754_rem_pio2+0x238>
 800c0c8:	281f      	cmp	r0, #31
 800c0ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c0ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c0d2:	dc08      	bgt.n	800c0e6 <__ieee754_rem_pio2+0xf6>
 800c0d4:	4b65      	ldr	r3, [pc, #404]	; (800c26c <__ieee754_rem_pio2+0x27c>)
 800c0d6:	1e42      	subs	r2, r0, #1
 800c0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0dc:	42b3      	cmp	r3, r6
 800c0de:	d002      	beq.n	800c0e6 <__ieee754_rem_pio2+0xf6>
 800c0e0:	ed84 6b00 	vstr	d6, [r4]
 800c0e4:	e026      	b.n	800c134 <__ieee754_rem_pio2+0x144>
 800c0e6:	ee16 3a90 	vmov	r3, s13
 800c0ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c0ee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c0f2:	2b10      	cmp	r3, #16
 800c0f4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c0f8:	ddf2      	ble.n	800c0e0 <__ieee754_rem_pio2+0xf0>
 800c0fa:	eeb0 6b40 	vmov.f64	d6, d0
 800c0fe:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800c230 <__ieee754_rem_pio2+0x240>
 800c102:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c238 <__ieee754_rem_pio2+0x248>
 800c106:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c10a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c10e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c112:	eeb0 7b40 	vmov.f64	d7, d0
 800c116:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c11a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c11e:	ee13 3a90 	vmov	r3, s7
 800c122:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	2b31      	cmp	r3, #49	; 0x31
 800c12a:	dc17      	bgt.n	800c15c <__ieee754_rem_pio2+0x16c>
 800c12c:	eeb0 0b46 	vmov.f64	d0, d6
 800c130:	ed84 3b00 	vstr	d3, [r4]
 800c134:	ed94 6b00 	vldr	d6, [r4]
 800c138:	2d00      	cmp	r5, #0
 800c13a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c13e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c142:	ed84 0b02 	vstr	d0, [r4, #8]
 800c146:	da83      	bge.n	800c050 <__ieee754_rem_pio2+0x60>
 800c148:	eeb1 6b46 	vneg.f64	d6, d6
 800c14c:	eeb1 0b40 	vneg.f64	d0, d0
 800c150:	ed84 6b00 	vstr	d6, [r4]
 800c154:	ed84 0b02 	vstr	d0, [r4, #8]
 800c158:	4240      	negs	r0, r0
 800c15a:	e779      	b.n	800c050 <__ieee754_rem_pio2+0x60>
 800c15c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800c248 <__ieee754_rem_pio2+0x258>
 800c160:	eeb0 0b46 	vmov.f64	d0, d6
 800c164:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c168:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c16c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800c250 <__ieee754_rem_pio2+0x260>
 800c170:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c174:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c178:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c17c:	e7b0      	b.n	800c0e0 <__ieee754_rem_pio2+0xf0>
 800c17e:	4b3c      	ldr	r3, [pc, #240]	; (800c270 <__ieee754_rem_pio2+0x280>)
 800c180:	429e      	cmp	r6, r3
 800c182:	dd06      	ble.n	800c192 <__ieee754_rem_pio2+0x1a2>
 800c184:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c188:	ed80 7b02 	vstr	d7, [r0, #8]
 800c18c:	ed80 7b00 	vstr	d7, [r0]
 800c190:	e740      	b.n	800c014 <__ieee754_rem_pio2+0x24>
 800c192:	1532      	asrs	r2, r6, #20
 800c194:	ee10 0a10 	vmov	r0, s0
 800c198:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c19c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c1a0:	ec41 0b17 	vmov	d7, r0, r1
 800c1a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c1a8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800c258 <__ieee754_rem_pio2+0x268>
 800c1ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c1b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c1b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c1b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c1bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c1c0:	a902      	add	r1, sp, #8
 800c1c2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c1c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c1ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c1ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c1d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1d6:	2603      	movs	r6, #3
 800c1d8:	4608      	mov	r0, r1
 800c1da:	ed91 7b04 	vldr	d7, [r1, #16]
 800c1de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e6:	4633      	mov	r3, r6
 800c1e8:	f1a1 0108 	sub.w	r1, r1, #8
 800c1ec:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800c1f0:	d0f3      	beq.n	800c1da <__ieee754_rem_pio2+0x1ea>
 800c1f2:	4920      	ldr	r1, [pc, #128]	; (800c274 <__ieee754_rem_pio2+0x284>)
 800c1f4:	9101      	str	r1, [sp, #4]
 800c1f6:	2102      	movs	r1, #2
 800c1f8:	9100      	str	r1, [sp, #0]
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	f000 f8ac 	bl	800c358 <__kernel_rem_pio2>
 800c200:	2d00      	cmp	r5, #0
 800c202:	f6bf af25 	bge.w	800c050 <__ieee754_rem_pio2+0x60>
 800c206:	ed94 7b00 	vldr	d7, [r4]
 800c20a:	eeb1 7b47 	vneg.f64	d7, d7
 800c20e:	ed84 7b00 	vstr	d7, [r4]
 800c212:	ed94 7b02 	vldr	d7, [r4, #8]
 800c216:	eeb1 7b47 	vneg.f64	d7, d7
 800c21a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c21e:	e79b      	b.n	800c158 <__ieee754_rem_pio2+0x168>
 800c220:	54400000 	.word	0x54400000
 800c224:	3ff921fb 	.word	0x3ff921fb
 800c228:	1a626331 	.word	0x1a626331
 800c22c:	3dd0b461 	.word	0x3dd0b461
 800c230:	1a600000 	.word	0x1a600000
 800c234:	3dd0b461 	.word	0x3dd0b461
 800c238:	2e037073 	.word	0x2e037073
 800c23c:	3ba3198a 	.word	0x3ba3198a
 800c240:	6dc9c883 	.word	0x6dc9c883
 800c244:	3fe45f30 	.word	0x3fe45f30
 800c248:	2e000000 	.word	0x2e000000
 800c24c:	3ba3198a 	.word	0x3ba3198a
 800c250:	252049c1 	.word	0x252049c1
 800c254:	397b839a 	.word	0x397b839a
 800c258:	00000000 	.word	0x00000000
 800c25c:	41700000 	.word	0x41700000
 800c260:	3fe921fb 	.word	0x3fe921fb
 800c264:	4002d97b 	.word	0x4002d97b
 800c268:	413921fb 	.word	0x413921fb
 800c26c:	0800dcdc 	.word	0x0800dcdc
 800c270:	7fefffff 	.word	0x7fefffff
 800c274:	0800dd5c 	.word	0x0800dd5c

0800c278 <__ieee754_sqrt>:
 800c278:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c27c:	4770      	bx	lr
	...

0800c280 <__kernel_cos>:
 800c280:	ee10 1a90 	vmov	r1, s1
 800c284:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c28c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c290:	da05      	bge.n	800c29e <__kernel_cos+0x1e>
 800c292:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c296:	ee17 3a90 	vmov	r3, s15
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d03d      	beq.n	800c31a <__kernel_cos+0x9a>
 800c29e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c2a2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c320 <__kernel_cos+0xa0>
 800c2a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c328 <__kernel_cos+0xa8>
 800c2aa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c2ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c330 <__kernel_cos+0xb0>
 800c2b2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c2b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c338 <__kernel_cos+0xb8>
 800c2ba:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c2be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c340 <__kernel_cos+0xc0>
 800c2c2:	4b23      	ldr	r3, [pc, #140]	; (800c350 <__kernel_cos+0xd0>)
 800c2c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c2c8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c348 <__kernel_cos+0xc8>
 800c2cc:	4299      	cmp	r1, r3
 800c2ce:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c2d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c2d6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c2da:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c2de:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c2e2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c2e6:	dc04      	bgt.n	800c2f2 <__kernel_cos+0x72>
 800c2e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c2ec:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c2f0:	4770      	bx	lr
 800c2f2:	4b18      	ldr	r3, [pc, #96]	; (800c354 <__kernel_cos+0xd4>)
 800c2f4:	4299      	cmp	r1, r3
 800c2f6:	dc0d      	bgt.n	800c314 <__kernel_cos+0x94>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c2fe:	ec43 2b15 	vmov	d5, r2, r3
 800c302:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c306:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c30a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c30e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c312:	4770      	bx	lr
 800c314:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c318:	e7f3      	b.n	800c302 <__kernel_cos+0x82>
 800c31a:	eeb0 0b44 	vmov.f64	d0, d4
 800c31e:	4770      	bx	lr
 800c320:	be8838d4 	.word	0xbe8838d4
 800c324:	bda8fae9 	.word	0xbda8fae9
 800c328:	bdb4b1c4 	.word	0xbdb4b1c4
 800c32c:	3e21ee9e 	.word	0x3e21ee9e
 800c330:	809c52ad 	.word	0x809c52ad
 800c334:	be927e4f 	.word	0xbe927e4f
 800c338:	19cb1590 	.word	0x19cb1590
 800c33c:	3efa01a0 	.word	0x3efa01a0
 800c340:	16c15177 	.word	0x16c15177
 800c344:	bf56c16c 	.word	0xbf56c16c
 800c348:	5555554c 	.word	0x5555554c
 800c34c:	3fa55555 	.word	0x3fa55555
 800c350:	3fd33332 	.word	0x3fd33332
 800c354:	3fe90000 	.word	0x3fe90000

0800c358 <__kernel_rem_pio2>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	ed2d 8b06 	vpush	{d8-d10}
 800c360:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800c364:	460f      	mov	r7, r1
 800c366:	9002      	str	r0, [sp, #8]
 800c368:	49c5      	ldr	r1, [pc, #788]	; (800c680 <__kernel_rem_pio2+0x328>)
 800c36a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800c36c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800c370:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	f112 0f14 	cmn.w	r2, #20
 800c37a:	bfa8      	it	ge
 800c37c:	2018      	movge	r0, #24
 800c37e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800c382:	bfb8      	it	lt
 800c384:	2000      	movlt	r0, #0
 800c386:	f06f 0417 	mvn.w	r4, #23
 800c38a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800c668 <__kernel_rem_pio2+0x310>
 800c38e:	bfa4      	itt	ge
 800c390:	f1a2 0a03 	subge.w	sl, r2, #3
 800c394:	fb9a f0f0 	sdivge	r0, sl, r0
 800c398:	fb00 4404 	mla	r4, r0, r4, r4
 800c39c:	1a46      	subs	r6, r0, r1
 800c39e:	4414      	add	r4, r2
 800c3a0:	eb09 0c01 	add.w	ip, r9, r1
 800c3a4:	ad1a      	add	r5, sp, #104	; 0x68
 800c3a6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4562      	cmp	r2, ip
 800c3ae:	dd10      	ble.n	800c3d2 <__kernel_rem_pio2+0x7a>
 800c3b0:	9a01      	ldr	r2, [sp, #4]
 800c3b2:	ab1a      	add	r3, sp, #104	; 0x68
 800c3b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c3b8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800c3bc:	f04f 0c00 	mov.w	ip, #0
 800c3c0:	45cc      	cmp	ip, r9
 800c3c2:	dc26      	bgt.n	800c412 <__kernel_rem_pio2+0xba>
 800c3c4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800c668 <__kernel_rem_pio2+0x310>
 800c3c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	e015      	b.n	800c3fe <__kernel_rem_pio2+0xa6>
 800c3d2:	42d6      	cmn	r6, r2
 800c3d4:	d409      	bmi.n	800c3ea <__kernel_rem_pio2+0x92>
 800c3d6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c3e2:	eca5 7b02 	vstmia	r5!, {d7}
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	e7e0      	b.n	800c3ac <__kernel_rem_pio2+0x54>
 800c3ea:	eeb0 7b46 	vmov.f64	d7, d6
 800c3ee:	e7f8      	b.n	800c3e2 <__kernel_rem_pio2+0x8a>
 800c3f0:	ecb8 5b02 	vldmia	r8!, {d5}
 800c3f4:	ed96 6b00 	vldr	d6, [r6]
 800c3f8:	3501      	adds	r5, #1
 800c3fa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c3fe:	428d      	cmp	r5, r1
 800c400:	f1a6 0608 	sub.w	r6, r6, #8
 800c404:	ddf4      	ble.n	800c3f0 <__kernel_rem_pio2+0x98>
 800c406:	ecaa 7b02 	vstmia	sl!, {d7}
 800c40a:	f10c 0c01 	add.w	ip, ip, #1
 800c40e:	3208      	adds	r2, #8
 800c410:	e7d6      	b.n	800c3c0 <__kernel_rem_pio2+0x68>
 800c412:	ab06      	add	r3, sp, #24
 800c414:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c670 <__kernel_rem_pio2+0x318>
 800c418:	ed9f ab97 	vldr	d10, [pc, #604]	; 800c678 <__kernel_rem_pio2+0x320>
 800c41c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800c426:	464d      	mov	r5, r9
 800c428:	00eb      	lsls	r3, r5, #3
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	ab92      	add	r3, sp, #584	; 0x248
 800c42e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c432:	f10d 0b18 	add.w	fp, sp, #24
 800c436:	ab6a      	add	r3, sp, #424	; 0x1a8
 800c438:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800c43c:	465e      	mov	r6, fp
 800c43e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c442:	4628      	mov	r0, r5
 800c444:	2800      	cmp	r0, #0
 800c446:	f1a2 0208 	sub.w	r2, r2, #8
 800c44a:	dc4c      	bgt.n	800c4e6 <__kernel_rem_pio2+0x18e>
 800c44c:	4620      	mov	r0, r4
 800c44e:	9105      	str	r1, [sp, #20]
 800c450:	f000 fb6a 	bl	800cb28 <scalbn>
 800c454:	eeb0 8b40 	vmov.f64	d8, d0
 800c458:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c45c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c460:	f000 fae6 	bl	800ca30 <floor>
 800c464:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c468:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c46c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c470:	2c00      	cmp	r4, #0
 800c472:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c476:	ee17 8a90 	vmov	r8, s15
 800c47a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c47e:	9905      	ldr	r1, [sp, #20]
 800c480:	dd43      	ble.n	800c50a <__kernel_rem_pio2+0x1b2>
 800c482:	1e68      	subs	r0, r5, #1
 800c484:	ab06      	add	r3, sp, #24
 800c486:	f1c4 0c18 	rsb	ip, r4, #24
 800c48a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800c48e:	fa46 f20c 	asr.w	r2, r6, ip
 800c492:	4490      	add	r8, r2
 800c494:	fa02 f20c 	lsl.w	r2, r2, ip
 800c498:	1ab6      	subs	r6, r6, r2
 800c49a:	f1c4 0217 	rsb	r2, r4, #23
 800c49e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800c4a2:	4116      	asrs	r6, r2
 800c4a4:	2e00      	cmp	r6, #0
 800c4a6:	dd3f      	ble.n	800c528 <__kernel_rem_pio2+0x1d0>
 800c4a8:	f04f 0c00 	mov.w	ip, #0
 800c4ac:	f108 0801 	add.w	r8, r8, #1
 800c4b0:	4660      	mov	r0, ip
 800c4b2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c4b6:	4565      	cmp	r5, ip
 800c4b8:	dc6e      	bgt.n	800c598 <__kernel_rem_pio2+0x240>
 800c4ba:	2c00      	cmp	r4, #0
 800c4bc:	dd04      	ble.n	800c4c8 <__kernel_rem_pio2+0x170>
 800c4be:	2c01      	cmp	r4, #1
 800c4c0:	d07f      	beq.n	800c5c2 <__kernel_rem_pio2+0x26a>
 800c4c2:	2c02      	cmp	r4, #2
 800c4c4:	f000 8087 	beq.w	800c5d6 <__kernel_rem_pio2+0x27e>
 800c4c8:	2e02      	cmp	r6, #2
 800c4ca:	d12d      	bne.n	800c528 <__kernel_rem_pio2+0x1d0>
 800c4cc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c4d0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c4d4:	b340      	cbz	r0, 800c528 <__kernel_rem_pio2+0x1d0>
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	9105      	str	r1, [sp, #20]
 800c4da:	f000 fb25 	bl	800cb28 <scalbn>
 800c4de:	9905      	ldr	r1, [sp, #20]
 800c4e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c4e4:	e020      	b.n	800c528 <__kernel_rem_pio2+0x1d0>
 800c4e6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c4ea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c4ee:	3801      	subs	r0, #1
 800c4f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c4f4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c4f8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c4fc:	eca6 0a01 	vstmia	r6!, {s0}
 800c500:	ed92 0b00 	vldr	d0, [r2]
 800c504:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c508:	e79c      	b.n	800c444 <__kernel_rem_pio2+0xec>
 800c50a:	d105      	bne.n	800c518 <__kernel_rem_pio2+0x1c0>
 800c50c:	1e6a      	subs	r2, r5, #1
 800c50e:	ab06      	add	r3, sp, #24
 800c510:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800c514:	15f6      	asrs	r6, r6, #23
 800c516:	e7c5      	b.n	800c4a4 <__kernel_rem_pio2+0x14c>
 800c518:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c51c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c524:	da36      	bge.n	800c594 <__kernel_rem_pio2+0x23c>
 800c526:	2600      	movs	r6, #0
 800c528:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c530:	f040 80aa 	bne.w	800c688 <__kernel_rem_pio2+0x330>
 800c534:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800c538:	4658      	mov	r0, fp
 800c53a:	2200      	movs	r2, #0
 800c53c:	4548      	cmp	r0, r9
 800c53e:	da52      	bge.n	800c5e6 <__kernel_rem_pio2+0x28e>
 800c540:	2a00      	cmp	r2, #0
 800c542:	f000 8081 	beq.w	800c648 <__kernel_rem_pio2+0x2f0>
 800c546:	ab06      	add	r3, sp, #24
 800c548:	3c18      	subs	r4, #24
 800c54a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f000 8087 	beq.w	800c662 <__kernel_rem_pio2+0x30a>
 800c554:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fae5 	bl	800cb28 <scalbn>
 800c55e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c562:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800c670 <__kernel_rem_pio2+0x318>
 800c566:	a96a      	add	r1, sp, #424	; 0x1a8
 800c568:	f103 0208 	add.w	r2, r3, #8
 800c56c:	1888      	adds	r0, r1, r2
 800c56e:	4659      	mov	r1, fp
 800c570:	2900      	cmp	r1, #0
 800c572:	f280 80b7 	bge.w	800c6e4 <__kernel_rem_pio2+0x38c>
 800c576:	4659      	mov	r1, fp
 800c578:	2900      	cmp	r1, #0
 800c57a:	f2c0 80d5 	blt.w	800c728 <__kernel_rem_pio2+0x3d0>
 800c57e:	a86a      	add	r0, sp, #424	; 0x1a8
 800c580:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800c584:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800c668 <__kernel_rem_pio2+0x310>
 800c588:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800c684 <__kernel_rem_pio2+0x32c>
 800c58c:	2400      	movs	r4, #0
 800c58e:	ebab 0001 	sub.w	r0, fp, r1
 800c592:	e0be      	b.n	800c712 <__kernel_rem_pio2+0x3ba>
 800c594:	2602      	movs	r6, #2
 800c596:	e787      	b.n	800c4a8 <__kernel_rem_pio2+0x150>
 800c598:	f8db 2000 	ldr.w	r2, [fp]
 800c59c:	b958      	cbnz	r0, 800c5b6 <__kernel_rem_pio2+0x25e>
 800c59e:	b122      	cbz	r2, 800c5aa <__kernel_rem_pio2+0x252>
 800c5a0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c5a4:	f8cb 2000 	str.w	r2, [fp]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f10c 0c01 	add.w	ip, ip, #1
 800c5ae:	f10b 0b04 	add.w	fp, fp, #4
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	e77f      	b.n	800c4b6 <__kernel_rem_pio2+0x15e>
 800c5b6:	ebae 0202 	sub.w	r2, lr, r2
 800c5ba:	f8cb 2000 	str.w	r2, [fp]
 800c5be:	4602      	mov	r2, r0
 800c5c0:	e7f3      	b.n	800c5aa <__kernel_rem_pio2+0x252>
 800c5c2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800c5c6:	ab06      	add	r3, sp, #24
 800c5c8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c5cc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c5d0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800c5d4:	e778      	b.n	800c4c8 <__kernel_rem_pio2+0x170>
 800c5d6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800c5da:	ab06      	add	r3, sp, #24
 800c5dc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c5e0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c5e4:	e7f4      	b.n	800c5d0 <__kernel_rem_pio2+0x278>
 800c5e6:	ab06      	add	r3, sp, #24
 800c5e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c5ec:	3801      	subs	r0, #1
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	e7a4      	b.n	800c53c <__kernel_rem_pio2+0x1e4>
 800c5f2:	f10c 0c01 	add.w	ip, ip, #1
 800c5f6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d0f9      	beq.n	800c5f2 <__kernel_rem_pio2+0x29a>
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c604:	eb0d 0203 	add.w	r2, sp, r3
 800c608:	9b01      	ldr	r3, [sp, #4]
 800c60a:	18e8      	adds	r0, r5, r3
 800c60c:	ab1a      	add	r3, sp, #104	; 0x68
 800c60e:	1c6e      	adds	r6, r5, #1
 800c610:	3a98      	subs	r2, #152	; 0x98
 800c612:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c616:	4465      	add	r5, ip
 800c618:	42b5      	cmp	r5, r6
 800c61a:	f6ff af05 	blt.w	800c428 <__kernel_rem_pio2+0xd0>
 800c61e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800c622:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c62e:	f04f 0c00 	mov.w	ip, #0
 800c632:	eca0 7b02 	vstmia	r0!, {d7}
 800c636:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800c668 <__kernel_rem_pio2+0x310>
 800c63a:	4680      	mov	r8, r0
 800c63c:	458c      	cmp	ip, r1
 800c63e:	dd07      	ble.n	800c650 <__kernel_rem_pio2+0x2f8>
 800c640:	eca2 7b02 	vstmia	r2!, {d7}
 800c644:	3601      	adds	r6, #1
 800c646:	e7e7      	b.n	800c618 <__kernel_rem_pio2+0x2c0>
 800c648:	9a03      	ldr	r2, [sp, #12]
 800c64a:	f04f 0c01 	mov.w	ip, #1
 800c64e:	e7d2      	b.n	800c5f6 <__kernel_rem_pio2+0x29e>
 800c650:	ecbe 5b02 	vldmia	lr!, {d5}
 800c654:	ed38 6b02 	vldmdb	r8!, {d6}
 800c658:	f10c 0c01 	add.w	ip, ip, #1
 800c65c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c660:	e7ec      	b.n	800c63c <__kernel_rem_pio2+0x2e4>
 800c662:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c666:	e76e      	b.n	800c546 <__kernel_rem_pio2+0x1ee>
	...
 800c674:	3e700000 	.word	0x3e700000
 800c678:	00000000 	.word	0x00000000
 800c67c:	41700000 	.word	0x41700000
 800c680:	0800e718 	.word	0x0800e718
 800c684:	0800e6d8 	.word	0x0800e6d8
 800c688:	4260      	negs	r0, r4
 800c68a:	eeb0 0b48 	vmov.f64	d0, d8
 800c68e:	f000 fa4b 	bl	800cb28 <scalbn>
 800c692:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800c870 <__kernel_rem_pio2+0x518>
 800c696:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69e:	db18      	blt.n	800c6d2 <__kernel_rem_pio2+0x37a>
 800c6a0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800c878 <__kernel_rem_pio2+0x520>
 800c6a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c6a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c6ac:	aa06      	add	r2, sp, #24
 800c6ae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c6b2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c6b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c6ba:	f105 0b01 	add.w	fp, r5, #1
 800c6be:	ee10 3a10 	vmov	r3, s0
 800c6c2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c6c6:	ee17 3a10 	vmov	r3, s14
 800c6ca:	3418      	adds	r4, #24
 800c6cc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800c6d0:	e740      	b.n	800c554 <__kernel_rem_pio2+0x1fc>
 800c6d2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c6d6:	aa06      	add	r2, sp, #24
 800c6d8:	ee10 3a10 	vmov	r3, s0
 800c6dc:	46ab      	mov	fp, r5
 800c6de:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c6e2:	e737      	b.n	800c554 <__kernel_rem_pio2+0x1fc>
 800c6e4:	ac06      	add	r4, sp, #24
 800c6e6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800c6ea:	9401      	str	r4, [sp, #4]
 800c6ec:	ee07 4a90 	vmov	s15, r4
 800c6f0:	3901      	subs	r1, #1
 800c6f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c6f6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c6fa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c6fe:	ed20 7b02 	vstmdb	r0!, {d7}
 800c702:	e735      	b.n	800c570 <__kernel_rem_pio2+0x218>
 800c704:	ecbc 5b02 	vldmia	ip!, {d5}
 800c708:	ecb5 6b02 	vldmia	r5!, {d6}
 800c70c:	3401      	adds	r4, #1
 800c70e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c712:	454c      	cmp	r4, r9
 800c714:	dc01      	bgt.n	800c71a <__kernel_rem_pio2+0x3c2>
 800c716:	4284      	cmp	r4, r0
 800c718:	ddf4      	ble.n	800c704 <__kernel_rem_pio2+0x3ac>
 800c71a:	ac42      	add	r4, sp, #264	; 0x108
 800c71c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800c720:	ed80 7b00 	vstr	d7, [r0]
 800c724:	3901      	subs	r1, #1
 800c726:	e727      	b.n	800c578 <__kernel_rem_pio2+0x220>
 800c728:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c72a:	2902      	cmp	r1, #2
 800c72c:	dc0a      	bgt.n	800c744 <__kernel_rem_pio2+0x3ec>
 800c72e:	2900      	cmp	r1, #0
 800c730:	dc2c      	bgt.n	800c78c <__kernel_rem_pio2+0x434>
 800c732:	d045      	beq.n	800c7c0 <__kernel_rem_pio2+0x468>
 800c734:	f008 0007 	and.w	r0, r8, #7
 800c738:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800c73c:	ecbd 8b06 	vpop	{d8-d10}
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800c746:	2a03      	cmp	r2, #3
 800c748:	d1f4      	bne.n	800c734 <__kernel_rem_pio2+0x3dc>
 800c74a:	aa42      	add	r2, sp, #264	; 0x108
 800c74c:	4413      	add	r3, r2
 800c74e:	461a      	mov	r2, r3
 800c750:	4619      	mov	r1, r3
 800c752:	4658      	mov	r0, fp
 800c754:	2800      	cmp	r0, #0
 800c756:	f1a1 0108 	sub.w	r1, r1, #8
 800c75a:	dc54      	bgt.n	800c806 <__kernel_rem_pio2+0x4ae>
 800c75c:	4659      	mov	r1, fp
 800c75e:	2901      	cmp	r1, #1
 800c760:	f1a2 0208 	sub.w	r2, r2, #8
 800c764:	dc5f      	bgt.n	800c826 <__kernel_rem_pio2+0x4ce>
 800c766:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800c880 <__kernel_rem_pio2+0x528>
 800c76a:	3308      	adds	r3, #8
 800c76c:	f1bb 0f01 	cmp.w	fp, #1
 800c770:	dc69      	bgt.n	800c846 <__kernel_rem_pio2+0x4ee>
 800c772:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800c776:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	d16a      	bne.n	800c854 <__kernel_rem_pio2+0x4fc>
 800c77e:	ed87 5b00 	vstr	d5, [r7]
 800c782:	ed87 6b02 	vstr	d6, [r7, #8]
 800c786:	ed87 7b04 	vstr	d7, [r7, #16]
 800c78a:	e7d3      	b.n	800c734 <__kernel_rem_pio2+0x3dc>
 800c78c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c880 <__kernel_rem_pio2+0x528>
 800c790:	ab42      	add	r3, sp, #264	; 0x108
 800c792:	441a      	add	r2, r3
 800c794:	465b      	mov	r3, fp
 800c796:	2b00      	cmp	r3, #0
 800c798:	da26      	bge.n	800c7e8 <__kernel_rem_pio2+0x490>
 800c79a:	b35e      	cbz	r6, 800c7f4 <__kernel_rem_pio2+0x49c>
 800c79c:	eeb1 7b46 	vneg.f64	d7, d6
 800c7a0:	ed87 7b00 	vstr	d7, [r7]
 800c7a4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800c7a8:	aa44      	add	r2, sp, #272	; 0x110
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7b0:	459b      	cmp	fp, r3
 800c7b2:	da22      	bge.n	800c7fa <__kernel_rem_pio2+0x4a2>
 800c7b4:	b10e      	cbz	r6, 800c7ba <__kernel_rem_pio2+0x462>
 800c7b6:	eeb1 7b47 	vneg.f64	d7, d7
 800c7ba:	ed87 7b02 	vstr	d7, [r7, #8]
 800c7be:	e7b9      	b.n	800c734 <__kernel_rem_pio2+0x3dc>
 800c7c0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c880 <__kernel_rem_pio2+0x528>
 800c7c4:	ab42      	add	r3, sp, #264	; 0x108
 800c7c6:	441a      	add	r2, r3
 800c7c8:	f1bb 0f00 	cmp.w	fp, #0
 800c7cc:	da05      	bge.n	800c7da <__kernel_rem_pio2+0x482>
 800c7ce:	b10e      	cbz	r6, 800c7d4 <__kernel_rem_pio2+0x47c>
 800c7d0:	eeb1 7b47 	vneg.f64	d7, d7
 800c7d4:	ed87 7b00 	vstr	d7, [r7]
 800c7d8:	e7ac      	b.n	800c734 <__kernel_rem_pio2+0x3dc>
 800c7da:	ed32 6b02 	vldmdb	r2!, {d6}
 800c7de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c7e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7e6:	e7ef      	b.n	800c7c8 <__kernel_rem_pio2+0x470>
 800c7e8:	ed32 7b02 	vldmdb	r2!, {d7}
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c7f2:	e7d0      	b.n	800c796 <__kernel_rem_pio2+0x43e>
 800c7f4:	eeb0 7b46 	vmov.f64	d7, d6
 800c7f8:	e7d2      	b.n	800c7a0 <__kernel_rem_pio2+0x448>
 800c7fa:	ecb2 6b02 	vldmia	r2!, {d6}
 800c7fe:	3301      	adds	r3, #1
 800c800:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c804:	e7d4      	b.n	800c7b0 <__kernel_rem_pio2+0x458>
 800c806:	ed91 7b00 	vldr	d7, [r1]
 800c80a:	ed91 5b02 	vldr	d5, [r1, #8]
 800c80e:	3801      	subs	r0, #1
 800c810:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c814:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c818:	ed81 6b00 	vstr	d6, [r1]
 800c81c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c820:	ed81 7b02 	vstr	d7, [r1, #8]
 800c824:	e796      	b.n	800c754 <__kernel_rem_pio2+0x3fc>
 800c826:	ed92 7b00 	vldr	d7, [r2]
 800c82a:	ed92 5b02 	vldr	d5, [r2, #8]
 800c82e:	3901      	subs	r1, #1
 800c830:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c834:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c838:	ed82 6b00 	vstr	d6, [r2]
 800c83c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c840:	ed82 7b02 	vstr	d7, [r2, #8]
 800c844:	e78b      	b.n	800c75e <__kernel_rem_pio2+0x406>
 800c846:	ed33 6b02 	vldmdb	r3!, {d6}
 800c84a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c84e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c852:	e78b      	b.n	800c76c <__kernel_rem_pio2+0x414>
 800c854:	eeb1 5b45 	vneg.f64	d5, d5
 800c858:	eeb1 6b46 	vneg.f64	d6, d6
 800c85c:	ed87 5b00 	vstr	d5, [r7]
 800c860:	eeb1 7b47 	vneg.f64	d7, d7
 800c864:	ed87 6b02 	vstr	d6, [r7, #8]
 800c868:	e78d      	b.n	800c786 <__kernel_rem_pio2+0x42e>
 800c86a:	bf00      	nop
 800c86c:	f3af 8000 	nop.w
 800c870:	00000000 	.word	0x00000000
 800c874:	41700000 	.word	0x41700000
 800c878:	00000000 	.word	0x00000000
 800c87c:	3e700000 	.word	0x3e700000
	...

0800c888 <__kernel_sin>:
 800c888:	ee10 3a90 	vmov	r3, s1
 800c88c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c890:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c894:	da04      	bge.n	800c8a0 <__kernel_sin+0x18>
 800c896:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c89a:	ee17 3a90 	vmov	r3, s15
 800c89e:	b35b      	cbz	r3, 800c8f8 <__kernel_sin+0x70>
 800c8a0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c8a4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c8a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c900 <__kernel_sin+0x78>
 800c8ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c908 <__kernel_sin+0x80>
 800c8b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c8b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c910 <__kernel_sin+0x88>
 800c8b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c8bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c918 <__kernel_sin+0x90>
 800c8c0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c8c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c920 <__kernel_sin+0x98>
 800c8c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c8cc:	b930      	cbnz	r0, 800c8dc <__kernel_sin+0x54>
 800c8ce:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c928 <__kernel_sin+0xa0>
 800c8d2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c8d6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c8da:	4770      	bx	lr
 800c8dc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c8e0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c8e4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c8e8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c8ec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c930 <__kernel_sin+0xa8>
 800c8f0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c8f4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	f3af 8000 	nop.w
 800c900:	5acfd57c 	.word	0x5acfd57c
 800c904:	3de5d93a 	.word	0x3de5d93a
 800c908:	8a2b9ceb 	.word	0x8a2b9ceb
 800c90c:	be5ae5e6 	.word	0xbe5ae5e6
 800c910:	57b1fe7d 	.word	0x57b1fe7d
 800c914:	3ec71de3 	.word	0x3ec71de3
 800c918:	19c161d5 	.word	0x19c161d5
 800c91c:	bf2a01a0 	.word	0xbf2a01a0
 800c920:	1110f8a6 	.word	0x1110f8a6
 800c924:	3f811111 	.word	0x3f811111
 800c928:	55555549 	.word	0x55555549
 800c92c:	bfc55555 	.word	0xbfc55555
 800c930:	55555549 	.word	0x55555549
 800c934:	3fc55555 	.word	0x3fc55555

0800c938 <with_errno>:
 800c938:	b513      	push	{r0, r1, r4, lr}
 800c93a:	4604      	mov	r4, r0
 800c93c:	ed8d 0b00 	vstr	d0, [sp]
 800c940:	f7fe fef4 	bl	800b72c <__errno>
 800c944:	ed9d 0b00 	vldr	d0, [sp]
 800c948:	6004      	str	r4, [r0, #0]
 800c94a:	b002      	add	sp, #8
 800c94c:	bd10      	pop	{r4, pc}

0800c94e <xflow>:
 800c94e:	b082      	sub	sp, #8
 800c950:	b158      	cbz	r0, 800c96a <xflow+0x1c>
 800c952:	eeb1 7b40 	vneg.f64	d7, d0
 800c956:	ed8d 7b00 	vstr	d7, [sp]
 800c95a:	ed9d 7b00 	vldr	d7, [sp]
 800c95e:	2022      	movs	r0, #34	; 0x22
 800c960:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c964:	b002      	add	sp, #8
 800c966:	f7ff bfe7 	b.w	800c938 <with_errno>
 800c96a:	eeb0 7b40 	vmov.f64	d7, d0
 800c96e:	e7f2      	b.n	800c956 <xflow+0x8>

0800c970 <__math_uflow>:
 800c970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c978 <__math_uflow+0x8>
 800c974:	f7ff bfeb 	b.w	800c94e <xflow>
 800c978:	00000000 	.word	0x00000000
 800c97c:	10000000 	.word	0x10000000

0800c980 <__math_oflow>:
 800c980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c988 <__math_oflow+0x8>
 800c984:	f7ff bfe3 	b.w	800c94e <xflow>
 800c988:	00000000 	.word	0x00000000
 800c98c:	70000000 	.word	0x70000000

0800c990 <__math_divzero>:
 800c990:	b082      	sub	sp, #8
 800c992:	2800      	cmp	r0, #0
 800c994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c998:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800c99c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800c9a0:	ed8d 7b00 	vstr	d7, [sp]
 800c9a4:	ed9d 0b00 	vldr	d0, [sp]
 800c9a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800c9b8 <__math_divzero+0x28>
 800c9ac:	2022      	movs	r0, #34	; 0x22
 800c9ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800c9b2:	b002      	add	sp, #8
 800c9b4:	f7ff bfc0 	b.w	800c938 <with_errno>
	...

0800c9c0 <__math_invalid>:
 800c9c0:	eeb0 7b40 	vmov.f64	d7, d0
 800c9c4:	eeb4 7b47 	vcmp.f64	d7, d7
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800c9d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800c9d4:	d602      	bvs.n	800c9dc <__math_invalid+0x1c>
 800c9d6:	2021      	movs	r0, #33	; 0x21
 800c9d8:	f7ff bfae 	b.w	800c938 <with_errno>
 800c9dc:	4770      	bx	lr

0800c9de <__math_check_uflow>:
 800c9de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e6:	d102      	bne.n	800c9ee <__math_check_uflow+0x10>
 800c9e8:	2022      	movs	r0, #34	; 0x22
 800c9ea:	f7ff bfa5 	b.w	800c938 <with_errno>
 800c9ee:	4770      	bx	lr

0800c9f0 <__math_check_oflow>:
 800c9f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ca10 <__math_check_oflow+0x20>
 800c9f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800c9f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca00:	dd02      	ble.n	800ca08 <__math_check_oflow+0x18>
 800ca02:	2022      	movs	r0, #34	; 0x22
 800ca04:	f7ff bf98 	b.w	800c938 <with_errno>
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	f3af 8000 	nop.w
 800ca10:	ffffffff 	.word	0xffffffff
 800ca14:	7fefffff 	.word	0x7fefffff

0800ca18 <fabs>:
 800ca18:	ec51 0b10 	vmov	r0, r1, d0
 800ca1c:	ee10 2a10 	vmov	r2, s0
 800ca20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca24:	ec43 2b10 	vmov	d0, r2, r3
 800ca28:	4770      	bx	lr
 800ca2a:	0000      	movs	r0, r0
 800ca2c:	0000      	movs	r0, r0
	...

0800ca30 <floor>:
 800ca30:	ee10 1a90 	vmov	r1, s1
 800ca34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca38:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ca3c:	2b13      	cmp	r3, #19
 800ca3e:	b530      	push	{r4, r5, lr}
 800ca40:	ee10 0a10 	vmov	r0, s0
 800ca44:	ee10 5a10 	vmov	r5, s0
 800ca48:	dc31      	bgt.n	800caae <floor+0x7e>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	da15      	bge.n	800ca7a <floor+0x4a>
 800ca4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cb08 <floor+0xd8>
 800ca52:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ca56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5e:	dd07      	ble.n	800ca70 <floor+0x40>
 800ca60:	2900      	cmp	r1, #0
 800ca62:	da4e      	bge.n	800cb02 <floor+0xd2>
 800ca64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca68:	4318      	orrs	r0, r3
 800ca6a:	d001      	beq.n	800ca70 <floor+0x40>
 800ca6c:	4928      	ldr	r1, [pc, #160]	; (800cb10 <floor+0xe0>)
 800ca6e:	2000      	movs	r0, #0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4602      	mov	r2, r0
 800ca74:	ec43 2b10 	vmov	d0, r2, r3
 800ca78:	e020      	b.n	800cabc <floor+0x8c>
 800ca7a:	4a26      	ldr	r2, [pc, #152]	; (800cb14 <floor+0xe4>)
 800ca7c:	411a      	asrs	r2, r3
 800ca7e:	ea01 0402 	and.w	r4, r1, r2
 800ca82:	4304      	orrs	r4, r0
 800ca84:	d01a      	beq.n	800cabc <floor+0x8c>
 800ca86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cb08 <floor+0xd8>
 800ca8a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ca8e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca96:	ddeb      	ble.n	800ca70 <floor+0x40>
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	bfbe      	ittt	lt
 800ca9c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800caa0:	fa40 f303 	asrlt.w	r3, r0, r3
 800caa4:	18c9      	addlt	r1, r1, r3
 800caa6:	ea21 0102 	bic.w	r1, r1, r2
 800caaa:	2000      	movs	r0, #0
 800caac:	e7e0      	b.n	800ca70 <floor+0x40>
 800caae:	2b33      	cmp	r3, #51	; 0x33
 800cab0:	dd05      	ble.n	800cabe <floor+0x8e>
 800cab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab6:	d101      	bne.n	800cabc <floor+0x8c>
 800cab8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cabc:	bd30      	pop	{r4, r5, pc}
 800cabe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cac6:	40e2      	lsrs	r2, r4
 800cac8:	4202      	tst	r2, r0
 800caca:	d0f7      	beq.n	800cabc <floor+0x8c>
 800cacc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cb08 <floor+0xd8>
 800cad0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cad4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cadc:	ddc8      	ble.n	800ca70 <floor+0x40>
 800cade:	2900      	cmp	r1, #0
 800cae0:	da02      	bge.n	800cae8 <floor+0xb8>
 800cae2:	2b14      	cmp	r3, #20
 800cae4:	d103      	bne.n	800caee <floor+0xbe>
 800cae6:	3101      	adds	r1, #1
 800cae8:	ea20 0002 	bic.w	r0, r0, r2
 800caec:	e7c0      	b.n	800ca70 <floor+0x40>
 800caee:	2401      	movs	r4, #1
 800caf0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800caf4:	fa04 f303 	lsl.w	r3, r4, r3
 800caf8:	4418      	add	r0, r3
 800cafa:	42a8      	cmp	r0, r5
 800cafc:	bf38      	it	cc
 800cafe:	1909      	addcc	r1, r1, r4
 800cb00:	e7f2      	b.n	800cae8 <floor+0xb8>
 800cb02:	2000      	movs	r0, #0
 800cb04:	4601      	mov	r1, r0
 800cb06:	e7b3      	b.n	800ca70 <floor+0x40>
 800cb08:	8800759c 	.word	0x8800759c
 800cb0c:	7e37e43c 	.word	0x7e37e43c
 800cb10:	bff00000 	.word	0xbff00000
 800cb14:	000fffff 	.word	0x000fffff

0800cb18 <nan>:
 800cb18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb20 <nan+0x8>
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	00000000 	.word	0x00000000
 800cb24:	7ff80000 	.word	0x7ff80000

0800cb28 <scalbn>:
 800cb28:	ee10 1a90 	vmov	r1, s1
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cb32:	b98c      	cbnz	r4, 800cb58 <scalbn+0x30>
 800cb34:	ee10 3a10 	vmov	r3, s0
 800cb38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cb3c:	430b      	orrs	r3, r1
 800cb3e:	d011      	beq.n	800cb64 <scalbn+0x3c>
 800cb40:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800cc08 <scalbn+0xe0>
 800cb44:	4b3c      	ldr	r3, [pc, #240]	; (800cc38 <scalbn+0x110>)
 800cb46:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cb4a:	4298      	cmp	r0, r3
 800cb4c:	da0b      	bge.n	800cb66 <scalbn+0x3e>
 800cb4e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800cc10 <scalbn+0xe8>
 800cb52:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cb56:	e005      	b.n	800cb64 <scalbn+0x3c>
 800cb58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	d107      	bne.n	800cb70 <scalbn+0x48>
 800cb60:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	ee10 1a90 	vmov	r1, s1
 800cb6a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cb6e:	3c36      	subs	r4, #54	; 0x36
 800cb70:	4404      	add	r4, r0
 800cb72:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800cb76:	429c      	cmp	r4, r3
 800cb78:	dd0d      	ble.n	800cb96 <scalbn+0x6e>
 800cb7a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800cc18 <scalbn+0xf0>
 800cb7e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800cc20 <scalbn+0xf8>
 800cb82:	eeb0 6b47 	vmov.f64	d6, d7
 800cb86:	ee10 3a90 	vmov	r3, s1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800cb90:	ee27 0b06 	vmul.f64	d0, d7, d6
 800cb94:	e7e6      	b.n	800cb64 <scalbn+0x3c>
 800cb96:	2c00      	cmp	r4, #0
 800cb98:	dd0a      	ble.n	800cbb0 <scalbn+0x88>
 800cb9a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800cb9e:	ec53 2b10 	vmov	r2, r3, d0
 800cba2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cba6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800cbaa:	ec43 2b10 	vmov	d0, r2, r3
 800cbae:	e7d9      	b.n	800cb64 <scalbn+0x3c>
 800cbb0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800cbb4:	da19      	bge.n	800cbea <scalbn+0xc2>
 800cbb6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cbba:	4298      	cmp	r0, r3
 800cbbc:	ee10 3a90 	vmov	r3, s1
 800cbc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc4:	dd09      	ble.n	800cbda <scalbn+0xb2>
 800cbc6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800cc18 <scalbn+0xf0>
 800cbca:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800cc20 <scalbn+0xf8>
 800cbce:	eeb0 7b40 	vmov.f64	d7, d0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800cbd8:	e7bb      	b.n	800cb52 <scalbn+0x2a>
 800cbda:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800cc10 <scalbn+0xe8>
 800cbde:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800cc28 <scalbn+0x100>
 800cbe2:	eeb0 7b40 	vmov.f64	d7, d0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	e7f4      	b.n	800cbd4 <scalbn+0xac>
 800cbea:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800cbee:	ec53 2b10 	vmov	r2, r3, d0
 800cbf2:	3436      	adds	r4, #54	; 0x36
 800cbf4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cbf8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800cbfc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800cc30 <scalbn+0x108>
 800cc00:	ec43 2b10 	vmov	d0, r2, r3
 800cc04:	e7a5      	b.n	800cb52 <scalbn+0x2a>
 800cc06:	bf00      	nop
 800cc08:	00000000 	.word	0x00000000
 800cc0c:	43500000 	.word	0x43500000
 800cc10:	c2f8f359 	.word	0xc2f8f359
 800cc14:	01a56e1f 	.word	0x01a56e1f
 800cc18:	8800759c 	.word	0x8800759c
 800cc1c:	7e37e43c 	.word	0x7e37e43c
 800cc20:	8800759c 	.word	0x8800759c
 800cc24:	fe37e43c 	.word	0xfe37e43c
 800cc28:	c2f8f359 	.word	0xc2f8f359
 800cc2c:	81a56e1f 	.word	0x81a56e1f
 800cc30:	00000000 	.word	0x00000000
 800cc34:	3c900000 	.word	0x3c900000
 800cc38:	ffff3cb0 	.word	0xffff3cb0

0800cc3c <_init>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr

0800cc48 <_fini>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr
