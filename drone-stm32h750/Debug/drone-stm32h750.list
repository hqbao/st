
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e374  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b20  0800e618  0800e618  0001e618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010138  08010138  00020138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010140  08010140  00020140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08010148  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018d0  24000090  080101d4  00030090  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001960  080101d4  00031960  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f1d1  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003393  00000000  00000000  0004f28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  00052620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001540  00000000  00000000  00053c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039525  00000000  00000000  000551c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f946  00000000  00000000  0008e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b806  00000000  00000000  000ae02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00219831  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006908  00000000  00000000  00219884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5fc 	.word	0x0800e5fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800e5fc 	.word	0x0800e5fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	ed87 0a02 	vstr	s0, [r7, #8]
 80006a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80006a4:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  filter->width = width;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0008 	add.w	r0, r3, #8
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	461a      	mov	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00c f8b3 	bl	800c860 <memset>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000714:	3301      	adds	r3, #1
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	fb93 f1f2 	sdiv	r1, r3, r2
 800071e:	fb01 f202 	mul.w	r2, r1, r2
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	3302      	adds	r3, #2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000752:	edd7 7a00 	vldr	s15, [r7]
 8000756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	ed93 7a01 	vldr	s14, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000788:	eef0 7a66 	vmov.f32	s15, s13
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e010      	b.n	80007ce <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ac:	2102      	movs	r1, #2
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <flash+0x48>)
 80007b0:	f004 f94d 	bl	8004a4e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f003 f8c5 	bl	8003944 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <flash+0x48>)
 80007be:	f004 f946 	bl	8004a4e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f003 f8be 	bl	8003944 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbea      	blt.n	80007ac <flash+0x10>
  }

  HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f003 f8b4 	bl	8003944 <HAL_Delay>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58020000 	.word	0x58020000

080007e8 <console>:

// Monitor console
void console(const char *str) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <console+0x24>)
 8000800:	f009 fb42 	bl	8009e88 <HAL_UART_Transmit_IT>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000348 	.word	0x24000348

08000810 <send_data>:

void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	b093      	sub	sp, #76	; 0x4c
 8000814:	af08      	add	r7, sp, #32
 8000816:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800081a:	edc7 0a08 	vstr	s1, [r7, #32]
 800081e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000822:	edc7 1a06 	vstr	s3, [r7, #24]
 8000826:	ed87 2a05 	vstr	s4, [r7, #20]
 800082a:	edc7 2a04 	vstr	s5, [r7, #16]
 800082e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000832:	edc7 3a02 	vstr	s7, [r7, #8]
 8000836:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 800083a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083e:	2100      	movs	r1, #0
 8000840:	4837      	ldr	r0, [pc, #220]	; (8000920 <send_data+0x110>)
 8000842:	f00c f80d 	bl	800c860 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8000846:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800084a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000924 <send_data+0x114>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000852:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8000856:	edd7 7a08 	vldr	s15, [r7, #32]
 800085a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000924 <send_data+0x114>
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000862:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8000866:	edd7 7a07 	vldr	s15, [r7, #28]
 800086a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000924 <send_data+0x114>
 800086e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000876:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 800087a:	edd7 7a06 	vldr	s15, [r7, #24]
 800087e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000924 <send_data+0x114>
 8000882:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800088a:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800088e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000892:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000924 <send_data+0x114>
 8000896:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 80008a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000924 <send_data+0x114>
 80008aa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b2:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80008b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000924 <send_data+0x114>
 80008be:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c6:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80008ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000924 <send_data+0x114>
 80008d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008da:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80008de:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000924 <send_data+0x114>
 80008e6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ee:	ee17 6a90 	vmov	r6, s15
 80008f2:	9606      	str	r6, [sp, #24]
 80008f4:	9505      	str	r5, [sp, #20]
 80008f6:	9404      	str	r4, [sp, #16]
 80008f8:	9003      	str	r0, [sp, #12]
 80008fa:	9102      	str	r1, [sp, #8]
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	ee16 3a10 	vmov	r3, s12
 8000904:	ee16 2a90 	vmov	r2, s13
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <send_data+0x118>)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <send_data+0x110>)
 800090c:	f00b ffb0 	bl	800c870 <siprintf>
  console(g_console_msg);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <send_data+0x110>)
 8000912:	f7ff ff69 	bl	80007e8 <console>
}
 8000916:	bf00      	nop
 8000918:	372c      	adds	r7, #44	; 0x2c
 800091a:	46bd      	mov	sp, r7
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	bf00      	nop
 8000920:	24001720 	.word	0x24001720
 8000924:	47c35000 	.word	0x47c35000
 8000928:	0800e618 	.word	0x0800e618

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f002 ff75 	bl	8003820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f92d 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 fd3f 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800093e:	f000 f9a3 	bl	8000c88 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000942:	f000 fcef 	bl	8001324 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000946:	f000 fc81 	bl	800124c <MX_TIM6_Init>
  MX_TIM2_Init();
 800094a:	f000 fa33 	bl	8000db4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800094e:	f000 fac9 	bl	8000ee4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000952:	f000 fb5f 	bl	8001014 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000956:	f000 fbf1 	bl	800113c <MX_TIM5_Init>
  MX_TIM7_Init();
 800095a:	f000 fcad 	bl	80012b8 <MX_TIM7_Init>
  MX_SPI2_Init();
 800095e:	f000 f9d3 	bl	8000d08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	4877      	ldr	r0, [pc, #476]	; (8000b44 <main+0x218>)
 8000968:	f004 f858 	bl	8004a1c <HAL_GPIO_WritePin>

  flash(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff ff15 	bl	800079c <flash>

  // Initialise filters for remote control
  average_filter_init(&g_af[0], 5); // Thrust
 8000972:	2105      	movs	r1, #5
 8000974:	4874      	ldr	r0, [pc, #464]	; (8000b48 <main+0x21c>)
 8000976:	f7ff fea6 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 800097a:	2105      	movs	r1, #5
 800097c:	4873      	ldr	r0, [pc, #460]	; (8000b4c <main+0x220>)
 800097e:	f7ff fea2 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8000982:	2105      	movs	r1, #5
 8000984:	4872      	ldr	r0, [pc, #456]	; (8000b50 <main+0x224>)
 8000986:	f7ff fe9e 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 800098a:	2105      	movs	r1, #5
 800098c:	4871      	ldr	r0, [pc, #452]	; (8000b54 <main+0x228>)
 800098e:	f7ff fe9a 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Tune 1
 8000992:	2105      	movs	r1, #5
 8000994:	4870      	ldr	r0, [pc, #448]	; (8000b58 <main+0x22c>)
 8000996:	f7ff fe96 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[5], 5); // Tune 2
 800099a:	2105      	movs	r1, #5
 800099c:	486f      	ldr	r0, [pc, #444]	; (8000b5c <main+0x230>)
 800099e:	f7ff fe92 	bl	80006c6 <average_filter_init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80009a2:	2303      	movs	r3, #3
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2303      	movs	r3, #3
 80009a8:	2200      	movs	r2, #0
 80009aa:	496d      	ldr	r1, [pc, #436]	; (8000b60 <main+0x234>)
 80009ac:	486d      	ldr	r0, [pc, #436]	; (8000b64 <main+0x238>)
 80009ae:	f000 ff35 	bl	800181c <MPU6050_init>
 80009b2:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <main+0x9a>
    flash(error);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff feec 	bl	800079c <flash>
  while (1) {
 80009c4:	e7ed      	b.n	80009a2 <main+0x76>
    if (error == 0) break;
 80009c6:	bf00      	nop
  }

  int i = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  int gx = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  int gy = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  int gz = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  while (i < 1000) {
 80009d8:	e035      	b.n	8000a46 <main+0x11a>
    MPU6050_update(&g_mpu6050);
 80009da:	4862      	ldr	r0, [pc, #392]	; (8000b64 <main+0x238>)
 80009dc:	f001 f958 	bl	8001c90 <MPU6050_update>
    HAL_Delay(3);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f002 ffaf 	bl	8003944 <HAL_Delay>
    gx += g_mpu6050.gx;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f0:	4b5c      	ldr	r3, [pc, #368]	; (8000b64 <main+0x238>)
 80009f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80009f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009fe:	ee17 3a90 	vmov	r3, s15
 8000a02:	613b      	str	r3, [r7, #16]
    gy += g_mpu6050.gy;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a0e:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <main+0x238>)
 8000a10:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1c:	ee17 3a90 	vmov	r3, s15
 8000a20:	60fb      	str	r3, [r7, #12]
    gz += g_mpu6050.gz;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <main+0x238>)
 8000a2e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	60bb      	str	r3, [r7, #8]
    i += 1;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  while (i < 1000) {
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4c:	dbc5      	blt.n	80009da <main+0xae>
  }
  gx = gx/1000;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4a45      	ldr	r2, [pc, #276]	; (8000b68 <main+0x23c>)
 8000a52:	fb82 1203 	smull	r1, r2, r2, r3
 8000a56:	1192      	asrs	r2, r2, #6
 8000a58:	17db      	asrs	r3, r3, #31
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	613b      	str	r3, [r7, #16]
  gy = gy/1000;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4a41      	ldr	r2, [pc, #260]	; (8000b68 <main+0x23c>)
 8000a62:	fb82 1203 	smull	r1, r2, r2, r3
 8000a66:	1192      	asrs	r2, r2, #6
 8000a68:	17db      	asrs	r3, r3, #31
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	60fb      	str	r3, [r7, #12]
  gz = gz/1000;
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	4a3d      	ldr	r2, [pc, #244]	; (8000b68 <main+0x23c>)
 8000a72:	fb82 1203 	smull	r1, r2, r2, r3
 8000a76:	1192      	asrs	r2, r2, #6
 8000a78:	17db      	asrs	r3, r3, #31
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	60bb      	str	r3, [r7, #8]

  MPU6050_set_offset(&g_mpu6050, -287, 202, -82, -gx, -gy, -gz);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	425b      	negs	r3, r3
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	425b      	negs	r3, r3
 8000a8e:	ee07 3a10 	vmov	s14, r3
 8000a92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	425b      	negs	r3, r3
 8000a9a:	ee06 3a90 	vmov	s13, r3
 8000a9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000aa2:	eef0 2a66 	vmov.f32	s5, s13
 8000aa6:	eeb0 2a47 	vmov.f32	s4, s14
 8000aaa:	eef0 1a67 	vmov.f32	s3, s15
 8000aae:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000b6c <main+0x240>
 8000ab2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8000b70 <main+0x244>
 8000ab6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8000b74 <main+0x248>
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <main+0x238>)
 8000abc:	f001 f8c0 	bl	8001c40 <MPU6050_set_offset>
//    if (error == 0) break;
//    flash(error);
//  }

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	482d      	ldr	r0, [pc, #180]	; (8000b78 <main+0x24c>)
 8000ac4:	f007 fe02 	bl	80086cc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000ac8:	2104      	movs	r1, #4
 8000aca:	482b      	ldr	r0, [pc, #172]	; (8000b78 <main+0x24c>)
 8000acc:	f007 fdfe 	bl	80086cc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4829      	ldr	r0, [pc, #164]	; (8000b78 <main+0x24c>)
 8000ad4:	f007 fdfa 	bl	80086cc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000ad8:	210c      	movs	r1, #12
 8000ada:	4827      	ldr	r0, [pc, #156]	; (8000b78 <main+0x24c>)
 8000adc:	f007 fdf6 	bl	80086cc <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4826      	ldr	r0, [pc, #152]	; (8000b7c <main+0x250>)
 8000ae4:	f007 fdf2 	bl	80086cc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000ae8:	210c      	movs	r1, #12
 8000aea:	4824      	ldr	r0, [pc, #144]	; (8000b7c <main+0x250>)
 8000aec:	f007 fdee 	bl	80086cc <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4823      	ldr	r0, [pc, #140]	; (8000b80 <main+0x254>)
 8000af4:	f007 fc7a 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000af8:	2104      	movs	r1, #4
 8000afa:	4821      	ldr	r0, [pc, #132]	; (8000b80 <main+0x254>)
 8000afc:	f007 fc76 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b00:	2108      	movs	r1, #8
 8000b02:	481f      	ldr	r0, [pc, #124]	; (8000b80 <main+0x254>)
 8000b04:	f007 fc72 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b08:	210c      	movs	r1, #12
 8000b0a:	481d      	ldr	r0, [pc, #116]	; (8000b80 <main+0x254>)
 8000b0c:	f007 fc6e 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b10:	2100      	movs	r1, #0
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <main+0x258>)
 8000b14:	f007 fc6a 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b18:	2104      	movs	r1, #4
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <main+0x258>)
 8000b1c:	f007 fc66 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b20:	2108      	movs	r1, #8
 8000b22:	4818      	ldr	r0, [pc, #96]	; (8000b84 <main+0x258>)
 8000b24:	f007 fc62 	bl	80083ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b28:	210c      	movs	r1, #12
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <main+0x258>)
 8000b2c:	f007 fc5e 	bl	80083ec <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <main+0x25c>)
 8000b32:	f007 fb81 	bl	8008238 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4914      	ldr	r1, [pc, #80]	; (8000b8c <main+0x260>)
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <main+0x264>)
 8000b3c:	f009 fa4c 	bl	8009fd8 <HAL_UART_Receive_IT>
 8000b40:	e7f9      	b.n	8000b36 <main+0x20a>
 8000b42:	bf00      	nop
 8000b44:	58020000 	.word	0x58020000
 8000b48:	240003d8 	.word	0x240003d8
 8000b4c:	24000574 	.word	0x24000574
 8000b50:	24000710 	.word	0x24000710
 8000b54:	240008ac 	.word	0x240008ac
 8000b58:	24000a48 	.word	0x24000a48
 8000b5c:	24000be4 	.word	0x24000be4
 8000b60:	240000ac 	.word	0x240000ac
 8000b64:	240013f0 	.word	0x240013f0
 8000b68:	10624dd3 	.word	0x10624dd3
 8000b6c:	c2a40000 	.word	0xc2a40000
 8000b70:	434a0000 	.word	0x434a0000
 8000b74:	c38f8000 	.word	0xc38f8000
 8000b78:	24000218 	.word	0x24000218
 8000b7c:	24000264 	.word	0x24000264
 8000b80:	24000180 	.word	0x24000180
 8000b84:	240001cc 	.word	0x240001cc
 8000b88:	240002fc 	.word	0x240002fc
 8000b8c:	24001820 	.word	0x24001820
 8000b90:	24000348 	.word	0x24000348

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	224c      	movs	r2, #76	; 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00b fe5c 	bl	800c860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00b fe56 	bl	800c860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f004 fe6b 	bl	8005890 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <SystemClock_Config+0xec>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <SystemClock_Config+0xec>)
 8000bc4:	f023 0301 	bic.w	r3, r3, #1
 8000bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <SystemClock_Config+0xec>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <SystemClock_Config+0xf0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <SystemClock_Config+0xf0>)
 8000bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SystemClock_Config+0xf0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bec:	bf00      	nop
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <SystemClock_Config+0xf0>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d1f8      	bne.n	8000bee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c12:	23a0      	movs	r3, #160	; 0xa0
 8000c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c22:	2308      	movs	r3, #8
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fe66 	bl	8005904 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c3e:	f000 fc2f 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	233f      	movs	r3, #63	; 0x3f
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2102      	movs	r1, #2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fa79 	bl	8006160 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c74:	f000 fc14 	bl	80014a0 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3770      	adds	r7, #112	; 0x70
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58000400 	.word	0x58000400
 8000c84:	58024800 	.word	0x58024800

08000c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <MX_I2C1_Init+0x78>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <MX_I2C1_Init+0x7c>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cc4:	f003 fede 	bl	8004a84 <HAL_I2C_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cce:	f000 fbe7 	bl	80014a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000cd6:	f004 fd43 	bl	8005760 <HAL_I2CEx_ConfigAnalogFilter>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 fbde 	bl	80014a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_I2C1_Init+0x74>)
 8000ce8:	f004 fd85 	bl	80057f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 fbd5 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	240000ac 	.word	0x240000ac
 8000d00:	40005400 	.word	0x40005400
 8000d04:	10c0ecff 	.word	0x10c0ecff

08000d08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <MX_SPI2_Init+0xa8>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d3c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_SPI2_Init+0xa4>)
 8000d9a:	f007 f8d5 	bl	8007f48 <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000da4:	f000 fb7c 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240000f8 	.word	0x240000f8
 8000db0:	40003800 	.word	0x40003800

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000dee:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000df0:	220a      	movs	r2, #10
 8000df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000dfc:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000e00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0e:	4834      	ldr	r0, [pc, #208]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e10:	f007 f9bb 	bl	800818a <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 fb41 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e2c:	f008 f86e 	bl	8008f0c <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e36:	f000 fb33 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e3c:	f007 fa74 	bl	8008328 <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e46:	f000 fb2b 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e5a:	f008 ff19 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e64:	f000 fb1c 	bl	80014a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e80:	f007 ff30 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e8a:	f000 fb09 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2204      	movs	r2, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000e96:	f007 ff25 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ea0:	f000 fafe 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000eac:	f007 ff1a 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000eb6:	f000 faf3 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000ec2:	f007 ff0f 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000ecc:	f000 fae8 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM2_Init+0x12c>)
 8000ed2:	f001 fa25 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	24000180 	.word	0x24000180

08000ee4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_TIM3_Init+0x128>)
 8000f18:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <MX_TIM3_Init+0x12c>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	; (800100c <MX_TIM3_Init+0x128>)
 8000f1e:	220a      	movs	r2, #10
 8000f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <MX_TIM3_Init+0x128>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000;
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <MX_TIM3_Init+0x128>)
 8000f2a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_TIM3_Init+0x128>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <MX_TIM3_Init+0x128>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <MX_TIM3_Init+0x128>)
 8000f3e:	f007 f924 	bl	800818a <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f48:	f000 faaa 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	4619      	mov	r1, r3
 8000f58:	482c      	ldr	r0, [pc, #176]	; (800100c <MX_TIM3_Init+0x128>)
 8000f5a:	f007 ffd7 	bl	8008f0c <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f64:	f000 fa9c 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <MX_TIM3_Init+0x128>)
 8000f6a:	f007 f9dd 	bl	8008328 <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 fa94 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_TIM3_Init+0x128>)
 8000f88:	f008 fe82 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f92:	f000 fa85 	bl	80014a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4817      	ldr	r0, [pc, #92]	; (800100c <MX_TIM3_Init+0x128>)
 8000fae:	f007 fe99 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fb8:	f000 fa72 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_TIM3_Init+0x128>)
 8000fc4:	f007 fe8e 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000fce:	f000 fa67 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM3_Init+0x128>)
 8000fda:	f007 fe83 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000fe4:	f000 fa5c 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	220c      	movs	r2, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM3_Init+0x128>)
 8000ff0:	f007 fe78 	bl	8008ce4 <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000ffa:	f000 fa51 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM3_Init+0x128>)
 8001000:	f001 f98e 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8001004:	bf00      	nop
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	240001cc 	.word	0x240001cc
 8001010:	40000400 	.word	0x40000400

08001014 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001040:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_TIM4_Init+0x120>)
 8001042:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <MX_TIM4_Init+0x124>)
 8001044:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <MX_TIM4_Init+0x120>)
 8001048:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800104c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <MX_TIM4_Init+0x120>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <MX_TIM4_Init+0x120>)
 8001056:	f24c 3250 	movw	r2, #50000	; 0xc350
 800105a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b35      	ldr	r3, [pc, #212]	; (8001134 <MX_TIM4_Init+0x120>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_TIM4_Init+0x120>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001068:	4832      	ldr	r0, [pc, #200]	; (8001134 <MX_TIM4_Init+0x120>)
 800106a:	f007 f88e 	bl	800818a <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001074:	f000 fa14 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4619      	mov	r1, r3
 8001084:	482b      	ldr	r0, [pc, #172]	; (8001134 <MX_TIM4_Init+0x120>)
 8001086:	f007 ff41 	bl	8008f0c <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001090:	f000 fa06 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001094:	4827      	ldr	r0, [pc, #156]	; (8001134 <MX_TIM4_Init+0x120>)
 8001096:	f007 fab7 	bl	8008608 <HAL_TIM_IC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 f9fe 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4820      	ldr	r0, [pc, #128]	; (8001134 <MX_TIM4_Init+0x120>)
 80010b4:	f008 fdec 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80010be:	f000 f9ef 	bl	80014a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010c2:	230a      	movs	r3, #10
 80010c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_TIM4_Init+0x120>)
 80010da:	f007 fd66 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80010e4:	f000 f9dc 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2204      	movs	r2, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_TIM4_Init+0x120>)
 80010f0:	f007 fd5b 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80010fa:	f000 f9d1 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <MX_TIM4_Init+0x120>)
 8001106:	f007 fd50 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001110:	f000 f9c6 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	220c      	movs	r2, #12
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM4_Init+0x120>)
 800111c:	f007 fd45 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8001126:	f000 f9bb 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000218 	.word	0x24000218
 8001138:	40000800 	.word	0x40000800

0800113c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <MX_TIM5_Init+0x108>)
 800116a:	4a37      	ldr	r2, [pc, #220]	; (8001248 <MX_TIM5_Init+0x10c>)
 800116c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <MX_TIM5_Init+0x108>)
 8001170:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001174:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <MX_TIM5_Init+0x108>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <MX_TIM5_Init+0x108>)
 800117e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001182:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <MX_TIM5_Init+0x108>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <MX_TIM5_Init+0x108>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001190:	482c      	ldr	r0, [pc, #176]	; (8001244 <MX_TIM5_Init+0x108>)
 8001192:	f006 fffa 	bl	800818a <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800119c:	f000 f980 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4825      	ldr	r0, [pc, #148]	; (8001244 <MX_TIM5_Init+0x108>)
 80011ae:	f007 fead 	bl	8008f0c <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80011b8:	f000 f972 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <MX_TIM5_Init+0x108>)
 80011be:	f007 fa23 	bl	8008608 <HAL_TIM_IC_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80011c8:	f000 f96a 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	481a      	ldr	r0, [pc, #104]	; (8001244 <MX_TIM5_Init+0x108>)
 80011dc:	f008 fd58 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80011e6:	f000 f95b 	bl	80014a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011ea:	230a      	movs	r3, #10
 80011ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <MX_TIM5_Init+0x108>)
 8001202:	f007 fcd2 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800120c:	f000 f948 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2208      	movs	r2, #8
 8001214:	4619      	mov	r1, r3
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <MX_TIM5_Init+0x108>)
 8001218:	f007 fcc7 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001222:	f000 f93d 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	220c      	movs	r2, #12
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM5_Init+0x108>)
 800122e:	f007 fcbc 	bl	8008baa <HAL_TIM_IC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 8001238:	f000 f932 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24000264 	.word	0x24000264
 8001248:	40000c00 	.word	0x40000c00

0800124c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_TIM6_Init+0x64>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_TIM6_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_TIM6_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001270:	f242 7210 	movw	r2, #10000	; 0x2710
 8001274:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_TIM6_Init+0x64>)
 800127e:	f006 ff84 	bl	800818a <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001288:	f000 f90a 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_TIM6_Init+0x64>)
 800129a:	f008 fcf9 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 f8fc 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	240002b0 	.word	0x240002b0
 80012b4:	40001000 	.word	0x40001000

080012b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_TIM7_Init+0x64>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_TIM7_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_TIM7_Init+0x64>)
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_TIM7_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2500;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_TIM7_Init+0x64>)
 80012dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM7_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM7_Init+0x64>)
 80012ea:	f006 ff4e 	bl	800818a <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80012f4:	f000 f8d4 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM7_Init+0x64>)
 8001306:	f008 fcc3 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001310:	f000 f8c6 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	240002fc 	.word	0x240002fc
 8001320:	40001400 	.word	0x40001400

08001324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_USART1_UART_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 800136e:	f008 fd3b 	bl	8009de8 <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 f892 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001380:	f00b f979 	bl	800c676 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 f889 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 8001392:	f00b f9ae 	bl	800c6f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 f880 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_USART1_UART_Init+0x90>)
 80013a2:	f00b f92f 	bl	800c604 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f878 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	24000348 	.word	0x24000348
 80013b8:	40011000 	.word	0x40011000

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_GPIO_Init+0xdc>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <MX_GPIO_Init+0xdc>)
 80013da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <MX_GPIO_Init+0xdc>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_GPIO_Init+0xdc>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a28      	ldr	r2, [pc, #160]	; (8001498 <MX_GPIO_Init+0xdc>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_GPIO_Init+0xdc>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_GPIO_Init+0xdc>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_GPIO_Init+0xdc>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <MX_GPIO_Init+0xdc>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_GPIO_Init+0xdc>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2102      	movs	r1, #2
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <MX_GPIO_Init+0xe0>)
 800146e:	f003 fad5 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0xe0>)
 800148a:	f003 f8ff 	bl	800468c <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024400 	.word	0x58024400
 800149c:	58020000 	.word	0x58020000

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
 80014aa:	0000      	movs	r0, r0
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	ed2d 8b04 	vpush	{d8-d9}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80014c8:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001818 <calc_angles+0x368>
 80014cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80014e6:	eef1 6a67 	vneg.f32	s13, s15
 80014ea:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001818 <calc_angles+0x368>
 80014ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001502:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800150c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edd3 7a08 	vldr	s15, [r3, #32]
 8001516:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800151a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80017f0 <calc_angles+0x340>
 800151e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001522:	eeb0 0b47 	vmov.f64	d0, d7
 8001526:	f00c f89b 	bl	800d660 <sin>
 800152a:	eeb0 7b40 	vmov.f64	d7, d0
 800152e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001532:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001536:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001546:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001550:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a08 	vldr	s15, [r3, #32]
 800155a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80017f0 <calc_angles+0x340>
 8001562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001566:	eeb0 0b47 	vmov.f64	d0, d7
 800156a:	f00c f879 	bl	800d660 <sin>
 800156e:	eeb0 7b40 	vmov.f64	d7, d0
 8001572:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001576:	ee38 7b47 	vsub.f64	d7, d8, d7
 800157a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edd3 7a02 	vldr	s15, [r3, #8]
 800158a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001592:	eeb0 0b47 	vmov.f64	d0, d7
 8001596:	f00b fe0f 	bl	800d1b8 <pow>
 800159a:	eeb0 8b40 	vmov.f64	d8, d0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80015a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015ac:	eeb0 0b47 	vmov.f64	d0, d7
 80015b0:	f00b fe02 	bl	800d1b8 <pow>
 80015b4:	eeb0 7b40 	vmov.f64	d7, d0
 80015b8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	edd3 7a04 	vldr	s15, [r3, #16]
 80015c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015ca:	eeb0 0b47 	vmov.f64	d0, d7
 80015ce:	f00b fdf3 	bl	800d1b8 <pow>
 80015d2:	eeb0 7b40 	vmov.f64	d7, d0
 80015d6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80015da:	eeb0 0b47 	vmov.f64	d0, d7
 80015de:	f00c f8b7 	bl	800d750 <sqrt>
 80015e2:	eeb0 7b40 	vmov.f64	d7, d0
 80015e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80015ea:	ee17 2a90 	vmov	r2, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fc:	ee17 3a90 	vmov	r3, s15
 8001600:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001604:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800160c:	429a      	cmp	r2, r3
 800160e:	da1b      	bge.n	8001648 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 6a03 	vldr	s13, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162a:	eeb0 0b47 	vmov.f64	d0, d7
 800162e:	f00c f863 	bl	800d6f8 <asin>
 8001632:	eeb0 7b40 	vmov.f64	d7, d0
 8001636:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80017f8 <calc_angles+0x348>
 800163a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800163e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	edd3 7a03 	vldr	s15, [r3, #12]
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800165a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001662:	429a      	cmp	r2, r3
 8001664:	da1b      	bge.n	800169e <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edd3 6a02 	vldr	s13, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001680:	eeb0 0b47 	vmov.f64	d0, d7
 8001684:	f00c f838 	bl	800d6f8 <asin>
 8001688:	eeb0 7b40 	vmov.f64	d7, d0
 800168c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80017f8 <calc_angles+0x348>
 8001690:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001694:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d132      	bne.n	800170e <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016b2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80016b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80016c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80016c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80016e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80016fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800170c:	e00b      	b.n	8001726 <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800172c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001730:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001800 <calc_angles+0x350>
 8001734:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800173e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001742:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001808 <calc_angles+0x358>
 8001746:	ee27 7b05 	vmul.f64	d7, d7, d5
 800174a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800174e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800175e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001762:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001800 <calc_angles+0x350>
 8001766:	ee27 6b06 	vmul.f64	d6, d7, d6
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001774:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001808 <calc_angles+0x358>
 8001778:	ee27 7b05 	vmul.f64	d7, d7, d5
 800177c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001780:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001790:	eef1 7a67 	vneg.f32	s15, s15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80017a0:	eef1 7a67 	vneg.f32	s15, s15
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80017b0:	eef1 7a67 	vneg.f32	s15, s15
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80017c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80017ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ce:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001810 <calc_angles+0x360>
 80017d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	ecbd 8b04 	vpop	{d8-d9}
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	695f8190 	.word	0x695f8190
 80017f4:	3f06e05a 	.word	0x3f06e05a
 80017f8:	1a63c1f8 	.word	0x1a63c1f8
 80017fc:	404ca5dc 	.word	0x404ca5dc
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	3feccccc 	.word	0x3feccccc
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3fb99999 	.word	0x3fb99999
 8001810:	d2f1a9fc 	.word	0xd2f1a9fc
 8001814:	3f50624d 	.word	0x3f50624d
 8001818:	43c80000 	.word	0x43c80000

0800181c <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	460b      	mov	r3, r1
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	4613      	mov	r3, r2
 8001830:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	22d0      	movs	r2, #208	; 0xd0
 800183c:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e00a      	b.n	800185a <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fcaf 	bl	80051ac <HAL_I2C_GetState>
 800184e:	4603      	mov	r3, r0
 8001850:	2b20      	cmp	r3, #32
 8001852:	d006      	beq.n	8001862 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3301      	adds	r3, #1
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2b04      	cmp	r3, #4
 800185e:	ddf1      	ble.n	8001844 <MPU6050_init+0x28>
 8001860:	e000      	b.n	8001864 <MPU6050_init+0x48>
      break;
 8001862:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b04      	cmp	r3, #4
 8001868:	dd01      	ble.n	800186e <MPU6050_init+0x52>
 800186a:	2301      	movs	r3, #1
 800186c:	e1e1      	b.n	8001c32 <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 800186e:	2375      	movs	r3, #117	; 0x75
 8001870:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e011      	b.n	800189c <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	b299      	uxth	r1, r3
 8001882:	f107 021b 	add.w	r2, r7, #27
 8001886:	2364      	movs	r3, #100	; 0x64
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	f003 f98a 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	ddea      	ble.n	8001878 <MPU6050_init+0x5c>
 80018a2:	e000      	b.n	80018a6 <MPU6050_init+0x8a>
      break;
 80018a4:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	dd01      	ble.n	80018b0 <MPU6050_init+0x94>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1c0      	b.n	8001c32 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e011      	b.n	80018da <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	b299      	uxth	r1, r3
 80018c0:	f107 021a 	add.w	r2, r7, #26
 80018c4:	2364      	movs	r3, #100	; 0x64
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	f003 fa5f 	bl	8004d8c <HAL_I2C_Master_Receive>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	ddea      	ble.n	80018b6 <MPU6050_init+0x9a>
 80018e0:	e000      	b.n	80018e4 <MPU6050_init+0xc8>
      break;
 80018e2:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	dd01      	ble.n	80018ee <MPU6050_init+0xd2>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e1a1      	b.n	8001c32 <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 80018ee:	7ebb      	ldrb	r3, [r7, #26]
 80018f0:	2b68      	cmp	r3, #104	; 0x68
 80018f2:	d001      	beq.n	80018f8 <MPU6050_init+0xdc>
 80018f4:	2305      	movs	r3, #5
 80018f6:	e19c      	b.n	8001c32 <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 80018f8:	236b      	movs	r3, #107	; 0x6b
 80018fa:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	e011      	b.n	8001926 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	b299      	uxth	r1, r3
 800190c:	f107 0218 	add.w	r2, r7, #24
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2302      	movs	r3, #2
 8001916:	f003 f945 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b04      	cmp	r3, #4
 800192a:	ddea      	ble.n	8001902 <MPU6050_init+0xe6>
 800192c:	e000      	b.n	8001930 <MPU6050_init+0x114>
      break;
 800192e:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b04      	cmp	r3, #4
 8001934:	dd01      	ble.n	800193a <MPU6050_init+0x11e>
 8001936:	2306      	movs	r3, #6
 8001938:	e17b      	b.n	8001c32 <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 800193a:	2319      	movs	r3, #25
 800193c:	753b      	strb	r3, [r7, #20]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e011      	b.n	800196c <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	791b      	ldrb	r3, [r3, #4]
 8001950:	b299      	uxth	r1, r3
 8001952:	f107 0214 	add.w	r2, r7, #20
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	f003 f922 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b04      	cmp	r3, #4
 8001970:	ddea      	ble.n	8001948 <MPU6050_init+0x12c>
 8001972:	e000      	b.n	8001976 <MPU6050_init+0x15a>
      break;
 8001974:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	2b04      	cmp	r3, #4
 800197a:	dd01      	ble.n	8001980 <MPU6050_init+0x164>
 800197c:	2307      	movs	r3, #7
 800197e:	e158      	b.n	8001c32 <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001980:	231c      	movs	r3, #28
 8001982:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	e011      	b.n	80019ae <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	b299      	uxth	r1, r3
 8001994:	f107 0213 	add.w	r2, r7, #19
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	f003 f901 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	ddea      	ble.n	800198a <MPU6050_init+0x16e>
 80019b4:	e000      	b.n	80019b8 <MPU6050_init+0x19c>
      break;
 80019b6:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	dd01      	ble.n	80019c2 <MPU6050_init+0x1a6>
 80019be:	2308      	movs	r3, #8
 80019c0:	e137      	b.n	8001c32 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e011      	b.n	80019ec <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	b299      	uxth	r1, r3
 80019d2:	f107 0213 	add.w	r2, r7, #19
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	f003 f9d6 	bl	8004d8c <HAL_I2C_Master_Receive>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	ddea      	ble.n	80019c8 <MPU6050_init+0x1ac>
 80019f2:	e000      	b.n	80019f6 <MPU6050_init+0x1da>
      break;
 80019f4:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	dd01      	ble.n	8001a00 <MPU6050_init+0x1e4>
 80019fc:	2309      	movs	r3, #9
 80019fe:	e118      	b.n	8001c32 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	f023 0318 	bic.w	r3, r3, #24
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e011      	b.n	8001a42 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	b299      	uxth	r1, r3
 8001a28:	f107 0213 	add.w	r2, r7, #19
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	f003 f8b7 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	ddea      	ble.n	8001a1e <MPU6050_init+0x202>
 8001a48:	e000      	b.n	8001a4c <MPU6050_init+0x230>
      break;
 8001a4a:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	dd01      	ble.n	8001a56 <MPU6050_init+0x23a>
 8001a52:	230a      	movs	r3, #10
 8001a54:	e0ed      	b.n	8001c32 <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001a56:	231b      	movs	r3, #27
 8001a58:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e011      	b.n	8001a84 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	f107 0212 	add.w	r2, r7, #18
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2301      	movs	r3, #1
 8001a74:	f003 f896 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	ddea      	ble.n	8001a60 <MPU6050_init+0x244>
 8001a8a:	e000      	b.n	8001a8e <MPU6050_init+0x272>
      break;
 8001a8c:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	dd01      	ble.n	8001a98 <MPU6050_init+0x27c>
 8001a94:	230b      	movs	r3, #11
 8001a96:	e0cc      	b.n	8001c32 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	e011      	b.n	8001ac2 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	791b      	ldrb	r3, [r3, #4]
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	f107 0212 	add.w	r2, r7, #18
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f003 f96b 	bl	8004d8c <HAL_I2C_Master_Receive>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	ddea      	ble.n	8001a9e <MPU6050_init+0x282>
 8001ac8:	e000      	b.n	8001acc <MPU6050_init+0x2b0>
      break;
 8001aca:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	dd01      	ble.n	8001ad6 <MPU6050_init+0x2ba>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	e0ad      	b.n	8001c32 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001ad6:	7cfb      	ldrb	r3, [r7, #19]
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	f023 0318 	bic.w	r3, r3, #24
 8001ade:	b25a      	sxtb	r2, r3
 8001ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	e011      	b.n	8001b1a <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	b299      	uxth	r1, r3
 8001b00:	f107 0212 	add.w	r2, r7, #18
 8001b04:	2364      	movs	r3, #100	; 0x64
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f003 f84b 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	ddea      	ble.n	8001af6 <MPU6050_init+0x2da>
 8001b20:	e000      	b.n	8001b24 <MPU6050_init+0x308>
      break;
 8001b22:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	dd01      	ble.n	8001b2e <MPU6050_init+0x312>
 8001b2a:	230d      	movs	r3, #13
 8001b2c:	e081      	b.n	8001c32 <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 8001b2e:	f240 231a 	movw	r3, #538	; 0x21a
 8001b32:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	e011      	b.n	8001b5e <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	b299      	uxth	r1, r3
 8001b44:	f107 0210 	add.w	r2, r7, #16
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f003 f829 	bl	8004ba4 <HAL_I2C_Master_Transmit>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	ddea      	ble.n	8001b3a <MPU6050_init+0x31e>
 8001b64:	e000      	b.n	8001b68 <MPU6050_init+0x34c>
      break;
 8001b66:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	dd01      	ble.n	8001b72 <MPU6050_init+0x356>
 8001b6e:	230e      	movs	r3, #14
 8001b70:	e05f      	b.n	8001c32 <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3380      	adds	r3, #128	; 0x80
 8001b76:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001c3c <MPU6050_init+0x420>
 8001b7a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b7e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd86 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3398      	adds	r3, #152	; 0x98
 8001b8c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001c3c <MPU6050_init+0x420>
 8001b90:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b94:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fd7b 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	33b0      	adds	r3, #176	; 0xb0
 8001ba2:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001c3c <MPU6050_init+0x420>
 8001ba6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001baa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fd70 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	33c8      	adds	r3, #200	; 0xc8
 8001bb8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bbc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bc0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fd65 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	33e0      	adds	r3, #224	; 0xe0
 8001bce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bd2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bd6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fd5a 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	33f8      	adds	r3, #248	; 0xf8
 8001be4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001be8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fd4f 	bl	8000694 <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3354      	adds	r3, #84	; 0x54
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00a fe2e 	bl	800c860 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3360      	adds	r3, #96	; 0x60
 8001c08:	220c      	movs	r2, #12
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00a fe27 	bl	800c860 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	336c      	adds	r3, #108	; 0x6c
 8001c16:	220c      	movs	r2, #12
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00a fe20 	bl	800c860 <memset>
  mpu6050->initialized = 0;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	3dcccccd 	.word	0x3dcccccd

08001c40 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	61f8      	str	r0, [r7, #28]
 8001c48:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c4c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c50:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c54:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c58:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c5c:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c84:	bf00      	nop
 8001c86:	3724      	adds	r7, #36	; 0x24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	791b      	ldrb	r3, [r3, #4]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001ca8:	220a      	movs	r2, #10
 8001caa:	9202      	str	r2, [sp, #8]
 8001cac:	220e      	movs	r2, #14
 8001cae:	9201      	str	r2, [sp, #4]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	223b      	movs	r2, #59	; 0x3b
 8001cb6:	f003 f95f 	bl	8004f78 <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f804 	bl	8001cc8 <MPU6050_parse_6axis>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001eb4 <MPU6050_parse_6axis+0x1ec>
 8001da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001eb8 <MPU6050_parse_6axis+0x1f0>
 8001dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	425b      	negs	r3, r3
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e6e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001ebc <MPU6050_parse_6axis+0x1f4>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e82:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001ebc <MPU6050_parse_6axis+0x1f4>
 8001e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e96:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001ebc <MPU6050_parse_6axis+0x1f4>
 8001e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fb03 	bl	80014b0 <calc_angles>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	43aa0000 	.word	0x43aa0000
 8001eb8:	42121eb8 	.word	0x42121eb8
 8001ebc:	42830000 	.word	0x42830000

08001ec0 <limit>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

float limit(float number, float min, float max) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eca:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ece:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8001ed2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d501      	bpl.n	8001ee8 <limit+0x28>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	e00b      	b.n	8001f00 <limit+0x40>
 8001ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	dd01      	ble.n	8001efe <limit+0x3e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	e000      	b.n	8001f00 <limit+0x40>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	ee07 3a90 	vmov	s15, r3
}
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_MspInit+0x30>)
 8001f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f20:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x30>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x30>)
 8001f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	58024400 	.word	0x58024400

08001f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b8      	sub	sp, #224	; 0xe0
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	22bc      	movs	r2, #188	; 0xbc
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00a fc79 	bl	800c860 <memset>
  if(hi2c->Instance==I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_I2C_MspInit+0xbc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d141      	bne.n	8001ffc <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fc76 	bl	8006878 <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f92:	f7ff fa85 	bl	80014a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <HAL_I2C_MspInit+0xc4>)
 8001fda:	f002 fb57 	bl	800468c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_I2C_MspInit+0xc0>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	37e0      	adds	r7, #224	; 0xe0
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40005400 	.word	0x40005400
 8002008:	58024400 	.word	0x58024400
 800200c:	58020400 	.word	0x58020400

08002010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0ba      	sub	sp, #232	; 0xe8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	22bc      	movs	r2, #188	; 0xbc
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f00a fc15 	bl	800c860 <memset>
  if(hspi->Instance==SPI2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_SPI_MspInit+0x108>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d166      	bne.n	800210e <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002046:	2300      	movs	r3, #0
 8002048:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fc12 	bl	8006878 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800205a:	f7ff fa21 	bl	80014a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_SPI_MspInit+0x10c>)
 8002060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002064:	4a2d      	ldr	r2, [pc, #180]	; (800211c <HAL_SPI_MspInit+0x10c>)
 8002066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_SPI_MspInit+0x10c>)
 8002070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_SPI_MspInit+0x10c>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_SPI_MspInit+0x10c>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_SPI_MspInit+0x10c>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_SPI_MspInit+0x10c>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_SPI_MspInit+0x10c>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_SPI_MspInit+0x10c>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80020b8:	2306      	movs	r3, #6
 80020ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d0:	2305      	movs	r3, #5
 80020d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020da:	4619      	mov	r1, r3
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <HAL_SPI_MspInit+0x110>)
 80020de:	f002 fad5 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fc:	2305      	movs	r3, #5
 80020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002106:	4619      	mov	r1, r3
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <HAL_SPI_MspInit+0x114>)
 800210a:	f002 fabf 	bl	800468c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	37e8      	adds	r7, #232	; 0xe8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40003800 	.word	0x40003800
 800211c:	58024400 	.word	0x58024400
 8002120:	58020800 	.word	0x58020800
 8002124:	58020400 	.word	0x58020400

08002128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b090      	sub	sp, #64	; 0x40
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d10f      	bne.n	800216a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800214c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002150:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800215a:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800215c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002168:	e0c6      	b.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_TIM_Base_MspInit+0x1dc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10f      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800217a:	4a61      	ldr	r2, [pc, #388]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002184:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002192:	e0b1      	b.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM4)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_TIM_Base_MspInit+0x1e0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d137      	bne.n	800220e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800219e:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c2:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021cc:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ec:	2302      	movs	r3, #2
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4845      	ldr	r0, [pc, #276]	; (800230c <HAL_TIM_Base_MspInit+0x1e4>)
 80021f8:	f002 fa48 	bl	800468c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	201e      	movs	r0, #30
 8002202:	f001 fcaa 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002206:	201e      	movs	r0, #30
 8002208:	f001 fcc1 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 800220c:	e074      	b.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM5)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_TIM_Base_MspInit+0x1e8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d136      	bne.n	8002286 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800221a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800222a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	4a30      	ldr	r2, [pc, #192]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002254:	230d      	movs	r3, #13
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002264:	2302      	movs	r3, #2
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	4829      	ldr	r0, [pc, #164]	; (8002314 <HAL_TIM_Base_MspInit+0x1ec>)
 8002270:	f002 fa0c 	bl	800468c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2032      	movs	r0, #50	; 0x32
 800227a:	f001 fc6e 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800227e:	2032      	movs	r0, #50	; 0x32
 8002280:	f001 fc85 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 8002284:	e038      	b.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM6)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_TIM_Base_MspInit+0x1f0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d117      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 8002298:	f043 0310 	orr.w	r3, r3, #16
 800229c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80022a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2036      	movs	r0, #54	; 0x36
 80022b4:	f001 fc51 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b8:	2036      	movs	r0, #54	; 0x36
 80022ba:	f001 fc68 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 80022be:	e01b      	b.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM7)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_TIM_Base_MspInit+0x1f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d116      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_TIM_Base_MspInit+0x1d8>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2037      	movs	r0, #55	; 0x37
 80022ee:	f001 fc34 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f2:	2037      	movs	r0, #55	; 0x37
 80022f4:	f001 fc4b 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3740      	adds	r7, #64	; 0x40
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	58024400 	.word	0x58024400
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800
 800230c:	58020c00 	.word	0x58020c00
 8002310:	40000c00 	.word	0x40000c00
 8002314:	58020000 	.word	0x58020000
 8002318:	40001000 	.word	0x40001000
 800231c:	40001400 	.word	0x40001400

08002320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d13f      	bne.n	80023c2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	4a41      	ldr	r2, [pc, #260]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800237e:	2320      	movs	r3, #32
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238e:	2301      	movs	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	482e      	ldr	r0, [pc, #184]	; (8002454 <HAL_TIM_MspPostInit+0x134>)
 800239a:	f002 f977 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800239e:	f640 4308 	movw	r3, #3080	; 0xc08
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	4827      	ldr	r0, [pc, #156]	; (8002458 <HAL_TIM_MspPostInit+0x138>)
 80023bc:	f002 f966 	bl	800468c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023c0:	e042      	b.n	8002448 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_TIM_MspPostInit+0x13c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d13d      	bne.n	8002448 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_TIM_MspPostInit+0x130>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002408:	23c0      	movs	r3, #192	; 0xc0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002418:	2302      	movs	r3, #2
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <HAL_TIM_MspPostInit+0x134>)
 8002424:	f002 f932 	bl	800468c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002428:	2303      	movs	r3, #3
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002438:	2302      	movs	r3, #2
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_TIM_MspPostInit+0x138>)
 8002444:	f002 f922 	bl	800468c <HAL_GPIO_Init>
}
 8002448:	bf00      	nop
 800244a:	3730      	adds	r7, #48	; 0x30
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400
 8002454:	58020000 	.word	0x58020000
 8002458:	58020400 	.word	0x58020400
 800245c:	40000400 	.word	0x40000400

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0ba      	sub	sp, #232	; 0xe8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	f107 0318 	add.w	r3, r7, #24
 800247c:	22bc      	movs	r2, #188	; 0xbc
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00a f9ed 	bl	800c860 <memset>
  if(huart->Instance==USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <HAL_UART_MspInit+0x118>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d16f      	bne.n	8002570 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002490:	2301      	movs	r3, #1
 8002492:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249a:	f107 0318 	add.w	r3, r7, #24
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 f9ea 	bl	8006878 <HAL_RCCEx_PeriphCLKConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024aa:	f7fe fff9 	bl	80014a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b4:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d2:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_UART_MspInit+0x11c>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002522:	2304      	movs	r3, #4
 8002524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800252c:	4619      	mov	r1, r3
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <HAL_UART_MspInit+0x120>)
 8002530:	f002 f8ac 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254e:	2307      	movs	r3, #7
 8002550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002558:	4619      	mov	r1, r3
 800255a:	480a      	ldr	r0, [pc, #40]	; (8002584 <HAL_UART_MspInit+0x124>)
 800255c:	f002 f896 	bl	800468c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2025      	movs	r0, #37	; 0x25
 8002566:	f001 faf8 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800256a:	2025      	movs	r0, #37	; 0x25
 800256c:	f001 fb0f 	bl	8003b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	37e8      	adds	r7, #232	; 0xe8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40011000 	.word	0x40011000
 800257c:	58024400 	.word	0x58024400
 8002580:	58020400 	.word	0x58020400
 8002584:	58020000 	.word	0x58020000

08002588 <set_speed>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4,
    uint32_t m5, uint32_t m6, uint32_t m7, uint32_t m8) {
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 8002596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m3;
 800259e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m5;
 80025a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m7;
 80025ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
//  TIM3->CCR1 = m2;
//  TIM3->CCR2 = m4;
//  TIM3->CCR3 = m6;
//  TIM3->CCR4 = m8;
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <NMI_Handler+0x4>

080025c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <HardFault_Handler+0x4>

080025ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <MemManage_Handler+0x4>

080025d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <BusFault_Handler+0x4>

080025da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <UsageFault_Handler+0x4>

080025e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260e:	f001 f979 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM4_IRQHandler+0x10>)
 800261e:	f006 f9a5 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000218 	.word	0x24000218

0800262c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <USART1_IRQHandler+0x10>)
 8002632:	f007 fd27 	bl	800a084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000348 	.word	0x24000348

08002640 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM5_IRQHandler+0x10>)
 8002646:	f006 f991 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000264 	.word	0x24000264

08002654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIM6_DAC_IRQHandler+0x10>)
 800265a:	f006 f987 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	240002b0 	.word	0x240002b0

08002668 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  fly();
 800266c:	f000 fa5c 	bl	8002b28 <fly>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM7_IRQHandler+0x14>)
 8002672:	f006 f97b 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	240002fc 	.word	0x240002fc

08002680 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002688:	2102      	movs	r1, #2
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <HAL_UART_TxCpltCallback+0x18>)
 800268c:	f002 f9df 	bl	8004a4e <HAL_GPIO_TogglePin>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	58020000 	.word	0x58020000

0800269c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80026a4:	2102      	movs	r1, #2
 80026a6:	4819      	ldr	r0, [pc, #100]	; (800270c <HAL_UART_RxCpltCallback+0x70>)
 80026a8:	f002 f9d1 	bl	8004a4e <HAL_GPIO_TogglePin>

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026c0:	ed93 6a03 	vldr	s12, [r3, #12]
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026c6:	edd3 5a04 	vldr	s11, [r3, #16]
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026cc:	ed93 5a05 	vldr	s10, [r3, #20]
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026d2:	edd3 4a06 	vldr	s9, [r3, #24]
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026d8:	edd3 3a07 	vldr	s7, [r3, #28]
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_UART_RxCpltCallback+0x74>)
 80026de:	ed93 4a08 	vldr	s8, [r3, #32]
 80026e2:	eeb0 3a64 	vmov.f32	s6, s9
 80026e6:	eef0 2a45 	vmov.f32	s5, s10
 80026ea:	eeb0 2a65 	vmov.f32	s4, s11
 80026ee:	eef0 1a46 	vmov.f32	s3, s12
 80026f2:	eeb0 1a66 	vmov.f32	s2, s13
 80026f6:	eef0 0a47 	vmov.f32	s1, s14
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	f7fe f887 	bl	8000810 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	58020000 	.word	0x58020000
 8002710:	24001924 	.word	0x24001924

08002714 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4aa5      	ldr	r2, [pc, #660]	; (80029b8 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f040 813b 	bne.w	800299e <HAL_TIM_IC_CaptureCallback+0x28a>
    switch (htim->Channel) {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f1b      	ldrb	r3, [r3, #28]
 800272c:	3b01      	subs	r3, #1
 800272e:	2b07      	cmp	r3, #7
 8002730:	f200 80e4 	bhi.w	80028fc <HAL_TIM_IC_CaptureCallback+0x1e8>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <HAL_TIM_IC_CaptureCallback+0x28>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	0800275d 	.word	0x0800275d
 8002740:	080027c9 	.word	0x080027c9
 8002744:	080028fd 	.word	0x080028fd
 8002748:	08002831 	.word	0x08002831
 800274c:	080028fd 	.word	0x080028fd
 8002750:	080028fd 	.word	0x080028fd
 8002754:	080028fd 	.word	0x080028fd
 8002758:	08002897 	.word	0x08002897
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 800275c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002760:	4896      	ldr	r0, [pc, #600]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002762:	f002 f943 	bl	80049ec <HAL_GPIO_ReadPin>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800276c:	2100      	movs	r1, #0
 800276e:	4894      	ldr	r0, [pc, #592]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002770:	f006 fcc4 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4b92      	ldr	r3, [pc, #584]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800277a:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 800277c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002780:	488e      	ldr	r0, [pc, #568]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002782:	f002 f933 	bl	80049ec <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 80b9 	bne.w	8002900 <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800278e:	2100      	movs	r1, #0
 8002790:	488b      	ldr	r0, [pc, #556]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002792:	f006 fcb3 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	4b8a      	ldr	r3, [pc, #552]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800279c:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 800279e:	4b89      	ldr	r3, [pc, #548]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	613b      	str	r3, [r7, #16]
          if (value >= 350 && value <= 850) { // [400, 798]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80027b0:	f2c0 80a6 	blt.w	8002900 <HAL_TIM_IC_CaptureCallback+0x1ec>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f240 3252 	movw	r2, #850	; 0x352
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f300 80a0 	bgt.w	8002900 <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[2] = value;
 80027c0:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 80027c6:	e09b      	b.n	8002900 <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 80027c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027cc:	487b      	ldr	r0, [pc, #492]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80027ce:	f002 f90d 	bl	80049ec <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IC_CaptureCallback+0xd4>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80027d8:	2104      	movs	r1, #4
 80027da:	4879      	ldr	r0, [pc, #484]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80027dc:	f006 fc8e 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027e6:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80027e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ec:	4873      	ldr	r0, [pc, #460]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80027ee:	f002 f8fd 	bl	80049ec <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 8085 	bne.w	8002904 <HAL_TIM_IC_CaptureCallback+0x1f0>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80027fa:	2104      	movs	r1, #4
 80027fc:	4870      	ldr	r0, [pc, #448]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80027fe:	f006 fc7d 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002808:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 800280a:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	4b6d      	ldr	r3, [pc, #436]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
          if (value >= 350 && value <= 850) {
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800281c:	db72      	blt.n	8002904 <HAL_TIM_IC_CaptureCallback+0x1f0>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f240 3252 	movw	r2, #850	; 0x352
 8002824:	4293      	cmp	r3, r2
 8002826:	dc6d      	bgt.n	8002904 <HAL_TIM_IC_CaptureCallback+0x1f0>
            pwm_in[5] = value;
 8002828:	4a66      	ldr	r2, [pc, #408]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 800282e:	e069      	b.n	8002904 <HAL_TIM_IC_CaptureCallback+0x1f0>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002834:	4861      	ldr	r0, [pc, #388]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002836:	f002 f8d9 	bl	80049ec <HAL_GPIO_ReadPin>
 800283a:	4603      	mov	r3, r0
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IC_CaptureCallback+0x13c>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002840:	2108      	movs	r1, #8
 8002842:	485f      	ldr	r0, [pc, #380]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002844:	f006 fc5a 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800284e:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002854:	4859      	ldr	r0, [pc, #356]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002856:	f002 f8c9 	bl	80049ec <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d153      	bne.n	8002908 <HAL_TIM_IC_CaptureCallback+0x1f4>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002860:	2108      	movs	r1, #8
 8002862:	4857      	ldr	r0, [pc, #348]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002864:	f006 fc4a 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800286e:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8002870:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	61bb      	str	r3, [r7, #24]
          if (value >= 350 && value <= 850) {
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002882:	db41      	blt.n	8002908 <HAL_TIM_IC_CaptureCallback+0x1f4>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f240 3252 	movw	r2, #850	; 0x352
 800288a:	4293      	cmp	r3, r2
 800288c:	dc3c      	bgt.n	8002908 <HAL_TIM_IC_CaptureCallback+0x1f4>
            pwm_in[8] = value;
 800288e:	4a4d      	ldr	r2, [pc, #308]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8002894:	e038      	b.n	8002908 <HAL_TIM_IC_CaptureCallback+0x1f4>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	4848      	ldr	r0, [pc, #288]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800289c:	f002 f8a6 	bl	80049ec <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_IC_CaptureCallback+0x1a2>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80028a6:	210c      	movs	r1, #12
 80028a8:	4845      	ldr	r0, [pc, #276]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80028aa:	f006 fc27 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80028b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ba:	4840      	ldr	r0, [pc, #256]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80028bc:	f002 f896 	bl	80049ec <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IC_CaptureCallback+0x1f8>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80028c6:	210c      	movs	r1, #12
 80028c8:	483d      	ldr	r0, [pc, #244]	; (80029c0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80028ca:	f006 fc17 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]
          if (value >= 350 && value <= 850) {
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80028e8:	db10      	blt.n	800290c <HAL_TIM_IC_CaptureCallback+0x1f8>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f240 3252 	movw	r2, #850	; 0x352
 80028f0:	4293      	cmp	r3, r2
 80028f2:	dc0b      	bgt.n	800290c <HAL_TIM_IC_CaptureCallback+0x1f8>
            pwm_in[11] = value;
 80028f4:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 80028fa:	e007      	b.n	800290c <HAL_TIM_IC_CaptureCallback+0x1f8>
      default:
        break;
 80028fc:	bf00      	nop
 80028fe:	e006      	b.n	800290e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002900:	bf00      	nop
 8002902:	e004      	b.n	800290e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 800290c:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - 400);
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	4829      	ldr	r0, [pc, #164]	; (80029c8 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002924:	f7fd feed 	bl	8000702 <average_filter_update>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[11] - 600);
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	4822      	ldr	r0, [pc, #136]	; (80029d0 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002948:	f7fd fedb 	bl	8000702 <average_filter_update>
 800294c:	eef0 7a40 	vmov.f32	s15, s0
 8002950:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[8] - 600);
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	481b      	ldr	r0, [pc, #108]	; (80029d8 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800296c:	f7fd fec9 	bl	8000702 <average_filter_update>
 8002970:	eef0 7a40 	vmov.f32	s15, s0
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002976:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[5] - 600);
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298a:	eeb0 0a67 	vmov.f32	s0, s15
 800298e:	4814      	ldr	r0, [pc, #80]	; (80029e0 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8002990:	f7fd feb7 	bl	8000702 <average_filter_update>
 8002994:	eef0 7a40 	vmov.f32	s15, s0
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 800299a:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	f040 80aa 	bne.w	8002afe <HAL_TIM_IC_CaptureCallback+0x3ea>
    switch (htim->Channel) {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7f1b      	ldrb	r3, [r3, #28]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d01c      	beq.n	80029ec <HAL_TIM_IC_CaptureCallback+0x2d8>
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d04b      	beq.n	8002a4e <HAL_TIM_IC_CaptureCallback+0x33a>
            pwm_in[17] = value;
          }
        }
        break;
      default:
        break;
 80029b6:	e07e      	b.n	8002ab6 <HAL_TIM_IC_CaptureCallback+0x3a2>
 80029b8:	40000800 	.word	0x40000800
 80029bc:	58020c00 	.word	0x58020c00
 80029c0:	24000218 	.word	0x24000218
 80029c4:	2400187c 	.word	0x2400187c
 80029c8:	240003d8 	.word	0x240003d8
 80029cc:	240018f4 	.word	0x240018f4
 80029d0:	24000574 	.word	0x24000574
 80029d4:	24001900 	.word	0x24001900
 80029d8:	24000710 	.word	0x24000710
 80029dc:	240018f8 	.word	0x240018f8
 80029e0:	240008ac 	.word	0x240008ac
 80029e4:	240018fc 	.word	0x240018fc
 80029e8:	40000c00 	.word	0x40000c00
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 80029ec:	2104      	movs	r1, #4
 80029ee:	4846      	ldr	r0, [pc, #280]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80029f0:	f001 fffc 	bl	80049ec <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_TIM_IC_CaptureCallback+0x2f6>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 80029fa:	2108      	movs	r1, #8
 80029fc:	4843      	ldr	r0, [pc, #268]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80029fe:	f006 fb7d 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	483e      	ldr	r0, [pc, #248]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002a0e:	f001 ffed 	bl	80049ec <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d14b      	bne.n	8002ab0 <HAL_TIM_IC_CaptureCallback+0x39c>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8002a18:	2108      	movs	r1, #8
 8002a1a:	483c      	ldr	r0, [pc, #240]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8002a1c:	f006 fb6e 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	60bb      	str	r3, [r7, #8]
          if (value >= 350 && value <= 850) { // [399, 799]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002a3a:	db39      	blt.n	8002ab0 <HAL_TIM_IC_CaptureCallback+0x39c>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f240 3252 	movw	r2, #850	; 0x352
 8002a42:	4293      	cmp	r3, r2
 8002a44:	dc34      	bgt.n	8002ab0 <HAL_TIM_IC_CaptureCallback+0x39c>
            pwm_in[14] = value;
 8002a46:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6393      	str	r3, [r2, #56]	; 0x38
        break;
 8002a4c:	e030      	b.n	8002ab0 <HAL_TIM_IC_CaptureCallback+0x39c>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 8002a4e:	2108      	movs	r1, #8
 8002a50:	482d      	ldr	r0, [pc, #180]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002a52:	f001 ffcb 	bl	80049ec <HAL_GPIO_ReadPin>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IC_CaptureCallback+0x358>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002a5c:	210c      	movs	r1, #12
 8002a5e:	482b      	ldr	r0, [pc, #172]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8002a60:	f006 fb4c 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	4826      	ldr	r0, [pc, #152]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002a70:	f001 ffbc 	bl	80049ec <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11c      	bne.n	8002ab4 <HAL_TIM_IC_CaptureCallback+0x3a0>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002a7a:	210c      	movs	r1, #12
 8002a7c:	4823      	ldr	r0, [pc, #140]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8002a7e:	f006 fb3d 	bl	80090fc <HAL_TIM_ReadCapturedValue>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	60fb      	str	r3, [r7, #12]
          if (value >= 350 && value <= 850) {
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002a9c:	db0a      	blt.n	8002ab4 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f240 3252 	movw	r2, #850	; 0x352
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	dc05      	bgt.n	8002ab4 <HAL_TIM_IC_CaptureCallback+0x3a0>
            pwm_in[17] = value;
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
        break;
 8002aae:	e001      	b.n	8002ab4 <HAL_TIM_IC_CaptureCallback+0x3a0>
        break;
 8002ab0:	bf00      	nop
 8002ab2:	e000      	b.n	8002ab6 <HAL_TIM_IC_CaptureCallback+0x3a2>
        break;
 8002ab4:	bf00      	nop
    }

    g_tune1 = average_filter_update(&g_af[4], pwm_in[14] - 400);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aca:	4812      	ldr	r0, [pc, #72]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0x400>)
 8002acc:	f7fd fe19 	bl	8000702 <average_filter_update>
 8002ad0:	eef0 7a40 	vmov.f32	s15, s0
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
    g_tune2 = average_filter_update(&g_af[5], pwm_in[17] - 400);
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	eeb0 0a67 	vmov.f32	s0, s15
 8002aee:	480b      	ldr	r0, [pc, #44]	; (8002b1c <HAL_TIM_IC_CaptureCallback+0x408>)
 8002af0:	f7fd fe07 	bl	8000702 <average_filter_update>
 8002af4:	eef0 7a40 	vmov.f32	s15, s0
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8002afa:	edc3 7a00 	vstr	s15, [r3]
  monitor[5] = g_I_yaw_period;
  monitor[6] = g_D_pitch_gain;
  monitor[7] = g_D_roll_gain;
  monitor[8] = g_D_yaw_gain;
#endif
}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	58020000 	.word	0x58020000
 8002b0c:	24000264 	.word	0x24000264
 8002b10:	2400187c 	.word	0x2400187c
 8002b14:	24000a48 	.word	0x24000a48
 8002b18:	24001904 	.word	0x24001904
 8002b1c:	24000be4 	.word	0x24000be4
 8002b20:	24001908 	.word	0x24001908
 8002b24:	00000000 	.word	0x00000000

08002b28 <fly>:

void fly() {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af04      	add	r7, sp, #16
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8002b2e:	4890      	ldr	r0, [pc, #576]	; (8002d70 <fly+0x248>)
 8002b30:	f7ff f8ae 	bl	8001c90 <MPU6050_update>
//  MS5611_update(&g_ms5611);

  float angle_x = g_mpu6050.angle_x;
 8002b34:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <fly+0x248>)
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 8002b3a:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <fly+0x248>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 8002b40:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <fly+0x248>)
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 8002b46:	4b8a      	ldr	r3, [pc, #552]	; (8002d70 <fly+0x248>)
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <fly+0x248>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 8002b52:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <fly+0x248>)
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	60fb      	str	r3, [r7, #12]

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 8002b58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b60:	4b84      	ldr	r3, [pc, #528]	; (8002d74 <fly+0x24c>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b6a:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002b6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b7a:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 8002b7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <fly+0x250>)
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b90:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002b94:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ba0:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 8002ba8:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <fly+0x254>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	d409      	bmi.n	8002bd0 <fly+0xa8>
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <fly+0x254>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	dd10      	ble.n	8002bf2 <fly+0xca>
    angle_error_z = g_yaw > 0 ? -0.2*g_yaw : -0.2*g_yaw;
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <fly+0x254>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bda:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002d68 <fly+0x240>
 8002bde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002be2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002be6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 8002bea:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <fly+0x248>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_tune1 < 100) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <fly+0x258>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	f200 84b5 	bhi.w	8003566 <fly+0xa3e>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <fly+0xdc>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002d05 	.word	0x08002d05
 8002c0c:	08003567 	.word	0x08003567
 8002c10:	08002ddd 	.word	0x08002ddd
 8002c14:	08003567 	.word	0x08003567
 8002c18:	08003429 	.word	0x08003429
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <fly+0x25c>)
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <fly+0x260>)
 8002c20:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8002c22:	4b5a      	ldr	r3, [pc, #360]	; (8002d8c <fly+0x264>)
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8002c2a:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <fly+0x268>)
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8002c32:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <fly+0x26c>)
 8002c34:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002c38:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8002c3a:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <fly+0x270>)
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <fly+0x260>)
 8002c3e:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 8002c40:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <fly+0x274>)
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <fly+0x278>)
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 8002c50:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <fly+0x27c>)
 8002c52:	4a55      	ldr	r2, [pc, #340]	; (8002da8 <fly+0x280>)
 8002c54:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8002c56:	4b55      	ldr	r3, [pc, #340]	; (8002dac <fly+0x284>)
 8002c58:	4a55      	ldr	r2, [pc, #340]	; (8002db0 <fly+0x288>)
 8002c5a:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <fly+0x28c>)
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8002c64:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <fly+0x290>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <fly+0x294>)
 8002c6e:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <fly+0x298>)
 8002c70:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED,
 8002c72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c9a:	f7ff fc75 	bl	8002588 <set_speed>
                INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <fly+0x29c>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d901      	bls.n	8002cb2 <fly+0x18a>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8002cae:	f000 bc5a 	b.w	8003566 <fly+0xa3e>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <fly+0x254>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002dc8 <fly+0x2a0>
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d901      	bls.n	8002cca <fly+0x1a2>
      break;
 8002cc6:	f000 bc4e 	b.w	8003566 <fly+0xa3e>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <fly+0x24c>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002dc8 <fly+0x2a0>
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d901      	bls.n	8002ce2 <fly+0x1ba>
      break;
 8002cde:	f000 bc42 	b.w	8003566 <fly+0xa3e>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <fly+0x250>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002dcc <fly+0x2a4>
 8002cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	da01      	bge.n	8002cfa <fly+0x1d2>
      break;
 8002cf6:	f000 bc36 	b.w	8003566 <fly+0xa3e>
        fly_mode = ready;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <fly+0x258>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
      break;
 8002d00:	f000 bc31 	b.w	8003566 <fly+0xa3e>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <fly+0x2a8>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <fly+0x2ac>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <fly+0x2b0>)
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED,
 8002d1c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002d20:	9303      	str	r3, [sp, #12]
 8002d22:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002d26:	9302      	str	r3, [sp, #8]
 8002d28:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002d38:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002d3c:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8002d40:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002d44:	f7ff fc20 	bl	8002588 <set_speed>
          MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);

      // Switch to fly mode
      if (g_throttle > 0) {
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <fly+0x29c>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	dc01      	bgt.n	8002d5c <fly+0x234>
        fly_mode = moving;
      }

      break;
 8002d58:	f000 bc05 	b.w	8003566 <fly+0xa3e>
        fly_mode = moving;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <fly+0x258>)
 8002d5e:	2203      	movs	r2, #3
 8002d60:	701a      	strb	r2, [r3, #0]
      break;
 8002d62:	f000 bc00 	b.w	8003566 <fly+0xa3e>
 8002d66:	bf00      	nop
 8002d68:	9999999a 	.word	0x9999999a
 8002d6c:	bfc99999 	.word	0xbfc99999
 8002d70:	240013f0 	.word	0x240013f0
 8002d74:	240018f8 	.word	0x240018f8
 8002d78:	240018fc 	.word	0x240018fc
 8002d7c:	24001900 	.word	0x24001900
 8002d80:	2400182a 	.word	0x2400182a
 8002d84:	24000000 	.word	0x24000000
 8002d88:	41200000 	.word	0x41200000
 8002d8c:	2400190c 	.word	0x2400190c
 8002d90:	24001910 	.word	0x24001910
 8002d94:	24000004 	.word	0x24000004
 8002d98:	24000008 	.word	0x24000008
 8002d9c:	24001914 	.word	0x24001914
 8002da0:	24001918 	.word	0x24001918
 8002da4:	2400000c 	.word	0x2400000c
 8002da8:	41100000 	.word	0x41100000
 8002dac:	24000010 	.word	0x24000010
 8002db0:	40e00000 	.word	0x40e00000
 8002db4:	2400191c 	.word	0x2400191c
 8002db8:	24001920 	.word	0x24001920
 8002dbc:	24000014 	.word	0x24000014
 8002dc0:	40a00000 	.word	0x40a00000
 8002dc4:	240018f4 	.word	0x240018f4
 8002dc8:	c3470000 	.word	0xc3470000
 8002dcc:	43470000 	.word	0x43470000
 8002dd0:	24001834 	.word	0x24001834
 8002dd4:	24001844 	.word	0x24001844
 8002dd8:	24001854 	.word	0x24001854
    case holding:

      break;
    case moving:
      g_P_pitch = limit(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8002ddc:	4bde      	ldr	r3, [pc, #888]	; (8003158 <fly+0x630>)
 8002dde:	ed93 7a00 	vldr	s14, [r3]
 8002de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	ed9f 1adc 	vldr	s2, [pc, #880]	; 800315c <fly+0x634>
 8002dee:	eddf 0adc 	vldr	s1, [pc, #880]	; 8003160 <fly+0x638>
 8002df2:	eeb0 0a67 	vmov.f32	s0, s15
 8002df6:	f7ff f863 	bl	8001ec0 <limit>
 8002dfa:	eef0 7a40 	vmov.f32	s15, s0
 8002dfe:	4bd9      	ldr	r3, [pc, #868]	; (8003164 <fly+0x63c>)
 8002e00:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8002e04:	4bd8      	ldr	r3, [pc, #864]	; (8003168 <fly+0x640>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e16:	ed9f 5bcc 	vldr	d5, [pc, #816]	; 8003148 <fly+0x620>
 8002e1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e26:	4bd0      	ldr	r3, [pc, #832]	; (8003168 <fly+0x640>)
 8002e28:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = limit(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8002e2c:	4bce      	ldr	r3, [pc, #824]	; (8003168 <fly+0x640>)
 8002e2e:	ed93 7a00 	vldr	s14, [r3]
 8002e32:	4bce      	ldr	r3, [pc, #824]	; (800316c <fly+0x644>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ed9f 6acd 	vldr	s12, [pc, #820]	; 8003170 <fly+0x648>
 8002e3c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002e40:	4bca      	ldr	r3, [pc, #808]	; (800316c <fly+0x644>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eddf 5acb 	vldr	s11, [pc, #812]	; 8003174 <fly+0x64c>
 8002e4a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002e4e:	eeb0 1a46 	vmov.f32	s2, s12
 8002e52:	eef0 0a66 	vmov.f32	s1, s13
 8002e56:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5a:	f7ff f831 	bl	8001ec0 <limit>
 8002e5e:	eef0 7a40 	vmov.f32	s15, s0
 8002e62:	4bc1      	ldr	r3, [pc, #772]	; (8003168 <fly+0x640>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8002e68:	4bbf      	ldr	r3, [pc, #764]	; (8003168 <fly+0x640>)
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	4bbf      	ldr	r3, [pc, #764]	; (800316c <fly+0x644>)
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	4bbf      	ldr	r3, [pc, #764]	; (8003178 <fly+0x650>)
 8002e7a:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = limit(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8002e7e:	4bbf      	ldr	r3, [pc, #764]	; (800317c <fly+0x654>)
 8002e80:	ed93 7a00 	vldr	s14, [r3]
 8002e84:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8c:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800315c <fly+0x634>
 8002e90:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8003160 <fly+0x638>
 8002e94:	eeb0 0a67 	vmov.f32	s0, s15
 8002e98:	f7ff f812 	bl	8001ec0 <limit>
 8002e9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ea0:	4bb7      	ldr	r3, [pc, #732]	; (8003180 <fly+0x658>)
 8002ea2:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = limit(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8002ea6:	4bb7      	ldr	r3, [pc, #732]	; (8003184 <fly+0x65c>)
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb4:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800315c <fly+0x634>
 8002eb8:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8003160 <fly+0x638>
 8002ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec0:	f7fe fffe 	bl	8001ec0 <limit>
 8002ec4:	eef0 7a40 	vmov.f32	s15, s0
 8002ec8:	4baf      	ldr	r3, [pc, #700]	; (8003188 <fly+0x660>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 8002ece:	4baf      	ldr	r3, [pc, #700]	; (800318c <fly+0x664>)
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002edc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ee0:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8003148 <fly+0x620>
 8002ee4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002eec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ef0:	4ba6      	ldr	r3, [pc, #664]	; (800318c <fly+0x664>)
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = limit(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8002ef6:	4ba5      	ldr	r3, [pc, #660]	; (800318c <fly+0x664>)
 8002ef8:	ed93 7a00 	vldr	s14, [r3]
 8002efc:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <fly+0x668>)
 8002efe:	edd3 7a00 	vldr	s15, [r3]
 8002f02:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 8003194 <fly+0x66c>
 8002f06:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002f0a:	4ba1      	ldr	r3, [pc, #644]	; (8003190 <fly+0x668>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eddf 5aa1 	vldr	s11, [pc, #644]	; 8003198 <fly+0x670>
 8002f14:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002f18:	eeb0 1a46 	vmov.f32	s2, s12
 8002f1c:	eef0 0a66 	vmov.f32	s1, s13
 8002f20:	eeb0 0a47 	vmov.f32	s0, s14
 8002f24:	f7fe ffcc 	bl	8001ec0 <limit>
 8002f28:	eef0 7a40 	vmov.f32	s15, s0
 8002f2c:	4b97      	ldr	r3, [pc, #604]	; (800318c <fly+0x664>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8002f32:	4b96      	ldr	r3, [pc, #600]	; (800318c <fly+0x664>)
 8002f34:	ed93 7a00 	vldr	s14, [r3]
 8002f38:	4b95      	ldr	r3, [pc, #596]	; (8003190 <fly+0x668>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	4b96      	ldr	r3, [pc, #600]	; (800319c <fly+0x674>)
 8002f44:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = limit(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8002f48:	4b95      	ldr	r3, [pc, #596]	; (80031a0 <fly+0x678>)
 8002f4a:	ed93 7a00 	vldr	s14, [r3]
 8002f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800315c <fly+0x634>
 8002f5a:	eddf 0a81 	vldr	s1, [pc, #516]	; 8003160 <fly+0x638>
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	f7fe ffad 	bl	8001ec0 <limit>
 8002f66:	eef0 7a40 	vmov.f32	s15, s0
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	; (80031a4 <fly+0x67c>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = limit(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8002f70:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <fly+0x680>)
 8002f72:	ed93 7a00 	vldr	s14, [r3]
 8002f76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 80031ac <fly+0x684>
 8002f82:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80031b0 <fly+0x688>
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	f7fe ff99 	bl	8001ec0 <limit>
 8002f8e:	eef0 7a40 	vmov.f32	s15, s0
 8002f92:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <fly+0x68c>)
 8002f94:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 8002f98:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <fly+0x690>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002fa2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002faa:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8003148 <fly+0x620>
 8002fae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002fb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <fly+0x690>)
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = limit(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8002fc0:	4b7d      	ldr	r3, [pc, #500]	; (80031b8 <fly+0x690>)
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	4b7d      	ldr	r3, [pc, #500]	; (80031bc <fly+0x694>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8003170 <fly+0x648>
 8002fd0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <fly+0x694>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003174 <fly+0x64c>
 8002fde:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002fe2:	eeb0 1a46 	vmov.f32	s2, s12
 8002fe6:	eef0 0a66 	vmov.f32	s1, s13
 8002fea:	eeb0 0a47 	vmov.f32	s0, s14
 8002fee:	f7fe ff67 	bl	8001ec0 <limit>
 8002ff2:	eef0 7a40 	vmov.f32	s15, s0
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <fly+0x690>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8002ffc:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <fly+0x690>)
 8002ffe:	ed93 7a00 	vldr	s14, [r3]
 8003002:	4b6e      	ldr	r3, [pc, #440]	; (80031bc <fly+0x694>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300c:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <fly+0x698>)
 800300e:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = limit(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <fly+0x69c>)
 8003014:	ed93 7a00 	vldr	s14, [r3]
 8003018:	edd7 7a03 	vldr	s15, [r7, #12]
 800301c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003020:	ed9f 1a62 	vldr	s2, [pc, #392]	; 80031ac <fly+0x684>
 8003024:	eddf 0a62 	vldr	s1, [pc, #392]	; 80031b0 <fly+0x688>
 8003028:	eeb0 0a67 	vmov.f32	s0, s15
 800302c:	f7fe ff48 	bl	8001ec0 <limit>
 8003030:	eef0 7a40 	vmov.f32	s15, s0
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <fly+0x6a0>)
 8003036:	edc3 7a00 	vstr	s15, [r3]

      int throttle = MIN_SPEED + (int)(70.0f*sqrt(g_throttle));
 800303a:	4b64      	ldr	r3, [pc, #400]	; (80031cc <fly+0x6a4>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003044:	eeb0 0b47 	vmov.f64	d0, d7
 8003048:	f00a fb82 	bl	800d750 <sqrt>
 800304c:	eeb0 7b40 	vmov.f64	d7, d0
 8003050:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003150 <fly+0x628>
 8003054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003058:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800305c:	ee17 3a90 	vmov	r3, s15
 8003060:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8003064:	603b      	str	r3, [r7, #0]

      g_sig1 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003070:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <fly+0x63c>)
 8003072:	edd3 6a00 	vldr	s13, [r3]
 8003076:	4b40      	ldr	r3, [pc, #256]	; (8003178 <fly+0x650>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <fly+0x658>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <fly+0x660>)
 8003090:	edd3 6a00 	vldr	s13, [r3]
 8003094:	4b41      	ldr	r3, [pc, #260]	; (800319c <fly+0x674>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <fly+0x67c>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <fly+0x68c>)
 80030ae:	edd3 6a00 	vldr	s13, [r3]
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <fly+0x698>)
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <fly+0x6a0>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <fly+0x6a8>)
 80030cc:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig3 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <fly+0x63c>)
 80030dc:	edd3 6a00 	vldr	s13, [r3]
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <fly+0x650>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <fly+0x658>)
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f8:	4b23      	ldr	r3, [pc, #140]	; (8003188 <fly+0x660>)
 80030fa:	edd3 6a00 	vldr	s13, [r3]
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <fly+0x674>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003108:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <fly+0x67c>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <fly+0x68c>)
 8003118:	edd3 6a00 	vldr	s13, [r3]
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <fly+0x698>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <fly+0x6a0>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <fly+0x6ac>)
 8003136:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig5 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	e04a      	b.n	80031d8 <fly+0x6b0>
 8003142:	bf00      	nop
 8003144:	f3af 8000 	nop.w
	...
 8003154:	40518000 	.word	0x40518000
 8003158:	24000000 	.word	0x24000000
 800315c:	44340000 	.word	0x44340000
 8003160:	c4340000 	.word	0xc4340000
 8003164:	2400182c 	.word	0x2400182c
 8003168:	24001834 	.word	0x24001834
 800316c:	2400190c 	.word	0x2400190c
 8003170:	c3700000 	.word	0xc3700000
 8003174:	43700000 	.word	0x43700000
 8003178:	24001830 	.word	0x24001830
 800317c:	24000004 	.word	0x24000004
 8003180:	24001838 	.word	0x24001838
 8003184:	24000008 	.word	0x24000008
 8003188:	2400183c 	.word	0x2400183c
 800318c:	24001844 	.word	0x24001844
 8003190:	24001914 	.word	0x24001914
 8003194:	c2f00000 	.word	0xc2f00000
 8003198:	42f00000 	.word	0x42f00000
 800319c:	24001840 	.word	0x24001840
 80031a0:	2400000c 	.word	0x2400000c
 80031a4:	24001848 	.word	0x24001848
 80031a8:	24000010 	.word	0x24000010
 80031ac:	43f00000 	.word	0x43f00000
 80031b0:	c3f00000 	.word	0xc3f00000
 80031b4:	2400184c 	.word	0x2400184c
 80031b8:	24001854 	.word	0x24001854
 80031bc:	2400191c 	.word	0x2400191c
 80031c0:	24001850 	.word	0x24001850
 80031c4:	24000014 	.word	0x24000014
 80031c8:	24001858 	.word	0x24001858
 80031cc:	240018f4 	.word	0x240018f4
 80031d0:	2400185c 	.word	0x2400185c
 80031d4:	24001864 	.word	0x24001864
 80031d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031dc:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <fly+0x8b4>)
 80031de:	edd3 6a00 	vldr	s13, [r3]
 80031e2:	4b7f      	ldr	r3, [pc, #508]	; (80033e0 <fly+0x8b8>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031ec:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <fly+0x8bc>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <fly+0x8c0>)
 80031fc:	edd3 6a00 	vldr	s13, [r3]
 8003200:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <fly+0x8c4>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800320a:	4b79      	ldr	r3, [pc, #484]	; (80033f0 <fly+0x8c8>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <fly+0x8cc>)
 800321a:	edd3 6a00 	vldr	s13, [r3]
 800321e:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <fly+0x8d0>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003228:	4b74      	ldr	r3, [pc, #464]	; (80033fc <fly+0x8d4>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003236:	4b72      	ldr	r3, [pc, #456]	; (8003400 <fly+0x8d8>)
 8003238:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig7 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <fly+0x8b4>)
 8003248:	edd3 6a00 	vldr	s13, [r3]
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <fly+0x8b8>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <fly+0x8bc>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <fly+0x8c0>)
 8003266:	edd3 6a00 	vldr	s13, [r3]
 800326a:	4b60      	ldr	r3, [pc, #384]	; (80033ec <fly+0x8c4>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003274:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <fly+0x8c8>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <fly+0x8cc>)
 8003284:	edd3 6a00 	vldr	s13, [r3]
 8003288:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <fly+0x8d0>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003292:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <fly+0x8d4>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	4b58      	ldr	r3, [pc, #352]	; (8003404 <fly+0x8dc>)
 80032a2:	edc3 7a00 	vstr	s15, [r3]
//      g_sig8 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 80032a6:	4b58      	ldr	r3, [pc, #352]	; (8003408 <fly+0x8e0>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800340c <fly+0x8e4>
 80032b0:	eddf 0a57 	vldr	s1, [pc, #348]	; 8003410 <fly+0x8e8>
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	f7fe fe02 	bl	8001ec0 <limit>
 80032bc:	eef0 7a40 	vmov.f32	s15, s0
 80032c0:	4b51      	ldr	r3, [pc, #324]	; (8003408 <fly+0x8e0>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 80032c6:	4b53      	ldr	r3, [pc, #332]	; (8003414 <fly+0x8ec>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800340c <fly+0x8e4>
 80032d0:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8003410 <fly+0x8e8>
 80032d4:	eeb0 0a67 	vmov.f32	s0, s15
 80032d8:	f7fe fdf2 	bl	8001ec0 <limit>
 80032dc:	eef0 7a40 	vmov.f32	s15, s0
 80032e0:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <fly+0x8ec>)
 80032e2:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
      g_sig5 = limit(g_sig5, MIN_SPEED, MAX_SPEED);
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <fly+0x8d8>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800340c <fly+0x8e4>
 80032f0:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003410 <fly+0x8e8>
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f7fe fde2 	bl	8001ec0 <limit>
 80032fc:	eef0 7a40 	vmov.f32	s15, s0
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <fly+0x8d8>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = limit(g_sig6, MIN_SPEED, MAX_SPEED);
      g_sig7 = limit(g_sig7, MIN_SPEED, MAX_SPEED);
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <fly+0x8dc>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 800340c <fly+0x8e4>
 8003310:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8003410 <fly+0x8e8>
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f7fe fdd2 	bl	8001ec0 <limit>
 800331c:	eef0 7a40 	vmov.f32	s15, s0
 8003320:	4b38      	ldr	r3, [pc, #224]	; (8003404 <fly+0x8dc>)
 8003322:	edc3 7a00 	vstr	s15, [r3]
//      g_sig8 = limit(g_sig8, MIN_SPEED, MAX_SPEED);

      set_speed(g_sig1, 0, g_sig3, 0, g_sig5, 0, g_sig7, 0);
 8003326:	4b38      	ldr	r3, [pc, #224]	; (8003408 <fly+0x8e0>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <fly+0x8ec>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800333a:	4b31      	ldr	r3, [pc, #196]	; (8003400 <fly+0x8d8>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003344:	ee17 2a90 	vmov	r2, s15
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <fly+0x8dc>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003352:	ee17 1a90 	vmov	r1, s15
 8003356:	2300      	movs	r3, #0
 8003358:	9303      	str	r3, [sp, #12]
 800335a:	9102      	str	r1, [sp, #8]
 800335c:	2300      	movs	r3, #0
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	ee16 2a90 	vmov	r2, s13
 8003368:	2100      	movs	r1, #0
 800336a:	ee17 0a10 	vmov	r0, s14
 800336e:	f7ff f90b 	bl	8002588 <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <fly+0x8f0>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d802      	bhi.n	8003388 <fly+0x860>
        fly_mode = init;
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <fly+0x8f4>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 8003388:	edd7 7a01 	vldr	s15, [r7, #4]
 800338c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003420 <fly+0x8f8>
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d41b      	bmi.n	80033d2 <fly+0x8aa>
 800339a:	edd7 7a01 	vldr	s15, [r7, #4]
 800339e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003424 <fly+0x8fc>
 80033a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	dc12      	bgt.n	80033d2 <fly+0x8aa>
 80033ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003420 <fly+0x8f8>
 80033b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	d409      	bmi.n	80033d2 <fly+0x8aa>
 80033be:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003424 <fly+0x8fc>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	dc00      	bgt.n	80033d2 <fly+0x8aa>
        fly_mode = init;
      }

      break;
 80033d0:	e0c9      	b.n	8003566 <fly+0xa3e>
        fly_mode = init;
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <fly+0x8f4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
      break;
 80033d8:	e0c5      	b.n	8003566 <fly+0xa3e>
 80033da:	bf00      	nop
 80033dc:	2400182c 	.word	0x2400182c
 80033e0:	24001830 	.word	0x24001830
 80033e4:	24001838 	.word	0x24001838
 80033e8:	2400183c 	.word	0x2400183c
 80033ec:	24001840 	.word	0x24001840
 80033f0:	24001848 	.word	0x24001848
 80033f4:	2400184c 	.word	0x2400184c
 80033f8:	24001850 	.word	0x24001850
 80033fc:	24001858 	.word	0x24001858
 8003400:	2400186c 	.word	0x2400186c
 8003404:	24001874 	.word	0x24001874
 8003408:	2400185c 	.word	0x2400185c
 800340c:	45960000 	.word	0x45960000
 8003410:	45160000 	.word	0x45160000
 8003414:	24001864 	.word	0x24001864
 8003418:	240018f4 	.word	0x240018f4
 800341c:	2400182a 	.word	0x2400182a
 8003420:	c2b40000 	.word	0xc2b40000
 8003424:	42b40000 	.word	0x42b40000
//      g_sig4 = MIN_SPEED - 100 + limit(5*g_yaw, 0, 4800);
//      g_sig5 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig6 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig7 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
//      g_sig8 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
      g_sig1 = limit(0 + 12*g_throttle, 2000, 4800);
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <fly+0xad8>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003436:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003604 <fly+0xadc>
 800343a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800343e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8003608 <fly+0xae0>
 8003442:	eddf 0a72 	vldr	s1, [pc, #456]	; 800360c <fly+0xae4>
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	f7fe fd39 	bl	8001ec0 <limit>
 800344e:	eef0 7a40 	vmov.f32	s15, s0
 8003452:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <fly+0xae8>)
 8003454:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig3 = limit(0 + 12*g_throttle, 2000, 4800);
 8003458:	4b69      	ldr	r3, [pc, #420]	; (8003600 <fly+0xad8>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003604 <fly+0xadc>
 800346a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800346e:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8003608 <fly+0xae0>
 8003472:	eddf 0a66 	vldr	s1, [pc, #408]	; 800360c <fly+0xae4>
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	f7fe fd21 	bl	8001ec0 <limit>
 800347e:	eef0 7a40 	vmov.f32	s15, s0
 8003482:	4b64      	ldr	r3, [pc, #400]	; (8003614 <fly+0xaec>)
 8003484:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig5 = limit(0 + 12*g_throttle, 2000, 4800);
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <fly+0xad8>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003496:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003604 <fly+0xadc>
 800349a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800349e:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8003608 <fly+0xae0>
 80034a2:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800360c <fly+0xae4>
 80034a6:	eeb0 0a67 	vmov.f32	s0, s15
 80034aa:	f7fe fd09 	bl	8001ec0 <limit>
 80034ae:	eef0 7a40 	vmov.f32	s15, s0
 80034b2:	4b59      	ldr	r3, [pc, #356]	; (8003618 <fly+0xaf0>)
 80034b4:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig7 = limit(0 + 12*g_throttle, 2000, 4800);
 80034b8:	4b51      	ldr	r3, [pc, #324]	; (8003600 <fly+0xad8>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80034c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003604 <fly+0xadc>
 80034ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ce:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8003608 <fly+0xae0>
 80034d2:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800360c <fly+0xae4>
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	f7fe fcf1 	bl	8001ec0 <limit>
 80034de:	eef0 7a40 	vmov.f32	s15, s0
 80034e2:	4b4e      	ldr	r3, [pc, #312]	; (800361c <fly+0xaf4>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
      // Pull down the stick to stop
//      if (g_throttle <= MIN_THROTTLE) {
//        fly_mode = init;
//      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4, g_sig5, g_sig6, g_sig7, g_sig8);
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <fly+0xae8>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80034f2:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <fly+0xaf8>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <fly+0xaec>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <fly+0xafc>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	eefc 5ae7 	vcvt.u32.f32	s11, s15
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <fly+0xaf0>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351a:	ee17 2a90 	vmov	r2, s15
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <fly+0xb00>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003528:	ee17 1a90 	vmov	r1, s15
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <fly+0xaf4>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003536:	ee17 0a90 	vmov	r0, s15
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <fly+0xb04>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	9303      	str	r3, [sp, #12]
 800354a:	9002      	str	r0, [sp, #8]
 800354c:	9101      	str	r1, [sp, #4]
 800354e:	9200      	str	r2, [sp, #0]
 8003550:	ee15 3a90 	vmov	r3, s11
 8003554:	ee16 2a10 	vmov	r2, s12
 8003558:	ee16 1a90 	vmov	r1, s13
 800355c:	ee17 0a10 	vmov	r0, s14
 8003560:	f7ff f812 	bl	8002588 <set_speed>
      break;
 8003564:	bf00      	nop
  monitor[7] = g_sig8;
  monitor[8] = g_sig8;
#endif

#if MONITOR == 6
  monitor[0] = g_mpu6050.ax;
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <fly+0xb08>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a32      	ldr	r2, [pc, #200]	; (8003634 <fly+0xb0c>)
 800356c:	6013      	str	r3, [r2, #0]
  monitor[1] = g_mpu6050.ay;
 800356e:	4b30      	ldr	r3, [pc, #192]	; (8003630 <fly+0xb08>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a30      	ldr	r2, [pc, #192]	; (8003634 <fly+0xb0c>)
 8003574:	6053      	str	r3, [r2, #4]
  monitor[2] = g_mpu6050.az;
 8003576:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <fly+0xb08>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <fly+0xb0c>)
 800357c:	6093      	str	r3, [r2, #8]
  monitor[3] = g_mpu6050.gx;
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <fly+0xb08>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <fly+0xb0c>)
 8003584:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_mpu6050.gy;
 8003586:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <fly+0xb08>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <fly+0xb0c>)
 800358c:	6113      	str	r3, [r2, #16]
  monitor[5] = g_mpu6050.gz;
 800358e:	4b28      	ldr	r3, [pc, #160]	; (8003630 <fly+0xb08>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a28      	ldr	r2, [pc, #160]	; (8003634 <fly+0xb0c>)
 8003594:	6153      	str	r3, [r2, #20]
  monitor[6] = ((float)g_ms5611.P/100.0f - 984)*1000;
 8003596:	4b28      	ldr	r3, [pc, #160]	; (8003638 <fly+0xb10>)
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800363c <fly+0xb14>
 80035a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035aa:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003640 <fly+0xb18>
 80035ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035b2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003644 <fly+0xb1c>
 80035b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <fly+0xb0c>)
 80035bc:	edc3 7a06 	vstr	s15, [r3, #24]
  monitor[7] = (g_ms5611.fast_pressure - 984)*1000;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <fly+0xb10>)
 80035c2:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 80035c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003640 <fly+0xb18>
 80035ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003644 <fly+0xb1c>
 80035d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <fly+0xb0c>)
 80035d8:	edc3 7a07 	vstr	s15, [r3, #28]
  monitor[8] = (g_ms5611.slow_pressure - 984)*1000;
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <fly+0xb10>)
 80035de:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80035e2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003640 <fly+0xb18>
 80035e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ea:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003644 <fly+0xb1c>
 80035ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <fly+0xb0c>)
 80035f4:	edc3 7a08 	vstr	s15, [r3, #32]
#endif
}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	240018f4 	.word	0x240018f4
 8003604:	00000000 	.word	0x00000000
 8003608:	45960000 	.word	0x45960000
 800360c:	44fa0000 	.word	0x44fa0000
 8003610:	2400185c 	.word	0x2400185c
 8003614:	24001864 	.word	0x24001864
 8003618:	2400186c 	.word	0x2400186c
 800361c:	24001874 	.word	0x24001874
 8003620:	24001860 	.word	0x24001860
 8003624:	24001868 	.word	0x24001868
 8003628:	24001870 	.word	0x24001870
 800362c:	24001878 	.word	0x24001878
 8003630:	240013f0 	.word	0x240013f0
 8003634:	24001924 	.word	0x24001924
 8003638:	24001520 	.word	0x24001520
 800363c:	42c80000 	.word	0x42c80000
 8003640:	44760000 	.word	0x44760000
 8003644:	447a0000 	.word	0x447a0000

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f009 f8c8 	bl	800c80c <__errno>
 800367c:	4603      	mov	r3, r0
 800367e:	220c      	movs	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	24080000 	.word	0x24080000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	24001948 	.word	0x24001948
 80036b0:	24001960 	.word	0x24001960

080036b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <SystemInit+0xec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <SystemInit+0xec>)
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <SystemInit+0xf0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d807      	bhi.n	80036e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036d4:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <SystemInit+0xf0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 030f 	bic.w	r3, r3, #15
 80036dc:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <SystemInit+0xf0>)
 80036de:	f043 0307 	orr.w	r3, r3, #7
 80036e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <SystemInit+0xf4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	; (80037a8 <SystemInit+0xf4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <SystemInit+0xf4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <SystemInit+0xf4>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	492b      	ldr	r1, [pc, #172]	; (80037a8 <SystemInit+0xf4>)
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <SystemInit+0xf8>)
 80036fe:	4013      	ands	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <SystemInit+0xf0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <SystemInit+0xf0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <SystemInit+0xf0>)
 8003718:	f043 0307 	orr.w	r3, r3, #7
 800371c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <SystemInit+0xf4>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <SystemInit+0xf4>)
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <SystemInit+0xf4>)
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <SystemInit+0xf4>)
 8003732:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <SystemInit+0xfc>)
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <SystemInit+0xf4>)
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <SystemInit+0x100>)
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <SystemInit+0xf4>)
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <SystemInit+0x104>)
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <SystemInit+0xf4>)
 8003744:	2200      	movs	r2, #0
 8003746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <SystemInit+0xf4>)
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <SystemInit+0x104>)
 800374c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <SystemInit+0xf4>)
 8003750:	2200      	movs	r2, #0
 8003752:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <SystemInit+0xf4>)
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <SystemInit+0x104>)
 8003758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <SystemInit+0xf4>)
 800375c:	2200      	movs	r2, #0
 800375e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <SystemInit+0xf4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <SystemInit+0xf4>)
 8003766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <SystemInit+0xf4>)
 800376e:	2200      	movs	r2, #0
 8003770:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <SystemInit+0x108>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <SystemInit+0x10c>)
 8003778:	4013      	ands	r3, r2
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377e:	d202      	bcs.n	8003786 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <SystemInit+0x110>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <SystemInit+0x114>)
 8003788:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800378c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <SystemInit+0xec>)
 8003790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003794:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00
 80037a4:	52002000 	.word	0x52002000
 80037a8:	58024400 	.word	0x58024400
 80037ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80037b0:	02020200 	.word	0x02020200
 80037b4:	01ff0000 	.word	0x01ff0000
 80037b8:	01010280 	.word	0x01010280
 80037bc:	5c001000 	.word	0x5c001000
 80037c0:	ffff0000 	.word	0xffff0000
 80037c4:	51008108 	.word	0x51008108
 80037c8:	52004000 	.word	0x52004000

080037cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003804 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037d0:	f7ff ff70 	bl	80036b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037d6:	e003      	b.n	80037e0 <LoopCopyDataInit>

080037d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80037da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037de:	3104      	adds	r1, #4

080037e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037e0:	480a      	ldr	r0, [pc, #40]	; (800380c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80037e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037e8:	d3f6      	bcc.n	80037d8 <CopyDataInit>
  ldr  r2, =_sbss
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80037ec:	e002      	b.n	80037f4 <LoopFillZerobss>

080037ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037f0:	f842 3b04 	str.w	r3, [r2], #4

080037f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80037f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037f8:	d3f9      	bcc.n	80037ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037fa:	f009 f80d 	bl	800c818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037fe:	f7fd f895 	bl	800092c <main>
  bx  lr    
 8003802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003804:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003808:	08010148 	.word	0x08010148
  ldr  r0, =_sdata
 800380c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003810:	2400008c 	.word	0x2400008c
  ldr  r2, =_sbss
 8003814:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 8003818:	24001960 	.word	0x24001960

0800381c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800381c:	e7fe      	b.n	800381c <ADC3_IRQHandler>
	...

08003820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003826:	2003      	movs	r0, #3
 8003828:	f000 f98c 	bl	8003b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800382c:	f002 fe4e 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_Init+0x68>)
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	4913      	ldr	r1, [pc, #76]	; (800388c <HAL_Init+0x6c>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
 8003848:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_Init+0x68>)
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_Init+0x6c>)
 8003854:	5cd3      	ldrb	r3, [r2, r3]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_Init+0x70>)
 8003862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003864:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <HAL_Init+0x74>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800386a:	2000      	movs	r0, #0
 800386c:	f000 f814 	bl	8003898 <HAL_InitTick>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e002      	b.n	8003880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800387a:	f7fe fb4b 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	58024400 	.word	0x58024400
 800388c:	0800e638 	.word	0x0800e638
 8003890:	2400001c 	.word	0x2400001c
 8003894:	24000018 	.word	0x24000018

08003898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_InitTick+0x60>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e021      	b.n	80038f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_InitTick+0x64>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_InitTick+0x60>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f971 	bl	8003baa <HAL_SYSTICK_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00e      	b.n	80038f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d80a      	bhi.n	80038ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e0:	f000 f93b 	bl	8003b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <HAL_InitTick+0x68>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	24000024 	.word	0x24000024
 80038fc:	24000018 	.word	0x24000018
 8003900:	24000020 	.word	0x24000020

08003904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x20>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_IncTick+0x24>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_IncTick+0x24>)
 8003916:	6013      	str	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	24000024 	.word	0x24000024
 8003928:	2400194c 	.word	0x2400194c

0800392c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return uwTick;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_GetTick+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2400194c 	.word	0x2400194c

08003944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff ffee 	bl	800392c <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d005      	beq.n	800396a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_Delay+0x44>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800396a:	bf00      	nop
 800396c:	f7ff ffde 	bl	800392c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d8f7      	bhi.n	800396c <HAL_Delay+0x28>
  {
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	24000024 	.word	0x24000024

0800398c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_GetREVID+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0c1b      	lsrs	r3, r3, #16
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	5c001000 	.word	0x5c001000

080039a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <__NVIC_SetPriorityGrouping+0x40>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c0:	4013      	ands	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <__NVIC_SetPriorityGrouping+0x44>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <__NVIC_SetPriorityGrouping+0x40>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	05fa0000 	.word	0x05fa0000

080039ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <__NVIC_GetPriorityGrouping+0x18>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	f003 0307 	and.w	r3, r3, #7
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	db0b      	blt.n	8003a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f003 021f 	and.w	r2, r3, #31
 8003a20:	4907      	ldr	r1, [pc, #28]	; (8003a40 <__NVIC_EnableIRQ+0x38>)
 8003a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2001      	movs	r0, #1
 8003a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000e100 	.word	0xe000e100

08003a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	6039      	str	r1, [r7, #0]
 8003a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db0a      	blt.n	8003a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <__NVIC_SetPriority+0x4c>)
 8003a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a62:	0112      	lsls	r2, r2, #4
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a6c:	e00a      	b.n	8003a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <__NVIC_SetPriority+0x50>)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	3b04      	subs	r3, #4
 8003a7c:	0112      	lsls	r2, r2, #4
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	440b      	add	r3, r1
 8003a82:	761a      	strb	r2, [r3, #24]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000e100 	.word	0xe000e100
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f1c3 0307 	rsb	r3, r3, #7
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	bf28      	it	cs
 8003ab6:	2304      	movcs	r3, #4
 8003ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d902      	bls.n	8003ac8 <NVIC_EncodePriority+0x30>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3b03      	subs	r3, #3
 8003ac6:	e000      	b.n	8003aca <NVIC_EncodePriority+0x32>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	401a      	ands	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	43d9      	mvns	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	4313      	orrs	r3, r2
         );
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b10:	d301      	bcc.n	8003b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b12:	2301      	movs	r3, #1
 8003b14:	e00f      	b.n	8003b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <SysTick_Config+0x40>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1e:	210f      	movs	r1, #15
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b24:	f7ff ff8e 	bl	8003a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <SysTick_Config+0x40>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <SysTick_Config+0x40>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000e010 	.word	0xe000e010

08003b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff29 	bl	80039a4 <__NVIC_SetPriorityGrouping>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b68:	f7ff ff40 	bl	80039ec <__NVIC_GetPriorityGrouping>
 8003b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f7ff ff90 	bl	8003a98 <NVIC_EncodePriority>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff5f 	bl	8003a44 <__NVIC_SetPriority>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff33 	bl	8003a08 <__NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffa4 	bl	8003b00 <SysTick_Config>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003bcc:	f7ff feae 	bl	800392c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e2dc      	b.n	8004196 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d008      	beq.n	8003bfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e2cd      	b.n	8004196 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_DMA_Abort+0x214>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a74      	ldr	r2, [pc, #464]	; (8003ddc <HAL_DMA_Abort+0x218>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_DMA_Abort+0x21c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a71      	ldr	r2, [pc, #452]	; (8003de4 <HAL_DMA_Abort+0x220>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a70      	ldr	r2, [pc, #448]	; (8003de8 <HAL_DMA_Abort+0x224>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6e      	ldr	r2, [pc, #440]	; (8003dec <HAL_DMA_Abort+0x228>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6d      	ldr	r2, [pc, #436]	; (8003df0 <HAL_DMA_Abort+0x22c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6b      	ldr	r2, [pc, #428]	; (8003df4 <HAL_DMA_Abort+0x230>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <HAL_DMA_Abort+0x234>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a68      	ldr	r2, [pc, #416]	; (8003dfc <HAL_DMA_Abort+0x238>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a67      	ldr	r2, [pc, #412]	; (8003e00 <HAL_DMA_Abort+0x23c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_DMA_Abort+0x240>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a64      	ldr	r2, [pc, #400]	; (8003e08 <HAL_DMA_Abort+0x244>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a62      	ldr	r2, [pc, #392]	; (8003e0c <HAL_DMA_Abort+0x248>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_DMA_Abort+0x24c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_Abort+0xd6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5f      	ldr	r2, [pc, #380]	; (8003e14 <HAL_DMA_Abort+0x250>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_Abort+0xda>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_Abort+0xdc>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 021e 	bic.w	r2, r2, #30
 8003cb2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e00a      	b.n	8003ce2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020e 	bic.w	r2, r2, #14
 8003cda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <HAL_DMA_Abort+0x214>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d072      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a3a      	ldr	r2, [pc, #232]	; (8003ddc <HAL_DMA_Abort+0x218>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d06d      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <HAL_DMA_Abort+0x21c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d068      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a37      	ldr	r2, [pc, #220]	; (8003de4 <HAL_DMA_Abort+0x220>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d063      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a36      	ldr	r2, [pc, #216]	; (8003de8 <HAL_DMA_Abort+0x224>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d05e      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a34      	ldr	r2, [pc, #208]	; (8003dec <HAL_DMA_Abort+0x228>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d059      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a33      	ldr	r2, [pc, #204]	; (8003df0 <HAL_DMA_Abort+0x22c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d054      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a31      	ldr	r2, [pc, #196]	; (8003df4 <HAL_DMA_Abort+0x230>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04f      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a30      	ldr	r2, [pc, #192]	; (8003df8 <HAL_DMA_Abort+0x234>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d04a      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <HAL_DMA_Abort+0x238>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d045      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <HAL_DMA_Abort+0x23c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d040      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_DMA_Abort+0x240>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d03b      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <HAL_DMA_Abort+0x244>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d036      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <HAL_DMA_Abort+0x248>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d031      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <HAL_DMA_Abort+0x24c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d02c      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <HAL_DMA_Abort+0x250>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d027      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <HAL_DMA_Abort+0x254>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_DMA_Abort+0x258>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_DMA_Abort+0x25c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_DMA_Abort+0x260>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_DMA_Abort+0x264>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_DMA_Abort+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_DMA_Abort+0x26c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_DMA_Abort+0x20e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_DMA_Abort+0x270>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d132      	bne.n	8003e38 <HAL_DMA_Abort+0x274>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e031      	b.n	8003e3a <HAL_DMA_Abort+0x276>
 8003dd6:	bf00      	nop
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	40020028 	.word	0x40020028
 8003de0:	40020040 	.word	0x40020040
 8003de4:	40020058 	.word	0x40020058
 8003de8:	40020070 	.word	0x40020070
 8003dec:	40020088 	.word	0x40020088
 8003df0:	400200a0 	.word	0x400200a0
 8003df4:	400200b8 	.word	0x400200b8
 8003df8:	40020410 	.word	0x40020410
 8003dfc:	40020428 	.word	0x40020428
 8003e00:	40020440 	.word	0x40020440
 8003e04:	40020458 	.word	0x40020458
 8003e08:	40020470 	.word	0x40020470
 8003e0c:	40020488 	.word	0x40020488
 8003e10:	400204a0 	.word	0x400204a0
 8003e14:	400204b8 	.word	0x400204b8
 8003e18:	58025408 	.word	0x58025408
 8003e1c:	5802541c 	.word	0x5802541c
 8003e20:	58025430 	.word	0x58025430
 8003e24:	58025444 	.word	0x58025444
 8003e28:	58025458 	.word	0x58025458
 8003e2c:	5802546c 	.word	0x5802546c
 8003e30:	58025480 	.word	0x58025480
 8003e34:	58025494 	.word	0x58025494
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6d      	ldr	r2, [pc, #436]	; (8004008 <HAL_DMA_Abort+0x444>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d04a      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6b      	ldr	r2, [pc, #428]	; (800400c <HAL_DMA_Abort+0x448>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d045      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6a      	ldr	r2, [pc, #424]	; (8004010 <HAL_DMA_Abort+0x44c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d040      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a68      	ldr	r2, [pc, #416]	; (8004014 <HAL_DMA_Abort+0x450>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d03b      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a67      	ldr	r2, [pc, #412]	; (8004018 <HAL_DMA_Abort+0x454>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d036      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a65      	ldr	r2, [pc, #404]	; (800401c <HAL_DMA_Abort+0x458>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d031      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a64      	ldr	r2, [pc, #400]	; (8004020 <HAL_DMA_Abort+0x45c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d02c      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a62      	ldr	r2, [pc, #392]	; (8004024 <HAL_DMA_Abort+0x460>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d027      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a61      	ldr	r2, [pc, #388]	; (8004028 <HAL_DMA_Abort+0x464>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5f      	ldr	r2, [pc, #380]	; (800402c <HAL_DMA_Abort+0x468>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01d      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5e      	ldr	r2, [pc, #376]	; (8004030 <HAL_DMA_Abort+0x46c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5c      	ldr	r2, [pc, #368]	; (8004034 <HAL_DMA_Abort+0x470>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5b      	ldr	r2, [pc, #364]	; (8004038 <HAL_DMA_Abort+0x474>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a59      	ldr	r2, [pc, #356]	; (800403c <HAL_DMA_Abort+0x478>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_DMA_Abort+0x47c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_DMA_Abort+0x32a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a56      	ldr	r2, [pc, #344]	; (8004044 <HAL_DMA_Abort+0x480>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <HAL_DMA_Abort+0x33c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e007      	b.n	8003f10 <HAL_DMA_Abort+0x34c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f10:	e013      	b.n	8003f3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f12:	f7ff fd0b 	bl	800392c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d90c      	bls.n	8003f3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e12d      	b.n	8004196 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e5      	bne.n	8003f12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <HAL_DMA_Abort+0x444>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2d      	ldr	r2, [pc, #180]	; (800400c <HAL_DMA_Abort+0x448>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <HAL_DMA_Abort+0x44c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <HAL_DMA_Abort+0x450>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a29      	ldr	r2, [pc, #164]	; (8004018 <HAL_DMA_Abort+0x454>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a27      	ldr	r2, [pc, #156]	; (800401c <HAL_DMA_Abort+0x458>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a26      	ldr	r2, [pc, #152]	; (8004020 <HAL_DMA_Abort+0x45c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a24      	ldr	r2, [pc, #144]	; (8004024 <HAL_DMA_Abort+0x460>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a23      	ldr	r2, [pc, #140]	; (8004028 <HAL_DMA_Abort+0x464>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a21      	ldr	r2, [pc, #132]	; (800402c <HAL_DMA_Abort+0x468>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_DMA_Abort+0x46c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_DMA_Abort+0x470>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_DMA_Abort+0x474>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_DMA_Abort+0x478>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <HAL_DMA_Abort+0x47c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_Abort+0x422>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_DMA_Abort+0x480>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_DMA_Abort+0x426>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_DMA_Abort+0x428>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02b      	beq.n	8004048 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	223f      	movs	r2, #63	; 0x3f
 8004000:	409a      	lsls	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	e02a      	b.n	800405e <HAL_DMA_Abort+0x49a>
 8004008:	40020010 	.word	0x40020010
 800400c:	40020028 	.word	0x40020028
 8004010:	40020040 	.word	0x40020040
 8004014:	40020058 	.word	0x40020058
 8004018:	40020070 	.word	0x40020070
 800401c:	40020088 	.word	0x40020088
 8004020:	400200a0 	.word	0x400200a0
 8004024:	400200b8 	.word	0x400200b8
 8004028:	40020410 	.word	0x40020410
 800402c:	40020428 	.word	0x40020428
 8004030:	40020440 	.word	0x40020440
 8004034:	40020458 	.word	0x40020458
 8004038:	40020470 	.word	0x40020470
 800403c:	40020488 	.word	0x40020488
 8004040:	400204a0 	.word	0x400204a0
 8004044:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2201      	movs	r2, #1
 8004058:	409a      	lsls	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_DMA_Abort+0x5dc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d072      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a4d      	ldr	r2, [pc, #308]	; (80041a4 <HAL_DMA_Abort+0x5e0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d06d      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4c      	ldr	r2, [pc, #304]	; (80041a8 <HAL_DMA_Abort+0x5e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d068      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <HAL_DMA_Abort+0x5e8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d063      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a49      	ldr	r2, [pc, #292]	; (80041b0 <HAL_DMA_Abort+0x5ec>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d05e      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a47      	ldr	r2, [pc, #284]	; (80041b4 <HAL_DMA_Abort+0x5f0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d059      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a46      	ldr	r2, [pc, #280]	; (80041b8 <HAL_DMA_Abort+0x5f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d054      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a44      	ldr	r2, [pc, #272]	; (80041bc <HAL_DMA_Abort+0x5f8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04f      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_DMA_Abort+0x5fc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <HAL_DMA_Abort+0x600>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <HAL_DMA_Abort+0x604>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3e      	ldr	r2, [pc, #248]	; (80041cc <HAL_DMA_Abort+0x608>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <HAL_DMA_Abort+0x60c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_DMA_Abort+0x610>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <HAL_DMA_Abort+0x614>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a38      	ldr	r2, [pc, #224]	; (80041dc <HAL_DMA_Abort+0x618>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <HAL_DMA_Abort+0x61c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a35      	ldr	r2, [pc, #212]	; (80041e4 <HAL_DMA_Abort+0x620>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a34      	ldr	r2, [pc, #208]	; (80041e8 <HAL_DMA_Abort+0x624>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a32      	ldr	r2, [pc, #200]	; (80041ec <HAL_DMA_Abort+0x628>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <HAL_DMA_Abort+0x62c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <HAL_DMA_Abort+0x630>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2e      	ldr	r2, [pc, #184]	; (80041f8 <HAL_DMA_Abort+0x634>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Abort+0x58a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <HAL_DMA_Abort+0x638>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_DMA_Abort+0x58e>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_DMA_Abort+0x590>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004160:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004178:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004182:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
 80041e0:	58025408 	.word	0x58025408
 80041e4:	5802541c 	.word	0x5802541c
 80041e8:	58025430 	.word	0x58025430
 80041ec:	58025444 	.word	0x58025444
 80041f0:	58025458 	.word	0x58025458
 80041f4:	5802546c 	.word	0x5802546c
 80041f8:	58025480 	.word	0x58025480
 80041fc:	58025494 	.word	0x58025494

08004200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e237      	b.n	8004682 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d004      	beq.n	8004228 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e22c      	b.n	8004682 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5c      	ldr	r2, [pc, #368]	; (80043a0 <HAL_DMA_Abort_IT+0x1a0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5b      	ldr	r2, [pc, #364]	; (80043a4 <HAL_DMA_Abort_IT+0x1a4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_DMA_Abort_IT+0x1a8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_DMA_Abort_IT+0x1ac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_DMA_Abort_IT+0x1b0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a53      	ldr	r2, [pc, #332]	; (80043b8 <HAL_DMA_Abort_IT+0x1b8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a52      	ldr	r2, [pc, #328]	; (80043bc <HAL_DMA_Abort_IT+0x1bc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a50      	ldr	r2, [pc, #320]	; (80043c0 <HAL_DMA_Abort_IT+0x1c0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <HAL_DMA_Abort_IT+0x1c4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4c      	ldr	r2, [pc, #304]	; (80043cc <HAL_DMA_Abort_IT+0x1cc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a4a      	ldr	r2, [pc, #296]	; (80043d0 <HAL_DMA_Abort_IT+0x1d0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a49      	ldr	r2, [pc, #292]	; (80043d4 <HAL_DMA_Abort_IT+0x1d4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a47      	ldr	r2, [pc, #284]	; (80043d8 <HAL_DMA_Abort_IT+0x1d8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_Abort_IT+0xc8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a46      	ldr	r2, [pc, #280]	; (80043dc <HAL_DMA_Abort_IT+0x1dc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_DMA_Abort_IT+0xcc>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_DMA_Abort_IT+0xce>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8086 	beq.w	80043e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2204      	movs	r2, #4
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <HAL_DMA_Abort_IT+0x1a0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d04a      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <HAL_DMA_Abort_IT+0x1a4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d045      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <HAL_DMA_Abort_IT+0x1a8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d040      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_DMA_Abort_IT+0x1ac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d03b      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_DMA_Abort_IT+0x1b0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d036      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d031      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_DMA_Abort_IT+0x1b8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02c      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <HAL_DMA_Abort_IT+0x1bc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d027      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_DMA_Abort_IT+0x1c0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <HAL_DMA_Abort_IT+0x1c4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_DMA_Abort_IT+0x1cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_DMA_Abort_IT+0x1d0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_DMA_Abort_IT+0x1d4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_DMA_Abort_IT+0x1d8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_DMA_Abort_IT+0x17c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_DMA_Abort_IT+0x1dc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <HAL_DMA_Abort_IT+0x18e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e178      	b.n	8004680 <HAL_DMA_Abort_IT+0x480>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e16f      	b.n	8004680 <HAL_DMA_Abort_IT+0x480>
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 020e 	bic.w	r2, r2, #14
 80043ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6c      	ldr	r2, [pc, #432]	; (80045a8 <HAL_DMA_Abort_IT+0x3a8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6b      	ldr	r2, [pc, #428]	; (80045ac <HAL_DMA_Abort_IT+0x3ac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a69      	ldr	r2, [pc, #420]	; (80045b0 <HAL_DMA_Abort_IT+0x3b0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a68      	ldr	r2, [pc, #416]	; (80045b4 <HAL_DMA_Abort_IT+0x3b4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a66      	ldr	r2, [pc, #408]	; (80045b8 <HAL_DMA_Abort_IT+0x3b8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a65      	ldr	r2, [pc, #404]	; (80045bc <HAL_DMA_Abort_IT+0x3bc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a63      	ldr	r2, [pc, #396]	; (80045c0 <HAL_DMA_Abort_IT+0x3c0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a62      	ldr	r2, [pc, #392]	; (80045c4 <HAL_DMA_Abort_IT+0x3c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a60      	ldr	r2, [pc, #384]	; (80045c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5f      	ldr	r2, [pc, #380]	; (80045cc <HAL_DMA_Abort_IT+0x3cc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_DMA_Abort_IT+0x3d0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5c      	ldr	r2, [pc, #368]	; (80045d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5a      	ldr	r2, [pc, #360]	; (80045d8 <HAL_DMA_Abort_IT+0x3d8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a59      	ldr	r2, [pc, #356]	; (80045dc <HAL_DMA_Abort_IT+0x3dc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_Abort_IT+0x290>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_DMA_Abort_IT+0x3e4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <HAL_DMA_Abort_IT+0x2a2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e007      	b.n	80044b2 <HAL_DMA_Abort_IT+0x2b2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DMA_Abort_IT+0x3a8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d072      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <HAL_DMA_Abort_IT+0x3ac>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d06d      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <HAL_DMA_Abort_IT+0x3b0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d068      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a37      	ldr	r2, [pc, #220]	; (80045b4 <HAL_DMA_Abort_IT+0x3b4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d063      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <HAL_DMA_Abort_IT+0x3b8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d05e      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a34      	ldr	r2, [pc, #208]	; (80045bc <HAL_DMA_Abort_IT+0x3bc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d059      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <HAL_DMA_Abort_IT+0x3c0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d054      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a31      	ldr	r2, [pc, #196]	; (80045c4 <HAL_DMA_Abort_IT+0x3c4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04f      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a30      	ldr	r2, [pc, #192]	; (80045c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <HAL_DMA_Abort_IT+0x3cc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2d      	ldr	r2, [pc, #180]	; (80045d0 <HAL_DMA_Abort_IT+0x3d0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2b      	ldr	r2, [pc, #172]	; (80045d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <HAL_DMA_Abort_IT+0x3d8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a28      	ldr	r2, [pc, #160]	; (80045dc <HAL_DMA_Abort_IT+0x3dc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_DMA_Abort_IT+0x3e4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <HAL_DMA_Abort_IT+0x3e8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_DMA_Abort_IT+0x3ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <HAL_DMA_Abort_IT+0x3f0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_DMA_Abort_IT+0x3f4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_DMA_Abort_IT+0x3f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_DMA_Abort_IT+0x3fc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_DMA_Abort_IT+0x400>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x3a2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <HAL_DMA_Abort_IT+0x404>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d132      	bne.n	8004608 <HAL_DMA_Abort_IT+0x408>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e031      	b.n	800460a <HAL_DMA_Abort_IT+0x40a>
 80045a6:	bf00      	nop
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	58025408 	.word	0x58025408
 80045ec:	5802541c 	.word	0x5802541c
 80045f0:	58025430 	.word	0x58025430
 80045f4:	58025444 	.word	0x58025444
 80045f8:	58025458 	.word	0x58025458
 80045fc:	5802546c 	.word	0x5802546c
 8004600:	58025480 	.word	0x58025480
 8004604:	58025494 	.word	0x58025494
 8004608:	2300      	movs	r3, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2201      	movs	r2, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800463c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004654:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800465e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <HAL_GPIO_Init+0x234>)
 800469c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800469e:	e194      	b.n	80049ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8186 	beq.w	80049c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_GPIO_Init+0x44>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d130      	bne.n	8004732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004706:	2201      	movs	r2, #1
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0201 	and.w	r2, r3, #1
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d017      	beq.n	800476e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d123      	bne.n	80047c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80e0 	beq.w	80049c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <HAL_GPIO_Init+0x238>)
 8004806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800480a:	4a2e      	ldr	r2, [pc, #184]	; (80048c4 <HAL_GPIO_Init+0x238>)
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004814:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_GPIO_Init+0x238>)
 8004816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004822:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <HAL_GPIO_Init+0x23c>)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	220f      	movs	r2, #15
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a20      	ldr	r2, [pc, #128]	; (80048cc <HAL_GPIO_Init+0x240>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d052      	beq.n	80048f4 <HAL_GPIO_Init+0x268>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <HAL_GPIO_Init+0x244>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_GPIO_Init+0x22e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_GPIO_Init+0x248>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <HAL_GPIO_Init+0x22a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <HAL_GPIO_Init+0x24c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d025      	beq.n	80048b2 <HAL_GPIO_Init+0x226>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_GPIO_Init+0x250>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <HAL_GPIO_Init+0x222>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_GPIO_Init+0x254>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x21e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <HAL_GPIO_Init+0x258>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x21a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <HAL_GPIO_Init+0x25c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x216>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <HAL_GPIO_Init+0x260>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x212>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <HAL_GPIO_Init+0x264>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x20e>
 8004896:	2309      	movs	r3, #9
 8004898:	e02d      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 800489a:	230a      	movs	r3, #10
 800489c:	e02b      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 800489e:	2308      	movs	r3, #8
 80048a0:	e029      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048a2:	2307      	movs	r3, #7
 80048a4:	e027      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048a6:	2306      	movs	r3, #6
 80048a8:	e025      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048aa:	2305      	movs	r3, #5
 80048ac:	e023      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048ae:	2304      	movs	r3, #4
 80048b0:	e021      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e01f      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e01d      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e01b      	b.n	80048f6 <HAL_GPIO_Init+0x26a>
 80048be:	bf00      	nop
 80048c0:	58000080 	.word	0x58000080
 80048c4:	58024400 	.word	0x58024400
 80048c8:	58000400 	.word	0x58000400
 80048cc:	58020000 	.word	0x58020000
 80048d0:	58020400 	.word	0x58020400
 80048d4:	58020800 	.word	0x58020800
 80048d8:	58020c00 	.word	0x58020c00
 80048dc:	58021000 	.word	0x58021000
 80048e0:	58021400 	.word	0x58021400
 80048e4:	58021800 	.word	0x58021800
 80048e8:	58021c00 	.word	0x58021c00
 80048ec:	58022000 	.word	0x58022000
 80048f0:	58022400 	.word	0x58022400
 80048f4:	2300      	movs	r3, #0
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	f002 0203 	and.w	r2, r2, #3
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	4093      	lsls	r3, r2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004906:	4938      	ldr	r1, [pc, #224]	; (80049e8 <HAL_GPIO_Init+0x35c>)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	3302      	adds	r3, #2
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800493a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f47f ae63 	bne.w	80046a0 <HAL_GPIO_Init+0x14>
  }
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	3724      	adds	r7, #36	; 0x24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	58000400 	.word	0x58000400

080049ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e001      	b.n	8004a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a2c:	787b      	ldrb	r3, [r7, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a60:	887a      	ldrh	r2, [r7, #2]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	041a      	lsls	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	43d9      	mvns	r1, r3
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	400b      	ands	r3, r1
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	619a      	str	r2, [r3, #24]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fa4c 	bl	8001f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e006      	b.n	8004b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d104      	bne.n	8004b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <HAL_I2C_Init+0x11c>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	02008000 	.word	0x02008000

08004ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 80da 	bne.w	8004d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2C_Master_Transmit+0x30>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0d3      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fe fea6 	bl	800392c <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2319      	movs	r3, #25
 8004be8:	2201      	movs	r2, #1
 8004bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fb62 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0be      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2221      	movs	r2, #33	; 0x21
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	893a      	ldrh	r2, [r7, #8]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2bff      	cmp	r3, #255	; 0xff
 8004c2e:	d90e      	bls.n	8004c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	22ff      	movs	r2, #255	; 0xff
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	8979      	ldrh	r1, [r7, #10]
 8004c3e:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fd58 	bl	80056fc <I2C_TransferConfig>
 8004c4c:	e06c      	b.n	8004d28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	8979      	ldrh	r1, [r7, #10]
 8004c60:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fd47 	bl	80056fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c6e:	e05b      	b.n	8004d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	6a39      	ldr	r1, [r7, #32]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fb5f 	bl	8005338 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e07b      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d034      	beq.n	8004d28 <HAL_I2C_Master_Transmit+0x184>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d130      	bne.n	8004d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 faf1 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e04d      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2bff      	cmp	r3, #255	; 0xff
 8004ce8:	d90e      	bls.n	8004d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fcfb 	bl	80056fc <I2C_TransferConfig>
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fcea 	bl	80056fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d19e      	bne.n	8004c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fb3e 	bl	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e01a      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	80002000 	.word	0x80002000
 8004d88:	fe00e800 	.word	0xfe00e800

08004d8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	460b      	mov	r3, r1
 8004d9a:	817b      	strh	r3, [r7, #10]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	f040 80db 	bne.w	8004f64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_I2C_Master_Receive+0x30>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e0d4      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fe fdb2 	bl	800392c <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2319      	movs	r3, #25
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fa6e 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0bf      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2222      	movs	r2, #34	; 0x22
 8004dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2210      	movs	r2, #16
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	893a      	ldrh	r2, [r7, #8]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2bff      	cmp	r3, #255	; 0xff
 8004e16:	d90e      	bls.n	8004e36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	8979      	ldrh	r1, [r7, #10]
 8004e26:	4b52      	ldr	r3, [pc, #328]	; (8004f70 <HAL_I2C_Master_Receive+0x1e4>)
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fc64 	bl	80056fc <I2C_TransferConfig>
 8004e34:	e06d      	b.n	8004f12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	8979      	ldrh	r1, [r7, #10]
 8004e48:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <HAL_I2C_Master_Receive+0x1e4>)
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fc53 	bl	80056fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004e56:	e05c      	b.n	8004f12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6a39      	ldr	r1, [r7, #32]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fae7 	bl	8005430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e07c      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d034      	beq.n	8004f12 <HAL_I2C_Master_Receive+0x186>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d130      	bne.n	8004f12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f9fc 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e04d      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2bff      	cmp	r3, #255	; 0xff
 8004ed2:	d90e      	bls.n	8004ef2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	; 0xff
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	8979      	ldrh	r1, [r7, #10]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fc06 	bl	80056fc <I2C_TransferConfig>
 8004ef0:	e00f      	b.n	8004f12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	2300      	movs	r3, #0
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fbf5 	bl	80056fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d19d      	bne.n	8004e58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	6a39      	ldr	r1, [r7, #32]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fa49 	bl	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e01a      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2220      	movs	r2, #32
 8004f36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <HAL_I2C_Master_Receive+0x1e8>)
 8004f44:	400b      	ands	r3, r1
 8004f46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	80002400 	.word	0x80002400
 8004f74:	fe00e800 	.word	0xfe00e800

08004f78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	f040 80fd 	bne.w	800519a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_I2C_Mem_Read+0x34>
 8004fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0f1      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Mem_Read+0x4e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0ea      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fce:	f7fe fcad 	bl	800392c <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2319      	movs	r3, #25
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f969 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0d5      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2222      	movs	r2, #34	; 0x22
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005018:	88f8      	ldrh	r0, [r7, #6]
 800501a:	893a      	ldrh	r2, [r7, #8]
 800501c:	8979      	ldrh	r1, [r7, #10]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4603      	mov	r3, r0
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8cd 	bl	80051c8 <I2C_RequestMemoryRead>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0ad      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2bff      	cmp	r3, #255	; 0xff
 8005048:	d90e      	bls.n	8005068 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	8979      	ldrh	r1, [r7, #10]
 8005058:	4b52      	ldr	r3, [pc, #328]	; (80051a4 <HAL_I2C_Mem_Read+0x22c>)
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fb4b 	bl	80056fc <I2C_TransferConfig>
 8005066:	e00f      	b.n	8005088 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	b2da      	uxtb	r2, r3
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <HAL_I2C_Mem_Read+0x22c>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fb3a 	bl	80056fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2200      	movs	r2, #0
 8005090:	2104      	movs	r1, #4
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f910 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07c      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d034      	beq.n	8005148 <HAL_I2C_Mem_Read+0x1d0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d130      	bne.n	8005148 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f8e1 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e04d      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2bff      	cmp	r3, #255	; 0xff
 8005108:	d90e      	bls.n	8005128 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	22ff      	movs	r2, #255	; 0xff
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	b2da      	uxtb	r2, r3
 8005116:	8979      	ldrh	r1, [r7, #10]
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 faeb 	bl	80056fc <I2C_TransferConfig>
 8005126:	e00f      	b.n	8005148 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	b2da      	uxtb	r2, r3
 8005138:	8979      	ldrh	r1, [r7, #10]
 800513a:	2300      	movs	r3, #0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fada 	bl	80056fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d19a      	bne.n	8005088 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f92e 	bl	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01a      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2220      	movs	r2, #32
 800516c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_I2C_Mem_Read+0x230>)
 800517a:	400b      	ands	r3, r1
 800517c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	80002400 	.word	0x80002400
 80051a8:	fe00e800 	.word	0xfe00e800

080051ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <I2C_RequestMemoryRead+0xa4>)
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa84 	bl	80056fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	69b9      	ldr	r1, [r7, #24]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f89d 	bl	8005338 <I2C_WaitOnTXISFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e02c      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
 8005218:	e015      	b.n	8005246 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	b29b      	uxth	r3, r3
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f883 	bl	8005338 <I2C_WaitOnTXISFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e012      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2200      	movs	r2, #0
 800524e:	2140      	movs	r1, #64	; 0x40
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f831 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	80002000 	.word	0x80002000

08005270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d007      	beq.n	80052ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	619a      	str	r2, [r3, #24]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c8:	e022      	b.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d0:	d01e      	beq.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fe fb2b 	bl	800392c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d113      	bne.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e00f      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d0cd      	beq.n	80052ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005344:	e02c      	b.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f8ea 	bl	8005524 <I2C_IsErrorOccurred>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e02a      	b.n	80053b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005360:	d01e      	beq.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fe fae3 	bl	800392c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d1cb      	bne.n	8005346 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053c4:	e028      	b.n	8005418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8aa 	bl	8005524 <I2C_IsErrorOccurred>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e026      	b.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fe faa7 	bl	800392c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d113      	bne.n	8005418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e007      	b.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	d1cf      	bne.n	80053c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800543c:	e064      	b.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f86e 	bl	8005524 <I2C_IsErrorOccurred>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e062      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b20      	cmp	r3, #32
 800545e:	d138      	bne.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b04      	cmp	r3, #4
 800546c:	d105      	bne.n	800547a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e04e      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d107      	bne.n	8005498 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2210      	movs	r2, #16
 800548e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2204      	movs	r2, #4
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
 8005496:	e002      	b.n	800549e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2220      	movs	r2, #32
 80054a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80054b2:	400b      	ands	r3, r1
 80054b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e022      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe fa2b 	bl	800392c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10f      	bne.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d193      	bne.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	fe00e800 	.word	0xfe00e800

08005524 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d075      	beq.n	800563c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2210      	movs	r2, #16
 8005556:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005558:	e056      	b.n	8005608 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005560:	d052      	beq.n	8005608 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe f9e3 	bl	800392c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_IsErrorOccurred+0x54>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d147      	bne.n	8005608 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800558a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d12e      	bne.n	80055fa <I2C_IsErrorOccurred+0xd6>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a2:	d02a      	beq.n	80055fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d027      	beq.n	80055fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055ba:	f7fe f9b7 	bl	800392c <HAL_GetTick>
 80055be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c0:	e01b      	b.n	80055fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055c2:	f7fe f9b3 	bl	800392c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b19      	cmp	r3, #25
 80055ce:	d914      	bls.n	80055fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b20      	cmp	r3, #32
 8005606:	d1dc      	bne.n	80055c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d003      	beq.n	800561e <I2C_IsErrorOccurred+0xfa>
 8005616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800561a:	2b00      	cmp	r3, #0
 800561c:	d09d      	beq.n	800555a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800561e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2220      	movs	r2, #32
 800562c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f043 0308 	orr.w	r3, r3, #8
 8005676:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f043 0302 	orr.w	r3, r3, #2
 8005698:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80056aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01c      	beq.n	80056ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff fddc 	bl	8005270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <I2C_IsErrorOccurred+0x1d4>)
 80056c4:	400b      	ands	r3, r1
 80056c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80056ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3728      	adds	r7, #40	; 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	fe00e800 	.word	0xfe00e800

080056fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	817b      	strh	r3, [r7, #10]
 800570a:	4613      	mov	r3, r2
 800570c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005714:	7a7b      	ldrb	r3, [r7, #9]
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800571c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	4313      	orrs	r3, r2
 8005726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800572a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	0d5b      	lsrs	r3, r3, #21
 8005736:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <I2C_TransferConfig+0x60>)
 800573c:	430b      	orrs	r3, r1
 800573e:	43db      	mvns	r3, r3
 8005740:	ea02 0103 	and.w	r1, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	03ff63ff 	.word	0x03ff63ff

08005760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b20      	cmp	r3, #32
 8005774:	d138      	bne.n	80057e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005780:	2302      	movs	r3, #2
 8005782:	e032      	b.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2224      	movs	r2, #36	; 0x24
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b20      	cmp	r3, #32
 800580a:	d139      	bne.n	8005880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005816:	2302      	movs	r3, #2
 8005818:	e033      	b.n	8005882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2224      	movs	r2, #36	; 0x24
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <HAL_PWREx_ConfigSupply+0x70>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d00a      	beq.n	80058ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058a4:	4b16      	ldr	r3, [pc, #88]	; (8005900 <HAL_PWREx_ConfigSupply+0x70>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d001      	beq.n	80058b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e01f      	b.n	80058f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e01d      	b.n	80058f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_PWREx_ConfigSupply+0x70>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 0207 	bic.w	r2, r3, #7
 80058c2:	490f      	ldr	r1, [pc, #60]	; (8005900 <HAL_PWREx_ConfigSupply+0x70>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058ca:	f7fe f82f 	bl	800392c <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058d0:	e009      	b.n	80058e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058d2:	f7fe f82b 	bl	800392c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058e0:	d901      	bls.n	80058e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_PWREx_ConfigSupply+0x70>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d1ee      	bne.n	80058d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	58024800 	.word	0x58024800

08005904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08c      	sub	sp, #48	; 0x30
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f000 bc1d 	b.w	8006152 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8087 	beq.w	8005a34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005926:	4b99      	ldr	r3, [pc, #612]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005930:	4b96      	ldr	r3, [pc, #600]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	2b10      	cmp	r3, #16
 800593a:	d007      	beq.n	800594c <HAL_RCC_OscConfig+0x48>
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b18      	cmp	r3, #24
 8005940:	d110      	bne.n	8005964 <HAL_RCC_OscConfig+0x60>
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b8f      	ldr	r3, [pc, #572]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d06c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x12e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d168      	bne.n	8005a32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e3f6      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x78>
 800596e:	4b87      	ldr	r3, [pc, #540]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a86      	ldr	r2, [pc, #536]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e02e      	b.n	80059da <HAL_RCC_OscConfig+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <HAL_RCC_OscConfig+0x9a>
 8005984:	4b81      	ldr	r3, [pc, #516]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a80      	ldr	r2, [pc, #512]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b7e      	ldr	r3, [pc, #504]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7d      	ldr	r2, [pc, #500]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e01d      	b.n	80059da <HAL_RCC_OscConfig+0xd6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCC_OscConfig+0xbe>
 80059a8:	4b78      	ldr	r3, [pc, #480]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a77      	ldr	r2, [pc, #476]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b75      	ldr	r3, [pc, #468]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a74      	ldr	r2, [pc, #464]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e00b      	b.n	80059da <HAL_RCC_OscConfig+0xd6>
 80059c2:	4b72      	ldr	r3, [pc, #456]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a71      	ldr	r2, [pc, #452]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6e      	ldr	r2, [pc, #440]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fd ffa3 	bl	800392c <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059ea:	f7fd ff9f 	bl	800392c <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b64      	cmp	r3, #100	; 0x64
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e3aa      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059fc:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0xe6>
 8005a08:	e014      	b.n	8005a34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fd ff8f 	bl	800392c <HAL_GetTick>
 8005a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a12:	f7fd ff8b 	bl	800392c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e396      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a24:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <HAL_RCC_OscConfig+0x10e>
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80cb 	beq.w	8005bd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a4c:	4b4f      	ldr	r3, [pc, #316]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_RCC_OscConfig+0x164>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b18      	cmp	r3, #24
 8005a5c:	d156      	bne.n	8005b0c <HAL_RCC_OscConfig+0x208>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d151      	bne.n	8005b0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a68:	4b48      	ldr	r3, [pc, #288]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x17c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e368      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a80:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f023 0219 	bic.w	r2, r3, #25
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	493f      	ldr	r1, [pc, #252]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a92:	f7fd ff4b 	bl	800392c <HAL_GetTick>
 8005a96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a9a:	f7fd ff47 	bl	800392c <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e352      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aac:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab8:	f7fd ff68 	bl	800398c <HAL_GetREVID>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d817      	bhi.n	8005af6 <HAL_RCC_OscConfig+0x1f2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1dc>
 8005ace:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ad6:	4a2d      	ldr	r2, [pc, #180]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005adc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ade:	e07b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	031b      	lsls	r3, r3, #12
 8005aee:	4927      	ldr	r1, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af4:	e070      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	4921      	ldr	r1, [pc, #132]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b0a:	e065      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d048      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 0219 	bic.w	r2, r3, #25
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	491a      	ldr	r1, [pc, #104]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b26:	f7fd ff01 	bl	800392c <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b2e:	f7fd fefd 	bl	800392c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e308      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4c:	f7fd ff1e 	bl	800398c <HAL_GetREVID>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d81a      	bhi.n	8005b90 <HAL_RCC_OscConfig+0x28c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d108      	bne.n	8005b74 <HAL_RCC_OscConfig+0x270>
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b70:	6053      	str	r3, [r2, #4]
 8005b72:	e031      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	4902      	ldr	r1, [pc, #8]	; (8005b8c <HAL_RCC_OscConfig+0x288>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
 8005b88:	e026      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	4b9a      	ldr	r3, [pc, #616]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	061b      	lsls	r3, r3, #24
 8005b9e:	4997      	ldr	r1, [pc, #604]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	604b      	str	r3, [r1, #4]
 8005ba4:	e018      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba6:	4b95      	ldr	r3, [pc, #596]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a94      	ldr	r2, [pc, #592]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fd febb 	bl	800392c <HAL_GetTick>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bba:	f7fd feb7 	bl	800392c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e2c2      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bcc:	4b8b      	ldr	r3, [pc, #556]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80a9 	beq.w	8005d38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be6:	4b85      	ldr	r3, [pc, #532]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bf0:	4b82      	ldr	r3, [pc, #520]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d007      	beq.n	8005c0c <HAL_RCC_OscConfig+0x308>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b18      	cmp	r3, #24
 8005c00:	d13a      	bne.n	8005c78 <HAL_RCC_OscConfig+0x374>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d135      	bne.n	8005c78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c0c:	4b7b      	ldr	r3, [pc, #492]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x320>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e296      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c24:	f7fd feb2 	bl	800398c <HAL_GetREVID>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d817      	bhi.n	8005c62 <HAL_RCC_OscConfig+0x35e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d108      	bne.n	8005c4c <HAL_RCC_OscConfig+0x348>
 8005c3a:	4b70      	ldr	r3, [pc, #448]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c42:	4a6e      	ldr	r2, [pc, #440]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c4a:	e075      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c4c:	4b6b      	ldr	r3, [pc, #428]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	069b      	lsls	r3, r3, #26
 8005c5a:	4968      	ldr	r1, [pc, #416]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c60:	e06a      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c62:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	4962      	ldr	r1, [pc, #392]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c76:	e05f      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d042      	beq.n	8005d06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c80:	4b5e      	ldr	r3, [pc, #376]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a5d      	ldr	r2, [pc, #372]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fd fe4e 	bl	800392c <HAL_GetTick>
 8005c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c94:	f7fd fe4a 	bl	800392c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e255      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ca6:	4b55      	ldr	r3, [pc, #340]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cb2:	f7fd fe6b 	bl	800398c <HAL_GetREVID>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d817      	bhi.n	8005cf0 <HAL_RCC_OscConfig+0x3ec>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d108      	bne.n	8005cda <HAL_RCC_OscConfig+0x3d6>
 8005cc8:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cd0:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd6:	6053      	str	r3, [r2, #4]
 8005cd8:	e02e      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
 8005cda:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	069b      	lsls	r3, r3, #26
 8005ce8:	4944      	ldr	r1, [pc, #272]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
 8005cee:	e023      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
 8005cf0:	4b42      	ldr	r3, [pc, #264]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	493f      	ldr	r1, [pc, #252]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60cb      	str	r3, [r1, #12]
 8005d04:	e018      	b.n	8005d38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d06:	4b3d      	ldr	r3, [pc, #244]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3c      	ldr	r2, [pc, #240]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fd fe0b 	bl	800392c <HAL_GetTick>
 8005d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d1a:	f7fd fe07 	bl	800392c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e212      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d2c:	4b33      	ldr	r3, [pc, #204]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f0      	bne.n	8005d1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d036      	beq.n	8005db2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d50:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fd fde8 	bl	800392c <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d60:	f7fd fde4 	bl	800392c <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1ef      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d72:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0x45c>
 8005d7e:	e018      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d80:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8c:	f7fd fdce 	bl	800392c <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d94:	f7fd fdca 	bl	800392c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e1d5      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d039      	beq.n	8005e32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a0c      	ldr	r2, [pc, #48]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dd2:	f7fd fdab 	bl	800392c <HAL_GetTick>
 8005dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005dda:	f7fd fda7 	bl	800392c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1b2      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x4d6>
 8005df8:	e01b      	b.n	8005e32 <HAL_RCC_OscConfig+0x52e>
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e00:	4b9b      	ldr	r3, [pc, #620]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a9a      	ldr	r2, [pc, #616]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e0c:	f7fd fd8e 	bl	800392c <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e14:	f7fd fd8a 	bl	800392c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e195      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e26:	4b92      	ldr	r3, [pc, #584]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8081 	beq.w	8005f42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e40:	4b8c      	ldr	r3, [pc, #560]	; (8006074 <HAL_RCC_OscConfig+0x770>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a8b      	ldr	r2, [pc, #556]	; (8006074 <HAL_RCC_OscConfig+0x770>)
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e4c:	f7fd fd6e 	bl	800392c <HAL_GetTick>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e54:	f7fd fd6a 	bl	800392c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e175      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e66:	4b83      	ldr	r3, [pc, #524]	; (8006074 <HAL_RCC_OscConfig+0x770>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d106      	bne.n	8005e88 <HAL_RCC_OscConfig+0x584>
 8005e7a:	4b7d      	ldr	r3, [pc, #500]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	4a7c      	ldr	r2, [pc, #496]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	6713      	str	r3, [r2, #112]	; 0x70
 8005e86:	e02d      	b.n	8005ee4 <HAL_RCC_OscConfig+0x5e0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10c      	bne.n	8005eaa <HAL_RCC_OscConfig+0x5a6>
 8005e90:	4b77      	ldr	r3, [pc, #476]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	4a76      	ldr	r2, [pc, #472]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9c:	4b74      	ldr	r3, [pc, #464]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	4a73      	ldr	r2, [pc, #460]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ea2:	f023 0304 	bic.w	r3, r3, #4
 8005ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea8:	e01c      	b.n	8005ee4 <HAL_RCC_OscConfig+0x5e0>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x5c8>
 8005eb2:	4b6f      	ldr	r3, [pc, #444]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	4a6e      	ldr	r2, [pc, #440]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ebe:	4b6c      	ldr	r3, [pc, #432]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a6b      	ldr	r2, [pc, #428]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x5e0>
 8005ecc:	4b68      	ldr	r3, [pc, #416]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a67      	ldr	r2, [pc, #412]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	4b65      	ldr	r3, [pc, #404]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a64      	ldr	r2, [pc, #400]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ede:	f023 0304 	bic.w	r3, r3, #4
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d015      	beq.n	8005f18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eec:	f7fd fd1e 	bl	800392c <HAL_GetTick>
 8005ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef2:	e00a      	b.n	8005f0a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef4:	f7fd fd1a 	bl	800392c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e123      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f0a:	4b59      	ldr	r3, [pc, #356]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0ee      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x5f0>
 8005f16:	e014      	b.n	8005f42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	f7fd fd08 	bl	800392c <HAL_GetTick>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f20:	f7fd fd04 	bl	800392c <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e10d      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f36:	4b4e      	ldr	r3, [pc, #312]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ee      	bne.n	8005f20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8102 	beq.w	8006150 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f4c:	4b48      	ldr	r3, [pc, #288]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f54:	2b18      	cmp	r3, #24
 8005f56:	f000 80bd 	beq.w	80060d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	f040 809e 	bne.w	80060a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f64:	4b42      	ldr	r3, [pc, #264]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fd fcdc 	bl	800392c <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f78:	f7fd fcd8 	bl	800392c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0e3      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f8a:	4b39      	ldr	r3, [pc, #228]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f96:	4b36      	ldr	r3, [pc, #216]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9a:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCC_OscConfig+0x774>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fa6:	0112      	lsls	r2, r2, #4
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	4931      	ldr	r1, [pc, #196]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	628b      	str	r3, [r1, #40]	; 0x28
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	025b      	lsls	r3, r3, #9
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fe0:	4923      	ldr	r1, [pc, #140]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005fe6:	4b22      	ldr	r3, [pc, #136]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	4a21      	ldr	r2, [pc, #132]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <HAL_RCC_OscConfig+0x778>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ffe:	00d2      	lsls	r2, r2, #3
 8006000:	491b      	ldr	r1, [pc, #108]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	f023 020c 	bic.w	r2, r3, #12
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4917      	ldr	r1, [pc, #92]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f023 0202 	bic.w	r2, r3, #2
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006024:	4912      	ldr	r1, [pc, #72]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	4a10      	ldr	r2, [pc, #64]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006036:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a0d      	ldr	r2, [pc, #52]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	4a07      	ldr	r2, [pc, #28]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a04      	ldr	r2, [pc, #16]	; (8006070 <HAL_RCC_OscConfig+0x76c>)
 8006060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fd fc61 	bl	800392c <HAL_GetTick>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800606c:	e011      	b.n	8006092 <HAL_RCC_OscConfig+0x78e>
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	58024800 	.word	0x58024800
 8006078:	fffffc0c 	.word	0xfffffc0c
 800607c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006080:	f7fd fc54 	bl	800392c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e05f      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006092:	4b32      	ldr	r3, [pc, #200]	; (800615c <HAL_RCC_OscConfig+0x858>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x77c>
 800609e:	e057      	b.n	8006150 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <HAL_RCC_OscConfig+0x858>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2d      	ldr	r2, [pc, #180]	; (800615c <HAL_RCC_OscConfig+0x858>)
 80060a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fd fc3e 	bl	800392c <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fd fc3a 	bl	800392c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e045      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060c6:	4b25      	ldr	r3, [pc, #148]	; (800615c <HAL_RCC_OscConfig+0x858>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x7b0>
 80060d2:	e03d      	b.n	8006150 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060d4:	4b21      	ldr	r3, [pc, #132]	; (800615c <HAL_RCC_OscConfig+0x858>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060da:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCC_OscConfig+0x858>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d031      	beq.n	800614c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f003 0203 	and.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d12a      	bne.n	800614c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d122      	bne.n	800614c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d11a      	bne.n	800614c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0a5b      	lsrs	r3, r3, #9
 800611a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006122:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d111      	bne.n	800614c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d108      	bne.n	800614c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0e1b      	lsrs	r3, r3, #24
 800613e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006148:	429a      	cmp	r2, r3
 800614a:	d001      	beq.n	8006150 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	58024400 	.word	0x58024400

08006160 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e19c      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006174:	4b8a      	ldr	r3, [pc, #552]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d910      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b87      	ldr	r3, [pc, #540]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 020f 	bic.w	r2, r3, #15
 800618a:	4985      	ldr	r1, [pc, #532]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b83      	ldr	r3, [pc, #524]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e184      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061bc:	429a      	cmp	r2, r3
 80061be:	d908      	bls.n	80061d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061c0:	4b78      	ldr	r3, [pc, #480]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4975      	ldr	r1, [pc, #468]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d010      	beq.n	8006200 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	4b70      	ldr	r3, [pc, #448]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d908      	bls.n	8006200 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061ee:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	496a      	ldr	r1, [pc, #424]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	4b64      	ldr	r3, [pc, #400]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006218:	429a      	cmp	r2, r3
 800621a:	d908      	bls.n	800622e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800621c:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	495e      	ldr	r1, [pc, #376]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800622a:	4313      	orrs	r3, r2
 800622c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	4b59      	ldr	r3, [pc, #356]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006246:	429a      	cmp	r2, r3
 8006248:	d908      	bls.n	800625c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800624a:	4b56      	ldr	r3, [pc, #344]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4953      	ldr	r1, [pc, #332]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006258:	4313      	orrs	r3, r2
 800625a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	4b4d      	ldr	r3, [pc, #308]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	429a      	cmp	r2, r3
 8006276:	d908      	bls.n	800628a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006278:	4b4a      	ldr	r3, [pc, #296]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f023 020f 	bic.w	r2, r3, #15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4947      	ldr	r1, [pc, #284]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006286:	4313      	orrs	r3, r2
 8006288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d055      	beq.n	8006342 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006296:	4b43      	ldr	r3, [pc, #268]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	4940      	ldr	r1, [pc, #256]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d107      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062b0:	4b3c      	ldr	r3, [pc, #240]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d121      	bne.n	8006300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0f6      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062c8:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d115      	bne.n	8006300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0ea      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d107      	bne.n	80062f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062e0:	4b30      	ldr	r3, [pc, #192]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0de      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062f0:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0d6      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006300:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f023 0207 	bic.w	r2, r3, #7
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4925      	ldr	r1, [pc, #148]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006312:	f7fd fb0b 	bl	800392c <HAL_GetTick>
 8006316:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006318:	e00a      	b.n	8006330 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631a:	f7fd fb07 	bl	800392c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	; 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e0be      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006330:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	429a      	cmp	r2, r3
 8006340:	d1eb      	bne.n	800631a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	429a      	cmp	r2, r3
 800635c:	d208      	bcs.n	8006370 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f023 020f 	bic.w	r2, r3, #15
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	490e      	ldr	r1, [pc, #56]	; (80063a4 <HAL_RCC_ClockConfig+0x244>)
 800636c:	4313      	orrs	r3, r2
 800636e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d214      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f023 020f 	bic.w	r2, r3, #15
 8006386:	4906      	ldr	r1, [pc, #24]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <HAL_RCC_ClockConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e086      	b.n	80064ae <HAL_RCC_ClockConfig+0x34e>
 80063a0:	52002000 	.word	0x52002000
 80063a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d010      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d208      	bcs.n	80063d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063c4:	4b3c      	ldr	r3, [pc, #240]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	4939      	ldr	r1, [pc, #228]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	4b34      	ldr	r3, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d208      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063f2:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	492e      	ldr	r1, [pc, #184]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006400:	4313      	orrs	r3, r2
 8006402:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641c:	429a      	cmp	r2, r3
 800641e:	d208      	bcs.n	8006432 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	4922      	ldr	r1, [pc, #136]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 800642e:	4313      	orrs	r3, r2
 8006430:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800644a:	429a      	cmp	r2, r3
 800644c:	d208      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	4917      	ldr	r1, [pc, #92]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 800645c:	4313      	orrs	r3, r2
 800645e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006460:	f000 f834 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	4912      	ldr	r1, [pc, #72]	; (80064bc <HAL_RCC_ClockConfig+0x35c>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800647e:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <HAL_RCC_ClockConfig+0x358>)
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <HAL_RCC_ClockConfig+0x35c>)
 8006488:	5cd3      	ldrb	r3, [r2, r3]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <HAL_RCC_ClockConfig+0x360>)
 8006496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006498:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <HAL_RCC_ClockConfig+0x364>)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <HAL_RCC_ClockConfig+0x368>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd f9f8 	bl	8003898 <HAL_InitTick>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
 80064bc:	0800e638 	.word	0x0800e638
 80064c0:	2400001c 	.word	0x2400001c
 80064c4:	24000018 	.word	0x24000018
 80064c8:	24000020 	.word	0x24000020

080064cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	; 0x24
 80064d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064d2:	4bb3      	ldr	r3, [pc, #716]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064da:	2b18      	cmp	r3, #24
 80064dc:	f200 8155 	bhi.w	800678a <HAL_RCC_GetSysClockFreq+0x2be>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800654d 	.word	0x0800654d
 80064ec:	0800678b 	.word	0x0800678b
 80064f0:	0800678b 	.word	0x0800678b
 80064f4:	0800678b 	.word	0x0800678b
 80064f8:	0800678b 	.word	0x0800678b
 80064fc:	0800678b 	.word	0x0800678b
 8006500:	0800678b 	.word	0x0800678b
 8006504:	0800678b 	.word	0x0800678b
 8006508:	08006573 	.word	0x08006573
 800650c:	0800678b 	.word	0x0800678b
 8006510:	0800678b 	.word	0x0800678b
 8006514:	0800678b 	.word	0x0800678b
 8006518:	0800678b 	.word	0x0800678b
 800651c:	0800678b 	.word	0x0800678b
 8006520:	0800678b 	.word	0x0800678b
 8006524:	0800678b 	.word	0x0800678b
 8006528:	08006579 	.word	0x08006579
 800652c:	0800678b 	.word	0x0800678b
 8006530:	0800678b 	.word	0x0800678b
 8006534:	0800678b 	.word	0x0800678b
 8006538:	0800678b 	.word	0x0800678b
 800653c:	0800678b 	.word	0x0800678b
 8006540:	0800678b 	.word	0x0800678b
 8006544:	0800678b 	.word	0x0800678b
 8006548:	0800657f 	.word	0x0800657f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654c:	4b94      	ldr	r3, [pc, #592]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006558:	4b91      	ldr	r3, [pc, #580]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	08db      	lsrs	r3, r3, #3
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	4a90      	ldr	r2, [pc, #576]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
 8006568:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800656a:	e111      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800656c:	4b8d      	ldr	r3, [pc, #564]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800656e:	61bb      	str	r3, [r7, #24]
    break;
 8006570:	e10e      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006572:	4b8d      	ldr	r3, [pc, #564]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006574:	61bb      	str	r3, [r7, #24]
    break;
 8006576:	e10b      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006578:	4b8c      	ldr	r3, [pc, #560]	; (80067ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800657a:	61bb      	str	r3, [r7, #24]
    break;
 800657c:	e108      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800657e:	4b88      	ldr	r3, [pc, #544]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006588:	4b85      	ldr	r3, [pc, #532]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	091b      	lsrs	r3, r3, #4
 800658e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006592:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006594:	4b82      	ldr	r3, [pc, #520]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800659e:	4b80      	ldr	r3, [pc, #512]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	08db      	lsrs	r3, r3, #3
 80065a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80e1 	beq.w	8006784 <HAL_RCC_GetSysClockFreq+0x2b8>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	f000 8083 	beq.w	80066d0 <HAL_RCC_GetSysClockFreq+0x204>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	f200 80a1 	bhi.w	8006714 <HAL_RCC_GetSysClockFreq+0x248>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x114>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d056      	beq.n	800668c <HAL_RCC_GetSysClockFreq+0x1c0>
 80065de:	e099      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e0:	4b6f      	ldr	r3, [pc, #444]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02d      	beq.n	8006648 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065ec:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	4a6b      	ldr	r2, [pc, #428]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006616:	4b62      	ldr	r3, [pc, #392]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006626:	ed97 6a02 	vldr	s12, [r7, #8]
 800662a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800662e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006646:	e087      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665a:	4b51      	ldr	r3, [pc, #324]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666a:	ed97 6a02 	vldr	s12, [r7, #8]
 800666e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800667e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800668a:	e065      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800669a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669e:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80066b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ce:	e043      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	4b2f      	ldr	r3, [pc, #188]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006712:	e021      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006726:	4b1e      	ldr	r3, [pc, #120]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006736:	ed97 6a02 	vldr	s12, [r7, #8]
 800673a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800673e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006756:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006758:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	0a5b      	lsrs	r3, r3, #9
 800675e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006762:	3301      	adds	r3, #1
 8006764:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006770:	edd7 6a07 	vldr	s13, [r7, #28]
 8006774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677c:	ee17 3a90 	vmov	r3, s15
 8006780:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006782:	e005      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]
    break;
 8006788:	e002      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800678c:	61bb      	str	r3, [r7, #24]
    break;
 800678e:	bf00      	nop
  }

  return sysclockfreq;
 8006790:	69bb      	ldr	r3, [r7, #24]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	58024400 	.word	0x58024400
 80067a4:	03d09000 	.word	0x03d09000
 80067a8:	003d0900 	.word	0x003d0900
 80067ac:	017d7840 	.word	0x017d7840
 80067b0:	46000000 	.word	0x46000000
 80067b4:	4c742400 	.word	0x4c742400
 80067b8:	4a742400 	.word	0x4a742400
 80067bc:	4bbebc20 	.word	0x4bbebc20

080067c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067c6:	f7ff fe81 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <HAL_RCC_GetHCLKFreq+0x50>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	490f      	ldr	r1, [pc, #60]	; (8006814 <HAL_RCC_GetHCLKFreq+0x54>)
 80067d8:	5ccb      	ldrb	r3, [r1, r3]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	fa22 f303 	lsr.w	r3, r2, r3
 80067e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <HAL_RCC_GetHCLKFreq+0x50>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	4a09      	ldr	r2, [pc, #36]	; (8006814 <HAL_RCC_GetHCLKFreq+0x54>)
 80067ee:	5cd3      	ldrb	r3, [r2, r3]
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	fa22 f303 	lsr.w	r3, r2, r3
 80067fa:	4a07      	ldr	r2, [pc, #28]	; (8006818 <HAL_RCC_GetHCLKFreq+0x58>)
 80067fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067fe:	4a07      	ldr	r2, [pc, #28]	; (800681c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <HAL_RCC_GetHCLKFreq+0x58>)
 8006806:	681b      	ldr	r3, [r3, #0]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	58024400 	.word	0x58024400
 8006814:	0800e638 	.word	0x0800e638
 8006818:	2400001c 	.word	0x2400001c
 800681c:	24000018 	.word	0x24000018

08006820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006824:	f7ff ffcc 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4904      	ldr	r1, [pc, #16]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	58024400 	.word	0x58024400
 8006848:	0800e638 	.word	0x0800e638

0800684c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006850:	f7ff ffb6 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4904      	ldr	r1, [pc, #16]	; (8006874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800686c:	4618      	mov	r0, r3
 800686e:	bd80      	pop	{r7, pc}
 8006870:	58024400 	.word	0x58024400
 8006874:	0800e638 	.word	0x0800e638

08006878 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006880:	2300      	movs	r3, #0
 8006882:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006884:	2300      	movs	r3, #0
 8006886:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d03f      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800689c:	d02a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800689e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068a2:	d824      	bhi.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a8:	d018      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ae:	d81e      	bhi.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b8:	d007      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068ba:	e018      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4ba3      	ldr	r3, [pc, #652]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	4aa2      	ldr	r2, [pc, #648]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068c8:	e015      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3304      	adds	r3, #4
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f9d5 	bl	8007c80 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068da:	e00c      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	2102      	movs	r1, #2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fa7e 	bl	8007de4 <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068ec:	e003      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
      break;
 80068f2:	e000      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80068f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068fc:	4b93      	ldr	r3, [pc, #588]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006908:	4990      	ldr	r1, [pc, #576]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	650b      	str	r3, [r1, #80]	; 0x50
 800690e:	e001      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03d      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	2b04      	cmp	r3, #4
 8006926:	d826      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006945 	.word	0x08006945
 8006934:	08006953 	.word	0x08006953
 8006938:	08006965 	.word	0x08006965
 800693c:	0800697d 	.word	0x0800697d
 8006940:	0800697d 	.word	0x0800697d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b81      	ldr	r3, [pc, #516]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a80      	ldr	r2, [pc, #512]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006950:	e015      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f001 f991 	bl	8007c80 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006962:	e00c      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fa3a 	bl	8007de4 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800697c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006984:	4b71      	ldr	r3, [pc, #452]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	f023 0207 	bic.w	r2, r3, #7
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	496e      	ldr	r1, [pc, #440]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006992:	4313      	orrs	r3, r2
 8006994:	650b      	str	r3, [r1, #80]	; 0x50
 8006996:	e001      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d042      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b0:	d02b      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	d825      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069b8:	2bc0      	cmp	r3, #192	; 0xc0
 80069ba:	d028      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069bc:	2bc0      	cmp	r3, #192	; 0xc0
 80069be:	d821      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d016      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	d81d      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80069cc:	2b40      	cmp	r3, #64	; 0x40
 80069ce:	d007      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80069d0:	e018      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d2:	4b5e      	ldr	r3, [pc, #376]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	4a5d      	ldr	r2, [pc, #372]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80069de:	e017      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f94a 	bl	8007c80 <RCCEx_PLL2_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80069f0:	e00e      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3324      	adds	r3, #36	; 0x24
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f9f3 	bl	8007de4 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a02:	e005      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
      break;
 8006a08:	e002      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a16:	4b4d      	ldr	r3, [pc, #308]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a22:	494a      	ldr	r1, [pc, #296]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	650b      	str	r3, [r1, #80]	; 0x50
 8006a28:	e001      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d049      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a44:	d030      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a4a:	d82a      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a50:	d02c      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006a52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a56:	d824      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a5c:	d018      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a62:	d81e      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a6c:	d007      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a6e:	e018      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a70:	4b36      	ldr	r3, [pc, #216]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	4a35      	ldr	r2, [pc, #212]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a7c:	e017      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f8fb 	bl	8007c80 <RCCEx_PLL2_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a8e:	e00e      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f9a4 	bl	8007de4 <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aa0:	e005      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006aa8:	bf00      	nop
 8006aaa:	e000      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ab4:	4b25      	ldr	r3, [pc, #148]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ac2:	4922      	ldr	r1, [pc, #136]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ac8:	e001      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ae4:	d030      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aea:	d82a      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006af0:	d02e      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006af2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006af6:	d824      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006afc:	d018      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b02:	d81e      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006b0e:	e018      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b1c:	e019      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f8ab 	bl	8007c80 <RCCEx_PLL2_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b2e:	e010      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f954 	bl	8007de4 <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b40:	e007      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
      break;
 8006b46:	e004      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006b48:	bf00      	nop
 8006b4a:	e002      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b4c:	58024400 	.word	0x58024400
      break;
 8006b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b58:	4b99      	ldr	r3, [pc, #612]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b66:	4996      	ldr	r1, [pc, #600]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	658b      	str	r3, [r1, #88]	; 0x58
 8006b6c:	e001      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d032      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	2b30      	cmp	r3, #48	; 0x30
 8006b84:	d01c      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006b86:	2b30      	cmp	r3, #48	; 0x30
 8006b88:	d817      	bhi.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d813      	bhi.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d10f      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9a:	4b89      	ldr	r3, [pc, #548]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a88      	ldr	r2, [pc, #544]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ba6:	e00e      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f866 	bl	8007c80 <RCCEx_PLL2_Config>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006bb8:	e005      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bcc:	4b7c      	ldr	r3, [pc, #496]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd8:	4979      	ldr	r1, [pc, #484]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bde:	e001      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d047      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf8:	d030      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bfe:	d82a      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c04:	d02c      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c0a:	d824      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c10:	d018      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c16:	d81e      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d007      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006c22:	e018      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c24:	4b66      	ldr	r3, [pc, #408]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c30:	e017      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 f821 	bl	8007c80 <RCCEx_PLL2_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c42:	e00e      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 f8ca 	bl	8007de4 <RCCEx_PLL3_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c54:	e005      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5a:	e002      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c68:	4b55      	ldr	r3, [pc, #340]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c74:	4952      	ldr	r1, [pc, #328]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	650b      	str	r3, [r1, #80]	; 0x50
 8006c7a:	e001      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d049      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c94:	d02e      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c9a:	d828      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ca0:	d02a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ca6:	d822      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cac:	d026      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cb2:	d81c      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cb8:	d010      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cbe:	d816      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01d      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc8:	d111      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 ffd5 	bl	8007c80 <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cda:	e012      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3324      	adds	r3, #36	; 0x24
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f87e 	bl	8007de4 <RCCEx_PLL3_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cec:	e009      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf2:	e006      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e004      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d08:	4b2d      	ldr	r3, [pc, #180]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d14:	492a      	ldr	r1, [pc, #168]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	650b      	str	r3, [r1, #80]	; 0x50
 8006d1a:	e001      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d04d      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d36:	d02e      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d3c:	d828      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d02a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d822      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d4e:	d026      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006d50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d54:	d81c      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5a:	d010      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d60:	d816      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01d      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6a:	d111      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ff84 	bl	8007c80 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d7c:	e012      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3324      	adds	r3, #36	; 0x24
 8006d82:	2101      	movs	r1, #1
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f82d 	bl	8007de4 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d8e:	e009      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	e006      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d96:	bf00      	nop
 8006d98:	e004      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006db8:	4901      	ldr	r1, [pc, #4]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	658b      	str	r3, [r1, #88]	; 0x58
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d02f      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ddc:	d00e      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de2:	d814      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dec:	d10f      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dee:	4baf      	ldr	r3, [pc, #700]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4aae      	ldr	r2, [pc, #696]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006dfa:	e00c      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 ff3c 	bl	8007c80 <RCCEx_PLL2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75fb      	strb	r3, [r7, #23]
      break;
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e1c:	4ba3      	ldr	r3, [pc, #652]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e28:	49a0      	ldr	r1, [pc, #640]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	650b      	str	r3, [r1, #80]	; 0x50
 8006e2e:	e001      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d032      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d81b      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e61 	.word	0x08006e61
 8006e58:	08006e6f 	.word	0x08006e6f
 8006e5c:	08006e87 	.word	0x08006e87
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b92      	ldr	r3, [pc, #584]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a91      	ldr	r2, [pc, #580]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e6c:	e00c      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	2102      	movs	r1, #2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 ff03 	bl	8007c80 <RCCEx_PLL2_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e8e:	4b87      	ldr	r3, [pc, #540]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	f023 0203 	bic.w	r2, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	4984      	ldr	r1, [pc, #528]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ea0:	e001      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8086 	beq.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eb4:	4b7e      	ldr	r3, [pc, #504]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7d      	ldr	r2, [pc, #500]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec0:	f7fc fd34 	bl	800392c <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec6:	e009      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec8:	f7fc fd30 	bl	800392c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b64      	cmp	r3, #100	; 0x64
 8006ed4:	d902      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	75fb      	strb	r3, [r7, #23]
        break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006edc:	4b74      	ldr	r3, [pc, #464]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ef      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d166      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006eee:	4b6f      	ldr	r3, [pc, #444]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef8:	4053      	eors	r3, r2
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d013      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f02:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f0c:	4b67      	ldr	r3, [pc, #412]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	4a66      	ldr	r2, [pc, #408]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f18:	4b64      	ldr	r3, [pc, #400]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	4a63      	ldr	r2, [pc, #396]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f24:	4a61      	ldr	r2, [pc, #388]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f34:	d115      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fc fcf9 	bl	800392c <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f3c:	e00b      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3e:	f7fc fcf5 	bl	800392c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d902      	bls.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	75fb      	strb	r3, [r7, #23]
            break;
 8006f54:	e005      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f56:	4b55      	ldr	r3, [pc, #340]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0ed      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d126      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d10d      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006f78:	4b4c      	ldr	r3, [pc, #304]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	0919      	lsrs	r1, r3, #4
 8006f88:	4b4a      	ldr	r3, [pc, #296]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	4947      	ldr	r1, [pc, #284]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]
 8006f92:	e005      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006f94:	4b45      	ldr	r3, [pc, #276]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	4a44      	ldr	r2, [pc, #272]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f9e:	6113      	str	r3, [r2, #16]
 8006fa0:	4b42      	ldr	r3, [pc, #264]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fae:	493f      	ldr	r1, [pc, #252]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	670b      	str	r3, [r1, #112]	; 0x70
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	75bb      	strb	r3, [r7, #22]
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8085 	beq.w	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd2:	2b28      	cmp	r3, #40	; 0x28
 8006fd4:	d866      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	080070b9 	.word	0x080070b9
 8006fe0:	080070a5 	.word	0x080070a5
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070a5 	.word	0x080070a5
 8006fec:	080070a5 	.word	0x080070a5
 8006ff0:	080070a5 	.word	0x080070a5
 8006ff4:	080070a5 	.word	0x080070a5
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	08007081 	.word	0x08007081
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070a5 	.word	0x080070a5
 8007008:	080070a5 	.word	0x080070a5
 800700c:	080070a5 	.word	0x080070a5
 8007010:	080070a5 	.word	0x080070a5
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070a5 	.word	0x080070a5
 800701c:	08007093 	.word	0x08007093
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080070a5 	.word	0x080070a5
 8007028:	080070a5 	.word	0x080070a5
 800702c:	080070a5 	.word	0x080070a5
 8007030:	080070a5 	.word	0x080070a5
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070a5 	.word	0x080070a5
 800703c:	080070b9 	.word	0x080070b9
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070a5 	.word	0x080070a5
 8007050:	080070a5 	.word	0x080070a5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070b9 	.word	0x080070b9
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070b9 	.word	0x080070b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fdfa 	bl	8007c80 <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007090:	e013      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3324      	adds	r3, #36	; 0x24
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fea3 	bl	8007de4 <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070a2:	e00a      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	e007      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	58024800 	.word	0x58024800
 80070b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80070b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070c0:	4b96      	ldr	r3, [pc, #600]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070cc:	4993      	ldr	r1, [pc, #588]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	654b      	str	r3, [r1, #84]	; 0x54
 80070d2:	e001      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d038      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d821      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007137 	.word	0x08007137
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	0800711f 	.word	0x0800711f
 8007100:	08007137 	.word	0x08007137
 8007104:	08007137 	.word	0x08007137
 8007108:	08007137 	.word	0x08007137
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	2101      	movs	r1, #1
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fdb4 	bl	8007c80 <RCCEx_PLL2_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800711c:	e00c      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3324      	adds	r3, #36	; 0x24
 8007122:	2101      	movs	r1, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fe5d 	bl	8007de4 <RCCEx_PLL3_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800712e:	e003      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	75fb      	strb	r3, [r7, #23]
      break;
 8007134:	e000      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800713e:	4b77      	ldr	r3, [pc, #476]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f023 0207 	bic.w	r2, r3, #7
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714a:	4974      	ldr	r1, [pc, #464]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800714c:	4313      	orrs	r3, r2
 800714e:	654b      	str	r3, [r1, #84]	; 0x54
 8007150:	e001      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d03a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007168:	2b05      	cmp	r3, #5
 800716a:	d821      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071b7 	.word	0x080071b7
 8007178:	0800718d 	.word	0x0800718d
 800717c:	0800719f 	.word	0x0800719f
 8007180:	080071b7 	.word	0x080071b7
 8007184:	080071b7 	.word	0x080071b7
 8007188:	080071b7 	.word	0x080071b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fd74 	bl	8007c80 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800719c:	e00c      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	2101      	movs	r1, #1
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fe1d 	bl	8007de4 <RCCEx_PLL3_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071ae:	e003      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e000      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80071b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071be:	4b57      	ldr	r3, [pc, #348]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f023 0207 	bic.w	r2, r3, #7
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	4953      	ldr	r1, [pc, #332]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	658b      	str	r3, [r1, #88]	; 0x58
 80071d2:	e001      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d04b      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071ee:	d02e      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80071f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071f4:	d828      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d02a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d822      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007206:	d026      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800720c:	d81c      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007212:	d010      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007218:	d816      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01d      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800721e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007222:	d111      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3304      	adds	r3, #4
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fd28 	bl	8007c80 <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007234:	e012      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3324      	adds	r3, #36	; 0x24
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fdd1 	bl	8007de4 <RCCEx_PLL3_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007246:	e009      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
      break;
 800724c:	e006      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800724e:	bf00      	nop
 8007250:	e004      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800725a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007270:	492a      	ldr	r1, [pc, #168]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007272:	4313      	orrs	r3, r2
 8007274:	654b      	str	r3, [r1, #84]	; 0x54
 8007276:	e001      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d04d      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800728e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007292:	d02e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007294:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007298:	d828      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729e:	d02a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d822      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072aa:	d026      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80072ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b6:	d010      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80072b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072bc:	d816      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01d      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80072c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c6:	d111      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fcd6 	bl	8007c80 <RCCEx_PLL2_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072d8:	e012      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3324      	adds	r3, #36	; 0x24
 80072de:	2102      	movs	r1, #2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fd7f 	bl	8007de4 <RCCEx_PLL3_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072ea:	e009      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
      break;
 80072f0:	e006      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072f2:	bf00      	nop
 80072f4:	e004      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072f6:	bf00      	nop
 80072f8:	e002      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007314:	4901      	ldr	r1, [pc, #4]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007316:	4313      	orrs	r3, r2
 8007318:	658b      	str	r3, [r1, #88]	; 0x58
 800731a:	e003      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800731c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732c:	2b00      	cmp	r3, #0
 800732e:	d04b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007336:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800733a:	d02e      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800733c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007340:	d828      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007346:	d02a      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d822      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800734e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007352:	d026      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007354:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007358:	d81c      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800735a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735e:	d010      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007364:	d816      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01d      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	d111      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fc82 	bl	8007c80 <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007380:	e012      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3324      	adds	r3, #36	; 0x24
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fd2b 	bl	8007de4 <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007392:	e009      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e006      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800739a:	bf00      	nop
 800739c:	e004      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800739e:	bf00      	nop
 80073a0:	e002      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073a2:	bf00      	nop
 80073a4:	e000      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073ae:	4b9d      	ldr	r3, [pc, #628]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073bc:	4999      	ldr	r1, [pc, #612]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	658b      	str	r3, [r1, #88]	; 0x58
 80073c2:	e001      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01a      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d10a      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	2102      	movs	r1, #2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fcfc 	bl	8007de4 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073f6:	4b8b      	ldr	r3, [pc, #556]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007404:	4987      	ldr	r1, [pc, #540]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007406:	4313      	orrs	r3, r2
 8007408:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800741c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007420:	d10a      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3324      	adds	r3, #36	; 0x24
 8007426:	2102      	movs	r1, #2
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fcdb 	bl	8007de4 <RCCEx_PLL3_Config>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007438:	4b7a      	ldr	r3, [pc, #488]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007446:	4977      	ldr	r1, [pc, #476]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007448:	4313      	orrs	r3, r2
 800744a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d034      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800745e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007462:	d01d      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007468:	d817      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800746e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007472:	d009      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007474:	e011      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fbff 	bl	8007c80 <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007486:	e00c      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3324      	adds	r3, #36	; 0x24
 800748c:	2102      	movs	r1, #2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fca8 	bl	8007de4 <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	75fb      	strb	r3, [r7, #23]
      break;
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80074a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a8:	4b5e      	ldr	r3, [pc, #376]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074b6:	495b      	ldr	r1, [pc, #364]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	658b      	str	r3, [r1, #88]	; 0x58
 80074bc:	e001      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d033      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074d8:	d01c      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80074da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074de:	d816      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80074e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e4:	d003      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80074e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ea:	d007      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80074ec:	e00f      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ee:	4b4d      	ldr	r3, [pc, #308]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	4a4c      	ldr	r2, [pc, #304]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80074fa:	e00c      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3324      	adds	r3, #36	; 0x24
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fc6e 	bl	8007de4 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]
      break;
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800751c:	4b41      	ldr	r3, [pc, #260]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800751e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	493e      	ldr	r1, [pc, #248]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800752c:	4313      	orrs	r3, r2
 800752e:	654b      	str	r3, [r1, #84]	; 0x54
 8007530:	e001      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d029      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800754a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754e:	d007      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007550:	e00f      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007552:	4b34      	ldr	r3, [pc, #208]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	4a33      	ldr	r2, [pc, #204]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800755c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800755e:	e00b      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	2102      	movs	r1, #2
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fb8a 	bl	8007c80 <RCCEx_PLL2_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007570:	e002      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	75fb      	strb	r3, [r7, #23]
      break;
 8007576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800757e:	4b29      	ldr	r3, [pc, #164]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	4926      	ldr	r1, [pc, #152]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800758c:	4313      	orrs	r3, r2
 800758e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007590:	e001      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3324      	adds	r3, #36	; 0x24
 80075a6:	2102      	movs	r1, #2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fc1b 	bl	8007de4 <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d033      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075cc:	d017      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80075ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d2:	d811      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d8:	d013      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80075da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075de:	d80b      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d010      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80075e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e8:	d106      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80075f6:	e007      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10c      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761a:	4902      	ldr	r1, [pc, #8]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800761c:	4313      	orrs	r3, r2
 800761e:	654b      	str	r3, [r1, #84]	; 0x54
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007622:	bf00      	nop
 8007624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007638:	4b31      	ldr	r3, [pc, #196]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	492e      	ldr	r1, [pc, #184]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007646:	4313      	orrs	r3, r2
 8007648:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007656:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007664:	4926      	ldr	r1, [pc, #152]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007676:	4b22      	ldr	r3, [pc, #136]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007682:	491f      	ldr	r1, [pc, #124]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007684:	4313      	orrs	r3, r2
 8007686:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00d      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800769a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800769e:	6113      	str	r3, [r2, #16]
 80076a0:	4b17      	ldr	r3, [pc, #92]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076aa:	4915      	ldr	r1, [pc, #84]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da08      	bge.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	490e      	ldr	r1, [pc, #56]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076d6:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	4906      	ldr	r1, [pc, #24]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80076ea:	7dbb      	ldrb	r3, [r7, #22]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e000      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400

08007704 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007708:	f7ff f85a 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	091b      	lsrs	r3, r3, #4
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4904      	ldr	r1, [pc, #16]	; (800772c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	0800e638 	.word	0x0800e638

08007730 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007730:	b480      	push	{r7}
 8007732:	b089      	sub	sp, #36	; 0x24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007738:	4ba1      	ldr	r3, [pc, #644]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007742:	4b9f      	ldr	r3, [pc, #636]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	0b1b      	lsrs	r3, r3, #12
 8007748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800774c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800774e:	4b9c      	ldr	r3, [pc, #624]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	091b      	lsrs	r3, r3, #4
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800775a:	4b99      	ldr	r3, [pc, #612]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	08db      	lsrs	r3, r3, #3
 8007760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8111 	beq.w	80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b02      	cmp	r3, #2
 8007782:	f000 8083 	beq.w	800788c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b02      	cmp	r3, #2
 800778a:	f200 80a1 	bhi.w	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d056      	beq.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800779a:	e099      	b.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800779c:	4b88      	ldr	r3, [pc, #544]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02d      	beq.n	8007804 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077a8:	4b85      	ldr	r3, [pc, #532]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	08db      	lsrs	r3, r3, #3
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	4a84      	ldr	r2, [pc, #528]	; (80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
 80077b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d2:	4b7b      	ldr	r3, [pc, #492]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007802:	e087      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b6a      	ldr	r3, [pc, #424]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007846:	e065      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800788a:	e043      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ce:	e021      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007912:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007914:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	0a5b      	lsrs	r3, r3, #9
 800791a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800792a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800792e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800793a:	ee17 2a90 	vmov	r2, s15
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007942:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800795c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007968:	ee17 2a90 	vmov	r2, s15
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007970:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	0e1b      	lsrs	r3, r3, #24
 8007976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800798a:	edd7 6a07 	vldr	s13, [r7, #28]
 800798e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007996:	ee17 2a90 	vmov	r2, s15
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	609a      	str	r2, [r3, #8]
}
 80079b2:	bf00      	nop
 80079b4:	3724      	adds	r7, #36	; 0x24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
 80079c4:	03d09000 	.word	0x03d09000
 80079c8:	46000000 	.word	0x46000000
 80079cc:	4c742400 	.word	0x4c742400
 80079d0:	4a742400 	.word	0x4a742400
 80079d4:	4bbebc20 	.word	0x4bbebc20

080079d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	; 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079e0:	4ba1      	ldr	r3, [pc, #644]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80079ea:	4b9f      	ldr	r3, [pc, #636]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	0d1b      	lsrs	r3, r3, #20
 80079f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80079f6:	4b9c      	ldr	r3, [pc, #624]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a02:	4b99      	ldr	r3, [pc, #612]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8111 	beq.w	8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f000 8083 	beq.w	8007b34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f200 80a1 	bhi.w	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d056      	beq.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a42:	e099      	b.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a44:	4b88      	ldr	r3, [pc, #544]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d02d      	beq.n	8007aac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a50:	4b85      	ldr	r3, [pc, #532]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	4a84      	ldr	r2, [pc, #528]	; (8007c6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007aaa:	e087      	b.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b6a      	ldr	r3, [pc, #424]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aee:	e065      	b.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b59      	ldr	r3, [pc, #356]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b32:	e043      	b.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b48      	ldr	r3, [pc, #288]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b76:	e021      	b.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 2a90 	vmov	r2, s15
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007bea:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	0c1b      	lsrs	r3, r3, #16
 8007bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c10:	ee17 2a90 	vmov	r2, s15
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c18:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3e:	ee17 2a90 	vmov	r2, s15
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c46:	e008      	b.n	8007c5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
}
 8007c5a:	bf00      	nop
 8007c5c:	3724      	adds	r7, #36	; 0x24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	03d09000 	.word	0x03d09000
 8007c70:	46000000 	.word	0x46000000
 8007c74:	4c742400 	.word	0x4c742400
 8007c78:	4a742400 	.word	0x4a742400
 8007c7c:	4bbebc20 	.word	0x4bbebc20

08007c80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c8e:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d101      	bne.n	8007c9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e099      	b.n	8007dd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c9e:	4b4f      	ldr	r3, [pc, #316]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4e      	ldr	r2, [pc, #312]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7fb fe3f 	bl	800392c <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007cb2:	f7fb fe3b 	bl	800392c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e086      	b.n	8007dd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cc4:	4b45      	ldr	r3, [pc, #276]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f0      	bne.n	8007cb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cd0:	4b42      	ldr	r3, [pc, #264]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	493f      	ldr	r1, [pc, #252]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	628b      	str	r3, [r1, #40]	; 0x28
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	025b      	lsls	r3, r3, #9
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	061b      	lsls	r3, r3, #24
 8007d10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d14:	4931      	ldr	r1, [pc, #196]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d1a:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	492d      	ldr	r1, [pc, #180]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	f023 0220 	bic.w	r2, r3, #32
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4928      	ldr	r1, [pc, #160]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d3e:	4b27      	ldr	r3, [pc, #156]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	4a26      	ldr	r2, [pc, #152]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d44:	f023 0310 	bic.w	r3, r3, #16
 8007d48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d4a:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <RCCEx_PLL2_Config+0x160>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	69d2      	ldr	r2, [r2, #28]
 8007d56:	00d2      	lsls	r2, r2, #3
 8007d58:	4920      	ldr	r1, [pc, #128]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	4a1e      	ldr	r2, [pc, #120]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d64:	f043 0310 	orr.w	r3, r3, #16
 8007d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d70:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d7c:	e00f      	b.n	8007d9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d84:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	4a14      	ldr	r2, [pc, #80]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d90:	e005      	b.n	8007d9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	4a11      	ldr	r2, [pc, #68]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a0e      	ldr	r2, [pc, #56]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007daa:	f7fb fdbf 	bl	800392c <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007db0:	e008      	b.n	8007dc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007db2:	f7fb fdbb 	bl	800392c <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <RCCEx_PLL2_Config+0x15c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	58024400 	.word	0x58024400
 8007de0:	ffff0007 	.word	0xffff0007

08007de4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007df2:	4b53      	ldr	r3, [pc, #332]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d101      	bne.n	8007e02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e099      	b.n	8007f36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e02:	4b4f      	ldr	r3, [pc, #316]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a4e      	ldr	r2, [pc, #312]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e0e:	f7fb fd8d 	bl	800392c <HAL_GetTick>
 8007e12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e14:	e008      	b.n	8007e28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e16:	f7fb fd89 	bl	800392c <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e086      	b.n	8007f36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e28:	4b45      	ldr	r3, [pc, #276]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f0      	bne.n	8007e16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e34:	4b42      	ldr	r3, [pc, #264]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	051b      	lsls	r3, r3, #20
 8007e42:	493f      	ldr	r1, [pc, #252]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	628b      	str	r3, [r1, #40]	; 0x28
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e78:	4931      	ldr	r1, [pc, #196]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e7e:	4b30      	ldr	r3, [pc, #192]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	492d      	ldr	r1, [pc, #180]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e90:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	4928      	ldr	r1, [pc, #160]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ea2:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	4a26      	ldr	r2, [pc, #152]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007eae:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb2:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <RCCEx_PLL3_Config+0x160>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	69d2      	ldr	r2, [r2, #28]
 8007eba:	00d2      	lsls	r2, r2, #3
 8007ebc:	4920      	ldr	r1, [pc, #128]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ec2:	4b1f      	ldr	r3, [pc, #124]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a19      	ldr	r2, [pc, #100]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ee0:	e00f      	b.n	8007f02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d106      	bne.n	8007ef6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007eee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ef4:	e005      	b.n	8007f02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a0e      	ldr	r2, [pc, #56]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f0e:	f7fb fd0d 	bl	800392c <HAL_GetTick>
 8007f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f14:	e008      	b.n	8007f28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f16:	f7fb fd09 	bl	800392c <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e006      	b.n	8007f36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <RCCEx_PLL3_Config+0x15c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0f0      	beq.n	8007f16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	58024400 	.word	0x58024400
 8007f44:	ffff0007 	.word	0xffff0007

08007f48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e0f1      	b.n	800813e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a78      	ldr	r2, [pc, #480]	; (8008148 <HAL_SPI_Init+0x200>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00f      	beq.n	8007f8a <HAL_SPI_Init+0x42>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a77      	ldr	r2, [pc, #476]	; (800814c <HAL_SPI_Init+0x204>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00a      	beq.n	8007f8a <HAL_SPI_Init+0x42>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a75      	ldr	r2, [pc, #468]	; (8008150 <HAL_SPI_Init+0x208>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d005      	beq.n	8007f8a <HAL_SPI_Init+0x42>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2b0f      	cmp	r3, #15
 8007f84:	d901      	bls.n	8007f8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e0d9      	b.n	800813e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f8e2 	bl	8008154 <SPI_GetPacketSize>
 8007f90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a6c      	ldr	r2, [pc, #432]	; (8008148 <HAL_SPI_Init+0x200>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00c      	beq.n	8007fb6 <HAL_SPI_Init+0x6e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a6a      	ldr	r2, [pc, #424]	; (800814c <HAL_SPI_Init+0x204>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <HAL_SPI_Init+0x6e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a69      	ldr	r2, [pc, #420]	; (8008150 <HAL_SPI_Init+0x208>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d002      	beq.n	8007fb6 <HAL_SPI_Init+0x6e>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b08      	cmp	r3, #8
 8007fb4:	d811      	bhi.n	8007fda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fba:	4a63      	ldr	r2, [pc, #396]	; (8008148 <HAL_SPI_Init+0x200>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d009      	beq.n	8007fd4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a61      	ldr	r2, [pc, #388]	; (800814c <HAL_SPI_Init+0x204>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d004      	beq.n	8007fd4 <HAL_SPI_Init+0x8c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a60      	ldr	r2, [pc, #384]	; (8008150 <HAL_SPI_Init+0x208>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d104      	bne.n	8007fde <HAL_SPI_Init+0x96>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d901      	bls.n	8007fde <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0af      	b.n	800813e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fa f80c 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800801a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008024:	d119      	bne.n	800805a <HAL_SPI_Init+0x112>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800802e:	d103      	bne.n	8008038 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10c      	bne.n	800805a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008048:	d107      	bne.n	800805a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008058:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69da      	ldr	r2, [r3, #28]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	431a      	orrs	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	ea42 0103 	orr.w	r1, r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ba:	ea42 0103 	orr.w	r1, r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d113      	bne.n	80080fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0201 	bic.w	r2, r2, #1
 8008108:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40013000 	.word	0x40013000
 800814c:	40003800 	.word	0x40003800
 8008150:	40003c00 	.word	0x40003c00

08008154 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	3307      	adds	r3, #7
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	fb02 f303 	mul.w	r3, r2, r3
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e049      	b.n	8008230 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7f9 ffb9 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2202      	movs	r2, #2
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f001 f803 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	d001      	beq.n	8008250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e054      	b.n	80082fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a26      	ldr	r2, [pc, #152]	; (8008308 <HAL_TIM_Base_Start_IT+0xd0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d022      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827a:	d01d      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a22      	ldr	r2, [pc, #136]	; (800830c <HAL_TIM_Base_Start_IT+0xd4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d018      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a21      	ldr	r2, [pc, #132]	; (8008310 <HAL_TIM_Base_Start_IT+0xd8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d013      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1f      	ldr	r2, [pc, #124]	; (8008314 <HAL_TIM_Base_Start_IT+0xdc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00e      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1e      	ldr	r2, [pc, #120]	; (8008318 <HAL_TIM_Base_Start_IT+0xe0>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d009      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1c      	ldr	r2, [pc, #112]	; (800831c <HAL_TIM_Base_Start_IT+0xe4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_TIM_Base_Start_IT+0x80>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1b      	ldr	r2, [pc, #108]	; (8008320 <HAL_TIM_Base_Start_IT+0xe8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d115      	bne.n	80082e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <HAL_TIM_Base_Start_IT+0xec>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b06      	cmp	r3, #6
 80082c8:	d015      	beq.n	80082f6 <HAL_TIM_Base_Start_IT+0xbe>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d0:	d011      	beq.n	80082f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0201 	orr.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e2:	e008      	b.n	80082f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e000      	b.n	80082f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40010000 	.word	0x40010000
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40010400 	.word	0x40010400
 800831c:	40001800 	.word	0x40001800
 8008320:	40014000 	.word	0x40014000
 8008324:	00010007 	.word	0x00010007

08008328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e049      	b.n	80083ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f841 	bl	80083d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f000 ff34 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d109      	bne.n	8008410 <HAL_TIM_PWM_Start+0x24>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	bf14      	ite	ne
 8008408:	2301      	movne	r3, #1
 800840a:	2300      	moveq	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	e03c      	b.n	800848a <HAL_TIM_PWM_Start+0x9e>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b04      	cmp	r3, #4
 8008414:	d109      	bne.n	800842a <HAL_TIM_PWM_Start+0x3e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b01      	cmp	r3, #1
 8008420:	bf14      	ite	ne
 8008422:	2301      	movne	r3, #1
 8008424:	2300      	moveq	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	e02f      	b.n	800848a <HAL_TIM_PWM_Start+0x9e>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b08      	cmp	r3, #8
 800842e:	d109      	bne.n	8008444 <HAL_TIM_PWM_Start+0x58>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b01      	cmp	r3, #1
 800843a:	bf14      	ite	ne
 800843c:	2301      	movne	r3, #1
 800843e:	2300      	moveq	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	e022      	b.n	800848a <HAL_TIM_PWM_Start+0x9e>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b0c      	cmp	r3, #12
 8008448:	d109      	bne.n	800845e <HAL_TIM_PWM_Start+0x72>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	bf14      	ite	ne
 8008456:	2301      	movne	r3, #1
 8008458:	2300      	moveq	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	e015      	b.n	800848a <HAL_TIM_PWM_Start+0x9e>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b10      	cmp	r3, #16
 8008462:	d109      	bne.n	8008478 <HAL_TIM_PWM_Start+0x8c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	bf14      	ite	ne
 8008470:	2301      	movne	r3, #1
 8008472:	2300      	moveq	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	e008      	b.n	800848a <HAL_TIM_PWM_Start+0x9e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e0a1      	b.n	80085d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <HAL_TIM_PWM_Start+0xb6>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084a0:	e023      	b.n	80084ea <HAL_TIM_PWM_Start+0xfe>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d104      	bne.n	80084b2 <HAL_TIM_PWM_Start+0xc6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b0:	e01b      	b.n	80084ea <HAL_TIM_PWM_Start+0xfe>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d104      	bne.n	80084c2 <HAL_TIM_PWM_Start+0xd6>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c0:	e013      	b.n	80084ea <HAL_TIM_PWM_Start+0xfe>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b0c      	cmp	r3, #12
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Start+0xe6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084d0:	e00b      	b.n	80084ea <HAL_TIM_PWM_Start+0xfe>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b10      	cmp	r3, #16
 80084d6:	d104      	bne.n	80084e2 <HAL_TIM_PWM_Start+0xf6>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e0:	e003      	b.n	80084ea <HAL_TIM_PWM_Start+0xfe>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2201      	movs	r2, #1
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fba6 	bl	8009c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a38      	ldr	r2, [pc, #224]	; (80085e0 <HAL_TIM_PWM_Start+0x1f4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_TIM_PWM_Start+0x13e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a37      	ldr	r2, [pc, #220]	; (80085e4 <HAL_TIM_PWM_Start+0x1f8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00e      	beq.n	800852a <HAL_TIM_PWM_Start+0x13e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a35      	ldr	r2, [pc, #212]	; (80085e8 <HAL_TIM_PWM_Start+0x1fc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d009      	beq.n	800852a <HAL_TIM_PWM_Start+0x13e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a34      	ldr	r2, [pc, #208]	; (80085ec <HAL_TIM_PWM_Start+0x200>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d004      	beq.n	800852a <HAL_TIM_PWM_Start+0x13e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a32      	ldr	r2, [pc, #200]	; (80085f0 <HAL_TIM_PWM_Start+0x204>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d101      	bne.n	800852e <HAL_TIM_PWM_Start+0x142>
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <HAL_TIM_PWM_Start+0x144>
 800852e:	2300      	movs	r3, #0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d007      	beq.n	8008544 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008542:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a25      	ldr	r2, [pc, #148]	; (80085e0 <HAL_TIM_PWM_Start+0x1f4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d022      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008556:	d01d      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a25      	ldr	r2, [pc, #148]	; (80085f4 <HAL_TIM_PWM_Start+0x208>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d018      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <HAL_TIM_PWM_Start+0x20c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d013      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a22      	ldr	r2, [pc, #136]	; (80085fc <HAL_TIM_PWM_Start+0x210>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00e      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <HAL_TIM_PWM_Start+0x1f8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d009      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <HAL_TIM_PWM_Start+0x214>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <HAL_TIM_PWM_Start+0x1a8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <HAL_TIM_PWM_Start+0x1fc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d115      	bne.n	80085c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <HAL_TIM_PWM_Start+0x218>)
 800859c:	4013      	ands	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d015      	beq.n	80085d2 <HAL_TIM_PWM_Start+0x1e6>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ac:	d011      	beq.n	80085d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0201 	orr.w	r2, r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085be:	e008      	b.n	80085d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e000      	b.n	80085d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800
 80085fc:	40000c00 	.word	0x40000c00
 8008600:	40001800 	.word	0x40001800
 8008604:	00010007 	.word	0x00010007

08008608 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e049      	b.n	80086ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f841 	bl	80086b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f000 fdc4 	bl	80091d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <HAL_TIM_IC_Start_IT+0x1e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	e023      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_IC_Start_IT+0x2e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	e01b      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d104      	bne.n	800870a <HAL_TIM_IC_Start_IT+0x3e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008706:	b2db      	uxtb	r3, r3
 8008708:	e013      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b0c      	cmp	r3, #12
 800870e:	d104      	bne.n	800871a <HAL_TIM_IC_Start_IT+0x4e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008716:	b2db      	uxtb	r3, r3
 8008718:	e00b      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b10      	cmp	r3, #16
 800871e:	d104      	bne.n	800872a <HAL_TIM_IC_Start_IT+0x5e>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008726:	b2db      	uxtb	r3, r3
 8008728:	e003      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x66>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008730:	b2db      	uxtb	r3, r3
 8008732:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <HAL_TIM_IC_Start_IT+0x78>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008740:	b2db      	uxtb	r3, r3
 8008742:	e013      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b04      	cmp	r3, #4
 8008748:	d104      	bne.n	8008754 <HAL_TIM_IC_Start_IT+0x88>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e00b      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b08      	cmp	r3, #8
 8008758:	d104      	bne.n	8008764 <HAL_TIM_IC_Start_IT+0x98>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008760:	b2db      	uxtb	r3, r3
 8008762:	e003      	b.n	800876c <HAL_TIM_IC_Start_IT+0xa0>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800876a:	b2db      	uxtb	r3, r3
 800876c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d102      	bne.n	800877a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008774:	7b7b      	ldrb	r3, [r7, #13]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e0e2      	b.n	8008944 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_TIM_IC_Start_IT+0xc2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800878c:	e023      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b04      	cmp	r3, #4
 8008792:	d104      	bne.n	800879e <HAL_TIM_IC_Start_IT+0xd2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800879c:	e01b      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_IC_Start_IT+0xe2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ac:	e013      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b0c      	cmp	r3, #12
 80087b2:	d104      	bne.n	80087be <HAL_TIM_IC_Start_IT+0xf2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087bc:	e00b      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_IC_Start_IT+0x102>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087cc:	e003      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x10a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x11a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e4:	e013      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d104      	bne.n	80087f6 <HAL_TIM_IC_Start_IT+0x12a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f4:	e00b      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d104      	bne.n	8008806 <HAL_TIM_IC_Start_IT+0x13a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008804:	e003      	b.n	800880e <HAL_TIM_IC_Start_IT+0x142>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b0c      	cmp	r3, #12
 8008812:	d841      	bhi.n	8008898 <HAL_TIM_IC_Start_IT+0x1cc>
 8008814:	a201      	add	r2, pc, #4	; (adr r2, 800881c <HAL_TIM_IC_Start_IT+0x150>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	08008851 	.word	0x08008851
 8008820:	08008899 	.word	0x08008899
 8008824:	08008899 	.word	0x08008899
 8008828:	08008899 	.word	0x08008899
 800882c:	08008863 	.word	0x08008863
 8008830:	08008899 	.word	0x08008899
 8008834:	08008899 	.word	0x08008899
 8008838:	08008899 	.word	0x08008899
 800883c:	08008875 	.word	0x08008875
 8008840:	08008899 	.word	0x08008899
 8008844:	08008899 	.word	0x08008899
 8008848:	08008899 	.word	0x08008899
 800884c:	08008887 	.word	0x08008887
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0202 	orr.w	r2, r2, #2
 800885e:	60da      	str	r2, [r3, #12]
      break;
 8008860:	e01d      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0204 	orr.w	r2, r2, #4
 8008870:	60da      	str	r2, [r3, #12]
      break;
 8008872:	e014      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	60da      	str	r2, [r3, #12]
      break;
 8008884:	e00b      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0210 	orr.w	r2, r2, #16
 8008894:	60da      	str	r2, [r3, #12]
      break;
 8008896:	e002      	b.n	800889e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
      break;
 800889c:	bf00      	nop
  }

  if (status == HAL_OK)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d14e      	bne.n	8008942 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 f9c9 	bl	8009c44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a25      	ldr	r2, [pc, #148]	; (800894c <HAL_TIM_IC_Start_IT+0x280>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c4:	d01d      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a21      	ldr	r2, [pc, #132]	; (8008950 <HAL_TIM_IC_Start_IT+0x284>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <HAL_TIM_IC_Start_IT+0x288>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <HAL_TIM_IC_Start_IT+0x28c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1c      	ldr	r2, [pc, #112]	; (800895c <HAL_TIM_IC_Start_IT+0x290>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <HAL_TIM_IC_Start_IT+0x294>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_TIM_IC_Start_IT+0x236>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a19      	ldr	r2, [pc, #100]	; (8008964 <HAL_TIM_IC_Start_IT+0x298>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d115      	bne.n	800892e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_TIM_IC_Start_IT+0x29c>)
 800890a:	4013      	ands	r3, r2
 800890c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b06      	cmp	r3, #6
 8008912:	d015      	beq.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800891a:	d011      	beq.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892c:	e008      	b.n	8008940 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0201 	orr.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e000      	b.n	8008942 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008940:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40010000 	.word	0x40010000
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40010400 	.word	0x40010400
 8008960:	40001800 	.word	0x40001800
 8008964:	40014000 	.word	0x40014000
 8008968:	00010007 	.word	0x00010007

0800896c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b02      	cmp	r3, #2
 8008980:	d122      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b02      	cmp	r3, #2
 800898e:	d11b      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f06f 0202 	mvn.w	r2, #2
 8008998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7f9 feb0 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 80089b4:	e005      	b.n	80089c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fbee 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fbf5 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d122      	bne.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d11b      	bne.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0204 	mvn.w	r2, #4
 80089ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f9 fe86 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8008a08:	e005      	b.n	8008a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fbc4 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fbcb 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d122      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d11b      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0208 	mvn.w	r2, #8
 8008a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2204      	movs	r2, #4
 8008a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7f9 fe5c 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e005      	b.n	8008a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb9a 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fba1 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b10      	cmp	r3, #16
 8008a7c:	d122      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0210 	mvn.w	r2, #16
 8008a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2208      	movs	r2, #8
 8008a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7f9 fe32 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8008ab0:	e005      	b.n	8008abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fb70 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fb77 	bl	80091ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10e      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d107      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0201 	mvn.w	r2, #1
 8008ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb4a 	bl	8009184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b80      	cmp	r3, #128	; 0x80
 8008afc:	d10e      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b80      	cmp	r3, #128	; 0x80
 8008b0a:	d107      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f952 	bl	8009dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2a:	d10e      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b36:	2b80      	cmp	r3, #128	; 0x80
 8008b38:	d107      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f945 	bl	8009dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d10e      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b40      	cmp	r3, #64	; 0x40
 8008b64:	d107      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb25 	bl	80091c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d10e      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d107      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f06f 0220 	mvn.w	r2, #32
 8008b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 f905 	bl	8009dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e088      	b.n	8008cda <HAL_TIM_IC_ConfigChannel+0x130>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d11b      	bne.n	8008c0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6819      	ldr	r1, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f000 fe65 	bl	80098b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699a      	ldr	r2, [r3, #24]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 020c 	bic.w	r2, r2, #12
 8008bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6999      	ldr	r1, [r3, #24]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	619a      	str	r2, [r3, #24]
 8008c0c:	e060      	b.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d11c      	bne.n	8008c4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f000 fee9 	bl	80099fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6999      	ldr	r1, [r3, #24]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	021a      	lsls	r2, r3, #8
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	619a      	str	r2, [r3, #24]
 8008c4c:	e040      	b.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d11b      	bne.n	8008c8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6819      	ldr	r1, [r3, #0]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f000 ff36 	bl	8009ad4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69da      	ldr	r2, [r3, #28]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 020c 	bic.w	r2, r2, #12
 8008c76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69d9      	ldr	r1, [r3, #28]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	61da      	str	r2, [r3, #28]
 8008c8a:	e021      	b.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b0c      	cmp	r3, #12
 8008c90:	d11c      	bne.n	8008ccc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f000 ff53 	bl	8009b4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008cb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69d9      	ldr	r1, [r3, #28]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	021a      	lsls	r2, r3, #8
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	61da      	str	r2, [r3, #28]
 8008cca:	e001      	b.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d101      	bne.n	8008d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e0ff      	b.n	8008f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b14      	cmp	r3, #20
 8008d0e:	f200 80f0 	bhi.w	8008ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008ef3 	.word	0x08008ef3
 8008d20:	08008ef3 	.word	0x08008ef3
 8008d24:	08008ef3 	.word	0x08008ef3
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008ef3 	.word	0x08008ef3
 8008d30:	08008ef3 	.word	0x08008ef3
 8008d34:	08008ef3 	.word	0x08008ef3
 8008d38:	08008def 	.word	0x08008def
 8008d3c:	08008ef3 	.word	0x08008ef3
 8008d40:	08008ef3 	.word	0x08008ef3
 8008d44:	08008ef3 	.word	0x08008ef3
 8008d48:	08008e2f 	.word	0x08008e2f
 8008d4c:	08008ef3 	.word	0x08008ef3
 8008d50:	08008ef3 	.word	0x08008ef3
 8008d54:	08008ef3 	.word	0x08008ef3
 8008d58:	08008e71 	.word	0x08008e71
 8008d5c:	08008ef3 	.word	0x08008ef3
 8008d60:	08008ef3 	.word	0x08008ef3
 8008d64:	08008ef3 	.word	0x08008ef3
 8008d68:	08008eb1 	.word	0x08008eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fac8 	bl	8009308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0208 	orr.w	r2, r2, #8
 8008d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0204 	bic.w	r2, r2, #4
 8008d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6999      	ldr	r1, [r3, #24]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	619a      	str	r2, [r3, #24]
      break;
 8008daa:	e0a5      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fb38 	bl	8009428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6999      	ldr	r1, [r3, #24]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	021a      	lsls	r2, r3, #8
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	619a      	str	r2, [r3, #24]
      break;
 8008dec:	e084      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fba1 	bl	800953c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69da      	ldr	r2, [r3, #28]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0208 	orr.w	r2, r2, #8
 8008e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0204 	bic.w	r2, r2, #4
 8008e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69d9      	ldr	r1, [r3, #28]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	61da      	str	r2, [r3, #28]
      break;
 8008e2c:	e064      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fc09 	bl	800964c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69da      	ldr	r2, [r3, #28]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69d9      	ldr	r1, [r3, #28]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	021a      	lsls	r2, r3, #8
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	61da      	str	r2, [r3, #28]
      break;
 8008e6e:	e043      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fc52 	bl	8009720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0204 	bic.w	r2, r2, #4
 8008e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008eae:	e023      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fc96 	bl	80097e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ef0:	e002      	b.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop

08008f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e0dc      	b.n	80090e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4b6a      	ldr	r3, [pc, #424]	; (80090ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a64      	ldr	r2, [pc, #400]	; (80090f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f000 80a9 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f64:	4a62      	ldr	r2, [pc, #392]	; (80090f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	f200 80ae 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f6c:	4a61      	ldr	r2, [pc, #388]	; (80090f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	f000 80a1 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f74:	4a5f      	ldr	r2, [pc, #380]	; (80090f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	f200 80a6 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f7c:	4a5e      	ldr	r2, [pc, #376]	; (80090f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	f000 8099 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f84:	4a5c      	ldr	r2, [pc, #368]	; (80090f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f200 809e 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f90:	f000 8091 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008f94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f98:	f200 8096 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa0:	f000 8089 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa8:	f200 808e 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb0:	d03e      	beq.n	8009030 <HAL_TIM_ConfigClockSource+0x124>
 8008fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb6:	f200 8087 	bhi.w	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbe:	f000 8086 	beq.w	80090ce <HAL_TIM_ConfigClockSource+0x1c2>
 8008fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc6:	d87f      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fc8:	2b70      	cmp	r3, #112	; 0x70
 8008fca:	d01a      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0xf6>
 8008fcc:	2b70      	cmp	r3, #112	; 0x70
 8008fce:	d87b      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fd0:	2b60      	cmp	r3, #96	; 0x60
 8008fd2:	d050      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0x16a>
 8008fd4:	2b60      	cmp	r3, #96	; 0x60
 8008fd6:	d877      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fd8:	2b50      	cmp	r3, #80	; 0x50
 8008fda:	d03c      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x14a>
 8008fdc:	2b50      	cmp	r3, #80	; 0x50
 8008fde:	d873      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d058      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0x18a>
 8008fe4:	2b40      	cmp	r3, #64	; 0x40
 8008fe6:	d86f      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fe8:	2b30      	cmp	r3, #48	; 0x30
 8008fea:	d064      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008fec:	2b30      	cmp	r3, #48	; 0x30
 8008fee:	d86b      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d060      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d867      	bhi.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d05c      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d05a      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009000:	e062      	b.n	80090c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6899      	ldr	r1, [r3, #8]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f000 fdf7 	bl	8009c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	609a      	str	r2, [r3, #8]
      break;
 800902e:	e04f      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	6899      	ldr	r1, [r3, #8]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f000 fde0 	bl	8009c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009052:	609a      	str	r2, [r3, #8]
      break;
 8009054:	e03c      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6859      	ldr	r1, [r3, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	461a      	mov	r2, r3
 8009064:	f000 fc9a 	bl	800999c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2150      	movs	r1, #80	; 0x50
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fdaa 	bl	8009bc8 <TIM_ITRx_SetConfig>
      break;
 8009074:	e02c      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6859      	ldr	r1, [r3, #4]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	461a      	mov	r2, r3
 8009084:	f000 fcf6 	bl	8009a74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2160      	movs	r1, #96	; 0x60
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fd9a 	bl	8009bc8 <TIM_ITRx_SetConfig>
      break;
 8009094:	e01c      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	6859      	ldr	r1, [r3, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f000 fc7a 	bl	800999c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2140      	movs	r1, #64	; 0x40
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fd8a 	bl	8009bc8 <TIM_ITRx_SetConfig>
      break;
 80090b4:	e00c      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4619      	mov	r1, r3
 80090c0:	4610      	mov	r0, r2
 80090c2:	f000 fd81 	bl	8009bc8 <TIM_ITRx_SetConfig>
      break;
 80090c6:	e003      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	73fb      	strb	r3, [r7, #15]
      break;
 80090cc:	e000      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80090ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	ffceff88 	.word	0xffceff88
 80090f0:	00100040 	.word	0x00100040
 80090f4:	00100030 	.word	0x00100030
 80090f8:	00100020 	.word	0x00100020

080090fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b0c      	cmp	r3, #12
 800910e:	d831      	bhi.n	8009174 <HAL_TIM_ReadCapturedValue+0x78>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	0800914d 	.word	0x0800914d
 800911c:	08009175 	.word	0x08009175
 8009120:	08009175 	.word	0x08009175
 8009124:	08009175 	.word	0x08009175
 8009128:	08009157 	.word	0x08009157
 800912c:	08009175 	.word	0x08009175
 8009130:	08009175 	.word	0x08009175
 8009134:	08009175 	.word	0x08009175
 8009138:	08009161 	.word	0x08009161
 800913c:	08009175 	.word	0x08009175
 8009140:	08009175 	.word	0x08009175
 8009144:	08009175 	.word	0x08009175
 8009148:	0800916b 	.word	0x0800916b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	60fb      	str	r3, [r7, #12]

      break;
 8009154:	e00f      	b.n	8009176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	60fb      	str	r3, [r7, #12]

      break;
 800915e:	e00a      	b.n	8009176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009166:	60fb      	str	r3, [r7, #12]

      break;
 8009168:	e005      	b.n	8009176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	60fb      	str	r3, [r7, #12]

      break;
 8009172:	e000      	b.n	8009176 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009174:	bf00      	nop
  }

  return tmpreg;
 8009176:	68fb      	ldr	r3, [r7, #12]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a40      	ldr	r2, [pc, #256]	; (80092e8 <TIM_Base_SetConfig+0x114>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <TIM_Base_SetConfig+0x40>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f2:	d00f      	beq.n	8009214 <TIM_Base_SetConfig+0x40>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a3d      	ldr	r2, [pc, #244]	; (80092ec <TIM_Base_SetConfig+0x118>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00b      	beq.n	8009214 <TIM_Base_SetConfig+0x40>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a3c      	ldr	r2, [pc, #240]	; (80092f0 <TIM_Base_SetConfig+0x11c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d007      	beq.n	8009214 <TIM_Base_SetConfig+0x40>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a3b      	ldr	r2, [pc, #236]	; (80092f4 <TIM_Base_SetConfig+0x120>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d003      	beq.n	8009214 <TIM_Base_SetConfig+0x40>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a3a      	ldr	r2, [pc, #232]	; (80092f8 <TIM_Base_SetConfig+0x124>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d108      	bne.n	8009226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a2f      	ldr	r2, [pc, #188]	; (80092e8 <TIM_Base_SetConfig+0x114>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d01f      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d01b      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a2c      	ldr	r2, [pc, #176]	; (80092ec <TIM_Base_SetConfig+0x118>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d017      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a2b      	ldr	r2, [pc, #172]	; (80092f0 <TIM_Base_SetConfig+0x11c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d013      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <TIM_Base_SetConfig+0x120>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00f      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a29      	ldr	r2, [pc, #164]	; (80092f8 <TIM_Base_SetConfig+0x124>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00b      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a28      	ldr	r2, [pc, #160]	; (80092fc <TIM_Base_SetConfig+0x128>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d007      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a27      	ldr	r2, [pc, #156]	; (8009300 <TIM_Base_SetConfig+0x12c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d003      	beq.n	800926e <TIM_Base_SetConfig+0x9a>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a26      	ldr	r2, [pc, #152]	; (8009304 <TIM_Base_SetConfig+0x130>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d108      	bne.n	8009280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a10      	ldr	r2, [pc, #64]	; (80092e8 <TIM_Base_SetConfig+0x114>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00f      	beq.n	80092cc <TIM_Base_SetConfig+0xf8>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a12      	ldr	r2, [pc, #72]	; (80092f8 <TIM_Base_SetConfig+0x124>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <TIM_Base_SetConfig+0xf8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a11      	ldr	r2, [pc, #68]	; (80092fc <TIM_Base_SetConfig+0x128>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d007      	beq.n	80092cc <TIM_Base_SetConfig+0xf8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a10      	ldr	r2, [pc, #64]	; (8009300 <TIM_Base_SetConfig+0x12c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_Base_SetConfig+0xf8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a0f      	ldr	r2, [pc, #60]	; (8009304 <TIM_Base_SetConfig+0x130>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d103      	bne.n	80092d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	615a      	str	r2, [r3, #20]
}
 80092da:	bf00      	nop
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40000400 	.word	0x40000400
 80092f0:	40000800 	.word	0x40000800
 80092f4:	40000c00 	.word	0x40000c00
 80092f8:	40010400 	.word	0x40010400
 80092fc:	40014000 	.word	0x40014000
 8009300:	40014400 	.word	0x40014400
 8009304:	40014800 	.word	0x40014800

08009308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	f023 0201 	bic.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4b37      	ldr	r3, [pc, #220]	; (8009410 <TIM_OC1_SetConfig+0x108>)
 8009334:	4013      	ands	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0303 	bic.w	r3, r3, #3
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f023 0302 	bic.w	r3, r3, #2
 8009350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	4313      	orrs	r3, r2
 800935a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a2d      	ldr	r2, [pc, #180]	; (8009414 <TIM_OC1_SetConfig+0x10c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00f      	beq.n	8009384 <TIM_OC1_SetConfig+0x7c>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a2c      	ldr	r2, [pc, #176]	; (8009418 <TIM_OC1_SetConfig+0x110>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00b      	beq.n	8009384 <TIM_OC1_SetConfig+0x7c>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a2b      	ldr	r2, [pc, #172]	; (800941c <TIM_OC1_SetConfig+0x114>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d007      	beq.n	8009384 <TIM_OC1_SetConfig+0x7c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a2a      	ldr	r2, [pc, #168]	; (8009420 <TIM_OC1_SetConfig+0x118>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_OC1_SetConfig+0x7c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a29      	ldr	r2, [pc, #164]	; (8009424 <TIM_OC1_SetConfig+0x11c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d10c      	bne.n	800939e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0308 	bic.w	r3, r3, #8
 800938a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f023 0304 	bic.w	r3, r3, #4
 800939c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a1c      	ldr	r2, [pc, #112]	; (8009414 <TIM_OC1_SetConfig+0x10c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00f      	beq.n	80093c6 <TIM_OC1_SetConfig+0xbe>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a1b      	ldr	r2, [pc, #108]	; (8009418 <TIM_OC1_SetConfig+0x110>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <TIM_OC1_SetConfig+0xbe>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a1a      	ldr	r2, [pc, #104]	; (800941c <TIM_OC1_SetConfig+0x114>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d007      	beq.n	80093c6 <TIM_OC1_SetConfig+0xbe>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a19      	ldr	r2, [pc, #100]	; (8009420 <TIM_OC1_SetConfig+0x118>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_OC1_SetConfig+0xbe>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a18      	ldr	r2, [pc, #96]	; (8009424 <TIM_OC1_SetConfig+0x11c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d111      	bne.n	80093ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	621a      	str	r2, [r3, #32]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	fffeff8f 	.word	0xfffeff8f
 8009414:	40010000 	.word	0x40010000
 8009418:	40010400 	.word	0x40010400
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800

08009428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f023 0210 	bic.w	r2, r3, #16
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4b34      	ldr	r3, [pc, #208]	; (8009524 <TIM_OC2_SetConfig+0xfc>)
 8009454:	4013      	ands	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800945e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f023 0320 	bic.w	r3, r3, #32
 8009472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a29      	ldr	r2, [pc, #164]	; (8009528 <TIM_OC2_SetConfig+0x100>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC2_SetConfig+0x68>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a28      	ldr	r2, [pc, #160]	; (800952c <TIM_OC2_SetConfig+0x104>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10d      	bne.n	80094ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <TIM_OC2_SetConfig+0x100>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00f      	beq.n	80094d4 <TIM_OC2_SetConfig+0xac>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <TIM_OC2_SetConfig+0x104>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00b      	beq.n	80094d4 <TIM_OC2_SetConfig+0xac>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <TIM_OC2_SetConfig+0x108>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d007      	beq.n	80094d4 <TIM_OC2_SetConfig+0xac>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <TIM_OC2_SetConfig+0x10c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d003      	beq.n	80094d4 <TIM_OC2_SetConfig+0xac>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <TIM_OC2_SetConfig+0x110>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d113      	bne.n	80094fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	feff8fff 	.word	0xfeff8fff
 8009528:	40010000 	.word	0x40010000
 800952c:	40010400 	.word	0x40010400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800

0800953c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4b33      	ldr	r3, [pc, #204]	; (8009634 <TIM_OC3_SetConfig+0xf8>)
 8009568:	4013      	ands	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0303 	bic.w	r3, r3, #3
 8009572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a28      	ldr	r2, [pc, #160]	; (8009638 <TIM_OC3_SetConfig+0xfc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d003      	beq.n	80095a2 <TIM_OC3_SetConfig+0x66>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a27      	ldr	r2, [pc, #156]	; (800963c <TIM_OC3_SetConfig+0x100>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d10d      	bne.n	80095be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a1d      	ldr	r2, [pc, #116]	; (8009638 <TIM_OC3_SetConfig+0xfc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00f      	beq.n	80095e6 <TIM_OC3_SetConfig+0xaa>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a1c      	ldr	r2, [pc, #112]	; (800963c <TIM_OC3_SetConfig+0x100>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00b      	beq.n	80095e6 <TIM_OC3_SetConfig+0xaa>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a1b      	ldr	r2, [pc, #108]	; (8009640 <TIM_OC3_SetConfig+0x104>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <TIM_OC3_SetConfig+0xaa>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1a      	ldr	r2, [pc, #104]	; (8009644 <TIM_OC3_SetConfig+0x108>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d003      	beq.n	80095e6 <TIM_OC3_SetConfig+0xaa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a19      	ldr	r2, [pc, #100]	; (8009648 <TIM_OC3_SetConfig+0x10c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d113      	bne.n	800960e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	621a      	str	r2, [r3, #32]
}
 8009628:	bf00      	nop
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	fffeff8f 	.word	0xfffeff8f
 8009638:	40010000 	.word	0x40010000
 800963c:	40010400 	.word	0x40010400
 8009640:	40014000 	.word	0x40014000
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800

0800964c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4b24      	ldr	r3, [pc, #144]	; (8009708 <TIM_OC4_SetConfig+0xbc>)
 8009678:	4013      	ands	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	031b      	lsls	r3, r3, #12
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a19      	ldr	r2, [pc, #100]	; (800970c <TIM_OC4_SetConfig+0xc0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00f      	beq.n	80096cc <TIM_OC4_SetConfig+0x80>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a18      	ldr	r2, [pc, #96]	; (8009710 <TIM_OC4_SetConfig+0xc4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00b      	beq.n	80096cc <TIM_OC4_SetConfig+0x80>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a17      	ldr	r2, [pc, #92]	; (8009714 <TIM_OC4_SetConfig+0xc8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d007      	beq.n	80096cc <TIM_OC4_SetConfig+0x80>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a16      	ldr	r2, [pc, #88]	; (8009718 <TIM_OC4_SetConfig+0xcc>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d003      	beq.n	80096cc <TIM_OC4_SetConfig+0x80>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a15      	ldr	r2, [pc, #84]	; (800971c <TIM_OC4_SetConfig+0xd0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d109      	bne.n	80096e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	019b      	lsls	r3, r3, #6
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	621a      	str	r2, [r3, #32]
}
 80096fa:	bf00      	nop
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	feff8fff 	.word	0xfeff8fff
 800970c:	40010000 	.word	0x40010000
 8009710:	40010400 	.word	0x40010400
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800

08009720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <TIM_OC5_SetConfig+0xb0>)
 800974c:	4013      	ands	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	041b      	lsls	r3, r3, #16
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a18      	ldr	r2, [pc, #96]	; (80097d4 <TIM_OC5_SetConfig+0xb4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00f      	beq.n	8009796 <TIM_OC5_SetConfig+0x76>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <TIM_OC5_SetConfig+0xb8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d00b      	beq.n	8009796 <TIM_OC5_SetConfig+0x76>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a16      	ldr	r2, [pc, #88]	; (80097dc <TIM_OC5_SetConfig+0xbc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d007      	beq.n	8009796 <TIM_OC5_SetConfig+0x76>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a15      	ldr	r2, [pc, #84]	; (80097e0 <TIM_OC5_SetConfig+0xc0>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d003      	beq.n	8009796 <TIM_OC5_SetConfig+0x76>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a14      	ldr	r2, [pc, #80]	; (80097e4 <TIM_OC5_SetConfig+0xc4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d109      	bne.n	80097aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800979c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	621a      	str	r2, [r3, #32]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	fffeff8f 	.word	0xfffeff8f
 80097d4:	40010000 	.word	0x40010000
 80097d8:	40010400 	.word	0x40010400
 80097dc:	40014000 	.word	0x40014000
 80097e0:	40014400 	.word	0x40014400
 80097e4:	40014800 	.word	0x40014800

080097e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4b22      	ldr	r3, [pc, #136]	; (800989c <TIM_OC6_SetConfig+0xb4>)
 8009814:	4013      	ands	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800982a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	051b      	lsls	r3, r3, #20
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	4313      	orrs	r3, r2
 8009836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <TIM_OC6_SetConfig+0xb8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00f      	beq.n	8009860 <TIM_OC6_SetConfig+0x78>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a18      	ldr	r2, [pc, #96]	; (80098a4 <TIM_OC6_SetConfig+0xbc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00b      	beq.n	8009860 <TIM_OC6_SetConfig+0x78>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <TIM_OC6_SetConfig+0xc0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d007      	beq.n	8009860 <TIM_OC6_SetConfig+0x78>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <TIM_OC6_SetConfig+0xc4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <TIM_OC6_SetConfig+0x78>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <TIM_OC6_SetConfig+0xc8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d109      	bne.n	8009874 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	621a      	str	r2, [r3, #32]
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	feff8fff 	.word	0xfeff8fff
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40010400 	.word	0x40010400
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800

080098b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f023 0201 	bic.w	r2, r3, #1
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4a28      	ldr	r2, [pc, #160]	; (8009980 <TIM_TI1_SetConfig+0xcc>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01b      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e8:	d017      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a25      	ldr	r2, [pc, #148]	; (8009984 <TIM_TI1_SetConfig+0xd0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d013      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4a24      	ldr	r2, [pc, #144]	; (8009988 <TIM_TI1_SetConfig+0xd4>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d00f      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a23      	ldr	r2, [pc, #140]	; (800998c <TIM_TI1_SetConfig+0xd8>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00b      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a22      	ldr	r2, [pc, #136]	; (8009990 <TIM_TI1_SetConfig+0xdc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d007      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4a21      	ldr	r2, [pc, #132]	; (8009994 <TIM_TI1_SetConfig+0xe0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d003      	beq.n	800991a <TIM_TI1_SetConfig+0x66>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4a20      	ldr	r2, [pc, #128]	; (8009998 <TIM_TI1_SetConfig+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d101      	bne.n	800991e <TIM_TI1_SetConfig+0x6a>
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <TIM_TI1_SetConfig+0x6c>
 800991e:	2300      	movs	r3, #0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	e003      	b.n	800993e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f043 0301 	orr.w	r3, r3, #1
 800993c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	b2db      	uxtb	r3, r3
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f023 030a 	bic.w	r3, r3, #10
 8009958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f003 030a 	and.w	r3, r3, #10
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40010000 	.word	0x40010000
 8009984:	40000400 	.word	0x40000400
 8009988:	40000800 	.word	0x40000800
 800998c:	40000c00 	.word	0x40000c00
 8009990:	40010400 	.word	0x40010400
 8009994:	40001800 	.word	0x40001800
 8009998:	40014000 	.word	0x40014000

0800999c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f023 030a 	bic.w	r3, r3, #10
 80099d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	621a      	str	r2, [r3, #32]
}
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b087      	sub	sp, #28
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	f023 0210 	bic.w	r2, r3, #16
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	021b      	lsls	r3, r3, #8
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	031b      	lsls	r3, r3, #12
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	011b      	lsls	r3, r3, #4
 8009a52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	621a      	str	r2, [r3, #32]
}
 8009a68:	bf00      	nop
 8009a6a:	371c      	adds	r7, #28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	f023 0210 	bic.w	r2, r3, #16
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	031b      	lsls	r3, r3, #12
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	621a      	str	r2, [r3, #32]
}
 8009ac8:	bf00      	nop
 8009aca:	371c      	adds	r7, #28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f023 0303 	bic.w	r3, r3, #3
 8009b00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	621a      	str	r2, [r3, #32]
}
 8009b40:	bf00      	nop
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	031b      	lsls	r3, r3, #12
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	031b      	lsls	r3, r3, #12
 8009ba4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <TIM_ITRx_SetConfig+0x38>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f043 0307 	orr.w	r3, r3, #7
 8009bea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	609a      	str	r2, [r3, #8]
}
 8009bf2:	bf00      	nop
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	ffcfff8f 	.word	0xffcfff8f

08009c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	021a      	lsls	r2, r3, #8
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	609a      	str	r2, [r3, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f003 031f 	and.w	r3, r3, #31
 8009c56:	2201      	movs	r2, #1
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1a      	ldr	r2, [r3, #32]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	43db      	mvns	r3, r3
 8009c66:	401a      	ands	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
	...

08009c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e06d      	b.n	8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a30      	ldr	r2, [pc, #192]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a2f      	ldr	r2, [pc, #188]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d108      	bne.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a20      	ldr	r2, [pc, #128]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d022      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1a:	d01d      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1d      	ldr	r2, [pc, #116]	; (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d018      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a1c      	ldr	r2, [pc, #112]	; (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d013      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a1a      	ldr	r2, [pc, #104]	; (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00e      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a15      	ldr	r2, [pc, #84]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d009      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a16      	ldr	r2, [pc, #88]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d004      	beq.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d10c      	bne.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	40010000 	.word	0x40010000
 8009d94:	40010400 	.word	0x40010400
 8009d98:	40000400 	.word	0x40000400
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	40000c00 	.word	0x40000c00
 8009da4:	40001800 	.word	0x40001800
 8009da8:	40014000 	.word	0x40014000

08009dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e042      	b.n	8009e80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7f8 fb27 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2224      	movs	r2, #36	; 0x24
 8009e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0201 	bic.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fcde 	bl	800a7ec <UART_SetConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e022      	b.n	8009e80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 fa3a 	bl	800b2bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 fac1 	bl	800b400 <UART_CheckIdleState>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b091      	sub	sp, #68	; 0x44
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	f040 808c 	bne.w	8009fba <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_UART_Transmit_IT+0x26>
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e084      	b.n	8009fbc <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_UART_Transmit_IT+0x38>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e07d      	b.n	8009fbc <HAL_UART_Transmit_IT+0x134>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	88fa      	ldrh	r2, [r7, #6]
 8009eda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2221      	movs	r2, #33	; 0x21
 8009ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efc:	d12e      	bne.n	8009f5c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f06:	d107      	bne.n	8009f18 <HAL_UART_Transmit_IT+0x90>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a2d      	ldr	r2, [pc, #180]	; (8009fc8 <HAL_UART_Transmit_IT+0x140>)
 8009f14:	675a      	str	r2, [r3, #116]	; 0x74
 8009f16:	e002      	b.n	8009f1e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a2c      	ldr	r2, [pc, #176]	; (8009fcc <HAL_UART_Transmit_IT+0x144>)
 8009f1c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	e853 3f00 	ldrex	r3, [r3]
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f46:	637a      	str	r2, [r7, #52]	; 0x34
 8009f48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e5      	bne.n	8009f26 <HAL_UART_Transmit_IT+0x9e>
 8009f5a:	e02c      	b.n	8009fb6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f64:	d107      	bne.n	8009f76 <HAL_UART_Transmit_IT+0xee>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d103      	bne.n	8009f76 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4a17      	ldr	r2, [pc, #92]	; (8009fd0 <HAL_UART_Transmit_IT+0x148>)
 8009f72:	675a      	str	r2, [r3, #116]	; 0x74
 8009f74:	e002      	b.n	8009f7c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4a16      	ldr	r2, [pc, #88]	; (8009fd4 <HAL_UART_Transmit_IT+0x14c>)
 8009f7a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	613b      	str	r3, [r7, #16]
   return(result);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa2:	623b      	str	r3, [r7, #32]
 8009fa4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	69f9      	ldr	r1, [r7, #28]
 8009fa8:	6a3a      	ldr	r2, [r7, #32]
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e6      	bne.n	8009f84 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e000      	b.n	8009fbc <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009fba:	2302      	movs	r3, #2
  }
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3744      	adds	r7, #68	; 0x44
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	0800bbcf 	.word	0x0800bbcf
 8009fcc:	0800baef 	.word	0x0800baef
 8009fd0:	0800ba2d 	.word	0x0800ba2d
 8009fd4:	0800b975 	.word	0x0800b975

08009fd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08a      	sub	sp, #40	; 0x28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d142      	bne.n	800a076 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <HAL_UART_Receive_IT+0x24>
 8009ff6:	88fb      	ldrh	r3, [r7, #6]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e03b      	b.n	800a078 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_UART_Receive_IT+0x36>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e034      	b.n	800a078 <HAL_UART_Receive_IT+0xa0>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a17      	ldr	r2, [pc, #92]	; (800a080 <HAL_UART_Receive_IT+0xa8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d01f      	beq.n	800a066 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d018      	beq.n	800a066 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	613b      	str	r3, [r7, #16]
   return(result);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	623b      	str	r3, [r7, #32]
 800a054:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	69f9      	ldr	r1, [r7, #28]
 800a058:	6a3a      	ldr	r2, [r7, #32]
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e6      	bne.n	800a034 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	461a      	mov	r2, r3
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f001 fadb 	bl	800b628 <UART_Start_Receive_IT>
 800a072:	4603      	mov	r3, r0
 800a074:	e000      	b.n	800a078 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a076:	2302      	movs	r3, #2
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3728      	adds	r7, #40	; 0x28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	58000c00 	.word	0x58000c00

0800a084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b0ba      	sub	sp, #232	; 0xe8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a0ae:	f640 030f 	movw	r3, #2063	; 0x80f
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a0b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11b      	bne.n	800a0f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c4:	f003 0320 	and.w	r3, r3, #32
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d015      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d0:	f003 0320 	and.w	r3, r3, #32
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d105      	bne.n	800a0e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 835a 	beq.w	800a7a2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
      }
      return;
 800a0f6:	e354      	b.n	800a7a2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 811f 	beq.w	800a340 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a102:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a106:	4b8b      	ldr	r3, [pc, #556]	; (800a334 <HAL_UART_IRQHandler+0x2b0>)
 800a108:	4013      	ands	r3, r2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a10e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a112:	4b89      	ldr	r3, [pc, #548]	; (800a338 <HAL_UART_IRQHandler+0x2b4>)
 800a114:	4013      	ands	r3, r2
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8112 	beq.w	800a340 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d011      	beq.n	800a14c <HAL_UART_IRQHandler+0xc8>
 800a128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2201      	movs	r2, #1
 800a13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a142:	f043 0201 	orr.w	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d011      	beq.n	800a17c <HAL_UART_IRQHandler+0xf8>
 800a158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2202      	movs	r2, #2
 800a16a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a172:	f043 0204 	orr.w	r2, r3, #4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d011      	beq.n	800a1ac <HAL_UART_IRQHandler+0x128>
 800a188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2204      	movs	r2, #4
 800a19a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1a2:	f043 0202 	orr.w	r2, r3, #2
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d017      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1c8:	4b5a      	ldr	r3, [pc, #360]	; (800a334 <HAL_UART_IRQHandler+0x2b0>)
 800a1ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00b      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1de:	f043 0208 	orr.w	r2, r3, #8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d012      	beq.n	800a21a <HAL_UART_IRQHandler+0x196>
 800a1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00c      	beq.n	800a21a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 82c0 	beq.w	800a7a6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d013      	beq.n	800a25a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26e:	2b40      	cmp	r3, #64	; 0x40
 800a270:	d005      	beq.n	800a27e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a276:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d04f      	beq.n	800a31e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fafc 	bl	800b87c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d141      	bne.n	800a316 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3308      	adds	r3, #8
 800a298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a2d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1d9      	bne.n	800a292 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d013      	beq.n	800a30e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ea:	4a14      	ldr	r2, [pc, #80]	; (800a33c <HAL_UART_IRQHandler+0x2b8>)
 800a2ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7f9 ff84 	bl	8004200 <HAL_DMA_Abort_IT>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d017      	beq.n	800a32e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a30c:	e00f      	b.n	800a32e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fa56 	bl	800a7c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a314:	e00b      	b.n	800a32e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa52 	bl	800a7c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31c:	e007      	b.n	800a32e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa4e 	bl	800a7c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a32c:	e23b      	b.n	800a7a6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32e:	bf00      	nop
    return;
 800a330:	e239      	b.n	800a7a6 <HAL_UART_IRQHandler+0x722>
 800a332:	bf00      	nop
 800a334:	10000001 	.word	0x10000001
 800a338:	04000120 	.word	0x04000120
 800a33c:	0800b949 	.word	0x0800b949

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a344:	2b01      	cmp	r3, #1
 800a346:	f040 81ce 	bne.w	800a6e6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 81c7 	beq.w	800a6e6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 81c0 	beq.w	800a6e6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2210      	movs	r2, #16
 800a36c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a378:	2b40      	cmp	r3, #64	; 0x40
 800a37a:	f040 813b 	bne.w	800a5f4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a8b      	ldr	r2, [pc, #556]	; (800a5b4 <HAL_UART_IRQHandler+0x530>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d059      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a89      	ldr	r2, [pc, #548]	; (800a5b8 <HAL_UART_IRQHandler+0x534>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d053      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a87      	ldr	r2, [pc, #540]	; (800a5bc <HAL_UART_IRQHandler+0x538>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d04d      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a85      	ldr	r2, [pc, #532]	; (800a5c0 <HAL_UART_IRQHandler+0x53c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d047      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a83      	ldr	r2, [pc, #524]	; (800a5c4 <HAL_UART_IRQHandler+0x540>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d041      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a81      	ldr	r2, [pc, #516]	; (800a5c8 <HAL_UART_IRQHandler+0x544>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d03b      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a7f      	ldr	r2, [pc, #508]	; (800a5cc <HAL_UART_IRQHandler+0x548>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d035      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a7d      	ldr	r2, [pc, #500]	; (800a5d0 <HAL_UART_IRQHandler+0x54c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d02f      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a7b      	ldr	r2, [pc, #492]	; (800a5d4 <HAL_UART_IRQHandler+0x550>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d029      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a79      	ldr	r2, [pc, #484]	; (800a5d8 <HAL_UART_IRQHandler+0x554>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d023      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a77      	ldr	r2, [pc, #476]	; (800a5dc <HAL_UART_IRQHandler+0x558>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d01d      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a75      	ldr	r2, [pc, #468]	; (800a5e0 <HAL_UART_IRQHandler+0x55c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d017      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a73      	ldr	r2, [pc, #460]	; (800a5e4 <HAL_UART_IRQHandler+0x560>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d011      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a71      	ldr	r2, [pc, #452]	; (800a5e8 <HAL_UART_IRQHandler+0x564>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00b      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a6f      	ldr	r2, [pc, #444]	; (800a5ec <HAL_UART_IRQHandler+0x568>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d005      	beq.n	800a43e <HAL_UART_IRQHandler+0x3ba>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a6d      	ldr	r2, [pc, #436]	; (800a5f0 <HAL_UART_IRQHandler+0x56c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d105      	bne.n	800a44a <HAL_UART_IRQHandler+0x3c6>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	b29b      	uxth	r3, r3
 800a448:	e004      	b.n	800a454 <HAL_UART_IRQHandler+0x3d0>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 81a4 	beq.w	800a7aa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a46c:	429a      	cmp	r2, r3
 800a46e:	f080 819c 	bcs.w	800a7aa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a486:	f000 8086 	beq.w	800a596 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a49e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1da      	bne.n	800a48a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a4fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a500:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a50a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e1      	bne.n	800a4d4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a534:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a536:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a53a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e3      	bne.n	800a510 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a566:	f023 0310 	bic.w	r3, r3, #16
 800a56a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a578:	65bb      	str	r3, [r7, #88]	; 0x58
 800a57a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e4      	bne.n	800a556 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a590:	4618      	mov	r0, r3
 800a592:	f7f9 fb17 	bl	8003bc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f912 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5b0:	e0fb      	b.n	800a7aa <HAL_UART_IRQHandler+0x726>
 800a5b2:	bf00      	nop
 800a5b4:	40020010 	.word	0x40020010
 800a5b8:	40020028 	.word	0x40020028
 800a5bc:	40020040 	.word	0x40020040
 800a5c0:	40020058 	.word	0x40020058
 800a5c4:	40020070 	.word	0x40020070
 800a5c8:	40020088 	.word	0x40020088
 800a5cc:	400200a0 	.word	0x400200a0
 800a5d0:	400200b8 	.word	0x400200b8
 800a5d4:	40020410 	.word	0x40020410
 800a5d8:	40020428 	.word	0x40020428
 800a5dc:	40020440 	.word	0x40020440
 800a5e0:	40020458 	.word	0x40020458
 800a5e4:	40020470 	.word	0x40020470
 800a5e8:	40020488 	.word	0x40020488
 800a5ec:	400204a0 	.word	0x400204a0
 800a5f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a600:	b29b      	uxth	r3, r3
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80cc 	beq.w	800a7ae <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 80c7 	beq.w	800a7ae <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a642:	647b      	str	r3, [r7, #68]	; 0x44
 800a644:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e4      	bne.n	800a620 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3308      	adds	r3, #8
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	623b      	str	r3, [r7, #32]
   return(result);
 800a666:	6a3a      	ldr	r2, [r7, #32]
 800a668:	4b54      	ldr	r3, [pc, #336]	; (800a7bc <HAL_UART_IRQHandler+0x738>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3308      	adds	r3, #8
 800a676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a67a:	633a      	str	r2, [r7, #48]	; 0x30
 800a67c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e3      	bne.n	800a656 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	e853 3f00 	ldrex	r3, [r3]
 800a6ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 0310 	bic.w	r3, r3, #16
 800a6b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	69b9      	ldr	r1, [r7, #24]
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e4      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f878 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6e4:	e063      	b.n	800a7ae <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00e      	beq.n	800a710 <HAL_UART_IRQHandler+0x68c>
 800a6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d008      	beq.n	800a710 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a706:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f001 ff5d 	bl	800c5c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a70e:	e051      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d014      	beq.n	800a746 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a72c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d008      	beq.n	800a746 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d03a      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
    }
    return;
 800a744:	e035      	b.n	800a7b2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <HAL_UART_IRQHandler+0x6e2>
 800a752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 faaa 	bl	800bcb8 <UART_EndTransmit_IT>
    return;
 800a764:	e026      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <HAL_UART_IRQHandler+0x702>
 800a772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a776:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 ff36 	bl	800c5f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a784:	e016      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d010      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x730>
 800a792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a796:	2b00      	cmp	r3, #0
 800a798:	da0c      	bge.n	800a7b4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 ff1e 	bl	800c5dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7a0:	e008      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
      return;
 800a7a2:	bf00      	nop
 800a7a4:	e006      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
    return;
 800a7a6:	bf00      	nop
 800a7a8:	e004      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
      return;
 800a7aa:	bf00      	nop
 800a7ac:	e002      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
      return;
 800a7ae:	bf00      	nop
 800a7b0:	e000      	b.n	800a7b4 <HAL_UART_IRQHandler+0x730>
    return;
 800a7b2:	bf00      	nop
  }
}
 800a7b4:	37e8      	adds	r7, #232	; 0xe8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	effffffe 	.word	0xeffffffe

0800a7c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7f0:	b092      	sub	sp, #72	; 0x48
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	431a      	orrs	r2, r3
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	4313      	orrs	r3, r2
 800a812:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4bbe      	ldr	r3, [pc, #760]	; (800ab14 <UART_SetConfig+0x328>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a824:	430b      	orrs	r3, r1
 800a826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4ab3      	ldr	r2, [pc, #716]	; (800ab18 <UART_SetConfig+0x32c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d004      	beq.n	800a858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a854:	4313      	orrs	r3, r2
 800a856:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	4baf      	ldr	r3, [pc, #700]	; (800ab1c <UART_SetConfig+0x330>)
 800a860:	4013      	ands	r3, r2
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a868:	430b      	orrs	r3, r1
 800a86a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a872:	f023 010f 	bic.w	r1, r3, #15
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	430a      	orrs	r2, r1
 800a880:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4aa6      	ldr	r2, [pc, #664]	; (800ab20 <UART_SetConfig+0x334>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d177      	bne.n	800a97c <UART_SetConfig+0x190>
 800a88c:	4ba5      	ldr	r3, [pc, #660]	; (800ab24 <UART_SetConfig+0x338>)
 800a88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a894:	2b28      	cmp	r3, #40	; 0x28
 800a896:	d86d      	bhi.n	800a974 <UART_SetConfig+0x188>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <UART_SetConfig+0xb4>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a945 	.word	0x0800a945
 800a8a4:	0800a975 	.word	0x0800a975
 800a8a8:	0800a975 	.word	0x0800a975
 800a8ac:	0800a975 	.word	0x0800a975
 800a8b0:	0800a975 	.word	0x0800a975
 800a8b4:	0800a975 	.word	0x0800a975
 800a8b8:	0800a975 	.word	0x0800a975
 800a8bc:	0800a975 	.word	0x0800a975
 800a8c0:	0800a94d 	.word	0x0800a94d
 800a8c4:	0800a975 	.word	0x0800a975
 800a8c8:	0800a975 	.word	0x0800a975
 800a8cc:	0800a975 	.word	0x0800a975
 800a8d0:	0800a975 	.word	0x0800a975
 800a8d4:	0800a975 	.word	0x0800a975
 800a8d8:	0800a975 	.word	0x0800a975
 800a8dc:	0800a975 	.word	0x0800a975
 800a8e0:	0800a955 	.word	0x0800a955
 800a8e4:	0800a975 	.word	0x0800a975
 800a8e8:	0800a975 	.word	0x0800a975
 800a8ec:	0800a975 	.word	0x0800a975
 800a8f0:	0800a975 	.word	0x0800a975
 800a8f4:	0800a975 	.word	0x0800a975
 800a8f8:	0800a975 	.word	0x0800a975
 800a8fc:	0800a975 	.word	0x0800a975
 800a900:	0800a95d 	.word	0x0800a95d
 800a904:	0800a975 	.word	0x0800a975
 800a908:	0800a975 	.word	0x0800a975
 800a90c:	0800a975 	.word	0x0800a975
 800a910:	0800a975 	.word	0x0800a975
 800a914:	0800a975 	.word	0x0800a975
 800a918:	0800a975 	.word	0x0800a975
 800a91c:	0800a975 	.word	0x0800a975
 800a920:	0800a965 	.word	0x0800a965
 800a924:	0800a975 	.word	0x0800a975
 800a928:	0800a975 	.word	0x0800a975
 800a92c:	0800a975 	.word	0x0800a975
 800a930:	0800a975 	.word	0x0800a975
 800a934:	0800a975 	.word	0x0800a975
 800a938:	0800a975 	.word	0x0800a975
 800a93c:	0800a975 	.word	0x0800a975
 800a940:	0800a96d 	.word	0x0800a96d
 800a944:	2301      	movs	r3, #1
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e222      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a94c:	2304      	movs	r3, #4
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e21e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a954:	2308      	movs	r3, #8
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e21a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a95c:	2310      	movs	r3, #16
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a962:	e216      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a964:	2320      	movs	r3, #32
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96a:	e212      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a96c:	2340      	movs	r3, #64	; 0x40
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a972:	e20e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a974:	2380      	movs	r3, #128	; 0x80
 800a976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a97a:	e20a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a69      	ldr	r2, [pc, #420]	; (800ab28 <UART_SetConfig+0x33c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d130      	bne.n	800a9e8 <UART_SetConfig+0x1fc>
 800a986:	4b67      	ldr	r3, [pc, #412]	; (800ab24 <UART_SetConfig+0x338>)
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d826      	bhi.n	800a9e0 <UART_SetConfig+0x1f4>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x1ac>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9b9 	.word	0x0800a9b9
 800a9a0:	0800a9c1 	.word	0x0800a9c1
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9d1 	.word	0x0800a9d1
 800a9ac:	0800a9d9 	.word	0x0800a9d9
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b6:	e1ec      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9be:	e1e8      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c6:	e1e4      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ce:	e1e0      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e1dc      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9de:	e1d8      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9e0:	2380      	movs	r3, #128	; 0x80
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e6:	e1d4      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a4f      	ldr	r2, [pc, #316]	; (800ab2c <UART_SetConfig+0x340>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d130      	bne.n	800aa54 <UART_SetConfig+0x268>
 800a9f2:	4b4c      	ldr	r3, [pc, #304]	; (800ab24 <UART_SetConfig+0x338>)
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d826      	bhi.n	800aa4c <UART_SetConfig+0x260>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <UART_SetConfig+0x218>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa1d 	.word	0x0800aa1d
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	0800aa35 	.word	0x0800aa35
 800aa14:	0800aa3d 	.word	0x0800aa3d
 800aa18:	0800aa45 	.word	0x0800aa45
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa22:	e1b6      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2a:	e1b2      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa32:	e1ae      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3a:	e1aa      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e1a6      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4a:	e1a2      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa52:	e19e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a35      	ldr	r2, [pc, #212]	; (800ab30 <UART_SetConfig+0x344>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d130      	bne.n	800aac0 <UART_SetConfig+0x2d4>
 800aa5e:	4b31      	ldr	r3, [pc, #196]	; (800ab24 <UART_SetConfig+0x338>)
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d826      	bhi.n	800aab8 <UART_SetConfig+0x2cc>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <UART_SetConfig+0x284>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aa89 	.word	0x0800aa89
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa99 	.word	0x0800aa99
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aaa9 	.word	0x0800aaa9
 800aa84:	0800aab1 	.word	0x0800aab1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e180      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa90:	2304      	movs	r3, #4
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa96:	e17c      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e178      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa6:	e174      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aaa8:	2320      	movs	r3, #32
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e170      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab6:	e16c      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aab8:	2380      	movs	r3, #128	; 0x80
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aabe:	e168      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1b      	ldr	r2, [pc, #108]	; (800ab34 <UART_SetConfig+0x348>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d142      	bne.n	800ab50 <UART_SetConfig+0x364>
 800aaca:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <UART_SetConfig+0x338>)
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	d838      	bhi.n	800ab48 <UART_SetConfig+0x35c>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <UART_SetConfig+0x2f0>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800aaf5 	.word	0x0800aaf5
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800ab05 	.word	0x0800ab05
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800ab39 	.word	0x0800ab39
 800aaf0:	0800ab41 	.word	0x0800ab41
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafa:	e14a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aafc:	2304      	movs	r3, #4
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab02:	e146      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab04:	2308      	movs	r3, #8
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0a:	e142      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab12:	e13e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab14:	cfff69f3 	.word	0xcfff69f3
 800ab18:	58000c00 	.word	0x58000c00
 800ab1c:	11fff4ff 	.word	0x11fff4ff
 800ab20:	40011000 	.word	0x40011000
 800ab24:	58024400 	.word	0x58024400
 800ab28:	40004400 	.word	0x40004400
 800ab2c:	40004800 	.word	0x40004800
 800ab30:	40004c00 	.word	0x40004c00
 800ab34:	40005000 	.word	0x40005000
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e128      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e124      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab48:	2380      	movs	r3, #128	; 0x80
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4e:	e120      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4acb      	ldr	r2, [pc, #812]	; (800ae84 <UART_SetConfig+0x698>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d176      	bne.n	800ac48 <UART_SetConfig+0x45c>
 800ab5a:	4bcb      	ldr	r3, [pc, #812]	; (800ae88 <UART_SetConfig+0x69c>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab62:	2b28      	cmp	r3, #40	; 0x28
 800ab64:	d86c      	bhi.n	800ac40 <UART_SetConfig+0x454>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <UART_SetConfig+0x380>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ac11 	.word	0x0800ac11
 800ab70:	0800ac41 	.word	0x0800ac41
 800ab74:	0800ac41 	.word	0x0800ac41
 800ab78:	0800ac41 	.word	0x0800ac41
 800ab7c:	0800ac41 	.word	0x0800ac41
 800ab80:	0800ac41 	.word	0x0800ac41
 800ab84:	0800ac41 	.word	0x0800ac41
 800ab88:	0800ac41 	.word	0x0800ac41
 800ab8c:	0800ac19 	.word	0x0800ac19
 800ab90:	0800ac41 	.word	0x0800ac41
 800ab94:	0800ac41 	.word	0x0800ac41
 800ab98:	0800ac41 	.word	0x0800ac41
 800ab9c:	0800ac41 	.word	0x0800ac41
 800aba0:	0800ac41 	.word	0x0800ac41
 800aba4:	0800ac41 	.word	0x0800ac41
 800aba8:	0800ac41 	.word	0x0800ac41
 800abac:	0800ac21 	.word	0x0800ac21
 800abb0:	0800ac41 	.word	0x0800ac41
 800abb4:	0800ac41 	.word	0x0800ac41
 800abb8:	0800ac41 	.word	0x0800ac41
 800abbc:	0800ac41 	.word	0x0800ac41
 800abc0:	0800ac41 	.word	0x0800ac41
 800abc4:	0800ac41 	.word	0x0800ac41
 800abc8:	0800ac41 	.word	0x0800ac41
 800abcc:	0800ac29 	.word	0x0800ac29
 800abd0:	0800ac41 	.word	0x0800ac41
 800abd4:	0800ac41 	.word	0x0800ac41
 800abd8:	0800ac41 	.word	0x0800ac41
 800abdc:	0800ac41 	.word	0x0800ac41
 800abe0:	0800ac41 	.word	0x0800ac41
 800abe4:	0800ac41 	.word	0x0800ac41
 800abe8:	0800ac41 	.word	0x0800ac41
 800abec:	0800ac31 	.word	0x0800ac31
 800abf0:	0800ac41 	.word	0x0800ac41
 800abf4:	0800ac41 	.word	0x0800ac41
 800abf8:	0800ac41 	.word	0x0800ac41
 800abfc:	0800ac41 	.word	0x0800ac41
 800ac00:	0800ac41 	.word	0x0800ac41
 800ac04:	0800ac41 	.word	0x0800ac41
 800ac08:	0800ac41 	.word	0x0800ac41
 800ac0c:	0800ac39 	.word	0x0800ac39
 800ac10:	2301      	movs	r3, #1
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e0bc      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1e:	e0b8      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac20:	2308      	movs	r3, #8
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac26:	e0b4      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2e:	e0b0      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac30:	2320      	movs	r3, #32
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac36:	e0ac      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac38:	2340      	movs	r3, #64	; 0x40
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3e:	e0a8      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac40:	2380      	movs	r3, #128	; 0x80
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac46:	e0a4      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a8f      	ldr	r2, [pc, #572]	; (800ae8c <UART_SetConfig+0x6a0>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d130      	bne.n	800acb4 <UART_SetConfig+0x4c8>
 800ac52:	4b8d      	ldr	r3, [pc, #564]	; (800ae88 <UART_SetConfig+0x69c>)
 800ac54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d826      	bhi.n	800acac <UART_SetConfig+0x4c0>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <UART_SetConfig+0x478>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac7d 	.word	0x0800ac7d
 800ac68:	0800ac85 	.word	0x0800ac85
 800ac6c:	0800ac8d 	.word	0x0800ac8d
 800ac70:	0800ac95 	.word	0x0800ac95
 800ac74:	0800ac9d 	.word	0x0800ac9d
 800ac78:	0800aca5 	.word	0x0800aca5
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac82:	e086      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac84:	2304      	movs	r3, #4
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8a:	e082      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac92:	e07e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac94:	2310      	movs	r3, #16
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9a:	e07a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca2:	e076      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800aca4:	2340      	movs	r3, #64	; 0x40
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acaa:	e072      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800acac:	2380      	movs	r3, #128	; 0x80
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb2:	e06e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a75      	ldr	r2, [pc, #468]	; (800ae90 <UART_SetConfig+0x6a4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d130      	bne.n	800ad20 <UART_SetConfig+0x534>
 800acbe:	4b72      	ldr	r3, [pc, #456]	; (800ae88 <UART_SetConfig+0x69c>)
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	d826      	bhi.n	800ad18 <UART_SetConfig+0x52c>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0x4e4>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ace9 	.word	0x0800ace9
 800acd4:	0800acf1 	.word	0x0800acf1
 800acd8:	0800acf9 	.word	0x0800acf9
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acee:	e050      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800acf0:	2304      	movs	r3, #4
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acf6:	e04c      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800acf8:	2308      	movs	r3, #8
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acfe:	e048      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad00:	2310      	movs	r3, #16
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad06:	e044      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad0e:	e040      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad10:	2340      	movs	r3, #64	; 0x40
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad16:	e03c      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad18:	2380      	movs	r3, #128	; 0x80
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1e:	e038      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a5b      	ldr	r2, [pc, #364]	; (800ae94 <UART_SetConfig+0x6a8>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d130      	bne.n	800ad8c <UART_SetConfig+0x5a0>
 800ad2a:	4b57      	ldr	r3, [pc, #348]	; (800ae88 <UART_SetConfig+0x69c>)
 800ad2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d826      	bhi.n	800ad84 <UART_SetConfig+0x598>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <UART_SetConfig+0x550>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad55 	.word	0x0800ad55
 800ad40:	0800ad5d 	.word	0x0800ad5d
 800ad44:	0800ad65 	.word	0x0800ad65
 800ad48:	0800ad6d 	.word	0x0800ad6d
 800ad4c:	0800ad75 	.word	0x0800ad75
 800ad50:	0800ad7d 	.word	0x0800ad7d
 800ad54:	2302      	movs	r3, #2
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5a:	e01a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad62:	e016      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad64:	2308      	movs	r3, #8
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6a:	e012      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad72:	e00e      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad74:	2320      	movs	r3, #32
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7a:	e00a      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad82:	e006      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8a:	e002      	b.n	800ad92 <UART_SetConfig+0x5a6>
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a3f      	ldr	r2, [pc, #252]	; (800ae94 <UART_SetConfig+0x6a8>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	f040 80f8 	bne.w	800af8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	dc46      	bgt.n	800ae34 <UART_SetConfig+0x648>
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	f2c0 8082 	blt.w	800aeb0 <UART_SetConfig+0x6c4>
 800adac:	3b02      	subs	r3, #2
 800adae:	2b1e      	cmp	r3, #30
 800adb0:	d87e      	bhi.n	800aeb0 <UART_SetConfig+0x6c4>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <UART_SetConfig+0x5cc>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800ae3b 	.word	0x0800ae3b
 800adbc:	0800aeb1 	.word	0x0800aeb1
 800adc0:	0800ae43 	.word	0x0800ae43
 800adc4:	0800aeb1 	.word	0x0800aeb1
 800adc8:	0800aeb1 	.word	0x0800aeb1
 800adcc:	0800aeb1 	.word	0x0800aeb1
 800add0:	0800ae53 	.word	0x0800ae53
 800add4:	0800aeb1 	.word	0x0800aeb1
 800add8:	0800aeb1 	.word	0x0800aeb1
 800addc:	0800aeb1 	.word	0x0800aeb1
 800ade0:	0800aeb1 	.word	0x0800aeb1
 800ade4:	0800aeb1 	.word	0x0800aeb1
 800ade8:	0800aeb1 	.word	0x0800aeb1
 800adec:	0800aeb1 	.word	0x0800aeb1
 800adf0:	0800ae63 	.word	0x0800ae63
 800adf4:	0800aeb1 	.word	0x0800aeb1
 800adf8:	0800aeb1 	.word	0x0800aeb1
 800adfc:	0800aeb1 	.word	0x0800aeb1
 800ae00:	0800aeb1 	.word	0x0800aeb1
 800ae04:	0800aeb1 	.word	0x0800aeb1
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aeb1 	.word	0x0800aeb1
 800ae10:	0800aeb1 	.word	0x0800aeb1
 800ae14:	0800aeb1 	.word	0x0800aeb1
 800ae18:	0800aeb1 	.word	0x0800aeb1
 800ae1c:	0800aeb1 	.word	0x0800aeb1
 800ae20:	0800aeb1 	.word	0x0800aeb1
 800ae24:	0800aeb1 	.word	0x0800aeb1
 800ae28:	0800aeb1 	.word	0x0800aeb1
 800ae2c:	0800aeb1 	.word	0x0800aeb1
 800ae30:	0800aea3 	.word	0x0800aea3
 800ae34:	2b40      	cmp	r3, #64	; 0x40
 800ae36:	d037      	beq.n	800aea8 <UART_SetConfig+0x6bc>
 800ae38:	e03a      	b.n	800aeb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae3a:	f7fc fc63 	bl	8007704 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae40:	e03c      	b.n	800aebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fc fc72 	bl	8007730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae50:	e034      	b.n	800aebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae52:	f107 0318 	add.w	r3, r7, #24
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fc fdbe 	bl	80079d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae60:	e02c      	b.n	800aebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <UART_SetConfig+0x69c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d016      	beq.n	800ae9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae6e:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <UART_SetConfig+0x69c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <UART_SetConfig+0x6ac>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae80:	e01c      	b.n	800aebc <UART_SetConfig+0x6d0>
 800ae82:	bf00      	nop
 800ae84:	40011400 	.word	0x40011400
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	40007800 	.word	0x40007800
 800ae90:	40007c00 	.word	0x40007c00
 800ae94:	58000c00 	.word	0x58000c00
 800ae98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ae9c:	4b9d      	ldr	r3, [pc, #628]	; (800b114 <UART_SetConfig+0x928>)
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea0:	e00c      	b.n	800aebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aea2:	4b9d      	ldr	r3, [pc, #628]	; (800b118 <UART_SetConfig+0x92c>)
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea6:	e009      	b.n	800aebc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeae:	e005      	b.n	800aebc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aeba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 81de 	beq.w	800b280 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	4a94      	ldr	r2, [pc, #592]	; (800b11c <UART_SetConfig+0x930>)
 800aeca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aece:	461a      	mov	r2, r3
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	4413      	add	r3, r2
 800aee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d305      	bcc.n	800aef4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d903      	bls.n	800aefc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aefa:	e1c1      	b.n	800b280 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefe:	2200      	movs	r2, #0
 800af00:	60bb      	str	r3, [r7, #8]
 800af02:	60fa      	str	r2, [r7, #12]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	4a84      	ldr	r2, [pc, #528]	; (800b11c <UART_SetConfig+0x930>)
 800af0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	2200      	movs	r2, #0
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	607a      	str	r2, [r7, #4]
 800af16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af1e:	f7f5 fa37 	bl	8000390 <__aeabi_uldivmod>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	4610      	mov	r0, r2
 800af28:	4619      	mov	r1, r3
 800af2a:	f04f 0200 	mov.w	r2, #0
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	020b      	lsls	r3, r1, #8
 800af34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af38:	0202      	lsls	r2, r0, #8
 800af3a:	6979      	ldr	r1, [r7, #20]
 800af3c:	6849      	ldr	r1, [r1, #4]
 800af3e:	0849      	lsrs	r1, r1, #1
 800af40:	2000      	movs	r0, #0
 800af42:	460c      	mov	r4, r1
 800af44:	4605      	mov	r5, r0
 800af46:	eb12 0804 	adds.w	r8, r2, r4
 800af4a:	eb43 0905 	adc.w	r9, r3, r5
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	469a      	mov	sl, r3
 800af56:	4693      	mov	fp, r2
 800af58:	4652      	mov	r2, sl
 800af5a:	465b      	mov	r3, fp
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 fa16 	bl	8000390 <__aeabi_uldivmod>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4613      	mov	r3, r2
 800af6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af72:	d308      	bcc.n	800af86 <UART_SetConfig+0x79a>
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af7a:	d204      	bcs.n	800af86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af82:	60da      	str	r2, [r3, #12]
 800af84:	e17c      	b.n	800b280 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af8c:	e178      	b.n	800b280 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af96:	f040 80c5 	bne.w	800b124 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800af9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af9e:	2b20      	cmp	r3, #32
 800afa0:	dc48      	bgt.n	800b034 <UART_SetConfig+0x848>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db7b      	blt.n	800b09e <UART_SetConfig+0x8b2>
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d879      	bhi.n	800b09e <UART_SetConfig+0x8b2>
 800afaa:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <UART_SetConfig+0x7c4>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800b03b 	.word	0x0800b03b
 800afb4:	0800b043 	.word	0x0800b043
 800afb8:	0800b09f 	.word	0x0800b09f
 800afbc:	0800b09f 	.word	0x0800b09f
 800afc0:	0800b04b 	.word	0x0800b04b
 800afc4:	0800b09f 	.word	0x0800b09f
 800afc8:	0800b09f 	.word	0x0800b09f
 800afcc:	0800b09f 	.word	0x0800b09f
 800afd0:	0800b05b 	.word	0x0800b05b
 800afd4:	0800b09f 	.word	0x0800b09f
 800afd8:	0800b09f 	.word	0x0800b09f
 800afdc:	0800b09f 	.word	0x0800b09f
 800afe0:	0800b09f 	.word	0x0800b09f
 800afe4:	0800b09f 	.word	0x0800b09f
 800afe8:	0800b09f 	.word	0x0800b09f
 800afec:	0800b09f 	.word	0x0800b09f
 800aff0:	0800b06b 	.word	0x0800b06b
 800aff4:	0800b09f 	.word	0x0800b09f
 800aff8:	0800b09f 	.word	0x0800b09f
 800affc:	0800b09f 	.word	0x0800b09f
 800b000:	0800b09f 	.word	0x0800b09f
 800b004:	0800b09f 	.word	0x0800b09f
 800b008:	0800b09f 	.word	0x0800b09f
 800b00c:	0800b09f 	.word	0x0800b09f
 800b010:	0800b09f 	.word	0x0800b09f
 800b014:	0800b09f 	.word	0x0800b09f
 800b018:	0800b09f 	.word	0x0800b09f
 800b01c:	0800b09f 	.word	0x0800b09f
 800b020:	0800b09f 	.word	0x0800b09f
 800b024:	0800b09f 	.word	0x0800b09f
 800b028:	0800b09f 	.word	0x0800b09f
 800b02c:	0800b09f 	.word	0x0800b09f
 800b030:	0800b091 	.word	0x0800b091
 800b034:	2b40      	cmp	r3, #64	; 0x40
 800b036:	d02e      	beq.n	800b096 <UART_SetConfig+0x8aa>
 800b038:	e031      	b.n	800b09e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b03a:	f7fb fbf1 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 800b03e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b040:	e033      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b042:	f7fb fc03 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 800b046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b048:	e02f      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b04a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fc fb6e 	bl	8007730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b058:	e027      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b05a:	f107 0318 	add.w	r3, r7, #24
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fc fcba 	bl	80079d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b068:	e01f      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b06a:	4b2d      	ldr	r3, [pc, #180]	; (800b120 <UART_SetConfig+0x934>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b076:	4b2a      	ldr	r3, [pc, #168]	; (800b120 <UART_SetConfig+0x934>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	08db      	lsrs	r3, r3, #3
 800b07c:	f003 0303 	and.w	r3, r3, #3
 800b080:	4a24      	ldr	r2, [pc, #144]	; (800b114 <UART_SetConfig+0x928>)
 800b082:	fa22 f303 	lsr.w	r3, r2, r3
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b088:	e00f      	b.n	800b0aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b08a:	4b22      	ldr	r3, [pc, #136]	; (800b114 <UART_SetConfig+0x928>)
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08e:	e00c      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b090:	4b21      	ldr	r3, [pc, #132]	; (800b118 <UART_SetConfig+0x92c>)
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b094:	e009      	b.n	800b0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09c:	e005      	b.n	800b0aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 80e7 	beq.w	800b280 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	4a19      	ldr	r2, [pc, #100]	; (800b11c <UART_SetConfig+0x930>)
 800b0b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0c4:	005a      	lsls	r2, r3, #1
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	085b      	lsrs	r3, r3, #1
 800b0cc:	441a      	add	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	2b0f      	cmp	r3, #15
 800b0dc:	d916      	bls.n	800b10c <UART_SetConfig+0x920>
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e4:	d212      	bcs.n	800b10c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f023 030f 	bic.w	r3, r3, #15
 800b0ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0fe:	4313      	orrs	r3, r2
 800b100:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b108:	60da      	str	r2, [r3, #12]
 800b10a:	e0b9      	b.n	800b280 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b112:	e0b5      	b.n	800b280 <UART_SetConfig+0xa94>
 800b114:	03d09000 	.word	0x03d09000
 800b118:	003d0900 	.word	0x003d0900
 800b11c:	0800e648 	.word	0x0800e648
 800b120:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b124:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b128:	2b20      	cmp	r3, #32
 800b12a:	dc49      	bgt.n	800b1c0 <UART_SetConfig+0x9d4>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	db7c      	blt.n	800b22a <UART_SetConfig+0xa3e>
 800b130:	2b20      	cmp	r3, #32
 800b132:	d87a      	bhi.n	800b22a <UART_SetConfig+0xa3e>
 800b134:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <UART_SetConfig+0x950>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b1c7 	.word	0x0800b1c7
 800b140:	0800b1cf 	.word	0x0800b1cf
 800b144:	0800b22b 	.word	0x0800b22b
 800b148:	0800b22b 	.word	0x0800b22b
 800b14c:	0800b1d7 	.word	0x0800b1d7
 800b150:	0800b22b 	.word	0x0800b22b
 800b154:	0800b22b 	.word	0x0800b22b
 800b158:	0800b22b 	.word	0x0800b22b
 800b15c:	0800b1e7 	.word	0x0800b1e7
 800b160:	0800b22b 	.word	0x0800b22b
 800b164:	0800b22b 	.word	0x0800b22b
 800b168:	0800b22b 	.word	0x0800b22b
 800b16c:	0800b22b 	.word	0x0800b22b
 800b170:	0800b22b 	.word	0x0800b22b
 800b174:	0800b22b 	.word	0x0800b22b
 800b178:	0800b22b 	.word	0x0800b22b
 800b17c:	0800b1f7 	.word	0x0800b1f7
 800b180:	0800b22b 	.word	0x0800b22b
 800b184:	0800b22b 	.word	0x0800b22b
 800b188:	0800b22b 	.word	0x0800b22b
 800b18c:	0800b22b 	.word	0x0800b22b
 800b190:	0800b22b 	.word	0x0800b22b
 800b194:	0800b22b 	.word	0x0800b22b
 800b198:	0800b22b 	.word	0x0800b22b
 800b19c:	0800b22b 	.word	0x0800b22b
 800b1a0:	0800b22b 	.word	0x0800b22b
 800b1a4:	0800b22b 	.word	0x0800b22b
 800b1a8:	0800b22b 	.word	0x0800b22b
 800b1ac:	0800b22b 	.word	0x0800b22b
 800b1b0:	0800b22b 	.word	0x0800b22b
 800b1b4:	0800b22b 	.word	0x0800b22b
 800b1b8:	0800b22b 	.word	0x0800b22b
 800b1bc:	0800b21d 	.word	0x0800b21d
 800b1c0:	2b40      	cmp	r3, #64	; 0x40
 800b1c2:	d02e      	beq.n	800b222 <UART_SetConfig+0xa36>
 800b1c4:	e031      	b.n	800b22a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1c6:	f7fb fb2b 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 800b1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1cc:	e033      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ce:	f7fb fb3d 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 800b1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1d4:	e02f      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fc faa8 	bl	8007730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e4:	e027      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1e6:	f107 0318 	add.w	r3, r7, #24
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fc fbf4 	bl	80079d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f4:	e01f      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1f6:	4b2d      	ldr	r3, [pc, #180]	; (800b2ac <UART_SetConfig+0xac0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b202:	4b2a      	ldr	r3, [pc, #168]	; (800b2ac <UART_SetConfig+0xac0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	08db      	lsrs	r3, r3, #3
 800b208:	f003 0303 	and.w	r3, r3, #3
 800b20c:	4a28      	ldr	r2, [pc, #160]	; (800b2b0 <UART_SetConfig+0xac4>)
 800b20e:	fa22 f303 	lsr.w	r3, r2, r3
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b214:	e00f      	b.n	800b236 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b216:	4b26      	ldr	r3, [pc, #152]	; (800b2b0 <UART_SetConfig+0xac4>)
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21a:	e00c      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b21c:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <UART_SetConfig+0xac8>)
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b220:	e009      	b.n	800b236 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b228:	e005      	b.n	800b236 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b234:	bf00      	nop
    }

    if (pclk != 0U)
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d021      	beq.n	800b280 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	4a1d      	ldr	r2, [pc, #116]	; (800b2b8 <UART_SetConfig+0xacc>)
 800b242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b246:	461a      	mov	r2, r3
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	441a      	add	r2, r3
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	2b0f      	cmp	r3, #15
 800b264:	d909      	bls.n	800b27a <UART_SetConfig+0xa8e>
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26c:	d205      	bcs.n	800b27a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	b29a      	uxth	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60da      	str	r2, [r3, #12]
 800b278:	e002      	b.n	800b280 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2200      	movs	r2, #0
 800b294:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b29c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3748      	adds	r7, #72	; 0x48
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2aa:	bf00      	nop
 800b2ac:	58024400 	.word	0x58024400
 800b2b0:	03d09000 	.word	0x03d09000
 800b2b4:	003d0900 	.word	0x003d0900
 800b2b8:	0800e648 	.word	0x0800e648

0800b2bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00a      	beq.n	800b308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d01a      	beq.n	800b3d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ba:	d10a      	bne.n	800b3d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	605a      	str	r2, [r3, #4]
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b410:	f7f8 fa8c 	bl	800392c <HAL_GetTick>
 800b414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0308 	and.w	r3, r3, #8
 800b420:	2b08      	cmp	r3, #8
 800b422:	d10e      	bne.n	800b442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f82f 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e025      	b.n	800b48e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d10e      	bne.n	800b46e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f819 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e00f      	b.n	800b48e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2220      	movs	r2, #32
 800b472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b09c      	sub	sp, #112	; 0x70
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	603b      	str	r3, [r7, #0]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a6:	e0a9      	b.n	800b5fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ae:	f000 80a5 	beq.w	800b5fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4b2:	f7f8 fa3b 	bl	800392c <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d302      	bcc.n	800b4c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d140      	bne.n	800b54a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e6      	bne.n	800b4c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	f023 0301 	bic.w	r3, r3, #1
 800b510:	663b      	str	r3, [r7, #96]	; 0x60
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b51a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b51c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e5      	bne.n	800b4fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2220      	movs	r2, #32
 800b532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e069      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d051      	beq.n	800b5fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b566:	d149      	bne.n	800b5fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b570:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	e853 3f00 	ldrex	r3, [r3]
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b586:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
 800b592:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b598:	e841 2300 	strex	r3, r2, [r1]
 800b59c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1e6      	bne.n	800b572 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f023 0301 	bic.w	r3, r3, #1
 800b5ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5c4:	623a      	str	r2, [r7, #32]
 800b5c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	69f9      	ldr	r1, [r7, #28]
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e5      	bne.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e010      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	69da      	ldr	r2, [r3, #28]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	4013      	ands	r3, r2
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	429a      	cmp	r2, r3
 800b60a:	bf0c      	ite	eq
 800b60c:	2301      	moveq	r3, #1
 800b60e:	2300      	movne	r3, #0
 800b610:	b2db      	uxtb	r3, r3
 800b612:	461a      	mov	r2, r3
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	429a      	cmp	r2, r3
 800b618:	f43f af46 	beq.w	800b4a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3770      	adds	r7, #112	; 0x70
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b628:	b480      	push	{r7}
 800b62a:	b0a3      	sub	sp, #140	; 0x8c
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	88fa      	ldrh	r2, [r7, #6]
 800b648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b65a:	d10e      	bne.n	800b67a <UART_Start_Receive_IT+0x52>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d105      	bne.n	800b670 <UART_Start_Receive_IT+0x48>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b66a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b66e:	e02d      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	22ff      	movs	r2, #255	; 0xff
 800b674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b678:	e028      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10d      	bne.n	800b69e <UART_Start_Receive_IT+0x76>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d104      	bne.n	800b694 <UART_Start_Receive_IT+0x6c>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	22ff      	movs	r2, #255	; 0xff
 800b68e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b692:	e01b      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	227f      	movs	r2, #127	; 0x7f
 800b698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b69c:	e016      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6a6:	d10d      	bne.n	800b6c4 <UART_Start_Receive_IT+0x9c>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <UART_Start_Receive_IT+0x92>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	227f      	movs	r2, #127	; 0x7f
 800b6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6b8:	e008      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	223f      	movs	r2, #63	; 0x3f
 800b6be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6c2:	e003      	b.n	800b6cc <UART_Start_Receive_IT+0xa4>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2222      	movs	r2, #34	; 0x22
 800b6d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6e6:	e853 3f00 	ldrex	r3, [r3]
 800b6ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b6ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b700:	673a      	str	r2, [r7, #112]	; 0x70
 800b702:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b706:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b708:	e841 2300 	strex	r3, r2, [r1]
 800b70c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b70e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e3      	bne.n	800b6dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b71c:	d153      	bne.n	800b7c6 <UART_Start_Receive_IT+0x19e>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b724:	88fa      	ldrh	r2, [r7, #6]
 800b726:	429a      	cmp	r2, r3
 800b728:	d34d      	bcc.n	800b7c6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b732:	d107      	bne.n	800b744 <UART_Start_Receive_IT+0x11c>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d103      	bne.n	800b744 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4a4b      	ldr	r2, [pc, #300]	; (800b86c <UART_Start_Receive_IT+0x244>)
 800b740:	671a      	str	r2, [r3, #112]	; 0x70
 800b742:	e002      	b.n	800b74a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4a4a      	ldr	r2, [pc, #296]	; (800b870 <UART_Start_Receive_IT+0x248>)
 800b748:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01a      	beq.n	800b790 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b76e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b77c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b77e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e4      	bne.n	800b75a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3308      	adds	r3, #8
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b7b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e5      	bne.n	800b790 <UART_Start_Receive_IT+0x168>
 800b7c4:	e04a      	b.n	800b85c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ce:	d107      	bne.n	800b7e0 <UART_Start_Receive_IT+0x1b8>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4a26      	ldr	r2, [pc, #152]	; (800b874 <UART_Start_Receive_IT+0x24c>)
 800b7dc:	671a      	str	r2, [r3, #112]	; 0x70
 800b7de:	e002      	b.n	800b7e6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4a25      	ldr	r2, [pc, #148]	; (800b878 <UART_Start_Receive_IT+0x250>)
 800b7e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d019      	beq.n	800b82a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b80a:	677b      	str	r3, [r7, #116]	; 0x74
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b814:	637b      	str	r3, [r7, #52]	; 0x34
 800b816:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e6      	bne.n	800b7f6 <UART_Start_Receive_IT+0x1ce>
 800b828:	e018      	b.n	800b85c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	613b      	str	r3, [r7, #16]
   return(result);
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f043 0320 	orr.w	r3, r3, #32
 800b83e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	461a      	mov	r2, r3
 800b846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b848:	623b      	str	r3, [r7, #32]
 800b84a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	69f9      	ldr	r1, [r7, #28]
 800b84e:	6a3a      	ldr	r2, [r7, #32]
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	61bb      	str	r3, [r7, #24]
   return(result);
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e6      	bne.n	800b82a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	378c      	adds	r7, #140	; 0x8c
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	0800c2c9 	.word	0x0800c2c9
 800b870:	0800bfd1 	.word	0x0800bfd1
 800b874:	0800be6f 	.word	0x0800be6f
 800b878:	0800bd0f 	.word	0x0800bd0f

0800b87c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b095      	sub	sp, #84	; 0x54
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8aa:	e841 2300 	strex	r3, r2, [r1]
 800b8ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1e6      	bne.n	800b884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8c6:	69fa      	ldr	r2, [r7, #28]
 800b8c8:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <UART_EndRxTransfer+0xc8>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e5      	bne.n	800b8b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d118      	bne.n	800b924 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	647b      	str	r3, [r7, #68]	; 0x44
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	461a      	mov	r2, r3
 800b90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b910:	61bb      	str	r3, [r7, #24]
 800b912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b914:	6979      	ldr	r1, [r7, #20]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	e841 2300 	strex	r3, r2, [r1]
 800b91c:	613b      	str	r3, [r7, #16]
   return(result);
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e6      	bne.n	800b8f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2220      	movs	r2, #32
 800b928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b938:	bf00      	nop
 800b93a:	3754      	adds	r7, #84	; 0x54
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	effffffe 	.word	0xeffffffe

0800b948 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7fe ff2a 	bl	800a7c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b96c:	bf00      	nop
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b974:	b480      	push	{r7}
 800b976:	b08f      	sub	sp, #60	; 0x3c
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b982:	2b21      	cmp	r3, #33	; 0x21
 800b984:	d14c      	bne.n	800ba20 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d132      	bne.n	800b9f8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e6      	bne.n	800b992 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	61bb      	str	r3, [r7, #24]
 800b9e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6979      	ldr	r1, [r7, #20]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e6      	bne.n	800b9c4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b9f6:	e013      	b.n	800ba20 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9fc:	781a      	ldrb	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ba20:	bf00      	nop
 800ba22:	373c      	adds	r7, #60	; 0x3c
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b091      	sub	sp, #68	; 0x44
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3a:	2b21      	cmp	r3, #33	; 0x21
 800ba3c:	d151      	bne.n	800bae2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d132      	bne.n	800bab0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	623b      	str	r3, [r7, #32]
   return(result);
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba68:	633b      	str	r3, [r7, #48]	; 0x30
 800ba6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba70:	e841 2300 	strex	r3, r2, [r1]
 800ba74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e6      	bne.n	800ba4a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	e853 3f00 	ldrex	r3, [r3]
 800ba88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9e:	69b9      	ldr	r1, [r7, #24]
 800baa0:	69fa      	ldr	r2, [r7, #28]
 800baa2:	e841 2300 	strex	r3, r2, [r1]
 800baa6:	617b      	str	r3, [r7, #20]
   return(result);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1e6      	bne.n	800ba7c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800baae:	e018      	b.n	800bae2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baca:	1c9a      	adds	r2, r3, #2
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	3b01      	subs	r3, #1
 800bada:	b29a      	uxth	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bae2:	bf00      	nop
 800bae4:	3744      	adds	r7, #68	; 0x44
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800baee:	b480      	push	{r7}
 800baf0:	b091      	sub	sp, #68	; 0x44
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bafc:	2b21      	cmp	r3, #33	; 0x21
 800bafe:	d160      	bne.n	800bbc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bb08:	e057      	b.n	800bbba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d133      	bne.n	800bb7e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	623b      	str	r3, [r7, #32]
   return(result);
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bb2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb36:	633a      	str	r2, [r7, #48]	; 0x30
 800bb38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	e841 2300 	strex	r3, r2, [r1]
 800bb42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e5      	bne.n	800bb16 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	e853 3f00 	ldrex	r3, [r3]
 800bb56:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	61fb      	str	r3, [r7, #28]
 800bb6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6c:	69b9      	ldr	r1, [r7, #24]
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	e841 2300 	strex	r3, r2, [r1]
 800bb74:	617b      	str	r3, [r7, #20]
   return(result);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1e6      	bne.n	800bb4a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bb7c:	e021      	b.n	800bbc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d013      	beq.n	800bbb4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb90:	781a      	ldrb	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bbb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bbba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1a4      	bne.n	800bb0a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bbc0:	e7ff      	b.n	800bbc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800bbc2:	bf00      	nop
 800bbc4:	3744      	adds	r7, #68	; 0x44
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b091      	sub	sp, #68	; 0x44
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbdc:	2b21      	cmp	r3, #33	; 0x21
 800bbde:	d165      	bne.n	800bcac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbe6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bbe8:	e05c      	b.n	800bca4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d133      	bne.n	800bc5e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e5      	bne.n	800bbf6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	61bb      	str	r3, [r7, #24]
 800bc4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6979      	ldr	r1, [r7, #20]
 800bc4e:	69ba      	ldr	r2, [r7, #24]
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	613b      	str	r3, [r7, #16]
   return(result);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e6      	bne.n	800bc2a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bc5c:	e026      	b.n	800bcac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d018      	beq.n	800bc9e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc70:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc80:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc86:	1c9a      	adds	r2, r3, #2
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	3b01      	subs	r3, #1
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bca0:	3b01      	subs	r3, #1
 800bca2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bca4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d19f      	bne.n	800bbea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bcaa:	e7ff      	b.n	800bcac <UART_TxISR_16BIT_FIFOEN+0xde>
 800bcac:	bf00      	nop
 800bcae:	3744      	adds	r7, #68	; 0x44
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	e853 3f00 	ldrex	r3, [r3]
 800bccc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	61bb      	str	r3, [r7, #24]
 800bce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce2:	6979      	ldr	r1, [r7, #20]
 800bce4:	69ba      	ldr	r2, [r7, #24]
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	613b      	str	r3, [r7, #16]
   return(result);
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1e6      	bne.n	800bcc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7f6 fcbd 	bl	8002680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd06:	bf00      	nop
 800bd08:	3720      	adds	r7, #32
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b096      	sub	sp, #88	; 0x58
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd26:	2b22      	cmp	r3, #34	; 0x22
 800bd28:	f040 8095 	bne.w	800be56 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd36:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bd3a:	b2d9      	uxtb	r1, r3
 800bd3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd46:	400a      	ands	r2, r1
 800bd48:	b2d2      	uxtb	r2, r2
 800bd4a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d178      	bne.n	800be66 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd88:	653b      	str	r3, [r7, #80]	; 0x50
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd92:	647b      	str	r3, [r7, #68]	; 0x44
 800bd94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e6      	bne.n	800bd74 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	f023 0301 	bic.w	r3, r3, #1
 800bdbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdc6:	633a      	str	r2, [r7, #48]	; 0x30
 800bdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e5      	bne.n	800bda6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2220      	movs	r2, #32
 800bdde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d12e      	bne.n	800be4e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	60fb      	str	r3, [r7, #12]
   return(result);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0310 	bic.w	r3, r3, #16
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	461a      	mov	r2, r3
 800be12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	69b9      	ldr	r1, [r7, #24]
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	617b      	str	r3, [r7, #20]
   return(result);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e6      	bne.n	800bdf6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	2b10      	cmp	r3, #16
 800be34:	d103      	bne.n	800be3e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2210      	movs	r2, #16
 800be3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be44:	4619      	mov	r1, r3
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7fe fcc4 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be4c:	e00b      	b.n	800be66 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7f6 fc24 	bl	800269c <HAL_UART_RxCpltCallback>
}
 800be54:	e007      	b.n	800be66 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f042 0208 	orr.w	r2, r2, #8
 800be64:	619a      	str	r2, [r3, #24]
}
 800be66:	bf00      	nop
 800be68:	3758      	adds	r7, #88	; 0x58
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b096      	sub	sp, #88	; 0x58
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be86:	2b22      	cmp	r3, #34	; 0x22
 800be88:	f040 8095 	bne.w	800bfb6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800be9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bea4:	4013      	ands	r3, r2
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb0:	1c9a      	adds	r2, r3, #2
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bece:	b29b      	uxth	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d178      	bne.n	800bfc6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef2:	643b      	str	r3, [r7, #64]	; 0x40
 800bef4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e6      	bne.n	800bed4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f023 0301 	bic.w	r3, r3, #1
 800bf1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e5      	bne.n	800bf06 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d12e      	bne.n	800bfae <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0310 	bic.w	r3, r3, #16
 800bf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf74:	61bb      	str	r3, [r7, #24]
 800bf76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	6979      	ldr	r1, [r7, #20]
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	613b      	str	r3, [r7, #16]
   return(result);
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e6      	bne.n	800bf56 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	f003 0310 	and.w	r3, r3, #16
 800bf92:	2b10      	cmp	r3, #16
 800bf94:	d103      	bne.n	800bf9e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2210      	movs	r2, #16
 800bf9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7fe fc14 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfac:	e00b      	b.n	800bfc6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7f6 fb74 	bl	800269c <HAL_UART_RxCpltCallback>
}
 800bfb4:	e007      	b.n	800bfc6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	699a      	ldr	r2, [r3, #24]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0208 	orr.w	r2, r2, #8
 800bfc4:	619a      	str	r2, [r3, #24]
}
 800bfc6:	bf00      	nop
 800bfc8:	3758      	adds	r7, #88	; 0x58
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b0a6      	sub	sp, #152	; 0x98
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfde:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c006:	2b22      	cmp	r3, #34	; 0x22
 800c008:	f040 814d 	bne.w	800c2a6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c012:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c016:	e0f4      	b.n	800c202 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c022:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c026:	b2d9      	uxtb	r1, r3
 800c028:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c032:	400a      	ands	r2, r1
 800c034:	b2d2      	uxtb	r2, r2
 800c036:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c05e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	2b00      	cmp	r3, #0
 800c068:	d053      	beq.n	800c112 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c06a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d011      	beq.n	800c09a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2201      	movs	r2, #1
 800c088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c090:	f043 0201 	orr.w	r2, r3, #1
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c09a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d011      	beq.n	800c0ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c0a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0c0:	f043 0204 	orr.w	r2, r3, #4
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0ce:	f003 0304 	and.w	r3, r3, #4
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d011      	beq.n	800c0fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c0d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2204      	movs	r2, #4
 800c0e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0f0:	f043 0202 	orr.w	r2, r3, #2
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7fe fb5b 	bl	800a7c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d171      	bne.n	800c202 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c12c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c12e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c140:	66bb      	str	r3, [r7, #104]	; 0x68
 800c142:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c14e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e4      	bne.n	800c11e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3308      	adds	r3, #8
 800c15a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c166:	4b56      	ldr	r3, [pc, #344]	; (800c2c0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800c168:	4013      	ands	r3, r2
 800c16a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3308      	adds	r3, #8
 800c172:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c174:	657a      	str	r2, [r7, #84]	; 0x54
 800c176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c17a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e5      	bne.n	800c154 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2220      	movs	r2, #32
 800c18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d12e      	bne.n	800c1fc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	e853 3f00 	ldrex	r3, [r3]
 800c1b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	f023 0310 	bic.w	r3, r3, #16
 800c1b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1ca:	e841 2300 	strex	r3, r2, [r1]
 800c1ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1e6      	bne.n	800c1a4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b10      	cmp	r3, #16
 800c1e2:	d103      	bne.n	800c1ec <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2210      	movs	r2, #16
 800c1ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7fe faed 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
 800c1fa:	e002      	b.n	800c202 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7f6 fa4d 	bl	800269c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c202:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c206:	2b00      	cmp	r3, #0
 800c208:	d006      	beq.n	800c218 <UART_RxISR_8BIT_FIFOEN+0x248>
 800c20a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c20e:	f003 0320 	and.w	r3, r3, #32
 800c212:	2b00      	cmp	r3, #0
 800c214:	f47f af00 	bne.w	800c018 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c21e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c222:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c226:	2b00      	cmp	r3, #0
 800c228:	d045      	beq.n	800c2b6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c230:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c234:	429a      	cmp	r2, r3
 800c236:	d23e      	bcs.n	800c2b6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	61fb      	str	r3, [r7, #28]
   return(result);
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c24e:	673b      	str	r3, [r7, #112]	; 0x70
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3308      	adds	r3, #8
 800c256:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e5      	bne.n	800c238 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a15      	ldr	r2, [pc, #84]	; (800c2c4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c270:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f043 0320 	orr.w	r3, r3, #32
 800c286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c290:	61bb      	str	r3, [r7, #24]
 800c292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6979      	ldr	r1, [r7, #20]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	613b      	str	r3, [r7, #16]
   return(result);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e6      	bne.n	800c272 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2a4:	e007      	b.n	800c2b6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699a      	ldr	r2, [r3, #24]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f042 0208 	orr.w	r2, r2, #8
 800c2b4:	619a      	str	r2, [r3, #24]
}
 800c2b6:	bf00      	nop
 800c2b8:	3798      	adds	r7, #152	; 0x98
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	effffffe 	.word	0xeffffffe
 800c2c4:	0800bd0f 	.word	0x0800bd0f

0800c2c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b0a8      	sub	sp, #160	; 0xa0
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	69db      	ldr	r3, [r3, #28]
 800c2e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fe:	2b22      	cmp	r3, #34	; 0x22
 800c300:	f040 8151 	bne.w	800c5a6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c30a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c30e:	e0f8      	b.n	800c502 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c316:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c322:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c326:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c32a:	4013      	ands	r3, r2
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c338:	1c9a      	adds	r2, r3, #2
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c344:	b29b      	uxth	r3, r3
 800c346:	3b01      	subs	r3, #1
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	69db      	ldr	r3, [r3, #28]
 800c356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c35a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	2b00      	cmp	r3, #0
 800c364:	d053      	beq.n	800c40e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d011      	beq.n	800c396 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2201      	movs	r2, #1
 800c384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38c:	f043 0201 	orr.w	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d011      	beq.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c3a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3bc:	f043 0204 	orr.w	r2, r3, #4
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3ca:	f003 0304 	and.w	r3, r3, #4
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d011      	beq.n	800c3f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c3d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2204      	movs	r2, #4
 800c3e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ec:	f043 0202 	orr.w	r2, r3, #2
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d006      	beq.n	800c40e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7fe f9dd 	bl	800a7c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d173      	bne.n	800c502 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c42e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c43c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c43e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c44a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e4      	bne.n	800c41a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3308      	adds	r3, #8
 800c456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c462:	4b57      	ldr	r3, [pc, #348]	; (800c5c0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800c464:	4013      	ands	r3, r2
 800c466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c474:	65ba      	str	r2, [r7, #88]	; 0x58
 800c476:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c47a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e3      	bne.n	800c450 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d12e      	bne.n	800c4fc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b4:	f023 0310 	bic.w	r3, r3, #16
 800c4b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ca:	e841 2300 	strex	r3, r2, [r1]
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e6      	bne.n	800c4a4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b10      	cmp	r3, #16
 800c4e2:	d103      	bne.n	800c4ec <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2210      	movs	r2, #16
 800c4ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fe f96d 	bl	800a7d4 <HAL_UARTEx_RxEventCallback>
 800c4fa:	e002      	b.n	800c502 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7f6 f8cd 	bl	800269c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c502:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <UART_RxISR_16BIT_FIFOEN+0x250>
 800c50a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	f47f aefc 	bne.w	800c310 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c51e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c522:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c526:	2b00      	cmp	r3, #0
 800c528:	d045      	beq.n	800c5b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c530:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c534:	429a      	cmp	r2, r3
 800c536:	d23e      	bcs.n	800c5b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3308      	adds	r3, #8
 800c53e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	e853 3f00 	ldrex	r3, [r3]
 800c546:	623b      	str	r3, [r7, #32]
   return(result);
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c54e:	677b      	str	r3, [r7, #116]	; 0x74
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c558:	633a      	str	r2, [r7, #48]	; 0x30
 800c55a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e5      	bne.n	800c538 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a15      	ldr	r2, [pc, #84]	; (800c5c4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c570:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	e853 3f00 	ldrex	r3, [r3]
 800c57e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f043 0320 	orr.w	r3, r3, #32
 800c586:	673b      	str	r3, [r7, #112]	; 0x70
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c590:	61fb      	str	r3, [r7, #28]
 800c592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	69b9      	ldr	r1, [r7, #24]
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	617b      	str	r3, [r7, #20]
   return(result);
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e6      	bne.n	800c572 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5a4:	e007      	b.n	800c5b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	699a      	ldr	r2, [r3, #24]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f042 0208 	orr.w	r2, r2, #8
 800c5b4:	619a      	str	r2, [r3, #24]
}
 800c5b6:	bf00      	nop
 800c5b8:	37a0      	adds	r7, #160	; 0xa0
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	effffffe 	.word	0xeffffffe
 800c5c4:	0800be6f 	.word	0x0800be6f

0800c5c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_UARTEx_DisableFifoMode+0x16>
 800c616:	2302      	movs	r3, #2
 800c618:	e027      	b.n	800c66a <HAL_UARTEx_DisableFifoMode+0x66>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2224      	movs	r2, #36	; 0x24
 800c626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f022 0201 	bic.w	r2, r2, #1
 800c640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2220      	movs	r2, #32
 800c65c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c68a:	2302      	movs	r3, #2
 800c68c:	e02d      	b.n	800c6ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2224      	movs	r2, #36	; 0x24
 800c69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f022 0201 	bic.w	r2, r2, #1
 800c6b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f850 	bl	800c770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c702:	2b01      	cmp	r3, #1
 800c704:	d101      	bne.n	800c70a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c706:	2302      	movs	r3, #2
 800c708:	e02d      	b.n	800c766 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2224      	movs	r2, #36	; 0x24
 800c716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f022 0201 	bic.w	r2, r2, #1
 800c730:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f812 	bl	800c770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2220      	movs	r2, #32
 800c758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d108      	bne.n	800c792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c790:	e031      	b.n	800c7f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c792:	2310      	movs	r3, #16
 800c794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c796:	2310      	movs	r3, #16
 800c798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	0e5b      	lsrs	r3, r3, #25
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	f003 0307 	and.w	r3, r3, #7
 800c7a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	0f5b      	lsrs	r3, r3, #29
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	f003 0307 	and.w	r3, r3, #7
 800c7b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	7b3a      	ldrb	r2, [r7, #12]
 800c7be:	4911      	ldr	r1, [pc, #68]	; (800c804 <UARTEx_SetNbDataToProcess+0x94>)
 800c7c0:	5c8a      	ldrb	r2, [r1, r2]
 800c7c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7c6:	7b3a      	ldrb	r2, [r7, #12]
 800c7c8:	490f      	ldr	r1, [pc, #60]	; (800c808 <UARTEx_SetNbDataToProcess+0x98>)
 800c7ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	7b7a      	ldrb	r2, [r7, #13]
 800c7dc:	4909      	ldr	r1, [pc, #36]	; (800c804 <UARTEx_SetNbDataToProcess+0x94>)
 800c7de:	5c8a      	ldrb	r2, [r1, r2]
 800c7e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7e4:	7b7a      	ldrb	r2, [r7, #13]
 800c7e6:	4908      	ldr	r1, [pc, #32]	; (800c808 <UARTEx_SetNbDataToProcess+0x98>)
 800c7e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	0800e660 	.word	0x0800e660
 800c808:	0800e668 	.word	0x0800e668

0800c80c <__errno>:
 800c80c:	4b01      	ldr	r3, [pc, #4]	; (800c814 <__errno+0x8>)
 800c80e:	6818      	ldr	r0, [r3, #0]
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	24000028 	.word	0x24000028

0800c818 <__libc_init_array>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	4d0d      	ldr	r5, [pc, #52]	; (800c850 <__libc_init_array+0x38>)
 800c81c:	4c0d      	ldr	r4, [pc, #52]	; (800c854 <__libc_init_array+0x3c>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	2600      	movs	r6, #0
 800c824:	42a6      	cmp	r6, r4
 800c826:	d109      	bne.n	800c83c <__libc_init_array+0x24>
 800c828:	4d0b      	ldr	r5, [pc, #44]	; (800c858 <__libc_init_array+0x40>)
 800c82a:	4c0c      	ldr	r4, [pc, #48]	; (800c85c <__libc_init_array+0x44>)
 800c82c:	f001 fee6 	bl	800e5fc <_init>
 800c830:	1b64      	subs	r4, r4, r5
 800c832:	10a4      	asrs	r4, r4, #2
 800c834:	2600      	movs	r6, #0
 800c836:	42a6      	cmp	r6, r4
 800c838:	d105      	bne.n	800c846 <__libc_init_array+0x2e>
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c840:	4798      	blx	r3
 800c842:	3601      	adds	r6, #1
 800c844:	e7ee      	b.n	800c824 <__libc_init_array+0xc>
 800c846:	f855 3b04 	ldr.w	r3, [r5], #4
 800c84a:	4798      	blx	r3
 800c84c:	3601      	adds	r6, #1
 800c84e:	e7f2      	b.n	800c836 <__libc_init_array+0x1e>
 800c850:	08010140 	.word	0x08010140
 800c854:	08010140 	.word	0x08010140
 800c858:	08010140 	.word	0x08010140
 800c85c:	08010144 	.word	0x08010144

0800c860 <memset>:
 800c860:	4402      	add	r2, r0
 800c862:	4603      	mov	r3, r0
 800c864:	4293      	cmp	r3, r2
 800c866:	d100      	bne.n	800c86a <memset+0xa>
 800c868:	4770      	bx	lr
 800c86a:	f803 1b01 	strb.w	r1, [r3], #1
 800c86e:	e7f9      	b.n	800c864 <memset+0x4>

0800c870 <siprintf>:
 800c870:	b40e      	push	{r1, r2, r3}
 800c872:	b500      	push	{lr}
 800c874:	b09c      	sub	sp, #112	; 0x70
 800c876:	ab1d      	add	r3, sp, #116	; 0x74
 800c878:	9002      	str	r0, [sp, #8]
 800c87a:	9006      	str	r0, [sp, #24]
 800c87c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c880:	4809      	ldr	r0, [pc, #36]	; (800c8a8 <siprintf+0x38>)
 800c882:	9107      	str	r1, [sp, #28]
 800c884:	9104      	str	r1, [sp, #16]
 800c886:	4909      	ldr	r1, [pc, #36]	; (800c8ac <siprintf+0x3c>)
 800c888:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88c:	9105      	str	r1, [sp, #20]
 800c88e:	6800      	ldr	r0, [r0, #0]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	a902      	add	r1, sp, #8
 800c894:	f000 f868 	bl	800c968 <_svfiprintf_r>
 800c898:	9b02      	ldr	r3, [sp, #8]
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	b01c      	add	sp, #112	; 0x70
 800c8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a4:	b003      	add	sp, #12
 800c8a6:	4770      	bx	lr
 800c8a8:	24000028 	.word	0x24000028
 800c8ac:	ffff0208 	.word	0xffff0208

0800c8b0 <__ssputs_r>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	688e      	ldr	r6, [r1, #8]
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	4690      	mov	r8, r2
 800c8be:	461f      	mov	r7, r3
 800c8c0:	d838      	bhi.n	800c934 <__ssputs_r+0x84>
 800c8c2:	898a      	ldrh	r2, [r1, #12]
 800c8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8c8:	d032      	beq.n	800c930 <__ssputs_r+0x80>
 800c8ca:	6825      	ldr	r5, [r4, #0]
 800c8cc:	6909      	ldr	r1, [r1, #16]
 800c8ce:	eba5 0901 	sub.w	r9, r5, r1
 800c8d2:	6965      	ldr	r5, [r4, #20]
 800c8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8dc:	3301      	adds	r3, #1
 800c8de:	444b      	add	r3, r9
 800c8e0:	106d      	asrs	r5, r5, #1
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	bf38      	it	cc
 800c8e6:	461d      	movcc	r5, r3
 800c8e8:	0553      	lsls	r3, r2, #21
 800c8ea:	d531      	bpl.n	800c950 <__ssputs_r+0xa0>
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f000 fb63 	bl	800cfb8 <_malloc_r>
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	b950      	cbnz	r0, 800c90c <__ssputs_r+0x5c>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	f8ca 3000 	str.w	r3, [sl]
 800c8fc:	89a3      	ldrh	r3, [r4, #12]
 800c8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90c:	6921      	ldr	r1, [r4, #16]
 800c90e:	464a      	mov	r2, r9
 800c910:	f000 fabe 	bl	800ce90 <memcpy>
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	6126      	str	r6, [r4, #16]
 800c922:	6165      	str	r5, [r4, #20]
 800c924:	444e      	add	r6, r9
 800c926:	eba5 0509 	sub.w	r5, r5, r9
 800c92a:	6026      	str	r6, [r4, #0]
 800c92c:	60a5      	str	r5, [r4, #8]
 800c92e:	463e      	mov	r6, r7
 800c930:	42be      	cmp	r6, r7
 800c932:	d900      	bls.n	800c936 <__ssputs_r+0x86>
 800c934:	463e      	mov	r6, r7
 800c936:	6820      	ldr	r0, [r4, #0]
 800c938:	4632      	mov	r2, r6
 800c93a:	4641      	mov	r1, r8
 800c93c:	f000 fab6 	bl	800ceac <memmove>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	1b9b      	subs	r3, r3, r6
 800c944:	60a3      	str	r3, [r4, #8]
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	4433      	add	r3, r6
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e7db      	b.n	800c908 <__ssputs_r+0x58>
 800c950:	462a      	mov	r2, r5
 800c952:	f000 fba5 	bl	800d0a0 <_realloc_r>
 800c956:	4606      	mov	r6, r0
 800c958:	2800      	cmp	r0, #0
 800c95a:	d1e1      	bne.n	800c920 <__ssputs_r+0x70>
 800c95c:	6921      	ldr	r1, [r4, #16]
 800c95e:	4650      	mov	r0, sl
 800c960:	f000 fabe 	bl	800cee0 <_free_r>
 800c964:	e7c7      	b.n	800c8f6 <__ssputs_r+0x46>
	...

0800c968 <_svfiprintf_r>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4698      	mov	r8, r3
 800c96e:	898b      	ldrh	r3, [r1, #12]
 800c970:	061b      	lsls	r3, r3, #24
 800c972:	b09d      	sub	sp, #116	; 0x74
 800c974:	4607      	mov	r7, r0
 800c976:	460d      	mov	r5, r1
 800c978:	4614      	mov	r4, r2
 800c97a:	d50e      	bpl.n	800c99a <_svfiprintf_r+0x32>
 800c97c:	690b      	ldr	r3, [r1, #16]
 800c97e:	b963      	cbnz	r3, 800c99a <_svfiprintf_r+0x32>
 800c980:	2140      	movs	r1, #64	; 0x40
 800c982:	f000 fb19 	bl	800cfb8 <_malloc_r>
 800c986:	6028      	str	r0, [r5, #0]
 800c988:	6128      	str	r0, [r5, #16]
 800c98a:	b920      	cbnz	r0, 800c996 <_svfiprintf_r+0x2e>
 800c98c:	230c      	movs	r3, #12
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c994:	e0d1      	b.n	800cb3a <_svfiprintf_r+0x1d2>
 800c996:	2340      	movs	r3, #64	; 0x40
 800c998:	616b      	str	r3, [r5, #20]
 800c99a:	2300      	movs	r3, #0
 800c99c:	9309      	str	r3, [sp, #36]	; 0x24
 800c99e:	2320      	movs	r3, #32
 800c9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9a8:	2330      	movs	r3, #48	; 0x30
 800c9aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb54 <_svfiprintf_r+0x1ec>
 800c9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9b2:	f04f 0901 	mov.w	r9, #1
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	469a      	mov	sl, r3
 800c9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9be:	b10a      	cbz	r2, 800c9c4 <_svfiprintf_r+0x5c>
 800c9c0:	2a25      	cmp	r2, #37	; 0x25
 800c9c2:	d1f9      	bne.n	800c9b8 <_svfiprintf_r+0x50>
 800c9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c8:	d00b      	beq.n	800c9e2 <_svfiprintf_r+0x7a>
 800c9ca:	465b      	mov	r3, fp
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff ff6d 	bl	800c8b0 <__ssputs_r>
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	f000 80aa 	beq.w	800cb30 <_svfiprintf_r+0x1c8>
 800c9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9de:	445a      	add	r2, fp
 800c9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 80a2 	beq.w	800cb30 <_svfiprintf_r+0x1c8>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9f6:	f10a 0a01 	add.w	sl, sl, #1
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	9307      	str	r3, [sp, #28]
 800c9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca02:	931a      	str	r3, [sp, #104]	; 0x68
 800ca04:	4654      	mov	r4, sl
 800ca06:	2205      	movs	r2, #5
 800ca08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0c:	4851      	ldr	r0, [pc, #324]	; (800cb54 <_svfiprintf_r+0x1ec>)
 800ca0e:	f7f3 fc6f 	bl	80002f0 <memchr>
 800ca12:	9a04      	ldr	r2, [sp, #16]
 800ca14:	b9d8      	cbnz	r0, 800ca4e <_svfiprintf_r+0xe6>
 800ca16:	06d0      	lsls	r0, r2, #27
 800ca18:	bf44      	itt	mi
 800ca1a:	2320      	movmi	r3, #32
 800ca1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca20:	0711      	lsls	r1, r2, #28
 800ca22:	bf44      	itt	mi
 800ca24:	232b      	movmi	r3, #43	; 0x2b
 800ca26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca30:	d015      	beq.n	800ca5e <_svfiprintf_r+0xf6>
 800ca32:	9a07      	ldr	r2, [sp, #28]
 800ca34:	4654      	mov	r4, sl
 800ca36:	2000      	movs	r0, #0
 800ca38:	f04f 0c0a 	mov.w	ip, #10
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca42:	3b30      	subs	r3, #48	; 0x30
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d94e      	bls.n	800cae6 <_svfiprintf_r+0x17e>
 800ca48:	b1b0      	cbz	r0, 800ca78 <_svfiprintf_r+0x110>
 800ca4a:	9207      	str	r2, [sp, #28]
 800ca4c:	e014      	b.n	800ca78 <_svfiprintf_r+0x110>
 800ca4e:	eba0 0308 	sub.w	r3, r0, r8
 800ca52:	fa09 f303 	lsl.w	r3, r9, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	9304      	str	r3, [sp, #16]
 800ca5a:	46a2      	mov	sl, r4
 800ca5c:	e7d2      	b.n	800ca04 <_svfiprintf_r+0x9c>
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	9103      	str	r1, [sp, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfbb      	ittet	lt
 800ca6a:	425b      	neglt	r3, r3
 800ca6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca70:	9307      	strge	r3, [sp, #28]
 800ca72:	9307      	strlt	r3, [sp, #28]
 800ca74:	bfb8      	it	lt
 800ca76:	9204      	strlt	r2, [sp, #16]
 800ca78:	7823      	ldrb	r3, [r4, #0]
 800ca7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7c:	d10c      	bne.n	800ca98 <_svfiprintf_r+0x130>
 800ca7e:	7863      	ldrb	r3, [r4, #1]
 800ca80:	2b2a      	cmp	r3, #42	; 0x2a
 800ca82:	d135      	bne.n	800caf0 <_svfiprintf_r+0x188>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	1d1a      	adds	r2, r3, #4
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	9203      	str	r2, [sp, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	bfb8      	it	lt
 800ca90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca94:	3402      	adds	r4, #2
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb64 <_svfiprintf_r+0x1fc>
 800ca9c:	7821      	ldrb	r1, [r4, #0]
 800ca9e:	2203      	movs	r2, #3
 800caa0:	4650      	mov	r0, sl
 800caa2:	f7f3 fc25 	bl	80002f0 <memchr>
 800caa6:	b140      	cbz	r0, 800caba <_svfiprintf_r+0x152>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	eba0 000a 	sub.w	r0, r0, sl
 800caae:	fa03 f000 	lsl.w	r0, r3, r0
 800cab2:	9b04      	ldr	r3, [sp, #16]
 800cab4:	4303      	orrs	r3, r0
 800cab6:	3401      	adds	r4, #1
 800cab8:	9304      	str	r3, [sp, #16]
 800caba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabe:	4826      	ldr	r0, [pc, #152]	; (800cb58 <_svfiprintf_r+0x1f0>)
 800cac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cac4:	2206      	movs	r2, #6
 800cac6:	f7f3 fc13 	bl	80002f0 <memchr>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d038      	beq.n	800cb40 <_svfiprintf_r+0x1d8>
 800cace:	4b23      	ldr	r3, [pc, #140]	; (800cb5c <_svfiprintf_r+0x1f4>)
 800cad0:	bb1b      	cbnz	r3, 800cb1a <_svfiprintf_r+0x1b2>
 800cad2:	9b03      	ldr	r3, [sp, #12]
 800cad4:	3307      	adds	r3, #7
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	3308      	adds	r3, #8
 800cadc:	9303      	str	r3, [sp, #12]
 800cade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae0:	4433      	add	r3, r6
 800cae2:	9309      	str	r3, [sp, #36]	; 0x24
 800cae4:	e767      	b.n	800c9b6 <_svfiprintf_r+0x4e>
 800cae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800caea:	460c      	mov	r4, r1
 800caec:	2001      	movs	r0, #1
 800caee:	e7a5      	b.n	800ca3c <_svfiprintf_r+0xd4>
 800caf0:	2300      	movs	r3, #0
 800caf2:	3401      	adds	r4, #1
 800caf4:	9305      	str	r3, [sp, #20]
 800caf6:	4619      	mov	r1, r3
 800caf8:	f04f 0c0a 	mov.w	ip, #10
 800cafc:	4620      	mov	r0, r4
 800cafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb02:	3a30      	subs	r2, #48	; 0x30
 800cb04:	2a09      	cmp	r2, #9
 800cb06:	d903      	bls.n	800cb10 <_svfiprintf_r+0x1a8>
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0c5      	beq.n	800ca98 <_svfiprintf_r+0x130>
 800cb0c:	9105      	str	r1, [sp, #20]
 800cb0e:	e7c3      	b.n	800ca98 <_svfiprintf_r+0x130>
 800cb10:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb14:	4604      	mov	r4, r0
 800cb16:	2301      	movs	r3, #1
 800cb18:	e7f0      	b.n	800cafc <_svfiprintf_r+0x194>
 800cb1a:	ab03      	add	r3, sp, #12
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	462a      	mov	r2, r5
 800cb20:	4b0f      	ldr	r3, [pc, #60]	; (800cb60 <_svfiprintf_r+0x1f8>)
 800cb22:	a904      	add	r1, sp, #16
 800cb24:	4638      	mov	r0, r7
 800cb26:	f3af 8000 	nop.w
 800cb2a:	1c42      	adds	r2, r0, #1
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	d1d6      	bne.n	800cade <_svfiprintf_r+0x176>
 800cb30:	89ab      	ldrh	r3, [r5, #12]
 800cb32:	065b      	lsls	r3, r3, #25
 800cb34:	f53f af2c 	bmi.w	800c990 <_svfiprintf_r+0x28>
 800cb38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb3a:	b01d      	add	sp, #116	; 0x74
 800cb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb40:	ab03      	add	r3, sp, #12
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	462a      	mov	r2, r5
 800cb46:	4b06      	ldr	r3, [pc, #24]	; (800cb60 <_svfiprintf_r+0x1f8>)
 800cb48:	a904      	add	r1, sp, #16
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	f000 f87a 	bl	800cc44 <_printf_i>
 800cb50:	e7eb      	b.n	800cb2a <_svfiprintf_r+0x1c2>
 800cb52:	bf00      	nop
 800cb54:	0800e670 	.word	0x0800e670
 800cb58:	0800e67a 	.word	0x0800e67a
 800cb5c:	00000000 	.word	0x00000000
 800cb60:	0800c8b1 	.word	0x0800c8b1
 800cb64:	0800e676 	.word	0x0800e676

0800cb68 <_printf_common>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	4699      	mov	r9, r3
 800cb70:	688a      	ldr	r2, [r1, #8]
 800cb72:	690b      	ldr	r3, [r1, #16]
 800cb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	bfb8      	it	lt
 800cb7c:	4613      	movlt	r3, r2
 800cb7e:	6033      	str	r3, [r6, #0]
 800cb80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb84:	4607      	mov	r7, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	b10a      	cbz	r2, 800cb8e <_printf_common+0x26>
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	6033      	str	r3, [r6, #0]
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	0699      	lsls	r1, r3, #26
 800cb92:	bf42      	ittt	mi
 800cb94:	6833      	ldrmi	r3, [r6, #0]
 800cb96:	3302      	addmi	r3, #2
 800cb98:	6033      	strmi	r3, [r6, #0]
 800cb9a:	6825      	ldr	r5, [r4, #0]
 800cb9c:	f015 0506 	ands.w	r5, r5, #6
 800cba0:	d106      	bne.n	800cbb0 <_printf_common+0x48>
 800cba2:	f104 0a19 	add.w	sl, r4, #25
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	6832      	ldr	r2, [r6, #0]
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dc26      	bgt.n	800cbfe <_printf_common+0x96>
 800cbb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbb4:	1e13      	subs	r3, r2, #0
 800cbb6:	6822      	ldr	r2, [r4, #0]
 800cbb8:	bf18      	it	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	0692      	lsls	r2, r2, #26
 800cbbe:	d42b      	bmi.n	800cc18 <_printf_common+0xb0>
 800cbc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	47c0      	blx	r8
 800cbca:	3001      	adds	r0, #1
 800cbcc:	d01e      	beq.n	800cc0c <_printf_common+0xa4>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	68e5      	ldr	r5, [r4, #12]
 800cbd2:	6832      	ldr	r2, [r6, #0]
 800cbd4:	f003 0306 	and.w	r3, r3, #6
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	bf08      	it	eq
 800cbdc:	1aad      	subeq	r5, r5, r2
 800cbde:	68a3      	ldr	r3, [r4, #8]
 800cbe0:	6922      	ldr	r2, [r4, #16]
 800cbe2:	bf0c      	ite	eq
 800cbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbe8:	2500      	movne	r5, #0
 800cbea:	4293      	cmp	r3, r2
 800cbec:	bfc4      	itt	gt
 800cbee:	1a9b      	subgt	r3, r3, r2
 800cbf0:	18ed      	addgt	r5, r5, r3
 800cbf2:	2600      	movs	r6, #0
 800cbf4:	341a      	adds	r4, #26
 800cbf6:	42b5      	cmp	r5, r6
 800cbf8:	d11a      	bne.n	800cc30 <_printf_common+0xc8>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e008      	b.n	800cc10 <_printf_common+0xa8>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4652      	mov	r2, sl
 800cc02:	4649      	mov	r1, r9
 800cc04:	4638      	mov	r0, r7
 800cc06:	47c0      	blx	r8
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d103      	bne.n	800cc14 <_printf_common+0xac>
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc14:	3501      	adds	r5, #1
 800cc16:	e7c6      	b.n	800cba6 <_printf_common+0x3e>
 800cc18:	18e1      	adds	r1, r4, r3
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	2030      	movs	r0, #48	; 0x30
 800cc1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc22:	4422      	add	r2, r4
 800cc24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc2c:	3302      	adds	r3, #2
 800cc2e:	e7c7      	b.n	800cbc0 <_printf_common+0x58>
 800cc30:	2301      	movs	r3, #1
 800cc32:	4622      	mov	r2, r4
 800cc34:	4649      	mov	r1, r9
 800cc36:	4638      	mov	r0, r7
 800cc38:	47c0      	blx	r8
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	d0e6      	beq.n	800cc0c <_printf_common+0xa4>
 800cc3e:	3601      	adds	r6, #1
 800cc40:	e7d9      	b.n	800cbf6 <_printf_common+0x8e>
	...

0800cc44 <_printf_i>:
 800cc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	7e0f      	ldrb	r7, [r1, #24]
 800cc4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc4c:	2f78      	cmp	r7, #120	; 0x78
 800cc4e:	4691      	mov	r9, r2
 800cc50:	4680      	mov	r8, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	469a      	mov	sl, r3
 800cc56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc5a:	d807      	bhi.n	800cc6c <_printf_i+0x28>
 800cc5c:	2f62      	cmp	r7, #98	; 0x62
 800cc5e:	d80a      	bhi.n	800cc76 <_printf_i+0x32>
 800cc60:	2f00      	cmp	r7, #0
 800cc62:	f000 80d8 	beq.w	800ce16 <_printf_i+0x1d2>
 800cc66:	2f58      	cmp	r7, #88	; 0x58
 800cc68:	f000 80a3 	beq.w	800cdb2 <_printf_i+0x16e>
 800cc6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc74:	e03a      	b.n	800ccec <_printf_i+0xa8>
 800cc76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc7a:	2b15      	cmp	r3, #21
 800cc7c:	d8f6      	bhi.n	800cc6c <_printf_i+0x28>
 800cc7e:	a101      	add	r1, pc, #4	; (adr r1, 800cc84 <_printf_i+0x40>)
 800cc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc84:	0800ccdd 	.word	0x0800ccdd
 800cc88:	0800ccf1 	.word	0x0800ccf1
 800cc8c:	0800cc6d 	.word	0x0800cc6d
 800cc90:	0800cc6d 	.word	0x0800cc6d
 800cc94:	0800cc6d 	.word	0x0800cc6d
 800cc98:	0800cc6d 	.word	0x0800cc6d
 800cc9c:	0800ccf1 	.word	0x0800ccf1
 800cca0:	0800cc6d 	.word	0x0800cc6d
 800cca4:	0800cc6d 	.word	0x0800cc6d
 800cca8:	0800cc6d 	.word	0x0800cc6d
 800ccac:	0800cc6d 	.word	0x0800cc6d
 800ccb0:	0800cdfd 	.word	0x0800cdfd
 800ccb4:	0800cd21 	.word	0x0800cd21
 800ccb8:	0800cddf 	.word	0x0800cddf
 800ccbc:	0800cc6d 	.word	0x0800cc6d
 800ccc0:	0800cc6d 	.word	0x0800cc6d
 800ccc4:	0800ce1f 	.word	0x0800ce1f
 800ccc8:	0800cc6d 	.word	0x0800cc6d
 800cccc:	0800cd21 	.word	0x0800cd21
 800ccd0:	0800cc6d 	.word	0x0800cc6d
 800ccd4:	0800cc6d 	.word	0x0800cc6d
 800ccd8:	0800cde7 	.word	0x0800cde7
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	1d1a      	adds	r2, r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	602a      	str	r2, [r5, #0]
 800cce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccec:	2301      	movs	r3, #1
 800ccee:	e0a3      	b.n	800ce38 <_printf_i+0x1f4>
 800ccf0:	6820      	ldr	r0, [r4, #0]
 800ccf2:	6829      	ldr	r1, [r5, #0]
 800ccf4:	0606      	lsls	r6, r0, #24
 800ccf6:	f101 0304 	add.w	r3, r1, #4
 800ccfa:	d50a      	bpl.n	800cd12 <_printf_i+0xce>
 800ccfc:	680e      	ldr	r6, [r1, #0]
 800ccfe:	602b      	str	r3, [r5, #0]
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	da03      	bge.n	800cd0c <_printf_i+0xc8>
 800cd04:	232d      	movs	r3, #45	; 0x2d
 800cd06:	4276      	negs	r6, r6
 800cd08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd0c:	485e      	ldr	r0, [pc, #376]	; (800ce88 <_printf_i+0x244>)
 800cd0e:	230a      	movs	r3, #10
 800cd10:	e019      	b.n	800cd46 <_printf_i+0x102>
 800cd12:	680e      	ldr	r6, [r1, #0]
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd1a:	bf18      	it	ne
 800cd1c:	b236      	sxthne	r6, r6
 800cd1e:	e7ef      	b.n	800cd00 <_printf_i+0xbc>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	6820      	ldr	r0, [r4, #0]
 800cd24:	1d19      	adds	r1, r3, #4
 800cd26:	6029      	str	r1, [r5, #0]
 800cd28:	0601      	lsls	r1, r0, #24
 800cd2a:	d501      	bpl.n	800cd30 <_printf_i+0xec>
 800cd2c:	681e      	ldr	r6, [r3, #0]
 800cd2e:	e002      	b.n	800cd36 <_printf_i+0xf2>
 800cd30:	0646      	lsls	r6, r0, #25
 800cd32:	d5fb      	bpl.n	800cd2c <_printf_i+0xe8>
 800cd34:	881e      	ldrh	r6, [r3, #0]
 800cd36:	4854      	ldr	r0, [pc, #336]	; (800ce88 <_printf_i+0x244>)
 800cd38:	2f6f      	cmp	r7, #111	; 0x6f
 800cd3a:	bf0c      	ite	eq
 800cd3c:	2308      	moveq	r3, #8
 800cd3e:	230a      	movne	r3, #10
 800cd40:	2100      	movs	r1, #0
 800cd42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd46:	6865      	ldr	r5, [r4, #4]
 800cd48:	60a5      	str	r5, [r4, #8]
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	bfa2      	ittt	ge
 800cd4e:	6821      	ldrge	r1, [r4, #0]
 800cd50:	f021 0104 	bicge.w	r1, r1, #4
 800cd54:	6021      	strge	r1, [r4, #0]
 800cd56:	b90e      	cbnz	r6, 800cd5c <_printf_i+0x118>
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	d04d      	beq.n	800cdf8 <_printf_i+0x1b4>
 800cd5c:	4615      	mov	r5, r2
 800cd5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd62:	fb03 6711 	mls	r7, r3, r1, r6
 800cd66:	5dc7      	ldrb	r7, [r0, r7]
 800cd68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	42bb      	cmp	r3, r7
 800cd70:	460e      	mov	r6, r1
 800cd72:	d9f4      	bls.n	800cd5e <_printf_i+0x11a>
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d10b      	bne.n	800cd90 <_printf_i+0x14c>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	07de      	lsls	r6, r3, #31
 800cd7c:	d508      	bpl.n	800cd90 <_printf_i+0x14c>
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	6861      	ldr	r1, [r4, #4]
 800cd82:	4299      	cmp	r1, r3
 800cd84:	bfde      	ittt	le
 800cd86:	2330      	movle	r3, #48	; 0x30
 800cd88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd90:	1b52      	subs	r2, r2, r5
 800cd92:	6122      	str	r2, [r4, #16]
 800cd94:	f8cd a000 	str.w	sl, [sp]
 800cd98:	464b      	mov	r3, r9
 800cd9a:	aa03      	add	r2, sp, #12
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4640      	mov	r0, r8
 800cda0:	f7ff fee2 	bl	800cb68 <_printf_common>
 800cda4:	3001      	adds	r0, #1
 800cda6:	d14c      	bne.n	800ce42 <_printf_i+0x1fe>
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdac:	b004      	add	sp, #16
 800cdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb2:	4835      	ldr	r0, [pc, #212]	; (800ce88 <_printf_i+0x244>)
 800cdb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cdb8:	6829      	ldr	r1, [r5, #0]
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdc0:	6029      	str	r1, [r5, #0]
 800cdc2:	061d      	lsls	r5, r3, #24
 800cdc4:	d514      	bpl.n	800cdf0 <_printf_i+0x1ac>
 800cdc6:	07df      	lsls	r7, r3, #31
 800cdc8:	bf44      	itt	mi
 800cdca:	f043 0320 	orrmi.w	r3, r3, #32
 800cdce:	6023      	strmi	r3, [r4, #0]
 800cdd0:	b91e      	cbnz	r6, 800cdda <_printf_i+0x196>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	f023 0320 	bic.w	r3, r3, #32
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	2310      	movs	r3, #16
 800cddc:	e7b0      	b.n	800cd40 <_printf_i+0xfc>
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	f043 0320 	orr.w	r3, r3, #32
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	2378      	movs	r3, #120	; 0x78
 800cde8:	4828      	ldr	r0, [pc, #160]	; (800ce8c <_printf_i+0x248>)
 800cdea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdee:	e7e3      	b.n	800cdb8 <_printf_i+0x174>
 800cdf0:	0659      	lsls	r1, r3, #25
 800cdf2:	bf48      	it	mi
 800cdf4:	b2b6      	uxthmi	r6, r6
 800cdf6:	e7e6      	b.n	800cdc6 <_printf_i+0x182>
 800cdf8:	4615      	mov	r5, r2
 800cdfa:	e7bb      	b.n	800cd74 <_printf_i+0x130>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	6826      	ldr	r6, [r4, #0]
 800ce00:	6961      	ldr	r1, [r4, #20]
 800ce02:	1d18      	adds	r0, r3, #4
 800ce04:	6028      	str	r0, [r5, #0]
 800ce06:	0635      	lsls	r5, r6, #24
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	d501      	bpl.n	800ce10 <_printf_i+0x1cc>
 800ce0c:	6019      	str	r1, [r3, #0]
 800ce0e:	e002      	b.n	800ce16 <_printf_i+0x1d2>
 800ce10:	0670      	lsls	r0, r6, #25
 800ce12:	d5fb      	bpl.n	800ce0c <_printf_i+0x1c8>
 800ce14:	8019      	strh	r1, [r3, #0]
 800ce16:	2300      	movs	r3, #0
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	4615      	mov	r5, r2
 800ce1c:	e7ba      	b.n	800cd94 <_printf_i+0x150>
 800ce1e:	682b      	ldr	r3, [r5, #0]
 800ce20:	1d1a      	adds	r2, r3, #4
 800ce22:	602a      	str	r2, [r5, #0]
 800ce24:	681d      	ldr	r5, [r3, #0]
 800ce26:	6862      	ldr	r2, [r4, #4]
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f7f3 fa60 	bl	80002f0 <memchr>
 800ce30:	b108      	cbz	r0, 800ce36 <_printf_i+0x1f2>
 800ce32:	1b40      	subs	r0, r0, r5
 800ce34:	6060      	str	r0, [r4, #4]
 800ce36:	6863      	ldr	r3, [r4, #4]
 800ce38:	6123      	str	r3, [r4, #16]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce40:	e7a8      	b.n	800cd94 <_printf_i+0x150>
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	462a      	mov	r2, r5
 800ce46:	4649      	mov	r1, r9
 800ce48:	4640      	mov	r0, r8
 800ce4a:	47d0      	blx	sl
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d0ab      	beq.n	800cda8 <_printf_i+0x164>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	079b      	lsls	r3, r3, #30
 800ce54:	d413      	bmi.n	800ce7e <_printf_i+0x23a>
 800ce56:	68e0      	ldr	r0, [r4, #12]
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	bfb8      	it	lt
 800ce5e:	4618      	movlt	r0, r3
 800ce60:	e7a4      	b.n	800cdac <_printf_i+0x168>
 800ce62:	2301      	movs	r3, #1
 800ce64:	4632      	mov	r2, r6
 800ce66:	4649      	mov	r1, r9
 800ce68:	4640      	mov	r0, r8
 800ce6a:	47d0      	blx	sl
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d09b      	beq.n	800cda8 <_printf_i+0x164>
 800ce70:	3501      	adds	r5, #1
 800ce72:	68e3      	ldr	r3, [r4, #12]
 800ce74:	9903      	ldr	r1, [sp, #12]
 800ce76:	1a5b      	subs	r3, r3, r1
 800ce78:	42ab      	cmp	r3, r5
 800ce7a:	dcf2      	bgt.n	800ce62 <_printf_i+0x21e>
 800ce7c:	e7eb      	b.n	800ce56 <_printf_i+0x212>
 800ce7e:	2500      	movs	r5, #0
 800ce80:	f104 0619 	add.w	r6, r4, #25
 800ce84:	e7f5      	b.n	800ce72 <_printf_i+0x22e>
 800ce86:	bf00      	nop
 800ce88:	0800e681 	.word	0x0800e681
 800ce8c:	0800e692 	.word	0x0800e692

0800ce90 <memcpy>:
 800ce90:	440a      	add	r2, r1
 800ce92:	4291      	cmp	r1, r2
 800ce94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce98:	d100      	bne.n	800ce9c <memcpy+0xc>
 800ce9a:	4770      	bx	lr
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cea6:	4291      	cmp	r1, r2
 800cea8:	d1f9      	bne.n	800ce9e <memcpy+0xe>
 800ceaa:	bd10      	pop	{r4, pc}

0800ceac <memmove>:
 800ceac:	4288      	cmp	r0, r1
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	eb01 0402 	add.w	r4, r1, r2
 800ceb4:	d902      	bls.n	800cebc <memmove+0x10>
 800ceb6:	4284      	cmp	r4, r0
 800ceb8:	4623      	mov	r3, r4
 800ceba:	d807      	bhi.n	800cecc <memmove+0x20>
 800cebc:	1e43      	subs	r3, r0, #1
 800cebe:	42a1      	cmp	r1, r4
 800cec0:	d008      	beq.n	800ced4 <memmove+0x28>
 800cec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceca:	e7f8      	b.n	800cebe <memmove+0x12>
 800cecc:	4402      	add	r2, r0
 800cece:	4601      	mov	r1, r0
 800ced0:	428a      	cmp	r2, r1
 800ced2:	d100      	bne.n	800ced6 <memmove+0x2a>
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cede:	e7f7      	b.n	800ced0 <memmove+0x24>

0800cee0 <_free_r>:
 800cee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cee2:	2900      	cmp	r1, #0
 800cee4:	d044      	beq.n	800cf70 <_free_r+0x90>
 800cee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceea:	9001      	str	r0, [sp, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f1a1 0404 	sub.w	r4, r1, #4
 800cef2:	bfb8      	it	lt
 800cef4:	18e4      	addlt	r4, r4, r3
 800cef6:	f000 f913 	bl	800d120 <__malloc_lock>
 800cefa:	4a1e      	ldr	r2, [pc, #120]	; (800cf74 <_free_r+0x94>)
 800cefc:	9801      	ldr	r0, [sp, #4]
 800cefe:	6813      	ldr	r3, [r2, #0]
 800cf00:	b933      	cbnz	r3, 800cf10 <_free_r+0x30>
 800cf02:	6063      	str	r3, [r4, #4]
 800cf04:	6014      	str	r4, [r2, #0]
 800cf06:	b003      	add	sp, #12
 800cf08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf0c:	f000 b90e 	b.w	800d12c <__malloc_unlock>
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	d908      	bls.n	800cf26 <_free_r+0x46>
 800cf14:	6825      	ldr	r5, [r4, #0]
 800cf16:	1961      	adds	r1, r4, r5
 800cf18:	428b      	cmp	r3, r1
 800cf1a:	bf01      	itttt	eq
 800cf1c:	6819      	ldreq	r1, [r3, #0]
 800cf1e:	685b      	ldreq	r3, [r3, #4]
 800cf20:	1949      	addeq	r1, r1, r5
 800cf22:	6021      	streq	r1, [r4, #0]
 800cf24:	e7ed      	b.n	800cf02 <_free_r+0x22>
 800cf26:	461a      	mov	r2, r3
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	b10b      	cbz	r3, 800cf30 <_free_r+0x50>
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	d9fa      	bls.n	800cf26 <_free_r+0x46>
 800cf30:	6811      	ldr	r1, [r2, #0]
 800cf32:	1855      	adds	r5, r2, r1
 800cf34:	42a5      	cmp	r5, r4
 800cf36:	d10b      	bne.n	800cf50 <_free_r+0x70>
 800cf38:	6824      	ldr	r4, [r4, #0]
 800cf3a:	4421      	add	r1, r4
 800cf3c:	1854      	adds	r4, r2, r1
 800cf3e:	42a3      	cmp	r3, r4
 800cf40:	6011      	str	r1, [r2, #0]
 800cf42:	d1e0      	bne.n	800cf06 <_free_r+0x26>
 800cf44:	681c      	ldr	r4, [r3, #0]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	6053      	str	r3, [r2, #4]
 800cf4a:	4421      	add	r1, r4
 800cf4c:	6011      	str	r1, [r2, #0]
 800cf4e:	e7da      	b.n	800cf06 <_free_r+0x26>
 800cf50:	d902      	bls.n	800cf58 <_free_r+0x78>
 800cf52:	230c      	movs	r3, #12
 800cf54:	6003      	str	r3, [r0, #0]
 800cf56:	e7d6      	b.n	800cf06 <_free_r+0x26>
 800cf58:	6825      	ldr	r5, [r4, #0]
 800cf5a:	1961      	adds	r1, r4, r5
 800cf5c:	428b      	cmp	r3, r1
 800cf5e:	bf04      	itt	eq
 800cf60:	6819      	ldreq	r1, [r3, #0]
 800cf62:	685b      	ldreq	r3, [r3, #4]
 800cf64:	6063      	str	r3, [r4, #4]
 800cf66:	bf04      	itt	eq
 800cf68:	1949      	addeq	r1, r1, r5
 800cf6a:	6021      	streq	r1, [r4, #0]
 800cf6c:	6054      	str	r4, [r2, #4]
 800cf6e:	e7ca      	b.n	800cf06 <_free_r+0x26>
 800cf70:	b003      	add	sp, #12
 800cf72:	bd30      	pop	{r4, r5, pc}
 800cf74:	24001950 	.word	0x24001950

0800cf78 <sbrk_aligned>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4e0e      	ldr	r6, [pc, #56]	; (800cfb4 <sbrk_aligned+0x3c>)
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	6831      	ldr	r1, [r6, #0]
 800cf80:	4605      	mov	r5, r0
 800cf82:	b911      	cbnz	r1, 800cf8a <sbrk_aligned+0x12>
 800cf84:	f000 f8bc 	bl	800d100 <_sbrk_r>
 800cf88:	6030      	str	r0, [r6, #0]
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 f8b7 	bl	800d100 <_sbrk_r>
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	d00a      	beq.n	800cfac <sbrk_aligned+0x34>
 800cf96:	1cc4      	adds	r4, r0, #3
 800cf98:	f024 0403 	bic.w	r4, r4, #3
 800cf9c:	42a0      	cmp	r0, r4
 800cf9e:	d007      	beq.n	800cfb0 <sbrk_aligned+0x38>
 800cfa0:	1a21      	subs	r1, r4, r0
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f000 f8ac 	bl	800d100 <_sbrk_r>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d101      	bne.n	800cfb0 <sbrk_aligned+0x38>
 800cfac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	24001954 	.word	0x24001954

0800cfb8 <_malloc_r>:
 800cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbc:	1ccd      	adds	r5, r1, #3
 800cfbe:	f025 0503 	bic.w	r5, r5, #3
 800cfc2:	3508      	adds	r5, #8
 800cfc4:	2d0c      	cmp	r5, #12
 800cfc6:	bf38      	it	cc
 800cfc8:	250c      	movcc	r5, #12
 800cfca:	2d00      	cmp	r5, #0
 800cfcc:	4607      	mov	r7, r0
 800cfce:	db01      	blt.n	800cfd4 <_malloc_r+0x1c>
 800cfd0:	42a9      	cmp	r1, r5
 800cfd2:	d905      	bls.n	800cfe0 <_malloc_r+0x28>
 800cfd4:	230c      	movs	r3, #12
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	2600      	movs	r6, #0
 800cfda:	4630      	mov	r0, r6
 800cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe0:	4e2e      	ldr	r6, [pc, #184]	; (800d09c <_malloc_r+0xe4>)
 800cfe2:	f000 f89d 	bl	800d120 <__malloc_lock>
 800cfe6:	6833      	ldr	r3, [r6, #0]
 800cfe8:	461c      	mov	r4, r3
 800cfea:	bb34      	cbnz	r4, 800d03a <_malloc_r+0x82>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4638      	mov	r0, r7
 800cff0:	f7ff ffc2 	bl	800cf78 <sbrk_aligned>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	4604      	mov	r4, r0
 800cff8:	d14d      	bne.n	800d096 <_malloc_r+0xde>
 800cffa:	6834      	ldr	r4, [r6, #0]
 800cffc:	4626      	mov	r6, r4
 800cffe:	2e00      	cmp	r6, #0
 800d000:	d140      	bne.n	800d084 <_malloc_r+0xcc>
 800d002:	6823      	ldr	r3, [r4, #0]
 800d004:	4631      	mov	r1, r6
 800d006:	4638      	mov	r0, r7
 800d008:	eb04 0803 	add.w	r8, r4, r3
 800d00c:	f000 f878 	bl	800d100 <_sbrk_r>
 800d010:	4580      	cmp	r8, r0
 800d012:	d13a      	bne.n	800d08a <_malloc_r+0xd2>
 800d014:	6821      	ldr	r1, [r4, #0]
 800d016:	3503      	adds	r5, #3
 800d018:	1a6d      	subs	r5, r5, r1
 800d01a:	f025 0503 	bic.w	r5, r5, #3
 800d01e:	3508      	adds	r5, #8
 800d020:	2d0c      	cmp	r5, #12
 800d022:	bf38      	it	cc
 800d024:	250c      	movcc	r5, #12
 800d026:	4629      	mov	r1, r5
 800d028:	4638      	mov	r0, r7
 800d02a:	f7ff ffa5 	bl	800cf78 <sbrk_aligned>
 800d02e:	3001      	adds	r0, #1
 800d030:	d02b      	beq.n	800d08a <_malloc_r+0xd2>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	442b      	add	r3, r5
 800d036:	6023      	str	r3, [r4, #0]
 800d038:	e00e      	b.n	800d058 <_malloc_r+0xa0>
 800d03a:	6822      	ldr	r2, [r4, #0]
 800d03c:	1b52      	subs	r2, r2, r5
 800d03e:	d41e      	bmi.n	800d07e <_malloc_r+0xc6>
 800d040:	2a0b      	cmp	r2, #11
 800d042:	d916      	bls.n	800d072 <_malloc_r+0xba>
 800d044:	1961      	adds	r1, r4, r5
 800d046:	42a3      	cmp	r3, r4
 800d048:	6025      	str	r5, [r4, #0]
 800d04a:	bf18      	it	ne
 800d04c:	6059      	strne	r1, [r3, #4]
 800d04e:	6863      	ldr	r3, [r4, #4]
 800d050:	bf08      	it	eq
 800d052:	6031      	streq	r1, [r6, #0]
 800d054:	5162      	str	r2, [r4, r5]
 800d056:	604b      	str	r3, [r1, #4]
 800d058:	4638      	mov	r0, r7
 800d05a:	f104 060b 	add.w	r6, r4, #11
 800d05e:	f000 f865 	bl	800d12c <__malloc_unlock>
 800d062:	f026 0607 	bic.w	r6, r6, #7
 800d066:	1d23      	adds	r3, r4, #4
 800d068:	1af2      	subs	r2, r6, r3
 800d06a:	d0b6      	beq.n	800cfda <_malloc_r+0x22>
 800d06c:	1b9b      	subs	r3, r3, r6
 800d06e:	50a3      	str	r3, [r4, r2]
 800d070:	e7b3      	b.n	800cfda <_malloc_r+0x22>
 800d072:	6862      	ldr	r2, [r4, #4]
 800d074:	42a3      	cmp	r3, r4
 800d076:	bf0c      	ite	eq
 800d078:	6032      	streq	r2, [r6, #0]
 800d07a:	605a      	strne	r2, [r3, #4]
 800d07c:	e7ec      	b.n	800d058 <_malloc_r+0xa0>
 800d07e:	4623      	mov	r3, r4
 800d080:	6864      	ldr	r4, [r4, #4]
 800d082:	e7b2      	b.n	800cfea <_malloc_r+0x32>
 800d084:	4634      	mov	r4, r6
 800d086:	6876      	ldr	r6, [r6, #4]
 800d088:	e7b9      	b.n	800cffe <_malloc_r+0x46>
 800d08a:	230c      	movs	r3, #12
 800d08c:	603b      	str	r3, [r7, #0]
 800d08e:	4638      	mov	r0, r7
 800d090:	f000 f84c 	bl	800d12c <__malloc_unlock>
 800d094:	e7a1      	b.n	800cfda <_malloc_r+0x22>
 800d096:	6025      	str	r5, [r4, #0]
 800d098:	e7de      	b.n	800d058 <_malloc_r+0xa0>
 800d09a:	bf00      	nop
 800d09c:	24001950 	.word	0x24001950

0800d0a0 <_realloc_r>:
 800d0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	4614      	mov	r4, r2
 800d0a8:	460e      	mov	r6, r1
 800d0aa:	b921      	cbnz	r1, 800d0b6 <_realloc_r+0x16>
 800d0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	f7ff bf81 	b.w	800cfb8 <_malloc_r>
 800d0b6:	b92a      	cbnz	r2, 800d0c4 <_realloc_r+0x24>
 800d0b8:	f7ff ff12 	bl	800cee0 <_free_r>
 800d0bc:	4625      	mov	r5, r4
 800d0be:	4628      	mov	r0, r5
 800d0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c4:	f000 f838 	bl	800d138 <_malloc_usable_size_r>
 800d0c8:	4284      	cmp	r4, r0
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	d802      	bhi.n	800d0d4 <_realloc_r+0x34>
 800d0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0d2:	d812      	bhi.n	800d0fa <_realloc_r+0x5a>
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	f7ff ff6e 	bl	800cfb8 <_malloc_r>
 800d0dc:	4605      	mov	r5, r0
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d0ed      	beq.n	800d0be <_realloc_r+0x1e>
 800d0e2:	42bc      	cmp	r4, r7
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	bf28      	it	cs
 800d0ea:	463a      	movcs	r2, r7
 800d0ec:	f7ff fed0 	bl	800ce90 <memcpy>
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4640      	mov	r0, r8
 800d0f4:	f7ff fef4 	bl	800cee0 <_free_r>
 800d0f8:	e7e1      	b.n	800d0be <_realloc_r+0x1e>
 800d0fa:	4635      	mov	r5, r6
 800d0fc:	e7df      	b.n	800d0be <_realloc_r+0x1e>
	...

0800d100 <_sbrk_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d06      	ldr	r5, [pc, #24]	; (800d11c <_sbrk_r+0x1c>)
 800d104:	2300      	movs	r3, #0
 800d106:	4604      	mov	r4, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	602b      	str	r3, [r5, #0]
 800d10c:	f7f6 fa9c 	bl	8003648 <_sbrk>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_sbrk_r+0x1a>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_sbrk_r+0x1a>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	24001958 	.word	0x24001958

0800d120 <__malloc_lock>:
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <__malloc_lock+0x8>)
 800d122:	f000 b811 	b.w	800d148 <__retarget_lock_acquire_recursive>
 800d126:	bf00      	nop
 800d128:	2400195c 	.word	0x2400195c

0800d12c <__malloc_unlock>:
 800d12c:	4801      	ldr	r0, [pc, #4]	; (800d134 <__malloc_unlock+0x8>)
 800d12e:	f000 b80c 	b.w	800d14a <__retarget_lock_release_recursive>
 800d132:	bf00      	nop
 800d134:	2400195c 	.word	0x2400195c

0800d138 <_malloc_usable_size_r>:
 800d138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d13c:	1f18      	subs	r0, r3, #4
 800d13e:	2b00      	cmp	r3, #0
 800d140:	bfbc      	itt	lt
 800d142:	580b      	ldrlt	r3, [r1, r0]
 800d144:	18c0      	addlt	r0, r0, r3
 800d146:	4770      	bx	lr

0800d148 <__retarget_lock_acquire_recursive>:
 800d148:	4770      	bx	lr

0800d14a <__retarget_lock_release_recursive>:
 800d14a:	4770      	bx	lr

0800d14c <checkint>:
 800d14c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d150:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800d154:	429a      	cmp	r2, r3
 800d156:	b570      	push	{r4, r5, r6, lr}
 800d158:	dd2a      	ble.n	800d1b0 <checkint+0x64>
 800d15a:	f240 4333 	movw	r3, #1075	; 0x433
 800d15e:	429a      	cmp	r2, r3
 800d160:	dc24      	bgt.n	800d1ac <checkint+0x60>
 800d162:	1a9b      	subs	r3, r3, r2
 800d164:	f1a3 0620 	sub.w	r6, r3, #32
 800d168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d16c:	fa02 f403 	lsl.w	r4, r2, r3
 800d170:	fa02 f606 	lsl.w	r6, r2, r6
 800d174:	f1c3 0520 	rsb	r5, r3, #32
 800d178:	fa22 f505 	lsr.w	r5, r2, r5
 800d17c:	4334      	orrs	r4, r6
 800d17e:	432c      	orrs	r4, r5
 800d180:	409a      	lsls	r2, r3
 800d182:	ea20 0202 	bic.w	r2, r0, r2
 800d186:	ea21 0404 	bic.w	r4, r1, r4
 800d18a:	4322      	orrs	r2, r4
 800d18c:	f1a3 0420 	sub.w	r4, r3, #32
 800d190:	f1c3 0220 	rsb	r2, r3, #32
 800d194:	d10c      	bne.n	800d1b0 <checkint+0x64>
 800d196:	40d8      	lsrs	r0, r3
 800d198:	fa01 f302 	lsl.w	r3, r1, r2
 800d19c:	4318      	orrs	r0, r3
 800d19e:	40e1      	lsrs	r1, r4
 800d1a0:	4308      	orrs	r0, r1
 800d1a2:	f000 0001 	and.w	r0, r0, #1
 800d1a6:	f1d0 0002 	rsbs	r0, r0, #2
 800d1aa:	bd70      	pop	{r4, r5, r6, pc}
 800d1ac:	2002      	movs	r0, #2
 800d1ae:	e7fc      	b.n	800d1aa <checkint+0x5e>
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	e7fa      	b.n	800d1aa <checkint+0x5e>
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <pow>:
 800d1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1bc:	ee10 4a90 	vmov	r4, s1
 800d1c0:	ed2d 8b0a 	vpush	{d8-d12}
 800d1c4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800d1c8:	ee11 7a90 	vmov	r7, s3
 800d1cc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800d1d0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	ee10 6a10 	vmov	r6, s0
 800d1da:	ee11 0a10 	vmov	r0, s2
 800d1de:	b086      	sub	sp, #24
 800d1e0:	46d4      	mov	ip, sl
 800d1e2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800d1e6:	d806      	bhi.n	800d1f6 <pow+0x3e>
 800d1e8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800d1ec:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800d1f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1f2:	f240 8156 	bls.w	800d4a2 <pow+0x2ea>
 800d1f6:	1802      	adds	r2, r0, r0
 800d1f8:	eb47 0107 	adc.w	r1, r7, r7
 800d1fc:	f06f 0e01 	mvn.w	lr, #1
 800d200:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800d204:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800d208:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800d20c:	45ce      	cmp	lr, r9
 800d20e:	eb73 0808 	sbcs.w	r8, r3, r8
 800d212:	d23f      	bcs.n	800d294 <pow+0xdc>
 800d214:	ea52 0301 	orrs.w	r3, r2, r1
 800d218:	f04f 0300 	mov.w	r3, #0
 800d21c:	d10c      	bne.n	800d238 <pow+0x80>
 800d21e:	19b6      	adds	r6, r6, r6
 800d220:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800d224:	4164      	adcs	r4, r4
 800d226:	42b3      	cmp	r3, r6
 800d228:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d22c:	41a3      	sbcs	r3, r4
 800d22e:	f0c0 808c 	bcc.w	800d34a <pow+0x192>
 800d232:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d236:	e028      	b.n	800d28a <pow+0xd2>
 800d238:	4da3      	ldr	r5, [pc, #652]	; (800d4c8 <pow+0x310>)
 800d23a:	42ac      	cmp	r4, r5
 800d23c:	bf08      	it	eq
 800d23e:	429e      	cmpeq	r6, r3
 800d240:	d107      	bne.n	800d252 <pow+0x9a>
 800d242:	1800      	adds	r0, r0, r0
 800d244:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800d248:	417f      	adcs	r7, r7
 800d24a:	4283      	cmp	r3, r0
 800d24c:	4b9f      	ldr	r3, [pc, #636]	; (800d4cc <pow+0x314>)
 800d24e:	41bb      	sbcs	r3, r7
 800d250:	e7ed      	b.n	800d22e <pow+0x76>
 800d252:	19b6      	adds	r6, r6, r6
 800d254:	489e      	ldr	r0, [pc, #632]	; (800d4d0 <pow+0x318>)
 800d256:	4164      	adcs	r4, r4
 800d258:	42b3      	cmp	r3, r6
 800d25a:	eb70 0504 	sbcs.w	r5, r0, r4
 800d25e:	d374      	bcc.n	800d34a <pow+0x192>
 800d260:	4281      	cmp	r1, r0
 800d262:	bf08      	it	eq
 800d264:	429a      	cmpeq	r2, r3
 800d266:	d170      	bne.n	800d34a <pow+0x192>
 800d268:	4a9a      	ldr	r2, [pc, #616]	; (800d4d4 <pow+0x31c>)
 800d26a:	4294      	cmp	r4, r2
 800d26c:	bf08      	it	eq
 800d26e:	429e      	cmpeq	r6, r3
 800d270:	d0df      	beq.n	800d232 <pow+0x7a>
 800d272:	4294      	cmp	r4, r2
 800d274:	ea6f 0707 	mvn.w	r7, r7
 800d278:	bf34      	ite	cc
 800d27a:	2400      	movcc	r4, #0
 800d27c:	2401      	movcs	r4, #1
 800d27e:	0fff      	lsrs	r7, r7, #31
 800d280:	42bc      	cmp	r4, r7
 800d282:	f040 81d9 	bne.w	800d638 <pow+0x480>
 800d286:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d28a:	b006      	add	sp, #24
 800d28c:	ecbd 8b0a 	vpop	{d8-d12}
 800d290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d294:	eb16 0806 	adds.w	r8, r6, r6
 800d298:	eb44 0904 	adc.w	r9, r4, r4
 800d29c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800d2a0:	f169 0200 	sbc.w	r2, r9, #0
 800d2a4:	458e      	cmp	lr, r1
 800d2a6:	4193      	sbcs	r3, r2
 800d2a8:	d223      	bcs.n	800d2f2 <pow+0x13a>
 800d2aa:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	da12      	bge.n	800d2d8 <pow+0x120>
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7ff ff4a 	bl	800d14c <checkint>
 800d2b8:	2801      	cmp	r0, #1
 800d2ba:	d10d      	bne.n	800d2d8 <pow+0x120>
 800d2bc:	eeb1 0b40 	vneg.f64	d0, d0
 800d2c0:	ea58 0309 	orrs.w	r3, r8, r9
 800d2c4:	d10a      	bne.n	800d2dc <pow+0x124>
 800d2c6:	2f00      	cmp	r7, #0
 800d2c8:	dadf      	bge.n	800d28a <pow+0xd2>
 800d2ca:	b006      	add	sp, #24
 800d2cc:	ecbd 8b0a 	vpop	{d8-d12}
 800d2d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d4:	f001 b83c 	b.w	800e350 <__math_divzero>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	e7f1      	b.n	800d2c0 <pow+0x108>
 800d2dc:	2f00      	cmp	r7, #0
 800d2de:	dad4      	bge.n	800d28a <pow+0xd2>
 800d2e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d2e4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d2e8:	ed8d 7b00 	vstr	d7, [sp]
 800d2ec:	ed9d 0b00 	vldr	d0, [sp]
 800d2f0:	e7cb      	b.n	800d28a <pow+0xd2>
 800d2f2:	2c00      	cmp	r4, #0
 800d2f4:	da2c      	bge.n	800d350 <pow+0x198>
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7ff ff28 	bl	800d14c <checkint>
 800d2fc:	b930      	cbnz	r0, 800d30c <pow+0x154>
 800d2fe:	b006      	add	sp, #24
 800d300:	ecbd 8b0a 	vpop	{d8-d12}
 800d304:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d308:	f001 b83a 	b.w	800e380 <__math_invalid>
 800d30c:	2801      	cmp	r0, #1
 800d30e:	bf14      	ite	ne
 800d310:	2000      	movne	r0, #0
 800d312:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800d316:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d31a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800d31e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800d322:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800d326:	2b7f      	cmp	r3, #127	; 0x7f
 800d328:	d92d      	bls.n	800d386 <pow+0x1ce>
 800d32a:	4b67      	ldr	r3, [pc, #412]	; (800d4c8 <pow+0x310>)
 800d32c:	2000      	movs	r0, #0
 800d32e:	429c      	cmp	r4, r3
 800d330:	bf08      	it	eq
 800d332:	4286      	cmpeq	r6, r0
 800d334:	f43f af7d 	beq.w	800d232 <pow+0x7a>
 800d338:	f240 31bd 	movw	r1, #957	; 0x3bd
 800d33c:	428a      	cmp	r2, r1
 800d33e:	d80c      	bhi.n	800d35a <pow+0x1a2>
 800d340:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d344:	42b0      	cmp	r0, r6
 800d346:	41a3      	sbcs	r3, r4
 800d348:	d204      	bcs.n	800d354 <pow+0x19c>
 800d34a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d34e:	e79c      	b.n	800d28a <pow+0xd2>
 800d350:	2000      	movs	r0, #0
 800d352:	e7e4      	b.n	800d31e <pow+0x166>
 800d354:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d358:	e797      	b.n	800d28a <pow+0xd2>
 800d35a:	2e01      	cmp	r6, #1
 800d35c:	eb74 0303 	sbcs.w	r3, r4, r3
 800d360:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d364:	bf34      	ite	cc
 800d366:	2301      	movcc	r3, #1
 800d368:	2300      	movcs	r3, #0
 800d36a:	4295      	cmp	r5, r2
 800d36c:	bf8c      	ite	hi
 800d36e:	2500      	movhi	r5, #0
 800d370:	2501      	movls	r5, #1
 800d372:	42ab      	cmp	r3, r5
 800d374:	f000 809d 	beq.w	800d4b2 <pow+0x2fa>
 800d378:	b006      	add	sp, #24
 800d37a:	ecbd 8b0a 	vpop	{d8-d12}
 800d37e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d382:	f000 bfdd 	b.w	800e340 <__math_oflow>
 800d386:	f1bc 0f00 	cmp.w	ip, #0
 800d38a:	d10b      	bne.n	800d3a4 <pow+0x1ec>
 800d38c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800d4c0 <pow+0x308>
 800d390:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d394:	ec53 2b17 	vmov	r2, r3, d7
 800d398:	ee17 6a10 	vmov	r6, s14
 800d39c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d3a0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800d3a4:	4b4c      	ldr	r3, [pc, #304]	; (800d4d8 <pow+0x320>)
 800d3a6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d3aa:	4423      	add	r3, r4
 800d3ac:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d3b0:	1519      	asrs	r1, r3, #20
 800d3b2:	0d1b      	lsrs	r3, r3, #20
 800d3b4:	051b      	lsls	r3, r3, #20
 800d3b6:	eba4 0903 	sub.w	r9, r4, r3
 800d3ba:	4b48      	ldr	r3, [pc, #288]	; (800d4dc <pow+0x324>)
 800d3bc:	ee04 1a10 	vmov	s8, r1
 800d3c0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800d3c4:	f1b6 0800 	subs.w	r8, r6, #0
 800d3c8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800d3cc:	ec49 8b15 	vmov	d5, r8, r9
 800d3d0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800d3d4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d3d8:	ed93 7b00 	vldr	d7, [r3]
 800d3dc:	ed93 5b02 	vldr	d5, [r3, #8]
 800d3e0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800d3e4:	eea4 2b07 	vfma.f64	d2, d4, d7
 800d3e8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800d3ec:	ee36 ab02 	vadd.f64	d10, d6, d2
 800d3f0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800d3f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d3f8:	ed93 5b04 	vldr	d5, [r3, #16]
 800d3fc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d400:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d404:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d408:	ed93 4b08 	vldr	d4, [r3, #32]
 800d40c:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d410:	eeb0 9b40 	vmov.f64	d9, d0
 800d414:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800d418:	ed93 5b06 	vldr	d5, [r3, #24]
 800d41c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800d420:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d424:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800d428:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d42c:	ee3a ab48 	vsub.f64	d10, d10, d8
 800d430:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800d434:	ee37 9b09 	vadd.f64	d9, d7, d9
 800d438:	ee3a ab00 	vadd.f64	d10, d10, d0
 800d43c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d440:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d444:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800d448:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d44c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d450:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d454:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d458:	eeab ab05 	vfma.f64	d10, d11, d5
 800d45c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800d460:	ee21 7b06 	vmul.f64	d7, d1, d6
 800d464:	ee17 3a90 	vmov	r3, s15
 800d468:	eeb0 5b47 	vmov.f64	d5, d7
 800d46c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d470:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d474:	18b2      	adds	r2, r6, r2
 800d476:	2a3e      	cmp	r2, #62	; 0x3e
 800d478:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800d47c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800d480:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800d484:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800d488:	d92b      	bls.n	800d4e2 <pow+0x32a>
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	da0b      	bge.n	800d4a6 <pow+0x2ee>
 800d48e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d492:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d496:	2800      	cmp	r0, #0
 800d498:	f43f aef7 	beq.w	800d28a <pow+0xd2>
 800d49c:	eeb1 0b40 	vneg.f64	d0, d0
 800d4a0:	e6f3      	b.n	800d28a <pow+0xd2>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e77e      	b.n	800d3a4 <pow+0x1ec>
 800d4a6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d4aa:	d919      	bls.n	800d4e0 <pow+0x328>
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f6bf af63 	bge.w	800d378 <pow+0x1c0>
 800d4b2:	b006      	add	sp, #24
 800d4b4:	ecbd 8b0a 	vpop	{d8-d12}
 800d4b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4bc:	f000 bf38 	b.w	800e330 <__math_uflow>
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	43300000 	.word	0x43300000
 800d4c8:	3ff00000 	.word	0x3ff00000
 800d4cc:	fff00000 	.word	0xfff00000
 800d4d0:	ffe00000 	.word	0xffe00000
 800d4d4:	7fe00000 	.word	0x7fe00000
 800d4d8:	c0196aab 	.word	0xc0196aab
 800d4dc:	0800e6a8 	.word	0x0800e6a8
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	495d      	ldr	r1, [pc, #372]	; (800d658 <pow+0x4a0>)
 800d4e4:	ed91 4b02 	vldr	d4, [r1, #8]
 800d4e8:	ed91 3b00 	vldr	d3, [r1]
 800d4ec:	eeb0 6b44 	vmov.f64	d6, d4
 800d4f0:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d4f4:	ee16 5a10 	vmov	r5, s12
 800d4f8:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d4fc:	ed91 4b04 	vldr	d4, [r1, #16]
 800d500:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d504:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d508:	eeb0 0b47 	vmov.f64	d0, d7
 800d50c:	ed91 7b06 	vldr	d7, [r1, #24]
 800d510:	18dc      	adds	r4, r3, r3
 800d512:	f104 030f 	add.w	r3, r4, #15
 800d516:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d51a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d51e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d522:	ee35 0b00 	vadd.f64	d0, d5, d0
 800d526:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d52a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800d52e:	ed91 5b08 	vldr	d5, [r1, #32]
 800d532:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d536:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d53a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d53e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d542:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d546:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d54a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d54e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d552:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d556:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d55a:	1940      	adds	r0, r0, r5
 800d55c:	2700      	movs	r7, #0
 800d55e:	eb17 020c 	adds.w	r2, r7, ip
 800d562:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d566:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	d15f      	bne.n	800d62e <pow+0x476>
 800d56e:	42bd      	cmp	r5, r7
 800d570:	db13      	blt.n	800d59a <pow+0x3e2>
 800d572:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d576:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d57a:	4610      	mov	r0, r2
 800d57c:	ec41 0b10 	vmov	d0, r0, r1
 800d580:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d584:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d640 <pow+0x488>
 800d588:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d58c:	b006      	add	sp, #24
 800d58e:	ecbd 8b0a 	vpop	{d8-d12}
 800d592:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d596:	f000 bf0b 	b.w	800e3b0 <__math_check_oflow>
 800d59a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d59e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	ec41 0b15 	vmov	d5, r0, r1
 800d5a8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d5ac:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d5b0:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d5b4:	eeb0 3bc7 	vabs.f64	d3, d7
 800d5b8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800d5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d648 <pow+0x490>
 800d5c4:	d52a      	bpl.n	800d61c <pow+0x464>
 800d5c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5ca:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800d5d6:	ee35 6b06 	vadd.f64	d6, d5, d6
 800d5da:	bf48      	it	mi
 800d5dc:	eeb0 4b43 	vmovmi.f64	d4, d3
 800d5e0:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d5e4:	ee34 5b43 	vsub.f64	d5, d4, d3
 800d5e8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d5ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d5f0:	ee37 7b03 	vadd.f64	d7, d7, d3
 800d5f4:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d5f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	d104      	bne.n	800d60c <pow+0x454>
 800d602:	4632      	mov	r2, r6
 800d604:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d608:	ec43 2b17 	vmov	d7, r2, r3
 800d60c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d610:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d614:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d618:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d61c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d620:	b006      	add	sp, #24
 800d622:	ecbd 8b0a 	vpop	{d8-d12}
 800d626:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d62a:	f000 beb8 	b.w	800e39e <__math_check_uflow>
 800d62e:	ec43 2b10 	vmov	d0, r2, r3
 800d632:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d636:	e628      	b.n	800d28a <pow+0xd2>
 800d638:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d650 <pow+0x498>
 800d63c:	e625      	b.n	800d28a <pow+0xd2>
 800d63e:	bf00      	nop
 800d640:	00000000 	.word	0x00000000
 800d644:	7f000000 	.word	0x7f000000
 800d648:	00000000 	.word	0x00000000
 800d64c:	00100000 	.word	0x00100000
	...
 800d658:	0800f878 	.word	0x0800f878
 800d65c:	00000000 	.word	0x00000000

0800d660 <sin>:
 800d660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d662:	eeb0 7b40 	vmov.f64	d7, d0
 800d666:	ee17 3a90 	vmov	r3, s15
 800d66a:	4a21      	ldr	r2, [pc, #132]	; (800d6f0 <sin+0x90>)
 800d66c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d670:	4293      	cmp	r3, r2
 800d672:	dc07      	bgt.n	800d684 <sin+0x24>
 800d674:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800d6e8 <sin+0x88>
 800d678:	2000      	movs	r0, #0
 800d67a:	b005      	add	sp, #20
 800d67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d680:	f000 bde2 	b.w	800e248 <__kernel_sin>
 800d684:	4a1b      	ldr	r2, [pc, #108]	; (800d6f4 <sin+0x94>)
 800d686:	4293      	cmp	r3, r2
 800d688:	dd04      	ble.n	800d694 <sin+0x34>
 800d68a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d68e:	b005      	add	sp, #20
 800d690:	f85d fb04 	ldr.w	pc, [sp], #4
 800d694:	4668      	mov	r0, sp
 800d696:	f000 f98b 	bl	800d9b0 <__ieee754_rem_pio2>
 800d69a:	f000 0003 	and.w	r0, r0, #3
 800d69e:	2801      	cmp	r0, #1
 800d6a0:	d00a      	beq.n	800d6b8 <sin+0x58>
 800d6a2:	2802      	cmp	r0, #2
 800d6a4:	d00f      	beq.n	800d6c6 <sin+0x66>
 800d6a6:	b9c0      	cbnz	r0, 800d6da <sin+0x7a>
 800d6a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ac:	ed9d 0b00 	vldr	d0, [sp]
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f000 fdc9 	bl	800e248 <__kernel_sin>
 800d6b6:	e7ea      	b.n	800d68e <sin+0x2e>
 800d6b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6bc:	ed9d 0b00 	vldr	d0, [sp]
 800d6c0:	f000 fabe 	bl	800dc40 <__kernel_cos>
 800d6c4:	e7e3      	b.n	800d68e <sin+0x2e>
 800d6c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ca:	ed9d 0b00 	vldr	d0, [sp]
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	f000 fdba 	bl	800e248 <__kernel_sin>
 800d6d4:	eeb1 0b40 	vneg.f64	d0, d0
 800d6d8:	e7d9      	b.n	800d68e <sin+0x2e>
 800d6da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6de:	ed9d 0b00 	vldr	d0, [sp]
 800d6e2:	f000 faad 	bl	800dc40 <__kernel_cos>
 800d6e6:	e7f5      	b.n	800d6d4 <sin+0x74>
	...
 800d6f0:	3fe921fb 	.word	0x3fe921fb
 800d6f4:	7fefffff 	.word	0x7fefffff

0800d6f8 <asin>:
 800d6f8:	b508      	push	{r3, lr}
 800d6fa:	ed2d 8b04 	vpush	{d8-d9}
 800d6fe:	eeb0 8b40 	vmov.f64	d8, d0
 800d702:	f000 f845 	bl	800d790 <__ieee754_asin>
 800d706:	eeb4 8b48 	vcmp.f64	d8, d8
 800d70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70e:	eeb0 9b40 	vmov.f64	d9, d0
 800d712:	d615      	bvs.n	800d740 <asin+0x48>
 800d714:	eeb0 0b48 	vmov.f64	d0, d8
 800d718:	f000 fe5e 	bl	800e3d8 <fabs>
 800d71c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d720:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d728:	dd0a      	ble.n	800d740 <asin+0x48>
 800d72a:	f7ff f86f 	bl	800c80c <__errno>
 800d72e:	ecbd 8b04 	vpop	{d8-d9}
 800d732:	2321      	movs	r3, #33	; 0x21
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d73a:	4804      	ldr	r0, [pc, #16]	; (800d74c <asin+0x54>)
 800d73c:	f000 becc 	b.w	800e4d8 <nan>
 800d740:	eeb0 0b49 	vmov.f64	d0, d9
 800d744:	ecbd 8b04 	vpop	{d8-d9}
 800d748:	bd08      	pop	{r3, pc}
 800d74a:	bf00      	nop
 800d74c:	0800e675 	.word	0x0800e675

0800d750 <sqrt>:
 800d750:	b508      	push	{r3, lr}
 800d752:	ed2d 8b04 	vpush	{d8-d9}
 800d756:	eeb0 8b40 	vmov.f64	d8, d0
 800d75a:	f000 fa6d 	bl	800dc38 <__ieee754_sqrt>
 800d75e:	eeb4 8b48 	vcmp.f64	d8, d8
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	d60c      	bvs.n	800d782 <sqrt+0x32>
 800d768:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800d788 <sqrt+0x38>
 800d76c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d774:	d505      	bpl.n	800d782 <sqrt+0x32>
 800d776:	f7ff f849 	bl	800c80c <__errno>
 800d77a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d77e:	2321      	movs	r3, #33	; 0x21
 800d780:	6003      	str	r3, [r0, #0]
 800d782:	ecbd 8b04 	vpop	{d8-d9}
 800d786:	bd08      	pop	{r3, pc}
	...

0800d790 <__ieee754_asin>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	ee10 5a90 	vmov	r5, s1
 800d796:	4b82      	ldr	r3, [pc, #520]	; (800d9a0 <__ieee754_asin+0x210>)
 800d798:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d79c:	429c      	cmp	r4, r3
 800d79e:	ed2d 8b06 	vpush	{d8-d10}
 800d7a2:	dd19      	ble.n	800d7d8 <__ieee754_asin+0x48>
 800d7a4:	ee10 3a10 	vmov	r3, s0
 800d7a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d7ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d7b0:	4323      	orrs	r3, r4
 800d7b2:	d10c      	bne.n	800d7ce <__ieee754_asin+0x3e>
 800d7b4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800d928 <__ieee754_asin+0x198>
 800d7b8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800d930 <__ieee754_asin+0x1a0>
 800d7bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d7c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d7c4:	eeb0 0b47 	vmov.f64	d0, d7
 800d7c8:	ecbd 8b06 	vpop	{d8-d10}
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d7d2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800d7d6:	e7f7      	b.n	800d7c8 <__ieee754_asin+0x38>
 800d7d8:	4b72      	ldr	r3, [pc, #456]	; (800d9a4 <__ieee754_asin+0x214>)
 800d7da:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800d7de:	429c      	cmp	r4, r3
 800d7e0:	dc0b      	bgt.n	800d7fa <__ieee754_asin+0x6a>
 800d7e2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800d7e6:	da52      	bge.n	800d88e <__ieee754_asin+0xfe>
 800d7e8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800d938 <__ieee754_asin+0x1a8>
 800d7ec:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d7f0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800d7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f8:	dce6      	bgt.n	800d7c8 <__ieee754_asin+0x38>
 800d7fa:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d7fe:	f000 fdeb 	bl	800e3d8 <fabs>
 800d802:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800d940 <__ieee754_asin+0x1b0>
 800d806:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d80a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d80e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d948 <__ieee754_asin+0x1b8>
 800d812:	eeb0 0b48 	vmov.f64	d0, d8
 800d816:	eea8 6b07 	vfma.f64	d6, d8, d7
 800d81a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d950 <__ieee754_asin+0x1c0>
 800d81e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d822:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d958 <__ieee754_asin+0x1c8>
 800d826:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800d960 <__ieee754_asin+0x1d0>
 800d82a:	eea7 6b08 	vfma.f64	d6, d7, d8
 800d82e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800d968 <__ieee754_asin+0x1d8>
 800d832:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d836:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d970 <__ieee754_asin+0x1e0>
 800d83a:	eea7 ab08 	vfma.f64	d10, d7, d8
 800d83e:	ee2a ab08 	vmul.f64	d10, d10, d8
 800d842:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d978 <__ieee754_asin+0x1e8>
 800d846:	eea8 7b06 	vfma.f64	d7, d8, d6
 800d84a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d980 <__ieee754_asin+0x1f0>
 800d84e:	eea7 6b08 	vfma.f64	d6, d7, d8
 800d852:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d988 <__ieee754_asin+0x1f8>
 800d856:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d85a:	eea7 9b08 	vfma.f64	d9, d7, d8
 800d85e:	f000 f9eb 	bl	800dc38 <__ieee754_sqrt>
 800d862:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800d866:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800d86a:	4b4f      	ldr	r3, [pc, #316]	; (800d9a8 <__ieee754_asin+0x218>)
 800d86c:	429c      	cmp	r4, r3
 800d86e:	dd3d      	ble.n	800d8ec <__ieee754_asin+0x15c>
 800d870:	eea0 0b05 	vfma.f64	d0, d0, d5
 800d874:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800d990 <__ieee754_asin+0x200>
 800d878:	eea0 7b04 	vfma.f64	d7, d0, d4
 800d87c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800d930 <__ieee754_asin+0x1a0>
 800d880:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d884:	2d00      	cmp	r5, #0
 800d886:	bfd8      	it	le
 800d888:	eeb1 0b40 	vnegle.f64	d0, d0
 800d88c:	e79c      	b.n	800d7c8 <__ieee754_asin+0x38>
 800d88e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d940 <__ieee754_asin+0x1b0>
 800d892:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d896:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800d948 <__ieee754_asin+0x1b8>
 800d89a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d89e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d950 <__ieee754_asin+0x1c0>
 800d8a2:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d8a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800d958 <__ieee754_asin+0x1c8>
 800d8aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d8ae:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800d968 <__ieee754_asin+0x1d8>
 800d8b2:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d8b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800d960 <__ieee754_asin+0x1d0>
 800d8ba:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800d970 <__ieee754_asin+0x1e0>
 800d8be:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d8c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d8c6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d978 <__ieee754_asin+0x1e8>
 800d8ca:	eea7 5b04 	vfma.f64	d5, d7, d4
 800d8ce:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800d980 <__ieee754_asin+0x1f0>
 800d8d2:	eea5 4b07 	vfma.f64	d4, d5, d7
 800d8d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d988 <__ieee754_asin+0x1f8>
 800d8da:	eea4 5b07 	vfma.f64	d5, d4, d7
 800d8de:	eea5 9b07 	vfma.f64	d9, d5, d7
 800d8e2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800d8e6:	eea0 0b07 	vfma.f64	d0, d0, d7
 800d8ea:	e76d      	b.n	800d7c8 <__ieee754_asin+0x38>
 800d8ec:	ec53 2b10 	vmov	r2, r3, d0
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	ec43 2b16 	vmov	d6, r2, r3
 800d8f6:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d8fa:	eea6 8b46 	vfms.f64	d8, d6, d6
 800d8fe:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800d902:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800d928 <__ieee754_asin+0x198>
 800d906:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d90a:	eea3 7b44 	vfms.f64	d7, d3, d4
 800d90e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800d912:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800d998 <__ieee754_asin+0x208>
 800d916:	eeb0 0b45 	vmov.f64	d0, d5
 800d91a:	eea6 0b44 	vfms.f64	d0, d6, d4
 800d91e:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d922:	ee35 0b40 	vsub.f64	d0, d5, d0
 800d926:	e7ad      	b.n	800d884 <__ieee754_asin+0xf4>
 800d928:	33145c07 	.word	0x33145c07
 800d92c:	3c91a626 	.word	0x3c91a626
 800d930:	54442d18 	.word	0x54442d18
 800d934:	3ff921fb 	.word	0x3ff921fb
 800d938:	8800759c 	.word	0x8800759c
 800d93c:	7e37e43c 	.word	0x7e37e43c
 800d940:	0dfdf709 	.word	0x0dfdf709
 800d944:	3f023de1 	.word	0x3f023de1
 800d948:	7501b288 	.word	0x7501b288
 800d94c:	3f49efe0 	.word	0x3f49efe0
 800d950:	b5688f3b 	.word	0xb5688f3b
 800d954:	bfa48228 	.word	0xbfa48228
 800d958:	0e884455 	.word	0x0e884455
 800d95c:	3fc9c155 	.word	0x3fc9c155
 800d960:	55555555 	.word	0x55555555
 800d964:	3fc55555 	.word	0x3fc55555
 800d968:	03eb6f7d 	.word	0x03eb6f7d
 800d96c:	bfd4d612 	.word	0xbfd4d612
 800d970:	b12e9282 	.word	0xb12e9282
 800d974:	3fb3b8c5 	.word	0x3fb3b8c5
 800d978:	1b8d0159 	.word	0x1b8d0159
 800d97c:	bfe6066c 	.word	0xbfe6066c
 800d980:	9c598ac8 	.word	0x9c598ac8
 800d984:	40002ae5 	.word	0x40002ae5
 800d988:	1c8a2d4b 	.word	0x1c8a2d4b
 800d98c:	c0033a27 	.word	0xc0033a27
 800d990:	33145c07 	.word	0x33145c07
 800d994:	bc91a626 	.word	0xbc91a626
 800d998:	54442d18 	.word	0x54442d18
 800d99c:	3fe921fb 	.word	0x3fe921fb
 800d9a0:	3fefffff 	.word	0x3fefffff
 800d9a4:	3fdfffff 	.word	0x3fdfffff
 800d9a8:	3fef3332 	.word	0x3fef3332
 800d9ac:	00000000 	.word	0x00000000

0800d9b0 <__ieee754_rem_pio2>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	eeb0 7b40 	vmov.f64	d7, d0
 800d9b6:	ee17 5a90 	vmov	r5, s15
 800d9ba:	4b99      	ldr	r3, [pc, #612]	; (800dc20 <__ieee754_rem_pio2+0x270>)
 800d9bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d9c0:	429e      	cmp	r6, r3
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	dc07      	bgt.n	800d9d8 <__ieee754_rem_pio2+0x28>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	ed84 0b00 	vstr	d0, [r4]
 800d9d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	e01b      	b.n	800da10 <__ieee754_rem_pio2+0x60>
 800d9d8:	4b92      	ldr	r3, [pc, #584]	; (800dc24 <__ieee754_rem_pio2+0x274>)
 800d9da:	429e      	cmp	r6, r3
 800d9dc:	dc3b      	bgt.n	800da56 <__ieee754_rem_pio2+0xa6>
 800d9de:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d9e2:	2d00      	cmp	r5, #0
 800d9e4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800dbe0 <__ieee754_rem_pio2+0x230>
 800d9e8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d9ec:	dd19      	ble.n	800da22 <__ieee754_rem_pio2+0x72>
 800d9ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d9f2:	429e      	cmp	r6, r3
 800d9f4:	d00e      	beq.n	800da14 <__ieee754_rem_pio2+0x64>
 800d9f6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800dbe8 <__ieee754_rem_pio2+0x238>
 800d9fa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d9fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800da02:	ed84 5b00 	vstr	d5, [r4]
 800da06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800da0e:	2001      	movs	r0, #1
 800da10:	b008      	add	sp, #32
 800da12:	bd70      	pop	{r4, r5, r6, pc}
 800da14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dbf0 <__ieee754_rem_pio2+0x240>
 800da18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dbf8 <__ieee754_rem_pio2+0x248>
 800da20:	e7eb      	b.n	800d9fa <__ieee754_rem_pio2+0x4a>
 800da22:	429e      	cmp	r6, r3
 800da24:	ee30 7b06 	vadd.f64	d7, d0, d6
 800da28:	d00e      	beq.n	800da48 <__ieee754_rem_pio2+0x98>
 800da2a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800dbe8 <__ieee754_rem_pio2+0x238>
 800da2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800da32:	ee37 7b45 	vsub.f64	d7, d7, d5
 800da36:	ed84 5b00 	vstr	d5, [r4]
 800da3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da42:	ed84 7b02 	vstr	d7, [r4, #8]
 800da46:	e7e3      	b.n	800da10 <__ieee754_rem_pio2+0x60>
 800da48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dbf0 <__ieee754_rem_pio2+0x240>
 800da4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dbf8 <__ieee754_rem_pio2+0x248>
 800da54:	e7eb      	b.n	800da2e <__ieee754_rem_pio2+0x7e>
 800da56:	4b74      	ldr	r3, [pc, #464]	; (800dc28 <__ieee754_rem_pio2+0x278>)
 800da58:	429e      	cmp	r6, r3
 800da5a:	dc70      	bgt.n	800db3e <__ieee754_rem_pio2+0x18e>
 800da5c:	f000 fcbc 	bl	800e3d8 <fabs>
 800da60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800da64:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dc00 <__ieee754_rem_pio2+0x250>
 800da68:	eea0 7b06 	vfma.f64	d7, d0, d6
 800da6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800da70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800da74:	ee17 0a90 	vmov	r0, s15
 800da78:	eeb1 4b45 	vneg.f64	d4, d5
 800da7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dbe0 <__ieee754_rem_pio2+0x230>
 800da80:	eea5 0b47 	vfms.f64	d0, d5, d7
 800da84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dbe8 <__ieee754_rem_pio2+0x238>
 800da88:	281f      	cmp	r0, #31
 800da8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800da8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800da92:	dc08      	bgt.n	800daa6 <__ieee754_rem_pio2+0xf6>
 800da94:	4b65      	ldr	r3, [pc, #404]	; (800dc2c <__ieee754_rem_pio2+0x27c>)
 800da96:	1e42      	subs	r2, r0, #1
 800da98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9c:	42b3      	cmp	r3, r6
 800da9e:	d002      	beq.n	800daa6 <__ieee754_rem_pio2+0xf6>
 800daa0:	ed84 6b00 	vstr	d6, [r4]
 800daa4:	e026      	b.n	800daf4 <__ieee754_rem_pio2+0x144>
 800daa6:	ee16 3a90 	vmov	r3, s13
 800daaa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800daae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dab2:	2b10      	cmp	r3, #16
 800dab4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dab8:	ddf2      	ble.n	800daa0 <__ieee754_rem_pio2+0xf0>
 800daba:	eeb0 6b40 	vmov.f64	d6, d0
 800dabe:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800dbf0 <__ieee754_rem_pio2+0x240>
 800dac2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dbf8 <__ieee754_rem_pio2+0x248>
 800dac6:	eea4 6b07 	vfma.f64	d6, d4, d7
 800daca:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dace:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dad2:	eeb0 7b40 	vmov.f64	d7, d0
 800dad6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dada:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dade:	ee13 3a90 	vmov	r3, s7
 800dae2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	2b31      	cmp	r3, #49	; 0x31
 800daea:	dc17      	bgt.n	800db1c <__ieee754_rem_pio2+0x16c>
 800daec:	eeb0 0b46 	vmov.f64	d0, d6
 800daf0:	ed84 3b00 	vstr	d3, [r4]
 800daf4:	ed94 6b00 	vldr	d6, [r4]
 800daf8:	2d00      	cmp	r5, #0
 800dafa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dafe:	ee30 0b47 	vsub.f64	d0, d0, d7
 800db02:	ed84 0b02 	vstr	d0, [r4, #8]
 800db06:	da83      	bge.n	800da10 <__ieee754_rem_pio2+0x60>
 800db08:	eeb1 6b46 	vneg.f64	d6, d6
 800db0c:	eeb1 0b40 	vneg.f64	d0, d0
 800db10:	ed84 6b00 	vstr	d6, [r4]
 800db14:	ed84 0b02 	vstr	d0, [r4, #8]
 800db18:	4240      	negs	r0, r0
 800db1a:	e779      	b.n	800da10 <__ieee754_rem_pio2+0x60>
 800db1c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800dc08 <__ieee754_rem_pio2+0x258>
 800db20:	eeb0 0b46 	vmov.f64	d0, d6
 800db24:	eea4 0b03 	vfma.f64	d0, d4, d3
 800db28:	ee36 7b40 	vsub.f64	d7, d6, d0
 800db2c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800dc10 <__ieee754_rem_pio2+0x260>
 800db30:	eea4 7b03 	vfma.f64	d7, d4, d3
 800db34:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800db38:	ee30 6b47 	vsub.f64	d6, d0, d7
 800db3c:	e7b0      	b.n	800daa0 <__ieee754_rem_pio2+0xf0>
 800db3e:	4b3c      	ldr	r3, [pc, #240]	; (800dc30 <__ieee754_rem_pio2+0x280>)
 800db40:	429e      	cmp	r6, r3
 800db42:	dd06      	ble.n	800db52 <__ieee754_rem_pio2+0x1a2>
 800db44:	ee30 7b40 	vsub.f64	d7, d0, d0
 800db48:	ed80 7b02 	vstr	d7, [r0, #8]
 800db4c:	ed80 7b00 	vstr	d7, [r0]
 800db50:	e740      	b.n	800d9d4 <__ieee754_rem_pio2+0x24>
 800db52:	1532      	asrs	r2, r6, #20
 800db54:	ee10 0a10 	vmov	r0, s0
 800db58:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800db5c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800db60:	ec41 0b17 	vmov	d7, r0, r1
 800db64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800db68:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800dc18 <__ieee754_rem_pio2+0x268>
 800db6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800db70:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800db78:	ee27 7b05 	vmul.f64	d7, d7, d5
 800db7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800db80:	a902      	add	r1, sp, #8
 800db82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800db86:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db8a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800db8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800db92:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db96:	2603      	movs	r6, #3
 800db98:	4608      	mov	r0, r1
 800db9a:	ed91 7b04 	vldr	d7, [r1, #16]
 800db9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba6:	4633      	mov	r3, r6
 800dba8:	f1a1 0108 	sub.w	r1, r1, #8
 800dbac:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800dbb0:	d0f3      	beq.n	800db9a <__ieee754_rem_pio2+0x1ea>
 800dbb2:	4920      	ldr	r1, [pc, #128]	; (800dc34 <__ieee754_rem_pio2+0x284>)
 800dbb4:	9101      	str	r1, [sp, #4]
 800dbb6:	2102      	movs	r1, #2
 800dbb8:	9100      	str	r1, [sp, #0]
 800dbba:	4621      	mov	r1, r4
 800dbbc:	f000 f8ac 	bl	800dd18 <__kernel_rem_pio2>
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	f6bf af25 	bge.w	800da10 <__ieee754_rem_pio2+0x60>
 800dbc6:	ed94 7b00 	vldr	d7, [r4]
 800dbca:	eeb1 7b47 	vneg.f64	d7, d7
 800dbce:	ed84 7b00 	vstr	d7, [r4]
 800dbd2:	ed94 7b02 	vldr	d7, [r4, #8]
 800dbd6:	eeb1 7b47 	vneg.f64	d7, d7
 800dbda:	ed84 7b02 	vstr	d7, [r4, #8]
 800dbde:	e79b      	b.n	800db18 <__ieee754_rem_pio2+0x168>
 800dbe0:	54400000 	.word	0x54400000
 800dbe4:	3ff921fb 	.word	0x3ff921fb
 800dbe8:	1a626331 	.word	0x1a626331
 800dbec:	3dd0b461 	.word	0x3dd0b461
 800dbf0:	1a600000 	.word	0x1a600000
 800dbf4:	3dd0b461 	.word	0x3dd0b461
 800dbf8:	2e037073 	.word	0x2e037073
 800dbfc:	3ba3198a 	.word	0x3ba3198a
 800dc00:	6dc9c883 	.word	0x6dc9c883
 800dc04:	3fe45f30 	.word	0x3fe45f30
 800dc08:	2e000000 	.word	0x2e000000
 800dc0c:	3ba3198a 	.word	0x3ba3198a
 800dc10:	252049c1 	.word	0x252049c1
 800dc14:	397b839a 	.word	0x397b839a
 800dc18:	00000000 	.word	0x00000000
 800dc1c:	41700000 	.word	0x41700000
 800dc20:	3fe921fb 	.word	0x3fe921fb
 800dc24:	4002d97b 	.word	0x4002d97b
 800dc28:	413921fb 	.word	0x413921fb
 800dc2c:	0800f6f0 	.word	0x0800f6f0
 800dc30:	7fefffff 	.word	0x7fefffff
 800dc34:	0800f770 	.word	0x0800f770

0800dc38 <__ieee754_sqrt>:
 800dc38:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800dc3c:	4770      	bx	lr
	...

0800dc40 <__kernel_cos>:
 800dc40:	ee10 1a90 	vmov	r1, s1
 800dc44:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dc48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dc4c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dc50:	da05      	bge.n	800dc5e <__kernel_cos+0x1e>
 800dc52:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dc56:	ee17 3a90 	vmov	r3, s15
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d03d      	beq.n	800dcda <__kernel_cos+0x9a>
 800dc5e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800dc62:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800dce0 <__kernel_cos+0xa0>
 800dc66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800dce8 <__kernel_cos+0xa8>
 800dc6a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800dc6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800dcf0 <__kernel_cos+0xb0>
 800dc72:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dc76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800dcf8 <__kernel_cos+0xb8>
 800dc7a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dc7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800dd00 <__kernel_cos+0xc0>
 800dc82:	4b23      	ldr	r3, [pc, #140]	; (800dd10 <__kernel_cos+0xd0>)
 800dc84:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dc88:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800dd08 <__kernel_cos+0xc8>
 800dc8c:	4299      	cmp	r1, r3
 800dc8e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dc92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dc96:	ee26 5b03 	vmul.f64	d5, d6, d3
 800dc9a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800dc9e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800dca2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dca6:	dc04      	bgt.n	800dcb2 <__kernel_cos+0x72>
 800dca8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800dcac:	ee34 0b46 	vsub.f64	d0, d4, d6
 800dcb0:	4770      	bx	lr
 800dcb2:	4b18      	ldr	r3, [pc, #96]	; (800dd14 <__kernel_cos+0xd4>)
 800dcb4:	4299      	cmp	r1, r3
 800dcb6:	dc0d      	bgt.n	800dcd4 <__kernel_cos+0x94>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800dcbe:	ec43 2b15 	vmov	d5, r2, r3
 800dcc2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800dcc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dcca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dcce:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dcd2:	4770      	bx	lr
 800dcd4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800dcd8:	e7f3      	b.n	800dcc2 <__kernel_cos+0x82>
 800dcda:	eeb0 0b44 	vmov.f64	d0, d4
 800dcde:	4770      	bx	lr
 800dce0:	be8838d4 	.word	0xbe8838d4
 800dce4:	bda8fae9 	.word	0xbda8fae9
 800dce8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dcec:	3e21ee9e 	.word	0x3e21ee9e
 800dcf0:	809c52ad 	.word	0x809c52ad
 800dcf4:	be927e4f 	.word	0xbe927e4f
 800dcf8:	19cb1590 	.word	0x19cb1590
 800dcfc:	3efa01a0 	.word	0x3efa01a0
 800dd00:	16c15177 	.word	0x16c15177
 800dd04:	bf56c16c 	.word	0xbf56c16c
 800dd08:	5555554c 	.word	0x5555554c
 800dd0c:	3fa55555 	.word	0x3fa55555
 800dd10:	3fd33332 	.word	0x3fd33332
 800dd14:	3fe90000 	.word	0x3fe90000

0800dd18 <__kernel_rem_pio2>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	ed2d 8b06 	vpush	{d8-d10}
 800dd20:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800dd24:	460f      	mov	r7, r1
 800dd26:	9002      	str	r0, [sp, #8]
 800dd28:	49c5      	ldr	r1, [pc, #788]	; (800e040 <__kernel_rem_pio2+0x328>)
 800dd2a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800dd2c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800dd30:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	f112 0f14 	cmn.w	r2, #20
 800dd3a:	bfa8      	it	ge
 800dd3c:	2018      	movge	r0, #24
 800dd3e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800dd42:	bfb8      	it	lt
 800dd44:	2000      	movlt	r0, #0
 800dd46:	f06f 0417 	mvn.w	r4, #23
 800dd4a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e028 <__kernel_rem_pio2+0x310>
 800dd4e:	bfa4      	itt	ge
 800dd50:	f1a2 0a03 	subge.w	sl, r2, #3
 800dd54:	fb9a f0f0 	sdivge	r0, sl, r0
 800dd58:	fb00 4404 	mla	r4, r0, r4, r4
 800dd5c:	1a46      	subs	r6, r0, r1
 800dd5e:	4414      	add	r4, r2
 800dd60:	eb09 0c01 	add.w	ip, r9, r1
 800dd64:	ad1a      	add	r5, sp, #104	; 0x68
 800dd66:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	4562      	cmp	r2, ip
 800dd6e:	dd10      	ble.n	800dd92 <__kernel_rem_pio2+0x7a>
 800dd70:	9a01      	ldr	r2, [sp, #4]
 800dd72:	ab1a      	add	r3, sp, #104	; 0x68
 800dd74:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dd78:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800dd7c:	f04f 0c00 	mov.w	ip, #0
 800dd80:	45cc      	cmp	ip, r9
 800dd82:	dc26      	bgt.n	800ddd2 <__kernel_rem_pio2+0xba>
 800dd84:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e028 <__kernel_rem_pio2+0x310>
 800dd88:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dd8c:	4616      	mov	r6, r2
 800dd8e:	2500      	movs	r5, #0
 800dd90:	e015      	b.n	800ddbe <__kernel_rem_pio2+0xa6>
 800dd92:	42d6      	cmn	r6, r2
 800dd94:	d409      	bmi.n	800ddaa <__kernel_rem_pio2+0x92>
 800dd96:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800dd9a:	ee07 3a90 	vmov	s15, r3
 800dd9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dda2:	eca5 7b02 	vstmia	r5!, {d7}
 800dda6:	3201      	adds	r2, #1
 800dda8:	e7e0      	b.n	800dd6c <__kernel_rem_pio2+0x54>
 800ddaa:	eeb0 7b46 	vmov.f64	d7, d6
 800ddae:	e7f8      	b.n	800dda2 <__kernel_rem_pio2+0x8a>
 800ddb0:	ecb8 5b02 	vldmia	r8!, {d5}
 800ddb4:	ed96 6b00 	vldr	d6, [r6]
 800ddb8:	3501      	adds	r5, #1
 800ddba:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ddbe:	428d      	cmp	r5, r1
 800ddc0:	f1a6 0608 	sub.w	r6, r6, #8
 800ddc4:	ddf4      	ble.n	800ddb0 <__kernel_rem_pio2+0x98>
 800ddc6:	ecaa 7b02 	vstmia	sl!, {d7}
 800ddca:	f10c 0c01 	add.w	ip, ip, #1
 800ddce:	3208      	adds	r2, #8
 800ddd0:	e7d6      	b.n	800dd80 <__kernel_rem_pio2+0x68>
 800ddd2:	ab06      	add	r3, sp, #24
 800ddd4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e030 <__kernel_rem_pio2+0x318>
 800ddd8:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e038 <__kernel_rem_pio2+0x320>
 800dddc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800dde0:	9303      	str	r3, [sp, #12]
 800dde2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800dde6:	464d      	mov	r5, r9
 800dde8:	00eb      	lsls	r3, r5, #3
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	ab92      	add	r3, sp, #584	; 0x248
 800ddee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ddf2:	f10d 0b18 	add.w	fp, sp, #24
 800ddf6:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ddf8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ddfc:	465e      	mov	r6, fp
 800ddfe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800de02:	4628      	mov	r0, r5
 800de04:	2800      	cmp	r0, #0
 800de06:	f1a2 0208 	sub.w	r2, r2, #8
 800de0a:	dc4c      	bgt.n	800dea6 <__kernel_rem_pio2+0x18e>
 800de0c:	4620      	mov	r0, r4
 800de0e:	9105      	str	r1, [sp, #20]
 800de10:	f000 fb6a 	bl	800e4e8 <scalbn>
 800de14:	eeb0 8b40 	vmov.f64	d8, d0
 800de18:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800de1c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800de20:	f000 fae6 	bl	800e3f0 <floor>
 800de24:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800de28:	eea0 8b47 	vfms.f64	d8, d0, d7
 800de2c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800de30:	2c00      	cmp	r4, #0
 800de32:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800de36:	ee17 8a90 	vmov	r8, s15
 800de3a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800de3e:	9905      	ldr	r1, [sp, #20]
 800de40:	dd43      	ble.n	800deca <__kernel_rem_pio2+0x1b2>
 800de42:	1e68      	subs	r0, r5, #1
 800de44:	ab06      	add	r3, sp, #24
 800de46:	f1c4 0c18 	rsb	ip, r4, #24
 800de4a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800de4e:	fa46 f20c 	asr.w	r2, r6, ip
 800de52:	4490      	add	r8, r2
 800de54:	fa02 f20c 	lsl.w	r2, r2, ip
 800de58:	1ab6      	subs	r6, r6, r2
 800de5a:	f1c4 0217 	rsb	r2, r4, #23
 800de5e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800de62:	4116      	asrs	r6, r2
 800de64:	2e00      	cmp	r6, #0
 800de66:	dd3f      	ble.n	800dee8 <__kernel_rem_pio2+0x1d0>
 800de68:	f04f 0c00 	mov.w	ip, #0
 800de6c:	f108 0801 	add.w	r8, r8, #1
 800de70:	4660      	mov	r0, ip
 800de72:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800de76:	4565      	cmp	r5, ip
 800de78:	dc6e      	bgt.n	800df58 <__kernel_rem_pio2+0x240>
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	dd04      	ble.n	800de88 <__kernel_rem_pio2+0x170>
 800de7e:	2c01      	cmp	r4, #1
 800de80:	d07f      	beq.n	800df82 <__kernel_rem_pio2+0x26a>
 800de82:	2c02      	cmp	r4, #2
 800de84:	f000 8087 	beq.w	800df96 <__kernel_rem_pio2+0x27e>
 800de88:	2e02      	cmp	r6, #2
 800de8a:	d12d      	bne.n	800dee8 <__kernel_rem_pio2+0x1d0>
 800de8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800de90:	ee30 8b48 	vsub.f64	d8, d0, d8
 800de94:	b340      	cbz	r0, 800dee8 <__kernel_rem_pio2+0x1d0>
 800de96:	4620      	mov	r0, r4
 800de98:	9105      	str	r1, [sp, #20]
 800de9a:	f000 fb25 	bl	800e4e8 <scalbn>
 800de9e:	9905      	ldr	r1, [sp, #20]
 800dea0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dea4:	e020      	b.n	800dee8 <__kernel_rem_pio2+0x1d0>
 800dea6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800deaa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800deae:	3801      	subs	r0, #1
 800deb0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800deb4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800deb8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800debc:	eca6 0a01 	vstmia	r6!, {s0}
 800dec0:	ed92 0b00 	vldr	d0, [r2]
 800dec4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800dec8:	e79c      	b.n	800de04 <__kernel_rem_pio2+0xec>
 800deca:	d105      	bne.n	800ded8 <__kernel_rem_pio2+0x1c0>
 800decc:	1e6a      	subs	r2, r5, #1
 800dece:	ab06      	add	r3, sp, #24
 800ded0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800ded4:	15f6      	asrs	r6, r6, #23
 800ded6:	e7c5      	b.n	800de64 <__kernel_rem_pio2+0x14c>
 800ded8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dedc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee4:	da36      	bge.n	800df54 <__kernel_rem_pio2+0x23c>
 800dee6:	2600      	movs	r6, #0
 800dee8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def0:	f040 80aa 	bne.w	800e048 <__kernel_rem_pio2+0x330>
 800def4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800def8:	4658      	mov	r0, fp
 800defa:	2200      	movs	r2, #0
 800defc:	4548      	cmp	r0, r9
 800defe:	da52      	bge.n	800dfa6 <__kernel_rem_pio2+0x28e>
 800df00:	2a00      	cmp	r2, #0
 800df02:	f000 8081 	beq.w	800e008 <__kernel_rem_pio2+0x2f0>
 800df06:	ab06      	add	r3, sp, #24
 800df08:	3c18      	subs	r4, #24
 800df0a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f000 8087 	beq.w	800e022 <__kernel_rem_pio2+0x30a>
 800df14:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fae5 	bl	800e4e8 <scalbn>
 800df1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800df22:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e030 <__kernel_rem_pio2+0x318>
 800df26:	a96a      	add	r1, sp, #424	; 0x1a8
 800df28:	f103 0208 	add.w	r2, r3, #8
 800df2c:	1888      	adds	r0, r1, r2
 800df2e:	4659      	mov	r1, fp
 800df30:	2900      	cmp	r1, #0
 800df32:	f280 80b7 	bge.w	800e0a4 <__kernel_rem_pio2+0x38c>
 800df36:	4659      	mov	r1, fp
 800df38:	2900      	cmp	r1, #0
 800df3a:	f2c0 80d5 	blt.w	800e0e8 <__kernel_rem_pio2+0x3d0>
 800df3e:	a86a      	add	r0, sp, #424	; 0x1a8
 800df40:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800df44:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e028 <__kernel_rem_pio2+0x310>
 800df48:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e044 <__kernel_rem_pio2+0x32c>
 800df4c:	2400      	movs	r4, #0
 800df4e:	ebab 0001 	sub.w	r0, fp, r1
 800df52:	e0be      	b.n	800e0d2 <__kernel_rem_pio2+0x3ba>
 800df54:	2602      	movs	r6, #2
 800df56:	e787      	b.n	800de68 <__kernel_rem_pio2+0x150>
 800df58:	f8db 2000 	ldr.w	r2, [fp]
 800df5c:	b958      	cbnz	r0, 800df76 <__kernel_rem_pio2+0x25e>
 800df5e:	b122      	cbz	r2, 800df6a <__kernel_rem_pio2+0x252>
 800df60:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800df64:	f8cb 2000 	str.w	r2, [fp]
 800df68:	2201      	movs	r2, #1
 800df6a:	f10c 0c01 	add.w	ip, ip, #1
 800df6e:	f10b 0b04 	add.w	fp, fp, #4
 800df72:	4610      	mov	r0, r2
 800df74:	e77f      	b.n	800de76 <__kernel_rem_pio2+0x15e>
 800df76:	ebae 0202 	sub.w	r2, lr, r2
 800df7a:	f8cb 2000 	str.w	r2, [fp]
 800df7e:	4602      	mov	r2, r0
 800df80:	e7f3      	b.n	800df6a <__kernel_rem_pio2+0x252>
 800df82:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800df86:	ab06      	add	r3, sp, #24
 800df88:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800df8c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800df90:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800df94:	e778      	b.n	800de88 <__kernel_rem_pio2+0x170>
 800df96:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800df9a:	ab06      	add	r3, sp, #24
 800df9c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800dfa0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800dfa4:	e7f4      	b.n	800df90 <__kernel_rem_pio2+0x278>
 800dfa6:	ab06      	add	r3, sp, #24
 800dfa8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dfac:	3801      	subs	r0, #1
 800dfae:	431a      	orrs	r2, r3
 800dfb0:	e7a4      	b.n	800defc <__kernel_rem_pio2+0x1e4>
 800dfb2:	f10c 0c01 	add.w	ip, ip, #1
 800dfb6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d0f9      	beq.n	800dfb2 <__kernel_rem_pio2+0x29a>
 800dfbe:	9b04      	ldr	r3, [sp, #16]
 800dfc0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800dfc4:	eb0d 0203 	add.w	r2, sp, r3
 800dfc8:	9b01      	ldr	r3, [sp, #4]
 800dfca:	18e8      	adds	r0, r5, r3
 800dfcc:	ab1a      	add	r3, sp, #104	; 0x68
 800dfce:	1c6e      	adds	r6, r5, #1
 800dfd0:	3a98      	subs	r2, #152	; 0x98
 800dfd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800dfd6:	4465      	add	r5, ip
 800dfd8:	42b5      	cmp	r5, r6
 800dfda:	f6ff af05 	blt.w	800dde8 <__kernel_rem_pio2+0xd0>
 800dfde:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800dfe2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800dfe6:	ee07 3a90 	vmov	s15, r3
 800dfea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfee:	f04f 0c00 	mov.w	ip, #0
 800dff2:	eca0 7b02 	vstmia	r0!, {d7}
 800dff6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e028 <__kernel_rem_pio2+0x310>
 800dffa:	4680      	mov	r8, r0
 800dffc:	458c      	cmp	ip, r1
 800dffe:	dd07      	ble.n	800e010 <__kernel_rem_pio2+0x2f8>
 800e000:	eca2 7b02 	vstmia	r2!, {d7}
 800e004:	3601      	adds	r6, #1
 800e006:	e7e7      	b.n	800dfd8 <__kernel_rem_pio2+0x2c0>
 800e008:	9a03      	ldr	r2, [sp, #12]
 800e00a:	f04f 0c01 	mov.w	ip, #1
 800e00e:	e7d2      	b.n	800dfb6 <__kernel_rem_pio2+0x29e>
 800e010:	ecbe 5b02 	vldmia	lr!, {d5}
 800e014:	ed38 6b02 	vldmdb	r8!, {d6}
 800e018:	f10c 0c01 	add.w	ip, ip, #1
 800e01c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e020:	e7ec      	b.n	800dffc <__kernel_rem_pio2+0x2e4>
 800e022:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e026:	e76e      	b.n	800df06 <__kernel_rem_pio2+0x1ee>
	...
 800e034:	3e700000 	.word	0x3e700000
 800e038:	00000000 	.word	0x00000000
 800e03c:	41700000 	.word	0x41700000
 800e040:	08010128 	.word	0x08010128
 800e044:	080100e8 	.word	0x080100e8
 800e048:	4260      	negs	r0, r4
 800e04a:	eeb0 0b48 	vmov.f64	d0, d8
 800e04e:	f000 fa4b 	bl	800e4e8 <scalbn>
 800e052:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e230 <__kernel_rem_pio2+0x518>
 800e056:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05e:	db18      	blt.n	800e092 <__kernel_rem_pio2+0x37a>
 800e060:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e238 <__kernel_rem_pio2+0x520>
 800e064:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e068:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e06c:	aa06      	add	r2, sp, #24
 800e06e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e072:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e076:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e07a:	f105 0b01 	add.w	fp, r5, #1
 800e07e:	ee10 3a10 	vmov	r3, s0
 800e082:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e086:	ee17 3a10 	vmov	r3, s14
 800e08a:	3418      	adds	r4, #24
 800e08c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e090:	e740      	b.n	800df14 <__kernel_rem_pio2+0x1fc>
 800e092:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e096:	aa06      	add	r2, sp, #24
 800e098:	ee10 3a10 	vmov	r3, s0
 800e09c:	46ab      	mov	fp, r5
 800e09e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e0a2:	e737      	b.n	800df14 <__kernel_rem_pio2+0x1fc>
 800e0a4:	ac06      	add	r4, sp, #24
 800e0a6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e0aa:	9401      	str	r4, [sp, #4]
 800e0ac:	ee07 4a90 	vmov	s15, r4
 800e0b0:	3901      	subs	r1, #1
 800e0b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0b6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e0ba:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e0be:	ed20 7b02 	vstmdb	r0!, {d7}
 800e0c2:	e735      	b.n	800df30 <__kernel_rem_pio2+0x218>
 800e0c4:	ecbc 5b02 	vldmia	ip!, {d5}
 800e0c8:	ecb5 6b02 	vldmia	r5!, {d6}
 800e0cc:	3401      	adds	r4, #1
 800e0ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e0d2:	454c      	cmp	r4, r9
 800e0d4:	dc01      	bgt.n	800e0da <__kernel_rem_pio2+0x3c2>
 800e0d6:	4284      	cmp	r4, r0
 800e0d8:	ddf4      	ble.n	800e0c4 <__kernel_rem_pio2+0x3ac>
 800e0da:	ac42      	add	r4, sp, #264	; 0x108
 800e0dc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e0e0:	ed80 7b00 	vstr	d7, [r0]
 800e0e4:	3901      	subs	r1, #1
 800e0e6:	e727      	b.n	800df38 <__kernel_rem_pio2+0x220>
 800e0e8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e0ea:	2902      	cmp	r1, #2
 800e0ec:	dc0a      	bgt.n	800e104 <__kernel_rem_pio2+0x3ec>
 800e0ee:	2900      	cmp	r1, #0
 800e0f0:	dc2c      	bgt.n	800e14c <__kernel_rem_pio2+0x434>
 800e0f2:	d045      	beq.n	800e180 <__kernel_rem_pio2+0x468>
 800e0f4:	f008 0007 	and.w	r0, r8, #7
 800e0f8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e0fc:	ecbd 8b06 	vpop	{d8-d10}
 800e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e104:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e106:	2a03      	cmp	r2, #3
 800e108:	d1f4      	bne.n	800e0f4 <__kernel_rem_pio2+0x3dc>
 800e10a:	aa42      	add	r2, sp, #264	; 0x108
 800e10c:	4413      	add	r3, r2
 800e10e:	461a      	mov	r2, r3
 800e110:	4619      	mov	r1, r3
 800e112:	4658      	mov	r0, fp
 800e114:	2800      	cmp	r0, #0
 800e116:	f1a1 0108 	sub.w	r1, r1, #8
 800e11a:	dc54      	bgt.n	800e1c6 <__kernel_rem_pio2+0x4ae>
 800e11c:	4659      	mov	r1, fp
 800e11e:	2901      	cmp	r1, #1
 800e120:	f1a2 0208 	sub.w	r2, r2, #8
 800e124:	dc5f      	bgt.n	800e1e6 <__kernel_rem_pio2+0x4ce>
 800e126:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e240 <__kernel_rem_pio2+0x528>
 800e12a:	3308      	adds	r3, #8
 800e12c:	f1bb 0f01 	cmp.w	fp, #1
 800e130:	dc69      	bgt.n	800e206 <__kernel_rem_pio2+0x4ee>
 800e132:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e136:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e13a:	2e00      	cmp	r6, #0
 800e13c:	d16a      	bne.n	800e214 <__kernel_rem_pio2+0x4fc>
 800e13e:	ed87 5b00 	vstr	d5, [r7]
 800e142:	ed87 6b02 	vstr	d6, [r7, #8]
 800e146:	ed87 7b04 	vstr	d7, [r7, #16]
 800e14a:	e7d3      	b.n	800e0f4 <__kernel_rem_pio2+0x3dc>
 800e14c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e240 <__kernel_rem_pio2+0x528>
 800e150:	ab42      	add	r3, sp, #264	; 0x108
 800e152:	441a      	add	r2, r3
 800e154:	465b      	mov	r3, fp
 800e156:	2b00      	cmp	r3, #0
 800e158:	da26      	bge.n	800e1a8 <__kernel_rem_pio2+0x490>
 800e15a:	b35e      	cbz	r6, 800e1b4 <__kernel_rem_pio2+0x49c>
 800e15c:	eeb1 7b46 	vneg.f64	d7, d6
 800e160:	ed87 7b00 	vstr	d7, [r7]
 800e164:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e168:	aa44      	add	r2, sp, #272	; 0x110
 800e16a:	2301      	movs	r3, #1
 800e16c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e170:	459b      	cmp	fp, r3
 800e172:	da22      	bge.n	800e1ba <__kernel_rem_pio2+0x4a2>
 800e174:	b10e      	cbz	r6, 800e17a <__kernel_rem_pio2+0x462>
 800e176:	eeb1 7b47 	vneg.f64	d7, d7
 800e17a:	ed87 7b02 	vstr	d7, [r7, #8]
 800e17e:	e7b9      	b.n	800e0f4 <__kernel_rem_pio2+0x3dc>
 800e180:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e240 <__kernel_rem_pio2+0x528>
 800e184:	ab42      	add	r3, sp, #264	; 0x108
 800e186:	441a      	add	r2, r3
 800e188:	f1bb 0f00 	cmp.w	fp, #0
 800e18c:	da05      	bge.n	800e19a <__kernel_rem_pio2+0x482>
 800e18e:	b10e      	cbz	r6, 800e194 <__kernel_rem_pio2+0x47c>
 800e190:	eeb1 7b47 	vneg.f64	d7, d7
 800e194:	ed87 7b00 	vstr	d7, [r7]
 800e198:	e7ac      	b.n	800e0f4 <__kernel_rem_pio2+0x3dc>
 800e19a:	ed32 6b02 	vldmdb	r2!, {d6}
 800e19e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e1a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e1a6:	e7ef      	b.n	800e188 <__kernel_rem_pio2+0x470>
 800e1a8:	ed32 7b02 	vldmdb	r2!, {d7}
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e1b2:	e7d0      	b.n	800e156 <__kernel_rem_pio2+0x43e>
 800e1b4:	eeb0 7b46 	vmov.f64	d7, d6
 800e1b8:	e7d2      	b.n	800e160 <__kernel_rem_pio2+0x448>
 800e1ba:	ecb2 6b02 	vldmia	r2!, {d6}
 800e1be:	3301      	adds	r3, #1
 800e1c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e1c4:	e7d4      	b.n	800e170 <__kernel_rem_pio2+0x458>
 800e1c6:	ed91 7b00 	vldr	d7, [r1]
 800e1ca:	ed91 5b02 	vldr	d5, [r1, #8]
 800e1ce:	3801      	subs	r0, #1
 800e1d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e1d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e1d8:	ed81 6b00 	vstr	d6, [r1]
 800e1dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e1e0:	ed81 7b02 	vstr	d7, [r1, #8]
 800e1e4:	e796      	b.n	800e114 <__kernel_rem_pio2+0x3fc>
 800e1e6:	ed92 7b00 	vldr	d7, [r2]
 800e1ea:	ed92 5b02 	vldr	d5, [r2, #8]
 800e1ee:	3901      	subs	r1, #1
 800e1f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e1f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e1f8:	ed82 6b00 	vstr	d6, [r2]
 800e1fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e200:	ed82 7b02 	vstr	d7, [r2, #8]
 800e204:	e78b      	b.n	800e11e <__kernel_rem_pio2+0x406>
 800e206:	ed33 6b02 	vldmdb	r3!, {d6}
 800e20a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e20e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e212:	e78b      	b.n	800e12c <__kernel_rem_pio2+0x414>
 800e214:	eeb1 5b45 	vneg.f64	d5, d5
 800e218:	eeb1 6b46 	vneg.f64	d6, d6
 800e21c:	ed87 5b00 	vstr	d5, [r7]
 800e220:	eeb1 7b47 	vneg.f64	d7, d7
 800e224:	ed87 6b02 	vstr	d6, [r7, #8]
 800e228:	e78d      	b.n	800e146 <__kernel_rem_pio2+0x42e>
 800e22a:	bf00      	nop
 800e22c:	f3af 8000 	nop.w
 800e230:	00000000 	.word	0x00000000
 800e234:	41700000 	.word	0x41700000
 800e238:	00000000 	.word	0x00000000
 800e23c:	3e700000 	.word	0x3e700000
	...

0800e248 <__kernel_sin>:
 800e248:	ee10 3a90 	vmov	r3, s1
 800e24c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e250:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e254:	da04      	bge.n	800e260 <__kernel_sin+0x18>
 800e256:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e25a:	ee17 3a90 	vmov	r3, s15
 800e25e:	b35b      	cbz	r3, 800e2b8 <__kernel_sin+0x70>
 800e260:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e264:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e268:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e2c0 <__kernel_sin+0x78>
 800e26c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e2c8 <__kernel_sin+0x80>
 800e270:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e274:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e2d0 <__kernel_sin+0x88>
 800e278:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e27c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e2d8 <__kernel_sin+0x90>
 800e280:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e284:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e2e0 <__kernel_sin+0x98>
 800e288:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e28c:	b930      	cbnz	r0, 800e29c <__kernel_sin+0x54>
 800e28e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e2e8 <__kernel_sin+0xa0>
 800e292:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e296:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e29a:	4770      	bx	lr
 800e29c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e2a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e2a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e2a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e2ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e2f0 <__kernel_sin+0xa8>
 800e2b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e2b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	f3af 8000 	nop.w
 800e2c0:	5acfd57c 	.word	0x5acfd57c
 800e2c4:	3de5d93a 	.word	0x3de5d93a
 800e2c8:	8a2b9ceb 	.word	0x8a2b9ceb
 800e2cc:	be5ae5e6 	.word	0xbe5ae5e6
 800e2d0:	57b1fe7d 	.word	0x57b1fe7d
 800e2d4:	3ec71de3 	.word	0x3ec71de3
 800e2d8:	19c161d5 	.word	0x19c161d5
 800e2dc:	bf2a01a0 	.word	0xbf2a01a0
 800e2e0:	1110f8a6 	.word	0x1110f8a6
 800e2e4:	3f811111 	.word	0x3f811111
 800e2e8:	55555549 	.word	0x55555549
 800e2ec:	bfc55555 	.word	0xbfc55555
 800e2f0:	55555549 	.word	0x55555549
 800e2f4:	3fc55555 	.word	0x3fc55555

0800e2f8 <with_errno>:
 800e2f8:	b513      	push	{r0, r1, r4, lr}
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	ed8d 0b00 	vstr	d0, [sp]
 800e300:	f7fe fa84 	bl	800c80c <__errno>
 800e304:	ed9d 0b00 	vldr	d0, [sp]
 800e308:	6004      	str	r4, [r0, #0]
 800e30a:	b002      	add	sp, #8
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <xflow>:
 800e30e:	b082      	sub	sp, #8
 800e310:	b158      	cbz	r0, 800e32a <xflow+0x1c>
 800e312:	eeb1 7b40 	vneg.f64	d7, d0
 800e316:	ed8d 7b00 	vstr	d7, [sp]
 800e31a:	ed9d 7b00 	vldr	d7, [sp]
 800e31e:	2022      	movs	r0, #34	; 0x22
 800e320:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e324:	b002      	add	sp, #8
 800e326:	f7ff bfe7 	b.w	800e2f8 <with_errno>
 800e32a:	eeb0 7b40 	vmov.f64	d7, d0
 800e32e:	e7f2      	b.n	800e316 <xflow+0x8>

0800e330 <__math_uflow>:
 800e330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e338 <__math_uflow+0x8>
 800e334:	f7ff bfeb 	b.w	800e30e <xflow>
 800e338:	00000000 	.word	0x00000000
 800e33c:	10000000 	.word	0x10000000

0800e340 <__math_oflow>:
 800e340:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e348 <__math_oflow+0x8>
 800e344:	f7ff bfe3 	b.w	800e30e <xflow>
 800e348:	00000000 	.word	0x00000000
 800e34c:	70000000 	.word	0x70000000

0800e350 <__math_divzero>:
 800e350:	b082      	sub	sp, #8
 800e352:	2800      	cmp	r0, #0
 800e354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e358:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e35c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e360:	ed8d 7b00 	vstr	d7, [sp]
 800e364:	ed9d 0b00 	vldr	d0, [sp]
 800e368:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e378 <__math_divzero+0x28>
 800e36c:	2022      	movs	r0, #34	; 0x22
 800e36e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e372:	b002      	add	sp, #8
 800e374:	f7ff bfc0 	b.w	800e2f8 <with_errno>
	...

0800e380 <__math_invalid>:
 800e380:	eeb0 7b40 	vmov.f64	d7, d0
 800e384:	eeb4 7b47 	vcmp.f64	d7, d7
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e390:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e394:	d602      	bvs.n	800e39c <__math_invalid+0x1c>
 800e396:	2021      	movs	r0, #33	; 0x21
 800e398:	f7ff bfae 	b.w	800e2f8 <with_errno>
 800e39c:	4770      	bx	lr

0800e39e <__math_check_uflow>:
 800e39e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a6:	d102      	bne.n	800e3ae <__math_check_uflow+0x10>
 800e3a8:	2022      	movs	r0, #34	; 0x22
 800e3aa:	f7ff bfa5 	b.w	800e2f8 <with_errno>
 800e3ae:	4770      	bx	lr

0800e3b0 <__math_check_oflow>:
 800e3b0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e3d0 <__math_check_oflow+0x20>
 800e3b4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e3b8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	dd02      	ble.n	800e3c8 <__math_check_oflow+0x18>
 800e3c2:	2022      	movs	r0, #34	; 0x22
 800e3c4:	f7ff bf98 	b.w	800e2f8 <with_errno>
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w
 800e3d0:	ffffffff 	.word	0xffffffff
 800e3d4:	7fefffff 	.word	0x7fefffff

0800e3d8 <fabs>:
 800e3d8:	ec51 0b10 	vmov	r0, r1, d0
 800e3dc:	ee10 2a10 	vmov	r2, s0
 800e3e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3e4:	ec43 2b10 	vmov	d0, r2, r3
 800e3e8:	4770      	bx	lr
 800e3ea:	0000      	movs	r0, r0
 800e3ec:	0000      	movs	r0, r0
	...

0800e3f0 <floor>:
 800e3f0:	ee10 1a90 	vmov	r1, s1
 800e3f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e3f8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e3fc:	2b13      	cmp	r3, #19
 800e3fe:	b530      	push	{r4, r5, lr}
 800e400:	ee10 0a10 	vmov	r0, s0
 800e404:	ee10 5a10 	vmov	r5, s0
 800e408:	dc31      	bgt.n	800e46e <floor+0x7e>
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	da15      	bge.n	800e43a <floor+0x4a>
 800e40e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e4c8 <floor+0xd8>
 800e412:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e416:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41e:	dd07      	ble.n	800e430 <floor+0x40>
 800e420:	2900      	cmp	r1, #0
 800e422:	da4e      	bge.n	800e4c2 <floor+0xd2>
 800e424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e428:	4318      	orrs	r0, r3
 800e42a:	d001      	beq.n	800e430 <floor+0x40>
 800e42c:	4928      	ldr	r1, [pc, #160]	; (800e4d0 <floor+0xe0>)
 800e42e:	2000      	movs	r0, #0
 800e430:	460b      	mov	r3, r1
 800e432:	4602      	mov	r2, r0
 800e434:	ec43 2b10 	vmov	d0, r2, r3
 800e438:	e020      	b.n	800e47c <floor+0x8c>
 800e43a:	4a26      	ldr	r2, [pc, #152]	; (800e4d4 <floor+0xe4>)
 800e43c:	411a      	asrs	r2, r3
 800e43e:	ea01 0402 	and.w	r4, r1, r2
 800e442:	4304      	orrs	r4, r0
 800e444:	d01a      	beq.n	800e47c <floor+0x8c>
 800e446:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e4c8 <floor+0xd8>
 800e44a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e44e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e456:	ddeb      	ble.n	800e430 <floor+0x40>
 800e458:	2900      	cmp	r1, #0
 800e45a:	bfbe      	ittt	lt
 800e45c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e460:	fa40 f303 	asrlt.w	r3, r0, r3
 800e464:	18c9      	addlt	r1, r1, r3
 800e466:	ea21 0102 	bic.w	r1, r1, r2
 800e46a:	2000      	movs	r0, #0
 800e46c:	e7e0      	b.n	800e430 <floor+0x40>
 800e46e:	2b33      	cmp	r3, #51	; 0x33
 800e470:	dd05      	ble.n	800e47e <floor+0x8e>
 800e472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e476:	d101      	bne.n	800e47c <floor+0x8c>
 800e478:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e47c:	bd30      	pop	{r4, r5, pc}
 800e47e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e486:	40e2      	lsrs	r2, r4
 800e488:	4202      	tst	r2, r0
 800e48a:	d0f7      	beq.n	800e47c <floor+0x8c>
 800e48c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e4c8 <floor+0xd8>
 800e490:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e494:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49c:	ddc8      	ble.n	800e430 <floor+0x40>
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	da02      	bge.n	800e4a8 <floor+0xb8>
 800e4a2:	2b14      	cmp	r3, #20
 800e4a4:	d103      	bne.n	800e4ae <floor+0xbe>
 800e4a6:	3101      	adds	r1, #1
 800e4a8:	ea20 0002 	bic.w	r0, r0, r2
 800e4ac:	e7c0      	b.n	800e430 <floor+0x40>
 800e4ae:	2401      	movs	r4, #1
 800e4b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4b4:	fa04 f303 	lsl.w	r3, r4, r3
 800e4b8:	4418      	add	r0, r3
 800e4ba:	42a8      	cmp	r0, r5
 800e4bc:	bf38      	it	cc
 800e4be:	1909      	addcc	r1, r1, r4
 800e4c0:	e7f2      	b.n	800e4a8 <floor+0xb8>
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	4601      	mov	r1, r0
 800e4c6:	e7b3      	b.n	800e430 <floor+0x40>
 800e4c8:	8800759c 	.word	0x8800759c
 800e4cc:	7e37e43c 	.word	0x7e37e43c
 800e4d0:	bff00000 	.word	0xbff00000
 800e4d4:	000fffff 	.word	0x000fffff

0800e4d8 <nan>:
 800e4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4e0 <nan+0x8>
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	00000000 	.word	0x00000000
 800e4e4:	7ff80000 	.word	0x7ff80000

0800e4e8 <scalbn>:
 800e4e8:	ee10 1a90 	vmov	r1, s1
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e4f2:	b98c      	cbnz	r4, 800e518 <scalbn+0x30>
 800e4f4:	ee10 3a10 	vmov	r3, s0
 800e4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e4fc:	430b      	orrs	r3, r1
 800e4fe:	d011      	beq.n	800e524 <scalbn+0x3c>
 800e500:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e5c8 <scalbn+0xe0>
 800e504:	4b3c      	ldr	r3, [pc, #240]	; (800e5f8 <scalbn+0x110>)
 800e506:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e50a:	4298      	cmp	r0, r3
 800e50c:	da0b      	bge.n	800e526 <scalbn+0x3e>
 800e50e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e5d0 <scalbn+0xe8>
 800e512:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e516:	e005      	b.n	800e524 <scalbn+0x3c>
 800e518:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e51c:	429c      	cmp	r4, r3
 800e51e:	d107      	bne.n	800e530 <scalbn+0x48>
 800e520:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e524:	bd10      	pop	{r4, pc}
 800e526:	ee10 1a90 	vmov	r1, s1
 800e52a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e52e:	3c36      	subs	r4, #54	; 0x36
 800e530:	4404      	add	r4, r0
 800e532:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e536:	429c      	cmp	r4, r3
 800e538:	dd0d      	ble.n	800e556 <scalbn+0x6e>
 800e53a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e5d8 <scalbn+0xf0>
 800e53e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e5e0 <scalbn+0xf8>
 800e542:	eeb0 6b47 	vmov.f64	d6, d7
 800e546:	ee10 3a90 	vmov	r3, s1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e550:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e554:	e7e6      	b.n	800e524 <scalbn+0x3c>
 800e556:	2c00      	cmp	r4, #0
 800e558:	dd0a      	ble.n	800e570 <scalbn+0x88>
 800e55a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e55e:	ec53 2b10 	vmov	r2, r3, d0
 800e562:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e566:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e56a:	ec43 2b10 	vmov	d0, r2, r3
 800e56e:	e7d9      	b.n	800e524 <scalbn+0x3c>
 800e570:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e574:	da19      	bge.n	800e5aa <scalbn+0xc2>
 800e576:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e57a:	4298      	cmp	r0, r3
 800e57c:	ee10 3a90 	vmov	r3, s1
 800e580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e584:	dd09      	ble.n	800e59a <scalbn+0xb2>
 800e586:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e5d8 <scalbn+0xf0>
 800e58a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e5e0 <scalbn+0xf8>
 800e58e:	eeb0 7b40 	vmov.f64	d7, d0
 800e592:	2b00      	cmp	r3, #0
 800e594:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e598:	e7bb      	b.n	800e512 <scalbn+0x2a>
 800e59a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e5d0 <scalbn+0xe8>
 800e59e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e5e8 <scalbn+0x100>
 800e5a2:	eeb0 7b40 	vmov.f64	d7, d0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	e7f4      	b.n	800e594 <scalbn+0xac>
 800e5aa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e5ae:	ec53 2b10 	vmov	r2, r3, d0
 800e5b2:	3436      	adds	r4, #54	; 0x36
 800e5b4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e5b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e5bc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e5f0 <scalbn+0x108>
 800e5c0:	ec43 2b10 	vmov	d0, r2, r3
 800e5c4:	e7a5      	b.n	800e512 <scalbn+0x2a>
 800e5c6:	bf00      	nop
 800e5c8:	00000000 	.word	0x00000000
 800e5cc:	43500000 	.word	0x43500000
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	01a56e1f 	.word	0x01a56e1f
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	8800759c 	.word	0x8800759c
 800e5e4:	fe37e43c 	.word	0xfe37e43c
 800e5e8:	c2f8f359 	.word	0xc2f8f359
 800e5ec:	81a56e1f 	.word	0x81a56e1f
 800e5f0:	00000000 	.word	0x00000000
 800e5f4:	3c900000 	.word	0x3c900000
 800e5f8:	ffff3cb0 	.word	0xffff3cb0

0800e5fc <_init>:
 800e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fe:	bf00      	nop
 800e600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e602:	bc08      	pop	{r3}
 800e604:	469e      	mov	lr, r3
 800e606:	4770      	bx	lr

0800e608 <_fini>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	bf00      	nop
 800e60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60e:	bc08      	pop	{r3}
 800e610:	469e      	mov	lr, r3
 800e612:	4770      	bx	lr
