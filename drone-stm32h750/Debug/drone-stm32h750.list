
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011aa4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c18  08011d48  08011d48  00021d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013960  08013960  00023960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013968  08013968  00023968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801396c  0801396c  0002396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08013970  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015f4  240000a0  08013a10  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001694  08013a10  00031694  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cacd  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f21  00000000  00000000  0004cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c8  00000000  00000000  0004fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  00050f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038671  00000000  00000000  00052350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d0ec  00000000  00000000  0008a9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167288  00000000  00000000  000a7aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020ed35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000061f4  00000000  00000000  0020ed88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011d2c 	.word	0x08011d2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08011d2c 	.word	0x08011d2c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	ed87 0a02 	vstr	s0, [r7, #8]
 80006a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80006a4:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  filter->width = width;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0008 	add.w	r0, r3, #8
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	461a      	mov	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00f fbcf 	bl	800fe98 <memset>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000714:	3301      	adds	r3, #1
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	fb93 f1f2 	sdiv	r1, r3, r2
 800071e:	fb01 f202 	mul.w	r2, r1, r2
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	3302      	adds	r3, #2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000752:	edd7 7a00 	vldr	s15, [r7]
 8000756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	ed93 7a01 	vldr	s14, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000788:	eef0 7a66 	vmov.f32	s15, s13
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e010      	b.n	80007ce <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ac:	2102      	movs	r1, #2
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <flash+0x48>)
 80007b0:	f006 fd3f 	bl	8007232 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f003 fbc5 	bl	8003f44 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <flash+0x48>)
 80007be:	f006 fd38 	bl	8007232 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f003 fbbe 	bl	8003f44 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbea      	blt.n	80007ac <flash+0x10>
  }

  HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f003 fbb4 	bl	8003f44 <HAL_Delay>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58020000 	.word	0x58020000

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f003 fb18 	bl	8003e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f888 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 fd0a 	bl	800120c <MX_GPIO_Init>

  MX_USART1_UART_Init();
 80007f8:	f000 fc7c 	bl	80010f4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80007fc:	f000 fadc 	bl	8000db8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000800:	f000 f93e 	bl	8000a80 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000804:	f000 f9d4 	bl	8000bb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000808:	f000 fa64 	bl	8000cd4 <MX_TIM5_Init>
  MX_TIM7_Init();
 800080c:	f000 fb0a 	bl	8000e24 <MX_TIM7_Init>
  MX_DMA_Init();
 8000810:	f000 fcbc 	bl	800118c <MX_DMA_Init>
  MX_I2C1_Init();
 8000814:	f000 f8f4 	bl	8000a00 <MX_I2C1_Init>
  MX_UART4_Init();
 8000818:	f000 fb3c 	bl	8000e94 <MX_UART4_Init>
  MX_UART5_Init();
 800081c:	f000 fb86 	bl	8000f2c <MX_UART5_Init>
  MX_UART7_Init();
 8000820:	f000 fbd0 	bl	8000fc4 <MX_UART7_Init>
  MX_UART8_Init();
 8000824:	f000 fc1a 	bl	800105c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	4827      	ldr	r0, [pc, #156]	; (80008cc <main+0xe4>)
 800082e:	f006 fce7 	bl	8007200 <HAL_GPIO_WritePin>

  flash(5);
 8000832:	2005      	movs	r0, #5
 8000834:	f7ff ffb2 	bl	800079c <flash>

  // Initialise filters for remote control
  init_filters();
 8000838:	f003 f9c6 	bl	8003bc8 <init_filters>

  // Init sensors
  init_sensors();
 800083c:	f003 f9e6 	bl	8003c0c <init_sensors>

  flash(5);
 8000840:	2005      	movs	r0, #5
 8000842:	f7ff ffab 	bl	800079c <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4821      	ldr	r0, [pc, #132]	; (80008d0 <main+0xe8>)
 800084a:	f00b fddd 	bl	800c408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800084e:	2104      	movs	r1, #4
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <main+0xe8>)
 8000852:	f00b fdd9 	bl	800c408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000856:	2108      	movs	r1, #8
 8000858:	481d      	ldr	r0, [pc, #116]	; (80008d0 <main+0xe8>)
 800085a:	f00b fdd5 	bl	800c408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 800085e:	210c      	movs	r1, #12
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <main+0xe8>)
 8000862:	f00b fdd1 	bl	800c408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <main+0xec>)
 800086a:	f00b fdcd 	bl	800c408 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800086e:	2100      	movs	r1, #0
 8000870:	4819      	ldr	r0, [pc, #100]	; (80008d8 <main+0xf0>)
 8000872:	f00b fc59 	bl	800c128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000876:	2104      	movs	r1, #4
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <main+0xf0>)
 800087a:	f00b fc55 	bl	800c128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800087e:	2108      	movs	r1, #8
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <main+0xf0>)
 8000882:	f00b fc51 	bl	800c128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000886:	210c      	movs	r1, #12
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <main+0xf0>)
 800088a:	f00b fc4d 	bl	800c128 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <main+0xf4>)
 8000890:	f00b fb70 	bl	800bf74 <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000894:	4812      	ldr	r0, [pc, #72]	; (80008e0 <main+0xf8>)
 8000896:	f00b fb6d 	bl	800bf74 <HAL_TIM_Base_Start_IT>

  // Call receive in circlar mode, don't have to repeat the call to activate callback
  HAL_UART_Receive_DMA(&huart4, g_uart_rx_buffer1, UART_BUF_SIZE);
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089e:	4911      	ldr	r1, [pc, #68]	; (80008e4 <main+0xfc>)
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <main+0x100>)
 80008a2:	f00d fa3f 	bl	800dd24 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, g_uart_rx_buffer2, UART_BUF_SIZE);
 80008a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008aa:	4910      	ldr	r1, [pc, #64]	; (80008ec <main+0x104>)
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <main+0x108>)
 80008ae:	f00d fa39 	bl	800dd24 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart7, g_uart_rx_buffer3, UART_BUF_SIZE);
 80008b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b6:	490f      	ldr	r1, [pc, #60]	; (80008f4 <main+0x10c>)
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <main+0x110>)
 80008ba:	f00d fa33 	bl	800dd24 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, g_uart_rx_buffer4, UART_BUF_SIZE);
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <main+0x114>)
 80008c4:	480e      	ldr	r0, [pc, #56]	; (8000900 <main+0x118>)
 80008c6:	f00d fa2d 	bl	800dd24 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0xe2>
 80008cc:	58020000 	.word	0x58020000
 80008d0:	240001cc 	.word	0x240001cc
 80008d4:	24000218 	.word	0x24000218
 80008d8:	24000180 	.word	0x24000180
 80008dc:	24000264 	.word	0x24000264
 80008e0:	240002b0 	.word	0x240002b0
 80008e4:	24001134 	.word	0x24001134
 80008e8:	240002fc 	.word	0x240002fc
 80008ec:	24001234 	.word	0x24001234
 80008f0:	2400038c 	.word	0x2400038c
 80008f4:	24001334 	.word	0x24001334
 80008f8:	2400041c 	.word	0x2400041c
 80008fc:	24001434 	.word	0x24001434
 8000900:	240004ac 	.word	0x240004ac

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	224c      	movs	r2, #76	; 0x4c
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00f fac0 	bl	800fe98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2220      	movs	r2, #32
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00f faba 	bl	800fe98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000924:	2002      	movs	r0, #2
 8000926:	f008 ff71 	bl	800980c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <SystemClock_Config+0xf4>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <SystemClock_Config+0xf4>)
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	62d3      	str	r3, [r2, #44]	; 0x2c
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <SystemClock_Config+0xf4>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <SystemClock_Config+0xf8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <SystemClock_Config+0xf8>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <SystemClock_Config+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095c:	bf00      	nop
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xf8>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096a:	d1f8      	bne.n	800095e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800096c:	2303      	movs	r3, #3
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	2302      	movs	r3, #2
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000986:	230a      	movs	r3, #10
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800099a:	2308      	movs	r3, #8
 800099c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800099e:	2302      	movs	r3, #2
 80009a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f008 ff68 	bl	8009880 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009b6:	f000 fc9b 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	233f      	movs	r3, #63	; 0x3f
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2303      	movs	r3, #3
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 fb7c 	bl	800a0dc <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009ea:	f000 fc81 	bl	80012f0 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_I2C1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a3c:	f006 fc14 	bl	8007268 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 fc53 	bl	80012f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a4e:	f008 fe45 	bl	80096dc <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fc4a 	bl	80012f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_I2C1_Init+0x74>)
 8000a60:	f008 fe87 	bl	8009772 <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fc41 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	240000bc 	.word	0x240000bc
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	10c0ecff 	.word	0x10c0ecff

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000abc:	2219      	movs	r2, #25
 8000abe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ac8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000adc:	f00b f9f2 	bl	800bec4 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 fc03 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af4:	4619      	mov	r1, r3
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000af8:	f00c f8a6 	bl	800cc48 <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b02:	f000 fbf5 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b08:	f00b faac 	bl	800c064 <HAL_TIM_PWM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b12:	f000 fbed 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b26:	f00c ff51 	bl	800d9cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b30:	f000 fbde 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b34:	2360      	movs	r3, #96	; 0x60
 8000b36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b4c:	f00b ff68 	bl	800ca20 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b56:	f000 fbcb 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b62:	f00b ff5d 	bl	800ca20 <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b6c:	f000 fbc0 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b78:	f00b ff52 	bl	800ca20 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b82:	f000 fbb5 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	220c      	movs	r2, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b8e:	f00b ff47 	bl	800ca20 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b98:	f000 fbaa 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM2_Init+0x12c>)
 8000b9e:	f001 fa2b 	bl	8001ff8 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	; 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24000180 	.word	0x24000180

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000bde:	4a3c      	ldr	r2, [pc, #240]	; (8000cd0 <MX_TIM4_Init+0x120>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000be4:	22fa      	movs	r2, #250	; 0xfa
 8000be6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000bf0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c02:	4832      	ldr	r0, [pc, #200]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c04:	f00b f95e 	bl	800bec4 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f000 fb6f 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c20:	f00c f812 	bl	800cc48 <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c2a:	f000 fb61 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c2e:	4827      	ldr	r0, [pc, #156]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c30:	f00b fb88 	bl	800c344 <HAL_TIM_IC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000c3a:	f000 fb59 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c4e:	f00c febd 	bl	800d9cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000c58:	f000 fb4a 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4816      	ldr	r0, [pc, #88]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c74:	f00b fe37 	bl	800c8e6 <HAL_TIM_IC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000c7e:	f000 fb37 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2204      	movs	r2, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4810      	ldr	r0, [pc, #64]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000c8a:	f00b fe2c 	bl	800c8e6 <HAL_TIM_IC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000c94:	f000 fb2c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000ca0:	f00b fe21 	bl	800c8e6 <HAL_TIM_IC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8000caa:	f000 fb21 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM4_Init+0x11c>)
 8000cb6:	f00b fe16 	bl	800c8e6 <HAL_TIM_IC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8000cc0:	f000 fb16 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	; 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	240001cc 	.word	0x240001cc
 8000cd0:	40000800 	.word	0x40000800

08000cd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <MX_TIM5_Init+0xe0>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 250;
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d08:	22fa      	movs	r2, #250	; 0xfa
 8000d0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d14:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d26:	4822      	ldr	r0, [pc, #136]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d28:	f00b f8cc 	bl	800bec4 <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8000d32:	f000 fadd 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4619      	mov	r1, r3
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d44:	f00b ff80 	bl	800cc48 <HAL_TIM_ConfigClockSource>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000d4e:	f000 facf 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d54:	f00b faf6 	bl	800c344 <HAL_TIM_IC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000d5e:	f000 fac7 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d72:	f00c fe2b 	bl	800d9cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000d7c:	f000 fab8 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d80:	230a      	movs	r3, #10
 8000d82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM5_Init+0xdc>)
 8000d98:	f00b fda5 	bl	800c8e6 <HAL_TIM_IC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8000da2:	f000 faa5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000218 	.word	0x24000218
 8000db4:	40000c00 	.word	0x40000c00

08000db8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_TIM6_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dd0:	22fa      	movs	r2, #250	; 0xfa
 8000dd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dea:	f00b f86b 	bl	800bec4 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000df4:	f000 fa7c 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000e06:	f00c fde1 	bl	800d9cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 fa6e 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24000264 	.word	0x24000264
 8000e20:	40001000 	.word	0x40001000

08000e24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <MX_TIM7_Init+0x6c>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e58:	f00b f834 	bl	800bec4 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000e62:	f000 fa45 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_TIM7_Init+0x68>)
 8000e74:	f00c fdaa 	bl	800d9cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000e7e:	f000 fa37 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	240002b0 	.word	0x240002b0
 8000e90:	40001400 	.word	0x40001400

08000e94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <MX_UART4_Init+0x90>)
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <MX_UART4_Init+0x94>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_UART4_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_UART4_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_UART4_Init+0x90>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ede:	f00c fe21 	bl	800db24 <HAL_HalfDuplex_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ee8:	f000 fa02 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_UART4_Init+0x90>)
 8000ef0:	f00e fecb 	bl	800fc8a <HAL_UARTEx_SetTxFifoThreshold>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000efa:	f000 f9f9 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <MX_UART4_Init+0x90>)
 8000f02:	f00e ff00 	bl	800fd06 <HAL_UARTEx_SetRxFifoThreshold>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f000 f9f0 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_UART4_Init+0x90>)
 8000f12:	f00e fe81 	bl	800fc18 <HAL_UARTEx_DisableFifoMode>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f9e8 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	240002fc 	.word	0x240002fc
 8000f28:	40004c00 	.word	0x40004c00

08000f2c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <MX_UART5_Init+0x94>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f3c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f76:	f00c fdd5 	bl	800db24 <HAL_HalfDuplex_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000f80:	f000 f9b6 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f88:	f00e fe7f 	bl	800fc8a <HAL_UARTEx_SetTxFifoThreshold>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000f92:	f000 f9ad 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <MX_UART5_Init+0x90>)
 8000f9a:	f00e feb4 	bl	800fd06 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000fa4:	f000 f9a4 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_UART5_Init+0x90>)
 8000faa:	f00e fe35 	bl	800fc18 <HAL_UARTEx_DisableFifoMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000fb4:	f000 f99c 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400038c 	.word	0x2400038c
 8000fc0:	40005000 	.word	0x40005000

08000fc4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_UART7_Init+0x90>)
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <MX_UART7_Init+0x94>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_UART7_Init+0x90>)
 8000fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fd4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_UART7_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_UART7_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_UART7_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_UART7_Init+0x90>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_UART7_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_UART7_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_UART7_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_UART7_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_UART7_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_UART7_Init+0x90>)
 800100e:	f00c fd89 	bl	800db24 <HAL_HalfDuplex_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001018:	f000 f96a 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_UART7_Init+0x90>)
 8001020:	f00e fe33 	bl	800fc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800102a:	f000 f961 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <MX_UART7_Init+0x90>)
 8001032:	f00e fe68 	bl	800fd06 <HAL_UARTEx_SetRxFifoThreshold>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800103c:	f000 f958 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_UART7_Init+0x90>)
 8001042:	f00e fde9 	bl	800fc18 <HAL_UARTEx_DisableFifoMode>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800104c:	f000 f950 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2400041c 	.word	0x2400041c
 8001058:	40007800 	.word	0x40007800

0800105c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_UART8_Init+0x90>)
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <MX_UART8_Init+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_UART8_Init+0x90>)
 8001068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800106c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_UART8_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_UART8_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_UART8_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_UART8_Init+0x90>)
 8001082:	2204      	movs	r2, #4
 8001084:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_UART8_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_UART8_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_UART8_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_UART8_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_UART8_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_UART8_Init+0x90>)
 80010a6:	f00c fd3d 	bl	800db24 <HAL_HalfDuplex_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80010b0:	f000 f91e 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_UART8_Init+0x90>)
 80010b8:	f00e fde7 	bl	800fc8a <HAL_UARTEx_SetTxFifoThreshold>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80010c2:	f000 f915 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <MX_UART8_Init+0x90>)
 80010ca:	f00e fe1c 	bl	800fd06 <HAL_UARTEx_SetRxFifoThreshold>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 f90c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_UART8_Init+0x90>)
 80010da:	f00e fd9d 	bl	800fc18 <HAL_UARTEx_DisableFifoMode>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f904 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	240004ac 	.word	0x240004ac
 80010f0:	40007c00 	.word	0x40007c00

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_USART1_UART_Init+0x90>)
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_USART1_UART_Init+0x94>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800111a:	2208      	movs	r2, #8
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800113e:	f00c fcf1 	bl	800db24 <HAL_HalfDuplex_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001148:	f000 f8d2 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001150:	f00e fd9b 	bl	800fc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800115a:	f000 f8c9 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001162:	f00e fdd0 	bl	800fd06 <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800116c:	f000 f8c0 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001172:	f00e fd51 	bl	800fc18 <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800117c:	f000 f8b8 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2400053c 	.word	0x2400053c
 8001188:	40011000 	.word	0x40011000

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_DMA_Init+0x7c>)
 8001194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <MX_DMA_Init+0x7c>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_DMA_Init+0x7c>)
 80011a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	200b      	movs	r0, #11
 80011b6:	f002 ffd0 	bl	800415a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ba:	200b      	movs	r0, #11
 80011bc:	f002 ffe7 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	200c      	movs	r0, #12
 80011c6:	f002 ffc8 	bl	800415a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011ca:	200c      	movs	r0, #12
 80011cc:	f002 ffdf 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	200d      	movs	r0, #13
 80011d6:	f002 ffc0 	bl	800415a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011da:	200d      	movs	r0, #13
 80011dc:	f002 ffd7 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	200e      	movs	r0, #14
 80011e6:	f002 ffb8 	bl	800415a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011ea:	200e      	movs	r0, #14
 80011ec:	f002 ffcf 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200f      	movs	r0, #15
 80011f6:	f002 ffb0 	bl	800415a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f002 ffc7 	bl	800418e <HAL_NVIC_EnableIRQ>

}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58024400 	.word	0x58024400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <MX_GPIO_Init+0xdc>)
 800122a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_GPIO_Init+0xdc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <MX_GPIO_Init+0xdc>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_GPIO_Init+0xdc>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_GPIO_Init+0xdc>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <MX_GPIO_Init+0xdc>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_GPIO_Init+0xdc>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <MX_GPIO_Init+0xe0>)
 80012be:	f005 ff9f 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012c2:	2302      	movs	r3, #2
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_GPIO_Init+0xe0>)
 80012da:	f005 fdc9 	bl	8006e70 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020000 	.word	0x58020000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
 80012fa:	0000      	movs	r0, r0
 80012fc:	0000      	movs	r0, r0
	...

08001300 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001300:	b580      	push	{r7, lr}
 8001302:	ed2d 8b04 	vpush	{d8-d9}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001318:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001668 <calc_angles+0x368>
 800131c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001336:	eef1 6a67 	vneg.f32	s13, s15
 800133a:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001668 <calc_angles+0x368>
 800133e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001352:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800135c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a08 	vldr	s15, [r3, #32]
 8001366:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800136a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001640 <calc_angles+0x340>
 800136e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001372:	eeb0 0b47 	vmov.f64	d0, d7
 8001376:	f00f fd0b 	bl	8010d90 <sin>
 800137a:	eeb0 7b40 	vmov.f64	d7, d0
 800137e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001382:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001386:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001396:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80013a0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ae:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001640 <calc_angles+0x340>
 80013b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013b6:	eeb0 0b47 	vmov.f64	d0, d7
 80013ba:	f00f fce9 	bl	8010d90 <sin>
 80013be:	eeb0 7b40 	vmov.f64	d7, d0
 80013c2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013c6:	ee38 7b47 	vsub.f64	d7, d8, d7
 80013ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013e2:	eeb0 0b47 	vmov.f64	d0, d7
 80013e6:	f00f fa7f 	bl	80108e8 <pow>
 80013ea:	eeb0 8b40 	vmov.f64	d8, d0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001400:	f00f fa72 	bl	80108e8 <pow>
 8001404:	eeb0 7b40 	vmov.f64	d7, d0
 8001408:	ee38 8b07 	vadd.f64	d8, d8, d7
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001412:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001416:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141a:	eeb0 0b47 	vmov.f64	d0, d7
 800141e:	f00f fa63 	bl	80108e8 <pow>
 8001422:	eeb0 7b40 	vmov.f64	d7, d0
 8001426:	ee38 7b07 	vadd.f64	d7, d8, d7
 800142a:	eeb0 0b47 	vmov.f64	d0, d7
 800142e:	f00f fd27 	bl	8010e80 <sqrt>
 8001432:	eeb0 7b40 	vmov.f64	d7, d0
 8001436:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800143a:	ee17 2a90 	vmov	r2, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a02 	vldr	s15, [r3, #8]
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001454:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800145c:	429a      	cmp	r2, r3
 800145e:	da1b      	bge.n	8001498 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 6a03 	vldr	s13, [r3, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147a:	eeb0 0b47 	vmov.f64	d0, d7
 800147e:	f00f fcd3 	bl	8010e28 <asin>
 8001482:	eeb0 7b40 	vmov.f64	d7, d0
 8001486:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001648 <calc_angles+0x348>
 800148a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800148e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a03 	vldr	s15, [r3, #12]
 800149e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014b2:	429a      	cmp	r2, r3
 80014b4:	da1b      	bge.n	80014ee <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d0:	eeb0 0b47 	vmov.f64	d0, d7
 80014d4:	f00f fca8 	bl	8010e28 <asin>
 80014d8:	eeb0 7b40 	vmov.f64	d7, d0
 80014dc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001648 <calc_angles+0x348>
 80014e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d132      	bne.n	800155e <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80014fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001502:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001506:	ee27 6b06 	vmul.f64	d6, d7, d6
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001514:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001518:	ee27 7b05 	vmul.f64	d7, d7, d5
 800151c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001520:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001534:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001538:	ee27 6b06 	vmul.f64	d6, d7, d6
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001546:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800154a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800154e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800155c:	e00b      	b.n	8001576 <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800157c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001580:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001650 <calc_angles+0x350>
 8001584:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800158e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001592:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001658 <calc_angles+0x358>
 8001596:	ee27 7b05 	vmul.f64	d7, d7, d5
 800159a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800159e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001650 <calc_angles+0x350>
 80015b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80015c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c4:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001658 <calc_angles+0x358>
 80015c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80015e0:	eef1 7a67 	vneg.f32	s15, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80015f0:	eef1 7a67 	vneg.f32	s15, s15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001600:	eef1 7a67 	vneg.f32	s15, s15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001610:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001660 <calc_angles+0x360>
 8001622:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001626:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	ecbd 8b04 	vpop	{d8-d9}
 800163e:	bd80      	pop	{r7, pc}
 8001640:	695f8190 	.word	0x695f8190
 8001644:	3f06e05a 	.word	0x3f06e05a
 8001648:	1a63c1f8 	.word	0x1a63c1f8
 800164c:	404ca5dc 	.word	0x404ca5dc
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	3feccccc 	.word	0x3feccccc
 8001658:	9999999a 	.word	0x9999999a
 800165c:	3fb99999 	.word	0x3fb99999
 8001660:	d2f1a9fc 	.word	0xd2f1a9fc
 8001664:	3f50624d 	.word	0x3f50624d
 8001668:	43c80000 	.word	0x43c80000

0800166c <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	460b      	mov	r3, r1
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	4613      	mov	r3, r2
 8001680:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	22d0      	movs	r2, #208	; 0xd0
 800168c:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e00a      	b.n	80016aa <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f006 f9d9 	bl	8007a50 <HAL_I2C_GetState>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d006      	beq.n	80016b2 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	3301      	adds	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	ddf1      	ble.n	8001694 <MPU6050_init+0x28>
 80016b0:	e000      	b.n	80016b4 <MPU6050_init+0x48>
      break;
 80016b2:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	dd01      	ble.n	80016be <MPU6050_init+0x52>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1e1      	b.n	8001a82 <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 80016be:	2375      	movs	r3, #117	; 0x75
 80016c0:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e011      	b.n	80016ec <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	b299      	uxth	r1, r3
 80016d2:	f107 021b 	add.w	r2, r7, #27
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	f005 fe54 	bl	8007388 <HAL_I2C_Master_Transmit>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	ddea      	ble.n	80016c8 <MPU6050_init+0x5c>
 80016f2:	e000      	b.n	80016f6 <MPU6050_init+0x8a>
      break;
 80016f4:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	dd01      	ble.n	8001700 <MPU6050_init+0x94>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1c0      	b.n	8001a82 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	e011      	b.n	800172a <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	b299      	uxth	r1, r3
 8001710:	f107 021a 	add.w	r2, r7, #26
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	f005 ff29 	bl	8007570 <HAL_I2C_Master_Receive>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b04      	cmp	r3, #4
 800172e:	ddea      	ble.n	8001706 <MPU6050_init+0x9a>
 8001730:	e000      	b.n	8001734 <MPU6050_init+0xc8>
      break;
 8001732:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b04      	cmp	r3, #4
 8001738:	dd01      	ble.n	800173e <MPU6050_init+0xd2>
 800173a:	2304      	movs	r3, #4
 800173c:	e1a1      	b.n	8001a82 <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 800173e:	7ebb      	ldrb	r3, [r7, #26]
 8001740:	2b68      	cmp	r3, #104	; 0x68
 8001742:	d001      	beq.n	8001748 <MPU6050_init+0xdc>
 8001744:	2305      	movs	r3, #5
 8001746:	e19c      	b.n	8001a82 <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001748:	236b      	movs	r3, #107	; 0x6b
 800174a:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e011      	b.n	8001776 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	b299      	uxth	r1, r3
 800175c:	f107 0218 	add.w	r2, r7, #24
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	f005 fe0f 	bl	8007388 <HAL_I2C_Master_Transmit>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	3301      	adds	r3, #1
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b04      	cmp	r3, #4
 800177a:	ddea      	ble.n	8001752 <MPU6050_init+0xe6>
 800177c:	e000      	b.n	8001780 <MPU6050_init+0x114>
      break;
 800177e:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b04      	cmp	r3, #4
 8001784:	dd01      	ble.n	800178a <MPU6050_init+0x11e>
 8001786:	2306      	movs	r3, #6
 8001788:	e17b      	b.n	8001a82 <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 800178a:	2319      	movs	r3, #25
 800178c:	753b      	strb	r3, [r7, #20]
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e011      	b.n	80017bc <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f107 0214 	add.w	r2, r7, #20
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2302      	movs	r3, #2
 80017ac:	f005 fdec 	bl	8007388 <HAL_I2C_Master_Transmit>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	ddea      	ble.n	8001798 <MPU6050_init+0x12c>
 80017c2:	e000      	b.n	80017c6 <MPU6050_init+0x15a>
      break;
 80017c4:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	dd01      	ble.n	80017d0 <MPU6050_init+0x164>
 80017cc:	2307      	movs	r3, #7
 80017ce:	e158      	b.n	8001a82 <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 80017d0:	231c      	movs	r3, #28
 80017d2:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	e011      	b.n	80017fe <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	b299      	uxth	r1, r3
 80017e4:	f107 0213 	add.w	r2, r7, #19
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	f005 fdcb 	bl	8007388 <HAL_I2C_Master_Transmit>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b04      	cmp	r3, #4
 8001802:	ddea      	ble.n	80017da <MPU6050_init+0x16e>
 8001804:	e000      	b.n	8001808 <MPU6050_init+0x19c>
      break;
 8001806:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b04      	cmp	r3, #4
 800180c:	dd01      	ble.n	8001812 <MPU6050_init+0x1a6>
 800180e:	2308      	movs	r3, #8
 8001810:	e137      	b.n	8001a82 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e011      	b.n	800183c <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	b299      	uxth	r1, r3
 8001822:	f107 0213 	add.w	r2, r7, #19
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	f005 fea0 	bl	8007570 <HAL_I2C_Master_Receive>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b04      	cmp	r3, #4
 8001840:	ddea      	ble.n	8001818 <MPU6050_init+0x1ac>
 8001842:	e000      	b.n	8001846 <MPU6050_init+0x1da>
      break;
 8001844:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b04      	cmp	r3, #4
 800184a:	dd01      	ble.n	8001850 <MPU6050_init+0x1e4>
 800184c:	2309      	movs	r3, #9
 800184e:	e118      	b.n	8001a82 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001850:	7cfb      	ldrb	r3, [r7, #19]
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f023 0318 	bic.w	r3, r3, #24
 8001858:	b25a      	sxtb	r2, r3
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	b25b      	sxtb	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b25b      	sxtb	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	e011      	b.n	8001892 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	b299      	uxth	r1, r3
 8001878:	f107 0213 	add.w	r2, r7, #19
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2301      	movs	r3, #1
 8001882:	f005 fd81 	bl	8007388 <HAL_I2C_Master_Transmit>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2b04      	cmp	r3, #4
 8001896:	ddea      	ble.n	800186e <MPU6050_init+0x202>
 8001898:	e000      	b.n	800189c <MPU6050_init+0x230>
      break;
 800189a:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	dd01      	ble.n	80018a6 <MPU6050_init+0x23a>
 80018a2:	230a      	movs	r3, #10
 80018a4:	e0ed      	b.n	8001a82 <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 80018a6:	231b      	movs	r3, #27
 80018a8:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e011      	b.n	80018d4 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	f107 0212 	add.w	r2, r7, #18
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	f005 fd60 	bl	8007388 <HAL_I2C_Master_Transmit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	ddea      	ble.n	80018b0 <MPU6050_init+0x244>
 80018da:	e000      	b.n	80018de <MPU6050_init+0x272>
      break;
 80018dc:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	dd01      	ble.n	80018e8 <MPU6050_init+0x27c>
 80018e4:	230b      	movs	r3, #11
 80018e6:	e0cc      	b.n	8001a82 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	e011      	b.n	8001912 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	791b      	ldrb	r3, [r3, #4]
 80018f6:	b299      	uxth	r1, r3
 80018f8:	f107 0212 	add.w	r2, r7, #18
 80018fc:	2364      	movs	r3, #100	; 0x64
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	f005 fe35 	bl	8007570 <HAL_I2C_Master_Receive>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b04      	cmp	r3, #4
 8001916:	ddea      	ble.n	80018ee <MPU6050_init+0x282>
 8001918:	e000      	b.n	800191c <MPU6050_init+0x2b0>
      break;
 800191a:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b04      	cmp	r3, #4
 8001920:	dd01      	ble.n	8001926 <MPU6050_init+0x2ba>
 8001922:	230c      	movs	r3, #12
 8001924:	e0ad      	b.n	8001a82 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	b25b      	sxtb	r3, r3
 800192a:	f023 0318 	bic.w	r3, r3, #24
 800192e:	b25a      	sxtb	r2, r3
 8001930:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	b25b      	sxtb	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b25b      	sxtb	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e011      	b.n	800196a <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	b299      	uxth	r1, r3
 8001950:	f107 0212 	add.w	r2, r7, #18
 8001954:	2364      	movs	r3, #100	; 0x64
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	f005 fd15 	bl	8007388 <HAL_I2C_Master_Transmit>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b04      	cmp	r3, #4
 800196e:	ddea      	ble.n	8001946 <MPU6050_init+0x2da>
 8001970:	e000      	b.n	8001974 <MPU6050_init+0x308>
      break;
 8001972:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b04      	cmp	r3, #4
 8001978:	dd01      	ble.n	800197e <MPU6050_init+0x312>
 800197a:	230d      	movs	r3, #13
 800197c:	e081      	b.n	8001a82 <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 800197e:	f240 231a 	movw	r3, #538	; 0x21a
 8001982:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	e011      	b.n	80019ae <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	b299      	uxth	r1, r3
 8001994:	f107 0210 	add.w	r2, r7, #16
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2302      	movs	r3, #2
 800199e:	f005 fcf3 	bl	8007388 <HAL_I2C_Master_Transmit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	ddea      	ble.n	800198a <MPU6050_init+0x31e>
 80019b4:	e000      	b.n	80019b8 <MPU6050_init+0x34c>
      break;
 80019b6:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	dd01      	ble.n	80019c2 <MPU6050_init+0x356>
 80019be:	230e      	movs	r3, #14
 80019c0:	e05f      	b.n	8001a82 <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3380      	adds	r3, #128	; 0x80
 80019c6:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001a8c <MPU6050_init+0x420>
 80019ca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fe5e 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3398      	adds	r3, #152	; 0x98
 80019dc:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001a8c <MPU6050_init+0x420>
 80019e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019e4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fe53 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	33b0      	adds	r3, #176	; 0xb0
 80019f2:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001a8c <MPU6050_init+0x420>
 80019f6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fe48 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	33c8      	adds	r3, #200	; 0xc8
 8001a08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a0c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a10:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fe3d 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	33e0      	adds	r3, #224	; 0xe0
 8001a1e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a22:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a26:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fe32 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	33f8      	adds	r3, #248	; 0xf8
 8001a34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a38:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a3c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fe27 	bl	8000694 <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3354      	adds	r3, #84	; 0x54
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00e fa22 	bl	800fe98 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3360      	adds	r3, #96	; 0x60
 8001a58:	220c      	movs	r2, #12
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00e fa1b 	bl	800fe98 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	336c      	adds	r3, #108	; 0x6c
 8001a66:	220c      	movs	r2, #12
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00e fa14 	bl	800fe98 <memset>
  mpu6050->initialized = 0;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	3dcccccd 	.word	0x3dcccccd

08001a90 <MPU6050_update>:
#endif

  MPU6050_set_offset(mpu6050, -ax, -ay, 0, -gx, -gy, -gz);
}

void MPU6050_update(mpu6050_t *mpu6050) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
  // Read MPU6050
//  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
//  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
  HAL_I2C_Mem_Read_DMA(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001aa8:	220e      	movs	r2, #14
 8001aaa:	9201      	str	r2, [sp, #4]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	223b      	movs	r2, #59	; 0x3b
 8001ab2:	f005 fe53 	bl	800775c <HAL_I2C_Mem_Read_DMA>
  MPU6050_parse_6axis(mpu6050);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f804 	bl	8001ac4 <MPU6050_parse_6axis>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001cb0 <MPU6050_parse_6axis+0x1ec>
 8001ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001cb4 <MPU6050_parse_6axis+0x1f0>
 8001ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	425b      	negs	r3, r3
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	425b      	negs	r3, r3
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c6a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001cb8 <MPU6050_parse_6axis+0x1f4>
 8001c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c7e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001cb8 <MPU6050_parse_6axis+0x1f4>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c92:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001cb8 <MPU6050_parse_6axis+0x1f4>
 8001c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fb2d 	bl	8001300 <calc_angles>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	43aa0000 	.word	0x43aa0000
 8001cb4:	42121eb8 	.word	0x42121eb8
 8001cb8:	42830000 	.word	0x42830000

08001cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_MspInit+0x30>)
 8001cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x30>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x30>)
 8001cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	58024400 	.word	0x58024400

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0b8      	sub	sp, #224	; 0xe0
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	22bc      	movs	r2, #188	; 0xbc
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00e f8c1 	bl	800fe98 <memset>
  if(hi2c->Instance==I2C1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_I2C_MspInit+0x128>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d176      	bne.n	8001e0e <HAL_I2C_MspInit+0x11e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d20:	2308      	movs	r3, #8
 8001d22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f008 fd60 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d3a:	f7ff fad9 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d62:	2312      	movs	r3, #18
 8001d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d74:	2304      	movs	r3, #4
 8001d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4827      	ldr	r0, [pc, #156]	; (8001e20 <HAL_I2C_MspInit+0x130>)
 8001d82:	f005 f875 	bl	8006e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_I2C_MspInit+0x12c>)
 8001d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream4;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_I2C_MspInit+0x138>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dac:	2221      	movs	r2, #33	; 0x21
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001de4:	f002 f9ee 	bl	80041c4 <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8001dee:	f7ff fa7f 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_I2C_MspInit+0x134>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	201f      	movs	r0, #31
 8001e04:	f002 f9a9 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e08:	201f      	movs	r0, #31
 8001e0a:	f002 f9c0 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	37e0      	adds	r7, #224	; 0xe0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020400 	.word	0x58020400
 8001e24:	24000108 	.word	0x24000108
 8001e28:	40020070 	.word	0x40020070

08001e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d10f      	bne.n	8001e6e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e54:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e6c:	e0b1      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM4)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5b      	ldr	r2, [pc, #364]	; (8001fe0 <HAL_TIM_Base_MspInit+0x1b4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d137      	bne.n	8001ee8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7e:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e88:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4844      	ldr	r0, [pc, #272]	; (8001fe4 <HAL_TIM_Base_MspInit+0x1b8>)
 8001ed2:	f004 ffcd 	bl	8006e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	201e      	movs	r0, #30
 8001edc:	f002 f93d 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ee0:	201e      	movs	r0, #30
 8001ee2:	f002 f954 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8001ee6:	e074      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM5)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3e      	ldr	r2, [pc, #248]	; (8001fe8 <HAL_TIM_Base_MspInit+0x1bc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d136      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4828      	ldr	r0, [pc, #160]	; (8001fec <HAL_TIM_Base_MspInit+0x1c0>)
 8001f4a:	f004 ff91 	bl	8006e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	2032      	movs	r0, #50	; 0x32
 8001f54:	f002 f901 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f58:	2032      	movs	r0, #50	; 0x32
 8001f5a:	f002 f918 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8001f5e:	e038      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM6)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <HAL_TIM_Base_MspInit+0x1c4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d117      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f70:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2036      	movs	r0, #54	; 0x36
 8001f8e:	f002 f8e4 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f92:	2036      	movs	r0, #54	; 0x36
 8001f94:	f002 f8fb 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8001f98:	e01b      	b.n	8001fd2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM7)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_TIM_Base_MspInit+0x1c8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d116      	bne.n	8001fd2 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001fac:	f043 0320 	orr.w	r3, r3, #32
 8001fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_TIM_Base_MspInit+0x1b0>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	2037      	movs	r0, #55	; 0x37
 8001fc8:	f002 f8c7 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fcc:	2037      	movs	r0, #55	; 0x37
 8001fce:	f002 f8de 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3738      	adds	r7, #56	; 0x38
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	40000800 	.word	0x40000800
 8001fe4:	58020c00 	.word	0x58020c00
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	58020000 	.word	0x58020000
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	40001400 	.word	0x40001400

08001ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d13d      	bne.n	8002096 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002056:	232c      	movs	r3, #44	; 0x2c
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <HAL_TIM_MspPostInit+0xac>)
 8002072:	f004 fefd 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002076:	2308      	movs	r3, #8
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_TIM_MspPostInit+0xb0>)
 8002092:	f004 feed 	bl	8006e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58020000 	.word	0x58020000
 80020a8:	58020400 	.word	0x58020400

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0c0      	sub	sp, #256	; 0x100
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c8:	22bc      	movs	r2, #188	; 0xbc
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00d fee3 	bl	800fe98 <memset>
  if(huart->Instance==UART4)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_UART_MspInit+0x224>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d179      	bne.n	80021d0 <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020dc:	2302      	movs	r3, #2
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ea:	4618      	mov	r0, r3
 80020ec:	f008 fb82 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020f6:	f7ff f8fb 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_UART_MspInit+0x228>)
 80020fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002100:	4a74      	ldr	r2, [pc, #464]	; (80022d4 <HAL_UART_MspInit+0x228>)
 8002102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002106:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800210c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211e:	4a6d      	ldr	r2, [pc, #436]	; (80022d4 <HAL_UART_MspInit+0x228>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213e:	2312      	movs	r3, #18
 8002140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002150:	2306      	movs	r3, #6
 8002152:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800215a:	4619      	mov	r1, r3
 800215c:	485e      	ldr	r0, [pc, #376]	; (80022d8 <HAL_UART_MspInit+0x22c>)
 800215e:	f004 fe87 	bl	8006e70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8002162:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002164:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_UART_MspInit+0x234>)
 8002166:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002168:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_UART_MspInit+0x230>)
 800216a:	223f      	movs	r2, #63	; 0x3f
 800216c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_UART_MspInit+0x230>)
 800217c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002180:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002188:	4b54      	ldr	r3, [pc, #336]	; (80022dc <HAL_UART_MspInit+0x230>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002194:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <HAL_UART_MspInit+0x230>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800219c:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_UART_MspInit+0x230>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80021a2:	484e      	ldr	r0, [pc, #312]	; (80022dc <HAL_UART_MspInit+0x230>)
 80021a4:	f002 f80e 	bl	80041c4 <HAL_DMA_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80021ae:	f7ff f89f 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	; (80022dc <HAL_UART_MspInit+0x230>)
 80021b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80021b8:	4a48      	ldr	r2, [pc, #288]	; (80022dc <HAL_UART_MspInit+0x230>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2102      	movs	r1, #2
 80021c2:	2034      	movs	r0, #52	; 0x34
 80021c4:	f001 ffc9 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021c8:	2034      	movs	r0, #52	; 0x34
 80021ca:	f001 ffe0 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021ce:	e1de      	b.n	800258e <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART5)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <HAL_UART_MspInit+0x238>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 808c 	bne.w	80022f4 <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80021dc:	2302      	movs	r3, #2
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ea:	4618      	mov	r0, r3
 80021ec:	f008 fb02 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80021f6:	f7ff f87b 	bl	80012f0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x228>)
 80021fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002200:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_UART_MspInit+0x228>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_UART_MspInit+0x228>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_UART_MspInit+0x228>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223e:	2312      	movs	r3, #18
 8002240:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002250:	230e      	movs	r3, #14
 8002252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800225a:	4619      	mov	r1, r3
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <HAL_UART_MspInit+0x23c>)
 800225e:	f004 fe07 	bl	8006e70 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_UART_MspInit+0x244>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_UART_MspInit+0x240>)
 800226a:	2241      	movs	r2, #65	; 0x41
 800226c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_UART_MspInit+0x240>)
 800227c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002280:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_UART_MspInit+0x240>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_UART_MspInit+0x240>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_UART_MspInit+0x240>)
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80022a2:	4812      	ldr	r0, [pc, #72]	; (80022ec <HAL_UART_MspInit+0x240>)
 80022a4:	f001 ff8e 	bl	80041c4 <HAL_DMA_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80022ae:	f7ff f81f 	bl	80012f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_UART_MspInit+0x240>)
 80022b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80022b8:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_UART_MspInit+0x240>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2102      	movs	r1, #2
 80022c2:	2035      	movs	r0, #53	; 0x35
 80022c4:	f001 ff49 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022c8:	2035      	movs	r0, #53	; 0x35
 80022ca:	f001 ff60 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 80022ce:	e15e      	b.n	800258e <HAL_UART_MspInit+0x4e2>
 80022d0:	40004c00 	.word	0x40004c00
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58020000 	.word	0x58020000
 80022dc:	240005cc 	.word	0x240005cc
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40005000 	.word	0x40005000
 80022e8:	58020400 	.word	0x58020400
 80022ec:	24000644 	.word	0x24000644
 80022f0:	40020028 	.word	0x40020028
  else if(huart->Instance==UART7)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4aa7      	ldr	r2, [pc, #668]	; (8002598 <HAL_UART_MspInit+0x4ec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d179      	bne.n	80023f2 <HAL_UART_MspInit+0x346>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80022fe:	2302      	movs	r3, #2
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230c:	4618      	mov	r0, r3
 800230e:	f008 fa71 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002318:	f7fe ffea 	bl	80012f0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800231c:	4b9f      	ldr	r3, [pc, #636]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	4a9e      	ldr	r2, [pc, #632]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232c:	4b9b      	ldr	r3, [pc, #620]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800232e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002332:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800233a:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	4a96      	ldr	r2, [pc, #600]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234a:	4b94      	ldr	r3, [pc, #592]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002372:	2307      	movs	r3, #7
 8002374:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002378:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800237c:	4619      	mov	r1, r3
 800237e:	4888      	ldr	r0, [pc, #544]	; (80025a0 <HAL_UART_MspInit+0x4f4>)
 8002380:	f004 fd76 	bl	8006e70 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 8002384:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 8002386:	4a88      	ldr	r2, [pc, #544]	; (80025a8 <HAL_UART_MspInit+0x4fc>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800238a:	4b86      	ldr	r3, [pc, #536]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 800238c:	224f      	movs	r2, #79	; 0x4f
 800238e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002390:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a4:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023aa:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b6:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023b8:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023be:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80023c4:	4877      	ldr	r0, [pc, #476]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023c6:	f001 fefd 	bl	80041c4 <HAL_DMA_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80023d0:	f7fe ff8e 	bl	80012f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a73      	ldr	r2, [pc, #460]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80023da:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <HAL_UART_MspInit+0x4f8>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 2, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	2052      	movs	r0, #82	; 0x52
 80023e6:	f001 feb8 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80023ea:	2052      	movs	r0, #82	; 0x52
 80023ec:	f001 fecf 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 80023f0:	e0cd      	b.n	800258e <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6d      	ldr	r2, [pc, #436]	; (80025ac <HAL_UART_MspInit+0x500>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d178      	bne.n	80024ee <HAL_UART_MspInit+0x442>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80023fc:	2302      	movs	r3, #2
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002400:	2303      	movs	r3, #3
 8002402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800240a:	4618      	mov	r0, r3
 800240c:	f008 f9f2 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8002416:	f7fe ff6b 	bl	80012f0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800241c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002420:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800242c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002438:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243e:	4a57      	ldr	r2, [pc, #348]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002448:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245c:	2312      	movs	r3, #18
 800245e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800246e:	2308      	movs	r3, #8
 8002470:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002474:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002478:	4619      	mov	r1, r3
 800247a:	4849      	ldr	r0, [pc, #292]	; (80025a0 <HAL_UART_MspInit+0x4f4>)
 800247c:	f004 fcf8 	bl	8006e70 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_UART_MspInit+0x504>)
 8002482:	4a4c      	ldr	r2, [pc, #304]	; (80025b4 <HAL_UART_MspInit+0x508>)
 8002484:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_UART_MspInit+0x504>)
 8002488:	2251      	movs	r2, #81	; 0x51
 800248a:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_UART_MspInit+0x504>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_UART_MspInit+0x504>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <HAL_UART_MspInit+0x504>)
 800249a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800249e:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b2:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80024c0:	483b      	ldr	r0, [pc, #236]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024c2:	f001 fe7f 	bl	80041c4 <HAL_DMA_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0x424>
      Error_Handler();
 80024cc:	f7fe ff10 	bl	80012f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a37      	ldr	r2, [pc, #220]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80024d6:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <HAL_UART_MspInit+0x504>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2102      	movs	r1, #2
 80024e0:	2053      	movs	r0, #83	; 0x53
 80024e2:	f001 fe3a 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80024e6:	2053      	movs	r0, #83	; 0x53
 80024e8:	f001 fe51 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 80024ec:	e04f      	b.n	800258e <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==USART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_UART_MspInit+0x50c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d14a      	bne.n	800258e <HAL_UART_MspInit+0x4e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80024fc:	2318      	movs	r3, #24
 80024fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002506:	4618      	mov	r0, r3
 8002508:	f008 f974 	bl	800a7f4 <HAL_RCCEx_PeriphCLKConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_UART_MspInit+0x46a>
      Error_Handler();
 8002512:	f7fe feed 	bl	80012f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800251c:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253a:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_UART_MspInit+0x4f0>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0x4f0>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255a:	2312      	movs	r3, #18
 800255c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800256c:	2304      	movs	r3, #4
 800256e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002576:	4619      	mov	r1, r3
 8002578:	4810      	ldr	r0, [pc, #64]	; (80025bc <HAL_UART_MspInit+0x510>)
 800257a:	f004 fc79 	bl	8006e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	210f      	movs	r1, #15
 8002582:	2025      	movs	r0, #37	; 0x25
 8002584:	f001 fde9 	bl	800415a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002588:	2025      	movs	r0, #37	; 0x25
 800258a:	f001 fe00 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007800 	.word	0x40007800
 800259c:	58024400 	.word	0x58024400
 80025a0:	58021000 	.word	0x58021000
 80025a4:	240006bc 	.word	0x240006bc
 80025a8:	40020040 	.word	0x40020040
 80025ac:	40007c00 	.word	0x40007c00
 80025b0:	24000734 	.word	0x24000734
 80025b4:	40020058 	.word	0x40020058
 80025b8:	40011000 	.word	0x40011000
 80025bc:	58020400 	.word	0x58020400

080025c0 <blink>:
void schedule_400hz(void);
void schedule_20hz(void);
void schedule_10hz(void);
void fly(void);

void blink(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  static int blink = 0;
  if (blink == 40) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <blink+0x30>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b28      	cmp	r3, #40	; 0x28
 80025ca:	d103      	bne.n	80025d4 <blink+0x14>
 80025cc:	2102      	movs	r1, #2
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <blink+0x34>)
 80025d0:	f004 fe2f 	bl	8007232 <HAL_GPIO_TogglePin>
  if (blink >= 40) blink = 0;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <blink+0x30>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b27      	cmp	r3, #39	; 0x27
 80025da:	dd02      	ble.n	80025e2 <blink+0x22>
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <blink+0x30>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  blink += 1;
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <blink+0x30>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a01      	ldr	r2, [pc, #4]	; (80025f0 <blink+0x30>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	24001668 	.word	0x24001668
 80025f4:	58020000 	.word	0x58020000

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler+0x4>

0800260a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <BusFault_Handler+0x4>

08002610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler+0x4>

08002616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f001 fc5e 	bl	8003f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Stream0_IRQHandler+0x10>)
 8002652:	f003 f8e1 	bl	8005818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	240005cc 	.word	0x240005cc

08002660 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Stream1_IRQHandler+0x10>)
 8002666:	f003 f8d7 	bl	8005818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	24000644 	.word	0x24000644

08002674 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <DMA1_Stream2_IRQHandler+0x10>)
 800267a:	f003 f8cd 	bl	8005818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	240006bc 	.word	0x240006bc

08002688 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA1_Stream3_IRQHandler+0x10>)
 800268e:	f003 f8c3 	bl	8005818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	24000734 	.word	0x24000734

0800269c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA1_Stream4_IRQHandler+0x10>)
 80026a2:	f003 f8b9 	bl	8005818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	24000108 	.word	0x24000108

080026b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <TIM4_IRQHandler+0x10>)
 80026b6:	f009 fff7 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	240001cc 	.word	0x240001cc

080026c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <I2C1_EV_IRQHandler+0x10>)
 80026ca:	f005 f93f 	bl	800794c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	240000bc 	.word	0x240000bc

080026d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <USART1_IRQHandler+0x10>)
 80026de:	f00b fb77 	bl	800ddd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2400053c 	.word	0x2400053c

080026ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <TIM5_IRQHandler+0x10>)
 80026f2:	f009 ffd9 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	24000218 	.word	0x24000218

08002700 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <UART4_IRQHandler+0x10>)
 8002706:	f00b fb63 	bl	800ddd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	240002fc 	.word	0x240002fc

08002714 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <UART5_IRQHandler+0x10>)
 800271a:	f00b fb59 	bl	800ddd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2400038c 	.word	0x2400038c

08002728 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 800272c:	f000 f9d8 	bl	8002ae0 <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM6_DAC_IRQHandler+0x14>)
 8002732:	f009 ffb9 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24000264 	.word	0x24000264

08002740 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 8002744:	f000 f9e2 	bl	8002b0c <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM7_IRQHandler+0x14>)
 800274a:	f009 ffad 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	240002b0 	.word	0x240002b0

08002758 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <UART7_IRQHandler+0x10>)
 800275e:	f00b fb37 	bl	800ddd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2400041c 	.word	0x2400041c

0800276c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <UART8_IRQHandler+0x10>)
 8002772:	f00b fb2d 	bl	800ddd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	240004ac 	.word	0x240004ac

08002780 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a78      	ldr	r2, [pc, #480]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f040 813f 	bne.w	8002a12 <HAL_TIM_IC_CaptureCallback+0x292>
    switch (htim->Channel) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7f1b      	ldrb	r3, [r3, #28]
 8002798:	3b01      	subs	r3, #1
 800279a:	2b07      	cmp	r3, #7
 800279c:	f200 80e0 	bhi.w	8002960 <HAL_TIM_IC_CaptureCallback+0x1e0>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_TIM_IC_CaptureCallback+0x28>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027c9 	.word	0x080027c9
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002961 	.word	0x08002961
 80027b4:	08002899 	.word	0x08002899
 80027b8:	08002961 	.word	0x08002961
 80027bc:	08002961 	.word	0x08002961
 80027c0:	08002961 	.word	0x08002961
 80027c4:	080028fd 	.word	0x080028fd
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 80027c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027cc:	4869      	ldr	r0, [pc, #420]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80027ce:	f004 fcff 	bl	80071d0 <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80027d8:	2100      	movs	r1, #0
 80027da:	4867      	ldr	r0, [pc, #412]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80027dc:	f00a fb2c 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80027e6:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	4861      	ldr	r0, [pc, #388]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80027ee:	f004 fcef 	bl	80071d0 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 80b5 	bne.w	8002964 <HAL_TIM_IC_CaptureCallback+0x1e4>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80027fa:	2100      	movs	r1, #0
 80027fc:	485e      	ldr	r0, [pc, #376]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80027fe:	f00a fb1b 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	4b5d      	ldr	r3, [pc, #372]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002808:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	613b      	str	r3, [r7, #16]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2be4      	cmp	r3, #228	; 0xe4
 800281a:	f340 80a3 	ble.w	8002964 <HAL_TIM_IC_CaptureCallback+0x1e4>
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f240 2206 	movw	r2, #518	; 0x206
 8002824:	4293      	cmp	r3, r2
 8002826:	f300 809d 	bgt.w	8002964 <HAL_TIM_IC_CaptureCallback+0x1e4>
            pwm_in[2] = value;
 800282a:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8002830:	e098      	b.n	8002964 <HAL_TIM_IC_CaptureCallback+0x1e4>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002836:	484f      	ldr	r0, [pc, #316]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002838:	f004 fcca 	bl	80071d0 <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IC_CaptureCallback+0xd2>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002842:	2104      	movs	r1, #4
 8002844:	484c      	ldr	r0, [pc, #304]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002846:	f00a faf7 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002850:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002856:	4847      	ldr	r0, [pc, #284]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002858:	f004 fcba 	bl	80071d0 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 8082 	bne.w	8002968 <HAL_TIM_IC_CaptureCallback+0x1e8>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002864:	2104      	movs	r1, #4
 8002866:	4844      	ldr	r0, [pc, #272]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002868:	f00a fae6 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002872:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	617b      	str	r3, [r7, #20]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2be4      	cmp	r3, #228	; 0xe4
 8002884:	dd70      	ble.n	8002968 <HAL_TIM_IC_CaptureCallback+0x1e8>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f240 2206 	movw	r2, #518	; 0x206
 800288c:	4293      	cmp	r3, r2
 800288e:	dc6b      	bgt.n	8002968 <HAL_TIM_IC_CaptureCallback+0x1e8>
            pwm_in[5] = value;
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 8002896:	e067      	b.n	8002968 <HAL_TIM_IC_CaptureCallback+0x1e8>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800289c:	4835      	ldr	r0, [pc, #212]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800289e:	f004 fc97 	bl	80071d0 <HAL_GPIO_ReadPin>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IC_CaptureCallback+0x138>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80028a8:	2108      	movs	r1, #8
 80028aa:	4833      	ldr	r0, [pc, #204]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80028ac:	f00a fac4 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028b6:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80028b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028bc:	482d      	ldr	r0, [pc, #180]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80028be:	f004 fc87 	bl	80071d0 <HAL_GPIO_ReadPin>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d151      	bne.n	800296c <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80028c8:	2108      	movs	r1, #8
 80028ca:	482b      	ldr	r0, [pc, #172]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80028cc:	f00a fab4 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028d6:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	61bb      	str	r3, [r7, #24]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2be4      	cmp	r3, #228	; 0xe4
 80028e8:	dd40      	ble.n	800296c <HAL_TIM_IC_CaptureCallback+0x1ec>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f240 2206 	movw	r2, #518	; 0x206
 80028f0:	4293      	cmp	r3, r2
 80028f2:	dc3b      	bgt.n	800296c <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[8] = value;
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 80028fa:	e037      	b.n	800296c <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 80028fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002900:	481c      	ldr	r0, [pc, #112]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002902:	f004 fc65 	bl	80071d0 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_TIM_IC_CaptureCallback+0x19c>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800290c:	210c      	movs	r1, #12
 800290e:	481a      	ldr	r0, [pc, #104]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002910:	f00a fa92 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 800291c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002922:	f004 fc55 	bl	80071d0 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d129      	bne.n	8002980 <HAL_TIM_IC_CaptureCallback+0x200>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800292c:	210c      	movs	r1, #12
 800292e:	4812      	ldr	r0, [pc, #72]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002930:	f00a fa82 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800293e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	61fb      	str	r3, [r7, #28]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2be4      	cmp	r3, #228	; 0xe4
 800294c:	dd18      	ble.n	8002980 <HAL_TIM_IC_CaptureCallback+0x200>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f240 2206 	movw	r2, #518	; 0x206
 8002954:	4293      	cmp	r3, r2
 8002956:	dc13      	bgt.n	8002980 <HAL_TIM_IC_CaptureCallback+0x200>
            pwm_in[11] = value;
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 800295e:	e00f      	b.n	8002980 <HAL_TIM_IC_CaptureCallback+0x200>
      default:
        break;
 8002960:	bf00      	nop
 8002962:	e00e      	b.n	8002982 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 8002964:	bf00      	nop
 8002966:	e00c      	b.n	8002982 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 8002968:	bf00      	nop
 800296a:	e00a      	b.n	8002982 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 800296c:	bf00      	nop
 800296e:	e008      	b.n	8002982 <HAL_TIM_IC_CaptureCallback+0x202>
 8002970:	40000800 	.word	0x40000800
 8002974:	58020c00 	.word	0x58020c00
 8002978:	240001cc 	.word	0x240001cc
 800297c:	240007ec 	.word	0x240007ec
        break;
 8002980:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	4846      	ldr	r0, [pc, #280]	; (8002ab0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8002998:	f7fd feb3 	bl	8000702 <average_filter_update>
 800299c:	eef0 7a40 	vmov.f32	s15, s0
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x334>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[5] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ba:	483f      	ldr	r0, [pc, #252]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x338>)
 80029bc:	f7fd fea1 	bl	8000702 <average_filter_update>
 80029c0:	eef0 7a40 	vmov.f32	s15, s0
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x33c>)
 80029c6:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[11] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029da:	eeb0 0a67 	vmov.f32	s0, s15
 80029de:	4838      	ldr	r0, [pc, #224]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x340>)
 80029e0:	f7fd fe8f 	bl	8000702 <average_filter_update>
 80029e4:	eef0 7a40 	vmov.f32	s15, s0
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x344>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[8] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	4831      	ldr	r0, [pc, #196]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x348>)
 8002a04:	f7fd fe7d 	bl	8000702 <average_filter_update>
 8002a08:	eef0 7a40 	vmov.f32	s15, s0
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x350>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d142      	bne.n	8002aa2 <HAL_TIM_IC_CaptureCallback+0x322>
    switch (htim->Channel) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7f1b      	ldrb	r3, [r3, #28]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d12f      	bne.n	8002a84 <HAL_TIM_IC_CaptureCallback+0x304>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8002a24:	2101      	movs	r1, #1
 8002a26:	482b      	ldr	r0, [pc, #172]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x354>)
 8002a28:	f004 fbd2 	bl	80071d0 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_TIM_IC_CaptureCallback+0x2c2>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8002a32:	2100      	movs	r1, #0
 8002a34:	4828      	ldr	r0, [pc, #160]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x358>)
 8002a36:	f00a f9ff 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8002a42:	2101      	movs	r1, #1
 8002a44:	4823      	ldr	r0, [pc, #140]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x354>)
 8002a46:	f004 fbc3 	bl	80071d0 <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IC_CaptureCallback+0x308>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8002a50:	2100      	movs	r1, #0
 8002a52:	4821      	ldr	r0, [pc, #132]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x358>)
 8002a54:	f00a f9f0 	bl	800ce38 <HAL_TIM_ReadCapturedValue>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2be4      	cmp	r3, #228	; 0xe4
 8002a70:	dd0a      	ble.n	8002a88 <HAL_TIM_IC_CaptureCallback+0x308>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f240 2206 	movw	r2, #518	; 0x206
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	dc05      	bgt.n	8002a88 <HAL_TIM_IC_CaptureCallback+0x308>
            pwm_in[14] = value;
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6393      	str	r3, [r2, #56]	; 0x38
          }
        }
        break;
 8002a82:	e001      	b.n	8002a88 <HAL_TIM_IC_CaptureCallback+0x308>
      default:
        break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_IC_CaptureCallback+0x30a>
        break;
 8002a88:	bf00      	nop
    }

    g_stick1 = pwm_in[14] > MIN_PWN_IN_CAP + 0.5*RANGE_PWM_IN_CAP ? 1 : 0;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8002a92:	db02      	blt.n	8002a9a <HAL_TIM_IC_CaptureCallback+0x31a>
 8002a94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a98:	e001      	b.n	8002a9e <HAL_TIM_IC_CaptureCallback+0x31e>
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x35c>)
 8002aa0:	6013      	str	r3, [r2, #0]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	240007ec 	.word	0x240007ec
 8002ab0:	24000928 	.word	0x24000928
 8002ab4:	24000864 	.word	0x24000864
 8002ab8:	24000ac4 	.word	0x24000ac4
 8002abc:	24000870 	.word	0x24000870
 8002ac0:	24000c60 	.word	0x24000c60
 8002ac4:	24000868 	.word	0x24000868
 8002ac8:	24000dfc 	.word	0x24000dfc
 8002acc:	2400086c 	.word	0x2400086c
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	58020000 	.word	0x58020000
 8002ad8:	24000218 	.word	0x24000218
 8002adc:	24000874 	.word	0x24000874

08002ae0 <schedule_400hz>:

void schedule_400hz(void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <schedule_400hz+0x14>)
 8002ae6:	f7fe ffd3 	bl	8001a90 <MPU6050_update>
//  MS5611_update(&g_ms5611);
  fly();
 8002aea:	f000 f995 	bl	8002e18 <fly>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	24001534 	.word	0x24001534

08002af8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <schedule_20hz>:

void schedule_20hz(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
  static char line[16];
  static int starts[4] = {-1, -1, -1, -1};

  for (int t = 0; t < 4; t += 1) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	e10d      	b.n	8002d34 <schedule_20hz+0x228>
    int start = starts[t];
 8002b18:	4a92      	ldr	r2, [pc, #584]	; (8002d64 <schedule_20hz+0x258>)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	623b      	str	r3, [r7, #32]
    int end = -1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	61fb      	str	r3, [r7, #28]
    uint8_t *p;
    switch (t) {
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d816      	bhi.n	8002b5c <schedule_20hz+0x50>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <schedule_20hz+0x28>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002b4b 	.word	0x08002b4b
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	08002b57 	.word	0x08002b57
    case 0: p = g_uart_rx_buffer1; break;
 8002b44:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <schedule_20hz+0x25c>)
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	e008      	b.n	8002b5c <schedule_20hz+0x50>
    case 1: p = g_uart_rx_buffer2; break;
 8002b4a:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <schedule_20hz+0x260>)
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e005      	b.n	8002b5c <schedule_20hz+0x50>
    case 2: p = g_uart_rx_buffer3; break;
 8002b50:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <schedule_20hz+0x264>)
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e002      	b.n	8002b5c <schedule_20hz+0x50>
    case 3: p = g_uart_rx_buffer4; break;
 8002b56:	4b87      	ldr	r3, [pc, #540]	; (8002d74 <schedule_20hz+0x268>)
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	bf00      	nop
    }

    if (start == -1) {
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b62:	d111      	bne.n	8002b88 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e00b      	b.n	8002b82 <schedule_20hz+0x76>
        if (p[i] == '$') {
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b24      	cmp	r3, #36	; 0x24
 8002b74:	d102      	bne.n	8002b7c <schedule_20hz+0x70>
          start = i;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	623b      	str	r3, [r7, #32]
          break;
 8002b7a:	e005      	b.n	8002b88 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2bff      	cmp	r3, #255	; 0xff
 8002b86:	ddf0      	ble.n	8002b6a <schedule_20hz+0x5e>
        }
      }
    }

    if (start > -1) {
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db2b      	blt.n	8002be6 <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e025      	b.n	8002be0 <schedule_20hz+0xd4>
        if (p[(start+i)%UART_BUF_SIZE] == 0) {
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	425a      	negs	r2, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	bf58      	it	pl
 8002ba2:	4253      	negpl	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <schedule_20hz+0xac>
          start = -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e016      	b.n	8002be6 <schedule_20hz+0xda>
        }

        if (p[(start+i)%UART_BUF_SIZE] == '\n') {
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	425a      	negs	r2, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	bf58      	it	pl
 8002bc6:	4253      	negpl	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b0a      	cmp	r3, #10
 8002bd2:	d102      	bne.n	8002bda <schedule_20hz+0xce>
          end = i;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	61fb      	str	r3, [r7, #28]
          break;
 8002bd8:	e005      	b.n	8002be6 <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2bff      	cmp	r3, #255	; 0xff
 8002be4:	ddd6      	ble.n	8002b94 <schedule_20hz+0x88>
        }
      }
    }

    if (start > -1 && end > -1) {
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f2c0 809f 	blt.w	8002d2c <schedule_20hz+0x220>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f2c0 809b 	blt.w	8002d2c <schedule_20hz+0x220>
      memset(line, 0, 16);
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	485f      	ldr	r0, [pc, #380]	; (8002d78 <schedule_20hz+0x26c>)
 8002bfc:	f00d f94c 	bl	800fe98 <memset>

      if (start < end) {
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	da14      	bge.n	8002c32 <schedule_20hz+0x126>
        memcpy(line, &p[start], end - start);
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	18d1      	adds	r1, r2, r3
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4858      	ldr	r0, [pc, #352]	; (8002d78 <schedule_20hz+0x26c>)
 8002c18:	f00d f930 	bl	800fe7c <memcpy>
        memset(&p[start], 0, end - start);
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	18d0      	adds	r0, r2, r3
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f00d f934 	bl	800fe98 <memset>
 8002c30:	e027      	b.n	8002c82 <schedule_20hz+0x176>
      }
      else if (start > end) {
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dd23      	ble.n	8002c82 <schedule_20hz+0x176>
        memcpy(line, &p[start], UART_BUF_SIZE - start);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	18d1      	adds	r1, r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c46:	461a      	mov	r2, r3
 8002c48:	484b      	ldr	r0, [pc, #300]	; (8002d78 <schedule_20hz+0x26c>)
 8002c4a:	f00d f917 	bl	800fe7c <memcpy>
        memset(&p[start], 0, UART_BUF_SIZE - start);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	18d0      	adds	r0, r2, r3
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f00d f91b 	bl	800fe98 <memset>
        memcpy(&line[UART_BUF_SIZE - start], p, end);
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c68:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <schedule_20hz+0x26c>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00d f903 	bl	800fe7c <memcpy>
        memset(p, 0, end);
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	69b8      	ldr	r0, [r7, #24]
 8002c7e:	f00d f90b 	bl	800fe98 <memset>
      }

      starts[t] = -1;
 8002c82:	4a38      	ldr	r2, [pc, #224]	; (8002d64 <schedule_20hz+0x258>)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      int idx = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
      for (int idx = 0; idx < 16; idx += 1) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e008      	b.n	8002caa <schedule_20hz+0x19e>
        if (line[idx] == ',') {
 8002c98:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <schedule_20hz+0x26c>)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b2c      	cmp	r3, #44	; 0x2c
 8002ca2:	d006      	beq.n	8002cb2 <schedule_20hz+0x1a6>
      for (int idx = 0; idx < 16; idx += 1) {
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	ddf3      	ble.n	8002c98 <schedule_20hz+0x18c>
 8002cb0:	e000      	b.n	8002cb4 <schedule_20hz+0x1a8>
          break;
 8002cb2:	bf00      	nop
        }
      }
      line[idx] = 0;
 8002cb4:	4a30      	ldr	r2, [pc, #192]	; (8002d78 <schedule_20hz+0x26c>)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4413      	add	r3, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
      int dy = atoi(&line[1]);
 8002cbe:	482f      	ldr	r0, [pc, #188]	; (8002d7c <schedule_20hz+0x270>)
 8002cc0:	f00d f8ae 	bl	800fe20 <atoi>
 8002cc4:	6078      	str	r0, [r7, #4]
      int dx = atoi(&line[idx+1]);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <schedule_20hz+0x26c>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f00d f8a6 	bl	800fe20 <atoi>
 8002cd4:	6038      	str	r0, [r7, #0]
      switch (t) {
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d828      	bhi.n	8002d2e <schedule_20hz+0x222>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <schedule_20hz+0x1d8>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d03 	.word	0x08002d03
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d1f 	.word	0x08002d1f
      case 0: drift.lf = dx;drift.v1 = dy; break;
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <schedule_20hz+0x274>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <schedule_20hz+0x274>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6113      	str	r3, [r2, #16]
 8002d00:	e015      	b.n	8002d2e <schedule_20hz+0x222>
      case 1: drift.rf = dx;drift.v2 = dy; break;
 8002d02:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <schedule_20hz+0x274>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6053      	str	r3, [r2, #4]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <schedule_20hz+0x274>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6153      	str	r3, [r2, #20]
 8002d0e:	e00e      	b.n	8002d2e <schedule_20hz+0x222>
      case 2: drift.rb = dx;drift.v3 = dy; break;
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <schedule_20hz+0x274>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	60d3      	str	r3, [r2, #12]
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <schedule_20hz+0x274>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	e007      	b.n	8002d2e <schedule_20hz+0x222>
      case 3: drift.lb = dx;drift.v4 = dy; break;
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <schedule_20hz+0x274>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <schedule_20hz+0x274>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	61d3      	str	r3, [r2, #28]
 8002d2a:	e000      	b.n	8002d2e <schedule_20hz+0x222>
      }
    }
 8002d2c:	bf00      	nop
  for (int t = 0; t < 4; t += 1) {
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	f77f aeee 	ble.w	8002b18 <schedule_20hz+0xc>
  }

  static char run_10hz = 1;
  if (run_10hz) schedule_10hz();
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <schedule_20hz+0x278>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <schedule_20hz+0x23c>
 8002d44:	f000 f820 	bl	8002d88 <schedule_10hz>
  run_10hz = !run_10hz;
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <schedule_20hz+0x278>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <schedule_20hz+0x278>)
 8002d5a:	701a      	strb	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	24000018 	.word	0x24000018
 8002d68:	24001134 	.word	0x24001134
 8002d6c:	24001234 	.word	0x24001234
 8002d70:	24001334 	.word	0x24001334
 8002d74:	24001434 	.word	0x24001434
 8002d78:	2400166c 	.word	0x2400166c
 8002d7c:	2400166d 	.word	0x2400166d
 8002d80:	24000890 	.word	0x24000890
 8002d84:	24000028 	.word	0x24000028

08002d88 <schedule_10hz>:

void schedule_10hz(void) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af04      	add	r7, sp, #16
#if MONITOR == 1
  memset(monitor, 0, 64);
 8002d8e:	2240      	movs	r2, #64	; 0x40
 8002d90:	2100      	movs	r1, #0
 8002d92:	481d      	ldr	r0, [pc, #116]	; (8002e08 <schedule_10hz+0x80>)
 8002d94:	f00d f880 	bl	800fe98 <memset>
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
      (int)g_mpu6050.ax, (int)g_mpu6050.ay, (int)g_mpu6050.az,
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <schedule_10hz+0x84>)
 8002d9a:	edd3 7a02 	vldr	s15, [r3, #8]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002d9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
      (int)g_mpu6050.ax, (int)g_mpu6050.ay, (int)g_mpu6050.az,
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <schedule_10hz+0x84>)
 8002da4:	edd3 7a03 	vldr	s15, [r3, #12]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002da8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)g_mpu6050.ax, (int)g_mpu6050.ay, (int)g_mpu6050.az,
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <schedule_10hz+0x84>)
 8002dae:	edd3 7a04 	vldr	s15, [r3, #16]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db6:	ee17 2a90 	vmov	r2, s15
      (int)g_mpu6050.gx, (int)g_mpu6050.gy, (int)g_mpu6050.gz);
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <schedule_10hz+0x84>)
 8002dbc:	edd3 7a06 	vldr	s15, [r3, #24]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	ee17 1a90 	vmov	r1, s15
      (int)g_mpu6050.gx, (int)g_mpu6050.gy, (int)g_mpu6050.gz);
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <schedule_10hz+0x84>)
 8002dca:	edd3 7a07 	vldr	s15, [r3, #28]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd2:	ee17 0a90 	vmov	r0, s15
      (int)g_mpu6050.gx, (int)g_mpu6050.gy, (int)g_mpu6050.gz);
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <schedule_10hz+0x84>)
 8002dd8:	edd3 7a08 	vldr	s15, [r3, #32]
  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
 8002ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de0:	ee17 3a90 	vmov	r3, s15
 8002de4:	9303      	str	r3, [sp, #12]
 8002de6:	9002      	str	r0, [sp, #8]
 8002de8:	9101      	str	r1, [sp, #4]
 8002dea:	9200      	str	r2, [sp, #0]
 8002dec:	ee16 3a90 	vmov	r3, s13
 8002df0:	ee17 2a10 	vmov	r2, s14
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <schedule_10hz+0x88>)
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <schedule_10hz+0x80>)
 8002df8:	f00d f856 	bl	800fea8 <siprintf>
  console(monitor);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <schedule_10hz+0x80>)
 8002dfe:	f000 feb1 	bl	8003b64 <console>
  sprintf(monitor, "$%d,%d,%d,%d,%d\n",
      drift.lf, drift.rf, drift.lb, drift.rb,
      drift.v1 + drift.v2 + drift.v3 + drift.v4);
  console(monitor);
#endif // Drift
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	240008b0 	.word	0x240008b0
 8002e0c:	24001534 	.word	0x24001534
 8002e10:	08011d48 	.word	0x08011d48
 8002e14:	00000000 	.word	0x00000000

08002e18 <fly>:

void fly() {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
  float angle_x = g_mpu6050.angle_x;
 8002e1e:	4bc6      	ldr	r3, [pc, #792]	; (8003138 <fly+0x320>)
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 8002e24:	4bc4      	ldr	r3, [pc, #784]	; (8003138 <fly+0x320>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 8002e2a:	4bc3      	ldr	r3, [pc, #780]	; (8003138 <fly+0x320>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 8002e30:	4bc1      	ldr	r3, [pc, #772]	; (8003138 <fly+0x320>)
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 8002e36:	4bc0      	ldr	r3, [pc, #768]	; (8003138 <fly+0x320>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 8002e3c:	4bbe      	ldr	r3, [pc, #760]	; (8003138 <fly+0x320>)
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	60fb      	str	r3, [r7, #12]

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 8002e42:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e46:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e4a:	4bbc      	ldr	r3, [pc, #752]	; (800313c <fly+0x324>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e54:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002e58:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e64:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 8002e68:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e6c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e70:	4bb3      	ldr	r3, [pc, #716]	; (8003140 <fly+0x328>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e7a:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002e7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002e82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e8a:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 8002e92:	4bac      	ldr	r3, [pc, #688]	; (8003144 <fly+0x32c>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d409      	bmi.n	8002eba <fly+0xa2>
 8002ea6:	4ba7      	ldr	r3, [pc, #668]	; (8003144 <fly+0x32c>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd10      	ble.n	8002edc <fly+0xc4>
    angle_error_z = g_yaw > 0 ? -0.2*g_yaw : -0.2*g_yaw;
 8002eba:	4ba2      	ldr	r3, [pc, #648]	; (8003144 <fly+0x32c>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ec4:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8003118 <fly+0x300>
 8002ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ed0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 8002ed4:	4b98      	ldr	r3, [pc, #608]	; (8003138 <fly+0x320>)
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_stick1 == 0) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 8002edc:	4b9a      	ldr	r3, [pc, #616]	; (8003148 <fly+0x330>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	f200 861d 	bhi.w	8003b20 <fly+0xd08>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <fly+0xd4>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002fdd 	.word	0x08002fdd
 8002ef4:	08003b1f 	.word	0x08003b1f
 8002ef8:	08003027 	.word	0x08003027
 8002efc:	08003b1f 	.word	0x08003b1f
 8002f00:	08003953 	.word	0x08003953
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8002f04:	4b91      	ldr	r3, [pc, #580]	; (800314c <fly+0x334>)
 8002f06:	4a92      	ldr	r2, [pc, #584]	; (8003150 <fly+0x338>)
 8002f08:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8002f0a:	4b92      	ldr	r3, [pc, #584]	; (8003154 <fly+0x33c>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8002f12:	4b91      	ldr	r3, [pc, #580]	; (8003158 <fly+0x340>)
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8002f1a:	4b90      	ldr	r3, [pc, #576]	; (800315c <fly+0x344>)
 8002f1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f20:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8002f22:	4b8f      	ldr	r3, [pc, #572]	; (8003160 <fly+0x348>)
 8002f24:	4a8a      	ldr	r2, [pc, #552]	; (8003150 <fly+0x338>)
 8002f26:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 8002f28:	4b8e      	ldr	r3, [pc, #568]	; (8003164 <fly+0x34c>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8002f30:	4b8d      	ldr	r3, [pc, #564]	; (8003168 <fly+0x350>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 8002f38:	4b8c      	ldr	r3, [pc, #560]	; (800316c <fly+0x354>)
 8002f3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f3e:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8002f40:	4b8b      	ldr	r3, [pc, #556]	; (8003170 <fly+0x358>)
 8002f42:	4a83      	ldr	r2, [pc, #524]	; (8003150 <fly+0x338>)
 8002f44:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <fly+0x35c>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8002f4e:	4b8a      	ldr	r3, [pc, #552]	; (8003178 <fly+0x360>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <fly+0x364>)
 8002f58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f5c:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8002f5e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002f62:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002f66:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8002f6a:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002f6e:	f000 fe0d 	bl	8003b8c <set_speed>

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002f72:	4b83      	ldr	r3, [pc, #524]	; (8003180 <fly+0x368>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003184 <fly+0x36c>
 8002f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d901      	bls.n	8002f8a <fly+0x172>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8002f86:	f000 bdcb 	b.w	8003b20 <fly+0xd08>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002f8a:	4b6e      	ldr	r3, [pc, #440]	; (8003144 <fly+0x32c>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003184 <fly+0x36c>
 8002f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	d901      	bls.n	8002fa2 <fly+0x18a>
      break;
 8002f9e:	f000 bdbf 	b.w	8003b20 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <fly+0x324>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003184 <fly+0x36c>
 8002fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb4:	d901      	bls.n	8002fba <fly+0x1a2>
      break;
 8002fb6:	f000 bdb3 	b.w	8003b20 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <fly+0x328>)
 8002fbc:	edd3 7a00 	vldr	s15, [r3]
 8002fc0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003184 <fly+0x36c>
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	da01      	bge.n	8002fd2 <fly+0x1ba>
      break;
 8002fce:	f000 bda7 	b.w	8003b20 <fly+0xd08>
        fly_mode = ready;
 8002fd2:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <fly+0x330>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
      break;
 8002fd8:	f000 bda2 	b.w	8003b20 <fly+0xd08>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <fly+0x370>)
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8002fe4:	4b69      	ldr	r3, [pc, #420]	; (800318c <fly+0x374>)
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <fly+0x378>)
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8002ff4:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8002ff8:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8002ffc:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8003000:	f640 10f6 	movw	r0, #2550	; 0x9f6
 8003004:	f000 fdc2 	bl	8003b8c <set_speed>

      // Switch to fly mode
      if (g_throttle > 0) {
 8003008:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <fly+0x368>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	dc01      	bgt.n	800301c <fly+0x204>
        fly_mode = moving;
      }

      break;
 8003018:	f000 bd82 	b.w	8003b20 <fly+0xd08>
        fly_mode = moving;
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <fly+0x330>)
 800301e:	2203      	movs	r2, #3
 8003020:	701a      	strb	r2, [r3, #0]
      break;
 8003022:	f000 bd7d 	b.w	8003b20 <fly+0xd08>
    case holding:

      break;
    case moving:
      g_P_pitch = LIMIT(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <fly+0x334>)
 8003028:	ed93 7a00 	vldr	s14, [r3]
 800302c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003194 <fly+0x37c>
 8003038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	d502      	bpl.n	8003048 <fly+0x230>
 8003042:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003194 <fly+0x37c>
 8003046:	e017      	b.n	8003078 <fly+0x260>
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <fly+0x334>)
 800304a:	ed93 7a00 	vldr	s14, [r3]
 800304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003198 <fly+0x380>
 800305a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	dd02      	ble.n	800306a <fly+0x252>
 8003064:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003198 <fly+0x380>
 8003068:	e006      	b.n	8003078 <fly+0x260>
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <fly+0x334>)
 800306c:	ed93 7a00 	vldr	s14, [r3]
 8003070:	edd7 7a02 	vldr	s15, [r7, #8]
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	4b48      	ldr	r3, [pc, #288]	; (800319c <fly+0x384>)
 800307a:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 800307e:	4b42      	ldr	r3, [pc, #264]	; (8003188 <fly+0x370>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003088:	edd7 7a02 	vldr	s15, [r7, #8]
 800308c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003090:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003120 <fly+0x308>
 8003094:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003098:	ee36 7b07 	vadd.f64	d7, d6, d7
 800309c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <fly+0x370>)
 80030a2:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = LIMIT(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <fly+0x370>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <fly+0x33c>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80030ba:	ed9f 4b1b 	vldr	d4, [pc, #108]	; 8003128 <fly+0x310>
 80030be:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80030c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d507      	bpl.n	80030dc <fly+0x2c4>
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <fly+0x33c>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80031a0 <fly+0x388>
 80030d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030da:	e068      	b.n	80031ae <fly+0x396>
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <fly+0x370>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <fly+0x33c>)
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80030f0:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8003130 <fly+0x318>
 80030f4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80030f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	dd52      	ble.n	80031a8 <fly+0x390>
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <fly+0x33c>)
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	eddf 6a26 	vldr	s13, [pc, #152]	; 80031a4 <fly+0x38c>
 800310c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003110:	e04d      	b.n	80031ae <fly+0x396>
 8003112:	bf00      	nop
 8003114:	f3af 8000 	nop.w
 8003118:	9999999a 	.word	0x9999999a
 800311c:	bfc99999 	.word	0xbfc99999
	...
 800312c:	c0709000 	.word	0xc0709000
 8003130:	00000000 	.word	0x00000000
 8003134:	40709000 	.word	0x40709000
 8003138:	24001534 	.word	0x24001534
 800313c:	24000868 	.word	0x24000868
 8003140:	2400086c 	.word	0x2400086c
 8003144:	24000870 	.word	0x24000870
 8003148:	24001664 	.word	0x24001664
 800314c:	24000000 	.word	0x24000000
 8003150:	40400000 	.word	0x40400000
 8003154:	24000878 	.word	0x24000878
 8003158:	2400087c 	.word	0x2400087c
 800315c:	24000004 	.word	0x24000004
 8003160:	24000008 	.word	0x24000008
 8003164:	24000880 	.word	0x24000880
 8003168:	24000884 	.word	0x24000884
 800316c:	2400000c 	.word	0x2400000c
 8003170:	24000010 	.word	0x24000010
 8003174:	24000888 	.word	0x24000888
 8003178:	2400088c 	.word	0x2400088c
 800317c:	24000014 	.word	0x24000014
 8003180:	24000864 	.word	0x24000864
 8003184:	c2f80000 	.word	0xc2f80000
 8003188:	240007b4 	.word	0x240007b4
 800318c:	240007c4 	.word	0x240007c4
 8003190:	240007d4 	.word	0x240007d4
 8003194:	c446c000 	.word	0xc446c000
 8003198:	4446c000 	.word	0x4446c000
 800319c:	240007ac 	.word	0x240007ac
 80031a0:	c3848000 	.word	0xc3848000
 80031a4:	43848000 	.word	0x43848000
 80031a8:	4bcd      	ldr	r3, [pc, #820]	; (80034e0 <fly+0x6c8>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	4bcc      	ldr	r3, [pc, #816]	; (80034e0 <fly+0x6c8>)
 80031b0:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 80031b4:	4bca      	ldr	r3, [pc, #808]	; (80034e0 <fly+0x6c8>)
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	4bca      	ldr	r3, [pc, #808]	; (80034e4 <fly+0x6cc>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	4bc8      	ldr	r3, [pc, #800]	; (80034e8 <fly+0x6d0>)
 80031c6:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = LIMIT(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 80031ca:	4bc8      	ldr	r3, [pc, #800]	; (80034ec <fly+0x6d4>)
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80034f0 <fly+0x6d8>
 80031dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d502      	bpl.n	80031ec <fly+0x3d4>
 80031e6:	eddf 7ac2 	vldr	s15, [pc, #776]	; 80034f0 <fly+0x6d8>
 80031ea:	e017      	b.n	800321c <fly+0x404>
 80031ec:	4bbf      	ldr	r3, [pc, #764]	; (80034ec <fly+0x6d4>)
 80031ee:	ed93 7a00 	vldr	s14, [r3]
 80031f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80034f4 <fly+0x6dc>
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	dd02      	ble.n	800320e <fly+0x3f6>
 8003208:	eddf 7aba 	vldr	s15, [pc, #744]	; 80034f4 <fly+0x6dc>
 800320c:	e006      	b.n	800321c <fly+0x404>
 800320e:	4bb7      	ldr	r3, [pc, #732]	; (80034ec <fly+0x6d4>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	edd7 7a05 	vldr	s15, [r7, #20]
 8003218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321c:	4bb6      	ldr	r3, [pc, #728]	; (80034f8 <fly+0x6e0>)
 800321e:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = LIMIT(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8003222:	4bb6      	ldr	r3, [pc, #728]	; (80034fc <fly+0x6e4>)
 8003224:	ed93 7a00 	vldr	s14, [r3]
 8003228:	edd7 7a01 	vldr	s15, [r7, #4]
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80034f0 <fly+0x6d8>
 8003234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d502      	bpl.n	8003244 <fly+0x42c>
 800323e:	eddf 7aac 	vldr	s15, [pc, #688]	; 80034f0 <fly+0x6d8>
 8003242:	e017      	b.n	8003274 <fly+0x45c>
 8003244:	4bad      	ldr	r3, [pc, #692]	; (80034fc <fly+0x6e4>)
 8003246:	ed93 7a00 	vldr	s14, [r3]
 800324a:	edd7 7a01 	vldr	s15, [r7, #4]
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80034f4 <fly+0x6dc>
 8003256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	dd02      	ble.n	8003266 <fly+0x44e>
 8003260:	eddf 7aa4 	vldr	s15, [pc, #656]	; 80034f4 <fly+0x6dc>
 8003264:	e006      	b.n	8003274 <fly+0x45c>
 8003266:	4ba5      	ldr	r3, [pc, #660]	; (80034fc <fly+0x6e4>)
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003274:	4ba2      	ldr	r3, [pc, #648]	; (8003500 <fly+0x6e8>)
 8003276:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 800327a:	4ba2      	ldr	r3, [pc, #648]	; (8003504 <fly+0x6ec>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003284:	edd7 7a01 	vldr	s15, [r7, #4]
 8003288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800328c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 80034b8 <fly+0x6a0>
 8003290:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <fly+0x6ec>)
 800329e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = LIMIT(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 80032a2:	4b98      	ldr	r3, [pc, #608]	; (8003504 <fly+0x6ec>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032ac:	4b96      	ldr	r3, [pc, #600]	; (8003508 <fly+0x6f0>)
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80032b6:	ed9f 4b82 	vldr	d4, [pc, #520]	; 80034c0 <fly+0x6a8>
 80032ba:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80032be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d507      	bpl.n	80032d8 <fly+0x4c0>
 80032c8:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <fly+0x6f0>)
 80032ca:	ed93 7a00 	vldr	s14, [r3]
 80032ce:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800350c <fly+0x6f4>
 80032d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d6:	e01d      	b.n	8003314 <fly+0x4fc>
 80032d8:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <fly+0x6ec>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <fly+0x6f0>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80032ec:	ed9f 4b76 	vldr	d4, [pc, #472]	; 80034c8 <fly+0x6b0>
 80032f0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80032f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	dd07      	ble.n	800330e <fly+0x4f6>
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <fly+0x6f0>)
 8003300:	ed93 7a00 	vldr	s14, [r3]
 8003304:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003510 <fly+0x6f8>
 8003308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330c:	e002      	b.n	8003314 <fly+0x4fc>
 800330e:	4b7d      	ldr	r3, [pc, #500]	; (8003504 <fly+0x6ec>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	4b7b      	ldr	r3, [pc, #492]	; (8003504 <fly+0x6ec>)
 8003316:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 800331a:	4b7a      	ldr	r3, [pc, #488]	; (8003504 <fly+0x6ec>)
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	4b79      	ldr	r3, [pc, #484]	; (8003508 <fly+0x6f0>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <fly+0x6fc>)
 800332c:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = LIMIT(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8003330:	4b79      	ldr	r3, [pc, #484]	; (8003518 <fly+0x700>)
 8003332:	ed93 7a00 	vldr	s14, [r3]
 8003336:	edd7 7a04 	vldr	s15, [r7, #16]
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80034f0 <fly+0x6d8>
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d502      	bpl.n	8003352 <fly+0x53a>
 800334c:	eddf 7a68 	vldr	s15, [pc, #416]	; 80034f0 <fly+0x6d8>
 8003350:	e017      	b.n	8003382 <fly+0x56a>
 8003352:	4b71      	ldr	r3, [pc, #452]	; (8003518 <fly+0x700>)
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	edd7 7a04 	vldr	s15, [r7, #16]
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80034f4 <fly+0x6dc>
 8003364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	dd02      	ble.n	8003374 <fly+0x55c>
 800336e:	eddf 7a61 	vldr	s15, [pc, #388]	; 80034f4 <fly+0x6dc>
 8003372:	e006      	b.n	8003382 <fly+0x56a>
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <fly+0x700>)
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	edd7 7a04 	vldr	s15, [r7, #16]
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	4b66      	ldr	r3, [pc, #408]	; (800351c <fly+0x704>)
 8003384:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = LIMIT(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <fly+0x708>)
 800338a:	ed93 7a00 	vldr	s14, [r3]
 800338e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003524 <fly+0x70c>
 800339a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d502      	bpl.n	80033aa <fly+0x592>
 80033a4:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8003524 <fly+0x70c>
 80033a8:	e017      	b.n	80033da <fly+0x5c2>
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <fly+0x708>)
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003528 <fly+0x710>
 80033bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	dd02      	ble.n	80033cc <fly+0x5b4>
 80033c6:	eddf 7a58 	vldr	s15, [pc, #352]	; 8003528 <fly+0x710>
 80033ca:	e006      	b.n	80033da <fly+0x5c2>
 80033cc:	4b54      	ldr	r3, [pc, #336]	; (8003520 <fly+0x708>)
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	4b54      	ldr	r3, [pc, #336]	; (800352c <fly+0x714>)
 80033dc:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <fly+0x718>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80033ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033f2:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80034b8 <fly+0x6a0>
 80033f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80033fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003402:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <fly+0x718>)
 8003404:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = LIMIT(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <fly+0x718>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003412:	4b48      	ldr	r3, [pc, #288]	; (8003534 <fly+0x71c>)
 8003414:	edd3 7a00 	vldr	s15, [r3]
 8003418:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800341c:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80034d0 <fly+0x6b8>
 8003420:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003424:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	d507      	bpl.n	800343e <fly+0x626>
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <fly+0x71c>)
 8003430:	ed93 7a00 	vldr	s14, [r3]
 8003434:	eddf 6a40 	vldr	s13, [pc, #256]	; 8003538 <fly+0x720>
 8003438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343c:	e01d      	b.n	800347a <fly+0x662>
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <fly+0x718>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <fly+0x71c>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003452:	ed9f 4b21 	vldr	d4, [pc, #132]	; 80034d8 <fly+0x6c0>
 8003456:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800345a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	dd07      	ble.n	8003474 <fly+0x65c>
 8003464:	4b33      	ldr	r3, [pc, #204]	; (8003534 <fly+0x71c>)
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800353c <fly+0x724>
 800346e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003472:	e002      	b.n	800347a <fly+0x662>
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <fly+0x718>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <fly+0x718>)
 800347c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <fly+0x718>)
 8003482:	ed93 7a00 	vldr	s14, [r3]
 8003486:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <fly+0x71c>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <fly+0x728>)
 8003492:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = LIMIT(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <fly+0x72c>)
 8003498:	ed93 7a00 	vldr	s14, [r3]
 800349c:	edd7 7a03 	vldr	s15, [r7, #12]
 80034a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003524 <fly+0x70c>
 80034a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d54a      	bpl.n	8003548 <fly+0x730>
 80034b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003524 <fly+0x70c>
 80034b6:	e05f      	b.n	8003578 <fly+0x760>
	...
 80034c4:	c0609000 	.word	0xc0609000
 80034c8:	00000000 	.word	0x00000000
 80034cc:	40609000 	.word	0x40609000
 80034d0:	00000000 	.word	0x00000000
 80034d4:	c0709000 	.word	0xc0709000
 80034d8:	00000000 	.word	0x00000000
 80034dc:	40709000 	.word	0x40709000
 80034e0:	240007b4 	.word	0x240007b4
 80034e4:	24000878 	.word	0x24000878
 80034e8:	240007b0 	.word	0x240007b0
 80034ec:	24000004 	.word	0x24000004
 80034f0:	c446c000 	.word	0xc446c000
 80034f4:	4446c000 	.word	0x4446c000
 80034f8:	240007b8 	.word	0x240007b8
 80034fc:	24000008 	.word	0x24000008
 8003500:	240007bc 	.word	0x240007bc
 8003504:	240007c4 	.word	0x240007c4
 8003508:	24000880 	.word	0x24000880
 800350c:	c3048000 	.word	0xc3048000
 8003510:	43048000 	.word	0x43048000
 8003514:	240007c0 	.word	0x240007c0
 8003518:	2400000c 	.word	0x2400000c
 800351c:	240007c8 	.word	0x240007c8
 8003520:	24000010 	.word	0x24000010
 8003524:	c4048000 	.word	0xc4048000
 8003528:	44048000 	.word	0x44048000
 800352c:	240007cc 	.word	0x240007cc
 8003530:	240007d4 	.word	0x240007d4
 8003534:	24000888 	.word	0x24000888
 8003538:	c3848000 	.word	0xc3848000
 800353c:	43848000 	.word	0x43848000
 8003540:	240007d0 	.word	0x240007d0
 8003544:	24000014 	.word	0x24000014
 8003548:	4bc1      	ldr	r3, [pc, #772]	; (8003850 <fly+0xa38>)
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003854 <fly+0xa3c>
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	dd02      	ble.n	800356a <fly+0x752>
 8003564:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003854 <fly+0xa3c>
 8003568:	e006      	b.n	8003578 <fly+0x760>
 800356a:	4bb9      	ldr	r3, [pc, #740]	; (8003850 <fly+0xa38>)
 800356c:	ed93 7a00 	vldr	s14, [r3]
 8003570:	edd7 7a03 	vldr	s15, [r7, #12]
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	4bb7      	ldr	r3, [pc, #732]	; (8003858 <fly+0xa40>)
 800357a:	edc3 7a00 	vstr	s15, [r3]

      float background = MIN_SPEED + 8*(11.18f*sqrt(g_throttle > 0 ? g_throttle : 0));
 800357e:	4bb7      	ldr	r3, [pc, #732]	; (800385c <fly+0xa44>)
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	dd05      	ble.n	800359a <fly+0x782>
 800358e:	4bb3      	ldr	r3, [pc, #716]	; (800385c <fly+0xa44>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003598:	e001      	b.n	800359e <fly+0x786>
 800359a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8003838 <fly+0xa20>
 800359e:	eeb0 0b47 	vmov.f64	d0, d7
 80035a2:	f00d fc6d 	bl	8010e80 <sqrt>
 80035a6:	eeb0 7b40 	vmov.f64	d7, d0
 80035aa:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8003840 <fly+0xa28>
 80035ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035b2:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80035b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035ba:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8003848 <fly+0xa30>
 80035be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035c6:	edc7 7a00 	vstr	s15, [r7]

      g_sig1 = background + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80035ca:	4ba5      	ldr	r3, [pc, #660]	; (8003860 <fly+0xa48>)
 80035cc:	ed93 7a00 	vldr	s14, [r3]
 80035d0:	4ba4      	ldr	r3, [pc, #656]	; (8003864 <fly+0xa4c>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035da:	4ba3      	ldr	r3, [pc, #652]	; (8003868 <fly+0xa50>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e4:	edd7 7a00 	vldr	s15, [r7]
 80035e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ec:	4b9f      	ldr	r3, [pc, #636]	; (800386c <fly+0xa54>)
 80035ee:	edd3 6a00 	vldr	s13, [r3]
 80035f2:	4b9f      	ldr	r3, [pc, #636]	; (8003870 <fly+0xa58>)
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80035fc:	4b9d      	ldr	r3, [pc, #628]	; (8003874 <fly+0xa5c>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800360a:	4b9b      	ldr	r3, [pc, #620]	; (8003878 <fly+0xa60>)
 800360c:	edd3 6a00 	vldr	s13, [r3]
 8003610:	4b9a      	ldr	r3, [pc, #616]	; (800387c <fly+0xa64>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800361a:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <fly+0xa40>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4b95      	ldr	r3, [pc, #596]	; (8003880 <fly+0xa68>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = background + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800362e:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <fly+0xa48>)
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <fly+0xa4c>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363e:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <fly+0xa50>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003648:	edd7 7a00 	vldr	s15, [r7]
 800364c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003650:	4b86      	ldr	r3, [pc, #536]	; (800386c <fly+0xa54>)
 8003652:	edd3 6a00 	vldr	s13, [r3]
 8003656:	4b86      	ldr	r3, [pc, #536]	; (8003870 <fly+0xa58>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003660:	4b84      	ldr	r3, [pc, #528]	; (8003874 <fly+0xa5c>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800366e:	4b82      	ldr	r3, [pc, #520]	; (8003878 <fly+0xa60>)
 8003670:	edd3 6a00 	vldr	s13, [r3]
 8003674:	4b81      	ldr	r3, [pc, #516]	; (800387c <fly+0xa64>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <fly+0xa40>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	4b7d      	ldr	r3, [pc, #500]	; (8003884 <fly+0xa6c>)
 800368e:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = background - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <fly+0xa48>)
 8003694:	ed93 7a00 	vldr	s14, [r3]
 8003698:	4b72      	ldr	r3, [pc, #456]	; (8003864 <fly+0xa4c>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a2:	4b71      	ldr	r3, [pc, #452]	; (8003868 <fly+0xa50>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	ed97 7a00 	vldr	s14, [r7]
 80036b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <fly+0xa54>)
 80036b6:	edd3 6a00 	vldr	s13, [r3]
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <fly+0xa58>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036c4:	4b6b      	ldr	r3, [pc, #428]	; (8003874 <fly+0xa5c>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <fly+0xa60>)
 80036d4:	edd3 6a00 	vldr	s13, [r3]
 80036d8:	4b68      	ldr	r3, [pc, #416]	; (800387c <fly+0xa64>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <fly+0xa40>)
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	4b65      	ldr	r3, [pc, #404]	; (8003888 <fly+0xa70>)
 80036f2:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = background - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <fly+0xa48>)
 80036f8:	ed93 7a00 	vldr	s14, [r3]
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <fly+0xa4c>)
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003706:	4b58      	ldr	r3, [pc, #352]	; (8003868 <fly+0xa50>)
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	ed97 7a00 	vldr	s14, [r7]
 8003714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003718:	4b54      	ldr	r3, [pc, #336]	; (800386c <fly+0xa54>)
 800371a:	edd3 6a00 	vldr	s13, [r3]
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <fly+0xa58>)
 8003720:	edd3 7a00 	vldr	s15, [r3]
 8003724:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <fly+0xa5c>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <fly+0xa60>)
 8003738:	edd3 6a00 	vldr	s13, [r3]
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <fly+0xa64>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <fly+0xa40>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003754:	4b4d      	ldr	r3, [pc, #308]	; (800388c <fly+0xa74>)
 8003756:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = LIMIT(g_sig1, MIN_SPEED, MAX_SPEED);
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <fly+0xa68>)
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003890 <fly+0xa78>
 8003764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	d501      	bpl.n	8003772 <fly+0x95a>
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <fly+0xa7c>)
 8003770:	e00d      	b.n	800378e <fly+0x976>
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <fly+0xa68>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003898 <fly+0xa80>
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	dd01      	ble.n	800378a <fly+0x972>
 8003786:	4b45      	ldr	r3, [pc, #276]	; (800389c <fly+0xa84>)
 8003788:	e001      	b.n	800378e <fly+0x976>
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <fly+0xa68>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <fly+0xa68>)
 8003790:	6013      	str	r3, [r2, #0]
      g_sig2 = LIMIT(g_sig2, MIN_SPEED, MAX_SPEED);
 8003792:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <fly+0xa6c>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003890 <fly+0xa78>
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	d501      	bpl.n	80037aa <fly+0x992>
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <fly+0xa7c>)
 80037a8:	e00d      	b.n	80037c6 <fly+0x9ae>
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <fly+0xa6c>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003898 <fly+0xa80>
 80037b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	dd01      	ble.n	80037c2 <fly+0x9aa>
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <fly+0xa84>)
 80037c0:	e001      	b.n	80037c6 <fly+0x9ae>
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <fly+0xa6c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <fly+0xa6c>)
 80037c8:	6013      	str	r3, [r2, #0]
      g_sig3 = LIMIT(g_sig3, MIN_SPEED, MAX_SPEED);
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <fly+0xa70>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003890 <fly+0xa78>
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d501      	bpl.n	80037e2 <fly+0x9ca>
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <fly+0xa7c>)
 80037e0:	e00d      	b.n	80037fe <fly+0x9e6>
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <fly+0xa70>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003898 <fly+0xa80>
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	dd01      	ble.n	80037fa <fly+0x9e2>
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <fly+0xa84>)
 80037f8:	e001      	b.n	80037fe <fly+0x9e6>
 80037fa:	4b23      	ldr	r3, [pc, #140]	; (8003888 <fly+0xa70>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a22      	ldr	r2, [pc, #136]	; (8003888 <fly+0xa70>)
 8003800:	6013      	str	r3, [r2, #0]
      g_sig4 = LIMIT(g_sig4, MIN_SPEED, MAX_SPEED);
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <fly+0xa74>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003890 <fly+0xa78>
 800380c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003814:	d501      	bpl.n	800381a <fly+0xa02>
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <fly+0xa7c>)
 8003818:	e044      	b.n	80038a4 <fly+0xa8c>
 800381a:	4b1c      	ldr	r3, [pc, #112]	; (800388c <fly+0xa74>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003898 <fly+0xa80>
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	dd38      	ble.n	80038a0 <fly+0xa88>
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <fly+0xa84>)
 8003830:	e038      	b.n	80038a4 <fly+0xa8c>
 8003832:	bf00      	nop
 8003834:	f3af 8000 	nop.w
	...
 8003844:	40265c29 	.word	0x40265c29
 8003848:	00000000 	.word	0x00000000
 800384c:	40a3ec00 	.word	0x40a3ec00
 8003850:	24000014 	.word	0x24000014
 8003854:	44048000 	.word	0x44048000
 8003858:	240007d8 	.word	0x240007d8
 800385c:	24000864 	.word	0x24000864
 8003860:	240007ac 	.word	0x240007ac
 8003864:	240007b0 	.word	0x240007b0
 8003868:	240007b8 	.word	0x240007b8
 800386c:	240007bc 	.word	0x240007bc
 8003870:	240007c0 	.word	0x240007c0
 8003874:	240007c8 	.word	0x240007c8
 8003878:	240007cc 	.word	0x240007cc
 800387c:	240007d0 	.word	0x240007d0
 8003880:	240007dc 	.word	0x240007dc
 8003884:	240007e0 	.word	0x240007e0
 8003888:	240007e4 	.word	0x240007e4
 800388c:	240007e8 	.word	0x240007e8
 8003890:	451f6000 	.word	0x451f6000
 8003894:	451f6000 	.word	0x451f6000
 8003898:	45a28000 	.word	0x45a28000
 800389c:	45a28000 	.word	0x45a28000
 80038a0:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <fly+0xd10>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4aa0      	ldr	r2, [pc, #640]	; (8003b28 <fly+0xd10>)
 80038a6:	6013      	str	r3, [r2, #0]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80038a8:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <fly+0xd14>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80038b2:	4b9f      	ldr	r3, [pc, #636]	; (8003b30 <fly+0xd18>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80038bc:	4b9d      	ldr	r3, [pc, #628]	; (8003b34 <fly+0xd1c>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80038c6:	4b98      	ldr	r3, [pc, #608]	; (8003b28 <fly+0xd10>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d0:	ee17 3a90 	vmov	r3, s15
 80038d4:	ee16 2a10 	vmov	r2, s12
 80038d8:	ee16 1a90 	vmov	r1, s13
 80038dc:	ee17 0a10 	vmov	r0, s14
 80038e0:	f000 f954 	bl	8003b8c <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 80038e4:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <fly+0xd20>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003b3c <fly+0xd24>
 80038ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d802      	bhi.n	80038fe <fly+0xae6>
        fly_mode = init;
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <fly+0xd28>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 80038fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003902:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003b44 <fly+0xd2c>
 8003906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	d41a      	bmi.n	8003946 <fly+0xb2e>
 8003910:	edd7 7a01 	vldr	s15, [r7, #4]
 8003914:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003b48 <fly+0xd30>
 8003918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	dc11      	bgt.n	8003946 <fly+0xb2e>
 8003922:	edd7 7a02 	vldr	s15, [r7, #8]
 8003926:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003b44 <fly+0xd2c>
 800392a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	d408      	bmi.n	8003946 <fly+0xb2e>
 8003934:	edd7 7a02 	vldr	s15, [r7, #8]
 8003938:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003b48 <fly+0xd30>
 800393c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	dd02      	ble.n	800394c <fly+0xb34>
        fly_mode = init;
 8003946:	4b7e      	ldr	r3, [pc, #504]	; (8003b40 <fly+0xd28>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
      }

      blink();
 800394c:	f7fe fe38 	bl	80025c0 <blink>
      break;
 8003950:	e0e6      	b.n	8003b20 <fly+0xd08>
    case landing:

      break;
    case testing:
      blink();
 8003952:	f7fe fe35 	bl	80025c0 <blink>
      g_sig1 = MIN_SPEED + LIMIT(20*g_throttle, 0, MAX_SPEED);
 8003956:	4b78      	ldr	r3, [pc, #480]	; (8003b38 <fly+0xd20>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	d502      	bpl.n	8003974 <fly+0xb5c>
 800396e:	eddf 7a77 	vldr	s15, [pc, #476]	; 8003b4c <fly+0xd34>
 8003972:	e017      	b.n	80039a4 <fly+0xb8c>
 8003974:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <fly+0xd20>)
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800397e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003982:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003b50 <fly+0xd38>
 8003986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	dd02      	ble.n	8003996 <fly+0xb7e>
 8003990:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8003b50 <fly+0xd38>
 8003994:	e006      	b.n	80039a4 <fly+0xb8c>
 8003996:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <fly+0xd20>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003b54 <fly+0xd3c>
 80039a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <fly+0xd14>)
 80039ae:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + LIMIT(20*g_yaw, 0, MAX_SPEED);
 80039b2:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <fly+0xd40>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d502      	bpl.n	80039d0 <fly+0xbb8>
 80039ca:	eddf 7a60 	vldr	s15, [pc, #384]	; 8003b4c <fly+0xd34>
 80039ce:	e017      	b.n	8003a00 <fly+0xbe8>
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <fly+0xd40>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039de:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003b50 <fly+0xd38>
 80039e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	dd02      	ble.n	80039f2 <fly+0xbda>
 80039ec:	eddf 7a58 	vldr	s15, [pc, #352]	; 8003b50 <fly+0xd38>
 80039f0:	e006      	b.n	8003a00 <fly+0xbe8>
 80039f2:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <fly+0xd40>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a00:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003b54 <fly+0xd3c>
 8003a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <fly+0xd18>)
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + LIMIT(20*g_pitch, 0, MAX_SPEED);
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <fly+0xd44>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	d502      	bpl.n	8003a2c <fly+0xc14>
 8003a26:	eddf 7a49 	vldr	s15, [pc, #292]	; 8003b4c <fly+0xd34>
 8003a2a:	e017      	b.n	8003a5c <fly+0xc44>
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <fly+0xd44>)
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003b50 <fly+0xd38>
 8003a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	dd02      	ble.n	8003a4e <fly+0xc36>
 8003a48:	eddf 7a41 	vldr	s15, [pc, #260]	; 8003b50 <fly+0xd38>
 8003a4c:	e006      	b.n	8003a5c <fly+0xc44>
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <fly+0xd44>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a5c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003b54 <fly+0xd3c>
 8003a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <fly+0xd1c>)
 8003a66:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + LIMIT(20*g_roll, 0, MAX_SPEED);
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <fly+0xd48>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d502      	bpl.n	8003a88 <fly+0xc70>
 8003a82:	eddf 7a32 	vldr	s15, [pc, #200]	; 8003b4c <fly+0xd34>
 8003a86:	e017      	b.n	8003ab8 <fly+0xca0>
 8003a88:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <fly+0xd48>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a96:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003b50 <fly+0xd38>
 8003a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	dd02      	ble.n	8003aaa <fly+0xc92>
 8003aa4:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8003b50 <fly+0xd38>
 8003aa8:	e006      	b.n	8003ab8 <fly+0xca0>
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <fly+0xd48>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003b54 <fly+0xd3c>
 8003abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <fly+0xd10>)
 8003ac2:	edc3 7a00 	vstr	s15, [r3]

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <fly+0xd20>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003b3c <fly+0xd24>
 8003ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	d802      	bhi.n	8003ae0 <fly+0xcc8>
        fly_mode = init;
 8003ada:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <fly+0xd28>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <fly+0xd14>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <fly+0xd18>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <fly+0xd1c>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <fly+0xd10>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b08:	ee17 3a90 	vmov	r3, s15
 8003b0c:	ee16 2a10 	vmov	r2, s12
 8003b10:	ee16 1a90 	vmov	r1, s13
 8003b14:	ee17 0a10 	vmov	r0, s14
 8003b18:	f000 f838 	bl	8003b8c <set_speed>
      break;
 8003b1c:	e000      	b.n	8003b20 <fly+0xd08>
      break;
 8003b1e:	bf00      	nop
  }
}
 8003b20:	bf00      	nop
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	240007e8 	.word	0x240007e8
 8003b2c:	240007dc 	.word	0x240007dc
 8003b30:	240007e0 	.word	0x240007e0
 8003b34:	240007e4 	.word	0x240007e4
 8003b38:	24000864 	.word	0x24000864
 8003b3c:	c2f80000 	.word	0xc2f80000
 8003b40:	24001664 	.word	0x24001664
 8003b44:	c2b40000 	.word	0xc2b40000
 8003b48:	42b40000 	.word	0x42b40000
 8003b4c:	00000000 	.word	0x00000000
 8003b50:	45a28000 	.word	0x45a28000
 8003b54:	451f6000 	.word	0x451f6000
 8003b58:	24000870 	.word	0x24000870
 8003b5c:	24000868 	.word	0x24000868
 8003b60:	2400086c 	.word	0x2400086c

08003b64 <console>:

void console(const char *str) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fc fbb7 	bl	80002e0 <strlen>
 8003b72:	4603      	mov	r3, r0
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <console+0x24>)
 8003b7c:	f00a f82a 	bl	800dbd4 <HAL_UART_Transmit_IT>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	2400053c 	.word	0x2400053c

08003b8c <set_speed>:

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 8003b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 8003ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 8003baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 8003bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <init_filters>:

void init_filters() {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5); // Thrust
 8003bcc:	2105      	movs	r1, #5
 8003bce:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <init_filters+0x30>)
 8003bd0:	f7fc fd79 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 8003bd4:	2105      	movs	r1, #5
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <init_filters+0x34>)
 8003bd8:	f7fc fd75 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8003bdc:	2105      	movs	r1, #5
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <init_filters+0x38>)
 8003be0:	f7fc fd71 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 8003be4:	2105      	movs	r1, #5
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <init_filters+0x3c>)
 8003be8:	f7fc fd6d 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Stick 1
 8003bec:	2105      	movs	r1, #5
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <init_filters+0x40>)
 8003bf0:	f7fc fd69 	bl	80006c6 <average_filter_init>
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	24000928 	.word	0x24000928
 8003bfc:	24000ac4 	.word	0x24000ac4
 8003c00:	24000c60 	.word	0x24000c60
 8003c04:	24000dfc 	.word	0x24000dfc
 8003c08:	24000f98 	.word	0x24000f98

08003c0c <init_sensors>:

void init_sensors() {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8
  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 8003c12:	2303      	movs	r3, #3
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2303      	movs	r3, #3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4909      	ldr	r1, [pc, #36]	; (8003c40 <init_sensors+0x34>)
 8003c1c:	4809      	ldr	r0, [pc, #36]	; (8003c44 <init_sensors+0x38>)
 8003c1e:	f7fd fd25 	bl	800166c <MPU6050_init>
 8003c22:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <init_sensors+0x2a>
    flash(error);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc fdb4 	bl	800079c <flash>
  while (1) {
 8003c34:	e7ed      	b.n	8003c12 <init_sensors+0x6>
    if (error == 0) break;
 8003c36:	bf00      	nop
//        &g_ms5611,
//        &hi2c1);
//    if (error == 0) break;
//    flash(error);
//  }
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	240000bc 	.word	0x240000bc
 8003c44:	24001534 	.word	0x24001534

08003c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <_sbrk+0x5c>)
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <_sbrk+0x60>)
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <_sbrk+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <_sbrk+0x64>)
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <_sbrk+0x68>)
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <_sbrk+0x64>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d207      	bcs.n	8003c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c78:	f00c f8d6 	bl	800fe28 <__errno>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	220c      	movs	r2, #12
 8003c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c86:	e009      	b.n	8003c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c8e:	4b07      	ldr	r3, [pc, #28]	; (8003cac <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	4a05      	ldr	r2, [pc, #20]	; (8003cac <_sbrk+0x64>)
 8003c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	24080000 	.word	0x24080000
 8003ca8:	00000400 	.word	0x00000400
 8003cac:	2400167c 	.word	0x2400167c
 8003cb0:	24001698 	.word	0x24001698

08003cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <SystemInit+0xec>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	4a38      	ldr	r2, [pc, #224]	; (8003da0 <SystemInit+0xec>)
 8003cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cc8:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <SystemInit+0xf0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d807      	bhi.n	8003ce4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cd4:	4b33      	ldr	r3, [pc, #204]	; (8003da4 <SystemInit+0xf0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 030f 	bic.w	r3, r3, #15
 8003cdc:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <SystemInit+0xf0>)
 8003cde:	f043 0307 	orr.w	r3, r3, #7
 8003ce2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ce4:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <SystemInit+0xf4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <SystemInit+0xf4>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <SystemInit+0xf4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <SystemInit+0xf4>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	492b      	ldr	r1, [pc, #172]	; (8003da8 <SystemInit+0xf4>)
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <SystemInit+0xf8>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <SystemInit+0xf0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <SystemInit+0xf0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 030f 	bic.w	r3, r3, #15
 8003d16:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <SystemInit+0xf0>)
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <SystemInit+0xf4>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <SystemInit+0xf4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <SystemInit+0xf4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <SystemInit+0xf4>)
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <SystemInit+0xfc>)
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <SystemInit+0xf4>)
 8003d38:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <SystemInit+0x100>)
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <SystemInit+0xf4>)
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <SystemInit+0x104>)
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <SystemInit+0xf4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <SystemInit+0xf4>)
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <SystemInit+0x104>)
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <SystemInit+0xf4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <SystemInit+0xf4>)
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <SystemInit+0x104>)
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <SystemInit+0xf4>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <SystemInit+0xf4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <SystemInit+0xf4>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <SystemInit+0xf4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <SystemInit+0x108>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <SystemInit+0x10c>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7e:	d202      	bcs.n	8003d86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <SystemInit+0x110>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <SystemInit+0x114>)
 8003d88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SystemInit+0xec>)
 8003d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00
 8003da4:	52002000 	.word	0x52002000
 8003da8:	58024400 	.word	0x58024400
 8003dac:	eaf6ed7f 	.word	0xeaf6ed7f
 8003db0:	02020200 	.word	0x02020200
 8003db4:	01ff0000 	.word	0x01ff0000
 8003db8:	01010280 	.word	0x01010280
 8003dbc:	5c001000 	.word	0x5c001000
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	51008108 	.word	0x51008108
 8003dc8:	52004000 	.word	0x52004000

08003dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e04 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003dd0:	f7ff ff70 	bl	8003cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dd6:	e003      	b.n	8003de0 <LoopCopyDataInit>

08003dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dde:	3104      	adds	r1, #4

08003de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003de0:	480a      	ldr	r0, [pc, #40]	; (8003e0c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003de8:	d3f6      	bcc.n	8003dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003dec:	e002      	b.n	8003df4 <LoopFillZerobss>

08003dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003df0:	f842 3b04 	str.w	r3, [r2], #4

08003df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003df8:	d3f9      	bcc.n	8003dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dfa:	f00c f81b 	bl	800fe34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfe:	f7fc fcf3 	bl	80007e8 <main>
  bx  lr    
 8003e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e04:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003e08:	08013970 	.word	0x08013970
  ldr  r0, =_sdata
 8003e0c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003e10:	240000a0 	.word	0x240000a0
  ldr  r2, =_sbss
 8003e14:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 8003e18:	24001694 	.word	0x24001694

08003e1c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e1c:	e7fe      	b.n	8003e1c <ADC3_IRQHandler>
	...

08003e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e26:	2003      	movs	r0, #3
 8003e28:	f000 f98c 	bl	8004144 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e2c:	f006 fb0c 	bl	800a448 <HAL_RCC_GetSysClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_Init+0x68>)
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	4913      	ldr	r1, [pc, #76]	; (8003e8c <HAL_Init+0x6c>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_Init+0x68>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_Init+0x6c>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_Init+0x70>)
 8003e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <HAL_Init+0x74>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f000 f814 	bl	8003e98 <HAL_InitTick>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e002      	b.n	8003e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e7a:	f7fd ff1f 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	08011d5c 	.word	0x08011d5c
 8003e90:	24000030 	.word	0x24000030
 8003e94:	2400002c 	.word	0x2400002c

08003e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_InitTick+0x60>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e021      	b.n	8003ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_InitTick+0x64>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_InitTick+0x60>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f971 	bl	80041aa <HAL_SYSTICK_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00e      	b.n	8003ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d80a      	bhi.n	8003eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee0:	f000 f93b 	bl	800415a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <HAL_InitTick+0x68>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	24000038 	.word	0x24000038
 8003efc:	2400002c 	.word	0x2400002c
 8003f00:	24000034 	.word	0x24000034

08003f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	24000038 	.word	0x24000038
 8003f28:	24001680 	.word	0x24001680

08003f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	24001680 	.word	0x24001680

08003f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f4c:	f7ff ffee 	bl	8003f2c <HAL_GetTick>
 8003f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5c:	d005      	beq.n	8003f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_Delay+0x44>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6a:	bf00      	nop
 8003f6c:	f7ff ffde 	bl	8003f2c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d8f7      	bhi.n	8003f6c <HAL_Delay+0x28>
  {
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	24000038 	.word	0x24000038

08003f8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_GetREVID+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0c1b      	lsrs	r3, r3, #16
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	5c001000 	.word	0x5c001000

08003fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd2:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	60d3      	str	r3, [r2, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00
 8003fe8:	05fa0000 	.word	0x05fa0000

08003fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 0307 	and.w	r3, r3, #7
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	db0b      	blt.n	8004032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	f003 021f 	and.w	r2, r3, #31
 8004020:	4907      	ldr	r1, [pc, #28]	; (8004040 <__NVIC_EnableIRQ+0x38>)
 8004022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2001      	movs	r0, #1
 800402a:	fa00 f202 	lsl.w	r2, r0, r2
 800402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000e100 	.word	0xe000e100

08004044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	6039      	str	r1, [r7, #0]
 800404e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db0a      	blt.n	800406e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	490c      	ldr	r1, [pc, #48]	; (8004090 <__NVIC_SetPriority+0x4c>)
 800405e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004062:	0112      	lsls	r2, r2, #4
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	440b      	add	r3, r1
 8004068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800406c:	e00a      	b.n	8004084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <__NVIC_SetPriority+0x50>)
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	3b04      	subs	r3, #4
 800407c:	0112      	lsls	r2, r2, #4
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	440b      	add	r3, r1
 8004082:	761a      	strb	r2, [r3, #24]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000e100 	.word	0xe000e100
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f1c3 0307 	rsb	r3, r3, #7
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf28      	it	cs
 80040b6:	2304      	movcs	r3, #4
 80040b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3304      	adds	r3, #4
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d902      	bls.n	80040c8 <NVIC_EncodePriority+0x30>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3b03      	subs	r3, #3
 80040c6:	e000      	b.n	80040ca <NVIC_EncodePriority+0x32>
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	401a      	ands	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	43d9      	mvns	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	4313      	orrs	r3, r2
         );
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004110:	d301      	bcc.n	8004116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004112:	2301      	movs	r3, #1
 8004114:	e00f      	b.n	8004136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <SysTick_Config+0x40>)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3b01      	subs	r3, #1
 800411c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800411e:	210f      	movs	r1, #15
 8004120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004124:	f7ff ff8e 	bl	8004044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <SysTick_Config+0x40>)
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <SysTick_Config+0x40>)
 8004130:	2207      	movs	r2, #7
 8004132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	e000e010 	.word	0xe000e010

08004144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff29 	bl	8003fa4 <__NVIC_SetPriorityGrouping>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004168:	f7ff ff40 	bl	8003fec <__NVIC_GetPriorityGrouping>
 800416c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7ff ff90 	bl	8004098 <NVIC_EncodePriority>
 8004178:	4602      	mov	r2, r0
 800417a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff5f 	bl	8004044 <__NVIC_SetPriority>
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff33 	bl	8004008 <__NVIC_EnableIRQ>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ffa4 	bl	8004100 <SysTick_Config>
 80041b8:	4603      	mov	r3, r0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff feae 	bl	8003f2c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e316      	b.n	800480a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a66      	ldr	r2, [pc, #408]	; (800437c <HAL_DMA_Init+0x1b8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <HAL_DMA_Init+0xb8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a65      	ldr	r2, [pc, #404]	; (8004380 <HAL_DMA_Init+0x1bc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <HAL_DMA_Init+0xb8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_DMA_Init+0x1c0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <HAL_DMA_Init+0xb8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a62      	ldr	r2, [pc, #392]	; (8004388 <HAL_DMA_Init+0x1c4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_DMA_Init+0x1c8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <HAL_DMA_Init+0xb8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5f      	ldr	r2, [pc, #380]	; (8004390 <HAL_DMA_Init+0x1cc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5d      	ldr	r2, [pc, #372]	; (8004394 <HAL_DMA_Init+0x1d0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5c      	ldr	r2, [pc, #368]	; (8004398 <HAL_DMA_Init+0x1d4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <HAL_DMA_Init+0xb8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5a      	ldr	r2, [pc, #360]	; (800439c <HAL_DMA_Init+0x1d8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a59      	ldr	r2, [pc, #356]	; (80043a0 <HAL_DMA_Init+0x1dc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a57      	ldr	r2, [pc, #348]	; (80043a4 <HAL_DMA_Init+0x1e0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_DMA_Init+0xb8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a56      	ldr	r2, [pc, #344]	; (80043a8 <HAL_DMA_Init+0x1e4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a54      	ldr	r2, [pc, #336]	; (80043ac <HAL_DMA_Init+0x1e8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_DMA_Init+0xb8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a53      	ldr	r2, [pc, #332]	; (80043b0 <HAL_DMA_Init+0x1ec>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a51      	ldr	r2, [pc, #324]	; (80043b4 <HAL_DMA_Init+0x1f0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_DMA_Init+0xb8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a50      	ldr	r2, [pc, #320]	; (80043b8 <HAL_DMA_Init+0x1f4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <HAL_DMA_Init+0xbc>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_DMA_Init+0xbe>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 813b 	beq.w	80044fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a37      	ldr	r2, [pc, #220]	; (800437c <HAL_DMA_Init+0x1b8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d04a      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a36      	ldr	r2, [pc, #216]	; (8004380 <HAL_DMA_Init+0x1bc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d045      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_DMA_Init+0x1c0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_DMA_Init+0x1c4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a31      	ldr	r2, [pc, #196]	; (800438c <HAL_DMA_Init+0x1c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a30      	ldr	r2, [pc, #192]	; (8004390 <HAL_DMA_Init+0x1cc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	; (8004394 <HAL_DMA_Init+0x1d0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02c      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_DMA_Init+0x1d4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d027      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_DMA_Init+0x1d8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <HAL_DMA_Init+0x1dc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <HAL_DMA_Init+0x174>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a28      	ldr	r2, [pc, #160]	; (80043a4 <HAL_DMA_Init+0x1e0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_DMA_Init+0x174>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <HAL_DMA_Init+0x1e4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_DMA_Init+0x174>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <HAL_DMA_Init+0x1e8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_DMA_Init+0x174>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <HAL_DMA_Init+0x1ec>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_DMA_Init+0x174>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <HAL_DMA_Init+0x1f0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_DMA_Init+0x174>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <HAL_DMA_Init+0x1f4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <HAL_DMA_Init+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e007      	b.n	800435a <HAL_DMA_Init+0x196>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800435a:	e02f      	b.n	80043bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800435c:	f7ff fde6 	bl	8003f2c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b05      	cmp	r3, #5
 8004368:	d928      	bls.n	80043bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2203      	movs	r2, #3
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e246      	b.n	800480a <HAL_DMA_Init+0x646>
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1c8      	bne.n	800435c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4b83      	ldr	r3, [pc, #524]	; (80045e4 <HAL_DMA_Init+0x420>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80043e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b04      	cmp	r3, #4
 800440e:	d107      	bne.n	8004420 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	4313      	orrs	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004420:	4b71      	ldr	r3, [pc, #452]	; (80045e8 <HAL_DMA_Init+0x424>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_DMA_Init+0x428>)
 8004426:	4013      	ands	r3, r2
 8004428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442c:	d328      	bcc.n	8004480 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d903      	bls.n	800443e <HAL_DMA_Init+0x27a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b2e      	cmp	r3, #46	; 0x2e
 800443c:	d917      	bls.n	800446e <HAL_DMA_Init+0x2aa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b3e      	cmp	r3, #62	; 0x3e
 8004444:	d903      	bls.n	800444e <HAL_DMA_Init+0x28a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b42      	cmp	r3, #66	; 0x42
 800444c:	d90f      	bls.n	800446e <HAL_DMA_Init+0x2aa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b46      	cmp	r3, #70	; 0x46
 8004454:	d903      	bls.n	800445e <HAL_DMA_Init+0x29a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b48      	cmp	r3, #72	; 0x48
 800445c:	d907      	bls.n	800446e <HAL_DMA_Init+0x2aa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b4e      	cmp	r3, #78	; 0x4e
 8004464:	d905      	bls.n	8004472 <HAL_DMA_Init+0x2ae>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b52      	cmp	r3, #82	; 0x52
 800446c:	d801      	bhi.n	8004472 <HAL_DMA_Init+0x2ae>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_DMA_Init+0x2b0>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d117      	bne.n	80044da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f002 fb4d 	bl	8006b5c <DMA_CheckFifoParam>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2240      	movs	r2, #64	; 0x40
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e197      	b.n	800480a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f002 fa88 	bl	80069f8 <DMA_CalcBaseAndBitshift>
 80044e8:	4603      	mov	r3, r0
 80044ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	223f      	movs	r2, #63	; 0x3f
 80044f6:	409a      	lsls	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	e0cd      	b.n	800469a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <HAL_DMA_Init+0x42c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_DMA_Init+0x38a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_DMA_Init+0x430>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_DMA_Init+0x38a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <HAL_DMA_Init+0x434>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_DMA_Init+0x38a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a36      	ldr	r2, [pc, #216]	; (80045fc <HAL_DMA_Init+0x438>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_DMA_Init+0x38a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a35      	ldr	r2, [pc, #212]	; (8004600 <HAL_DMA_Init+0x43c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_DMA_Init+0x38a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a33      	ldr	r2, [pc, #204]	; (8004604 <HAL_DMA_Init+0x440>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_DMA_Init+0x38a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a32      	ldr	r2, [pc, #200]	; (8004608 <HAL_DMA_Init+0x444>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_DMA_Init+0x38a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a30      	ldr	r2, [pc, #192]	; (800460c <HAL_DMA_Init+0x448>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_DMA_Init+0x38e>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_DMA_Init+0x390>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8097 	beq.w	8004688 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <HAL_DMA_Init+0x42c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d021      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <HAL_DMA_Init+0x430>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01c      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <HAL_DMA_Init+0x434>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d017      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <HAL_DMA_Init+0x438>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d012      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <HAL_DMA_Init+0x43c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00d      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <HAL_DMA_Init+0x440>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d008      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_DMA_Init+0x444>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <HAL_DMA_Init+0x3e4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a19      	ldr	r2, [pc, #100]	; (800460c <HAL_DMA_Init+0x448>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_DMA_Init+0x44c>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d020      	beq.n	8004614 <HAL_DMA_Init+0x450>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d102      	bne.n	80045e0 <HAL_DMA_Init+0x41c>
 80045da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045de:	e01a      	b.n	8004616 <HAL_DMA_Init+0x452>
 80045e0:	2300      	movs	r3, #0
 80045e2:	e018      	b.n	8004616 <HAL_DMA_Init+0x452>
 80045e4:	fe10803f 	.word	0xfe10803f
 80045e8:	5c001000 	.word	0x5c001000
 80045ec:	ffff0000 	.word	0xffff0000
 80045f0:	58025408 	.word	0x58025408
 80045f4:	5802541c 	.word	0x5802541c
 80045f8:	58025430 	.word	0x58025430
 80045fc:	58025444 	.word	0x58025444
 8004600:	58025458 	.word	0x58025458
 8004604:	5802546c 	.word	0x5802546c
 8004608:	58025480 	.word	0x58025480
 800460c:	58025494 	.word	0x58025494
 8004610:	fffe000f 	.word	0xfffe000f
 8004614:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800461c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800462c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800463c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004644:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	4b6e      	ldr	r3, [pc, #440]	; (8004814 <HAL_DMA_Init+0x650>)
 800465c:	4413      	add	r3, r2
 800465e:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_DMA_Init+0x654>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f002 f9c3 	bl	80069f8 <DMA_CalcBaseAndBitshift>
 8004672:	4603      	mov	r3, r0
 8004674:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	409a      	lsls	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e008      	b.n	800469a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2240      	movs	r2, #64	; 0x40
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0b7      	b.n	800480a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a5f      	ldr	r2, [pc, #380]	; (800481c <HAL_DMA_Init+0x658>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d072      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a5d      	ldr	r2, [pc, #372]	; (8004820 <HAL_DMA_Init+0x65c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d06d      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a5c      	ldr	r2, [pc, #368]	; (8004824 <HAL_DMA_Init+0x660>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d068      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a5a      	ldr	r2, [pc, #360]	; (8004828 <HAL_DMA_Init+0x664>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d063      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a59      	ldr	r2, [pc, #356]	; (800482c <HAL_DMA_Init+0x668>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d05e      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a57      	ldr	r2, [pc, #348]	; (8004830 <HAL_DMA_Init+0x66c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d059      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a56      	ldr	r2, [pc, #344]	; (8004834 <HAL_DMA_Init+0x670>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d054      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a54      	ldr	r2, [pc, #336]	; (8004838 <HAL_DMA_Init+0x674>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d04f      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a53      	ldr	r2, [pc, #332]	; (800483c <HAL_DMA_Init+0x678>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d04a      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a51      	ldr	r2, [pc, #324]	; (8004840 <HAL_DMA_Init+0x67c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d045      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a50      	ldr	r2, [pc, #320]	; (8004844 <HAL_DMA_Init+0x680>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d040      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a4e      	ldr	r2, [pc, #312]	; (8004848 <HAL_DMA_Init+0x684>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d03b      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a4d      	ldr	r2, [pc, #308]	; (800484c <HAL_DMA_Init+0x688>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d036      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4b      	ldr	r2, [pc, #300]	; (8004850 <HAL_DMA_Init+0x68c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d031      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a4a      	ldr	r2, [pc, #296]	; (8004854 <HAL_DMA_Init+0x690>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d02c      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a48      	ldr	r2, [pc, #288]	; (8004858 <HAL_DMA_Init+0x694>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d027      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a47      	ldr	r2, [pc, #284]	; (800485c <HAL_DMA_Init+0x698>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d022      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a45      	ldr	r2, [pc, #276]	; (8004860 <HAL_DMA_Init+0x69c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01d      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a44      	ldr	r2, [pc, #272]	; (8004864 <HAL_DMA_Init+0x6a0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d018      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a42      	ldr	r2, [pc, #264]	; (8004868 <HAL_DMA_Init+0x6a4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a41      	ldr	r2, [pc, #260]	; (800486c <HAL_DMA_Init+0x6a8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a3f      	ldr	r2, [pc, #252]	; (8004870 <HAL_DMA_Init+0x6ac>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3e      	ldr	r2, [pc, #248]	; (8004874 <HAL_DMA_Init+0x6b0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_DMA_Init+0x5c6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <HAL_DMA_Init+0x6b4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_DMA_Init+0x5ca>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_DMA_Init+0x5cc>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d032      	beq.n	80047fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f002 fa5d 	bl	8006c54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d102      	bne.n	80047a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_DMA_Init+0x624>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d80c      	bhi.n	80047e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f002 fada 	bl	8006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	e008      	b.n	80047fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	a7fdabf8 	.word	0xa7fdabf8
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	40020010 	.word	0x40020010
 8004820:	40020028 	.word	0x40020028
 8004824:	40020040 	.word	0x40020040
 8004828:	40020058 	.word	0x40020058
 800482c:	40020070 	.word	0x40020070
 8004830:	40020088 	.word	0x40020088
 8004834:	400200a0 	.word	0x400200a0
 8004838:	400200b8 	.word	0x400200b8
 800483c:	40020410 	.word	0x40020410
 8004840:	40020428 	.word	0x40020428
 8004844:	40020440 	.word	0x40020440
 8004848:	40020458 	.word	0x40020458
 800484c:	40020470 	.word	0x40020470
 8004850:	40020488 	.word	0x40020488
 8004854:	400204a0 	.word	0x400204a0
 8004858:	400204b8 	.word	0x400204b8
 800485c:	58025408 	.word	0x58025408
 8004860:	5802541c 	.word	0x5802541c
 8004864:	58025430 	.word	0x58025430
 8004868:	58025444 	.word	0x58025444
 800486c:	58025458 	.word	0x58025458
 8004870:	5802546c 	.word	0x5802546c
 8004874:	58025480 	.word	0x58025480
 8004878:	58025494 	.word	0x58025494

0800487c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e226      	b.n	8004ce6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_DMA_Start_IT+0x2a>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e21f      	b.n	8004ce6 <HAL_DMA_Start_IT+0x46a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 820a 	bne.w	8004cd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a68      	ldr	r2, [pc, #416]	; (8004a70 <HAL_DMA_Start_IT+0x1f4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04a      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a66      	ldr	r2, [pc, #408]	; (8004a74 <HAL_DMA_Start_IT+0x1f8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d045      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_DMA_Start_IT+0x1fc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a63      	ldr	r2, [pc, #396]	; (8004a7c <HAL_DMA_Start_IT+0x200>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a62      	ldr	r2, [pc, #392]	; (8004a80 <HAL_DMA_Start_IT+0x204>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d036      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a60      	ldr	r2, [pc, #384]	; (8004a84 <HAL_DMA_Start_IT+0x208>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a5f      	ldr	r2, [pc, #380]	; (8004a88 <HAL_DMA_Start_IT+0x20c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02c      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5d      	ldr	r2, [pc, #372]	; (8004a8c <HAL_DMA_Start_IT+0x210>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5c      	ldr	r2, [pc, #368]	; (8004a90 <HAL_DMA_Start_IT+0x214>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5a      	ldr	r2, [pc, #360]	; (8004a94 <HAL_DMA_Start_IT+0x218>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01d      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a59      	ldr	r2, [pc, #356]	; (8004a98 <HAL_DMA_Start_IT+0x21c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a57      	ldr	r2, [pc, #348]	; (8004a9c <HAL_DMA_Start_IT+0x220>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a56      	ldr	r2, [pc, #344]	; (8004aa0 <HAL_DMA_Start_IT+0x224>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a54      	ldr	r2, [pc, #336]	; (8004aa4 <HAL_DMA_Start_IT+0x228>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a53      	ldr	r2, [pc, #332]	; (8004aa8 <HAL_DMA_Start_IT+0x22c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_DMA_Start_IT+0xee>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a51      	ldr	r2, [pc, #324]	; (8004aac <HAL_DMA_Start_IT+0x230>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <HAL_DMA_Start_IT+0x100>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e007      	b.n	800498c <HAL_DMA_Start_IT+0x110>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 fe84 	bl	80066a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a34      	ldr	r2, [pc, #208]	; (8004a70 <HAL_DMA_Start_IT+0x1f4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04a      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a33      	ldr	r2, [pc, #204]	; (8004a74 <HAL_DMA_Start_IT+0x1f8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d045      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a31      	ldr	r2, [pc, #196]	; (8004a78 <HAL_DMA_Start_IT+0x1fc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d040      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a30      	ldr	r2, [pc, #192]	; (8004a7c <HAL_DMA_Start_IT+0x200>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d03b      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <HAL_DMA_Start_IT+0x204>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d036      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2d      	ldr	r2, [pc, #180]	; (8004a84 <HAL_DMA_Start_IT+0x208>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d031      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <HAL_DMA_Start_IT+0x20c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02c      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <HAL_DMA_Start_IT+0x210>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <HAL_DMA_Start_IT+0x214>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_DMA_Start_IT+0x218>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_DMA_Start_IT+0x21c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <HAL_DMA_Start_IT+0x220>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <HAL_DMA_Start_IT+0x224>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <HAL_DMA_Start_IT+0x228>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_DMA_Start_IT+0x22c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_Start_IT+0x1bc>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <HAL_DMA_Start_IT+0x230>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_DMA_Start_IT+0x1c0>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_DMA_Start_IT+0x1c2>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d036      	beq.n	8004ab0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 021e 	bic.w	r2, r3, #30
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0216 	orr.w	r2, r2, #22
 8004a54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03e      	beq.n	8004adc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e035      	b.n	8004adc <HAL_DMA_Start_IT+0x260>
 8004a70:	40020010 	.word	0x40020010
 8004a74:	40020028 	.word	0x40020028
 8004a78:	40020040 	.word	0x40020040
 8004a7c:	40020058 	.word	0x40020058
 8004a80:	40020070 	.word	0x40020070
 8004a84:	40020088 	.word	0x40020088
 8004a88:	400200a0 	.word	0x400200a0
 8004a8c:	400200b8 	.word	0x400200b8
 8004a90:	40020410 	.word	0x40020410
 8004a94:	40020428 	.word	0x40020428
 8004a98:	40020440 	.word	0x40020440
 8004a9c:	40020458 	.word	0x40020458
 8004aa0:	40020470 	.word	0x40020470
 8004aa4:	40020488 	.word	0x40020488
 8004aa8:	400204a0 	.word	0x400204a0
 8004aac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020e 	bic.w	r2, r3, #14
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 020a 	orr.w	r2, r2, #10
 8004ac2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0204 	orr.w	r2, r2, #4
 8004ada:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a83      	ldr	r2, [pc, #524]	; (8004cf0 <HAL_DMA_Start_IT+0x474>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d072      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a82      	ldr	r2, [pc, #520]	; (8004cf4 <HAL_DMA_Start_IT+0x478>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d06d      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a80      	ldr	r2, [pc, #512]	; (8004cf8 <HAL_DMA_Start_IT+0x47c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d068      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7f      	ldr	r2, [pc, #508]	; (8004cfc <HAL_DMA_Start_IT+0x480>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d063      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7d      	ldr	r2, [pc, #500]	; (8004d00 <HAL_DMA_Start_IT+0x484>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d05e      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a7c      	ldr	r2, [pc, #496]	; (8004d04 <HAL_DMA_Start_IT+0x488>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d059      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_DMA_Start_IT+0x48c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d054      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a79      	ldr	r2, [pc, #484]	; (8004d0c <HAL_DMA_Start_IT+0x490>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d04f      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <HAL_DMA_Start_IT+0x494>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a76      	ldr	r2, [pc, #472]	; (8004d14 <HAL_DMA_Start_IT+0x498>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_DMA_Start_IT+0x49c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	; (8004d1c <HAL_DMA_Start_IT+0x4a0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a71      	ldr	r2, [pc, #452]	; (8004d20 <HAL_DMA_Start_IT+0x4a4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <HAL_DMA_Start_IT+0x4a8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <HAL_DMA_Start_IT+0x4ac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6d      	ldr	r2, [pc, #436]	; (8004d2c <HAL_DMA_Start_IT+0x4b0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a6b      	ldr	r2, [pc, #428]	; (8004d30 <HAL_DMA_Start_IT+0x4b4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6a      	ldr	r2, [pc, #424]	; (8004d34 <HAL_DMA_Start_IT+0x4b8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_DMA_Start_IT+0x4bc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a67      	ldr	r2, [pc, #412]	; (8004d3c <HAL_DMA_Start_IT+0x4c0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	; (8004d40 <HAL_DMA_Start_IT+0x4c4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a64      	ldr	r2, [pc, #400]	; (8004d44 <HAL_DMA_Start_IT+0x4c8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a62      	ldr	r2, [pc, #392]	; (8004d48 <HAL_DMA_Start_IT+0x4cc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_Start_IT+0x350>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a61      	ldr	r2, [pc, #388]	; (8004d4c <HAL_DMA_Start_IT+0x4d0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_DMA_Start_IT+0x354>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_Start_IT+0x356>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01a      	beq.n	8004c0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <HAL_DMA_Start_IT+0x474>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d04a      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_DMA_Start_IT+0x478>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d045      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a34      	ldr	r2, [pc, #208]	; (8004cf8 <HAL_DMA_Start_IT+0x47c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d040      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	; (8004cfc <HAL_DMA_Start_IT+0x480>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d03b      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a31      	ldr	r2, [pc, #196]	; (8004d00 <HAL_DMA_Start_IT+0x484>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d036      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <HAL_DMA_Start_IT+0x488>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d031      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <HAL_DMA_Start_IT+0x48c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d02c      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2d      	ldr	r2, [pc, #180]	; (8004d0c <HAL_DMA_Start_IT+0x490>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <HAL_DMA_Start_IT+0x494>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_DMA_Start_IT+0x498>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <HAL_DMA_Start_IT+0x49c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <HAL_DMA_Start_IT+0x4a0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <HAL_DMA_Start_IT+0x4a4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <HAL_DMA_Start_IT+0x4a8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Start_IT+0x4ac>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Start_IT+0x430>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_DMA_Start_IT+0x4b0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <HAL_DMA_Start_IT+0x442>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e012      	b.n	8004ce4 <HAL_DMA_Start_IT+0x468>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e009      	b.n	8004ce4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40020010 	.word	0x40020010
 8004cf4:	40020028 	.word	0x40020028
 8004cf8:	40020040 	.word	0x40020040
 8004cfc:	40020058 	.word	0x40020058
 8004d00:	40020070 	.word	0x40020070
 8004d04:	40020088 	.word	0x40020088
 8004d08:	400200a0 	.word	0x400200a0
 8004d0c:	400200b8 	.word	0x400200b8
 8004d10:	40020410 	.word	0x40020410
 8004d14:	40020428 	.word	0x40020428
 8004d18:	40020440 	.word	0x40020440
 8004d1c:	40020458 	.word	0x40020458
 8004d20:	40020470 	.word	0x40020470
 8004d24:	40020488 	.word	0x40020488
 8004d28:	400204a0 	.word	0x400204a0
 8004d2c:	400204b8 	.word	0x400204b8
 8004d30:	58025408 	.word	0x58025408
 8004d34:	5802541c 	.word	0x5802541c
 8004d38:	58025430 	.word	0x58025430
 8004d3c:	58025444 	.word	0x58025444
 8004d40:	58025458 	.word	0x58025458
 8004d44:	5802546c 	.word	0x5802546c
 8004d48:	58025480 	.word	0x58025480
 8004d4c:	58025494 	.word	0x58025494

08004d50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004d58:	f7ff f8e8 	bl	8003f2c <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e2dc      	b.n	8005322 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d008      	beq.n	8004d86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2280      	movs	r2, #128	; 0x80
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e2cd      	b.n	8005322 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a76      	ldr	r2, [pc, #472]	; (8004f64 <HAL_DMA_Abort+0x214>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04a      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a74      	ldr	r2, [pc, #464]	; (8004f68 <HAL_DMA_Abort+0x218>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d045      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a73      	ldr	r2, [pc, #460]	; (8004f6c <HAL_DMA_Abort+0x21c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d040      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a71      	ldr	r2, [pc, #452]	; (8004f70 <HAL_DMA_Abort+0x220>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d03b      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a70      	ldr	r2, [pc, #448]	; (8004f74 <HAL_DMA_Abort+0x224>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d036      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	; (8004f78 <HAL_DMA_Abort+0x228>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d031      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6d      	ldr	r2, [pc, #436]	; (8004f7c <HAL_DMA_Abort+0x22c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d02c      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6b      	ldr	r2, [pc, #428]	; (8004f80 <HAL_DMA_Abort+0x230>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d027      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6a      	ldr	r2, [pc, #424]	; (8004f84 <HAL_DMA_Abort+0x234>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d022      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a68      	ldr	r2, [pc, #416]	; (8004f88 <HAL_DMA_Abort+0x238>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01d      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a67      	ldr	r2, [pc, #412]	; (8004f8c <HAL_DMA_Abort+0x23c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a65      	ldr	r2, [pc, #404]	; (8004f90 <HAL_DMA_Abort+0x240>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a64      	ldr	r2, [pc, #400]	; (8004f94 <HAL_DMA_Abort+0x244>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a62      	ldr	r2, [pc, #392]	; (8004f98 <HAL_DMA_Abort+0x248>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a61      	ldr	r2, [pc, #388]	; (8004f9c <HAL_DMA_Abort+0x24c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_DMA_Abort+0xd6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5f      	ldr	r2, [pc, #380]	; (8004fa0 <HAL_DMA_Abort+0x250>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_DMA_Abort+0xda>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_DMA_Abort+0xdc>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 021e 	bic.w	r2, r2, #30
 8004e3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e00a      	b.n	8004e6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 020e 	bic.w	r2, r2, #14
 8004e66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <HAL_DMA_Abort+0x214>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d072      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <HAL_DMA_Abort+0x218>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d06d      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <HAL_DMA_Abort+0x21c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d068      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a37      	ldr	r2, [pc, #220]	; (8004f70 <HAL_DMA_Abort+0x220>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d063      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a36      	ldr	r2, [pc, #216]	; (8004f74 <HAL_DMA_Abort+0x224>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d05e      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <HAL_DMA_Abort+0x228>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d059      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a33      	ldr	r2, [pc, #204]	; (8004f7c <HAL_DMA_Abort+0x22c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d054      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <HAL_DMA_Abort+0x230>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d04f      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a30      	ldr	r2, [pc, #192]	; (8004f84 <HAL_DMA_Abort+0x234>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2e      	ldr	r2, [pc, #184]	; (8004f88 <HAL_DMA_Abort+0x238>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <HAL_DMA_Abort+0x23c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	; (8004f90 <HAL_DMA_Abort+0x240>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2a      	ldr	r2, [pc, #168]	; (8004f94 <HAL_DMA_Abort+0x244>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a28      	ldr	r2, [pc, #160]	; (8004f98 <HAL_DMA_Abort+0x248>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <HAL_DMA_Abort+0x24c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <HAL_DMA_Abort+0x250>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a24      	ldr	r2, [pc, #144]	; (8004fa4 <HAL_DMA_Abort+0x254>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <HAL_DMA_Abort+0x258>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_DMA_Abort+0x25c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_DMA_Abort+0x260>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_DMA_Abort+0x264>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_DMA_Abort+0x268>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_DMA_Abort+0x26c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_Abort+0x20e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_DMA_Abort+0x270>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d132      	bne.n	8004fc4 <HAL_DMA_Abort+0x274>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e031      	b.n	8004fc6 <HAL_DMA_Abort+0x276>
 8004f62:	bf00      	nop
 8004f64:	40020010 	.word	0x40020010
 8004f68:	40020028 	.word	0x40020028
 8004f6c:	40020040 	.word	0x40020040
 8004f70:	40020058 	.word	0x40020058
 8004f74:	40020070 	.word	0x40020070
 8004f78:	40020088 	.word	0x40020088
 8004f7c:	400200a0 	.word	0x400200a0
 8004f80:	400200b8 	.word	0x400200b8
 8004f84:	40020410 	.word	0x40020410
 8004f88:	40020428 	.word	0x40020428
 8004f8c:	40020440 	.word	0x40020440
 8004f90:	40020458 	.word	0x40020458
 8004f94:	40020470 	.word	0x40020470
 8004f98:	40020488 	.word	0x40020488
 8004f9c:	400204a0 	.word	0x400204a0
 8004fa0:	400204b8 	.word	0x400204b8
 8004fa4:	58025408 	.word	0x58025408
 8004fa8:	5802541c 	.word	0x5802541c
 8004fac:	58025430 	.word	0x58025430
 8004fb0:	58025444 	.word	0x58025444
 8004fb4:	58025458 	.word	0x58025458
 8004fb8:	5802546c 	.word	0x5802546c
 8004fbc:	58025480 	.word	0x58025480
 8004fc0:	58025494 	.word	0x58025494
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6d      	ldr	r2, [pc, #436]	; (8005194 <HAL_DMA_Abort+0x444>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d04a      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6b      	ldr	r2, [pc, #428]	; (8005198 <HAL_DMA_Abort+0x448>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d045      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6a      	ldr	r2, [pc, #424]	; (800519c <HAL_DMA_Abort+0x44c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d040      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_DMA_Abort+0x450>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d03b      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a67      	ldr	r2, [pc, #412]	; (80051a4 <HAL_DMA_Abort+0x454>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d036      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a65      	ldr	r2, [pc, #404]	; (80051a8 <HAL_DMA_Abort+0x458>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d031      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a64      	ldr	r2, [pc, #400]	; (80051ac <HAL_DMA_Abort+0x45c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d02c      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a62      	ldr	r2, [pc, #392]	; (80051b0 <HAL_DMA_Abort+0x460>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d027      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a61      	ldr	r2, [pc, #388]	; (80051b4 <HAL_DMA_Abort+0x464>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5f      	ldr	r2, [pc, #380]	; (80051b8 <HAL_DMA_Abort+0x468>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01d      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5e      	ldr	r2, [pc, #376]	; (80051bc <HAL_DMA_Abort+0x46c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <HAL_DMA_Abort+0x470>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a5b      	ldr	r2, [pc, #364]	; (80051c4 <HAL_DMA_Abort+0x474>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a59      	ldr	r2, [pc, #356]	; (80051c8 <HAL_DMA_Abort+0x478>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a58      	ldr	r2, [pc, #352]	; (80051cc <HAL_DMA_Abort+0x47c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_DMA_Abort+0x32a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <HAL_DMA_Abort+0x480>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <HAL_DMA_Abort+0x33c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e007      	b.n	800509c <HAL_DMA_Abort+0x34c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800509c:	e013      	b.n	80050c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800509e:	f7fe ff45 	bl	8003f2c <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d90c      	bls.n	80050c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2203      	movs	r2, #3
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e12d      	b.n	8005322 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <HAL_DMA_Abort+0x444>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <HAL_DMA_Abort+0x448>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2c      	ldr	r2, [pc, #176]	; (800519c <HAL_DMA_Abort+0x44c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_DMA_Abort+0x450>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <HAL_DMA_Abort+0x454>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <HAL_DMA_Abort+0x458>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_DMA_Abort+0x45c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <HAL_DMA_Abort+0x460>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_DMA_Abort+0x464>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_DMA_Abort+0x468>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_DMA_Abort+0x46c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_DMA_Abort+0x470>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_DMA_Abort+0x474>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_DMA_Abort+0x478>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HAL_DMA_Abort+0x47c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_Abort+0x422>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_DMA_Abort+0x480>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_DMA_Abort+0x426>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_DMA_Abort+0x428>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	223f      	movs	r2, #63	; 0x3f
 800518c:	409a      	lsls	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	609a      	str	r2, [r3, #8]
 8005192:	e02a      	b.n	80051ea <HAL_DMA_Abort+0x49a>
 8005194:	40020010 	.word	0x40020010
 8005198:	40020028 	.word	0x40020028
 800519c:	40020040 	.word	0x40020040
 80051a0:	40020058 	.word	0x40020058
 80051a4:	40020070 	.word	0x40020070
 80051a8:	40020088 	.word	0x40020088
 80051ac:	400200a0 	.word	0x400200a0
 80051b0:	400200b8 	.word	0x400200b8
 80051b4:	40020410 	.word	0x40020410
 80051b8:	40020428 	.word	0x40020428
 80051bc:	40020440 	.word	0x40020440
 80051c0:	40020458 	.word	0x40020458
 80051c4:	40020470 	.word	0x40020470
 80051c8:	40020488 	.word	0x40020488
 80051cc:	400204a0 	.word	0x400204a0
 80051d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	409a      	lsls	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a4f      	ldr	r2, [pc, #316]	; (800532c <HAL_DMA_Abort+0x5dc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d072      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a4d      	ldr	r2, [pc, #308]	; (8005330 <HAL_DMA_Abort+0x5e0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d06d      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a4c      	ldr	r2, [pc, #304]	; (8005334 <HAL_DMA_Abort+0x5e4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d068      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_DMA_Abort+0x5e8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d063      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a49      	ldr	r2, [pc, #292]	; (800533c <HAL_DMA_Abort+0x5ec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d05e      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a47      	ldr	r2, [pc, #284]	; (8005340 <HAL_DMA_Abort+0x5f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d059      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a46      	ldr	r2, [pc, #280]	; (8005344 <HAL_DMA_Abort+0x5f4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d054      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a44      	ldr	r2, [pc, #272]	; (8005348 <HAL_DMA_Abort+0x5f8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d04f      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a43      	ldr	r2, [pc, #268]	; (800534c <HAL_DMA_Abort+0x5fc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d04a      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a41      	ldr	r2, [pc, #260]	; (8005350 <HAL_DMA_Abort+0x600>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d045      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a40      	ldr	r2, [pc, #256]	; (8005354 <HAL_DMA_Abort+0x604>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d040      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3e      	ldr	r2, [pc, #248]	; (8005358 <HAL_DMA_Abort+0x608>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d03b      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a3d      	ldr	r2, [pc, #244]	; (800535c <HAL_DMA_Abort+0x60c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d036      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3b      	ldr	r2, [pc, #236]	; (8005360 <HAL_DMA_Abort+0x610>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d031      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a3a      	ldr	r2, [pc, #232]	; (8005364 <HAL_DMA_Abort+0x614>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d02c      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a38      	ldr	r2, [pc, #224]	; (8005368 <HAL_DMA_Abort+0x618>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d027      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a37      	ldr	r2, [pc, #220]	; (800536c <HAL_DMA_Abort+0x61c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d022      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a35      	ldr	r2, [pc, #212]	; (8005370 <HAL_DMA_Abort+0x620>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01d      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a34      	ldr	r2, [pc, #208]	; (8005374 <HAL_DMA_Abort+0x624>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d018      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a32      	ldr	r2, [pc, #200]	; (8005378 <HAL_DMA_Abort+0x628>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a31      	ldr	r2, [pc, #196]	; (800537c <HAL_DMA_Abort+0x62c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00e      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <HAL_DMA_Abort+0x630>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2e      	ldr	r2, [pc, #184]	; (8005384 <HAL_DMA_Abort+0x634>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <HAL_DMA_Abort+0x58a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <HAL_DMA_Abort+0x638>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_DMA_Abort+0x58e>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_DMA_Abort+0x590>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800530e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40020010 	.word	0x40020010
 8005330:	40020028 	.word	0x40020028
 8005334:	40020040 	.word	0x40020040
 8005338:	40020058 	.word	0x40020058
 800533c:	40020070 	.word	0x40020070
 8005340:	40020088 	.word	0x40020088
 8005344:	400200a0 	.word	0x400200a0
 8005348:	400200b8 	.word	0x400200b8
 800534c:	40020410 	.word	0x40020410
 8005350:	40020428 	.word	0x40020428
 8005354:	40020440 	.word	0x40020440
 8005358:	40020458 	.word	0x40020458
 800535c:	40020470 	.word	0x40020470
 8005360:	40020488 	.word	0x40020488
 8005364:	400204a0 	.word	0x400204a0
 8005368:	400204b8 	.word	0x400204b8
 800536c:	58025408 	.word	0x58025408
 8005370:	5802541c 	.word	0x5802541c
 8005374:	58025430 	.word	0x58025430
 8005378:	58025444 	.word	0x58025444
 800537c:	58025458 	.word	0x58025458
 8005380:	5802546c 	.word	0x5802546c
 8005384:	58025480 	.word	0x58025480
 8005388:	58025494 	.word	0x58025494

0800538c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e237      	b.n	800580e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d004      	beq.n	80053b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e22c      	b.n	800580e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5c      	ldr	r2, [pc, #368]	; (800552c <HAL_DMA_Abort_IT+0x1a0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d04a      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5b      	ldr	r2, [pc, #364]	; (8005530 <HAL_DMA_Abort_IT+0x1a4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d045      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a59      	ldr	r2, [pc, #356]	; (8005534 <HAL_DMA_Abort_IT+0x1a8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d040      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a58      	ldr	r2, [pc, #352]	; (8005538 <HAL_DMA_Abort_IT+0x1ac>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d03b      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a56      	ldr	r2, [pc, #344]	; (800553c <HAL_DMA_Abort_IT+0x1b0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d036      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a55      	ldr	r2, [pc, #340]	; (8005540 <HAL_DMA_Abort_IT+0x1b4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d031      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a53      	ldr	r2, [pc, #332]	; (8005544 <HAL_DMA_Abort_IT+0x1b8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02c      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a52      	ldr	r2, [pc, #328]	; (8005548 <HAL_DMA_Abort_IT+0x1bc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d027      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a50      	ldr	r2, [pc, #320]	; (800554c <HAL_DMA_Abort_IT+0x1c0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d022      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4f      	ldr	r2, [pc, #316]	; (8005550 <HAL_DMA_Abort_IT+0x1c4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d01d      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4d      	ldr	r2, [pc, #308]	; (8005554 <HAL_DMA_Abort_IT+0x1c8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4c      	ldr	r2, [pc, #304]	; (8005558 <HAL_DMA_Abort_IT+0x1cc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a4a      	ldr	r2, [pc, #296]	; (800555c <HAL_DMA_Abort_IT+0x1d0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a49      	ldr	r2, [pc, #292]	; (8005560 <HAL_DMA_Abort_IT+0x1d4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a47      	ldr	r2, [pc, #284]	; (8005564 <HAL_DMA_Abort_IT+0x1d8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_DMA_Abort_IT+0xc8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a46      	ldr	r2, [pc, #280]	; (8005568 <HAL_DMA_Abort_IT+0x1dc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_DMA_Abort_IT+0xcc>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_DMA_Abort_IT+0xce>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8086 	beq.w	800556c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2204      	movs	r2, #4
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2f      	ldr	r2, [pc, #188]	; (800552c <HAL_DMA_Abort_IT+0x1a0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04a      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <HAL_DMA_Abort_IT+0x1a4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d045      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <HAL_DMA_Abort_IT+0x1a8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <HAL_DMA_Abort_IT+0x1ac>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d03b      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <HAL_DMA_Abort_IT+0x1b0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d036      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a28      	ldr	r2, [pc, #160]	; (8005540 <HAL_DMA_Abort_IT+0x1b4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <HAL_DMA_Abort_IT+0x1b8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02c      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a25      	ldr	r2, [pc, #148]	; (8005548 <HAL_DMA_Abort_IT+0x1bc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d027      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_DMA_Abort_IT+0x1c0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <HAL_DMA_Abort_IT+0x1c4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d01d      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a20      	ldr	r2, [pc, #128]	; (8005554 <HAL_DMA_Abort_IT+0x1c8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <HAL_DMA_Abort_IT+0x1cc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <HAL_DMA_Abort_IT+0x1d0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_DMA_Abort_IT+0x1d4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <HAL_DMA_Abort_IT+0x1d8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_Abort_IT+0x17c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_DMA_Abort_IT+0x1dc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <HAL_DMA_Abort_IT+0x18e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e178      	b.n	800580c <HAL_DMA_Abort_IT+0x480>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e16f      	b.n	800580c <HAL_DMA_Abort_IT+0x480>
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	40020058 	.word	0x40020058
 800553c:	40020070 	.word	0x40020070
 8005540:	40020088 	.word	0x40020088
 8005544:	400200a0 	.word	0x400200a0
 8005548:	400200b8 	.word	0x400200b8
 800554c:	40020410 	.word	0x40020410
 8005550:	40020428 	.word	0x40020428
 8005554:	40020440 	.word	0x40020440
 8005558:	40020458 	.word	0x40020458
 800555c:	40020470 	.word	0x40020470
 8005560:	40020488 	.word	0x40020488
 8005564:	400204a0 	.word	0x400204a0
 8005568:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 020e 	bic.w	r2, r2, #14
 800557a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6c      	ldr	r2, [pc, #432]	; (8005734 <HAL_DMA_Abort_IT+0x3a8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04a      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6b      	ldr	r2, [pc, #428]	; (8005738 <HAL_DMA_Abort_IT+0x3ac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d045      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a69      	ldr	r2, [pc, #420]	; (800573c <HAL_DMA_Abort_IT+0x3b0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d040      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a68      	ldr	r2, [pc, #416]	; (8005740 <HAL_DMA_Abort_IT+0x3b4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03b      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a66      	ldr	r2, [pc, #408]	; (8005744 <HAL_DMA_Abort_IT+0x3b8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d036      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a65      	ldr	r2, [pc, #404]	; (8005748 <HAL_DMA_Abort_IT+0x3bc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d031      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_DMA_Abort_IT+0x3c0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02c      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a62      	ldr	r2, [pc, #392]	; (8005750 <HAL_DMA_Abort_IT+0x3c4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d027      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a60      	ldr	r2, [pc, #384]	; (8005754 <HAL_DMA_Abort_IT+0x3c8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5f      	ldr	r2, [pc, #380]	; (8005758 <HAL_DMA_Abort_IT+0x3cc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d01d      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a5d      	ldr	r2, [pc, #372]	; (800575c <HAL_DMA_Abort_IT+0x3d0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a5c      	ldr	r2, [pc, #368]	; (8005760 <HAL_DMA_Abort_IT+0x3d4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <HAL_DMA_Abort_IT+0x3d8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a59      	ldr	r2, [pc, #356]	; (8005768 <HAL_DMA_Abort_IT+0x3dc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a57      	ldr	r2, [pc, #348]	; (800576c <HAL_DMA_Abort_IT+0x3e0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_DMA_Abort_IT+0x290>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a56      	ldr	r2, [pc, #344]	; (8005770 <HAL_DMA_Abort_IT+0x3e4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <HAL_DMA_Abort_IT+0x2a2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e007      	b.n	800563e <HAL_DMA_Abort_IT+0x2b2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a3c      	ldr	r2, [pc, #240]	; (8005734 <HAL_DMA_Abort_IT+0x3a8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d072      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <HAL_DMA_Abort_IT+0x3ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d06d      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a39      	ldr	r2, [pc, #228]	; (800573c <HAL_DMA_Abort_IT+0x3b0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d068      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a37      	ldr	r2, [pc, #220]	; (8005740 <HAL_DMA_Abort_IT+0x3b4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d063      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a36      	ldr	r2, [pc, #216]	; (8005744 <HAL_DMA_Abort_IT+0x3b8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d05e      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_DMA_Abort_IT+0x3bc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d059      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a33      	ldr	r2, [pc, #204]	; (800574c <HAL_DMA_Abort_IT+0x3c0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d054      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_DMA_Abort_IT+0x3c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d04f      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a30      	ldr	r2, [pc, #192]	; (8005754 <HAL_DMA_Abort_IT+0x3c8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d04a      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <HAL_DMA_Abort_IT+0x3cc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d045      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2d      	ldr	r2, [pc, #180]	; (800575c <HAL_DMA_Abort_IT+0x3d0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d040      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <HAL_DMA_Abort_IT+0x3d4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d03b      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <HAL_DMA_Abort_IT+0x3d8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d036      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a28      	ldr	r2, [pc, #160]	; (8005768 <HAL_DMA_Abort_IT+0x3dc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d031      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a27      	ldr	r2, [pc, #156]	; (800576c <HAL_DMA_Abort_IT+0x3e0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d02c      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a25      	ldr	r2, [pc, #148]	; (8005770 <HAL_DMA_Abort_IT+0x3e4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d027      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a24      	ldr	r2, [pc, #144]	; (8005774 <HAL_DMA_Abort_IT+0x3e8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d022      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_DMA_Abort_IT+0x3ec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01d      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <HAL_DMA_Abort_IT+0x3f0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HAL_DMA_Abort_IT+0x3f4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <HAL_DMA_Abort_IT+0x3f8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_DMA_Abort_IT+0x3fc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_DMA_Abort_IT+0x400>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_DMA_Abort_IT+0x3a2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <HAL_DMA_Abort_IT+0x404>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d132      	bne.n	8005794 <HAL_DMA_Abort_IT+0x408>
 800572e:	2301      	movs	r3, #1
 8005730:	e031      	b.n	8005796 <HAL_DMA_Abort_IT+0x40a>
 8005732:	bf00      	nop
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
 8005774:	58025408 	.word	0x58025408
 8005778:	5802541c 	.word	0x5802541c
 800577c:	58025430 	.word	0x58025430
 8005780:	58025444 	.word	0x58025444
 8005784:	58025458 	.word	0x58025458
 8005788:	5802546c 	.word	0x5802546c
 800578c:	58025480 	.word	0x58025480
 8005790:	58025494 	.word	0x58025494
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d028      	beq.n	80057ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop

08005818 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005824:	4b67      	ldr	r3, [pc, #412]	; (80059c4 <HAL_DMA_IRQHandler+0x1ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_DMA_IRQHandler+0x1b0>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0a9b      	lsrs	r3, r3, #10
 8005830:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5f      	ldr	r2, [pc, #380]	; (80059cc <HAL_DMA_IRQHandler+0x1b4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5d      	ldr	r2, [pc, #372]	; (80059d0 <HAL_DMA_IRQHandler+0x1b8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5c      	ldr	r2, [pc, #368]	; (80059d4 <HAL_DMA_IRQHandler+0x1bc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5a      	ldr	r2, [pc, #360]	; (80059d8 <HAL_DMA_IRQHandler+0x1c0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a59      	ldr	r2, [pc, #356]	; (80059dc <HAL_DMA_IRQHandler+0x1c4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a57      	ldr	r2, [pc, #348]	; (80059e0 <HAL_DMA_IRQHandler+0x1c8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_DMA_IRQHandler+0x1cc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a54      	ldr	r2, [pc, #336]	; (80059e8 <HAL_DMA_IRQHandler+0x1d0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a53      	ldr	r2, [pc, #332]	; (80059ec <HAL_DMA_IRQHandler+0x1d4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a51      	ldr	r2, [pc, #324]	; (80059f0 <HAL_DMA_IRQHandler+0x1d8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a50      	ldr	r2, [pc, #320]	; (80059f4 <HAL_DMA_IRQHandler+0x1dc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a4e      	ldr	r2, [pc, #312]	; (80059f8 <HAL_DMA_IRQHandler+0x1e0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_DMA_IRQHandler+0x1e4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a4b      	ldr	r2, [pc, #300]	; (8005a00 <HAL_DMA_IRQHandler+0x1e8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <HAL_DMA_IRQHandler+0x1ec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_IRQHandler+0xd2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a48      	ldr	r2, [pc, #288]	; (8005a08 <HAL_DMA_IRQHandler+0x1f0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_IRQHandler+0xd6>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_DMA_IRQHandler+0xd8>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 842b 	beq.w	800614c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2208      	movs	r2, #8
 8005900:	409a      	lsls	r2, r3
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a2 	beq.w	8005a50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2e      	ldr	r2, [pc, #184]	; (80059cc <HAL_DMA_IRQHandler+0x1b4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d04a      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2d      	ldr	r2, [pc, #180]	; (80059d0 <HAL_DMA_IRQHandler+0x1b8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d045      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2b      	ldr	r2, [pc, #172]	; (80059d4 <HAL_DMA_IRQHandler+0x1bc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d040      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <HAL_DMA_IRQHandler+0x1c0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d03b      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a28      	ldr	r2, [pc, #160]	; (80059dc <HAL_DMA_IRQHandler+0x1c4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d036      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <HAL_DMA_IRQHandler+0x1c8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d031      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <HAL_DMA_IRQHandler+0x1cc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02c      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a24      	ldr	r2, [pc, #144]	; (80059e8 <HAL_DMA_IRQHandler+0x1d0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d027      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a22      	ldr	r2, [pc, #136]	; (80059ec <HAL_DMA_IRQHandler+0x1d4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <HAL_DMA_IRQHandler+0x1d8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d01d      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <HAL_DMA_IRQHandler+0x1dc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <HAL_DMA_IRQHandler+0x1e0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <HAL_DMA_IRQHandler+0x1e4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_DMA_IRQHandler+0x1e8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_DMA_IRQHandler+0x1ec>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_DMA_IRQHandler+0x194>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_DMA_IRQHandler+0x1f0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d12f      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x1f4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	2300      	moveq	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	e02e      	b.n	8005a20 <HAL_DMA_IRQHandler+0x208>
 80059c2:	bf00      	nop
 80059c4:	2400002c 	.word	0x2400002c
 80059c8:	1b4e81b5 	.word	0x1b4e81b5
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d06e      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a69      	ldr	r2, [pc, #420]	; (8005c10 <HAL_DMA_IRQHandler+0x3f8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a67      	ldr	r2, [pc, #412]	; (8005c14 <HAL_DMA_IRQHandler+0x3fc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a66      	ldr	r2, [pc, #408]	; (8005c18 <HAL_DMA_IRQHandler+0x400>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a64      	ldr	r2, [pc, #400]	; (8005c1c <HAL_DMA_IRQHandler+0x404>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a63      	ldr	r2, [pc, #396]	; (8005c20 <HAL_DMA_IRQHandler+0x408>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a61      	ldr	r2, [pc, #388]	; (8005c24 <HAL_DMA_IRQHandler+0x40c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a60      	ldr	r2, [pc, #384]	; (8005c28 <HAL_DMA_IRQHandler+0x410>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a5e      	ldr	r2, [pc, #376]	; (8005c2c <HAL_DMA_IRQHandler+0x414>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <HAL_DMA_IRQHandler+0x418>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a5b      	ldr	r2, [pc, #364]	; (8005c34 <HAL_DMA_IRQHandler+0x41c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a5a      	ldr	r2, [pc, #360]	; (8005c38 <HAL_DMA_IRQHandler+0x420>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a58      	ldr	r2, [pc, #352]	; (8005c3c <HAL_DMA_IRQHandler+0x424>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a57      	ldr	r2, [pc, #348]	; (8005c40 <HAL_DMA_IRQHandler+0x428>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a55      	ldr	r2, [pc, #340]	; (8005c44 <HAL_DMA_IRQHandler+0x42c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a54      	ldr	r2, [pc, #336]	; (8005c48 <HAL_DMA_IRQHandler+0x430>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2ee>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a52      	ldr	r2, [pc, #328]	; (8005c4c <HAL_DMA_IRQHandler+0x434>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10a      	bne.n	8005b1c <HAL_DMA_IRQHandler+0x304>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e003      	b.n	8005b24 <HAL_DMA_IRQHandler+0x30c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00d      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2201      	movs	r2, #1
 8005b32:	409a      	lsls	r2, r3
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3c:	f043 0202 	orr.w	r2, r3, #2
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 808f 	beq.w	8005c78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2c      	ldr	r2, [pc, #176]	; (8005c10 <HAL_DMA_IRQHandler+0x3f8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04a      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <HAL_DMA_IRQHandler+0x3fc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d045      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <HAL_DMA_IRQHandler+0x400>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d040      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <HAL_DMA_IRQHandler+0x404>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d03b      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <HAL_DMA_IRQHandler+0x408>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d036      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <HAL_DMA_IRQHandler+0x40c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d031      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <HAL_DMA_IRQHandler+0x410>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d02c      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	; (8005c2c <HAL_DMA_IRQHandler+0x414>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d027      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <HAL_DMA_IRQHandler+0x418>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <HAL_DMA_IRQHandler+0x41c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01d      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <HAL_DMA_IRQHandler+0x420>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_DMA_IRQHandler+0x424>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1a      	ldr	r2, [pc, #104]	; (8005c40 <HAL_DMA_IRQHandler+0x428>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <HAL_DMA_IRQHandler+0x42c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <HAL_DMA_IRQHandler+0x430>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_DMA_IRQHandler+0x3e2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <HAL_DMA_IRQHandler+0x434>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d12a      	bne.n	8005c50 <HAL_DMA_IRQHandler+0x438>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e023      	b.n	8005c58 <HAL_DMA_IRQHandler+0x440>
 8005c10:	40020010 	.word	0x40020010
 8005c14:	40020028 	.word	0x40020028
 8005c18:	40020040 	.word	0x40020040
 8005c1c:	40020058 	.word	0x40020058
 8005c20:	40020070 	.word	0x40020070
 8005c24:	40020088 	.word	0x40020088
 8005c28:	400200a0 	.word	0x400200a0
 8005c2c:	400200b8 	.word	0x400200b8
 8005c30:	40020410 	.word	0x40020410
 8005c34:	40020428 	.word	0x40020428
 8005c38:	40020440 	.word	0x40020440
 8005c3c:	40020458 	.word	0x40020458
 8005c40:	40020470 	.word	0x40020470
 8005c44:	40020488 	.word	0x40020488
 8005c48:	400204a0 	.word	0x400204a0
 8005c4c:	400204b8 	.word	0x400204b8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2204      	movs	r2, #4
 8005c66:	409a      	lsls	r2, r3
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2210      	movs	r2, #16
 8005c82:	409a      	lsls	r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80a6 	beq.w	8005dda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a85      	ldr	r2, [pc, #532]	; (8005ea8 <HAL_DMA_IRQHandler+0x690>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d04a      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a83      	ldr	r2, [pc, #524]	; (8005eac <HAL_DMA_IRQHandler+0x694>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d045      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a82      	ldr	r2, [pc, #520]	; (8005eb0 <HAL_DMA_IRQHandler+0x698>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d040      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a80      	ldr	r2, [pc, #512]	; (8005eb4 <HAL_DMA_IRQHandler+0x69c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d03b      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7f      	ldr	r2, [pc, #508]	; (8005eb8 <HAL_DMA_IRQHandler+0x6a0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d036      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a7d      	ldr	r2, [pc, #500]	; (8005ebc <HAL_DMA_IRQHandler+0x6a4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d031      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7c      	ldr	r2, [pc, #496]	; (8005ec0 <HAL_DMA_IRQHandler+0x6a8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d02c      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a7a      	ldr	r2, [pc, #488]	; (8005ec4 <HAL_DMA_IRQHandler+0x6ac>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d027      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a79      	ldr	r2, [pc, #484]	; (8005ec8 <HAL_DMA_IRQHandler+0x6b0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a77      	ldr	r2, [pc, #476]	; (8005ecc <HAL_DMA_IRQHandler+0x6b4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a76      	ldr	r2, [pc, #472]	; (8005ed0 <HAL_DMA_IRQHandler+0x6b8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a74      	ldr	r2, [pc, #464]	; (8005ed4 <HAL_DMA_IRQHandler+0x6bc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a73      	ldr	r2, [pc, #460]	; (8005ed8 <HAL_DMA_IRQHandler+0x6c0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a71      	ldr	r2, [pc, #452]	; (8005edc <HAL_DMA_IRQHandler+0x6c4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a70      	ldr	r2, [pc, #448]	; (8005ee0 <HAL_DMA_IRQHandler+0x6c8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x516>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6e      	ldr	r2, [pc, #440]	; (8005ee4 <HAL_DMA_IRQHandler+0x6cc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10a      	bne.n	8005d44 <HAL_DMA_IRQHandler+0x52c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e009      	b.n	8005d58 <HAL_DMA_IRQHandler+0x540>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03e      	beq.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2210      	movs	r2, #16
 8005d66:	409a      	lsls	r2, r3
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d018      	beq.n	8005dac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d024      	beq.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
 8005d98:	e01f      	b.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
 8005daa:	e016      	b.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0208 	bic.w	r2, r2, #8
 8005dc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2220      	movs	r2, #32
 8005de4:	409a      	lsls	r2, r3
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8110 	beq.w	8006010 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <HAL_DMA_IRQHandler+0x690>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d04a      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2b      	ldr	r2, [pc, #172]	; (8005eac <HAL_DMA_IRQHandler+0x694>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d045      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <HAL_DMA_IRQHandler+0x698>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d040      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <HAL_DMA_IRQHandler+0x69c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d03b      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <HAL_DMA_IRQHandler+0x6a0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d036      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <HAL_DMA_IRQHandler+0x6a4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d031      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a23      	ldr	r2, [pc, #140]	; (8005ec0 <HAL_DMA_IRQHandler+0x6a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02c      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <HAL_DMA_IRQHandler+0x6ac>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d027      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <HAL_DMA_IRQHandler+0x6b0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <HAL_DMA_IRQHandler+0x6b4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01d      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <HAL_DMA_IRQHandler+0x6b8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_DMA_IRQHandler+0x6bc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <HAL_DMA_IRQHandler+0x6c0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a19      	ldr	r2, [pc, #100]	; (8005edc <HAL_DMA_IRQHandler+0x6c4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <HAL_DMA_IRQHandler+0x6c8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x678>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_DMA_IRQHandler+0x6cc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d12b      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x6d0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e02a      	b.n	8005efc <HAL_DMA_IRQHandler+0x6e4>
 8005ea6:	bf00      	nop
 8005ea8:	40020010 	.word	0x40020010
 8005eac:	40020028 	.word	0x40020028
 8005eb0:	40020040 	.word	0x40020040
 8005eb4:	40020058 	.word	0x40020058
 8005eb8:	40020070 	.word	0x40020070
 8005ebc:	40020088 	.word	0x40020088
 8005ec0:	400200a0 	.word	0x400200a0
 8005ec4:	400200b8 	.word	0x400200b8
 8005ec8:	40020410 	.word	0x40020410
 8005ecc:	40020428 	.word	0x40020428
 8005ed0:	40020440 	.word	0x40020440
 8005ed4:	40020458 	.word	0x40020458
 8005ed8:	40020470 	.word	0x40020470
 8005edc:	40020488 	.word	0x40020488
 8005ee0:	400204a0 	.word	0x400204a0
 8005ee4:	400204b8 	.word	0x400204b8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8087 	beq.w	8006010 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d139      	bne.n	8005f92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0216 	bic.w	r2, r2, #22
 8005f2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <HAL_DMA_IRQHandler+0x736>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0208 	bic.w	r2, r2, #8
 8005f5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	223f      	movs	r2, #63	; 0x3f
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 834a 	beq.w	800661c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
          }
          return;
 8005f90:	e344      	b.n	800661c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02c      	beq.n	8006010 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
 8005fbe:	e027      	b.n	8006010 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d023      	beq.n	8006010 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
 8005fd0:	e01e      	b.n	8006010 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10f      	bne.n	8006000 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0210 	bic.w	r2, r2, #16
 8005fee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8306 	beq.w	8006626 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8088 	beq.w	8006138 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2204      	movs	r2, #4
 800602c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7a      	ldr	r2, [pc, #488]	; (8006220 <HAL_DMA_IRQHandler+0xa08>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d04a      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a79      	ldr	r2, [pc, #484]	; (8006224 <HAL_DMA_IRQHandler+0xa0c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d045      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a77      	ldr	r2, [pc, #476]	; (8006228 <HAL_DMA_IRQHandler+0xa10>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d040      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a76      	ldr	r2, [pc, #472]	; (800622c <HAL_DMA_IRQHandler+0xa14>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d03b      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a74      	ldr	r2, [pc, #464]	; (8006230 <HAL_DMA_IRQHandler+0xa18>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d036      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a73      	ldr	r2, [pc, #460]	; (8006234 <HAL_DMA_IRQHandler+0xa1c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d031      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a71      	ldr	r2, [pc, #452]	; (8006238 <HAL_DMA_IRQHandler+0xa20>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d02c      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a70      	ldr	r2, [pc, #448]	; (800623c <HAL_DMA_IRQHandler+0xa24>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d027      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6e      	ldr	r2, [pc, #440]	; (8006240 <HAL_DMA_IRQHandler+0xa28>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a6d      	ldr	r2, [pc, #436]	; (8006244 <HAL_DMA_IRQHandler+0xa2c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01d      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6b      	ldr	r2, [pc, #428]	; (8006248 <HAL_DMA_IRQHandler+0xa30>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6a      	ldr	r2, [pc, #424]	; (800624c <HAL_DMA_IRQHandler+0xa34>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a68      	ldr	r2, [pc, #416]	; (8006250 <HAL_DMA_IRQHandler+0xa38>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a67      	ldr	r2, [pc, #412]	; (8006254 <HAL_DMA_IRQHandler+0xa3c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a65      	ldr	r2, [pc, #404]	; (8006258 <HAL_DMA_IRQHandler+0xa40>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_DMA_IRQHandler+0x8b8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a64      	ldr	r2, [pc, #400]	; (800625c <HAL_DMA_IRQHandler+0xa44>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <HAL_DMA_IRQHandler+0x8ca>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e007      	b.n	80060f2 <HAL_DMA_IRQHandler+0x8da>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d307      	bcc.n	800610e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f2      	bne.n	80060f2 <HAL_DMA_IRQHandler+0x8da>
 800610c:	e000      	b.n	8006110 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800610e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006126:	e003      	b.n	8006130 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8272 	beq.w	8006626 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
 800614a:	e26c      	b.n	8006626 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a43      	ldr	r2, [pc, #268]	; (8006260 <HAL_DMA_IRQHandler+0xa48>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a42      	ldr	r2, [pc, #264]	; (8006264 <HAL_DMA_IRQHandler+0xa4c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d01d      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a40      	ldr	r2, [pc, #256]	; (8006268 <HAL_DMA_IRQHandler+0xa50>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <HAL_DMA_IRQHandler+0xa54>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3d      	ldr	r2, [pc, #244]	; (8006270 <HAL_DMA_IRQHandler+0xa58>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a3c      	ldr	r2, [pc, #240]	; (8006274 <HAL_DMA_IRQHandler+0xa5c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a3a      	ldr	r2, [pc, #232]	; (8006278 <HAL_DMA_IRQHandler+0xa60>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_DMA_IRQHandler+0x984>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a39      	ldr	r2, [pc, #228]	; (800627c <HAL_DMA_IRQHandler+0xa64>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x988>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_DMA_IRQHandler+0x98a>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 823f 	beq.w	8006626 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	2204      	movs	r2, #4
 80061ba:	409a      	lsls	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80cd 	beq.w	8006360 <HAL_DMA_IRQHandler+0xb48>
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80c7 	beq.w	8006360 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	2204      	movs	r2, #4
 80061dc:	409a      	lsls	r2, r3
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d049      	beq.n	8006280 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 8210 	beq.w	8006620 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006208:	e20a      	b.n	8006620 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8206 	beq.w	8006620 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800621c:	e200      	b.n	8006620 <HAL_DMA_IRQHandler+0xe08>
 800621e:	bf00      	nop
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
 8006260:	58025408 	.word	0x58025408
 8006264:	5802541c 	.word	0x5802541c
 8006268:	58025430 	.word	0x58025430
 800626c:	58025444 	.word	0x58025444
 8006270:	58025458 	.word	0x58025458
 8006274:	5802546c 	.word	0x5802546c
 8006278:	58025480 	.word	0x58025480
 800627c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d160      	bne.n	800634c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7f      	ldr	r2, [pc, #508]	; (800648c <HAL_DMA_IRQHandler+0xc74>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7d      	ldr	r2, [pc, #500]	; (8006490 <HAL_DMA_IRQHandler+0xc78>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a7c      	ldr	r2, [pc, #496]	; (8006494 <HAL_DMA_IRQHandler+0xc7c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a7a      	ldr	r2, [pc, #488]	; (8006498 <HAL_DMA_IRQHandler+0xc80>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a79      	ldr	r2, [pc, #484]	; (800649c <HAL_DMA_IRQHandler+0xc84>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a77      	ldr	r2, [pc, #476]	; (80064a0 <HAL_DMA_IRQHandler+0xc88>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a76      	ldr	r2, [pc, #472]	; (80064a4 <HAL_DMA_IRQHandler+0xc8c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a74      	ldr	r2, [pc, #464]	; (80064a8 <HAL_DMA_IRQHandler+0xc90>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a73      	ldr	r2, [pc, #460]	; (80064ac <HAL_DMA_IRQHandler+0xc94>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a71      	ldr	r2, [pc, #452]	; (80064b0 <HAL_DMA_IRQHandler+0xc98>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a70      	ldr	r2, [pc, #448]	; (80064b4 <HAL_DMA_IRQHandler+0xc9c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6e      	ldr	r2, [pc, #440]	; (80064b8 <HAL_DMA_IRQHandler+0xca0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6d      	ldr	r2, [pc, #436]	; (80064bc <HAL_DMA_IRQHandler+0xca4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a6b      	ldr	r2, [pc, #428]	; (80064c0 <HAL_DMA_IRQHandler+0xca8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6a      	ldr	r2, [pc, #424]	; (80064c4 <HAL_DMA_IRQHandler+0xcac>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_DMA_IRQHandler+0xb12>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a68      	ldr	r2, [pc, #416]	; (80064c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <HAL_DMA_IRQHandler+0xb24>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0208 	bic.w	r2, r2, #8
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e007      	b.n	800634c <HAL_DMA_IRQHandler+0xb34>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8165 	beq.w	8006620 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800635e:	e15f      	b.n	8006620 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2202      	movs	r2, #2
 800636a:	409a      	lsls	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80c5 	beq.w	8006500 <HAL_DMA_IRQHandler+0xce8>
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80bf 	beq.w	8006500 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2202      	movs	r2, #2
 800638c:	409a      	lsls	r2, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d018      	beq.n	80063ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 813a 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063b8:	e134      	b.n	8006624 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8130 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063cc:	e12a      	b.n	8006624 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 8089 	bne.w	80064ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2b      	ldr	r2, [pc, #172]	; (800648c <HAL_DMA_IRQHandler+0xc74>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d04a      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a29      	ldr	r2, [pc, #164]	; (8006490 <HAL_DMA_IRQHandler+0xc78>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d045      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a28      	ldr	r2, [pc, #160]	; (8006494 <HAL_DMA_IRQHandler+0xc7c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d040      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <HAL_DMA_IRQHandler+0xc80>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d03b      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a25      	ldr	r2, [pc, #148]	; (800649c <HAL_DMA_IRQHandler+0xc84>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d036      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <HAL_DMA_IRQHandler+0xc88>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d031      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_IRQHandler+0xc8c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d02c      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <HAL_DMA_IRQHandler+0xc90>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d027      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1f      	ldr	r2, [pc, #124]	; (80064ac <HAL_DMA_IRQHandler+0xc94>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <HAL_DMA_IRQHandler+0xc98>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01d      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_DMA_IRQHandler+0xc9c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <HAL_DMA_IRQHandler+0xca0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_DMA_IRQHandler+0xca4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <HAL_DMA_IRQHandler+0xca8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <HAL_DMA_IRQHandler+0xcac>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_DMA_IRQHandler+0xc62>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d128      	bne.n	80064cc <HAL_DMA_IRQHandler+0xcb4>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0214 	bic.w	r2, r2, #20
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e027      	b.n	80064dc <HAL_DMA_IRQHandler+0xcc4>
 800648c:	40020010 	.word	0x40020010
 8006490:	40020028 	.word	0x40020028
 8006494:	40020040 	.word	0x40020040
 8006498:	40020058 	.word	0x40020058
 800649c:	40020070 	.word	0x40020070
 80064a0:	40020088 	.word	0x40020088
 80064a4:	400200a0 	.word	0x400200a0
 80064a8:	400200b8 	.word	0x400200b8
 80064ac:	40020410 	.word	0x40020410
 80064b0:	40020428 	.word	0x40020428
 80064b4:	40020440 	.word	0x40020440
 80064b8:	40020458 	.word	0x40020458
 80064bc:	40020470 	.word	0x40020470
 80064c0:	40020488 	.word	0x40020488
 80064c4:	400204a0 	.word	0x400204a0
 80064c8:	400204b8 	.word	0x400204b8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020a 	bic.w	r2, r2, #10
 80064da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8097 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064fe:	e091      	b.n	8006624 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2208      	movs	r2, #8
 800650a:	409a      	lsls	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8088 	beq.w	8006626 <HAL_DMA_IRQHandler+0xe0e>
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8082 	beq.w	8006626 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a41      	ldr	r2, [pc, #260]	; (800662c <HAL_DMA_IRQHandler+0xe14>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d04a      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a3f      	ldr	r2, [pc, #252]	; (8006630 <HAL_DMA_IRQHandler+0xe18>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d045      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3e      	ldr	r2, [pc, #248]	; (8006634 <HAL_DMA_IRQHandler+0xe1c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d040      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3c      	ldr	r2, [pc, #240]	; (8006638 <HAL_DMA_IRQHandler+0xe20>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d03b      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3b      	ldr	r2, [pc, #236]	; (800663c <HAL_DMA_IRQHandler+0xe24>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d036      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a39      	ldr	r2, [pc, #228]	; (8006640 <HAL_DMA_IRQHandler+0xe28>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d031      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a38      	ldr	r2, [pc, #224]	; (8006644 <HAL_DMA_IRQHandler+0xe2c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d02c      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a36      	ldr	r2, [pc, #216]	; (8006648 <HAL_DMA_IRQHandler+0xe30>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d027      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a35      	ldr	r2, [pc, #212]	; (800664c <HAL_DMA_IRQHandler+0xe34>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d022      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a33      	ldr	r2, [pc, #204]	; (8006650 <HAL_DMA_IRQHandler+0xe38>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01d      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a32      	ldr	r2, [pc, #200]	; (8006654 <HAL_DMA_IRQHandler+0xe3c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d018      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a30      	ldr	r2, [pc, #192]	; (8006658 <HAL_DMA_IRQHandler+0xe40>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2f      	ldr	r2, [pc, #188]	; (800665c <HAL_DMA_IRQHandler+0xe44>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2d      	ldr	r2, [pc, #180]	; (8006660 <HAL_DMA_IRQHandler+0xe48>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <HAL_DMA_IRQHandler+0xe4c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xdaa>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <HAL_DMA_IRQHandler+0xe50>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <HAL_DMA_IRQHandler+0xdbc>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 021c 	bic.w	r2, r2, #28
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e007      	b.n	80065e4 <HAL_DMA_IRQHandler+0xdcc>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020e 	bic.w	r2, r2, #14
 80065e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2201      	movs	r2, #1
 80065ee:	409a      	lsls	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
 800661a:	e004      	b.n	8006626 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800661c:	bf00      	nop
 800661e:	e002      	b.n	8006626 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006624:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006626:	3728      	adds	r7, #40	; 0x28
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40020010 	.word	0x40020010
 8006630:	40020028 	.word	0x40020028
 8006634:	40020040 	.word	0x40020040
 8006638:	40020058 	.word	0x40020058
 800663c:	40020070 	.word	0x40020070
 8006640:	40020088 	.word	0x40020088
 8006644:	400200a0 	.word	0x400200a0
 8006648:	400200b8 	.word	0x400200b8
 800664c:	40020410 	.word	0x40020410
 8006650:	40020428 	.word	0x40020428
 8006654:	40020440 	.word	0x40020440
 8006658:	40020458 	.word	0x40020458
 800665c:	40020470 	.word	0x40020470
 8006660:	40020488 	.word	0x40020488
 8006664:	400204a0 	.word	0x400204a0
 8006668:	400204b8 	.word	0x400204b8

0800666c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667a:	b2db      	uxtb	r3, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7f      	ldr	r2, [pc, #508]	; (80068bc <DMA_SetConfig+0x21c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d072      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7d      	ldr	r2, [pc, #500]	; (80068c0 <DMA_SetConfig+0x220>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d06d      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7c      	ldr	r2, [pc, #496]	; (80068c4 <DMA_SetConfig+0x224>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d068      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7a      	ldr	r2, [pc, #488]	; (80068c8 <DMA_SetConfig+0x228>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d063      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a79      	ldr	r2, [pc, #484]	; (80068cc <DMA_SetConfig+0x22c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d05e      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a77      	ldr	r2, [pc, #476]	; (80068d0 <DMA_SetConfig+0x230>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d059      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a76      	ldr	r2, [pc, #472]	; (80068d4 <DMA_SetConfig+0x234>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d054      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a74      	ldr	r2, [pc, #464]	; (80068d8 <DMA_SetConfig+0x238>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d04f      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a73      	ldr	r2, [pc, #460]	; (80068dc <DMA_SetConfig+0x23c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04a      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a71      	ldr	r2, [pc, #452]	; (80068e0 <DMA_SetConfig+0x240>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d045      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a70      	ldr	r2, [pc, #448]	; (80068e4 <DMA_SetConfig+0x244>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d040      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <DMA_SetConfig+0x248>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d03b      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a6d      	ldr	r2, [pc, #436]	; (80068ec <DMA_SetConfig+0x24c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d036      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a6b      	ldr	r2, [pc, #428]	; (80068f0 <DMA_SetConfig+0x250>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d031      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6a      	ldr	r2, [pc, #424]	; (80068f4 <DMA_SetConfig+0x254>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d02c      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a68      	ldr	r2, [pc, #416]	; (80068f8 <DMA_SetConfig+0x258>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d027      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a67      	ldr	r2, [pc, #412]	; (80068fc <DMA_SetConfig+0x25c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a65      	ldr	r2, [pc, #404]	; (8006900 <DMA_SetConfig+0x260>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a64      	ldr	r2, [pc, #400]	; (8006904 <DMA_SetConfig+0x264>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a62      	ldr	r2, [pc, #392]	; (8006908 <DMA_SetConfig+0x268>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a61      	ldr	r2, [pc, #388]	; (800690c <DMA_SetConfig+0x26c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <DMA_SetConfig+0x10a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a5f      	ldr	r2, [pc, #380]	; (8006910 <DMA_SetConfig+0x270>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <DMA_SetConfig+0x10a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5e      	ldr	r2, [pc, #376]	; (8006914 <DMA_SetConfig+0x274>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <DMA_SetConfig+0x10a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5c      	ldr	r2, [pc, #368]	; (8006918 <DMA_SetConfig+0x278>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <DMA_SetConfig+0x10e>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <DMA_SetConfig+0x110>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a39      	ldr	r2, [pc, #228]	; (80068bc <DMA_SetConfig+0x21c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d04a      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a38      	ldr	r2, [pc, #224]	; (80068c0 <DMA_SetConfig+0x220>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d045      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a36      	ldr	r2, [pc, #216]	; (80068c4 <DMA_SetConfig+0x224>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d040      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a35      	ldr	r2, [pc, #212]	; (80068c8 <DMA_SetConfig+0x228>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d03b      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a33      	ldr	r2, [pc, #204]	; (80068cc <DMA_SetConfig+0x22c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d036      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a32      	ldr	r2, [pc, #200]	; (80068d0 <DMA_SetConfig+0x230>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d031      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <DMA_SetConfig+0x234>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d02c      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <DMA_SetConfig+0x238>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d027      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2d      	ldr	r2, [pc, #180]	; (80068dc <DMA_SetConfig+0x23c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d022      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <DMA_SetConfig+0x240>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d01d      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <DMA_SetConfig+0x244>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <DMA_SetConfig+0x248>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a27      	ldr	r2, [pc, #156]	; (80068ec <DMA_SetConfig+0x24c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <DMA_SetConfig+0x250>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <DMA_SetConfig+0x254>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <DMA_SetConfig+0x1d0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <DMA_SetConfig+0x258>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <DMA_SetConfig+0x1d4>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <DMA_SetConfig+0x1d6>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d059      	beq.n	800692e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	223f      	movs	r2, #63	; 0x3f
 8006884:	409a      	lsls	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006898:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d138      	bne.n	800691c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068ba:	e086      	b.n	80069ca <DMA_SetConfig+0x32a>
 80068bc:	40020010 	.word	0x40020010
 80068c0:	40020028 	.word	0x40020028
 80068c4:	40020040 	.word	0x40020040
 80068c8:	40020058 	.word	0x40020058
 80068cc:	40020070 	.word	0x40020070
 80068d0:	40020088 	.word	0x40020088
 80068d4:	400200a0 	.word	0x400200a0
 80068d8:	400200b8 	.word	0x400200b8
 80068dc:	40020410 	.word	0x40020410
 80068e0:	40020428 	.word	0x40020428
 80068e4:	40020440 	.word	0x40020440
 80068e8:	40020458 	.word	0x40020458
 80068ec:	40020470 	.word	0x40020470
 80068f0:	40020488 	.word	0x40020488
 80068f4:	400204a0 	.word	0x400204a0
 80068f8:	400204b8 	.word	0x400204b8
 80068fc:	58025408 	.word	0x58025408
 8006900:	5802541c 	.word	0x5802541c
 8006904:	58025430 	.word	0x58025430
 8006908:	58025444 	.word	0x58025444
 800690c:	58025458 	.word	0x58025458
 8006910:	5802546c 	.word	0x5802546c
 8006914:	58025480 	.word	0x58025480
 8006918:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]
}
 800692c:	e04d      	b.n	80069ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a29      	ldr	r2, [pc, #164]	; (80069d8 <DMA_SetConfig+0x338>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <DMA_SetConfig+0x2de>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a27      	ldr	r2, [pc, #156]	; (80069dc <DMA_SetConfig+0x33c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <DMA_SetConfig+0x2de>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <DMA_SetConfig+0x340>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <DMA_SetConfig+0x2de>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <DMA_SetConfig+0x344>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <DMA_SetConfig+0x2de>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a23      	ldr	r2, [pc, #140]	; (80069e8 <DMA_SetConfig+0x348>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <DMA_SetConfig+0x2de>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <DMA_SetConfig+0x34c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <DMA_SetConfig+0x2de>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <DMA_SetConfig+0x350>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <DMA_SetConfig+0x2de>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <DMA_SetConfig+0x354>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d101      	bne.n	8006982 <DMA_SetConfig+0x2e2>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <DMA_SetConfig+0x2e4>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	2201      	movs	r2, #1
 8006992:	409a      	lsls	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d108      	bne.n	80069ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	60da      	str	r2, [r3, #12]
}
 80069b8:	e007      	b.n	80069ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494

080069f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a42      	ldr	r2, [pc, #264]	; (8006b10 <DMA_CalcBaseAndBitshift+0x118>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d04a      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a41      	ldr	r2, [pc, #260]	; (8006b14 <DMA_CalcBaseAndBitshift+0x11c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d045      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a3f      	ldr	r2, [pc, #252]	; (8006b18 <DMA_CalcBaseAndBitshift+0x120>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d040      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3e      	ldr	r2, [pc, #248]	; (8006b1c <DMA_CalcBaseAndBitshift+0x124>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d03b      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3c      	ldr	r2, [pc, #240]	; (8006b20 <DMA_CalcBaseAndBitshift+0x128>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d036      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a3b      	ldr	r2, [pc, #236]	; (8006b24 <DMA_CalcBaseAndBitshift+0x12c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d031      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a39      	ldr	r2, [pc, #228]	; (8006b28 <DMA_CalcBaseAndBitshift+0x130>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02c      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a38      	ldr	r2, [pc, #224]	; (8006b2c <DMA_CalcBaseAndBitshift+0x134>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d027      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a36      	ldr	r2, [pc, #216]	; (8006b30 <DMA_CalcBaseAndBitshift+0x138>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d022      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a35      	ldr	r2, [pc, #212]	; (8006b34 <DMA_CalcBaseAndBitshift+0x13c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01d      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a33      	ldr	r2, [pc, #204]	; (8006b38 <DMA_CalcBaseAndBitshift+0x140>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a32      	ldr	r2, [pc, #200]	; (8006b3c <DMA_CalcBaseAndBitshift+0x144>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a30      	ldr	r2, [pc, #192]	; (8006b40 <DMA_CalcBaseAndBitshift+0x148>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2f      	ldr	r2, [pc, #188]	; (8006b44 <DMA_CalcBaseAndBitshift+0x14c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a2d      	ldr	r2, [pc, #180]	; (8006b48 <DMA_CalcBaseAndBitshift+0x150>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <DMA_CalcBaseAndBitshift+0x154>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d101      	bne.n	8006aa4 <DMA_CalcBaseAndBitshift+0xac>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <DMA_CalcBaseAndBitshift+0xae>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d024      	beq.n	8006af4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	3b10      	subs	r3, #16
 8006ab2:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <DMA_CalcBaseAndBitshift+0x158>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <DMA_CalcBaseAndBitshift+0x15c>)
 8006ac4:	5cd3      	ldrb	r3, [r2, r3]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d908      	bls.n	8006ae4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b1f      	ldr	r3, [pc, #124]	; (8006b58 <DMA_CalcBaseAndBitshift+0x160>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ae2:	e00d      	b.n	8006b00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <DMA_CalcBaseAndBitshift+0x160>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6593      	str	r3, [r2, #88]	; 0x58
 8006af2:	e005      	b.n	8006b00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40020010 	.word	0x40020010
 8006b14:	40020028 	.word	0x40020028
 8006b18:	40020040 	.word	0x40020040
 8006b1c:	40020058 	.word	0x40020058
 8006b20:	40020070 	.word	0x40020070
 8006b24:	40020088 	.word	0x40020088
 8006b28:	400200a0 	.word	0x400200a0
 8006b2c:	400200b8 	.word	0x400200b8
 8006b30:	40020410 	.word	0x40020410
 8006b34:	40020428 	.word	0x40020428
 8006b38:	40020440 	.word	0x40020440
 8006b3c:	40020458 	.word	0x40020458
 8006b40:	40020470 	.word	0x40020470
 8006b44:	40020488 	.word	0x40020488
 8006b48:	400204a0 	.word	0x400204a0
 8006b4c:	400204b8 	.word	0x400204b8
 8006b50:	aaaaaaab 	.word	0xaaaaaaab
 8006b54:	08011d6c 	.word	0x08011d6c
 8006b58:	fffffc00 	.word	0xfffffc00

08006b5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d120      	bne.n	8006bb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d858      	bhi.n	8006c2a <DMA_CheckFifoParam+0xce>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <DMA_CheckFifoParam+0x24>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006ba3 	.word	0x08006ba3
 8006b88:	08006b91 	.word	0x08006b91
 8006b8c:	08006c2b 	.word	0x08006c2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d048      	beq.n	8006c2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ba0:	e045      	b.n	8006c2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006baa:	d142      	bne.n	8006c32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bb0:	e03f      	b.n	8006c32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bba:	d123      	bne.n	8006c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d838      	bhi.n	8006c36 <DMA_CheckFifoParam+0xda>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <DMA_CheckFifoParam+0x70>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006be3 	.word	0x08006be3
 8006bd4:	08006bdd 	.word	0x08006bdd
 8006bd8:	08006bf5 	.word	0x08006bf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
        break;
 8006be0:	e030      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d025      	beq.n	8006c3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bf2:	e022      	b.n	8006c3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bfc:	d11f      	bne.n	8006c3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c02:	e01c      	b.n	8006c3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d902      	bls.n	8006c12 <DMA_CheckFifoParam+0xb6>
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d003      	beq.n	8006c18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c10:	e018      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
        break;
 8006c16:	e015      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00e      	beq.n	8006c42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
    break;
 8006c28:	e00b      	b.n	8006c42 <DMA_CheckFifoParam+0xe6>
        break;
 8006c2a:	bf00      	nop
 8006c2c:	e00a      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e008      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        break;
 8006c32:	bf00      	nop
 8006c34:	e006      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        break;
 8006c36:	bf00      	nop
 8006c38:	e004      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
        break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <DMA_CheckFifoParam+0xe8>
    break;
 8006c42:	bf00      	nop
    }
  }

  return status;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop

08006c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a38      	ldr	r2, [pc, #224]	; (8006d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d022      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a36      	ldr	r2, [pc, #216]	; (8006d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d01d      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a35      	ldr	r2, [pc, #212]	; (8006d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a33      	ldr	r2, [pc, #204]	; (8006d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a30      	ldr	r2, [pc, #192]	; (8006d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01a      	beq.n	8006cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	3b08      	subs	r3, #8
 8006cc4:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4b26      	ldr	r3, [pc, #152]	; (8006d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a24      	ldr	r2, [pc, #144]	; (8006d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	2201      	movs	r2, #1
 8006cea:	409a      	lsls	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006cf0:	e024      	b.n	8006d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	3b10      	subs	r3, #16
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d806      	bhi.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d902      	bls.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3308      	adds	r3, #8
 8006d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006d2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	58025408 	.word	0x58025408
 8006d4c:	5802541c 	.word	0x5802541c
 8006d50:	58025430 	.word	0x58025430
 8006d54:	58025444 	.word	0x58025444
 8006d58:	58025458 	.word	0x58025458
 8006d5c:	5802546c 	.word	0x5802546c
 8006d60:	58025480 	.word	0x58025480
 8006d64:	58025494 	.word	0x58025494
 8006d68:	cccccccd 	.word	0xcccccccd
 8006d6c:	16009600 	.word	0x16009600
 8006d70:	58025880 	.word	0x58025880
 8006d74:	aaaaaaab 	.word	0xaaaaaaab
 8006d78:	400204b8 	.word	0x400204b8
 8006d7c:	4002040f 	.word	0x4002040f
 8006d80:	10008200 	.word	0x10008200
 8006d84:	40020880 	.word	0x40020880

08006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d04a      	beq.n	8006e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d847      	bhi.n	8006e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d022      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a24      	ldr	r2, [pc, #144]	; (8006e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d01d      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d018      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00e      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d009      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1b      	ldr	r2, [pc, #108]	; (8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e10:	671a      	str	r2, [r3, #112]	; 0x70
 8006e12:	e009      	b.n	8006e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006e26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	58025408 	.word	0x58025408
 8006e44:	5802541c 	.word	0x5802541c
 8006e48:	58025430 	.word	0x58025430
 8006e4c:	58025444 	.word	0x58025444
 8006e50:	58025458 	.word	0x58025458
 8006e54:	5802546c 	.word	0x5802546c
 8006e58:	58025480 	.word	0x58025480
 8006e5c:	58025494 	.word	0x58025494
 8006e60:	1600963f 	.word	0x1600963f
 8006e64:	58025940 	.word	0x58025940
 8006e68:	1000823f 	.word	0x1000823f
 8006e6c:	40020940 	.word	0x40020940

08006e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e7e:	4b89      	ldr	r3, [pc, #548]	; (80070a4 <HAL_GPIO_Init+0x234>)
 8006e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e82:	e194      	b.n	80071ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	4013      	ands	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8186 	beq.w	80071a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d005      	beq.n	8006eb4 <HAL_GPIO_Init+0x44>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d130      	bne.n	8006f16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006eea:	2201      	movs	r2, #1
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	091b      	lsrs	r3, r3, #4
 8006f00:	f003 0201 	and.w	r2, r3, #1
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d017      	beq.n	8006f52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	43db      	mvns	r3, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	4013      	ands	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d123      	bne.n	8006fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	08da      	lsrs	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3208      	adds	r2, #8
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	220f      	movs	r2, #15
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	08da      	lsrs	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3208      	adds	r2, #8
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 0203 	and.w	r2, r3, #3
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80e0 	beq.w	80071a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe8:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <HAL_GPIO_Init+0x238>)
 8006fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fee:	4a2e      	ldr	r2, [pc, #184]	; (80070a8 <HAL_GPIO_Init+0x238>)
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_GPIO_Init+0x238>)
 8006ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007006:	4a29      	ldr	r2, [pc, #164]	; (80070ac <HAL_GPIO_Init+0x23c>)
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	3302      	adds	r3, #2
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	220f      	movs	r2, #15
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	43db      	mvns	r3, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4013      	ands	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <HAL_GPIO_Init+0x240>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d052      	beq.n	80070d8 <HAL_GPIO_Init+0x268>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <HAL_GPIO_Init+0x244>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d031      	beq.n	800709e <HAL_GPIO_Init+0x22e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <HAL_GPIO_Init+0x248>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02b      	beq.n	800709a <HAL_GPIO_Init+0x22a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_GPIO_Init+0x24c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d025      	beq.n	8007096 <HAL_GPIO_Init+0x226>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <HAL_GPIO_Init+0x250>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01f      	beq.n	8007092 <HAL_GPIO_Init+0x222>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <HAL_GPIO_Init+0x254>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d019      	beq.n	800708e <HAL_GPIO_Init+0x21e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1a      	ldr	r2, [pc, #104]	; (80070c8 <HAL_GPIO_Init+0x258>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <HAL_GPIO_Init+0x21a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <HAL_GPIO_Init+0x25c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00d      	beq.n	8007086 <HAL_GPIO_Init+0x216>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <HAL_GPIO_Init+0x260>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <HAL_GPIO_Init+0x212>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <HAL_GPIO_Init+0x264>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d101      	bne.n	800707e <HAL_GPIO_Init+0x20e>
 800707a:	2309      	movs	r3, #9
 800707c:	e02d      	b.n	80070da <HAL_GPIO_Init+0x26a>
 800707e:	230a      	movs	r3, #10
 8007080:	e02b      	b.n	80070da <HAL_GPIO_Init+0x26a>
 8007082:	2308      	movs	r3, #8
 8007084:	e029      	b.n	80070da <HAL_GPIO_Init+0x26a>
 8007086:	2307      	movs	r3, #7
 8007088:	e027      	b.n	80070da <HAL_GPIO_Init+0x26a>
 800708a:	2306      	movs	r3, #6
 800708c:	e025      	b.n	80070da <HAL_GPIO_Init+0x26a>
 800708e:	2305      	movs	r3, #5
 8007090:	e023      	b.n	80070da <HAL_GPIO_Init+0x26a>
 8007092:	2304      	movs	r3, #4
 8007094:	e021      	b.n	80070da <HAL_GPIO_Init+0x26a>
 8007096:	2303      	movs	r3, #3
 8007098:	e01f      	b.n	80070da <HAL_GPIO_Init+0x26a>
 800709a:	2302      	movs	r3, #2
 800709c:	e01d      	b.n	80070da <HAL_GPIO_Init+0x26a>
 800709e:	2301      	movs	r3, #1
 80070a0:	e01b      	b.n	80070da <HAL_GPIO_Init+0x26a>
 80070a2:	bf00      	nop
 80070a4:	58000080 	.word	0x58000080
 80070a8:	58024400 	.word	0x58024400
 80070ac:	58000400 	.word	0x58000400
 80070b0:	58020000 	.word	0x58020000
 80070b4:	58020400 	.word	0x58020400
 80070b8:	58020800 	.word	0x58020800
 80070bc:	58020c00 	.word	0x58020c00
 80070c0:	58021000 	.word	0x58021000
 80070c4:	58021400 	.word	0x58021400
 80070c8:	58021800 	.word	0x58021800
 80070cc:	58021c00 	.word	0x58021c00
 80070d0:	58022000 	.word	0x58022000
 80070d4:	58022400 	.word	0x58022400
 80070d8:	2300      	movs	r3, #0
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	f002 0203 	and.w	r2, r2, #3
 80070e0:	0092      	lsls	r2, r2, #2
 80070e2:	4093      	lsls	r3, r2
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070ea:	4938      	ldr	r1, [pc, #224]	; (80071cc <HAL_GPIO_Init+0x35c>)
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	089b      	lsrs	r3, r3, #2
 80070f0:	3302      	adds	r3, #2
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	43db      	mvns	r3, r3
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	4013      	ands	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800711e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	43db      	mvns	r3, r3
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	4013      	ands	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800714c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	43db      	mvns	r3, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	43db      	mvns	r3, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4013      	ands	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	3301      	adds	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f47f ae63 	bne.w	8006e84 <HAL_GPIO_Init+0x14>
  }
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	3724      	adds	r7, #36	; 0x24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	58000400 	.word	0x58000400

080071d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	887b      	ldrh	r3, [r7, #2]
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e001      	b.n	80071f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	807b      	strh	r3, [r7, #2]
 800720c:	4613      	mov	r3, r2
 800720e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007210:	787b      	ldrb	r3, [r7, #1]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800721c:	e003      	b.n	8007226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800721e:	887b      	ldrh	r3, [r7, #2]
 8007220:	041a      	lsls	r2, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	619a      	str	r2, [r3, #24]
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007244:	887a      	ldrh	r2, [r7, #2]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4013      	ands	r3, r2
 800724a:	041a      	lsls	r2, r3, #16
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	43d9      	mvns	r1, r3
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	400b      	ands	r3, r1
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e07f      	b.n	800737a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa fd2e 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2224      	movs	r2, #36	; 0x24
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d107      	bne.n	80072e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072de:	609a      	str	r2, [r3, #8]
 80072e0:	e006      	b.n	80072f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80072ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d104      	bne.n	8007302 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007300:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <HAL_I2C_Init+0x11c>)
 800730e:	430b      	orrs	r3, r1
 8007310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69d9      	ldr	r1, [r3, #28]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	02008000 	.word	0x02008000

08007388 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	461a      	mov	r2, r3
 8007394:	460b      	mov	r3, r1
 8007396:	817b      	strh	r3, [r7, #10]
 8007398:	4613      	mov	r3, r2
 800739a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	f040 80da 	bne.w	800755e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_I2C_Master_Transmit+0x30>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e0d3      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073c0:	f7fc fdb4 	bl	8003f2c <HAL_GetTick>
 80073c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2319      	movs	r3, #25
 80073cc:	2201      	movs	r2, #1
 80073ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 fe6c 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e0be      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2221      	movs	r2, #33	; 0x21
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2210      	movs	r2, #16
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	893a      	ldrh	r2, [r7, #8]
 8007402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740e:	b29b      	uxth	r3, r3
 8007410:	2bff      	cmp	r3, #255	; 0xff
 8007412:	d90e      	bls.n	8007432 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	22ff      	movs	r2, #255	; 0xff
 8007418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741e:	b2da      	uxtb	r2, r3
 8007420:	8979      	ldrh	r1, [r7, #10]
 8007422:	4b51      	ldr	r3, [pc, #324]	; (8007568 <HAL_I2C_Master_Transmit+0x1e0>)
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f002 f862 	bl	80094f4 <I2C_TransferConfig>
 8007430:	e06c      	b.n	800750c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	b2da      	uxtb	r2, r3
 8007442:	8979      	ldrh	r1, [r7, #10]
 8007444:	4b48      	ldr	r3, [pc, #288]	; (8007568 <HAL_I2C_Master_Transmit+0x1e0>)
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f002 f851 	bl	80094f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007452:	e05b      	b.n	800750c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	6a39      	ldr	r1, [r7, #32]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f001 fe69 	bl	8009130 <I2C_WaitOnTXISFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e07b      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d034      	beq.n	800750c <HAL_I2C_Master_Transmit+0x184>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d130      	bne.n	800750c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2180      	movs	r1, #128	; 0x80
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f001 fdfb 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e04d      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2bff      	cmp	r3, #255	; 0xff
 80074cc:	d90e      	bls.n	80074ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	8979      	ldrh	r1, [r7, #10]
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f002 f805 	bl	80094f4 <I2C_TransferConfig>
 80074ea:	e00f      	b.n	800750c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	8979      	ldrh	r1, [r7, #10]
 80074fe:	2300      	movs	r3, #0
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f001 fff4 	bl	80094f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d19e      	bne.n	8007454 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	6a39      	ldr	r1, [r7, #32]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f001 fe48 	bl	80091b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e01a      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2220      	movs	r2, #32
 8007530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6859      	ldr	r1, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_I2C_Master_Transmit+0x1e4>)
 800753e:	400b      	ands	r3, r1
 8007540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	e000      	b.n	8007560 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800755e:	2302      	movs	r3, #2
  }
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	80002000 	.word	0x80002000
 800756c:	fe00e800 	.word	0xfe00e800

08007570 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	461a      	mov	r2, r3
 800757c:	460b      	mov	r3, r1
 800757e:	817b      	strh	r3, [r7, #10]
 8007580:	4613      	mov	r3, r2
 8007582:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b20      	cmp	r3, #32
 800758e:	f040 80db 	bne.w	8007748 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_I2C_Master_Receive+0x30>
 800759c:	2302      	movs	r3, #2
 800759e:	e0d4      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075a8:	f7fc fcc0 	bl	8003f2c <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2319      	movs	r3, #25
 80075b4:	2201      	movs	r2, #1
 80075b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 fd78 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0bf      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2222      	movs	r2, #34	; 0x22
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2210      	movs	r2, #16
 80075d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	893a      	ldrh	r2, [r7, #8]
 80075ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2bff      	cmp	r3, #255	; 0xff
 80075fa:	d90e      	bls.n	800761a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	22ff      	movs	r2, #255	; 0xff
 8007600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007606:	b2da      	uxtb	r2, r3
 8007608:	8979      	ldrh	r1, [r7, #10]
 800760a:	4b52      	ldr	r3, [pc, #328]	; (8007754 <HAL_I2C_Master_Receive+0x1e4>)
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f001 ff6e 	bl	80094f4 <I2C_TransferConfig>
 8007618:	e06d      	b.n	80076f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007628:	b2da      	uxtb	r2, r3
 800762a:	8979      	ldrh	r1, [r7, #10]
 800762c:	4b49      	ldr	r3, [pc, #292]	; (8007754 <HAL_I2C_Master_Receive+0x1e4>)
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f001 ff5d 	bl	80094f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800763a:	e05c      	b.n	80076f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	6a39      	ldr	r1, [r7, #32]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f001 fdf1 	bl	8009228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e07c      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d034      	beq.n	80076f6 <HAL_I2C_Master_Receive+0x186>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	d130      	bne.n	80076f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	2200      	movs	r2, #0
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 fd06 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e04d      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d90e      	bls.n	80076d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	8979      	ldrh	r1, [r7, #10]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f001 ff10 	bl	80094f4 <I2C_TransferConfig>
 80076d4:	e00f      	b.n	80076f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	8979      	ldrh	r1, [r7, #10]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 feff 	bl	80094f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d19d      	bne.n	800763c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	6a39      	ldr	r1, [r7, #32]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f001 fd53 	bl	80091b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01a      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2220      	movs	r2, #32
 800771a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6859      	ldr	r1, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_I2C_Master_Receive+0x1e8>)
 8007728:	400b      	ands	r3, r1
 800772a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	80002400 	.word	0x80002400
 8007758:	fe00e800 	.word	0xfe00e800

0800775c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	; 0x28
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	461a      	mov	r2, r3
 800776a:	4603      	mov	r3, r0
 800776c:	817b      	strh	r3, [r7, #10]
 800776e:	460b      	mov	r3, r1
 8007770:	813b      	strh	r3, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b20      	cmp	r3, #32
 8007780:	f040 80d5 	bne.w	800792e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_I2C_Mem_Read_DMA+0x34>
 800778a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0c9      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077aa:	d101      	bne.n	80077b0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0bf      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_I2C_Mem_Read_DMA+0x62>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e0b8      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077c6:	f7fc fbb1 	bl	8003f2c <HAL_GetTick>
 80077ca:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2222      	movs	r2, #34	; 0x22
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2240      	movs	r2, #64	; 0x40
 80077d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80077ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a51      	ldr	r2, [pc, #324]	; (8007938 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80077f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a51      	ldr	r2, [pc, #324]	; (800793c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80077f8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2bff      	cmp	r3, #255	; 0xff
 8007802:	d906      	bls.n	8007812 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	22ff      	movs	r2, #255	; 0xff
 8007808:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800780a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e007      	b.n	8007822 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800781c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007820:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007822:	88f8      	ldrh	r0, [r7, #6]
 8007824:	893a      	ldrh	r2, [r7, #8]
 8007826:	8979      	ldrh	r1, [r7, #10]
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	2319      	movs	r3, #25
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	4603      	mov	r3, r0
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fcf2 	bl	800821c <I2C_RequestMemoryRead>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e072      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007856:	4a3a      	ldr	r2, [pc, #232]	; (8007940 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	4a39      	ldr	r2, [pc, #228]	; (8007944 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007860:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	2200      	movs	r2, #0
 8007868:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	2200      	movs	r2, #0
 8007870:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	4619      	mov	r1, r3
 800787e:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007884:	f7fc fffa 	bl	800487c <HAL_DMA_Start_IT>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d139      	bne.n	8007906 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007892:	e013      	b.n	80078bc <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e039      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	8979      	ldrh	r1, [r7, #10]
 80078c4:	4b20      	ldr	r3, [pc, #128]	; (8007948 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 fe12 	bl	80094f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80078ea:	2110      	movs	r1, #16
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f001 fe33 	bl	8009558 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007900:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e014      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	f043 0210 	orr.w	r2, r3, #16
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	ffff0000 	.word	0xffff0000
 800793c:	08007c73 	.word	0x08007c73
 8007940:	08008d6b 	.word	0x08008d6b
 8007944:	08008e01 	.word	0x08008e01
 8007948:	80002400 	.word	0x80002400

0800794c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	68f9      	ldr	r1, [r7, #12]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
  }
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
 80079dc:	4613      	mov	r3, r2
 80079de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a5e:	b2db      	uxtb	r3, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <I2C_Slave_ISR_IT+0x24>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e0ec      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1fe>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fdf0 	bl	8008698 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	091b      	lsrs	r3, r3, #4
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d04d      	beq.n	8007b60 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	091b      	lsrs	r3, r3, #4
 8007ac8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d047      	beq.n	8007b60 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d128      	bne.n	8007b2c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b28      	cmp	r3, #40	; 0x28
 8007ae4:	d108      	bne.n	8007af8 <I2C_Slave_ISR_IT+0x8c>
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aec:	d104      	bne.n	8007af8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 ffc9 	bl	8008a88 <I2C_ITListenCplt>
 8007af6:	e032      	b.n	8007b5e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b29      	cmp	r3, #41	; 0x29
 8007b02:	d10e      	bne.n	8007b22 <I2C_Slave_ISR_IT+0xb6>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b0a:	d00a      	beq.n	8007b22 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2210      	movs	r2, #16
 8007b12:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f001 f904 	bl	8008d22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fc93 	bl	8008446 <I2C_ITSlaveSeqCplt>
 8007b20:	e01d      	b.n	8007b5e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2210      	movs	r2, #16
 8007b28:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007b2a:	e096      	b.n	8007c5a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2210      	movs	r2, #16
 8007b32:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	f043 0204 	orr.w	r2, r3, #4
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <I2C_Slave_ISR_IT+0xe4>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b4c:	f040 8085 	bne.w	8007c5a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b54:	4619      	mov	r1, r3
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 ffec 	bl	8008b34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b5c:	e07d      	b.n	8007c5a <I2C_Slave_ISR_IT+0x1ee>
 8007b5e:	e07c      	b.n	8007c5a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d030      	beq.n	8007bce <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02a      	beq.n	8007bce <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d018      	beq.n	8007bb4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d14f      	bne.n	8007c5e <I2C_Slave_ISR_IT+0x1f2>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bc4:	d04b      	beq.n	8007c5e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fc3d 	bl	8008446 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007bcc:	e047      	b.n	8007c5e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	08db      	lsrs	r3, r3, #3
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007be6:	6939      	ldr	r1, [r7, #16]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fb6b 	bl	80082c4 <I2C_ITAddrCplt>
 8007bee:	e037      	b.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d031      	beq.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02b      	beq.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d018      	beq.n	8007c44 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	851a      	strh	r2, [r3, #40]	; 0x28
 8007c42:	e00d      	b.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c4a:	d002      	beq.n	8007c52 <I2C_Slave_ISR_IT+0x1e6>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fbf7 	bl	8008446 <I2C_ITSlaveSeqCplt>
 8007c58:	e002      	b.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007c5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b088      	sub	sp, #32
 8007c76:	af02      	add	r7, sp, #8
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <I2C_Master_ISR_DMA+0x1a>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e0e1      	b.n	8007e50 <I2C_Master_ISR_DMA+0x1de>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	091b      	lsrs	r3, r3, #4
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d017      	beq.n	8007cd0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d011      	beq.n	8007cd0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007cc0:	2120      	movs	r1, #32
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f001 fc48 	bl	8009558 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f001 f82a 	bl	8008d22 <I2C_Flush_TXDR>
 8007cce:	e0ba      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	09db      	lsrs	r3, r3, #7
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d072      	beq.n	8007dc2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	099b      	lsrs	r3, r3, #6
 8007ce0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d06c      	beq.n	8007dc2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d04e      	beq.n	8007da0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2bff      	cmp	r3, #255	; 0xff
 8007d18:	d906      	bls.n	8007d28 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	e010      	b.n	8007d4a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d3a:	d003      	beq.n	8007d44 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e002      	b.n	8007d4a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d48:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	8a79      	ldrh	r1, [r7, #18]
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f001 fbcb 	bl	80094f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b22      	cmp	r3, #34	; 0x22
 8007d7a:	d108      	bne.n	8007d8e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d8a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d8c:	e05b      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d9e:	e052      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dae:	d003      	beq.n	8007db8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fb0b 	bl	80083cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007db6:	e046      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007db8:	2140      	movs	r1, #64	; 0x40
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 feba 	bl	8008b34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007dc0:	e041      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	099b      	lsrs	r3, r3, #6
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d029      	beq.n	8007e22 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	099b      	lsrs	r3, r3, #6
 8007dd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d023      	beq.n	8007e22 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d119      	bne.n	8007e18 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007df2:	d027      	beq.n	8007e44 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dfc:	d108      	bne.n	8007e10 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e0c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007e0e:	e019      	b.n	8007e44 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fadb 	bl	80083cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007e16:	e015      	b.n	8007e44 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e18:	2140      	movs	r1, #64	; 0x40
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fe8a 	bl	8008b34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e20:	e010      	b.n	8007e44 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fb61 	bl	8008504 <I2C_ITMasterCplt>
 8007e42:	e000      	b.n	8007e46 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007e44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <I2C_Slave_ISR_DMA+0x24>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e1ca      	b.n	8008212 <I2C_Slave_ISR_DMA+0x3ba>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 fbfa 	bl	8008698 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 819b 	beq.w	80081e8 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	091b      	lsrs	r3, r3, #4
 8007eb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8194 	beq.w	80081e8 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	0b9b      	lsrs	r3, r3, #14
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	0bdb      	lsrs	r3, r3, #15
 8007ed0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8180 	beq.w	80081da <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d07c      	beq.n	8007fdc <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	0bdb      	lsrs	r3, r3, #15
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d076      	beq.n	8007fdc <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a74      	ldr	r2, [pc, #464]	; (80080c8 <I2C_Slave_ISR_DMA+0x270>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d059      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a72      	ldr	r2, [pc, #456]	; (80080cc <I2C_Slave_ISR_DMA+0x274>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d053      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a70      	ldr	r2, [pc, #448]	; (80080d0 <I2C_Slave_ISR_DMA+0x278>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d04d      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a6e      	ldr	r2, [pc, #440]	; (80080d4 <I2C_Slave_ISR_DMA+0x27c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d047      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a6c      	ldr	r2, [pc, #432]	; (80080d8 <I2C_Slave_ISR_DMA+0x280>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d041      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a6a      	ldr	r2, [pc, #424]	; (80080dc <I2C_Slave_ISR_DMA+0x284>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d03b      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a68      	ldr	r2, [pc, #416]	; (80080e0 <I2C_Slave_ISR_DMA+0x288>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d035      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a66      	ldr	r2, [pc, #408]	; (80080e4 <I2C_Slave_ISR_DMA+0x28c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02f      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a64      	ldr	r2, [pc, #400]	; (80080e8 <I2C_Slave_ISR_DMA+0x290>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d029      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a62      	ldr	r2, [pc, #392]	; (80080ec <I2C_Slave_ISR_DMA+0x294>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d023      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a60      	ldr	r2, [pc, #384]	; (80080f0 <I2C_Slave_ISR_DMA+0x298>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01d      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a5e      	ldr	r2, [pc, #376]	; (80080f4 <I2C_Slave_ISR_DMA+0x29c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d017      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a5c      	ldr	r2, [pc, #368]	; (80080f8 <I2C_Slave_ISR_DMA+0x2a0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d011      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a5a      	ldr	r2, [pc, #360]	; (80080fc <I2C_Slave_ISR_DMA+0x2a4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00b      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a58      	ldr	r2, [pc, #352]	; (8008100 <I2C_Slave_ISR_DMA+0x2a8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d005      	beq.n	8007fae <I2C_Slave_ISR_DMA+0x156>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a56      	ldr	r2, [pc, #344]	; (8008104 <I2C_Slave_ISR_DMA+0x2ac>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d109      	bne.n	8007fc2 <I2C_Slave_ISR_DMA+0x16a>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf0c      	ite	eq
 8007fba:	2301      	moveq	r3, #1
 8007fbc:	2300      	movne	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e008      	b.n	8007fd4 <I2C_Slave_ISR_DMA+0x17c>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bf0c      	ite	eq
 8007fce:	2301      	moveq	r3, #1
 8007fd0:	2300      	movne	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 809e 	beq.w	8008122 <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0b9b      	lsrs	r3, r3, #14
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8097 	beq.w	8008122 <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a33      	ldr	r2, [pc, #204]	; (80080c8 <I2C_Slave_ISR_DMA+0x270>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d059      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a31      	ldr	r2, [pc, #196]	; (80080cc <I2C_Slave_ISR_DMA+0x274>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d053      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a2f      	ldr	r2, [pc, #188]	; (80080d0 <I2C_Slave_ISR_DMA+0x278>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d04d      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <I2C_Slave_ISR_DMA+0x27c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d047      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a2b      	ldr	r2, [pc, #172]	; (80080d8 <I2C_Slave_ISR_DMA+0x280>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d041      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a29      	ldr	r2, [pc, #164]	; (80080dc <I2C_Slave_ISR_DMA+0x284>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d03b      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	; (80080e0 <I2C_Slave_ISR_DMA+0x288>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d035      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a25      	ldr	r2, [pc, #148]	; (80080e4 <I2C_Slave_ISR_DMA+0x28c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d02f      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <I2C_Slave_ISR_DMA+0x290>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d029      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a21      	ldr	r2, [pc, #132]	; (80080ec <I2C_Slave_ISR_DMA+0x294>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d023      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1f      	ldr	r2, [pc, #124]	; (80080f0 <I2C_Slave_ISR_DMA+0x298>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d01d      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <I2C_Slave_ISR_DMA+0x29c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d017      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <I2C_Slave_ISR_DMA+0x2a0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d011      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a19      	ldr	r2, [pc, #100]	; (80080fc <I2C_Slave_ISR_DMA+0x2a4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a17      	ldr	r2, [pc, #92]	; (8008100 <I2C_Slave_ISR_DMA+0x2a8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d005      	beq.n	80080b4 <I2C_Slave_ISR_DMA+0x25c>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <I2C_Slave_ISR_DMA+0x2ac>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d129      	bne.n	8008108 <I2C_Slave_ISR_DMA+0x2b0>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e028      	b.n	800811a <I2C_Slave_ISR_DMA+0x2c2>
 80080c8:	40020010 	.word	0x40020010
 80080cc:	40020028 	.word	0x40020028
 80080d0:	40020040 	.word	0x40020040
 80080d4:	40020058 	.word	0x40020058
 80080d8:	40020070 	.word	0x40020070
 80080dc:	40020088 	.word	0x40020088
 80080e0:	400200a0 	.word	0x400200a0
 80080e4:	400200b8 	.word	0x400200b8
 80080e8:	40020410 	.word	0x40020410
 80080ec:	40020428 	.word	0x40020428
 80080f0:	40020440 	.word	0x40020440
 80080f4:	40020458 	.word	0x40020458
 80080f8:	40020470 	.word	0x40020470
 80080fc:	40020488 	.word	0x40020488
 8008100:	400204a0 	.word	0x400204a0
 8008104:	400204b8 	.word	0x400204b8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 800811e:	2301      	movs	r3, #1
 8008120:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d128      	bne.n	800817a <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b28      	cmp	r3, #40	; 0x28
 8008132:	d108      	bne.n	8008146 <I2C_Slave_ISR_DMA+0x2ee>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800813a:	d104      	bne.n	8008146 <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fca2 	bl	8008a88 <I2C_ITListenCplt>
 8008144:	e048      	b.n	80081d8 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b29      	cmp	r3, #41	; 0x29
 8008150:	d10e      	bne.n	8008170 <I2C_Slave_ISR_DMA+0x318>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008158:	d00a      	beq.n	8008170 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2210      	movs	r2, #16
 8008160:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fddd 	bl	8008d22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f96c 	bl	8008446 <I2C_ITSlaveSeqCplt>
 800816e:	e033      	b.n	80081d8 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2210      	movs	r2, #16
 8008176:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008178:	e034      	b.n	80081e4 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2210      	movs	r2, #16
 8008180:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	f043 0204 	orr.w	r2, r3, #4
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008194:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <I2C_Slave_ISR_DMA+0x34c>
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081a2:	d11f      	bne.n	80081e4 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b21      	cmp	r3, #33	; 0x21
 80081a8:	d002      	beq.n	80081b0 <I2C_Slave_ISR_DMA+0x358>
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b29      	cmp	r3, #41	; 0x29
 80081ae:	d103      	bne.n	80081b8 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2221      	movs	r2, #33	; 0x21
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
 80081b6:	e008      	b.n	80081ca <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b22      	cmp	r3, #34	; 0x22
 80081bc:	d002      	beq.n	80081c4 <I2C_Slave_ISR_DMA+0x36c>
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b2a      	cmp	r3, #42	; 0x2a
 80081c2:	d102      	bne.n	80081ca <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2222      	movs	r2, #34	; 0x22
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ce:	4619      	mov	r1, r3
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fcaf 	bl	8008b34 <I2C_ITError>
      if (treatdmanack == 1U)
 80081d6:	e005      	b.n	80081e4 <I2C_Slave_ISR_DMA+0x38c>
 80081d8:	e004      	b.n	80081e4 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2210      	movs	r2, #16
 80081e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081e2:	e011      	b.n	8008208 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 80081e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081e6:	e00f      	b.n	8008208 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	08db      	lsrs	r3, r3, #3
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	08db      	lsrs	r3, r3, #3
 80081f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f85e 	bl	80082c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop

0800821c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	4608      	mov	r0, r1
 8008226:	4611      	mov	r1, r2
 8008228:	461a      	mov	r2, r3
 800822a:	4603      	mov	r3, r0
 800822c:	817b      	strh	r3, [r7, #10]
 800822e:	460b      	mov	r3, r1
 8008230:	813b      	strh	r3, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	8979      	ldrh	r1, [r7, #10]
 800823c:	4b20      	ldr	r3, [pc, #128]	; (80082c0 <I2C_RequestMemoryRead+0xa4>)
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	2300      	movs	r3, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 f956 	bl	80094f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	69b9      	ldr	r1, [r7, #24]
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 ff6f 	bl	8009130 <I2C_WaitOnTXISFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e02c      	b.n	80082b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d105      	bne.n	800826e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008262:	893b      	ldrh	r3, [r7, #8]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	629a      	str	r2, [r3, #40]	; 0x28
 800826c:	e015      	b.n	800829a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800826e:	893b      	ldrh	r3, [r7, #8]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	b29b      	uxth	r3, r3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	69b9      	ldr	r1, [r7, #24]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 ff55 	bl	8009130 <I2C_WaitOnTXISFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e012      	b.n	80082b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008290:	893b      	ldrh	r3, [r7, #8]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2200      	movs	r2, #0
 80082a2:	2140      	movs	r1, #64	; 0x40
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 ff03 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	80002000 	.word	0x80002000

080082c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082da:	2b28      	cmp	r3, #40	; 0x28
 80082dc:	d16a      	bne.n	80083b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80082fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800830a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008318:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d138      	bne.n	8008394 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008322:	897b      	ldrh	r3, [r7, #10]
 8008324:	09db      	lsrs	r3, r3, #7
 8008326:	b29a      	uxth	r2, r3
 8008328:	89bb      	ldrh	r3, [r7, #12]
 800832a:	4053      	eors	r3, r2
 800832c:	b29b      	uxth	r3, r3
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	2b00      	cmp	r3, #0
 8008334:	d11c      	bne.n	8008370 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008336:	897b      	ldrh	r3, [r7, #10]
 8008338:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	2b02      	cmp	r3, #2
 800834a:	d13b      	bne.n	80083c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2208      	movs	r2, #8
 8008358:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008362:	89ba      	ldrh	r2, [r7, #12]
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fb31 	bl	80079d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800836e:	e029      	b.n	80083c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008370:	893b      	ldrh	r3, [r7, #8]
 8008372:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f951 	bl	8009620 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008386:	89ba      	ldrh	r2, [r7, #12]
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fb1f 	bl	80079d0 <HAL_I2C_AddrCallback>
}
 8008392:	e017      	b.n	80083c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f941 	bl	8009620 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083a6:	89ba      	ldrh	r2, [r7, #12]
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fb0f 	bl	80079d0 <HAL_I2C_AddrCallback>
}
 80083b2:	e007      	b.n	80083c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2208      	movs	r2, #8
 80083ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b21      	cmp	r3, #33	; 0x21
 80083e6:	d115      	bne.n	8008414 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2211      	movs	r2, #17
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f90e 	bl	8009620 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff fab7 	bl	8007980 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008412:	e014      	b.n	800843e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2212      	movs	r2, #18
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008428:	2102      	movs	r1, #2
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 f8f8 	bl	8009620 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff faab 	bl	8007994 <HAL_I2C_MasterRxCpltCallback>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	0b9b      	lsrs	r3, r3, #14
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e00d      	b.n	8008498 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0bdb      	lsrs	r3, r3, #15
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008496:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b29      	cmp	r3, #41	; 0x29
 80084a2:	d112      	bne.n	80084ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2228      	movs	r2, #40	; 0x28
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2221      	movs	r2, #33	; 0x21
 80084b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80084b2:	2101      	movs	r1, #1
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f8b3 	bl	8009620 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff fa70 	bl	80079a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80084c8:	e017      	b.n	80084fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b2a      	cmp	r3, #42	; 0x2a
 80084d4:	d111      	bne.n	80084fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2228      	movs	r2, #40	; 0x28
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2222      	movs	r2, #34	; 0x22
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80084e4:	2102      	movs	r1, #2
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f89a 	bl	8009620 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff fa61 	bl	80079bc <HAL_I2C_SlaveRxCpltCallback>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2220      	movs	r2, #32
 8008518:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b21      	cmp	r3, #33	; 0x21
 8008524:	d107      	bne.n	8008536 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008526:	2101      	movs	r1, #1
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f879 	bl	8009620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2211      	movs	r2, #17
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
 8008534:	e00c      	b.n	8008550 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b22      	cmp	r3, #34	; 0x22
 8008540:	d106      	bne.n	8008550 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008542:	2102      	movs	r1, #2
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f86b 	bl	8009620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2212      	movs	r2, #18
 800854e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b4d      	ldr	r3, [pc, #308]	; (8008690 <I2C_ITMasterCplt+0x18c>)
 800855c:	400b      	ands	r3, r1
 800855e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a4a      	ldr	r2, [pc, #296]	; (8008694 <I2C_ITMasterCplt+0x190>)
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	091b      	lsrs	r3, r3, #4
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2210      	movs	r2, #16
 800857e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008584:	f043 0204 	orr.w	r2, r3, #4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b60      	cmp	r3, #96	; 0x60
 8008596:	d10b      	bne.n	80085b0 <I2C_ITMasterCplt+0xac>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	089b      	lsrs	r3, r3, #2
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80085ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fbb6 	bl	8008d22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b60      	cmp	r3, #96	; 0x60
 80085c6:	d002      	beq.n	80085ce <I2C_ITMasterCplt+0xca>
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d006      	beq.n	80085dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 faad 	bl	8008b34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80085da:	e054      	b.n	8008686 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b21      	cmp	r3, #33	; 0x21
 80085e6:	d124      	bne.n	8008632 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d10b      	bne.n	800861a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff f9f4 	bl	8007a00 <HAL_I2C_MemTxCpltCallback>
}
 8008618:	e035      	b.n	8008686 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff f9a8 	bl	8007980 <HAL_I2C_MasterTxCpltCallback>
}
 8008630:	e029      	b.n	8008686 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b22      	cmp	r3, #34	; 0x22
 800863c:	d123      	bne.n	8008686 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d10b      	bne.n	8008670 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff f9d3 	bl	8007a14 <HAL_I2C_MemRxCpltCallback>
}
 800866e:	e00a      	b.n	8008686 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff f987 	bl	8007994 <HAL_I2C_MasterRxCpltCallback>
}
 8008686:	bf00      	nop
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	fe00e800 	.word	0xfe00e800
 8008694:	ffff0000 	.word	0xffff0000

08008698 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2220      	movs	r2, #32
 80086bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b21      	cmp	r3, #33	; 0x21
 80086c2:	d002      	beq.n	80086ca <I2C_ITSlaveCplt+0x32>
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b29      	cmp	r3, #41	; 0x29
 80086c8:	d108      	bne.n	80086dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80086ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 ffa6 	bl	8009620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2221      	movs	r2, #33	; 0x21
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
 80086da:	e00d      	b.n	80086f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b22      	cmp	r3, #34	; 0x22
 80086e0:	d002      	beq.n	80086e8 <I2C_ITSlaveCplt+0x50>
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b2a      	cmp	r3, #42	; 0x2a
 80086e6:	d107      	bne.n	80086f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80086e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 ff97 	bl	8009620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2222      	movs	r2, #34	; 0x22
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008706:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6859      	ldr	r1, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b80      	ldr	r3, [pc, #512]	; (8008914 <I2C_ITSlaveCplt+0x27c>)
 8008714:	400b      	ands	r3, r1
 8008716:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fb02 	bl	8008d22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	0b9b      	lsrs	r3, r3, #14
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d07a      	beq.n	8008820 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008738:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8111 	beq.w	8008966 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a73      	ldr	r2, [pc, #460]	; (8008918 <I2C_ITSlaveCplt+0x280>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d059      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a71      	ldr	r2, [pc, #452]	; (800891c <I2C_ITSlaveCplt+0x284>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d053      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a6f      	ldr	r2, [pc, #444]	; (8008920 <I2C_ITSlaveCplt+0x288>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d04d      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6d      	ldr	r2, [pc, #436]	; (8008924 <I2C_ITSlaveCplt+0x28c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d047      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a6b      	ldr	r2, [pc, #428]	; (8008928 <I2C_ITSlaveCplt+0x290>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d041      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a69      	ldr	r2, [pc, #420]	; (800892c <I2C_ITSlaveCplt+0x294>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d03b      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a67      	ldr	r2, [pc, #412]	; (8008930 <I2C_ITSlaveCplt+0x298>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d035      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a65      	ldr	r2, [pc, #404]	; (8008934 <I2C_ITSlaveCplt+0x29c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d02f      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a63      	ldr	r2, [pc, #396]	; (8008938 <I2C_ITSlaveCplt+0x2a0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d029      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a61      	ldr	r2, [pc, #388]	; (800893c <I2C_ITSlaveCplt+0x2a4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d023      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a5f      	ldr	r2, [pc, #380]	; (8008940 <I2C_ITSlaveCplt+0x2a8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d01d      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a5d      	ldr	r2, [pc, #372]	; (8008944 <I2C_ITSlaveCplt+0x2ac>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d017      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a5b      	ldr	r2, [pc, #364]	; (8008948 <I2C_ITSlaveCplt+0x2b0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d011      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a59      	ldr	r2, [pc, #356]	; (800894c <I2C_ITSlaveCplt+0x2b4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a57      	ldr	r2, [pc, #348]	; (8008950 <I2C_ITSlaveCplt+0x2b8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d005      	beq.n	8008804 <I2C_ITSlaveCplt+0x16c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a55      	ldr	r2, [pc, #340]	; (8008954 <I2C_ITSlaveCplt+0x2bc>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d105      	bne.n	8008810 <I2C_ITSlaveCplt+0x178>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b29b      	uxth	r3, r3
 800880e:	e004      	b.n	800881a <I2C_ITSlaveCplt+0x182>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	b29b      	uxth	r3, r3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800881e:	e0a2      	b.n	8008966 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	0bdb      	lsrs	r3, r3, #15
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 809c 	beq.w	8008966 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800883c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 808f 	beq.w	8008966 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a32      	ldr	r2, [pc, #200]	; (8008918 <I2C_ITSlaveCplt+0x280>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d059      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a30      	ldr	r2, [pc, #192]	; (800891c <I2C_ITSlaveCplt+0x284>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d053      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a2e      	ldr	r2, [pc, #184]	; (8008920 <I2C_ITSlaveCplt+0x288>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04d      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2c      	ldr	r2, [pc, #176]	; (8008924 <I2C_ITSlaveCplt+0x28c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d047      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a2a      	ldr	r2, [pc, #168]	; (8008928 <I2C_ITSlaveCplt+0x290>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d041      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a28      	ldr	r2, [pc, #160]	; (800892c <I2C_ITSlaveCplt+0x294>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d03b      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a26      	ldr	r2, [pc, #152]	; (8008930 <I2C_ITSlaveCplt+0x298>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d035      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a24      	ldr	r2, [pc, #144]	; (8008934 <I2C_ITSlaveCplt+0x29c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02f      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a22      	ldr	r2, [pc, #136]	; (8008938 <I2C_ITSlaveCplt+0x2a0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d029      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a20      	ldr	r2, [pc, #128]	; (800893c <I2C_ITSlaveCplt+0x2a4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d023      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <I2C_ITSlaveCplt+0x2a8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d01d      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1c      	ldr	r2, [pc, #112]	; (8008944 <I2C_ITSlaveCplt+0x2ac>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d017      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1a      	ldr	r2, [pc, #104]	; (8008948 <I2C_ITSlaveCplt+0x2b0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d011      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a18      	ldr	r2, [pc, #96]	; (800894c <I2C_ITSlaveCplt+0x2b4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <I2C_ITSlaveCplt+0x2b8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d005      	beq.n	8008908 <I2C_ITSlaveCplt+0x270>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a14      	ldr	r2, [pc, #80]	; (8008954 <I2C_ITSlaveCplt+0x2bc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d127      	bne.n	8008958 <I2C_ITSlaveCplt+0x2c0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	b29b      	uxth	r3, r3
 8008912:	e026      	b.n	8008962 <I2C_ITSlaveCplt+0x2ca>
 8008914:	fe00e800 	.word	0xfe00e800
 8008918:	40020010 	.word	0x40020010
 800891c:	40020028 	.word	0x40020028
 8008920:	40020040 	.word	0x40020040
 8008924:	40020058 	.word	0x40020058
 8008928:	40020070 	.word	0x40020070
 800892c:	40020088 	.word	0x40020088
 8008930:	400200a0 	.word	0x400200a0
 8008934:	400200b8 	.word	0x400200b8
 8008938:	40020410 	.word	0x40020410
 800893c:	40020428 	.word	0x40020428
 8008940:	40020440 	.word	0x40020440
 8008944:	40020458 	.word	0x40020458
 8008948:	40020470 	.word	0x40020470
 800894c:	40020488 	.word	0x40020488
 8008950:	400204a0 	.word	0x400204a0
 8008954:	400204b8 	.word	0x400204b8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	b29b      	uxth	r3, r3
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	089b      	lsrs	r3, r3, #2
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d020      	beq.n	80089b4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f023 0304 	bic.w	r3, r3, #4
 8008978:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	f043 0204 	orr.w	r2, r3, #4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8a4 	bl	8008b34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b28      	cmp	r3, #40	; 0x28
 80089f6:	d141      	bne.n	8008a7c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80089f8:	6979      	ldr	r1, [r7, #20]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f844 	bl	8008a88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a00:	e03c      	b.n	8008a7c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a0a:	d014      	beq.n	8008a36 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff fd1a 	bl	8008446 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1b      	ldr	r2, [pc, #108]	; (8008a84 <I2C_ITSlaveCplt+0x3ec>)
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fe ffdc 	bl	80079ec <HAL_I2C_ListenCpltCallback>
}
 8008a34:	e022      	b.n	8008a7c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b22      	cmp	r3, #34	; 0x22
 8008a40:	d10e      	bne.n	8008a60 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7fe ffaf 	bl	80079bc <HAL_I2C_SlaveRxCpltCallback>
}
 8008a5e:	e00d      	b.n	8008a7c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe ff96 	bl	80079a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8008a7c:	bf00      	nop
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	ffff0000 	.word	0xffff0000

08008a88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <I2C_ITListenCplt+0xa8>)
 8008a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	089b      	lsrs	r3, r3, #2
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d022      	beq.n	8008b06 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d012      	beq.n	8008b06 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	f043 0204 	orr.w	r2, r3, #4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b06:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fd88 	bl	8009620 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2210      	movs	r2, #16
 8008b16:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7fe ff63 	bl	80079ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	ffff0000 	.word	0xffff0000

08008b34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a5d      	ldr	r2, [pc, #372]	; (8008cc8 <I2C_ITError+0x194>)
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b28      	cmp	r3, #40	; 0x28
 8008b6a:	d005      	beq.n	8008b78 <I2C_ITError+0x44>
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	2b29      	cmp	r3, #41	; 0x29
 8008b70:	d002      	beq.n	8008b78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b2a      	cmp	r3, #42	; 0x2a
 8008b76:	d10b      	bne.n	8008b90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b78:	2103      	movs	r1, #3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fd50 	bl	8009620 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2228      	movs	r2, #40	; 0x28
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a50      	ldr	r2, [pc, #320]	; (8008ccc <I2C_ITError+0x198>)
 8008b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8008b8e:	e011      	b.n	8008bb4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b90:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fd43 	bl	8009620 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b60      	cmp	r3, #96	; 0x60
 8008ba4:	d003      	beq.n	8008bae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d039      	beq.n	8008c36 <I2C_ITError+0x102>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b11      	cmp	r3, #17
 8008bc6:	d002      	beq.n	8008bce <I2C_ITError+0x9a>
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b21      	cmp	r3, #33	; 0x21
 8008bcc:	d133      	bne.n	8008c36 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bdc:	d107      	bne.n	8008bee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fd fd3a 	bl	800666c <HAL_DMA_GetState>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d017      	beq.n	8008c2e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	4a33      	ldr	r2, [pc, #204]	; (8008cd0 <I2C_ITError+0x19c>)
 8008c04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fc fbba 	bl	800538c <HAL_DMA_Abort_IT>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d04d      	beq.n	8008cba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c2c:	e045      	b.n	8008cba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f850 	bl	8008cd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c34:	e041      	b.n	8008cba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d039      	beq.n	8008cb2 <I2C_ITError+0x17e>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b12      	cmp	r3, #18
 8008c42:	d002      	beq.n	8008c4a <I2C_ITError+0x116>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b22      	cmp	r3, #34	; 0x22
 8008c48:	d133      	bne.n	8008cb2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c58:	d107      	bne.n	8008c6a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fd fcfc 	bl	800666c <HAL_DMA_GetState>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d017      	beq.n	8008caa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <I2C_ITError+0x19c>)
 8008c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fc fb7c 	bl	800538c <HAL_DMA_Abort_IT>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d011      	beq.n	8008cbe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ca8:	e009      	b.n	8008cbe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f812 	bl	8008cd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cb0:	e005      	b.n	8008cbe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f80e 	bl	8008cd4 <I2C_TreatErrorCallback>
  }
}
 8008cb8:	e002      	b.n	8008cc0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cbe:	bf00      	nop
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	ffff0000 	.word	0xffff0000
 8008ccc:	08007a6d 	.word	0x08007a6d
 8008cd0:	08009075 	.word	0x08009075

08008cd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b60      	cmp	r3, #96	; 0x60
 8008ce6:	d10e      	bne.n	8008d06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fe fe9c 	bl	8007a3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d04:	e009      	b.n	8008d1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7fe fe87 	bl	8007a28 <HAL_I2C_ErrorCallback>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d103      	bne.n	8008d40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d007      	beq.n	8008d5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	619a      	str	r2, [r3, #24]
  }
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d86:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008d92:	2120      	movs	r1, #32
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fbdf 	bl	8009558 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008d9a:	e02d      	b.n	8008df8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2bff      	cmp	r3, #255	; 0xff
 8008db2:	d903      	bls.n	8008dbc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	22ff      	movs	r2, #255	; 0xff
 8008db8:	851a      	strh	r2, [r3, #40]	; 0x28
 8008dba:	e004      	b.n	8008dc6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3324      	adds	r3, #36	; 0x24
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008ddc:	f7fb fd4e 	bl	800487c <HAL_DMA_Start_IT>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008de6:	2110      	movs	r1, #16
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fea3 	bl	8008b34 <I2C_ITError>
}
 8008dee:	e003      	b.n	8008df8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008df0:	2140      	movs	r1, #64	; 0x40
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fbb0 	bl	8009558 <I2C_Enable_IRQ>
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d076      	beq.n	8008f08 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a71      	ldr	r2, [pc, #452]	; (8008fe8 <I2C_DMAError+0x1e8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d059      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a6f      	ldr	r2, [pc, #444]	; (8008fec <I2C_DMAError+0x1ec>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d053      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a6d      	ldr	r2, [pc, #436]	; (8008ff0 <I2C_DMAError+0x1f0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d04d      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a6b      	ldr	r2, [pc, #428]	; (8008ff4 <I2C_DMAError+0x1f4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d047      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a69      	ldr	r2, [pc, #420]	; (8008ff8 <I2C_DMAError+0x1f8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d041      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a67      	ldr	r2, [pc, #412]	; (8008ffc <I2C_DMAError+0x1fc>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d03b      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a65      	ldr	r2, [pc, #404]	; (8009000 <I2C_DMAError+0x200>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d035      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a63      	ldr	r2, [pc, #396]	; (8009004 <I2C_DMAError+0x204>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d02f      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a61      	ldr	r2, [pc, #388]	; (8009008 <I2C_DMAError+0x208>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d029      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a5f      	ldr	r2, [pc, #380]	; (800900c <I2C_DMAError+0x20c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d023      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a5d      	ldr	r2, [pc, #372]	; (8009010 <I2C_DMAError+0x210>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d01d      	beq.n	8008eda <I2C_DMAError+0xda>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a5b      	ldr	r2, [pc, #364]	; (8009014 <I2C_DMAError+0x214>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d017      	beq.n	8008eda <I2C_DMAError+0xda>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a59      	ldr	r2, [pc, #356]	; (8009018 <I2C_DMAError+0x218>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d011      	beq.n	8008eda <I2C_DMAError+0xda>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a57      	ldr	r2, [pc, #348]	; (800901c <I2C_DMAError+0x21c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d00b      	beq.n	8008eda <I2C_DMAError+0xda>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a55      	ldr	r2, [pc, #340]	; (8009020 <I2C_DMAError+0x220>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d005      	beq.n	8008eda <I2C_DMAError+0xda>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a53      	ldr	r2, [pc, #332]	; (8009024 <I2C_DMAError+0x224>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d109      	bne.n	8008eee <I2C_DMAError+0xee>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bf0c      	ite	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	2300      	movne	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	e008      	b.n	8008f00 <I2C_DMAError+0x100>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bf0c      	ite	eq
 8008efa:	2301      	moveq	r3, #1
 8008efc:	2300      	movne	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008f04:	2301      	movs	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8098 	beq.w	8009042 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a33      	ldr	r2, [pc, #204]	; (8008fe8 <I2C_DMAError+0x1e8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d059      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a31      	ldr	r2, [pc, #196]	; (8008fec <I2C_DMAError+0x1ec>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d053      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a2f      	ldr	r2, [pc, #188]	; (8008ff0 <I2C_DMAError+0x1f0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d04d      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a2d      	ldr	r2, [pc, #180]	; (8008ff4 <I2C_DMAError+0x1f4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d047      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <I2C_DMAError+0x1f8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d041      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <I2C_DMAError+0x1fc>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d03b      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a27      	ldr	r2, [pc, #156]	; (8009000 <I2C_DMAError+0x200>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d035      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a25      	ldr	r2, [pc, #148]	; (8009004 <I2C_DMAError+0x204>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d02f      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a23      	ldr	r2, [pc, #140]	; (8009008 <I2C_DMAError+0x208>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d029      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a21      	ldr	r2, [pc, #132]	; (800900c <I2C_DMAError+0x20c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d023      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <I2C_DMAError+0x210>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01d      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <I2C_DMAError+0x214>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d017      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1b      	ldr	r2, [pc, #108]	; (8009018 <I2C_DMAError+0x218>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d011      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a19      	ldr	r2, [pc, #100]	; (800901c <I2C_DMAError+0x21c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00b      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a17      	ldr	r2, [pc, #92]	; (8009020 <I2C_DMAError+0x220>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d005      	beq.n	8008fd2 <I2C_DMAError+0x1d2>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a15      	ldr	r2, [pc, #84]	; (8009024 <I2C_DMAError+0x224>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d12a      	bne.n	8009028 <I2C_DMAError+0x228>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bf0c      	ite	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	2300      	movne	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	e029      	b.n	800903a <I2C_DMAError+0x23a>
 8008fe6:	bf00      	nop
 8008fe8:	40020010 	.word	0x40020010
 8008fec:	40020028 	.word	0x40020028
 8008ff0:	40020040 	.word	0x40020040
 8008ff4:	40020058 	.word	0x40020058
 8008ff8:	40020070 	.word	0x40020070
 8008ffc:	40020088 	.word	0x40020088
 8009000:	400200a0 	.word	0x400200a0
 8009004:	400200b8 	.word	0x400200b8
 8009008:	40020410 	.word	0x40020410
 800900c:	40020428 	.word	0x40020428
 8009010:	40020440 	.word	0x40020440
 8009014:	40020458 	.word	0x40020458
 8009018:	40020470 	.word	0x40020470
 800901c:	40020488 	.word	0x40020488
 8009020:	400204a0 	.word	0x400204a0
 8009024:	400204b8 	.word	0x400204b8
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800903e:	2301      	movs	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fd fb20 	bl	8006688 <HAL_DMA_GetError>
 8009048:	4603      	mov	r3, r0
 800904a:	2b02      	cmp	r3, #2
 800904c:	d00e      	beq.n	800906c <I2C_DMAError+0x26c>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009062:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009064:	2110      	movs	r1, #16
 8009066:	68b8      	ldr	r0, [r7, #8]
 8009068:	f7ff fd64 	bl	8008b34 <I2C_ITError>
  }
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	2200      	movs	r2, #0
 8009090:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	2200      	movs	r2, #0
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff fe16 	bl	8008cd4 <I2C_TreatErrorCallback>
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090c0:	e022      	b.n	8009108 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c8:	d01e      	beq.n	8009108 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ca:	f7fa ff2f 	bl	8003f2c <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d302      	bcc.n	80090e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d113      	bne.n	8009108 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e4:	f043 0220 	orr.w	r2, r3, #32
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e00f      	b.n	8009128 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4013      	ands	r3, r2
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	429a      	cmp	r2, r3
 8009116:	bf0c      	ite	eq
 8009118:	2301      	moveq	r3, #1
 800911a:	2300      	movne	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	461a      	mov	r2, r3
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	429a      	cmp	r2, r3
 8009124:	d0cd      	beq.n	80090c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800913c:	e02c      	b.n	8009198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f8ea 	bl	800931c <I2C_IsErrorOccurred>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e02a      	b.n	80091a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009158:	d01e      	beq.n	8009198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800915a:	f7fa fee7 	bl	8003f2c <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d302      	bcc.n	8009170 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d113      	bne.n	8009198 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009174:	f043 0220 	orr.w	r2, r3, #32
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e007      	b.n	80091a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d1cb      	bne.n	800913e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091bc:	e028      	b.n	8009210 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f8aa 	bl	800931c <I2C_IsErrorOccurred>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e026      	b.n	8009220 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091d2:	f7fa feab 	bl	8003f2c <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d302      	bcc.n	80091e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d113      	bne.n	8009210 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ec:	f043 0220 	orr.w	r2, r3, #32
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e007      	b.n	8009220 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 0320 	and.w	r3, r3, #32
 800921a:	2b20      	cmp	r3, #32
 800921c:	d1cf      	bne.n	80091be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009234:	e064      	b.n	8009300 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f86e 	bl	800931c <I2C_IsErrorOccurred>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e062      	b.n	8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b20      	cmp	r3, #32
 8009256:	d138      	bne.n	80092ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b04      	cmp	r3, #4
 8009264:	d105      	bne.n	8009272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e04e      	b.n	8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b10      	cmp	r3, #16
 800927e:	d107      	bne.n	8009290 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2210      	movs	r2, #16
 8009286:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2204      	movs	r2, #4
 800928c:	645a      	str	r2, [r3, #68]	; 0x44
 800928e:	e002      	b.n	8009296 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2220      	movs	r2, #32
 800929c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6859      	ldr	r1, [r3, #4]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b1b      	ldr	r3, [pc, #108]	; (8009318 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80092aa:	400b      	ands	r3, r1
 80092ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e022      	b.n	8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ca:	f7fa fe2f 	bl	8003f2c <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10f      	bne.n	8009300 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e4:	f043 0220 	orr.w	r2, r3, #32
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e007      	b.n	8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b04      	cmp	r3, #4
 800930c:	d193      	bne.n	8009236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	fe00e800 	.word	0xfe00e800

0800931c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	; 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d075      	beq.n	8009434 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2210      	movs	r2, #16
 800934e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009350:	e056      	b.n	8009400 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009358:	d052      	beq.n	8009400 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800935a:	f7fa fde7 	bl	8003f2c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	d302      	bcc.n	8009370 <I2C_IsErrorOccurred+0x54>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d147      	bne.n	8009400 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800937a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009392:	d12e      	bne.n	80093f2 <I2C_IsErrorOccurred+0xd6>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800939a:	d02a      	beq.n	80093f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800939c:	7cfb      	ldrb	r3, [r7, #19]
 800939e:	2b20      	cmp	r3, #32
 80093a0:	d027      	beq.n	80093f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093b0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80093b2:	f7fa fdbb 	bl	8003f2c <HAL_GetTick>
 80093b6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093b8:	e01b      	b.n	80093f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80093ba:	f7fa fdb7 	bl	8003f2c <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b19      	cmp	r3, #25
 80093c6:	d914      	bls.n	80093f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093cc:	f043 0220 	orr.w	r2, r3, #32
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d1dc      	bne.n	80093ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b20      	cmp	r3, #32
 800940c:	d003      	beq.n	8009416 <I2C_IsErrorOccurred+0xfa>
 800940e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009412:	2b00      	cmp	r3, #0
 8009414:	d09d      	beq.n	8009352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800941a:	2b00      	cmp	r3, #0
 800941c:	d103      	bne.n	8009426 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2220      	movs	r2, #32
 8009424:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	f043 0304 	orr.w	r3, r3, #4
 800942c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	f043 0301 	orr.w	r3, r3, #1
 800944c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	f043 0308 	orr.w	r3, r3, #8
 800946e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f043 0302 	orr.w	r3, r3, #2
 8009490:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800949a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80094a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01c      	beq.n	80094e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fc39 	bl	8008d22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6859      	ldr	r1, [r3, #4]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <I2C_IsErrorOccurred+0x1d4>)
 80094bc:	400b      	ands	r3, r1
 80094be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	431a      	orrs	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3728      	adds	r7, #40	; 0x28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	fe00e800 	.word	0xfe00e800

080094f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	817b      	strh	r3, [r7, #10]
 8009502:	4613      	mov	r3, r2
 8009504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009506:	897b      	ldrh	r3, [r7, #10]
 8009508:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800950c:	7a7b      	ldrb	r3, [r7, #9]
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009514:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	4313      	orrs	r3, r2
 800951e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009522:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	0d5b      	lsrs	r3, r3, #21
 800952e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009532:	4b08      	ldr	r3, [pc, #32]	; (8009554 <I2C_TransferConfig+0x60>)
 8009534:	430b      	orrs	r3, r1
 8009536:	43db      	mvns	r3, r3
 8009538:	ea02 0103 	and.w	r1, r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	03ff63ff 	.word	0x03ff63ff

08009558 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956c:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <I2C_Enable_IRQ+0xc0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d004      	beq.n	800957c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009576:	4a29      	ldr	r2, [pc, #164]	; (800961c <I2C_Enable_IRQ+0xc4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d11d      	bne.n	80095b8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800957c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009580:	2b00      	cmp	r3, #0
 8009582:	da03      	bge.n	800958c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800958a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800958c:	887b      	ldrh	r3, [r7, #2]
 800958e:	2b10      	cmp	r3, #16
 8009590:	d103      	bne.n	800959a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009598:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800959a:	887b      	ldrh	r3, [r7, #2]
 800959c:	2b20      	cmp	r3, #32
 800959e:	d103      	bne.n	80095a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80095a8:	887b      	ldrh	r3, [r7, #2]
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	d125      	bne.n	80095fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80095b6:	e020      	b.n	80095fa <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80095b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	da03      	bge.n	80095c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80095c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80095c8:	887b      	ldrh	r3, [r7, #2]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80095d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80095da:	887b      	ldrh	r3, [r7, #2]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80095ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80095ec:	887b      	ldrh	r3, [r7, #2]
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d103      	bne.n	80095fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f043 0320 	orr.w	r3, r3, #32
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	430a      	orrs	r2, r1
 8009608:	601a      	str	r2, [r3, #0]
}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	08007c73 	.word	0x08007c73
 800961c:	08007e59 	.word	0x08007e59

08009620 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009630:	887b      	ldrh	r3, [r7, #2]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00f      	beq.n	800965a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009640:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800964e:	2b28      	cmp	r3, #40	; 0x28
 8009650:	d003      	beq.n	800965a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009658:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800965a:	887b      	ldrh	r3, [r7, #2]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00f      	beq.n	8009684 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800966a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009678:	2b28      	cmp	r3, #40	; 0x28
 800967a:	d003      	beq.n	8009684 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009682:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009688:	2b00      	cmp	r3, #0
 800968a:	da03      	bge.n	8009694 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009692:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	2b10      	cmp	r3, #16
 8009698:	d103      	bne.n	80096a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80096a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80096a2:	887b      	ldrh	r3, [r7, #2]
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d103      	bne.n	80096b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f043 0320 	orr.w	r3, r3, #32
 80096ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80096b0:	887b      	ldrh	r3, [r7, #2]
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d103      	bne.n	80096be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	43da      	mvns	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	400a      	ands	r2, r1
 80096ce:	601a      	str	r2, [r3, #0]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	d138      	bne.n	8009764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e032      	b.n	8009766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2224      	movs	r2, #36	; 0x24
 800970c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800972e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6819      	ldr	r1, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e000      	b.n	8009766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009764:	2302      	movs	r3, #2
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b20      	cmp	r3, #32
 8009786:	d139      	bne.n	80097fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009792:	2302      	movs	r3, #2
 8009794:	e033      	b.n	80097fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2224      	movs	r2, #36	; 0x24
 80097a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0201 	bic.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	e000      	b.n	80097fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80097fc:	2302      	movs	r3, #2
  }
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009814:	4b19      	ldr	r3, [pc, #100]	; (800987c <HAL_PWREx_ConfigSupply+0x70>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b04      	cmp	r3, #4
 800981e:	d00a      	beq.n	8009836 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009820:	4b16      	ldr	r3, [pc, #88]	; (800987c <HAL_PWREx_ConfigSupply+0x70>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d001      	beq.n	8009832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e01f      	b.n	8009872 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e01d      	b.n	8009872 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009836:	4b11      	ldr	r3, [pc, #68]	; (800987c <HAL_PWREx_ConfigSupply+0x70>)
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f023 0207 	bic.w	r2, r3, #7
 800983e:	490f      	ldr	r1, [pc, #60]	; (800987c <HAL_PWREx_ConfigSupply+0x70>)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4313      	orrs	r3, r2
 8009844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009846:	f7fa fb71 	bl	8003f2c <HAL_GetTick>
 800984a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800984c:	e009      	b.n	8009862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800984e:	f7fa fb6d 	bl	8003f2c <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800985c:	d901      	bls.n	8009862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e007      	b.n	8009872 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <HAL_PWREx_ConfigSupply+0x70>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800986e:	d1ee      	bne.n	800984e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	58024800 	.word	0x58024800

08009880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d102      	bne.n	8009894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f000 bc1d 	b.w	800a0ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8087 	beq.w	80099b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098a2:	4b99      	ldr	r3, [pc, #612]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098ac:	4b96      	ldr	r3, [pc, #600]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	2b10      	cmp	r3, #16
 80098b6:	d007      	beq.n	80098c8 <HAL_RCC_OscConfig+0x48>
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	2b18      	cmp	r3, #24
 80098bc:	d110      	bne.n	80098e0 <HAL_RCC_OscConfig+0x60>
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	f003 0303 	and.w	r3, r3, #3
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d10b      	bne.n	80098e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c8:	4b8f      	ldr	r3, [pc, #572]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d06c      	beq.n	80099ae <HAL_RCC_OscConfig+0x12e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d168      	bne.n	80099ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e3f6      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e8:	d106      	bne.n	80098f8 <HAL_RCC_OscConfig+0x78>
 80098ea:	4b87      	ldr	r3, [pc, #540]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a86      	ldr	r2, [pc, #536]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	e02e      	b.n	8009956 <HAL_RCC_OscConfig+0xd6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10c      	bne.n	800991a <HAL_RCC_OscConfig+0x9a>
 8009900:	4b81      	ldr	r3, [pc, #516]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a80      	ldr	r2, [pc, #512]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	4b7e      	ldr	r3, [pc, #504]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a7d      	ldr	r2, [pc, #500]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	e01d      	b.n	8009956 <HAL_RCC_OscConfig+0xd6>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009922:	d10c      	bne.n	800993e <HAL_RCC_OscConfig+0xbe>
 8009924:	4b78      	ldr	r3, [pc, #480]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a77      	ldr	r2, [pc, #476]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800992a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	4b75      	ldr	r3, [pc, #468]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a74      	ldr	r2, [pc, #464]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e00b      	b.n	8009956 <HAL_RCC_OscConfig+0xd6>
 800993e:	4b72      	ldr	r3, [pc, #456]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a71      	ldr	r2, [pc, #452]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	4b6f      	ldr	r3, [pc, #444]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a6e      	ldr	r2, [pc, #440]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009954:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995e:	f7fa fae5 	bl	8003f2c <HAL_GetTick>
 8009962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009964:	e008      	b.n	8009978 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009966:	f7fa fae1 	bl	8003f2c <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b64      	cmp	r3, #100	; 0x64
 8009972:	d901      	bls.n	8009978 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e3aa      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f0      	beq.n	8009966 <HAL_RCC_OscConfig+0xe6>
 8009984:	e014      	b.n	80099b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009986:	f7fa fad1 	bl	8003f2c <HAL_GetTick>
 800998a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800998c:	e008      	b.n	80099a0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800998e:	f7fa facd 	bl	8003f2c <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b64      	cmp	r3, #100	; 0x64
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e396      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099a0:	4b59      	ldr	r3, [pc, #356]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f0      	bne.n	800998e <HAL_RCC_OscConfig+0x10e>
 80099ac:	e000      	b.n	80099b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80cb 	beq.w	8009b54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099be:	4b52      	ldr	r3, [pc, #328]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099c8:	4b4f      	ldr	r3, [pc, #316]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <HAL_RCC_OscConfig+0x164>
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2b18      	cmp	r3, #24
 80099d8:	d156      	bne.n	8009a88 <HAL_RCC_OscConfig+0x208>
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	f003 0303 	and.w	r3, r3, #3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d151      	bne.n	8009a88 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099e4:	4b48      	ldr	r3, [pc, #288]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <HAL_RCC_OscConfig+0x17c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e368      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099fc:	4b42      	ldr	r3, [pc, #264]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f023 0219 	bic.w	r2, r3, #25
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	493f      	ldr	r1, [pc, #252]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a0e:	f7fa fa8d 	bl	8003f2c <HAL_GetTick>
 8009a12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a14:	e008      	b.n	8009a28 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a16:	f7fa fa89 	bl	8003f2c <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d901      	bls.n	8009a28 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e352      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a28:	4b37      	ldr	r3, [pc, #220]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0f0      	beq.n	8009a16 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a34:	f7fa faaa 	bl	8003f8c <HAL_GetREVID>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d817      	bhi.n	8009a72 <HAL_RCC_OscConfig+0x1f2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d108      	bne.n	8009a5c <HAL_RCC_OscConfig+0x1dc>
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a52:	4a2d      	ldr	r2, [pc, #180]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a5a:	e07b      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5c:	4b2a      	ldr	r3, [pc, #168]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	031b      	lsls	r3, r3, #12
 8009a6a:	4927      	ldr	r1, [pc, #156]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a70:	e070      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a72:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	061b      	lsls	r3, r3, #24
 8009a80:	4921      	ldr	r1, [pc, #132]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a86:	e065      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d048      	beq.n	8009b22 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a90:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f023 0219 	bic.w	r2, r3, #25
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	491a      	ldr	r1, [pc, #104]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa2:	f7fa fa43 	bl	8003f2c <HAL_GetTick>
 8009aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa8:	e008      	b.n	8009abc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009aaa:	f7fa fa3f 	bl	8003f2c <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d901      	bls.n	8009abc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e308      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009abc:	4b12      	ldr	r3, [pc, #72]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0f0      	beq.n	8009aaa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ac8:	f7fa fa60 	bl	8003f8c <HAL_GetREVID>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d81a      	bhi.n	8009b0c <HAL_RCC_OscConfig+0x28c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	d108      	bne.n	8009af0 <HAL_RCC_OscConfig+0x270>
 8009ade:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ae6:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aec:	6053      	str	r3, [r2, #4]
 8009aee:	e031      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	031b      	lsls	r3, r3, #12
 8009afe:	4902      	ldr	r1, [pc, #8]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	604b      	str	r3, [r1, #4]
 8009b04:	e026      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	4b9a      	ldr	r3, [pc, #616]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	061b      	lsls	r3, r3, #24
 8009b1a:	4997      	ldr	r1, [pc, #604]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	604b      	str	r3, [r1, #4]
 8009b20:	e018      	b.n	8009b54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b22:	4b95      	ldr	r3, [pc, #596]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a94      	ldr	r2, [pc, #592]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b28:	f023 0301 	bic.w	r3, r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2e:	f7fa f9fd 	bl	8003f2c <HAL_GetTick>
 8009b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b36:	f7fa f9f9 	bl	8003f2c <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e2c2      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b48:	4b8b      	ldr	r3, [pc, #556]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f0      	bne.n	8009b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 80a9 	beq.w	8009cb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b62:	4b85      	ldr	r3, [pc, #532]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b6c:	4b82      	ldr	r3, [pc, #520]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d007      	beq.n	8009b88 <HAL_RCC_OscConfig+0x308>
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b18      	cmp	r3, #24
 8009b7c:	d13a      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x374>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d135      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b88:	4b7b      	ldr	r3, [pc, #492]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x320>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	2b80      	cmp	r3, #128	; 0x80
 8009b9a:	d001      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e296      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ba0:	f7fa f9f4 	bl	8003f8c <HAL_GetREVID>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d817      	bhi.n	8009bde <HAL_RCC_OscConfig+0x35e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d108      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x348>
 8009bb6:	4b70      	ldr	r3, [pc, #448]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009bbe:	4a6e      	ldr	r2, [pc, #440]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bc6:	e075      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bc8:	4b6b      	ldr	r3, [pc, #428]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	069b      	lsls	r3, r3, #26
 8009bd6:	4968      	ldr	r1, [pc, #416]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bdc:	e06a      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bde:	4b66      	ldr	r3, [pc, #408]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	061b      	lsls	r3, r3, #24
 8009bec:	4962      	ldr	r1, [pc, #392]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bf2:	e05f      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d042      	beq.n	8009c82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bfc:	4b5e      	ldr	r3, [pc, #376]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a5d      	ldr	r2, [pc, #372]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c08:	f7fa f990 	bl	8003f2c <HAL_GetTick>
 8009c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c0e:	e008      	b.n	8009c22 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c10:	f7fa f98c 	bl	8003f2c <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e255      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c22:	4b55      	ldr	r3, [pc, #340]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f0      	beq.n	8009c10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c2e:	f7fa f9ad 	bl	8003f8c <HAL_GetREVID>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d817      	bhi.n	8009c6c <HAL_RCC_OscConfig+0x3ec>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d108      	bne.n	8009c56 <HAL_RCC_OscConfig+0x3d6>
 8009c44:	4b4c      	ldr	r3, [pc, #304]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c4c:	4a4a      	ldr	r2, [pc, #296]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c52:	6053      	str	r3, [r2, #4]
 8009c54:	e02e      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
 8009c56:	4b48      	ldr	r3, [pc, #288]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	069b      	lsls	r3, r3, #26
 8009c64:	4944      	ldr	r1, [pc, #272]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	604b      	str	r3, [r1, #4]
 8009c6a:	e023      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
 8009c6c:	4b42      	ldr	r3, [pc, #264]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	061b      	lsls	r3, r3, #24
 8009c7a:	493f      	ldr	r1, [pc, #252]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60cb      	str	r3, [r1, #12]
 8009c80:	e018      	b.n	8009cb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c82:	4b3d      	ldr	r3, [pc, #244]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a3c      	ldr	r2, [pc, #240]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8e:	f7fa f94d 	bl	8003f2c <HAL_GetTick>
 8009c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c94:	e008      	b.n	8009ca8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c96:	f7fa f949 	bl	8003f2c <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e212      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ca8:	4b33      	ldr	r3, [pc, #204]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1f0      	bne.n	8009c96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d036      	beq.n	8009d2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d019      	beq.n	8009cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cc8:	4b2b      	ldr	r3, [pc, #172]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ccc:	4a2a      	ldr	r2, [pc, #168]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd4:	f7fa f92a 	bl	8003f2c <HAL_GetTick>
 8009cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cda:	e008      	b.n	8009cee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cdc:	f7fa f926 	bl	8003f2c <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d901      	bls.n	8009cee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e1ef      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cee:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f0      	beq.n	8009cdc <HAL_RCC_OscConfig+0x45c>
 8009cfa:	e018      	b.n	8009d2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d00:	4a1d      	ldr	r2, [pc, #116]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d08:	f7fa f910 	bl	8003f2c <HAL_GetTick>
 8009d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d10:	f7fa f90c 	bl	8003f2c <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e1d5      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d22:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1f0      	bne.n	8009d10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d039      	beq.n	8009dae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01c      	beq.n	8009d7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d42:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a0c      	ldr	r2, [pc, #48]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d4e:	f7fa f8ed 	bl	8003f2c <HAL_GetTick>
 8009d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d54:	e008      	b.n	8009d68 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d56:	f7fa f8e9 	bl	8003f2c <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d901      	bls.n	8009d68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e1b2      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d68:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <HAL_RCC_OscConfig+0x4f8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0f0      	beq.n	8009d56 <HAL_RCC_OscConfig+0x4d6>
 8009d74:	e01b      	b.n	8009dae <HAL_RCC_OscConfig+0x52e>
 8009d76:	bf00      	nop
 8009d78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d7c:	4b9b      	ldr	r3, [pc, #620]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a9a      	ldr	r2, [pc, #616]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d88:	f7fa f8d0 	bl	8003f2c <HAL_GetTick>
 8009d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d8e:	e008      	b.n	8009da2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d90:	f7fa f8cc 	bl	8003f2c <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d901      	bls.n	8009da2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e195      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009da2:	4b92      	ldr	r3, [pc, #584]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f0      	bne.n	8009d90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 8081 	beq.w	8009ebe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009dbc:	4b8c      	ldr	r3, [pc, #560]	; (8009ff0 <HAL_RCC_OscConfig+0x770>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a8b      	ldr	r2, [pc, #556]	; (8009ff0 <HAL_RCC_OscConfig+0x770>)
 8009dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dc8:	f7fa f8b0 	bl	8003f2c <HAL_GetTick>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009dd0:	f7fa f8ac 	bl	8003f2c <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b64      	cmp	r3, #100	; 0x64
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e175      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009de2:	4b83      	ldr	r3, [pc, #524]	; (8009ff0 <HAL_RCC_OscConfig+0x770>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d106      	bne.n	8009e04 <HAL_RCC_OscConfig+0x584>
 8009df6:	4b7d      	ldr	r3, [pc, #500]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	4a7c      	ldr	r2, [pc, #496]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	6713      	str	r3, [r2, #112]	; 0x70
 8009e02:	e02d      	b.n	8009e60 <HAL_RCC_OscConfig+0x5e0>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10c      	bne.n	8009e26 <HAL_RCC_OscConfig+0x5a6>
 8009e0c:	4b77      	ldr	r3, [pc, #476]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e10:	4a76      	ldr	r2, [pc, #472]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e12:	f023 0301 	bic.w	r3, r3, #1
 8009e16:	6713      	str	r3, [r2, #112]	; 0x70
 8009e18:	4b74      	ldr	r3, [pc, #464]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1c:	4a73      	ldr	r2, [pc, #460]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e1e:	f023 0304 	bic.w	r3, r3, #4
 8009e22:	6713      	str	r3, [r2, #112]	; 0x70
 8009e24:	e01c      	b.n	8009e60 <HAL_RCC_OscConfig+0x5e0>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d10c      	bne.n	8009e48 <HAL_RCC_OscConfig+0x5c8>
 8009e2e:	4b6f      	ldr	r3, [pc, #444]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	4a6e      	ldr	r2, [pc, #440]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e34:	f043 0304 	orr.w	r3, r3, #4
 8009e38:	6713      	str	r3, [r2, #112]	; 0x70
 8009e3a:	4b6c      	ldr	r3, [pc, #432]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3e:	4a6b      	ldr	r2, [pc, #428]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e40:	f043 0301 	orr.w	r3, r3, #1
 8009e44:	6713      	str	r3, [r2, #112]	; 0x70
 8009e46:	e00b      	b.n	8009e60 <HAL_RCC_OscConfig+0x5e0>
 8009e48:	4b68      	ldr	r3, [pc, #416]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4c:	4a67      	ldr	r2, [pc, #412]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	6713      	str	r3, [r2, #112]	; 0x70
 8009e54:	4b65      	ldr	r3, [pc, #404]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e58:	4a64      	ldr	r2, [pc, #400]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e5a:	f023 0304 	bic.w	r3, r3, #4
 8009e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d015      	beq.n	8009e94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e68:	f7fa f860 	bl	8003f2c <HAL_GetTick>
 8009e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e6e:	e00a      	b.n	8009e86 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e70:	f7fa f85c 	bl	8003f2c <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e123      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e86:	4b59      	ldr	r3, [pc, #356]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0ee      	beq.n	8009e70 <HAL_RCC_OscConfig+0x5f0>
 8009e92:	e014      	b.n	8009ebe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e94:	f7fa f84a 	bl	8003f2c <HAL_GetTick>
 8009e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e9a:	e00a      	b.n	8009eb2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e9c:	f7fa f846 	bl	8003f2c <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e10d      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eb2:	4b4e      	ldr	r3, [pc, #312]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1ee      	bne.n	8009e9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 8102 	beq.w	800a0cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ec8:	4b48      	ldr	r3, [pc, #288]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ed0:	2b18      	cmp	r3, #24
 8009ed2:	f000 80bd 	beq.w	800a050 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	f040 809e 	bne.w	800a01c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ee0:	4b42      	ldr	r3, [pc, #264]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a41      	ldr	r2, [pc, #260]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eec:	f7fa f81e 	bl	8003f2c <HAL_GetTick>
 8009ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ef4:	f7fa f81a 	bl	8003f2c <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e0e3      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f06:	4b39      	ldr	r3, [pc, #228]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f0      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f12:	4b36      	ldr	r3, [pc, #216]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f16:	4b37      	ldr	r3, [pc, #220]	; (8009ff4 <HAL_RCC_OscConfig+0x774>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f22:	0112      	lsls	r2, r2, #4
 8009f24:	430a      	orrs	r2, r1
 8009f26:	4931      	ldr	r1, [pc, #196]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f30:	3b01      	subs	r3, #1
 8009f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	025b      	lsls	r3, r3, #9
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	431a      	orrs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	3b01      	subs	r3, #1
 8009f48:	041b      	lsls	r3, r3, #16
 8009f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f54:	3b01      	subs	r3, #1
 8009f56:	061b      	lsls	r3, r3, #24
 8009f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f5c:	4923      	ldr	r1, [pc, #140]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009f62:	4b22      	ldr	r3, [pc, #136]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	4a21      	ldr	r2, [pc, #132]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f6e:	4b1f      	ldr	r3, [pc, #124]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f72:	4b21      	ldr	r3, [pc, #132]	; (8009ff8 <HAL_RCC_OscConfig+0x778>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f7a:	00d2      	lsls	r2, r2, #3
 8009f7c:	491b      	ldr	r1, [pc, #108]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f82:	4b1a      	ldr	r3, [pc, #104]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	f023 020c 	bic.w	r2, r3, #12
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	4917      	ldr	r1, [pc, #92]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f94:	4b15      	ldr	r3, [pc, #84]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	f023 0202 	bic.w	r2, r3, #2
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa0:	4912      	ldr	r1, [pc, #72]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fa6:	4b11      	ldr	r3, [pc, #68]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	4a0d      	ldr	r2, [pc, #52]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009fca:	4b08      	ldr	r3, [pc, #32]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	4a07      	ldr	r2, [pc, #28]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fd0:	f043 0301 	orr.w	r3, r3, #1
 8009fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a04      	ldr	r2, [pc, #16]	; (8009fec <HAL_RCC_OscConfig+0x76c>)
 8009fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe2:	f7f9 ffa3 	bl	8003f2c <HAL_GetTick>
 8009fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fe8:	e011      	b.n	800a00e <HAL_RCC_OscConfig+0x78e>
 8009fea:	bf00      	nop
 8009fec:	58024400 	.word	0x58024400
 8009ff0:	58024800 	.word	0x58024800
 8009ff4:	fffffc0c 	.word	0xfffffc0c
 8009ff8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ffc:	f7f9 ff96 	bl	8003f2c <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e05f      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a00e:	4b32      	ldr	r3, [pc, #200]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0f0      	beq.n	8009ffc <HAL_RCC_OscConfig+0x77c>
 800a01a:	e057      	b.n	800a0cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01c:	4b2e      	ldr	r3, [pc, #184]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a2d      	ldr	r2, [pc, #180]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a028:	f7f9 ff80 	bl	8003f2c <HAL_GetTick>
 800a02c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a030:	f7f9 ff7c 	bl	8003f2c <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e045      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a042:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f0      	bne.n	800a030 <HAL_RCC_OscConfig+0x7b0>
 800a04e:	e03d      	b.n	800a0cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a050:	4b21      	ldr	r3, [pc, #132]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a056:	4b20      	ldr	r3, [pc, #128]	; (800a0d8 <HAL_RCC_OscConfig+0x858>)
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b01      	cmp	r3, #1
 800a062:	d031      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f003 0203 	and.w	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a06e:	429a      	cmp	r2, r3
 800a070:	d12a      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	091b      	lsrs	r3, r3, #4
 800a076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a07e:	429a      	cmp	r2, r3
 800a080:	d122      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a08e:	429a      	cmp	r2, r3
 800a090:	d11a      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	0a5b      	lsrs	r3, r3, #9
 800a096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d111      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d108      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	0e1b      	lsrs	r3, r3, #24
 800a0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d001      	beq.n	800a0cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3730      	adds	r7, #48	; 0x30
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	58024400 	.word	0x58024400

0800a0dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e19c      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0f0:	4b8a      	ldr	r3, [pc, #552]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d910      	bls.n	800a120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0fe:	4b87      	ldr	r3, [pc, #540]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f023 020f 	bic.w	r2, r3, #15
 800a106:	4985      	ldr	r1, [pc, #532]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a10e:	4b83      	ldr	r3, [pc, #524]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d001      	beq.n	800a120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e184      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d010      	beq.n	800a14e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691a      	ldr	r2, [r3, #16]
 800a130:	4b7b      	ldr	r3, [pc, #492]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a138:	429a      	cmp	r2, r3
 800a13a:	d908      	bls.n	800a14e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a13c:	4b78      	ldr	r3, [pc, #480]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	4975      	ldr	r1, [pc, #468]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0308 	and.w	r3, r3, #8
 800a156:	2b00      	cmp	r3, #0
 800a158:	d010      	beq.n	800a17c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	695a      	ldr	r2, [r3, #20]
 800a15e:	4b70      	ldr	r3, [pc, #448]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a166:	429a      	cmp	r2, r3
 800a168:	d908      	bls.n	800a17c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a16a:	4b6d      	ldr	r3, [pc, #436]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	496a      	ldr	r1, [pc, #424]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0310 	and.w	r3, r3, #16
 800a184:	2b00      	cmp	r3, #0
 800a186:	d010      	beq.n	800a1aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699a      	ldr	r2, [r3, #24]
 800a18c:	4b64      	ldr	r3, [pc, #400]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a194:	429a      	cmp	r2, r3
 800a196:	d908      	bls.n	800a1aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a198:	4b61      	ldr	r3, [pc, #388]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	495e      	ldr	r1, [pc, #376]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d010      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69da      	ldr	r2, [r3, #28]
 800a1ba:	4b59      	ldr	r3, [pc, #356]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d908      	bls.n	800a1d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a1c6:	4b56      	ldr	r3, [pc, #344]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	4953      	ldr	r1, [pc, #332]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0302 	and.w	r3, r3, #2
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d010      	beq.n	800a206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	4b4d      	ldr	r3, [pc, #308]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f003 030f 	and.w	r3, r3, #15
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d908      	bls.n	800a206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1f4:	4b4a      	ldr	r3, [pc, #296]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	f023 020f 	bic.w	r2, r3, #15
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	4947      	ldr	r1, [pc, #284]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a202:	4313      	orrs	r3, r2
 800a204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d055      	beq.n	800a2be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a212:	4b43      	ldr	r3, [pc, #268]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	4940      	ldr	r1, [pc, #256]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a220:	4313      	orrs	r3, r2
 800a222:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d107      	bne.n	800a23c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a22c:	4b3c      	ldr	r3, [pc, #240]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d121      	bne.n	800a27c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e0f6      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d107      	bne.n	800a254 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a244:	4b36      	ldr	r3, [pc, #216]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d115      	bne.n	800a27c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e0ea      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d107      	bne.n	800a26c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a25c:	4b30      	ldr	r3, [pc, #192]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e0de      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a26c:	4b2c      	ldr	r3, [pc, #176]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e0d6      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a27c:	4b28      	ldr	r3, [pc, #160]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	f023 0207 	bic.w	r2, r3, #7
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	4925      	ldr	r1, [pc, #148]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a28e:	f7f9 fe4d 	bl	8003f2c <HAL_GetTick>
 800a292:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a294:	e00a      	b.n	800a2ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a296:	f7f9 fe49 	bl	8003f2c <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d901      	bls.n	800a2ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e0be      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ac:	4b1c      	ldr	r3, [pc, #112]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d1eb      	bne.n	800a296 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d010      	beq.n	800a2ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	4b14      	ldr	r3, [pc, #80]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d208      	bcs.n	800a2ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2da:	4b11      	ldr	r3, [pc, #68]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	f023 020f 	bic.w	r2, r3, #15
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	490e      	ldr	r1, [pc, #56]	; (800a320 <HAL_RCC_ClockConfig+0x244>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d214      	bcs.n	800a324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2fa:	4b08      	ldr	r3, [pc, #32]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f023 020f 	bic.w	r2, r3, #15
 800a302:	4906      	ldr	r1, [pc, #24]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	4313      	orrs	r3, r2
 800a308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a30a:	4b04      	ldr	r3, [pc, #16]	; (800a31c <HAL_RCC_ClockConfig+0x240>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	429a      	cmp	r2, r3
 800a316:	d005      	beq.n	800a324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e086      	b.n	800a42a <HAL_RCC_ClockConfig+0x34e>
 800a31c:	52002000 	.word	0x52002000
 800a320:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d010      	beq.n	800a352 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	4b3f      	ldr	r3, [pc, #252]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d208      	bcs.n	800a352 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a340:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	4939      	ldr	r1, [pc, #228]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0308 	and.w	r3, r3, #8
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d010      	beq.n	800a380 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	4b34      	ldr	r3, [pc, #208]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d208      	bcs.n	800a380 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a36e:	4b31      	ldr	r3, [pc, #196]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	492e      	ldr	r1, [pc, #184]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a37c:	4313      	orrs	r3, r2
 800a37e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0310 	and.w	r3, r3, #16
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d010      	beq.n	800a3ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699a      	ldr	r2, [r3, #24]
 800a390:	4b28      	ldr	r3, [pc, #160]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a398:	429a      	cmp	r2, r3
 800a39a:	d208      	bcs.n	800a3ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a39c:	4b25      	ldr	r3, [pc, #148]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	4922      	ldr	r1, [pc, #136]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d010      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69da      	ldr	r2, [r3, #28]
 800a3be:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d208      	bcs.n	800a3dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a3ca:	4b1a      	ldr	r3, [pc, #104]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	4917      	ldr	r1, [pc, #92]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a3dc:	f000 f834 	bl	800a448 <HAL_RCC_GetSysClockFreq>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	4912      	ldr	r1, [pc, #72]	; (800a438 <HAL_RCC_ClockConfig+0x35c>)
 800a3ee:	5ccb      	ldrb	r3, [r1, r3]
 800a3f0:	f003 031f 	and.w	r3, r3, #31
 800a3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3fa:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <HAL_RCC_ClockConfig+0x358>)
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	f003 030f 	and.w	r3, r3, #15
 800a402:	4a0d      	ldr	r2, [pc, #52]	; (800a438 <HAL_RCC_ClockConfig+0x35c>)
 800a404:	5cd3      	ldrb	r3, [r2, r3]
 800a406:	f003 031f 	and.w	r3, r3, #31
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <HAL_RCC_ClockConfig+0x360>)
 800a412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a414:	4a0a      	ldr	r2, [pc, #40]	; (800a440 <HAL_RCC_ClockConfig+0x364>)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <HAL_RCC_ClockConfig+0x368>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f9 fd3a 	bl	8003e98 <HAL_InitTick>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
 800a438:	08011d5c 	.word	0x08011d5c
 800a43c:	24000030 	.word	0x24000030
 800a440:	2400002c 	.word	0x2400002c
 800a444:	24000034 	.word	0x24000034

0800a448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a448:	b480      	push	{r7}
 800a44a:	b089      	sub	sp, #36	; 0x24
 800a44c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a44e:	4bb3      	ldr	r3, [pc, #716]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a456:	2b18      	cmp	r3, #24
 800a458:	f200 8155 	bhi.w	800a706 <HAL_RCC_GetSysClockFreq+0x2be>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a4c9 	.word	0x0800a4c9
 800a468:	0800a707 	.word	0x0800a707
 800a46c:	0800a707 	.word	0x0800a707
 800a470:	0800a707 	.word	0x0800a707
 800a474:	0800a707 	.word	0x0800a707
 800a478:	0800a707 	.word	0x0800a707
 800a47c:	0800a707 	.word	0x0800a707
 800a480:	0800a707 	.word	0x0800a707
 800a484:	0800a4ef 	.word	0x0800a4ef
 800a488:	0800a707 	.word	0x0800a707
 800a48c:	0800a707 	.word	0x0800a707
 800a490:	0800a707 	.word	0x0800a707
 800a494:	0800a707 	.word	0x0800a707
 800a498:	0800a707 	.word	0x0800a707
 800a49c:	0800a707 	.word	0x0800a707
 800a4a0:	0800a707 	.word	0x0800a707
 800a4a4:	0800a4f5 	.word	0x0800a4f5
 800a4a8:	0800a707 	.word	0x0800a707
 800a4ac:	0800a707 	.word	0x0800a707
 800a4b0:	0800a707 	.word	0x0800a707
 800a4b4:	0800a707 	.word	0x0800a707
 800a4b8:	0800a707 	.word	0x0800a707
 800a4bc:	0800a707 	.word	0x0800a707
 800a4c0:	0800a707 	.word	0x0800a707
 800a4c4:	0800a4fb 	.word	0x0800a4fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c8:	4b94      	ldr	r3, [pc, #592]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d009      	beq.n	800a4e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4d4:	4b91      	ldr	r3, [pc, #580]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	08db      	lsrs	r3, r3, #3
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	4a90      	ldr	r2, [pc, #576]	; (800a720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a4e6:	e111      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a4e8:	4b8d      	ldr	r3, [pc, #564]	; (800a720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4ea:	61bb      	str	r3, [r7, #24]
    break;
 800a4ec:	e10e      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a4ee:	4b8d      	ldr	r3, [pc, #564]	; (800a724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4f0:	61bb      	str	r3, [r7, #24]
    break;
 800a4f2:	e10b      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a4f4:	4b8c      	ldr	r3, [pc, #560]	; (800a728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a4f6:	61bb      	str	r3, [r7, #24]
    break;
 800a4f8:	e108      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4fa:	4b88      	ldr	r3, [pc, #544]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a504:	4b85      	ldr	r3, [pc, #532]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	091b      	lsrs	r3, r3, #4
 800a50a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a50e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a510:	4b82      	ldr	r3, [pc, #520]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a51a:	4b80      	ldr	r3, [pc, #512]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	08db      	lsrs	r3, r3, #3
 800a520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	fb02 f303 	mul.w	r3, r2, r3
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a532:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80e1 	beq.w	800a700 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b02      	cmp	r3, #2
 800a542:	f000 8083 	beq.w	800a64c <HAL_RCC_GetSysClockFreq+0x204>
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	f200 80a1 	bhi.w	800a690 <HAL_RCC_GetSysClockFreq+0x248>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <HAL_RCC_GetSysClockFreq+0x114>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d056      	beq.n	800a608 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a55a:	e099      	b.n	800a690 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a55c:	4b6f      	ldr	r3, [pc, #444]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0320 	and.w	r3, r3, #32
 800a564:	2b00      	cmp	r3, #0
 800a566:	d02d      	beq.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a568:	4b6c      	ldr	r3, [pc, #432]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	08db      	lsrs	r3, r3, #3
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	4a6b      	ldr	r2, [pc, #428]	; (800a720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a574:	fa22 f303 	lsr.w	r3, r2, r3
 800a578:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a592:	4b62      	ldr	r3, [pc, #392]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a72c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a5c2:	e087      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a730 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b51      	ldr	r3, [pc, #324]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a72c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a606:	e065      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a612:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61a:	4b40      	ldr	r3, [pc, #256]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a62e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a72c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a64a:	e043      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a738 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a65e:	4b2f      	ldr	r3, [pc, #188]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a72c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a68e:	e021      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a2:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a72c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a6d4:	4b11      	ldr	r3, [pc, #68]	; (800a71c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d8:	0a5b      	lsrs	r3, r3, #9
 800a6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6de:	3301      	adds	r3, #1
 800a6e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f8:	ee17 3a90 	vmov	r3, s15
 800a6fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a6fe:	e005      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	61bb      	str	r3, [r7, #24]
    break;
 800a704:	e002      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a708:	61bb      	str	r3, [r7, #24]
    break;
 800a70a:	bf00      	nop
  }

  return sysclockfreq;
 800a70c:	69bb      	ldr	r3, [r7, #24]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3724      	adds	r7, #36	; 0x24
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
 800a720:	03d09000 	.word	0x03d09000
 800a724:	003d0900 	.word	0x003d0900
 800a728:	02625a00 	.word	0x02625a00
 800a72c:	46000000 	.word	0x46000000
 800a730:	4c742400 	.word	0x4c742400
 800a734:	4a742400 	.word	0x4a742400
 800a738:	4c189680 	.word	0x4c189680

0800a73c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a742:	f7ff fe81 	bl	800a448 <HAL_RCC_GetSysClockFreq>
 800a746:	4602      	mov	r2, r0
 800a748:	4b10      	ldr	r3, [pc, #64]	; (800a78c <HAL_RCC_GetHCLKFreq+0x50>)
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	490f      	ldr	r1, [pc, #60]	; (800a790 <HAL_RCC_GetHCLKFreq+0x54>)
 800a754:	5ccb      	ldrb	r3, [r1, r3]
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <HAL_RCC_GetHCLKFreq+0x50>)
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f003 030f 	and.w	r3, r3, #15
 800a768:	4a09      	ldr	r2, [pc, #36]	; (800a790 <HAL_RCC_GetHCLKFreq+0x54>)
 800a76a:	5cd3      	ldrb	r3, [r2, r3]
 800a76c:	f003 031f 	and.w	r3, r3, #31
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	fa22 f303 	lsr.w	r3, r2, r3
 800a776:	4a07      	ldr	r2, [pc, #28]	; (800a794 <HAL_RCC_GetHCLKFreq+0x58>)
 800a778:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a77a:	4a07      	ldr	r2, [pc, #28]	; (800a798 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <HAL_RCC_GetHCLKFreq+0x58>)
 800a782:	681b      	ldr	r3, [r3, #0]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	58024400 	.word	0x58024400
 800a790:	08011d5c 	.word	0x08011d5c
 800a794:	24000030 	.word	0x24000030
 800a798:	2400002c 	.word	0x2400002c

0800a79c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7a0:	f7ff ffcc 	bl	800a73c <HAL_RCC_GetHCLKFreq>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	091b      	lsrs	r3, r3, #4
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	4904      	ldr	r1, [pc, #16]	; (800a7c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7b2:	5ccb      	ldrb	r3, [r1, r3]
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	08011d5c 	.word	0x08011d5c

0800a7c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a7cc:	f7ff ffb6 	bl	800a73c <HAL_RCC_GetHCLKFreq>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	0a1b      	lsrs	r3, r3, #8
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	4904      	ldr	r1, [pc, #16]	; (800a7f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7de:	5ccb      	ldrb	r3, [r1, r3]
 800a7e0:	f003 031f 	and.w	r3, r3, #31
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	08011d5c 	.word	0x08011d5c

0800a7f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a800:	2300      	movs	r3, #0
 800a802:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d03f      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a818:	d02a      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a81a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a81e:	d824      	bhi.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a824:	d018      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a82a:	d81e      	bhi.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a834:	d007      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a836:	e018      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a838:	4ba3      	ldr	r3, [pc, #652]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	4aa2      	ldr	r2, [pc, #648]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a83e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a844:	e015      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3304      	adds	r3, #4
 800a84a:	2102      	movs	r1, #2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f001 f9d5 	bl	800bbfc <RCCEx_PLL2_Config>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a856:	e00c      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3324      	adds	r3, #36	; 0x24
 800a85c:	2102      	movs	r1, #2
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fa7e 	bl	800bd60 <RCCEx_PLL3_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a868:	e003      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	75fb      	strb	r3, [r7, #23]
      break;
 800a86e:	e000      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a870:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d109      	bne.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a878:	4b93      	ldr	r3, [pc, #588]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a884:	4990      	ldr	r1, [pc, #576]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a886:	4313      	orrs	r3, r2
 800a888:	650b      	str	r3, [r1, #80]	; 0x50
 800a88a:	e001      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d03d      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d826      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8cf 	.word	0x0800a8cf
 800a8b4:	0800a8e1 	.word	0x0800a8e1
 800a8b8:	0800a8f9 	.word	0x0800a8f9
 800a8bc:	0800a8f9 	.word	0x0800a8f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c0:	4b81      	ldr	r3, [pc, #516]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	4a80      	ldr	r2, [pc, #512]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8cc:	e015      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 f991 	bl	800bbfc <RCCEx_PLL2_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8de:	e00c      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3324      	adds	r3, #36	; 0x24
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 fa3a 	bl	800bd60 <RCCEx_PLL3_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8f0:	e003      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f6:	e000      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a8f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d109      	bne.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a900:	4b71      	ldr	r3, [pc, #452]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a904:	f023 0207 	bic.w	r2, r3, #7
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90c:	496e      	ldr	r1, [pc, #440]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	650b      	str	r3, [r1, #80]	; 0x50
 800a912:	e001      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a920:	2b00      	cmp	r3, #0
 800a922:	d042      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92c:	d02b      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	d825      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a934:	2bc0      	cmp	r3, #192	; 0xc0
 800a936:	d028      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a938:	2bc0      	cmp	r3, #192	; 0xc0
 800a93a:	d821      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a93c:	2b80      	cmp	r3, #128	; 0x80
 800a93e:	d016      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a940:	2b80      	cmp	r3, #128	; 0x80
 800a942:	d81d      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a948:	2b40      	cmp	r3, #64	; 0x40
 800a94a:	d007      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a94c:	e018      	b.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94e:	4b5e      	ldr	r3, [pc, #376]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	4a5d      	ldr	r2, [pc, #372]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a95a:	e017      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3304      	adds	r3, #4
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f001 f94a 	bl	800bbfc <RCCEx_PLL2_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a96c:	e00e      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	2100      	movs	r1, #0
 800a974:	4618      	mov	r0, r3
 800a976:	f001 f9f3 	bl	800bd60 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a97e:	e005      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	75fb      	strb	r3, [r7, #23]
      break;
 800a984:	e002      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a986:	bf00      	nop
 800a988:	e000      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a98a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d109      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a992:	4b4d      	ldr	r3, [pc, #308]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a996:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99e:	494a      	ldr	r1, [pc, #296]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	650b      	str	r3, [r1, #80]	; 0x50
 800a9a4:	e001      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d049      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9c0:	d030      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a9c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9c6:	d82a      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9cc:	d02c      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a9ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9d2:	d824      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9d8:	d018      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a9da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9de:	d81e      	bhi.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e8:	d007      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9ea:	e018      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ec:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	4a35      	ldr	r2, [pc, #212]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9f8:	e017      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 f8fb 	bl	800bbfc <RCCEx_PLL2_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa0a:	e00e      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3324      	adds	r3, #36	; 0x24
 800aa10:	2100      	movs	r1, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 f9a4 	bl	800bd60 <RCCEx_PLL3_Config>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa1c:	e005      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	75fb      	strb	r3, [r7, #23]
      break;
 800aa22:	e002      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa30:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa3e:	4922      	ldr	r1, [pc, #136]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	658b      	str	r3, [r1, #88]	; 0x58
 800aa44:	e001      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d04b      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa60:	d030      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aa62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa66:	d82a      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa6c:	d02e      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800aa6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa72:	d824      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa78:	d018      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aa7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa7e:	d81e      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa88:	d007      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aa8a:	e018      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa98:	e019      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 f8ab 	bl	800bbfc <RCCEx_PLL2_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aaaa:	e010      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3324      	adds	r3, #36	; 0x24
 800aab0:	2100      	movs	r1, #0
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f954 	bl	800bd60 <RCCEx_PLL3_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aabc:	e007      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
      break;
 800aac2:	e004      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800aac4:	bf00      	nop
 800aac6:	e002      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aac8:	58024400 	.word	0x58024400
      break;
 800aacc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aad4:	4b99      	ldr	r3, [pc, #612]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aae2:	4996      	ldr	r1, [pc, #600]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	658b      	str	r3, [r1, #88]	; 0x58
 800aae8:	e001      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d032      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aafe:	2b30      	cmp	r3, #48	; 0x30
 800ab00:	d01c      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ab02:	2b30      	cmp	r3, #48	; 0x30
 800ab04:	d817      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d00c      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	d813      	bhi.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d016      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ab12:	2b10      	cmp	r3, #16
 800ab14:	d10f      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab16:	4b89      	ldr	r3, [pc, #548]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a88      	ldr	r2, [pc, #544]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab22:	e00e      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	2102      	movs	r1, #2
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 f866 	bl	800bbfc <RCCEx_PLL2_Config>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab34:	e005      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	75fb      	strb	r3, [r7, #23]
      break;
 800ab3a:	e002      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ab3c:	bf00      	nop
 800ab3e:	e000      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ab40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d109      	bne.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab48:	4b7c      	ldr	r3, [pc, #496]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab54:	4979      	ldr	r1, [pc, #484]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab5a:	e001      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d047      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab74:	d030      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ab76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab7a:	d82a      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ab7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab80:	d02c      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ab82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab86:	d824      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ab88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab8c:	d018      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800ab8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab92:	d81e      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ab98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab9c:	d007      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800ab9e:	e018      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba0:	4b66      	ldr	r3, [pc, #408]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba4:	4a65      	ldr	r2, [pc, #404]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abac:	e017      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3304      	adds	r3, #4
 800abb2:	2100      	movs	r1, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f001 f821 	bl	800bbfc <RCCEx_PLL2_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abbe:	e00e      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	2100      	movs	r1, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f8ca 	bl	800bd60 <RCCEx_PLL3_Config>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abd0:	e005      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
      break;
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800abd8:	bf00      	nop
 800abda:	e000      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800abdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abe4:	4b55      	ldr	r3, [pc, #340]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf0:	4952      	ldr	r1, [pc, #328]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	650b      	str	r3, [r1, #80]	; 0x50
 800abf6:	e001      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d049      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac10:	d02e      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ac12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac16:	d828      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ac18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac1c:	d02a      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ac1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac22:	d822      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ac24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac28:	d026      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ac2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac2e:	d81c      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ac30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac34:	d010      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ac36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3a:	d816      	bhi.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01d      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ac40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac44:	d111      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 ffd5 	bl	800bbfc <RCCEx_PLL2_Config>
 800ac52:	4603      	mov	r3, r0
 800ac54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac56:	e012      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3324      	adds	r3, #36	; 0x24
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 f87e 	bl	800bd60 <RCCEx_PLL3_Config>
 800ac64:	4603      	mov	r3, r0
 800ac66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac68:	e009      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac6e:	e006      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ac70:	bf00      	nop
 800ac72:	e004      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ac74:	bf00      	nop
 800ac76:	e002      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ac78:	bf00      	nop
 800ac7a:	e000      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ac7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d109      	bne.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac84:	4b2d      	ldr	r3, [pc, #180]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac90:	492a      	ldr	r1, [pc, #168]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	650b      	str	r3, [r1, #80]	; 0x50
 800ac96:	e001      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d04d      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acb2:	d02e      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800acb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acb8:	d828      	bhi.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800acba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acbe:	d02a      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800acc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc4:	d822      	bhi.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800acc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acca:	d026      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800accc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acd0:	d81c      	bhi.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800acd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd6:	d010      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800acd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acdc:	d816      	bhi.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01d      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ace2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ace6:	d111      	bne.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3304      	adds	r3, #4
 800acec:	2101      	movs	r1, #1
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 ff84 	bl	800bbfc <RCCEx_PLL2_Config>
 800acf4:	4603      	mov	r3, r0
 800acf6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800acf8:	e012      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3324      	adds	r3, #36	; 0x24
 800acfe:	2101      	movs	r1, #1
 800ad00:	4618      	mov	r0, r3
 800ad02:	f001 f82d 	bl	800bd60 <RCCEx_PLL3_Config>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad0a:	e009      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad10:	e006      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ad12:	bf00      	nop
 800ad14:	e004      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ad16:	bf00      	nop
 800ad18:	e002      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e000      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ad1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10c      	bne.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad34:	4901      	ldr	r1, [pc, #4]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	658b      	str	r3, [r1, #88]	; 0x58
 800ad3a:	e003      	b.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ad3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d02f      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad58:	d00e      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800ad5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5e:	d814      	bhi.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d015      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800ad64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad68:	d10f      	bne.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6a:	4baf      	ldr	r3, [pc, #700]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	4aae      	ldr	r2, [pc, #696]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad76:	e00c      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 ff3c 	bl	800bbfc <RCCEx_PLL2_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad88:	e003      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad8e:	e000      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800ad90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad98:	4ba3      	ldr	r3, [pc, #652]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ada4:	49a0      	ldr	r1, [pc, #640]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	650b      	str	r3, [r1, #80]	; 0x50
 800adaa:	e001      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d032      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d81b      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800ae03 	.word	0x0800ae03
 800add0:	0800addd 	.word	0x0800addd
 800add4:	0800adeb 	.word	0x0800adeb
 800add8:	0800ae03 	.word	0x0800ae03
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800addc:	4b92      	ldr	r3, [pc, #584]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a91      	ldr	r2, [pc, #580]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ade2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ade8:	e00c      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3304      	adds	r3, #4
 800adee:	2102      	movs	r1, #2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 ff03 	bl	800bbfc <RCCEx_PLL2_Config>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800adfa:	e003      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ae00:	e000      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ae02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae0a:	4b87      	ldr	r3, [pc, #540]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0e:	f023 0203 	bic.w	r2, r3, #3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	4984      	ldr	r1, [pc, #528]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae1c:	e001      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 8086 	beq.w	800af3c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae30:	4b7e      	ldr	r3, [pc, #504]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a7d      	ldr	r2, [pc, #500]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ae36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae3c:	f7f9 f876 	bl	8003f2c <HAL_GetTick>
 800ae40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae42:	e009      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae44:	f7f9 f872 	bl	8003f2c <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	2b64      	cmp	r3, #100	; 0x64
 800ae50:	d902      	bls.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	75fb      	strb	r3, [r7, #23]
        break;
 800ae56:	e005      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae58:	4b74      	ldr	r3, [pc, #464]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0ef      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d166      	bne.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae6a:	4b6f      	ldr	r3, [pc, #444]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae74:	4053      	eors	r3, r2
 800ae76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d013      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae7e:	4b6a      	ldr	r3, [pc, #424]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae88:	4b67      	ldr	r3, [pc, #412]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8c:	4a66      	ldr	r2, [pc, #408]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae94:	4b64      	ldr	r3, [pc, #400]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae98:	4a63      	ldr	r2, [pc, #396]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aea0:	4a61      	ldr	r2, [pc, #388]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb0:	d115      	bne.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb2:	f7f9 f83b 	bl	8003f2c <HAL_GetTick>
 800aeb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aeb8:	e00b      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeba:	f7f9 f837 	bl	8003f2c <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d902      	bls.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	75fb      	strb	r3, [r7, #23]
            break;
 800aed0:	e005      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aed2:	4b55      	ldr	r3, [pc, #340]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0ed      	beq.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d126      	bne.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aef2:	d10d      	bne.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aef4:	4b4c      	ldr	r3, [pc, #304]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af02:	0919      	lsrs	r1, r3, #4
 800af04:	4b4a      	ldr	r3, [pc, #296]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800af06:	400b      	ands	r3, r1
 800af08:	4947      	ldr	r1, [pc, #284]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	610b      	str	r3, [r1, #16]
 800af0e:	e005      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800af10:	4b45      	ldr	r3, [pc, #276]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	4a44      	ldr	r2, [pc, #272]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af1a:	6113      	str	r3, [r2, #16]
 800af1c:	4b42      	ldr	r3, [pc, #264]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af2a:	493f      	ldr	r1, [pc, #252]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	670b      	str	r3, [r1, #112]	; 0x70
 800af30:	e004      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	75bb      	strb	r3, [r7, #22]
 800af36:	e001      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 8085 	beq.w	800b054 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4e:	2b28      	cmp	r3, #40	; 0x28
 800af50:	d866      	bhi.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800af52:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af58:	0800b035 	.word	0x0800b035
 800af5c:	0800b021 	.word	0x0800b021
 800af60:	0800b021 	.word	0x0800b021
 800af64:	0800b021 	.word	0x0800b021
 800af68:	0800b021 	.word	0x0800b021
 800af6c:	0800b021 	.word	0x0800b021
 800af70:	0800b021 	.word	0x0800b021
 800af74:	0800b021 	.word	0x0800b021
 800af78:	0800affd 	.word	0x0800affd
 800af7c:	0800b021 	.word	0x0800b021
 800af80:	0800b021 	.word	0x0800b021
 800af84:	0800b021 	.word	0x0800b021
 800af88:	0800b021 	.word	0x0800b021
 800af8c:	0800b021 	.word	0x0800b021
 800af90:	0800b021 	.word	0x0800b021
 800af94:	0800b021 	.word	0x0800b021
 800af98:	0800b00f 	.word	0x0800b00f
 800af9c:	0800b021 	.word	0x0800b021
 800afa0:	0800b021 	.word	0x0800b021
 800afa4:	0800b021 	.word	0x0800b021
 800afa8:	0800b021 	.word	0x0800b021
 800afac:	0800b021 	.word	0x0800b021
 800afb0:	0800b021 	.word	0x0800b021
 800afb4:	0800b021 	.word	0x0800b021
 800afb8:	0800b035 	.word	0x0800b035
 800afbc:	0800b021 	.word	0x0800b021
 800afc0:	0800b021 	.word	0x0800b021
 800afc4:	0800b021 	.word	0x0800b021
 800afc8:	0800b021 	.word	0x0800b021
 800afcc:	0800b021 	.word	0x0800b021
 800afd0:	0800b021 	.word	0x0800b021
 800afd4:	0800b021 	.word	0x0800b021
 800afd8:	0800b035 	.word	0x0800b035
 800afdc:	0800b021 	.word	0x0800b021
 800afe0:	0800b021 	.word	0x0800b021
 800afe4:	0800b021 	.word	0x0800b021
 800afe8:	0800b021 	.word	0x0800b021
 800afec:	0800b021 	.word	0x0800b021
 800aff0:	0800b021 	.word	0x0800b021
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	0800b035 	.word	0x0800b035
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3304      	adds	r3, #4
 800b000:	2101      	movs	r1, #1
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fdfa 	bl	800bbfc <RCCEx_PLL2_Config>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b00c:	e013      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3324      	adds	r3, #36	; 0x24
 800b012:	2101      	movs	r1, #1
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fea3 	bl	800bd60 <RCCEx_PLL3_Config>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b01e:	e00a      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	75fb      	strb	r3, [r7, #23]
      break;
 800b024:	e007      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b026:	bf00      	nop
 800b028:	58024400 	.word	0x58024400
 800b02c:	58024800 	.word	0x58024800
 800b030:	00ffffcf 	.word	0x00ffffcf
      break;
 800b034:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b03c:	4b96      	ldr	r3, [pc, #600]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b048:	4993      	ldr	r1, [pc, #588]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	654b      	str	r3, [r1, #84]	; 0x54
 800b04e:	e001      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d038      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b064:	2b05      	cmp	r3, #5
 800b066:	d821      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b068:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b0b3 	.word	0x0800b0b3
 800b074:	0800b089 	.word	0x0800b089
 800b078:	0800b09b 	.word	0x0800b09b
 800b07c:	0800b0b3 	.word	0x0800b0b3
 800b080:	0800b0b3 	.word	0x0800b0b3
 800b084:	0800b0b3 	.word	0x0800b0b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3304      	adds	r3, #4
 800b08c:	2101      	movs	r1, #1
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fdb4 	bl	800bbfc <RCCEx_PLL2_Config>
 800b094:	4603      	mov	r3, r0
 800b096:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b098:	e00c      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3324      	adds	r3, #36	; 0x24
 800b09e:	2101      	movs	r1, #1
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fe5d 	bl	800bd60 <RCCEx_PLL3_Config>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b0aa:	e003      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b0:	e000      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b0b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d109      	bne.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0ba:	4b77      	ldr	r3, [pc, #476]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0be:	f023 0207 	bic.w	r2, r3, #7
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c6:	4974      	ldr	r1, [pc, #464]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	654b      	str	r3, [r1, #84]	; 0x54
 800b0cc:	e001      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d03a      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e4:	2b05      	cmp	r3, #5
 800b0e6:	d821      	bhi.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b0e8:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ee:	bf00      	nop
 800b0f0:	0800b133 	.word	0x0800b133
 800b0f4:	0800b109 	.word	0x0800b109
 800b0f8:	0800b11b 	.word	0x0800b11b
 800b0fc:	0800b133 	.word	0x0800b133
 800b100:	0800b133 	.word	0x0800b133
 800b104:	0800b133 	.word	0x0800b133
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	2101      	movs	r1, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fd74 	bl	800bbfc <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b118:	e00c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3324      	adds	r3, #36	; 0x24
 800b11e:	2101      	movs	r1, #1
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fe1d 	bl	800bd60 <RCCEx_PLL3_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b12a:	e003      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10a      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b13a:	4b57      	ldr	r3, [pc, #348]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13e:	f023 0207 	bic.w	r2, r3, #7
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b148:	4953      	ldr	r1, [pc, #332]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	658b      	str	r3, [r1, #88]	; 0x58
 800b14e:	e001      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0320 	and.w	r3, r3, #32
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d04b      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b16a:	d02e      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b16c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b170:	d828      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b176:	d02a      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17c:	d822      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b17e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b182:	d026      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b188:	d81c      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b18e:	d010      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b194:	d816      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01d      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b19e:	d111      	bne.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fd28 	bl	800bbfc <RCCEx_PLL2_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b1b0:	e012      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3324      	adds	r3, #36	; 0x24
 800b1b6:	2102      	movs	r1, #2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fdd1 	bl	800bd60 <RCCEx_PLL3_Config>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b1c2:	e009      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c8:	e006      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b1ca:	bf00      	nop
 800b1cc:	e004      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b1ce:	bf00      	nop
 800b1d0:	e002      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b1d2:	bf00      	nop
 800b1d4:	e000      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b1d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b1de:	4b2e      	ldr	r3, [pc, #184]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ec:	492a      	ldr	r1, [pc, #168]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	654b      	str	r3, [r1, #84]	; 0x54
 800b1f2:	e001      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d04d      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b20a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b20e:	d02e      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b210:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b214:	d828      	bhi.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21a:	d02a      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b21c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b220:	d822      	bhi.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b226:	d026      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b22c:	d81c      	bhi.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b22e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b232:	d010      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b238:	d816      	bhi.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01d      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b242:	d111      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3304      	adds	r3, #4
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fcd6 	bl	800bbfc <RCCEx_PLL2_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b254:	e012      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3324      	adds	r3, #36	; 0x24
 800b25a:	2102      	movs	r1, #2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fd7f 	bl	800bd60 <RCCEx_PLL3_Config>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b266:	e009      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	75fb      	strb	r3, [r7, #23]
      break;
 800b26c:	e006      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b26e:	bf00      	nop
 800b270:	e004      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b272:	bf00      	nop
 800b274:	e002      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b27a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10c      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b290:	4901      	ldr	r1, [pc, #4]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b292:	4313      	orrs	r3, r2
 800b294:	658b      	str	r3, [r1, #88]	; 0x58
 800b296:	e003      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d04b      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2b6:	d02e      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b2b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2bc:	d828      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b2be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2c2:	d02a      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b2c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2c8:	d822      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b2ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b2ce:	d026      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b2d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b2d4:	d81c      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2da:	d010      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b2dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2e0:	d816      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d01d      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b2e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2ea:	d111      	bne.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fc82 	bl	800bbfc <RCCEx_PLL2_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b2fc:	e012      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3324      	adds	r3, #36	; 0x24
 800b302:	2102      	movs	r1, #2
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fd2b 	bl	800bd60 <RCCEx_PLL3_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b30e:	e009      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]
      break;
 800b314:	e006      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b316:	bf00      	nop
 800b318:	e004      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b31a:	bf00      	nop
 800b31c:	e002      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b31e:	bf00      	nop
 800b320:	e000      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b322:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10a      	bne.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b32a:	4b9d      	ldr	r3, [pc, #628]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b338:	4999      	ldr	r1, [pc, #612]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	658b      	str	r3, [r1, #88]	; 0x58
 800b33e:	e001      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01a      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b35a:	d10a      	bne.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3324      	adds	r3, #36	; 0x24
 800b360:	2102      	movs	r1, #2
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fcfc 	bl	800bd60 <RCCEx_PLL3_Config>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b372:	4b8b      	ldr	r3, [pc, #556]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b380:	4987      	ldr	r1, [pc, #540]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b382:	4313      	orrs	r3, r2
 800b384:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0310 	and.w	r3, r3, #16
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d01a      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39c:	d10a      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3324      	adds	r3, #36	; 0x24
 800b3a2:	2102      	movs	r1, #2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 fcdb 	bl	800bd60 <RCCEx_PLL3_Config>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3b4:	4b7a      	ldr	r3, [pc, #488]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3c2:	4977      	ldr	r1, [pc, #476]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d034      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3de:	d01d      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b3e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3e4:	d817      	bhi.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b3ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ee:	d009      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b3f0:	e011      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fbff 	bl	800bbfc <RCCEx_PLL2_Config>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b402:	e00c      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3324      	adds	r3, #36	; 0x24
 800b408:	2102      	movs	r1, #2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fca8 	bl	800bd60 <RCCEx_PLL3_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b414:	e003      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	75fb      	strb	r3, [r7, #23]
      break;
 800b41a:	e000      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b41c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b424:	4b5e      	ldr	r3, [pc, #376]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b432:	495b      	ldr	r1, [pc, #364]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b434:	4313      	orrs	r3, r2
 800b436:	658b      	str	r3, [r1, #88]	; 0x58
 800b438:	e001      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d033      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b454:	d01c      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b45a:	d816      	bhi.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b45c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b460:	d003      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b466:	d007      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b468:	e00f      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b46a:	4b4d      	ldr	r3, [pc, #308]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	4a4c      	ldr	r2, [pc, #304]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b476:	e00c      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3324      	adds	r3, #36	; 0x24
 800b47c:	2101      	movs	r1, #1
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fc6e 	bl	800bd60 <RCCEx_PLL3_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b488:	e003      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	75fb      	strb	r3, [r7, #23]
      break;
 800b48e:	e000      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b490:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b498:	4b41      	ldr	r3, [pc, #260]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4a6:	493e      	ldr	r1, [pc, #248]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	654b      	str	r3, [r1, #84]	; 0x54
 800b4ac:	e001      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d029      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ca:	d007      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b4cc:	e00f      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ce:	4b34      	ldr	r3, [pc, #208]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	4a33      	ldr	r2, [pc, #204]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b4da:	e00b      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	2102      	movs	r1, #2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fb8a 	bl	800bbfc <RCCEx_PLL2_Config>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b4ec:	e002      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b4fa:	4b29      	ldr	r3, [pc, #164]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b506:	4926      	ldr	r1, [pc, #152]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b50c:	e001      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3324      	adds	r3, #36	; 0x24
 800b522:	2102      	movs	r1, #2
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fc1b 	bl	800bd60 <RCCEx_PLL3_Config>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d033      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b548:	d017      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b54a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b54e:	d811      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b554:	d013      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b55a:	d80b      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d010      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b564:	d106      	bne.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b566:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	4a0d      	ldr	r2, [pc, #52]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b572:	e007      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	75fb      	strb	r3, [r7, #23]
      break;
 800b578:	e004      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b57a:	bf00      	nop
 800b57c:	e002      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b582:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10c      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b58a:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b596:	4902      	ldr	r1, [pc, #8]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b598:	4313      	orrs	r3, r2
 800b59a:	654b      	str	r3, [r1, #84]	; 0x54
 800b59c:	e004      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b59e:	bf00      	nop
 800b5a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d008      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b5b4:	4b31      	ldr	r3, [pc, #196]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c0:	492e      	ldr	r1, [pc, #184]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d009      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b5d2:	4b2a      	ldr	r3, [pc, #168]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5e0:	4926      	ldr	r1, [pc, #152]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d008      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5f2:	4b22      	ldr	r3, [pc, #136]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5fe:	491f      	ldr	r1, [pc, #124]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b600:	4313      	orrs	r3, r2
 800b602:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00d      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a19      	ldr	r2, [pc, #100]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b61a:	6113      	str	r3, [r2, #16]
 800b61c:	4b17      	ldr	r3, [pc, #92]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b61e:	691a      	ldr	r2, [r3, #16]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b626:	4915      	ldr	r1, [pc, #84]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	da08      	bge.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b634:	4b11      	ldr	r3, [pc, #68]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b638:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b640:	490e      	ldr	r1, [pc, #56]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b642:	4313      	orrs	r3, r2
 800b644:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d009      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b652:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b660:	4906      	ldr	r1, [pc, #24]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b662:	4313      	orrs	r3, r2
 800b664:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b666:	7dbb      	ldrb	r3, [r7, #22]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	e000      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	58024400 	.word	0x58024400

0800b680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b684:	f7ff f85a 	bl	800a73c <HAL_RCC_GetHCLKFreq>
 800b688:	4602      	mov	r2, r0
 800b68a:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	091b      	lsrs	r3, r3, #4
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	4904      	ldr	r1, [pc, #16]	; (800b6a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b696:	5ccb      	ldrb	r3, [r1, r3]
 800b698:	f003 031f 	and.w	r3, r3, #31
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	58024400 	.word	0x58024400
 800b6a8:	08011d5c 	.word	0x08011d5c

0800b6ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b089      	sub	sp, #36	; 0x24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6b4:	4ba1      	ldr	r3, [pc, #644]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b8:	f003 0303 	and.w	r3, r3, #3
 800b6bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b6be:	4b9f      	ldr	r3, [pc, #636]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	0b1b      	lsrs	r3, r3, #12
 800b6c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6ca:	4b9c      	ldr	r3, [pc, #624]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ce:	091b      	lsrs	r3, r3, #4
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b6d6:	4b99      	ldr	r3, [pc, #612]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6da:	08db      	lsrs	r3, r3, #3
 800b6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8111 	beq.w	800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	f000 8083 	beq.w	800b808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b02      	cmp	r3, #2
 800b706:	f200 80a1 	bhi.w	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d056      	beq.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b716:	e099      	b.n	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b718:	4b88      	ldr	r3, [pc, #544]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d02d      	beq.n	800b780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b724:	4b85      	ldr	r3, [pc, #532]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	4a84      	ldr	r2, [pc, #528]	; (800b940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
 800b734:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74e:	4b7b      	ldr	r3, [pc, #492]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b762:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b77e:	e087      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b792:	4b6a      	ldr	r3, [pc, #424]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7c2:	e065      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7d6:	4b59      	ldr	r3, [pc, #356]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b806:	e043      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b812:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81a:	4b48      	ldr	r3, [pc, #288]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b82e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b84a:	e021      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b856:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b85e:	4b37      	ldr	r3, [pc, #220]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b872:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b88e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b890:	4b2a      	ldr	r3, [pc, #168]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b894:	0a5b      	lsrs	r3, r3, #9
 800b896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b6:	ee17 2a90 	vmov	r2, s15
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b8be:	4b1f      	ldr	r3, [pc, #124]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c2:	0c1b      	lsrs	r3, r3, #16
 800b8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e4:	ee17 2a90 	vmov	r2, s15
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b8ec:	4b13      	ldr	r3, [pc, #76]	; (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f0:	0e1b      	lsrs	r3, r3, #24
 800b8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b902:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b906:	edd7 6a07 	vldr	s13, [r7, #28]
 800b90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b912:	ee17 2a90 	vmov	r2, s15
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b91a:	e008      	b.n	800b92e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	609a      	str	r2, [r3, #8]
}
 800b92e:	bf00      	nop
 800b930:	3724      	adds	r7, #36	; 0x24
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	58024400 	.word	0x58024400
 800b940:	03d09000 	.word	0x03d09000
 800b944:	46000000 	.word	0x46000000
 800b948:	4c742400 	.word	0x4c742400
 800b94c:	4a742400 	.word	0x4a742400
 800b950:	4c189680 	.word	0x4c189680

0800b954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b954:	b480      	push	{r7}
 800b956:	b089      	sub	sp, #36	; 0x24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b95c:	4ba1      	ldr	r3, [pc, #644]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b960:	f003 0303 	and.w	r3, r3, #3
 800b964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b966:	4b9f      	ldr	r3, [pc, #636]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	0d1b      	lsrs	r3, r3, #20
 800b96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b972:	4b9c      	ldr	r3, [pc, #624]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b97e:	4b99      	ldr	r3, [pc, #612]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b982:	08db      	lsrs	r3, r3, #3
 800b984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	fb02 f303 	mul.w	r3, r2, r3
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 8111 	beq.w	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	f000 8083 	beq.w	800bab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	f200 80a1 	bhi.w	800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d056      	beq.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9be:	e099      	b.n	800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c0:	4b88      	ldr	r3, [pc, #544]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0320 	and.w	r3, r3, #32
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d02d      	beq.n	800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9cc:	4b85      	ldr	r3, [pc, #532]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	08db      	lsrs	r3, r3, #3
 800b9d2:	f003 0303 	and.w	r3, r3, #3
 800b9d6:	4a84      	ldr	r2, [pc, #528]	; (800bbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f6:	4b7b      	ldr	r3, [pc, #492]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba26:	e087      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3a:	4b6a      	ldr	r3, [pc, #424]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba6a:	e065      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba7e:	4b59      	ldr	r3, [pc, #356]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baae:	e043      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800babe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac2:	4b48      	ldr	r3, [pc, #288]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baf2:	e021      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb06:	4b37      	ldr	r3, [pc, #220]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb38:	4b2a      	ldr	r3, [pc, #168]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	0a5b      	lsrs	r3, r3, #9
 800bb3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb52:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb5e:	ee17 2a90 	vmov	r2, s15
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bb66:	4b1f      	ldr	r3, [pc, #124]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	0c1b      	lsrs	r3, r3, #16
 800bb6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb70:	ee07 3a90 	vmov	s15, r3
 800bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb80:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8c:	ee17 2a90 	vmov	r2, s15
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bb94:	4b13      	ldr	r3, [pc, #76]	; (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	0e1b      	lsrs	r3, r3, #24
 800bb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbba:	ee17 2a90 	vmov	r2, s15
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbc2:	e008      	b.n	800bbd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	609a      	str	r2, [r3, #8]
}
 800bbd6:	bf00      	nop
 800bbd8:	3724      	adds	r7, #36	; 0x24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	58024400 	.word	0x58024400
 800bbe8:	03d09000 	.word	0x03d09000
 800bbec:	46000000 	.word	0x46000000
 800bbf0:	4c742400 	.word	0x4c742400
 800bbf4:	4a742400 	.word	0x4a742400
 800bbf8:	4c189680 	.word	0x4c189680

0800bbfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc0a:	4b53      	ldr	r3, [pc, #332]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0e:	f003 0303 	and.w	r3, r3, #3
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d101      	bne.n	800bc1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e099      	b.n	800bd4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc1a:	4b4f      	ldr	r3, [pc, #316]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a4e      	ldr	r2, [pc, #312]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc26:	f7f8 f981 	bl	8003f2c <HAL_GetTick>
 800bc2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc2c:	e008      	b.n	800bc40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc2e:	f7f8 f97d 	bl	8003f2c <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d901      	bls.n	800bc40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e086      	b.n	800bd4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc40:	4b45      	ldr	r3, [pc, #276]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1f0      	bne.n	800bc2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bc4c:	4b42      	ldr	r3, [pc, #264]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	031b      	lsls	r3, r3, #12
 800bc5a:	493f      	ldr	r1, [pc, #252]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	628b      	str	r3, [r1, #40]	; 0x28
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	025b      	lsls	r3, r3, #9
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	041b      	lsls	r3, r3, #16
 800bc7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc82:	431a      	orrs	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	061b      	lsls	r3, r3, #24
 800bc8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc90:	4931      	ldr	r1, [pc, #196]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc92:	4313      	orrs	r3, r2
 800bc94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bc96:	4b30      	ldr	r3, [pc, #192]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	492d      	ldr	r1, [pc, #180]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bca8:	4b2b      	ldr	r3, [pc, #172]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	f023 0220 	bic.w	r2, r3, #32
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	4928      	ldr	r1, [pc, #160]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bcba:	4b27      	ldr	r3, [pc, #156]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbe:	4a26      	ldr	r2, [pc, #152]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcc0:	f023 0310 	bic.w	r3, r3, #16
 800bcc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bcc6:	4b24      	ldr	r3, [pc, #144]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcca:	4b24      	ldr	r3, [pc, #144]	; (800bd5c <RCCEx_PLL2_Config+0x160>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	69d2      	ldr	r2, [r2, #28]
 800bcd2:	00d2      	lsls	r2, r2, #3
 800bcd4:	4920      	ldr	r1, [pc, #128]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bcda:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	4a1e      	ldr	r2, [pc, #120]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bce0:	f043 0310 	orr.w	r3, r3, #16
 800bce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bcec:	4b1a      	ldr	r3, [pc, #104]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	4a19      	ldr	r2, [pc, #100]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bcf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bcf8:	e00f      	b.n	800bd1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d106      	bne.n	800bd0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd00:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd0c:	e005      	b.n	800bd1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd0e:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	4a11      	ldr	r2, [pc, #68]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd1a:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a0e      	ldr	r2, [pc, #56]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd26:	f7f8 f901 	bl	8003f2c <HAL_GetTick>
 800bd2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd2c:	e008      	b.n	800bd40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bd2e:	f7f8 f8fd 	bl	8003f2c <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d901      	bls.n	800bd40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e006      	b.n	800bd4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd40:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <RCCEx_PLL2_Config+0x15c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0f0      	beq.n	800bd2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	58024400 	.word	0x58024400
 800bd5c:	ffff0007 	.word	0xffff0007

0800bd60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd6e:	4b53      	ldr	r3, [pc, #332]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd72:	f003 0303 	and.w	r3, r3, #3
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d101      	bne.n	800bd7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e099      	b.n	800beb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bd7e:	4b4f      	ldr	r3, [pc, #316]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a4e      	ldr	r2, [pc, #312]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bd84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd8a:	f7f8 f8cf 	bl	8003f2c <HAL_GetTick>
 800bd8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd90:	e008      	b.n	800bda4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bd92:	f7f8 f8cb 	bl	8003f2c <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d901      	bls.n	800bda4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e086      	b.n	800beb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bda4:	4b45      	ldr	r3, [pc, #276]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1f0      	bne.n	800bd92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bdb0:	4b42      	ldr	r3, [pc, #264]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	051b      	lsls	r3, r3, #20
 800bdbe:	493f      	ldr	r1, [pc, #252]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	628b      	str	r3, [r1, #40]	; 0x28
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	025b      	lsls	r3, r3, #9
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	041b      	lsls	r3, r3, #16
 800bde2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bde6:	431a      	orrs	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	061b      	lsls	r3, r3, #24
 800bdf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bdf4:	4931      	ldr	r1, [pc, #196]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bdfa:	4b30      	ldr	r3, [pc, #192]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	492d      	ldr	r1, [pc, #180]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be0c:	4b2b      	ldr	r3, [pc, #172]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	4928      	ldr	r1, [pc, #160]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be1e:	4b27      	ldr	r3, [pc, #156]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	4a26      	ldr	r2, [pc, #152]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800be2a:	4b24      	ldr	r3, [pc, #144]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be2e:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <RCCEx_PLL3_Config+0x160>)
 800be30:	4013      	ands	r3, r2
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	69d2      	ldr	r2, [r2, #28]
 800be36:	00d2      	lsls	r2, r2, #3
 800be38:	4920      	ldr	r1, [pc, #128]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800be3e:	4b1f      	ldr	r3, [pc, #124]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800be50:	4b1a      	ldr	r3, [pc, #104]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	4a19      	ldr	r2, [pc, #100]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800be5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be5c:	e00f      	b.n	800be7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d106      	bne.n	800be72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800be64:	4b15      	ldr	r3, [pc, #84]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	4a14      	ldr	r2, [pc, #80]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be70:	e005      	b.n	800be7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800be72:	4b12      	ldr	r3, [pc, #72]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	4a11      	ldr	r2, [pc, #68]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a0e      	ldr	r2, [pc, #56]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800be84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8a:	f7f8 f84f 	bl	8003f2c <HAL_GetTick>
 800be8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be90:	e008      	b.n	800bea4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800be92:	f7f8 f84b 	bl	8003f2c <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d901      	bls.n	800bea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e006      	b.n	800beb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bea4:	4b05      	ldr	r3, [pc, #20]	; (800bebc <RCCEx_PLL3_Config+0x15c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0f0      	beq.n	800be92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	58024400 	.word	0x58024400
 800bec0:	ffff0007 	.word	0xffff0007

0800bec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e049      	b.n	800bf6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7f5 ff9e 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	4610      	mov	r0, r2
 800bf04:	f001 f804 	bl	800cf10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
	...

0800bf74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d001      	beq.n	800bf8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e054      	b.n	800c036 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f042 0201 	orr.w	r2, r2, #1
 800bfa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a26      	ldr	r2, [pc, #152]	; (800c044 <HAL_TIM_Base_Start_IT+0xd0>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d022      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb6:	d01d      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a22      	ldr	r2, [pc, #136]	; (800c048 <HAL_TIM_Base_Start_IT+0xd4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d018      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a21      	ldr	r2, [pc, #132]	; (800c04c <HAL_TIM_Base_Start_IT+0xd8>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d013      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a1f      	ldr	r2, [pc, #124]	; (800c050 <HAL_TIM_Base_Start_IT+0xdc>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d00e      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a1e      	ldr	r2, [pc, #120]	; (800c054 <HAL_TIM_Base_Start_IT+0xe0>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d009      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a1c      	ldr	r2, [pc, #112]	; (800c058 <HAL_TIM_Base_Start_IT+0xe4>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d004      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x80>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a1b      	ldr	r2, [pc, #108]	; (800c05c <HAL_TIM_Base_Start_IT+0xe8>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d115      	bne.n	800c020 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689a      	ldr	r2, [r3, #8]
 800bffa:	4b19      	ldr	r3, [pc, #100]	; (800c060 <HAL_TIM_Base_Start_IT+0xec>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b06      	cmp	r3, #6
 800c004:	d015      	beq.n	800c032 <HAL_TIM_Base_Start_IT+0xbe>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00c:	d011      	beq.n	800c032 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f042 0201 	orr.w	r2, r2, #1
 800c01c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c01e:	e008      	b.n	800c032 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f042 0201 	orr.w	r2, r2, #1
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e000      	b.n	800c034 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40010000 	.word	0x40010000
 800c048:	40000400 	.word	0x40000400
 800c04c:	40000800 	.word	0x40000800
 800c050:	40000c00 	.word	0x40000c00
 800c054:	40010400 	.word	0x40010400
 800c058:	40001800 	.word	0x40001800
 800c05c:	40014000 	.word	0x40014000
 800c060:	00010007 	.word	0x00010007

0800c064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e049      	b.n	800c10a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f841 	bl	800c112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	f000 ff34 	bl	800cf10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c112:	b480      	push	{r7}
 800c114:	b083      	sub	sp, #12
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c11a:	bf00      	nop
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d109      	bne.n	800c14c <HAL_TIM_PWM_Start+0x24>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b01      	cmp	r3, #1
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	e03c      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x9e>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b04      	cmp	r3, #4
 800c150:	d109      	bne.n	800c166 <HAL_TIM_PWM_Start+0x3e>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	bf14      	ite	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	2300      	moveq	r3, #0
 800c162:	b2db      	uxtb	r3, r3
 800c164:	e02f      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x9e>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b08      	cmp	r3, #8
 800c16a:	d109      	bne.n	800c180 <HAL_TIM_PWM_Start+0x58>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b01      	cmp	r3, #1
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	e022      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x9e>
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b0c      	cmp	r3, #12
 800c184:	d109      	bne.n	800c19a <HAL_TIM_PWM_Start+0x72>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b01      	cmp	r3, #1
 800c190:	bf14      	ite	ne
 800c192:	2301      	movne	r3, #1
 800c194:	2300      	moveq	r3, #0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	e015      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x9e>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	2b10      	cmp	r3, #16
 800c19e:	d109      	bne.n	800c1b4 <HAL_TIM_PWM_Start+0x8c>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	bf14      	ite	ne
 800c1ac:	2301      	movne	r3, #1
 800c1ae:	2300      	moveq	r3, #0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	e008      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x9e>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	bf14      	ite	ne
 800c1c0:	2301      	movne	r3, #1
 800c1c2:	2300      	moveq	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e0a1      	b.n	800c312 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d104      	bne.n	800c1de <HAL_TIM_PWM_Start+0xb6>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1dc:	e023      	b.n	800c226 <HAL_TIM_PWM_Start+0xfe>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b04      	cmp	r3, #4
 800c1e2:	d104      	bne.n	800c1ee <HAL_TIM_PWM_Start+0xc6>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1ec:	e01b      	b.n	800c226 <HAL_TIM_PWM_Start+0xfe>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b08      	cmp	r3, #8
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_PWM_Start+0xd6>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1fc:	e013      	b.n	800c226 <HAL_TIM_PWM_Start+0xfe>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b0c      	cmp	r3, #12
 800c202:	d104      	bne.n	800c20e <HAL_TIM_PWM_Start+0xe6>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c20c:	e00b      	b.n	800c226 <HAL_TIM_PWM_Start+0xfe>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b10      	cmp	r3, #16
 800c212:	d104      	bne.n	800c21e <HAL_TIM_PWM_Start+0xf6>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c21c:	e003      	b.n	800c226 <HAL_TIM_PWM_Start+0xfe>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2202      	movs	r2, #2
 800c222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2201      	movs	r2, #1
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 fba6 	bl	800d980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a38      	ldr	r2, [pc, #224]	; (800c31c <HAL_TIM_PWM_Start+0x1f4>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d013      	beq.n	800c266 <HAL_TIM_PWM_Start+0x13e>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a37      	ldr	r2, [pc, #220]	; (800c320 <HAL_TIM_PWM_Start+0x1f8>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d00e      	beq.n	800c266 <HAL_TIM_PWM_Start+0x13e>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a35      	ldr	r2, [pc, #212]	; (800c324 <HAL_TIM_PWM_Start+0x1fc>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d009      	beq.n	800c266 <HAL_TIM_PWM_Start+0x13e>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a34      	ldr	r2, [pc, #208]	; (800c328 <HAL_TIM_PWM_Start+0x200>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d004      	beq.n	800c266 <HAL_TIM_PWM_Start+0x13e>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a32      	ldr	r2, [pc, #200]	; (800c32c <HAL_TIM_PWM_Start+0x204>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d101      	bne.n	800c26a <HAL_TIM_PWM_Start+0x142>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <HAL_TIM_PWM_Start+0x144>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d007      	beq.n	800c280 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c27e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a25      	ldr	r2, [pc, #148]	; (800c31c <HAL_TIM_PWM_Start+0x1f4>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d022      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c292:	d01d      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a25      	ldr	r2, [pc, #148]	; (800c330 <HAL_TIM_PWM_Start+0x208>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d018      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a24      	ldr	r2, [pc, #144]	; (800c334 <HAL_TIM_PWM_Start+0x20c>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d013      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a22      	ldr	r2, [pc, #136]	; (800c338 <HAL_TIM_PWM_Start+0x210>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d00e      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a1a      	ldr	r2, [pc, #104]	; (800c320 <HAL_TIM_PWM_Start+0x1f8>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d009      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a1e      	ldr	r2, [pc, #120]	; (800c33c <HAL_TIM_PWM_Start+0x214>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d004      	beq.n	800c2d0 <HAL_TIM_PWM_Start+0x1a8>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a16      	ldr	r2, [pc, #88]	; (800c324 <HAL_TIM_PWM_Start+0x1fc>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d115      	bne.n	800c2fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	689a      	ldr	r2, [r3, #8]
 800c2d6:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <HAL_TIM_PWM_Start+0x218>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b06      	cmp	r3, #6
 800c2e0:	d015      	beq.n	800c30e <HAL_TIM_PWM_Start+0x1e6>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e8:	d011      	beq.n	800c30e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f042 0201 	orr.w	r2, r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2fa:	e008      	b.n	800c30e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0201 	orr.w	r2, r2, #1
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	e000      	b.n	800c310 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c30e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	40010000 	.word	0x40010000
 800c320:	40010400 	.word	0x40010400
 800c324:	40014000 	.word	0x40014000
 800c328:	40014400 	.word	0x40014400
 800c32c:	40014800 	.word	0x40014800
 800c330:	40000400 	.word	0x40000400
 800c334:	40000800 	.word	0x40000800
 800c338:	40000c00 	.word	0x40000c00
 800c33c:	40001800 	.word	0x40001800
 800c340:	00010007 	.word	0x00010007

0800c344 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e049      	b.n	800c3ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d106      	bne.n	800c370 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f841 	bl	800c3f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3304      	adds	r3, #4
 800c380:	4619      	mov	r1, r3
 800c382:	4610      	mov	r0, r2
 800c384:	f000 fdc4 	bl	800cf10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b083      	sub	sp, #12
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c3fa:	bf00      	nop
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
	...

0800c408 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d104      	bne.n	800c426 <HAL_TIM_IC_Start_IT+0x1e>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c422:	b2db      	uxtb	r3, r3
 800c424:	e023      	b.n	800c46e <HAL_TIM_IC_Start_IT+0x66>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b04      	cmp	r3, #4
 800c42a:	d104      	bne.n	800c436 <HAL_TIM_IC_Start_IT+0x2e>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c432:	b2db      	uxtb	r3, r3
 800c434:	e01b      	b.n	800c46e <HAL_TIM_IC_Start_IT+0x66>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d104      	bne.n	800c446 <HAL_TIM_IC_Start_IT+0x3e>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c442:	b2db      	uxtb	r3, r3
 800c444:	e013      	b.n	800c46e <HAL_TIM_IC_Start_IT+0x66>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b0c      	cmp	r3, #12
 800c44a:	d104      	bne.n	800c456 <HAL_TIM_IC_Start_IT+0x4e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c452:	b2db      	uxtb	r3, r3
 800c454:	e00b      	b.n	800c46e <HAL_TIM_IC_Start_IT+0x66>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b10      	cmp	r3, #16
 800c45a:	d104      	bne.n	800c466 <HAL_TIM_IC_Start_IT+0x5e>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c462:	b2db      	uxtb	r3, r3
 800c464:	e003      	b.n	800c46e <HAL_TIM_IC_Start_IT+0x66>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d104      	bne.n	800c480 <HAL_TIM_IC_Start_IT+0x78>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	e013      	b.n	800c4a8 <HAL_TIM_IC_Start_IT+0xa0>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b04      	cmp	r3, #4
 800c484:	d104      	bne.n	800c490 <HAL_TIM_IC_Start_IT+0x88>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	e00b      	b.n	800c4a8 <HAL_TIM_IC_Start_IT+0xa0>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b08      	cmp	r3, #8
 800c494:	d104      	bne.n	800c4a0 <HAL_TIM_IC_Start_IT+0x98>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	e003      	b.n	800c4a8 <HAL_TIM_IC_Start_IT+0xa0>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c4aa:	7bbb      	ldrb	r3, [r7, #14]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d102      	bne.n	800c4b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c4b0:	7b7b      	ldrb	r3, [r7, #13]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d001      	beq.n	800c4ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e0e2      	b.n	800c680 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d104      	bne.n	800c4ca <HAL_TIM_IC_Start_IT+0xc2>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4c8:	e023      	b.n	800c512 <HAL_TIM_IC_Start_IT+0x10a>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b04      	cmp	r3, #4
 800c4ce:	d104      	bne.n	800c4da <HAL_TIM_IC_Start_IT+0xd2>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4d8:	e01b      	b.n	800c512 <HAL_TIM_IC_Start_IT+0x10a>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b08      	cmp	r3, #8
 800c4de:	d104      	bne.n	800c4ea <HAL_TIM_IC_Start_IT+0xe2>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4e8:	e013      	b.n	800c512 <HAL_TIM_IC_Start_IT+0x10a>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b0c      	cmp	r3, #12
 800c4ee:	d104      	bne.n	800c4fa <HAL_TIM_IC_Start_IT+0xf2>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4f8:	e00b      	b.n	800c512 <HAL_TIM_IC_Start_IT+0x10a>
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b10      	cmp	r3, #16
 800c4fe:	d104      	bne.n	800c50a <HAL_TIM_IC_Start_IT+0x102>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c508:	e003      	b.n	800c512 <HAL_TIM_IC_Start_IT+0x10a>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2202      	movs	r2, #2
 800c50e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <HAL_TIM_IC_Start_IT+0x11a>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c520:	e013      	b.n	800c54a <HAL_TIM_IC_Start_IT+0x142>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b04      	cmp	r3, #4
 800c526:	d104      	bne.n	800c532 <HAL_TIM_IC_Start_IT+0x12a>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c530:	e00b      	b.n	800c54a <HAL_TIM_IC_Start_IT+0x142>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b08      	cmp	r3, #8
 800c536:	d104      	bne.n	800c542 <HAL_TIM_IC_Start_IT+0x13a>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c540:	e003      	b.n	800c54a <HAL_TIM_IC_Start_IT+0x142>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2202      	movs	r2, #2
 800c546:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b0c      	cmp	r3, #12
 800c54e:	d841      	bhi.n	800c5d4 <HAL_TIM_IC_Start_IT+0x1cc>
 800c550:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <HAL_TIM_IC_Start_IT+0x150>)
 800c552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c556:	bf00      	nop
 800c558:	0800c58d 	.word	0x0800c58d
 800c55c:	0800c5d5 	.word	0x0800c5d5
 800c560:	0800c5d5 	.word	0x0800c5d5
 800c564:	0800c5d5 	.word	0x0800c5d5
 800c568:	0800c59f 	.word	0x0800c59f
 800c56c:	0800c5d5 	.word	0x0800c5d5
 800c570:	0800c5d5 	.word	0x0800c5d5
 800c574:	0800c5d5 	.word	0x0800c5d5
 800c578:	0800c5b1 	.word	0x0800c5b1
 800c57c:	0800c5d5 	.word	0x0800c5d5
 800c580:	0800c5d5 	.word	0x0800c5d5
 800c584:	0800c5d5 	.word	0x0800c5d5
 800c588:	0800c5c3 	.word	0x0800c5c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0202 	orr.w	r2, r2, #2
 800c59a:	60da      	str	r2, [r3, #12]
      break;
 800c59c:	e01d      	b.n	800c5da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f042 0204 	orr.w	r2, r2, #4
 800c5ac:	60da      	str	r2, [r3, #12]
      break;
 800c5ae:	e014      	b.n	800c5da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f042 0208 	orr.w	r2, r2, #8
 800c5be:	60da      	str	r2, [r3, #12]
      break;
 800c5c0:	e00b      	b.n	800c5da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0210 	orr.w	r2, r2, #16
 800c5d0:	60da      	str	r2, [r3, #12]
      break;
 800c5d2:	e002      	b.n	800c5da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d14e      	bne.n	800c67e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f001 f9c9 	bl	800d980 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a25      	ldr	r2, [pc, #148]	; (800c688 <HAL_TIM_IC_Start_IT+0x280>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d022      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c600:	d01d      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a21      	ldr	r2, [pc, #132]	; (800c68c <HAL_TIM_IC_Start_IT+0x284>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d018      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <HAL_TIM_IC_Start_IT+0x288>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d013      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <HAL_TIM_IC_Start_IT+0x28c>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d00e      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <HAL_TIM_IC_Start_IT+0x290>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d009      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <HAL_TIM_IC_Start_IT+0x294>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d004      	beq.n	800c63e <HAL_TIM_IC_Start_IT+0x236>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a19      	ldr	r2, [pc, #100]	; (800c6a0 <HAL_TIM_IC_Start_IT+0x298>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d115      	bne.n	800c66a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <HAL_TIM_IC_Start_IT+0x29c>)
 800c646:	4013      	ands	r3, r2
 800c648:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	2b06      	cmp	r3, #6
 800c64e:	d015      	beq.n	800c67c <HAL_TIM_IC_Start_IT+0x274>
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c656:	d011      	beq.n	800c67c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f042 0201 	orr.w	r2, r2, #1
 800c666:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c668:	e008      	b.n	800c67c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f042 0201 	orr.w	r2, r2, #1
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	e000      	b.n	800c67e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c67c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	40010000 	.word	0x40010000
 800c68c:	40000400 	.word	0x40000400
 800c690:	40000800 	.word	0x40000800
 800c694:	40000c00 	.word	0x40000c00
 800c698:	40010400 	.word	0x40010400
 800c69c:	40001800 	.word	0x40001800
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	00010007 	.word	0x00010007

0800c6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d122      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d11b      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f06f 0202 	mvn.w	r2, #2
 800c6d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	f003 0303 	and.w	r3, r3, #3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7f6 f848 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800c6f0:	e005      	b.n	800c6fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fbee 	bl	800ced4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fbf5 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0304 	and.w	r3, r3, #4
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d122      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d11b      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0204 	mvn.w	r2, #4
 800c728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2202      	movs	r2, #2
 800c72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7f6 f81e 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800c744:	e005      	b.n	800c752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fbc4 	bl	800ced4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fbcb 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b08      	cmp	r3, #8
 800c764:	d122      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0308 	and.w	r3, r3, #8
 800c770:	2b08      	cmp	r3, #8
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0208 	mvn.w	r2, #8
 800c77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2204      	movs	r2, #4
 800c782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7f5 fff4 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800c798:	e005      	b.n	800c7a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fb9a 	bl	800ced4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fba1 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d122      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f003 0310 	and.w	r3, r3, #16
 800c7c4:	2b10      	cmp	r3, #16
 800c7c6:	d11b      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f06f 0210 	mvn.w	r2, #16
 800c7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7f5 ffca 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800c7ec:	e005      	b.n	800c7fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fb70 	bl	800ced4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fb77 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d10e      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d107      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f06f 0201 	mvn.w	r2, #1
 800c824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fb4a 	bl	800cec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	2b80      	cmp	r3, #128	; 0x80
 800c838:	d10e      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c844:	2b80      	cmp	r3, #128	; 0x80
 800c846:	d107      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f952 	bl	800dafc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d10e      	bne.n	800c886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c872:	2b80      	cmp	r3, #128	; 0x80
 800c874:	d107      	bne.n	800c886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f001 f945 	bl	800db10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c890:	2b40      	cmp	r3, #64	; 0x40
 800c892:	d10e      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89e:	2b40      	cmp	r3, #64	; 0x40
 800c8a0:	d107      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fb25 	bl	800cefc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d10e      	bne.n	800c8de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b20      	cmp	r3, #32
 800c8cc:	d107      	bne.n	800c8de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f06f 0220 	mvn.w	r2, #32
 800c8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 f905 	bl	800dae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b086      	sub	sp, #24
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d101      	bne.n	800c904 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c900:	2302      	movs	r3, #2
 800c902:	e088      	b.n	800ca16 <HAL_TIM_IC_ConfigChannel+0x130>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d11b      	bne.n	800c94a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6819      	ldr	r1, [r3, #0]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f000 fe65 	bl	800d5f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	699a      	ldr	r2, [r3, #24]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 020c 	bic.w	r2, r2, #12
 800c934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6999      	ldr	r1, [r3, #24]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	619a      	str	r2, [r3, #24]
 800c948:	e060      	b.n	800ca0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d11c      	bne.n	800c98a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6818      	ldr	r0, [r3, #0]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	6819      	ldr	r1, [r3, #0]
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f000 fee9 	bl	800d736 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	699a      	ldr	r2, [r3, #24]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6999      	ldr	r1, [r3, #24]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	021a      	lsls	r2, r3, #8
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	430a      	orrs	r2, r1
 800c986:	619a      	str	r2, [r3, #24]
 800c988:	e040      	b.n	800ca0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d11b      	bne.n	800c9c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6818      	ldr	r0, [r3, #0]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	6819      	ldr	r1, [r3, #0]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	f000 ff36 	bl	800d810 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	69da      	ldr	r2, [r3, #28]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 020c 	bic.w	r2, r2, #12
 800c9b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69d9      	ldr	r1, [r3, #28]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	689a      	ldr	r2, [r3, #8]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	61da      	str	r2, [r3, #28]
 800c9c6:	e021      	b.n	800ca0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b0c      	cmp	r3, #12
 800c9cc:	d11c      	bne.n	800ca08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6818      	ldr	r0, [r3, #0]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6819      	ldr	r1, [r3, #0]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	f000 ff53 	bl	800d888 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	69da      	ldr	r2, [r3, #28]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c9f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69d9      	ldr	r1, [r3, #28]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	021a      	lsls	r2, r3, #8
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	61da      	str	r2, [r3, #28]
 800ca06:	e001      	b.n	800ca0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d101      	bne.n	800ca3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e0ff      	b.n	800cc3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b14      	cmp	r3, #20
 800ca4a:	f200 80f0 	bhi.w	800cc2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800caa9 	.word	0x0800caa9
 800ca58:	0800cc2f 	.word	0x0800cc2f
 800ca5c:	0800cc2f 	.word	0x0800cc2f
 800ca60:	0800cc2f 	.word	0x0800cc2f
 800ca64:	0800cae9 	.word	0x0800cae9
 800ca68:	0800cc2f 	.word	0x0800cc2f
 800ca6c:	0800cc2f 	.word	0x0800cc2f
 800ca70:	0800cc2f 	.word	0x0800cc2f
 800ca74:	0800cb2b 	.word	0x0800cb2b
 800ca78:	0800cc2f 	.word	0x0800cc2f
 800ca7c:	0800cc2f 	.word	0x0800cc2f
 800ca80:	0800cc2f 	.word	0x0800cc2f
 800ca84:	0800cb6b 	.word	0x0800cb6b
 800ca88:	0800cc2f 	.word	0x0800cc2f
 800ca8c:	0800cc2f 	.word	0x0800cc2f
 800ca90:	0800cc2f 	.word	0x0800cc2f
 800ca94:	0800cbad 	.word	0x0800cbad
 800ca98:	0800cc2f 	.word	0x0800cc2f
 800ca9c:	0800cc2f 	.word	0x0800cc2f
 800caa0:	0800cc2f 	.word	0x0800cc2f
 800caa4:	0800cbed 	.word	0x0800cbed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68b9      	ldr	r1, [r7, #8]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fac8 	bl	800d044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	699a      	ldr	r2, [r3, #24]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0208 	orr.w	r2, r2, #8
 800cac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	699a      	ldr	r2, [r3, #24]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f022 0204 	bic.w	r2, r2, #4
 800cad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6999      	ldr	r1, [r3, #24]
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	691a      	ldr	r2, [r3, #16]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	619a      	str	r2, [r3, #24]
      break;
 800cae6:	e0a5      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fb38 	bl	800d164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	699a      	ldr	r2, [r3, #24]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	699a      	ldr	r2, [r3, #24]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6999      	ldr	r1, [r3, #24]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	021a      	lsls	r2, r3, #8
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	619a      	str	r2, [r3, #24]
      break;
 800cb28:	e084      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68b9      	ldr	r1, [r7, #8]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fba1 	bl	800d278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69da      	ldr	r2, [r3, #28]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f042 0208 	orr.w	r2, r2, #8
 800cb44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	69da      	ldr	r2, [r3, #28]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f022 0204 	bic.w	r2, r2, #4
 800cb54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	69d9      	ldr	r1, [r3, #28]
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	691a      	ldr	r2, [r3, #16]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	430a      	orrs	r2, r1
 800cb66:	61da      	str	r2, [r3, #28]
      break;
 800cb68:	e064      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fc09 	bl	800d388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69da      	ldr	r2, [r3, #28]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	69da      	ldr	r2, [r3, #28]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69d9      	ldr	r1, [r3, #28]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	021a      	lsls	r2, r3, #8
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	430a      	orrs	r2, r1
 800cba8:	61da      	str	r2, [r3, #28]
      break;
 800cbaa:	e043      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fc52 	bl	800d45c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f042 0208 	orr.w	r2, r2, #8
 800cbc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f022 0204 	bic.w	r2, r2, #4
 800cbd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	691a      	ldr	r2, [r3, #16]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbea:	e023      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fc96 	bl	800d524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	021a      	lsls	r2, r3, #8
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc2c:	e002      	b.n	800cc34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	75fb      	strb	r3, [r7, #23]
      break;
 800cc32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3718      	adds	r7, #24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop

0800cc48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_TIM_ConfigClockSource+0x1c>
 800cc60:	2302      	movs	r3, #2
 800cc62:	e0dc      	b.n	800ce1e <HAL_TIM_ConfigClockSource+0x1d6>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	4b6a      	ldr	r3, [pc, #424]	; (800ce28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a64      	ldr	r2, [pc, #400]	; (800ce2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	f000 80a9 	beq.w	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cca0:	4a62      	ldr	r2, [pc, #392]	; (800ce2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	f200 80ae 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cca8:	4a61      	ldr	r2, [pc, #388]	; (800ce30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	f000 80a1 	beq.w	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccb0:	4a5f      	ldr	r2, [pc, #380]	; (800ce30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	f200 80a6 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccb8:	4a5e      	ldr	r2, [pc, #376]	; (800ce34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	f000 8099 	beq.w	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc0:	4a5c      	ldr	r2, [pc, #368]	; (800ce34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	f200 809e 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cccc:	f000 8091 	beq.w	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ccd4:	f200 8096 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccdc:	f000 8089 	beq.w	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cce4:	f200 808e 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccec:	d03e      	beq.n	800cd6c <HAL_TIM_ConfigClockSource+0x124>
 800ccee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccf2:	f200 8087 	bhi.w	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccfa:	f000 8086 	beq.w	800ce0a <HAL_TIM_ConfigClockSource+0x1c2>
 800ccfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd02:	d87f      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd04:	2b70      	cmp	r3, #112	; 0x70
 800cd06:	d01a      	beq.n	800cd3e <HAL_TIM_ConfigClockSource+0xf6>
 800cd08:	2b70      	cmp	r3, #112	; 0x70
 800cd0a:	d87b      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd0c:	2b60      	cmp	r3, #96	; 0x60
 800cd0e:	d050      	beq.n	800cdb2 <HAL_TIM_ConfigClockSource+0x16a>
 800cd10:	2b60      	cmp	r3, #96	; 0x60
 800cd12:	d877      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd14:	2b50      	cmp	r3, #80	; 0x50
 800cd16:	d03c      	beq.n	800cd92 <HAL_TIM_ConfigClockSource+0x14a>
 800cd18:	2b50      	cmp	r3, #80	; 0x50
 800cd1a:	d873      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd1c:	2b40      	cmp	r3, #64	; 0x40
 800cd1e:	d058      	beq.n	800cdd2 <HAL_TIM_ConfigClockSource+0x18a>
 800cd20:	2b40      	cmp	r3, #64	; 0x40
 800cd22:	d86f      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd24:	2b30      	cmp	r3, #48	; 0x30
 800cd26:	d064      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd28:	2b30      	cmp	r3, #48	; 0x30
 800cd2a:	d86b      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd2c:	2b20      	cmp	r3, #32
 800cd2e:	d060      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd30:	2b20      	cmp	r3, #32
 800cd32:	d867      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d05c      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d05a      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd3c:	e062      	b.n	800ce04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6818      	ldr	r0, [r3, #0]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	6899      	ldr	r1, [r3, #8]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	f000 fdf7 	bl	800d940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	609a      	str	r2, [r3, #8]
      break;
 800cd6a:	e04f      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6818      	ldr	r0, [r3, #0]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	6899      	ldr	r1, [r3, #8]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	685a      	ldr	r2, [r3, #4]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f000 fde0 	bl	800d940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689a      	ldr	r2, [r3, #8]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd8e:	609a      	str	r2, [r3, #8]
      break;
 800cd90:	e03c      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6859      	ldr	r1, [r3, #4]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f000 fc9a 	bl	800d6d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2150      	movs	r1, #80	; 0x50
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 fdaa 	bl	800d904 <TIM_ITRx_SetConfig>
      break;
 800cdb0:	e02c      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	6859      	ldr	r1, [r3, #4]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f000 fcf6 	bl	800d7b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2160      	movs	r1, #96	; 0x60
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fd9a 	bl	800d904 <TIM_ITRx_SetConfig>
      break;
 800cdd0:	e01c      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6859      	ldr	r1, [r3, #4]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	461a      	mov	r2, r3
 800cde0:	f000 fc7a 	bl	800d6d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2140      	movs	r1, #64	; 0x40
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 fd8a 	bl	800d904 <TIM_ITRx_SetConfig>
      break;
 800cdf0:	e00c      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f000 fd81 	bl	800d904 <TIM_ITRx_SetConfig>
      break;
 800ce02:	e003      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
      break;
 800ce08:	e000      	b.n	800ce0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	ffceff88 	.word	0xffceff88
 800ce2c:	00100040 	.word	0x00100040
 800ce30:	00100030 	.word	0x00100030
 800ce34:	00100020 	.word	0x00100020

0800ce38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b0c      	cmp	r3, #12
 800ce4a:	d831      	bhi.n	800ceb0 <HAL_TIM_ReadCapturedValue+0x78>
 800ce4c:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ce4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce52:	bf00      	nop
 800ce54:	0800ce89 	.word	0x0800ce89
 800ce58:	0800ceb1 	.word	0x0800ceb1
 800ce5c:	0800ceb1 	.word	0x0800ceb1
 800ce60:	0800ceb1 	.word	0x0800ceb1
 800ce64:	0800ce93 	.word	0x0800ce93
 800ce68:	0800ceb1 	.word	0x0800ceb1
 800ce6c:	0800ceb1 	.word	0x0800ceb1
 800ce70:	0800ceb1 	.word	0x0800ceb1
 800ce74:	0800ce9d 	.word	0x0800ce9d
 800ce78:	0800ceb1 	.word	0x0800ceb1
 800ce7c:	0800ceb1 	.word	0x0800ceb1
 800ce80:	0800ceb1 	.word	0x0800ceb1
 800ce84:	0800cea7 	.word	0x0800cea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8e:	60fb      	str	r3, [r7, #12]

      break;
 800ce90:	e00f      	b.n	800ceb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	60fb      	str	r3, [r7, #12]

      break;
 800ce9a:	e00a      	b.n	800ceb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cea2:	60fb      	str	r3, [r7, #12]

      break;
 800cea4:	e005      	b.n	800ceb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	60fb      	str	r3, [r7, #12]

      break;
 800ceae:	e000      	b.n	800ceb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ceb0:	bf00      	nop
  }

  return tmpreg;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a40      	ldr	r2, [pc, #256]	; (800d024 <TIM_Base_SetConfig+0x114>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d013      	beq.n	800cf50 <TIM_Base_SetConfig+0x40>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf2e:	d00f      	beq.n	800cf50 <TIM_Base_SetConfig+0x40>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a3d      	ldr	r2, [pc, #244]	; (800d028 <TIM_Base_SetConfig+0x118>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d00b      	beq.n	800cf50 <TIM_Base_SetConfig+0x40>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a3c      	ldr	r2, [pc, #240]	; (800d02c <TIM_Base_SetConfig+0x11c>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d007      	beq.n	800cf50 <TIM_Base_SetConfig+0x40>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a3b      	ldr	r2, [pc, #236]	; (800d030 <TIM_Base_SetConfig+0x120>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d003      	beq.n	800cf50 <TIM_Base_SetConfig+0x40>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a3a      	ldr	r2, [pc, #232]	; (800d034 <TIM_Base_SetConfig+0x124>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d108      	bne.n	800cf62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a2f      	ldr	r2, [pc, #188]	; (800d024 <TIM_Base_SetConfig+0x114>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d01f      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf70:	d01b      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a2c      	ldr	r2, [pc, #176]	; (800d028 <TIM_Base_SetConfig+0x118>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d017      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a2b      	ldr	r2, [pc, #172]	; (800d02c <TIM_Base_SetConfig+0x11c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d013      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2a      	ldr	r2, [pc, #168]	; (800d030 <TIM_Base_SetConfig+0x120>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d00f      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a29      	ldr	r2, [pc, #164]	; (800d034 <TIM_Base_SetConfig+0x124>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d00b      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a28      	ldr	r2, [pc, #160]	; (800d038 <TIM_Base_SetConfig+0x128>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d007      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a27      	ldr	r2, [pc, #156]	; (800d03c <TIM_Base_SetConfig+0x12c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d003      	beq.n	800cfaa <TIM_Base_SetConfig+0x9a>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a26      	ldr	r2, [pc, #152]	; (800d040 <TIM_Base_SetConfig+0x130>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d108      	bne.n	800cfbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	689a      	ldr	r2, [r3, #8]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a10      	ldr	r2, [pc, #64]	; (800d024 <TIM_Base_SetConfig+0x114>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d00f      	beq.n	800d008 <TIM_Base_SetConfig+0xf8>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a12      	ldr	r2, [pc, #72]	; (800d034 <TIM_Base_SetConfig+0x124>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d00b      	beq.n	800d008 <TIM_Base_SetConfig+0xf8>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a11      	ldr	r2, [pc, #68]	; (800d038 <TIM_Base_SetConfig+0x128>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d007      	beq.n	800d008 <TIM_Base_SetConfig+0xf8>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a10      	ldr	r2, [pc, #64]	; (800d03c <TIM_Base_SetConfig+0x12c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d003      	beq.n	800d008 <TIM_Base_SetConfig+0xf8>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a0f      	ldr	r2, [pc, #60]	; (800d040 <TIM_Base_SetConfig+0x130>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d103      	bne.n	800d010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	691a      	ldr	r2, [r3, #16]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	615a      	str	r2, [r3, #20]
}
 800d016:	bf00      	nop
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	40010000 	.word	0x40010000
 800d028:	40000400 	.word	0x40000400
 800d02c:	40000800 	.word	0x40000800
 800d030:	40000c00 	.word	0x40000c00
 800d034:	40010400 	.word	0x40010400
 800d038:	40014000 	.word	0x40014000
 800d03c:	40014400 	.word	0x40014400
 800d040:	40014800 	.word	0x40014800

0800d044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f023 0201 	bic.w	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4b37      	ldr	r3, [pc, #220]	; (800d14c <TIM_OC1_SetConfig+0x108>)
 800d070:	4013      	ands	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	4313      	orrs	r3, r2
 800d084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f023 0302 	bic.w	r3, r3, #2
 800d08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	4313      	orrs	r3, r2
 800d096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a2d      	ldr	r2, [pc, #180]	; (800d150 <TIM_OC1_SetConfig+0x10c>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d00f      	beq.n	800d0c0 <TIM_OC1_SetConfig+0x7c>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a2c      	ldr	r2, [pc, #176]	; (800d154 <TIM_OC1_SetConfig+0x110>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <TIM_OC1_SetConfig+0x7c>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a2b      	ldr	r2, [pc, #172]	; (800d158 <TIM_OC1_SetConfig+0x114>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d007      	beq.n	800d0c0 <TIM_OC1_SetConfig+0x7c>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a2a      	ldr	r2, [pc, #168]	; (800d15c <TIM_OC1_SetConfig+0x118>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d003      	beq.n	800d0c0 <TIM_OC1_SetConfig+0x7c>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a29      	ldr	r2, [pc, #164]	; (800d160 <TIM_OC1_SetConfig+0x11c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d10c      	bne.n	800d0da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f023 0308 	bic.w	r3, r3, #8
 800d0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	697a      	ldr	r2, [r7, #20]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f023 0304 	bic.w	r3, r3, #4
 800d0d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a1c      	ldr	r2, [pc, #112]	; (800d150 <TIM_OC1_SetConfig+0x10c>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00f      	beq.n	800d102 <TIM_OC1_SetConfig+0xbe>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a1b      	ldr	r2, [pc, #108]	; (800d154 <TIM_OC1_SetConfig+0x110>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d00b      	beq.n	800d102 <TIM_OC1_SetConfig+0xbe>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a1a      	ldr	r2, [pc, #104]	; (800d158 <TIM_OC1_SetConfig+0x114>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d007      	beq.n	800d102 <TIM_OC1_SetConfig+0xbe>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a19      	ldr	r2, [pc, #100]	; (800d15c <TIM_OC1_SetConfig+0x118>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d003      	beq.n	800d102 <TIM_OC1_SetConfig+0xbe>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a18      	ldr	r2, [pc, #96]	; (800d160 <TIM_OC1_SetConfig+0x11c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d111      	bne.n	800d126 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	4313      	orrs	r3, r2
 800d11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4313      	orrs	r3, r2
 800d124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	621a      	str	r2, [r3, #32]
}
 800d140:	bf00      	nop
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	fffeff8f 	.word	0xfffeff8f
 800d150:	40010000 	.word	0x40010000
 800d154:	40010400 	.word	0x40010400
 800d158:	40014000 	.word	0x40014000
 800d15c:	40014400 	.word	0x40014400
 800d160:	40014800 	.word	0x40014800

0800d164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	f023 0210 	bic.w	r2, r3, #16
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	4b34      	ldr	r3, [pc, #208]	; (800d260 <TIM_OC2_SetConfig+0xfc>)
 800d190:	4013      	ands	r3, r2
 800d192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	021b      	lsls	r3, r3, #8
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	f023 0320 	bic.w	r3, r3, #32
 800d1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a29      	ldr	r2, [pc, #164]	; (800d264 <TIM_OC2_SetConfig+0x100>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d003      	beq.n	800d1cc <TIM_OC2_SetConfig+0x68>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a28      	ldr	r2, [pc, #160]	; (800d268 <TIM_OC2_SetConfig+0x104>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d10d      	bne.n	800d1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a1e      	ldr	r2, [pc, #120]	; (800d264 <TIM_OC2_SetConfig+0x100>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d00f      	beq.n	800d210 <TIM_OC2_SetConfig+0xac>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a1d      	ldr	r2, [pc, #116]	; (800d268 <TIM_OC2_SetConfig+0x104>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d00b      	beq.n	800d210 <TIM_OC2_SetConfig+0xac>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a1c      	ldr	r2, [pc, #112]	; (800d26c <TIM_OC2_SetConfig+0x108>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d007      	beq.n	800d210 <TIM_OC2_SetConfig+0xac>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a1b      	ldr	r2, [pc, #108]	; (800d270 <TIM_OC2_SetConfig+0x10c>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d003      	beq.n	800d210 <TIM_OC2_SetConfig+0xac>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a1a      	ldr	r2, [pc, #104]	; (800d274 <TIM_OC2_SetConfig+0x110>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d113      	bne.n	800d238 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d21e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	4313      	orrs	r3, r2
 800d22a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	4313      	orrs	r3, r2
 800d236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	685a      	ldr	r2, [r3, #4]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	697a      	ldr	r2, [r7, #20]
 800d250:	621a      	str	r2, [r3, #32]
}
 800d252:	bf00      	nop
 800d254:	371c      	adds	r7, #28
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	feff8fff 	.word	0xfeff8fff
 800d264:	40010000 	.word	0x40010000
 800d268:	40010400 	.word	0x40010400
 800d26c:	40014000 	.word	0x40014000
 800d270:	40014400 	.word	0x40014400
 800d274:	40014800 	.word	0x40014800

0800d278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	4b33      	ldr	r3, [pc, #204]	; (800d370 <TIM_OC3_SetConfig+0xf8>)
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 0303 	bic.w	r3, r3, #3
 800d2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	021b      	lsls	r3, r3, #8
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a28      	ldr	r2, [pc, #160]	; (800d374 <TIM_OC3_SetConfig+0xfc>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d003      	beq.n	800d2de <TIM_OC3_SetConfig+0x66>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a27      	ldr	r2, [pc, #156]	; (800d378 <TIM_OC3_SetConfig+0x100>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d10d      	bne.n	800d2fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a1d      	ldr	r2, [pc, #116]	; (800d374 <TIM_OC3_SetConfig+0xfc>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00f      	beq.n	800d322 <TIM_OC3_SetConfig+0xaa>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a1c      	ldr	r2, [pc, #112]	; (800d378 <TIM_OC3_SetConfig+0x100>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d00b      	beq.n	800d322 <TIM_OC3_SetConfig+0xaa>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a1b      	ldr	r2, [pc, #108]	; (800d37c <TIM_OC3_SetConfig+0x104>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d007      	beq.n	800d322 <TIM_OC3_SetConfig+0xaa>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a1a      	ldr	r2, [pc, #104]	; (800d380 <TIM_OC3_SetConfig+0x108>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d003      	beq.n	800d322 <TIM_OC3_SetConfig+0xaa>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a19      	ldr	r2, [pc, #100]	; (800d384 <TIM_OC3_SetConfig+0x10c>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d113      	bne.n	800d34a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	699b      	ldr	r3, [r3, #24]
 800d342:	011b      	lsls	r3, r3, #4
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	4313      	orrs	r3, r2
 800d348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	621a      	str	r2, [r3, #32]
}
 800d364:	bf00      	nop
 800d366:	371c      	adds	r7, #28
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	fffeff8f 	.word	0xfffeff8f
 800d374:	40010000 	.word	0x40010000
 800d378:	40010400 	.word	0x40010400
 800d37c:	40014000 	.word	0x40014000
 800d380:	40014400 	.word	0x40014400
 800d384:	40014800 	.word	0x40014800

0800d388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d388:	b480      	push	{r7}
 800d38a:	b087      	sub	sp, #28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	4b24      	ldr	r3, [pc, #144]	; (800d444 <TIM_OC4_SetConfig+0xbc>)
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	021b      	lsls	r3, r3, #8
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	031b      	lsls	r3, r3, #12
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a19      	ldr	r2, [pc, #100]	; (800d448 <TIM_OC4_SetConfig+0xc0>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d00f      	beq.n	800d408 <TIM_OC4_SetConfig+0x80>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a18      	ldr	r2, [pc, #96]	; (800d44c <TIM_OC4_SetConfig+0xc4>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d00b      	beq.n	800d408 <TIM_OC4_SetConfig+0x80>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a17      	ldr	r2, [pc, #92]	; (800d450 <TIM_OC4_SetConfig+0xc8>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d007      	beq.n	800d408 <TIM_OC4_SetConfig+0x80>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a16      	ldr	r2, [pc, #88]	; (800d454 <TIM_OC4_SetConfig+0xcc>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d003      	beq.n	800d408 <TIM_OC4_SetConfig+0x80>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a15      	ldr	r2, [pc, #84]	; (800d458 <TIM_OC4_SetConfig+0xd0>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d109      	bne.n	800d41c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d40e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	019b      	lsls	r3, r3, #6
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	4313      	orrs	r3, r2
 800d41a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	621a      	str	r2, [r3, #32]
}
 800d436:	bf00      	nop
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	feff8fff 	.word	0xfeff8fff
 800d448:	40010000 	.word	0x40010000
 800d44c:	40010400 	.word	0x40010400
 800d450:	40014000 	.word	0x40014000
 800d454:	40014400 	.word	0x40014400
 800d458:	40014800 	.word	0x40014800

0800d45c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a1b      	ldr	r3, [r3, #32]
 800d46a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4b21      	ldr	r3, [pc, #132]	; (800d50c <TIM_OC5_SetConfig+0xb0>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	4313      	orrs	r3, r2
 800d494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d49c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	041b      	lsls	r3, r3, #16
 800d4a4:	693a      	ldr	r2, [r7, #16]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a18      	ldr	r2, [pc, #96]	; (800d510 <TIM_OC5_SetConfig+0xb4>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d00f      	beq.n	800d4d2 <TIM_OC5_SetConfig+0x76>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a17      	ldr	r2, [pc, #92]	; (800d514 <TIM_OC5_SetConfig+0xb8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d00b      	beq.n	800d4d2 <TIM_OC5_SetConfig+0x76>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a16      	ldr	r2, [pc, #88]	; (800d518 <TIM_OC5_SetConfig+0xbc>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d007      	beq.n	800d4d2 <TIM_OC5_SetConfig+0x76>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a15      	ldr	r2, [pc, #84]	; (800d51c <TIM_OC5_SetConfig+0xc0>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d003      	beq.n	800d4d2 <TIM_OC5_SetConfig+0x76>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a14      	ldr	r2, [pc, #80]	; (800d520 <TIM_OC5_SetConfig+0xc4>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d109      	bne.n	800d4e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	621a      	str	r2, [r3, #32]
}
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	fffeff8f 	.word	0xfffeff8f
 800d510:	40010000 	.word	0x40010000
 800d514:	40010400 	.word	0x40010400
 800d518:	40014000 	.word	0x40014000
 800d51c:	40014400 	.word	0x40014400
 800d520:	40014800 	.word	0x40014800

0800d524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d524:	b480      	push	{r7}
 800d526:	b087      	sub	sp, #28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	4b22      	ldr	r3, [pc, #136]	; (800d5d8 <TIM_OC6_SetConfig+0xb4>)
 800d550:	4013      	ands	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	021b      	lsls	r3, r3, #8
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	051b      	lsls	r3, r3, #20
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	4313      	orrs	r3, r2
 800d572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a19      	ldr	r2, [pc, #100]	; (800d5dc <TIM_OC6_SetConfig+0xb8>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d00f      	beq.n	800d59c <TIM_OC6_SetConfig+0x78>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a18      	ldr	r2, [pc, #96]	; (800d5e0 <TIM_OC6_SetConfig+0xbc>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d00b      	beq.n	800d59c <TIM_OC6_SetConfig+0x78>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a17      	ldr	r2, [pc, #92]	; (800d5e4 <TIM_OC6_SetConfig+0xc0>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d007      	beq.n	800d59c <TIM_OC6_SetConfig+0x78>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4a16      	ldr	r2, [pc, #88]	; (800d5e8 <TIM_OC6_SetConfig+0xc4>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d003      	beq.n	800d59c <TIM_OC6_SetConfig+0x78>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a15      	ldr	r2, [pc, #84]	; (800d5ec <TIM_OC6_SetConfig+0xc8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d109      	bne.n	800d5b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	029b      	lsls	r3, r3, #10
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	621a      	str	r2, [r3, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	371c      	adds	r7, #28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	feff8fff 	.word	0xfeff8fff
 800d5dc:	40010000 	.word	0x40010000
 800d5e0:	40010400 	.word	0x40010400
 800d5e4:	40014000 	.word	0x40014000
 800d5e8:	40014400 	.word	0x40014400
 800d5ec:	40014800 	.word	0x40014800

0800d5f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
 800d5fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	f023 0201 	bic.w	r2, r3, #1
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4a28      	ldr	r2, [pc, #160]	; (800d6bc <TIM_TI1_SetConfig+0xcc>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d01b      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d624:	d017      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	4a25      	ldr	r2, [pc, #148]	; (800d6c0 <TIM_TI1_SetConfig+0xd0>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d013      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4a24      	ldr	r2, [pc, #144]	; (800d6c4 <TIM_TI1_SetConfig+0xd4>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00f      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	4a23      	ldr	r2, [pc, #140]	; (800d6c8 <TIM_TI1_SetConfig+0xd8>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d00b      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	4a22      	ldr	r2, [pc, #136]	; (800d6cc <TIM_TI1_SetConfig+0xdc>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d007      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	4a21      	ldr	r2, [pc, #132]	; (800d6d0 <TIM_TI1_SetConfig+0xe0>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d003      	beq.n	800d656 <TIM_TI1_SetConfig+0x66>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	4a20      	ldr	r2, [pc, #128]	; (800d6d4 <TIM_TI1_SetConfig+0xe4>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d101      	bne.n	800d65a <TIM_TI1_SetConfig+0x6a>
 800d656:	2301      	movs	r3, #1
 800d658:	e000      	b.n	800d65c <TIM_TI1_SetConfig+0x6c>
 800d65a:	2300      	movs	r3, #0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d008      	beq.n	800d672 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f023 0303 	bic.w	r3, r3, #3
 800d666:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	e003      	b.n	800d67a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f043 0301 	orr.w	r3, r3, #1
 800d678:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	b2db      	uxtb	r3, r3
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	f023 030a 	bic.w	r3, r3, #10
 800d694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	f003 030a 	and.w	r3, r3, #10
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	693a      	ldr	r2, [r7, #16]
 800d6ac:	621a      	str	r2, [r3, #32]
}
 800d6ae:	bf00      	nop
 800d6b0:	371c      	adds	r7, #28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	40010000 	.word	0x40010000
 800d6c0:	40000400 	.word	0x40000400
 800d6c4:	40000800 	.word	0x40000800
 800d6c8:	40000c00 	.word	0x40000c00
 800d6cc:	40010400 	.word	0x40010400
 800d6d0:	40001800 	.word	0x40001800
 800d6d4:	40014000 	.word	0x40014000

0800d6d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	f023 0201 	bic.w	r2, r3, #1
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	f023 030a 	bic.w	r3, r3, #10
 800d714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	621a      	str	r2, [r3, #32]
}
 800d72a:	bf00      	nop
 800d72c:	371c      	adds	r7, #28
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d736:	b480      	push	{r7}
 800d738:	b087      	sub	sp, #28
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	60b9      	str	r1, [r7, #8]
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	f023 0210 	bic.w	r2, r3, #16
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6a1b      	ldr	r3, [r3, #32]
 800d75a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d762:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	021b      	lsls	r3, r3, #8
 800d768:	697a      	ldr	r2, [r7, #20]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	031b      	lsls	r3, r3, #12
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	4313      	orrs	r3, r2
 800d780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	4313      	orrs	r3, r2
 800d796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	697a      	ldr	r2, [r7, #20]
 800d79c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	693a      	ldr	r2, [r7, #16]
 800d7a2:	621a      	str	r2, [r3, #32]
}
 800d7a4:	bf00      	nop
 800d7a6:	371c      	adds	r7, #28
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	f023 0210 	bic.w	r2, r3, #16
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	031b      	lsls	r3, r3, #12
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	011b      	lsls	r3, r3, #4
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	621a      	str	r2, [r3, #32]
}
 800d804:	bf00      	nop
 800d806:	371c      	adds	r7, #28
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f023 0303 	bic.w	r3, r3, #3
 800d83c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4313      	orrs	r3, r2
 800d844:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d84c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	011b      	lsls	r3, r3, #4
 800d852:	b2db      	uxtb	r3, r3
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	4313      	orrs	r3, r2
 800d858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d860:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	021b      	lsls	r3, r3, #8
 800d866:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	621a      	str	r2, [r3, #32]
}
 800d87c:	bf00      	nop
 800d87e:	371c      	adds	r7, #28
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6a1b      	ldr	r3, [r3, #32]
 800d89a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6a1b      	ldr	r3, [r3, #32]
 800d8ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	031b      	lsls	r3, r3, #12
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d8da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	031b      	lsls	r3, r3, #12
 800d8e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	621a      	str	r2, [r3, #32]
}
 800d8f6:	bf00      	nop
 800d8f8:	371c      	adds	r7, #28
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	4b09      	ldr	r3, [pc, #36]	; (800d93c <TIM_ITRx_SetConfig+0x38>)
 800d918:	4013      	ands	r3, r2
 800d91a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	4313      	orrs	r3, r2
 800d922:	f043 0307 	orr.w	r3, r3, #7
 800d926:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	609a      	str	r2, [r3, #8]
}
 800d92e:	bf00      	nop
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	ffcfff8f 	.word	0xffcfff8f

0800d940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d95a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	021a      	lsls	r2, r3, #8
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	431a      	orrs	r2, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	4313      	orrs	r3, r2
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	609a      	str	r2, [r3, #8]
}
 800d974:	bf00      	nop
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f003 031f 	and.w	r3, r3, #31
 800d992:	2201      	movs	r2, #1
 800d994:	fa02 f303 	lsl.w	r3, r2, r3
 800d998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6a1a      	ldr	r2, [r3, #32]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	43db      	mvns	r3, r3
 800d9a2:	401a      	ands	r2, r3
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6a1a      	ldr	r2, [r3, #32]
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f003 031f 	and.w	r3, r3, #31
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	621a      	str	r2, [r3, #32]
}
 800d9be:	bf00      	nop
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
	...

0800d9cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d101      	bne.n	800d9e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9e0:	2302      	movs	r3, #2
 800d9e2:	e06d      	b.n	800dac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a30      	ldr	r2, [pc, #192]	; (800dacc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d004      	beq.n	800da18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a2f      	ldr	r2, [pc, #188]	; (800dad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d108      	bne.n	800da2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	4313      	orrs	r3, r2
 800da28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	4313      	orrs	r3, r2
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a20      	ldr	r2, [pc, #128]	; (800dacc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d022      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da56:	d01d      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1d      	ldr	r2, [pc, #116]	; (800dad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d018      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a1c      	ldr	r2, [pc, #112]	; (800dad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d013      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a1a      	ldr	r2, [pc, #104]	; (800dadc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d00e      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a15      	ldr	r2, [pc, #84]	; (800dad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d009      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a16      	ldr	r2, [pc, #88]	; (800dae0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d004      	beq.n	800da94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a15      	ldr	r2, [pc, #84]	; (800dae4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d10c      	bne.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	40010000 	.word	0x40010000
 800dad0:	40010400 	.word	0x40010400
 800dad4:	40000400 	.word	0x40000400
 800dad8:	40000800 	.word	0x40000800
 800dadc:	40000c00 	.word	0x40000c00
 800dae0:	40001800 	.word	0x40001800
 800dae4:	40014000 	.word	0x40014000

0800dae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e04a      	b.n	800dbcc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d106      	bne.n	800db4e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7f4 faaf 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2224      	movs	r2, #36	; 0x24
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f022 0201 	bic.w	r2, r2, #1
 800db64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fcfa 	bl	800e560 <UART_SetConfig>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d101      	bne.n	800db76 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e02a      	b.n	800dbcc <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fa56 	bl	800f030 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689a      	ldr	r2, [r3, #8]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800dba2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	689a      	ldr	r2, [r3, #8]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f042 0208 	orr.w	r2, r2, #8
 800dbb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f042 0201 	orr.w	r2, r2, #1
 800dbc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f001 fad5 	bl	800f174 <UART_CheckIdleState>
 800dbca:	4603      	mov	r3, r0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b091      	sub	sp, #68	; 0x44
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe8:	2b20      	cmp	r3, #32
 800dbea:	f040 808c 	bne.w	800dd06 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <HAL_UART_Transmit_IT+0x26>
 800dbf4:	88fb      	ldrh	r3, [r7, #6]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e084      	b.n	800dd08 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_UART_Transmit_IT+0x38>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e07d      	b.n	800dd08 <HAL_UART_Transmit_IT+0x134>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	88fa      	ldrh	r2, [r7, #6]
 800dc1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	88fa      	ldrh	r2, [r7, #6]
 800dc26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2221      	movs	r2, #33	; 0x21
 800dc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc48:	d12e      	bne.n	800dca8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc52:	d107      	bne.n	800dc64 <HAL_UART_Transmit_IT+0x90>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d103      	bne.n	800dc64 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4a2d      	ldr	r2, [pc, #180]	; (800dd14 <HAL_UART_Transmit_IT+0x140>)
 800dc60:	675a      	str	r2, [r3, #116]	; 0x74
 800dc62:	e002      	b.n	800dc6a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	4a2c      	ldr	r2, [pc, #176]	; (800dd18 <HAL_UART_Transmit_IT+0x144>)
 800dc68:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3308      	adds	r3, #8
 800dc78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7c:	e853 3f00 	ldrex	r3, [r3]
 800dc80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc88:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc92:	637a      	str	r2, [r7, #52]	; 0x34
 800dc94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc9a:	e841 2300 	strex	r3, r2, [r1]
 800dc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1e5      	bne.n	800dc72 <HAL_UART_Transmit_IT+0x9e>
 800dca6:	e02c      	b.n	800dd02 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcb0:	d107      	bne.n	800dcc2 <HAL_UART_Transmit_IT+0xee>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d103      	bne.n	800dcc2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4a17      	ldr	r2, [pc, #92]	; (800dd1c <HAL_UART_Transmit_IT+0x148>)
 800dcbe:	675a      	str	r2, [r3, #116]	; 0x74
 800dcc0:	e002      	b.n	800dcc8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	4a16      	ldr	r2, [pc, #88]	; (800dd20 <HAL_UART_Transmit_IT+0x14c>)
 800dcc6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	613b      	str	r3, [r7, #16]
   return(result);
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcee:	623b      	str	r3, [r7, #32]
 800dcf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	69f9      	ldr	r1, [r7, #28]
 800dcf4:	6a3a      	ldr	r2, [r7, #32]
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e6      	bne.n	800dcd0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e000      	b.n	800dd08 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800dd06:	2302      	movs	r3, #2
  }
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3744      	adds	r7, #68	; 0x44
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	0800fa9d 	.word	0x0800fa9d
 800dd18:	0800f9bd 	.word	0x0800f9bd
 800dd1c:	0800f8fb 	.word	0x0800f8fb
 800dd20:	0800f843 	.word	0x0800f843

0800dd24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	; 0x28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd38:	2b20      	cmp	r3, #32
 800dd3a:	d142      	bne.n	800ddc2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <HAL_UART_Receive_DMA+0x24>
 800dd42:	88fb      	ldrh	r3, [r7, #6]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e03b      	b.n	800ddc4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d101      	bne.n	800dd5a <HAL_UART_Receive_DMA+0x36>
 800dd56:	2302      	movs	r3, #2
 800dd58:	e034      	b.n	800ddc4 <HAL_UART_Receive_DMA+0xa0>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a17      	ldr	r2, [pc, #92]	; (800ddcc <HAL_UART_Receive_DMA+0xa8>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d01f      	beq.n	800ddb2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d018      	beq.n	800ddb2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	e853 3f00 	ldrex	r3, [r3]
 800dd8c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd94:	627b      	str	r3, [r7, #36]	; 0x24
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	623b      	str	r3, [r7, #32]
 800dda0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda2:	69f9      	ldr	r1, [r7, #28]
 800dda4:	6a3a      	ldr	r2, [r7, #32]
 800dda6:	e841 2300 	strex	r3, r2, [r1]
 800ddaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1e6      	bne.n	800dd80 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f001 faef 	bl	800f39c <UART_Start_Receive_DMA>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	e000      	b.n	800ddc4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ddc2:	2302      	movs	r3, #2
  }
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3728      	adds	r7, #40	; 0x28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	58000c00 	.word	0x58000c00

0800ddd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b0ba      	sub	sp, #232	; 0xe8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ddfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800ddfe:	4013      	ands	r3, r2
 800de00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800de04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d11b      	bne.n	800de44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de10:	f003 0320 	and.w	r3, r3, #32
 800de14:	2b00      	cmp	r3, #0
 800de16:	d015      	beq.n	800de44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de1c:	f003 0320 	and.w	r3, r3, #32
 800de20:	2b00      	cmp	r3, #0
 800de22:	d105      	bne.n	800de30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d009      	beq.n	800de44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 835a 	beq.w	800e4ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	4798      	blx	r3
      }
      return;
 800de42:	e354      	b.n	800e4ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 811f 	beq.w	800e08c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de52:	4b8b      	ldr	r3, [pc, #556]	; (800e080 <HAL_UART_IRQHandler+0x2b0>)
 800de54:	4013      	ands	r3, r2
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de5e:	4b89      	ldr	r3, [pc, #548]	; (800e084 <HAL_UART_IRQHandler+0x2b4>)
 800de60:	4013      	ands	r3, r2
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 8112 	beq.w	800e08c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d011      	beq.n	800de98 <HAL_UART_IRQHandler+0xc8>
 800de74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2201      	movs	r2, #1
 800de86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de8e:	f043 0201 	orr.w	r2, r3, #1
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de9c:	f003 0302 	and.w	r3, r3, #2
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d011      	beq.n	800dec8 <HAL_UART_IRQHandler+0xf8>
 800dea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2202      	movs	r2, #2
 800deb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800debe:	f043 0204 	orr.w	r2, r3, #4
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d011      	beq.n	800def8 <HAL_UART_IRQHandler+0x128>
 800ded4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00b      	beq.n	800def8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2204      	movs	r2, #4
 800dee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deee:	f043 0202 	orr.w	r2, r3, #2
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800def8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800defc:	f003 0308 	and.w	r3, r3, #8
 800df00:	2b00      	cmp	r3, #0
 800df02:	d017      	beq.n	800df34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df08:	f003 0320 	and.w	r3, r3, #32
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d105      	bne.n	800df1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800df10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df14:	4b5a      	ldr	r3, [pc, #360]	; (800e080 <HAL_UART_IRQHandler+0x2b0>)
 800df16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00b      	beq.n	800df34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2208      	movs	r2, #8
 800df22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df2a:	f043 0208 	orr.w	r2, r3, #8
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d012      	beq.n	800df66 <HAL_UART_IRQHandler+0x196>
 800df40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00c      	beq.n	800df66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df5c:	f043 0220 	orr.w	r2, r3, #32
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 82c0 	beq.w	800e4f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df76:	f003 0320 	and.w	r3, r3, #32
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d013      	beq.n	800dfa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df82:	f003 0320 	and.w	r3, r3, #32
 800df86:	2b00      	cmp	r3, #0
 800df88:	d105      	bne.n	800df96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d007      	beq.n	800dfa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d003      	beq.n	800dfa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfba:	2b40      	cmp	r3, #64	; 0x40
 800dfbc:	d005      	beq.n	800dfca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dfbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d04f      	beq.n	800e06a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f001 fad0 	bl	800f570 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfda:	2b40      	cmp	r3, #64	; 0x40
 800dfdc:	d141      	bne.n	800e062 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3308      	adds	r3, #8
 800dfe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3308      	adds	r3, #8
 800e006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e00a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e00e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e01a:	e841 2300 	strex	r3, r2, [r1]
 800e01e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1d9      	bne.n	800dfde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d013      	beq.n	800e05a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e036:	4a14      	ldr	r2, [pc, #80]	; (800e088 <HAL_UART_IRQHandler+0x2b8>)
 800e038:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f7 f9a4 	bl	800538c <HAL_DMA_Abort_IT>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d017      	beq.n	800e07a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e054:	4610      	mov	r0, r2
 800e056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e058:	e00f      	b.n	800e07a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa6a 	bl	800e534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e060:	e00b      	b.n	800e07a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fa66 	bl	800e534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e068:	e007      	b.n	800e07a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fa62 	bl	800e534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e078:	e23b      	b.n	800e4f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07a:	bf00      	nop
    return;
 800e07c:	e239      	b.n	800e4f2 <HAL_UART_IRQHandler+0x722>
 800e07e:	bf00      	nop
 800e080:	10000001 	.word	0x10000001
 800e084:	04000120 	.word	0x04000120
 800e088:	0800f817 	.word	0x0800f817

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e090:	2b01      	cmp	r3, #1
 800e092:	f040 81ce 	bne.w	800e432 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e09a:	f003 0310 	and.w	r3, r3, #16
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 81c7 	beq.w	800e432 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0a8:	f003 0310 	and.w	r3, r3, #16
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 81c0 	beq.w	800e432 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2210      	movs	r2, #16
 800e0b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c4:	2b40      	cmp	r3, #64	; 0x40
 800e0c6:	f040 813b 	bne.w	800e340 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a8b      	ldr	r2, [pc, #556]	; (800e300 <HAL_UART_IRQHandler+0x530>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d059      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a89      	ldr	r2, [pc, #548]	; (800e304 <HAL_UART_IRQHandler+0x534>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d053      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a87      	ldr	r2, [pc, #540]	; (800e308 <HAL_UART_IRQHandler+0x538>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d04d      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a85      	ldr	r2, [pc, #532]	; (800e30c <HAL_UART_IRQHandler+0x53c>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d047      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a83      	ldr	r2, [pc, #524]	; (800e310 <HAL_UART_IRQHandler+0x540>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d041      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a81      	ldr	r2, [pc, #516]	; (800e314 <HAL_UART_IRQHandler+0x544>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d03b      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a7f      	ldr	r2, [pc, #508]	; (800e318 <HAL_UART_IRQHandler+0x548>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d035      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a7d      	ldr	r2, [pc, #500]	; (800e31c <HAL_UART_IRQHandler+0x54c>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d02f      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a7b      	ldr	r2, [pc, #492]	; (800e320 <HAL_UART_IRQHandler+0x550>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d029      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a79      	ldr	r2, [pc, #484]	; (800e324 <HAL_UART_IRQHandler+0x554>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d023      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a77      	ldr	r2, [pc, #476]	; (800e328 <HAL_UART_IRQHandler+0x558>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d01d      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a75      	ldr	r2, [pc, #468]	; (800e32c <HAL_UART_IRQHandler+0x55c>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d017      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a73      	ldr	r2, [pc, #460]	; (800e330 <HAL_UART_IRQHandler+0x560>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d011      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a71      	ldr	r2, [pc, #452]	; (800e334 <HAL_UART_IRQHandler+0x564>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d00b      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a6f      	ldr	r2, [pc, #444]	; (800e338 <HAL_UART_IRQHandler+0x568>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d005      	beq.n	800e18a <HAL_UART_IRQHandler+0x3ba>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a6d      	ldr	r2, [pc, #436]	; (800e33c <HAL_UART_IRQHandler+0x56c>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d105      	bne.n	800e196 <HAL_UART_IRQHandler+0x3c6>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	b29b      	uxth	r3, r3
 800e194:	e004      	b.n	800e1a0 <HAL_UART_IRQHandler+0x3d0>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e1a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 81a4 	beq.w	800e4f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	f080 819c 	bcs.w	800e4f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1d2:	f000 8086 	beq.w	800e2e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1e2:	e853 3f00 	ldrex	r3, [r3]
 800e1e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e204:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e208:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e20c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e210:	e841 2300 	strex	r3, r2, [r1]
 800e214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1da      	bne.n	800e1d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e22a:	e853 3f00 	ldrex	r3, [r3]
 800e22e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e232:	f023 0301 	bic.w	r3, r3, #1
 800e236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3308      	adds	r3, #8
 800e240:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e244:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e248:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e24c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e1      	bne.n	800e220 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	3308      	adds	r3, #8
 800e262:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e266:	e853 3f00 	ldrex	r3, [r3]
 800e26a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e26c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e26e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3308      	adds	r3, #8
 800e27c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e280:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e282:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e284:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e286:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e288:	e841 2300 	strex	r3, r2, [r1]
 800e28c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e28e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1e3      	bne.n	800e25c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2220      	movs	r2, #32
 800e298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2b2:	f023 0310 	bic.w	r3, r3, #16
 800e2b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2cc:	e841 2300 	strex	r3, r2, [r1]
 800e2d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e4      	bne.n	800e2a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f6 fd37 	bl	8004d50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f926 	bl	800e548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2fc:	e0fb      	b.n	800e4f6 <HAL_UART_IRQHandler+0x726>
 800e2fe:	bf00      	nop
 800e300:	40020010 	.word	0x40020010
 800e304:	40020028 	.word	0x40020028
 800e308:	40020040 	.word	0x40020040
 800e30c:	40020058 	.word	0x40020058
 800e310:	40020070 	.word	0x40020070
 800e314:	40020088 	.word	0x40020088
 800e318:	400200a0 	.word	0x400200a0
 800e31c:	400200b8 	.word	0x400200b8
 800e320:	40020410 	.word	0x40020410
 800e324:	40020428 	.word	0x40020428
 800e328:	40020440 	.word	0x40020440
 800e32c:	40020458 	.word	0x40020458
 800e330:	40020470 	.word	0x40020470
 800e334:	40020488 	.word	0x40020488
 800e338:	400204a0 	.word	0x400204a0
 800e33c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 80cc 	beq.w	800e4fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 80c7 	beq.w	800e4fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e374:	e853 3f00 	ldrex	r3, [r3]
 800e378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e37c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	461a      	mov	r2, r3
 800e38a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e38e:	647b      	str	r3, [r7, #68]	; 0x44
 800e390:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e396:	e841 2300 	strex	r3, r2, [r1]
 800e39a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1e4      	bne.n	800e36c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800e3b2:	6a3a      	ldr	r2, [r7, #32]
 800e3b4:	4b54      	ldr	r3, [pc, #336]	; (800e508 <HAL_UART_IRQHandler+0x738>)
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	3308      	adds	r3, #8
 800e3c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e3c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ce:	e841 2300 	strex	r3, r2, [r1]
 800e3d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1e3      	bne.n	800e3a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2220      	movs	r2, #32
 800e3de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	e853 3f00 	ldrex	r3, [r3]
 800e3fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f023 0310 	bic.w	r3, r3, #16
 800e402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e410:	61fb      	str	r3, [r7, #28]
 800e412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e414:	69b9      	ldr	r1, [r7, #24]
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	e841 2300 	strex	r3, r2, [r1]
 800e41c:	617b      	str	r3, [r7, #20]
   return(result);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1e4      	bne.n	800e3ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 f88c 	bl	800e548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e430:	e063      	b.n	800e4fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00e      	beq.n	800e45c <HAL_UART_IRQHandler+0x68c>
 800e43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e446:	2b00      	cmp	r3, #0
 800e448:	d008      	beq.n	800e45c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f001 fbc1 	bl	800fbdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e45a:	e051      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e464:	2b00      	cmp	r3, #0
 800e466:	d014      	beq.n	800e492 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e470:	2b00      	cmp	r3, #0
 800e472:	d105      	bne.n	800e480 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d008      	beq.n	800e492 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e484:	2b00      	cmp	r3, #0
 800e486:	d03a      	beq.n	800e4fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	4798      	blx	r3
    }
    return;
 800e490:	e035      	b.n	800e4fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d009      	beq.n	800e4b2 <HAL_UART_IRQHandler+0x6e2>
 800e49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 fb6b 	bl	800fb86 <UART_EndTransmit_IT>
    return;
 800e4b0:	e026      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d009      	beq.n	800e4d2 <HAL_UART_IRQHandler+0x702>
 800e4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f001 fb9a 	bl	800fc04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4d0:	e016      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d010      	beq.n	800e500 <HAL_UART_IRQHandler+0x730>
 800e4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	da0c      	bge.n	800e500 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f001 fb82 	bl	800fbf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4ec:	e008      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
      return;
 800e4ee:	bf00      	nop
 800e4f0:	e006      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
    return;
 800e4f2:	bf00      	nop
 800e4f4:	e004      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
      return;
 800e4f6:	bf00      	nop
 800e4f8:	e002      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
      return;
 800e4fa:	bf00      	nop
 800e4fc:	e000      	b.n	800e500 <HAL_UART_IRQHandler+0x730>
    return;
 800e4fe:	bf00      	nop
  }
}
 800e500:	37e8      	adds	r7, #232	; 0xe8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	effffffe 	.word	0xeffffffe

0800e50c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e564:	b092      	sub	sp, #72	; 0x48
 800e566:	af00      	add	r7, sp, #0
 800e568:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	431a      	orrs	r2, r3
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	695b      	ldr	r3, [r3, #20]
 800e57e:	431a      	orrs	r2, r3
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	4313      	orrs	r3, r2
 800e586:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	4bbe      	ldr	r3, [pc, #760]	; (800e888 <UART_SetConfig+0x328>)
 800e590:	4013      	ands	r3, r2
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	6812      	ldr	r2, [r2, #0]
 800e596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e598:	430b      	orrs	r3, r1
 800e59a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4ab3      	ldr	r2, [pc, #716]	; (800e88c <UART_SetConfig+0x32c>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d004      	beq.n	800e5cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	689a      	ldr	r2, [r3, #8]
 800e5d2:	4baf      	ldr	r3, [pc, #700]	; (800e890 <UART_SetConfig+0x330>)
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	6812      	ldr	r2, [r2, #0]
 800e5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5dc:	430b      	orrs	r3, r1
 800e5de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e6:	f023 010f 	bic.w	r1, r3, #15
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	430a      	orrs	r2, r1
 800e5f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4aa6      	ldr	r2, [pc, #664]	; (800e894 <UART_SetConfig+0x334>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d177      	bne.n	800e6f0 <UART_SetConfig+0x190>
 800e600:	4ba5      	ldr	r3, [pc, #660]	; (800e898 <UART_SetConfig+0x338>)
 800e602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e608:	2b28      	cmp	r3, #40	; 0x28
 800e60a:	d86d      	bhi.n	800e6e8 <UART_SetConfig+0x188>
 800e60c:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <UART_SetConfig+0xb4>)
 800e60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e612:	bf00      	nop
 800e614:	0800e6b9 	.word	0x0800e6b9
 800e618:	0800e6e9 	.word	0x0800e6e9
 800e61c:	0800e6e9 	.word	0x0800e6e9
 800e620:	0800e6e9 	.word	0x0800e6e9
 800e624:	0800e6e9 	.word	0x0800e6e9
 800e628:	0800e6e9 	.word	0x0800e6e9
 800e62c:	0800e6e9 	.word	0x0800e6e9
 800e630:	0800e6e9 	.word	0x0800e6e9
 800e634:	0800e6c1 	.word	0x0800e6c1
 800e638:	0800e6e9 	.word	0x0800e6e9
 800e63c:	0800e6e9 	.word	0x0800e6e9
 800e640:	0800e6e9 	.word	0x0800e6e9
 800e644:	0800e6e9 	.word	0x0800e6e9
 800e648:	0800e6e9 	.word	0x0800e6e9
 800e64c:	0800e6e9 	.word	0x0800e6e9
 800e650:	0800e6e9 	.word	0x0800e6e9
 800e654:	0800e6c9 	.word	0x0800e6c9
 800e658:	0800e6e9 	.word	0x0800e6e9
 800e65c:	0800e6e9 	.word	0x0800e6e9
 800e660:	0800e6e9 	.word	0x0800e6e9
 800e664:	0800e6e9 	.word	0x0800e6e9
 800e668:	0800e6e9 	.word	0x0800e6e9
 800e66c:	0800e6e9 	.word	0x0800e6e9
 800e670:	0800e6e9 	.word	0x0800e6e9
 800e674:	0800e6d1 	.word	0x0800e6d1
 800e678:	0800e6e9 	.word	0x0800e6e9
 800e67c:	0800e6e9 	.word	0x0800e6e9
 800e680:	0800e6e9 	.word	0x0800e6e9
 800e684:	0800e6e9 	.word	0x0800e6e9
 800e688:	0800e6e9 	.word	0x0800e6e9
 800e68c:	0800e6e9 	.word	0x0800e6e9
 800e690:	0800e6e9 	.word	0x0800e6e9
 800e694:	0800e6d9 	.word	0x0800e6d9
 800e698:	0800e6e9 	.word	0x0800e6e9
 800e69c:	0800e6e9 	.word	0x0800e6e9
 800e6a0:	0800e6e9 	.word	0x0800e6e9
 800e6a4:	0800e6e9 	.word	0x0800e6e9
 800e6a8:	0800e6e9 	.word	0x0800e6e9
 800e6ac:	0800e6e9 	.word	0x0800e6e9
 800e6b0:	0800e6e9 	.word	0x0800e6e9
 800e6b4:	0800e6e1 	.word	0x0800e6e1
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6be:	e222      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c6:	e21e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ce:	e21a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6d0:	2310      	movs	r3, #16
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d6:	e216      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6d8:	2320      	movs	r3, #32
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6de:	e212      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6e0:	2340      	movs	r3, #64	; 0x40
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e6:	e20e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6e8:	2380      	movs	r3, #128	; 0x80
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ee:	e20a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a69      	ldr	r2, [pc, #420]	; (800e89c <UART_SetConfig+0x33c>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d130      	bne.n	800e75c <UART_SetConfig+0x1fc>
 800e6fa:	4b67      	ldr	r3, [pc, #412]	; (800e898 <UART_SetConfig+0x338>)
 800e6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fe:	f003 0307 	and.w	r3, r3, #7
 800e702:	2b05      	cmp	r3, #5
 800e704:	d826      	bhi.n	800e754 <UART_SetConfig+0x1f4>
 800e706:	a201      	add	r2, pc, #4	; (adr r2, 800e70c <UART_SetConfig+0x1ac>)
 800e708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70c:	0800e725 	.word	0x0800e725
 800e710:	0800e72d 	.word	0x0800e72d
 800e714:	0800e735 	.word	0x0800e735
 800e718:	0800e73d 	.word	0x0800e73d
 800e71c:	0800e745 	.word	0x0800e745
 800e720:	0800e74d 	.word	0x0800e74d
 800e724:	2300      	movs	r3, #0
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72a:	e1ec      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e72c:	2304      	movs	r3, #4
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e732:	e1e8      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e734:	2308      	movs	r3, #8
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73a:	e1e4      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e73c:	2310      	movs	r3, #16
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e742:	e1e0      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e744:	2320      	movs	r3, #32
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74a:	e1dc      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e74c:	2340      	movs	r3, #64	; 0x40
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e752:	e1d8      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e754:	2380      	movs	r3, #128	; 0x80
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75a:	e1d4      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a4f      	ldr	r2, [pc, #316]	; (800e8a0 <UART_SetConfig+0x340>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d130      	bne.n	800e7c8 <UART_SetConfig+0x268>
 800e766:	4b4c      	ldr	r3, [pc, #304]	; (800e898 <UART_SetConfig+0x338>)
 800e768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76a:	f003 0307 	and.w	r3, r3, #7
 800e76e:	2b05      	cmp	r3, #5
 800e770:	d826      	bhi.n	800e7c0 <UART_SetConfig+0x260>
 800e772:	a201      	add	r2, pc, #4	; (adr r2, 800e778 <UART_SetConfig+0x218>)
 800e774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e778:	0800e791 	.word	0x0800e791
 800e77c:	0800e799 	.word	0x0800e799
 800e780:	0800e7a1 	.word	0x0800e7a1
 800e784:	0800e7a9 	.word	0x0800e7a9
 800e788:	0800e7b1 	.word	0x0800e7b1
 800e78c:	0800e7b9 	.word	0x0800e7b9
 800e790:	2300      	movs	r3, #0
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e796:	e1b6      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e798:	2304      	movs	r3, #4
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79e:	e1b2      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a6:	e1ae      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ae:	e1aa      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7b0:	2320      	movs	r3, #32
 800e7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b6:	e1a6      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7b8:	2340      	movs	r3, #64	; 0x40
 800e7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7be:	e1a2      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7c0:	2380      	movs	r3, #128	; 0x80
 800e7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c6:	e19e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a35      	ldr	r2, [pc, #212]	; (800e8a4 <UART_SetConfig+0x344>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d130      	bne.n	800e834 <UART_SetConfig+0x2d4>
 800e7d2:	4b31      	ldr	r3, [pc, #196]	; (800e898 <UART_SetConfig+0x338>)
 800e7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d6:	f003 0307 	and.w	r3, r3, #7
 800e7da:	2b05      	cmp	r3, #5
 800e7dc:	d826      	bhi.n	800e82c <UART_SetConfig+0x2cc>
 800e7de:	a201      	add	r2, pc, #4	; (adr r2, 800e7e4 <UART_SetConfig+0x284>)
 800e7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e4:	0800e7fd 	.word	0x0800e7fd
 800e7e8:	0800e805 	.word	0x0800e805
 800e7ec:	0800e80d 	.word	0x0800e80d
 800e7f0:	0800e815 	.word	0x0800e815
 800e7f4:	0800e81d 	.word	0x0800e81d
 800e7f8:	0800e825 	.word	0x0800e825
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e802:	e180      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e804:	2304      	movs	r3, #4
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80a:	e17c      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e80c:	2308      	movs	r3, #8
 800e80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e812:	e178      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e814:	2310      	movs	r3, #16
 800e816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81a:	e174      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e81c:	2320      	movs	r3, #32
 800e81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e822:	e170      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e824:	2340      	movs	r3, #64	; 0x40
 800e826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82a:	e16c      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e82c:	2380      	movs	r3, #128	; 0x80
 800e82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e832:	e168      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a1b      	ldr	r2, [pc, #108]	; (800e8a8 <UART_SetConfig+0x348>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d142      	bne.n	800e8c4 <UART_SetConfig+0x364>
 800e83e:	4b16      	ldr	r3, [pc, #88]	; (800e898 <UART_SetConfig+0x338>)
 800e840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e842:	f003 0307 	and.w	r3, r3, #7
 800e846:	2b05      	cmp	r3, #5
 800e848:	d838      	bhi.n	800e8bc <UART_SetConfig+0x35c>
 800e84a:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <UART_SetConfig+0x2f0>)
 800e84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e850:	0800e869 	.word	0x0800e869
 800e854:	0800e871 	.word	0x0800e871
 800e858:	0800e879 	.word	0x0800e879
 800e85c:	0800e881 	.word	0x0800e881
 800e860:	0800e8ad 	.word	0x0800e8ad
 800e864:	0800e8b5 	.word	0x0800e8b5
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86e:	e14a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e870:	2304      	movs	r3, #4
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e876:	e146      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e878:	2308      	movs	r3, #8
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87e:	e142      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e880:	2310      	movs	r3, #16
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e886:	e13e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e888:	cfff69f3 	.word	0xcfff69f3
 800e88c:	58000c00 	.word	0x58000c00
 800e890:	11fff4ff 	.word	0x11fff4ff
 800e894:	40011000 	.word	0x40011000
 800e898:	58024400 	.word	0x58024400
 800e89c:	40004400 	.word	0x40004400
 800e8a0:	40004800 	.word	0x40004800
 800e8a4:	40004c00 	.word	0x40004c00
 800e8a8:	40005000 	.word	0x40005000
 800e8ac:	2320      	movs	r3, #32
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e128      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e8b4:	2340      	movs	r3, #64	; 0x40
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e124      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e8bc:	2380      	movs	r3, #128	; 0x80
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e120      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4acb      	ldr	r2, [pc, #812]	; (800ebf8 <UART_SetConfig+0x698>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d176      	bne.n	800e9bc <UART_SetConfig+0x45c>
 800e8ce:	4bcb      	ldr	r3, [pc, #812]	; (800ebfc <UART_SetConfig+0x69c>)
 800e8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8d6:	2b28      	cmp	r3, #40	; 0x28
 800e8d8:	d86c      	bhi.n	800e9b4 <UART_SetConfig+0x454>
 800e8da:	a201      	add	r2, pc, #4	; (adr r2, 800e8e0 <UART_SetConfig+0x380>)
 800e8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e0:	0800e985 	.word	0x0800e985
 800e8e4:	0800e9b5 	.word	0x0800e9b5
 800e8e8:	0800e9b5 	.word	0x0800e9b5
 800e8ec:	0800e9b5 	.word	0x0800e9b5
 800e8f0:	0800e9b5 	.word	0x0800e9b5
 800e8f4:	0800e9b5 	.word	0x0800e9b5
 800e8f8:	0800e9b5 	.word	0x0800e9b5
 800e8fc:	0800e9b5 	.word	0x0800e9b5
 800e900:	0800e98d 	.word	0x0800e98d
 800e904:	0800e9b5 	.word	0x0800e9b5
 800e908:	0800e9b5 	.word	0x0800e9b5
 800e90c:	0800e9b5 	.word	0x0800e9b5
 800e910:	0800e9b5 	.word	0x0800e9b5
 800e914:	0800e9b5 	.word	0x0800e9b5
 800e918:	0800e9b5 	.word	0x0800e9b5
 800e91c:	0800e9b5 	.word	0x0800e9b5
 800e920:	0800e995 	.word	0x0800e995
 800e924:	0800e9b5 	.word	0x0800e9b5
 800e928:	0800e9b5 	.word	0x0800e9b5
 800e92c:	0800e9b5 	.word	0x0800e9b5
 800e930:	0800e9b5 	.word	0x0800e9b5
 800e934:	0800e9b5 	.word	0x0800e9b5
 800e938:	0800e9b5 	.word	0x0800e9b5
 800e93c:	0800e9b5 	.word	0x0800e9b5
 800e940:	0800e99d 	.word	0x0800e99d
 800e944:	0800e9b5 	.word	0x0800e9b5
 800e948:	0800e9b5 	.word	0x0800e9b5
 800e94c:	0800e9b5 	.word	0x0800e9b5
 800e950:	0800e9b5 	.word	0x0800e9b5
 800e954:	0800e9b5 	.word	0x0800e9b5
 800e958:	0800e9b5 	.word	0x0800e9b5
 800e95c:	0800e9b5 	.word	0x0800e9b5
 800e960:	0800e9a5 	.word	0x0800e9a5
 800e964:	0800e9b5 	.word	0x0800e9b5
 800e968:	0800e9b5 	.word	0x0800e9b5
 800e96c:	0800e9b5 	.word	0x0800e9b5
 800e970:	0800e9b5 	.word	0x0800e9b5
 800e974:	0800e9b5 	.word	0x0800e9b5
 800e978:	0800e9b5 	.word	0x0800e9b5
 800e97c:	0800e9b5 	.word	0x0800e9b5
 800e980:	0800e9ad 	.word	0x0800e9ad
 800e984:	2301      	movs	r3, #1
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98a:	e0bc      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e98c:	2304      	movs	r3, #4
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e992:	e0b8      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e994:	2308      	movs	r3, #8
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99a:	e0b4      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e99c:	2310      	movs	r3, #16
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a2:	e0b0      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e9a4:	2320      	movs	r3, #32
 800e9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9aa:	e0ac      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e9ac:	2340      	movs	r3, #64	; 0x40
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b2:	e0a8      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e9b4:	2380      	movs	r3, #128	; 0x80
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ba:	e0a4      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a8f      	ldr	r2, [pc, #572]	; (800ec00 <UART_SetConfig+0x6a0>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d130      	bne.n	800ea28 <UART_SetConfig+0x4c8>
 800e9c6:	4b8d      	ldr	r3, [pc, #564]	; (800ebfc <UART_SetConfig+0x69c>)
 800e9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ca:	f003 0307 	and.w	r3, r3, #7
 800e9ce:	2b05      	cmp	r3, #5
 800e9d0:	d826      	bhi.n	800ea20 <UART_SetConfig+0x4c0>
 800e9d2:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <UART_SetConfig+0x478>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800e9f1 	.word	0x0800e9f1
 800e9dc:	0800e9f9 	.word	0x0800e9f9
 800e9e0:	0800ea01 	.word	0x0800ea01
 800e9e4:	0800ea09 	.word	0x0800ea09
 800e9e8:	0800ea11 	.word	0x0800ea11
 800e9ec:	0800ea19 	.word	0x0800ea19
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f6:	e086      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800e9f8:	2304      	movs	r3, #4
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fe:	e082      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea00:	2308      	movs	r3, #8
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea06:	e07e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea08:	2310      	movs	r3, #16
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0e:	e07a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea10:	2320      	movs	r3, #32
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea16:	e076      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea18:	2340      	movs	r3, #64	; 0x40
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1e:	e072      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea20:	2380      	movs	r3, #128	; 0x80
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea26:	e06e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a75      	ldr	r2, [pc, #468]	; (800ec04 <UART_SetConfig+0x6a4>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d130      	bne.n	800ea94 <UART_SetConfig+0x534>
 800ea32:	4b72      	ldr	r3, [pc, #456]	; (800ebfc <UART_SetConfig+0x69c>)
 800ea34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea36:	f003 0307 	and.w	r3, r3, #7
 800ea3a:	2b05      	cmp	r3, #5
 800ea3c:	d826      	bhi.n	800ea8c <UART_SetConfig+0x52c>
 800ea3e:	a201      	add	r2, pc, #4	; (adr r2, 800ea44 <UART_SetConfig+0x4e4>)
 800ea40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea44:	0800ea5d 	.word	0x0800ea5d
 800ea48:	0800ea65 	.word	0x0800ea65
 800ea4c:	0800ea6d 	.word	0x0800ea6d
 800ea50:	0800ea75 	.word	0x0800ea75
 800ea54:	0800ea7d 	.word	0x0800ea7d
 800ea58:	0800ea85 	.word	0x0800ea85
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea62:	e050      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea64:	2304      	movs	r3, #4
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6a:	e04c      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea6c:	2308      	movs	r3, #8
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e048      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea74:	2310      	movs	r3, #16
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7a:	e044      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea7c:	2320      	movs	r3, #32
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea82:	e040      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea84:	2340      	movs	r3, #64	; 0x40
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8a:	e03c      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea8c:	2380      	movs	r3, #128	; 0x80
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea92:	e038      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a5b      	ldr	r2, [pc, #364]	; (800ec08 <UART_SetConfig+0x6a8>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d130      	bne.n	800eb00 <UART_SetConfig+0x5a0>
 800ea9e:	4b57      	ldr	r3, [pc, #348]	; (800ebfc <UART_SetConfig+0x69c>)
 800eaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaa2:	f003 0307 	and.w	r3, r3, #7
 800eaa6:	2b05      	cmp	r3, #5
 800eaa8:	d826      	bhi.n	800eaf8 <UART_SetConfig+0x598>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <UART_SetConfig+0x550>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eac9 	.word	0x0800eac9
 800eab4:	0800ead1 	.word	0x0800ead1
 800eab8:	0800ead9 	.word	0x0800ead9
 800eabc:	0800eae1 	.word	0x0800eae1
 800eac0:	0800eae9 	.word	0x0800eae9
 800eac4:	0800eaf1 	.word	0x0800eaf1
 800eac8:	2302      	movs	r3, #2
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e01a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ead0:	2304      	movs	r3, #4
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e016      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800ead8:	2308      	movs	r3, #8
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e012      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800eae0:	2310      	movs	r3, #16
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae6:	e00e      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800eae8:	2320      	movs	r3, #32
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaee:	e00a      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800eaf0:	2340      	movs	r3, #64	; 0x40
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e006      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800eaf8:	2380      	movs	r3, #128	; 0x80
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e002      	b.n	800eb06 <UART_SetConfig+0x5a6>
 800eb00:	2380      	movs	r3, #128	; 0x80
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a3f      	ldr	r2, [pc, #252]	; (800ec08 <UART_SetConfig+0x6a8>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	f040 80f8 	bne.w	800ed02 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb16:	2b20      	cmp	r3, #32
 800eb18:	dc46      	bgt.n	800eba8 <UART_SetConfig+0x648>
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	f2c0 8082 	blt.w	800ec24 <UART_SetConfig+0x6c4>
 800eb20:	3b02      	subs	r3, #2
 800eb22:	2b1e      	cmp	r3, #30
 800eb24:	d87e      	bhi.n	800ec24 <UART_SetConfig+0x6c4>
 800eb26:	a201      	add	r2, pc, #4	; (adr r2, 800eb2c <UART_SetConfig+0x5cc>)
 800eb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2c:	0800ebaf 	.word	0x0800ebaf
 800eb30:	0800ec25 	.word	0x0800ec25
 800eb34:	0800ebb7 	.word	0x0800ebb7
 800eb38:	0800ec25 	.word	0x0800ec25
 800eb3c:	0800ec25 	.word	0x0800ec25
 800eb40:	0800ec25 	.word	0x0800ec25
 800eb44:	0800ebc7 	.word	0x0800ebc7
 800eb48:	0800ec25 	.word	0x0800ec25
 800eb4c:	0800ec25 	.word	0x0800ec25
 800eb50:	0800ec25 	.word	0x0800ec25
 800eb54:	0800ec25 	.word	0x0800ec25
 800eb58:	0800ec25 	.word	0x0800ec25
 800eb5c:	0800ec25 	.word	0x0800ec25
 800eb60:	0800ec25 	.word	0x0800ec25
 800eb64:	0800ebd7 	.word	0x0800ebd7
 800eb68:	0800ec25 	.word	0x0800ec25
 800eb6c:	0800ec25 	.word	0x0800ec25
 800eb70:	0800ec25 	.word	0x0800ec25
 800eb74:	0800ec25 	.word	0x0800ec25
 800eb78:	0800ec25 	.word	0x0800ec25
 800eb7c:	0800ec25 	.word	0x0800ec25
 800eb80:	0800ec25 	.word	0x0800ec25
 800eb84:	0800ec25 	.word	0x0800ec25
 800eb88:	0800ec25 	.word	0x0800ec25
 800eb8c:	0800ec25 	.word	0x0800ec25
 800eb90:	0800ec25 	.word	0x0800ec25
 800eb94:	0800ec25 	.word	0x0800ec25
 800eb98:	0800ec25 	.word	0x0800ec25
 800eb9c:	0800ec25 	.word	0x0800ec25
 800eba0:	0800ec25 	.word	0x0800ec25
 800eba4:	0800ec17 	.word	0x0800ec17
 800eba8:	2b40      	cmp	r3, #64	; 0x40
 800ebaa:	d037      	beq.n	800ec1c <UART_SetConfig+0x6bc>
 800ebac:	e03a      	b.n	800ec24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ebae:	f7fc fd67 	bl	800b680 <HAL_RCCEx_GetD3PCLK1Freq>
 800ebb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebb4:	e03c      	b.n	800ec30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fc fd76 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebc4:	e034      	b.n	800ec30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebc6:	f107 0318 	add.w	r3, r7, #24
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fc fec2 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e02c      	b.n	800ec30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebd6:	4b09      	ldr	r3, [pc, #36]	; (800ebfc <UART_SetConfig+0x69c>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f003 0320 	and.w	r3, r3, #32
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d016      	beq.n	800ec10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebe2:	4b06      	ldr	r3, [pc, #24]	; (800ebfc <UART_SetConfig+0x69c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	08db      	lsrs	r3, r3, #3
 800ebe8:	f003 0303 	and.w	r3, r3, #3
 800ebec:	4a07      	ldr	r2, [pc, #28]	; (800ec0c <UART_SetConfig+0x6ac>)
 800ebee:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebf4:	e01c      	b.n	800ec30 <UART_SetConfig+0x6d0>
 800ebf6:	bf00      	nop
 800ebf8:	40011400 	.word	0x40011400
 800ebfc:	58024400 	.word	0x58024400
 800ec00:	40007800 	.word	0x40007800
 800ec04:	40007c00 	.word	0x40007c00
 800ec08:	58000c00 	.word	0x58000c00
 800ec0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ec10:	4b9d      	ldr	r3, [pc, #628]	; (800ee88 <UART_SetConfig+0x928>)
 800ec12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec14:	e00c      	b.n	800ec30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec16:	4b9d      	ldr	r3, [pc, #628]	; (800ee8c <UART_SetConfig+0x92c>)
 800ec18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1a:	e009      	b.n	800ec30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec22:	e005      	b.n	800ec30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ec24:	2300      	movs	r3, #0
 800ec26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ec30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f000 81de 	beq.w	800eff4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	4a94      	ldr	r2, [pc, #592]	; (800ee90 <UART_SetConfig+0x930>)
 800ec3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec46:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec4a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d305      	bcc.n	800ec68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d903      	bls.n	800ec70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec6e:	e1c1      	b.n	800eff4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec72:	2200      	movs	r2, #0
 800ec74:	60bb      	str	r3, [r7, #8]
 800ec76:	60fa      	str	r2, [r7, #12]
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	4a84      	ldr	r2, [pc, #528]	; (800ee90 <UART_SetConfig+0x930>)
 800ec7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	2200      	movs	r2, #0
 800ec86:	603b      	str	r3, [r7, #0]
 800ec88:	607a      	str	r2, [r7, #4]
 800ec8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ec92:	f7f1 fb7d 	bl	8000390 <__aeabi_uldivmod>
 800ec96:	4602      	mov	r2, r0
 800ec98:	460b      	mov	r3, r1
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	f04f 0200 	mov.w	r2, #0
 800eca2:	f04f 0300 	mov.w	r3, #0
 800eca6:	020b      	lsls	r3, r1, #8
 800eca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ecac:	0202      	lsls	r2, r0, #8
 800ecae:	6979      	ldr	r1, [r7, #20]
 800ecb0:	6849      	ldr	r1, [r1, #4]
 800ecb2:	0849      	lsrs	r1, r1, #1
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	4605      	mov	r5, r0
 800ecba:	eb12 0804 	adds.w	r8, r2, r4
 800ecbe:	eb43 0905 	adc.w	r9, r3, r5
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	469a      	mov	sl, r3
 800ecca:	4693      	mov	fp, r2
 800eccc:	4652      	mov	r2, sl
 800ecce:	465b      	mov	r3, fp
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	4649      	mov	r1, r9
 800ecd4:	f7f1 fb5c 	bl	8000390 <__aeabi_uldivmod>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4613      	mov	r3, r2
 800ecde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ece6:	d308      	bcc.n	800ecfa <UART_SetConfig+0x79a>
 800ece8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecee:	d204      	bcs.n	800ecfa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecf6:	60da      	str	r2, [r3, #12]
 800ecf8:	e17c      	b.n	800eff4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ed00:	e178      	b.n	800eff4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	69db      	ldr	r3, [r3, #28]
 800ed06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed0a:	f040 80c5 	bne.w	800ee98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ed0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed12:	2b20      	cmp	r3, #32
 800ed14:	dc48      	bgt.n	800eda8 <UART_SetConfig+0x848>
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	db7b      	blt.n	800ee12 <UART_SetConfig+0x8b2>
 800ed1a:	2b20      	cmp	r3, #32
 800ed1c:	d879      	bhi.n	800ee12 <UART_SetConfig+0x8b2>
 800ed1e:	a201      	add	r2, pc, #4	; (adr r2, 800ed24 <UART_SetConfig+0x7c4>)
 800ed20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed24:	0800edaf 	.word	0x0800edaf
 800ed28:	0800edb7 	.word	0x0800edb7
 800ed2c:	0800ee13 	.word	0x0800ee13
 800ed30:	0800ee13 	.word	0x0800ee13
 800ed34:	0800edbf 	.word	0x0800edbf
 800ed38:	0800ee13 	.word	0x0800ee13
 800ed3c:	0800ee13 	.word	0x0800ee13
 800ed40:	0800ee13 	.word	0x0800ee13
 800ed44:	0800edcf 	.word	0x0800edcf
 800ed48:	0800ee13 	.word	0x0800ee13
 800ed4c:	0800ee13 	.word	0x0800ee13
 800ed50:	0800ee13 	.word	0x0800ee13
 800ed54:	0800ee13 	.word	0x0800ee13
 800ed58:	0800ee13 	.word	0x0800ee13
 800ed5c:	0800ee13 	.word	0x0800ee13
 800ed60:	0800ee13 	.word	0x0800ee13
 800ed64:	0800eddf 	.word	0x0800eddf
 800ed68:	0800ee13 	.word	0x0800ee13
 800ed6c:	0800ee13 	.word	0x0800ee13
 800ed70:	0800ee13 	.word	0x0800ee13
 800ed74:	0800ee13 	.word	0x0800ee13
 800ed78:	0800ee13 	.word	0x0800ee13
 800ed7c:	0800ee13 	.word	0x0800ee13
 800ed80:	0800ee13 	.word	0x0800ee13
 800ed84:	0800ee13 	.word	0x0800ee13
 800ed88:	0800ee13 	.word	0x0800ee13
 800ed8c:	0800ee13 	.word	0x0800ee13
 800ed90:	0800ee13 	.word	0x0800ee13
 800ed94:	0800ee13 	.word	0x0800ee13
 800ed98:	0800ee13 	.word	0x0800ee13
 800ed9c:	0800ee13 	.word	0x0800ee13
 800eda0:	0800ee13 	.word	0x0800ee13
 800eda4:	0800ee05 	.word	0x0800ee05
 800eda8:	2b40      	cmp	r3, #64	; 0x40
 800edaa:	d02e      	beq.n	800ee0a <UART_SetConfig+0x8aa>
 800edac:	e031      	b.n	800ee12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800edae:	f7fb fcf5 	bl	800a79c <HAL_RCC_GetPCLK1Freq>
 800edb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800edb4:	e033      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edb6:	f7fb fd07 	bl	800a7c8 <HAL_RCC_GetPCLK2Freq>
 800edba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800edbc:	e02f      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fc fc72 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edcc:	e027      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edce:	f107 0318 	add.w	r3, r7, #24
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fc fdbe 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eddc:	e01f      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edde:	4b2d      	ldr	r3, [pc, #180]	; (800ee94 <UART_SetConfig+0x934>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f003 0320 	and.w	r3, r3, #32
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d009      	beq.n	800edfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edea:	4b2a      	ldr	r3, [pc, #168]	; (800ee94 <UART_SetConfig+0x934>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	08db      	lsrs	r3, r3, #3
 800edf0:	f003 0303 	and.w	r3, r3, #3
 800edf4:	4a24      	ldr	r2, [pc, #144]	; (800ee88 <UART_SetConfig+0x928>)
 800edf6:	fa22 f303 	lsr.w	r3, r2, r3
 800edfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edfc:	e00f      	b.n	800ee1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edfe:	4b22      	ldr	r3, [pc, #136]	; (800ee88 <UART_SetConfig+0x928>)
 800ee00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee02:	e00c      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee04:	4b21      	ldr	r3, [pc, #132]	; (800ee8c <UART_SetConfig+0x92c>)
 800ee06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee08:	e009      	b.n	800ee1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee10:	e005      	b.n	800ee1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee12:	2300      	movs	r3, #0
 800ee14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f000 80e7 	beq.w	800eff4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2a:	4a19      	ldr	r2, [pc, #100]	; (800ee90 <UART_SetConfig+0x930>)
 800ee2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee30:	461a      	mov	r2, r3
 800ee32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee38:	005a      	lsls	r2, r3, #1
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	085b      	lsrs	r3, r3, #1
 800ee40:	441a      	add	r2, r3
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	2b0f      	cmp	r3, #15
 800ee50:	d916      	bls.n	800ee80 <UART_SetConfig+0x920>
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee58:	d212      	bcs.n	800ee80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	f023 030f 	bic.w	r3, r3, #15
 800ee62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	085b      	lsrs	r3, r3, #1
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	f003 0307 	and.w	r3, r3, #7
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee72:	4313      	orrs	r3, r2
 800ee74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ee7c:	60da      	str	r2, [r3, #12]
 800ee7e:	e0b9      	b.n	800eff4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee86:	e0b5      	b.n	800eff4 <UART_SetConfig+0xa94>
 800ee88:	03d09000 	.word	0x03d09000
 800ee8c:	003d0900 	.word	0x003d0900
 800ee90:	08011d74 	.word	0x08011d74
 800ee94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee9c:	2b20      	cmp	r3, #32
 800ee9e:	dc49      	bgt.n	800ef34 <UART_SetConfig+0x9d4>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	db7c      	blt.n	800ef9e <UART_SetConfig+0xa3e>
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d87a      	bhi.n	800ef9e <UART_SetConfig+0xa3e>
 800eea8:	a201      	add	r2, pc, #4	; (adr r2, 800eeb0 <UART_SetConfig+0x950>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800ef3b 	.word	0x0800ef3b
 800eeb4:	0800ef43 	.word	0x0800ef43
 800eeb8:	0800ef9f 	.word	0x0800ef9f
 800eebc:	0800ef9f 	.word	0x0800ef9f
 800eec0:	0800ef4b 	.word	0x0800ef4b
 800eec4:	0800ef9f 	.word	0x0800ef9f
 800eec8:	0800ef9f 	.word	0x0800ef9f
 800eecc:	0800ef9f 	.word	0x0800ef9f
 800eed0:	0800ef5b 	.word	0x0800ef5b
 800eed4:	0800ef9f 	.word	0x0800ef9f
 800eed8:	0800ef9f 	.word	0x0800ef9f
 800eedc:	0800ef9f 	.word	0x0800ef9f
 800eee0:	0800ef9f 	.word	0x0800ef9f
 800eee4:	0800ef9f 	.word	0x0800ef9f
 800eee8:	0800ef9f 	.word	0x0800ef9f
 800eeec:	0800ef9f 	.word	0x0800ef9f
 800eef0:	0800ef6b 	.word	0x0800ef6b
 800eef4:	0800ef9f 	.word	0x0800ef9f
 800eef8:	0800ef9f 	.word	0x0800ef9f
 800eefc:	0800ef9f 	.word	0x0800ef9f
 800ef00:	0800ef9f 	.word	0x0800ef9f
 800ef04:	0800ef9f 	.word	0x0800ef9f
 800ef08:	0800ef9f 	.word	0x0800ef9f
 800ef0c:	0800ef9f 	.word	0x0800ef9f
 800ef10:	0800ef9f 	.word	0x0800ef9f
 800ef14:	0800ef9f 	.word	0x0800ef9f
 800ef18:	0800ef9f 	.word	0x0800ef9f
 800ef1c:	0800ef9f 	.word	0x0800ef9f
 800ef20:	0800ef9f 	.word	0x0800ef9f
 800ef24:	0800ef9f 	.word	0x0800ef9f
 800ef28:	0800ef9f 	.word	0x0800ef9f
 800ef2c:	0800ef9f 	.word	0x0800ef9f
 800ef30:	0800ef91 	.word	0x0800ef91
 800ef34:	2b40      	cmp	r3, #64	; 0x40
 800ef36:	d02e      	beq.n	800ef96 <UART_SetConfig+0xa36>
 800ef38:	e031      	b.n	800ef9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef3a:	f7fb fc2f 	bl	800a79c <HAL_RCC_GetPCLK1Freq>
 800ef3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef40:	e033      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef42:	f7fb fc41 	bl	800a7c8 <HAL_RCC_GetPCLK2Freq>
 800ef46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef48:	e02f      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fc fbac 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef58:	e027      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef5a:	f107 0318 	add.w	r3, r7, #24
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fc fcf8 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef68:	e01f      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef6a:	4b2d      	ldr	r3, [pc, #180]	; (800f020 <UART_SetConfig+0xac0>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0320 	and.w	r3, r3, #32
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d009      	beq.n	800ef8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef76:	4b2a      	ldr	r3, [pc, #168]	; (800f020 <UART_SetConfig+0xac0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	08db      	lsrs	r3, r3, #3
 800ef7c:	f003 0303 	and.w	r3, r3, #3
 800ef80:	4a28      	ldr	r2, [pc, #160]	; (800f024 <UART_SetConfig+0xac4>)
 800ef82:	fa22 f303 	lsr.w	r3, r2, r3
 800ef86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef88:	e00f      	b.n	800efaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ef8a:	4b26      	ldr	r3, [pc, #152]	; (800f024 <UART_SetConfig+0xac4>)
 800ef8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef8e:	e00c      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef90:	4b25      	ldr	r3, [pc, #148]	; (800f028 <UART_SetConfig+0xac8>)
 800ef92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef94:	e009      	b.n	800efaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef9c:	e005      	b.n	800efaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800efa8:	bf00      	nop
    }

    if (pclk != 0U)
 800efaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efac:	2b00      	cmp	r3, #0
 800efae:	d021      	beq.n	800eff4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb4:	4a1d      	ldr	r2, [pc, #116]	; (800f02c <UART_SetConfig+0xacc>)
 800efb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efba:	461a      	mov	r2, r3
 800efbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	085b      	lsrs	r3, r3, #1
 800efc8:	441a      	add	r2, r3
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	fbb2 f3f3 	udiv	r3, r2, r3
 800efd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	2b0f      	cmp	r3, #15
 800efd8:	d909      	bls.n	800efee <UART_SetConfig+0xa8e>
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efe0:	d205      	bcs.n	800efee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	60da      	str	r2, [r3, #12]
 800efec:	e002      	b.n	800eff4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2201      	movs	r2, #1
 800f000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	2200      	movs	r2, #0
 800f008:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2200      	movs	r2, #0
 800f00e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f010:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f014:	4618      	mov	r0, r3
 800f016:	3748      	adds	r7, #72	; 0x48
 800f018:	46bd      	mov	sp, r7
 800f01a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f01e:	bf00      	nop
 800f020:	58024400 	.word	0x58024400
 800f024:	03d09000 	.word	0x03d09000
 800f028:	003d0900 	.word	0x003d0900
 800f02c:	08011d74 	.word	0x08011d74

0800f030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00a      	beq.n	800f05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	430a      	orrs	r2, r1
 800f058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00a      	beq.n	800f07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	430a      	orrs	r2, r1
 800f07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f080:	f003 0304 	and.w	r3, r3, #4
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00a      	beq.n	800f09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	430a      	orrs	r2, r1
 800f09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a2:	f003 0308 	and.w	r3, r3, #8
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0e6:	f003 0320 	and.w	r3, r3, #32
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	430a      	orrs	r2, r1
 800f102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d01a      	beq.n	800f146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	430a      	orrs	r2, r1
 800f124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f12e:	d10a      	bne.n	800f146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00a      	beq.n	800f168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	605a      	str	r2, [r3, #4]
  }
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af02      	add	r7, sp, #8
 800f17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f184:	f7f4 fed2 	bl	8003f2c <HAL_GetTick>
 800f188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0308 	and.w	r3, r3, #8
 800f194:	2b08      	cmp	r3, #8
 800f196:	d10e      	bne.n	800f1b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f82f 	bl	800f20a <UART_WaitOnFlagUntilTimeout>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	e025      	b.n	800f202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f003 0304 	and.w	r3, r3, #4
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d10e      	bne.n	800f1e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f819 	bl	800f20a <UART_WaitOnFlagUntilTimeout>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d001      	beq.n	800f1e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	e00f      	b.n	800f202 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2220      	movs	r2, #32
 800f1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2220      	movs	r2, #32
 800f1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b09c      	sub	sp, #112	; 0x70
 800f20e:	af00      	add	r7, sp, #0
 800f210:	60f8      	str	r0, [r7, #12]
 800f212:	60b9      	str	r1, [r7, #8]
 800f214:	603b      	str	r3, [r7, #0]
 800f216:	4613      	mov	r3, r2
 800f218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f21a:	e0a9      	b.n	800f370 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f222:	f000 80a5 	beq.w	800f370 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f226:	f7f4 fe81 	bl	8003f2c <HAL_GetTick>
 800f22a:	4602      	mov	r2, r0
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f232:	429a      	cmp	r2, r3
 800f234:	d302      	bcc.n	800f23c <UART_WaitOnFlagUntilTimeout+0x32>
 800f236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d140      	bne.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f244:	e853 3f00 	ldrex	r3, [r3]
 800f248:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f24c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f250:	667b      	str	r3, [r7, #100]	; 0x64
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f25a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f25c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f260:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f262:	e841 2300 	strex	r3, r2, [r1]
 800f266:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1e6      	bne.n	800f23c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f278:	e853 3f00 	ldrex	r3, [r3]
 800f27c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	f023 0301 	bic.w	r3, r3, #1
 800f284:	663b      	str	r3, [r7, #96]	; 0x60
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3308      	adds	r3, #8
 800f28c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f28e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f290:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f296:	e841 2300 	strex	r3, r2, [r1]
 800f29a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e5      	bne.n	800f26e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2220      	movs	r2, #32
 800f2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2220      	movs	r2, #32
 800f2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e069      	b.n	800f392 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d051      	beq.n	800f370 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	69db      	ldr	r3, [r3, #28]
 800f2d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2da:	d149      	bne.n	800f370 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ee:	e853 3f00 	ldrex	r3, [r3]
 800f2f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f2fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	461a      	mov	r2, r3
 800f302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f304:	637b      	str	r3, [r7, #52]	; 0x34
 800f306:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f30a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f30c:	e841 2300 	strex	r3, r2, [r1]
 800f310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e6      	bne.n	800f2e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	3308      	adds	r3, #8
 800f31e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	e853 3f00 	ldrex	r3, [r3]
 800f326:	613b      	str	r3, [r7, #16]
   return(result);
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	f023 0301 	bic.w	r3, r3, #1
 800f32e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	3308      	adds	r3, #8
 800f336:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f338:	623a      	str	r2, [r7, #32]
 800f33a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33c:	69f9      	ldr	r1, [r7, #28]
 800f33e:	6a3a      	ldr	r2, [r7, #32]
 800f340:	e841 2300 	strex	r3, r2, [r1]
 800f344:	61bb      	str	r3, [r7, #24]
   return(result);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d1e5      	bne.n	800f318 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2220      	movs	r2, #32
 800f350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2220      	movs	r2, #32
 800f358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2220      	movs	r2, #32
 800f360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2200      	movs	r2, #0
 800f368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e010      	b.n	800f392 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	69da      	ldr	r2, [r3, #28]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	4013      	ands	r3, r2
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	bf0c      	ite	eq
 800f380:	2301      	moveq	r3, #1
 800f382:	2300      	movne	r3, #0
 800f384:	b2db      	uxtb	r3, r3
 800f386:	461a      	mov	r2, r3
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	f43f af46 	beq.w	800f21c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3770      	adds	r7, #112	; 0x70
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b096      	sub	sp, #88	; 0x58
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	88fa      	ldrh	r2, [r7, #6]
 800f3b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2222      	movs	r2, #34	; 0x22
 800f3c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d02c      	beq.n	800f42a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3d4:	4a42      	ldr	r2, [pc, #264]	; (800f4e0 <UART_Start_Receive_DMA+0x144>)
 800f3d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3dc:	4a41      	ldr	r2, [pc, #260]	; (800f4e4 <UART_Start_Receive_DMA+0x148>)
 800f3de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3e4:	4a40      	ldr	r2, [pc, #256]	; (800f4e8 <UART_Start_Receive_DMA+0x14c>)
 800f3e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3324      	adds	r3, #36	; 0x24
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f400:	461a      	mov	r2, r3
 800f402:	88fb      	ldrh	r3, [r7, #6]
 800f404:	f7f5 fa3a 	bl	800487c <HAL_DMA_Start_IT>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00d      	beq.n	800f42a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2210      	movs	r2, #16
 800f412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2220      	movs	r2, #32
 800f422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e055      	b.n	800f4d6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d018      	beq.n	800f46c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f442:	e853 3f00 	ldrex	r3, [r3]
 800f446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f44e:	657b      	str	r3, [r7, #84]	; 0x54
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	461a      	mov	r2, r3
 800f456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f458:	64bb      	str	r3, [r7, #72]	; 0x48
 800f45a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f45e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f460:	e841 2300 	strex	r3, r2, [r1]
 800f464:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1e6      	bne.n	800f43a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3308      	adds	r3, #8
 800f472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f476:	e853 3f00 	ldrex	r3, [r3]
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	f043 0301 	orr.w	r3, r3, #1
 800f482:	653b      	str	r3, [r7, #80]	; 0x50
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	3308      	adds	r3, #8
 800f48a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f48c:	637a      	str	r2, [r7, #52]	; 0x34
 800f48e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f494:	e841 2300 	strex	r3, r2, [r1]
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e5      	bne.n	800f46c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3308      	adds	r3, #8
 800f4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	3308      	adds	r3, #8
 800f4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4c0:	623a      	str	r2, [r7, #32]
 800f4c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	6a3a      	ldr	r2, [r7, #32]
 800f4c8:	e841 2300 	strex	r3, r2, [r1]
 800f4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1e5      	bne.n	800f4a0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3758      	adds	r7, #88	; 0x58
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	0800f63d 	.word	0x0800f63d
 800f4e4:	0800f75f 	.word	0x0800f75f
 800f4e8:	0800f797 	.word	0x0800f797

0800f4ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b08f      	sub	sp, #60	; 0x3c
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	e853 3f00 	ldrex	r3, [r3]
 800f500:	61fb      	str	r3, [r7, #28]
   return(result);
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f508:	637b      	str	r3, [r7, #52]	; 0x34
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f512:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f514:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f51a:	e841 2300 	strex	r3, r2, [r1]
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e6      	bne.n	800f4f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3308      	adds	r3, #8
 800f52c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	e853 3f00 	ldrex	r3, [r3]
 800f534:	60bb      	str	r3, [r7, #8]
   return(result);
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f53c:	633b      	str	r3, [r7, #48]	; 0x30
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	3308      	adds	r3, #8
 800f544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f546:	61ba      	str	r2, [r7, #24]
 800f548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54a:	6979      	ldr	r1, [r7, #20]
 800f54c:	69ba      	ldr	r2, [r7, #24]
 800f54e:	e841 2300 	strex	r3, r2, [r1]
 800f552:	613b      	str	r3, [r7, #16]
   return(result);
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e5      	bne.n	800f526 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2220      	movs	r2, #32
 800f55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f562:	bf00      	nop
 800f564:	373c      	adds	r7, #60	; 0x3c
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
	...

0800f570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f570:	b480      	push	{r7}
 800f572:	b095      	sub	sp, #84	; 0x54
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f580:	e853 3f00 	ldrex	r3, [r3]
 800f584:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f596:	643b      	str	r3, [r7, #64]	; 0x40
 800f598:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f59a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f59c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f59e:	e841 2300 	strex	r3, r2, [r1]
 800f5a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1e6      	bne.n	800f578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b2:	6a3b      	ldr	r3, [r7, #32]
 800f5b4:	e853 3f00 	ldrex	r3, [r3]
 800f5b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5ba:	69fa      	ldr	r2, [r7, #28]
 800f5bc:	4b1e      	ldr	r3, [pc, #120]	; (800f638 <UART_EndRxTransfer+0xc8>)
 800f5be:	4013      	ands	r3, r2
 800f5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e5      	bne.n	800f5aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d118      	bne.n	800f618 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	e853 3f00 	ldrex	r3, [r3]
 800f5f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	f023 0310 	bic.w	r3, r3, #16
 800f5fa:	647b      	str	r3, [r7, #68]	; 0x44
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	461a      	mov	r2, r3
 800f602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f604:	61bb      	str	r3, [r7, #24]
 800f606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6979      	ldr	r1, [r7, #20]
 800f60a:	69ba      	ldr	r2, [r7, #24]
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	613b      	str	r3, [r7, #16]
   return(result);
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e6      	bne.n	800f5e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2220      	movs	r2, #32
 800f61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f62c:	bf00      	nop
 800f62e:	3754      	adds	r7, #84	; 0x54
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	effffffe 	.word	0xeffffffe

0800f63c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b09c      	sub	sp, #112	; 0x70
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f648:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	69db      	ldr	r3, [r3, #28]
 800f64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f652:	d071      	beq.n	800f738 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f656:	2200      	movs	r2, #0
 800f658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f664:	e853 3f00 	ldrex	r3, [r3]
 800f668:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f66a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f66c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f670:	66bb      	str	r3, [r7, #104]	; 0x68
 800f672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f67a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f67c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f682:	e841 2300 	strex	r3, r2, [r1]
 800f686:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1e6      	bne.n	800f65c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	3308      	adds	r3, #8
 800f694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f698:	e853 3f00 	ldrex	r3, [r3]
 800f69c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a0:	f023 0301 	bic.w	r3, r3, #1
 800f6a4:	667b      	str	r3, [r7, #100]	; 0x64
 800f6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3308      	adds	r3, #8
 800f6ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f6ae:	647a      	str	r2, [r7, #68]	; 0x44
 800f6b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6b6:	e841 2300 	strex	r3, r2, [r1]
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1e5      	bne.n	800f68e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	e853 3f00 	ldrex	r3, [r3]
 800f6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f6e2:	633a      	str	r2, [r7, #48]	; 0x30
 800f6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ea:	e841 2300 	strex	r3, r2, [r1]
 800f6ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1e5      	bne.n	800f6c2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f8:	2220      	movs	r2, #32
 800f6fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f702:	2b01      	cmp	r3, #1
 800f704:	d118      	bne.n	800f738 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	e853 3f00 	ldrex	r3, [r3]
 800f712:	60fb      	str	r3, [r7, #12]
   return(result);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0310 	bic.w	r3, r3, #16
 800f71a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f71c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f724:	61fb      	str	r3, [r7, #28]
 800f726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f728:	69b9      	ldr	r1, [r7, #24]
 800f72a:	69fa      	ldr	r2, [r7, #28]
 800f72c:	e841 2300 	strex	r3, r2, [r1]
 800f730:	617b      	str	r3, [r7, #20]
   return(result);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1e6      	bne.n	800f706 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d107      	bne.n	800f750 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f742:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f746:	4619      	mov	r1, r3
 800f748:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f74a:	f7fe fefd 	bl	800e548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f74e:	e002      	b.n	800f756 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f750:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f752:	f7f3 f9d1 	bl	8002af8 <HAL_UART_RxCpltCallback>
}
 800f756:	bf00      	nop
 800f758:	3770      	adds	r7, #112	; 0x70
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f76a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f770:	2b01      	cmp	r3, #1
 800f772:	d109      	bne.n	800f788 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f77a:	085b      	lsrs	r3, r3, #1
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	4619      	mov	r1, r3
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7fe fee1 	bl	800e548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f786:	e002      	b.n	800f78e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7fe fec9 	bl	800e520 <HAL_UART_RxHalfCpltCallback>
}
 800f78e:	bf00      	nop
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b086      	sub	sp, #24
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7be:	2b80      	cmp	r3, #128	; 0x80
 800f7c0:	d109      	bne.n	800f7d6 <UART_DMAError+0x40>
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	2b21      	cmp	r3, #33	; 0x21
 800f7c6:	d106      	bne.n	800f7d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f7d0:	6978      	ldr	r0, [r7, #20]
 800f7d2:	f7ff fe8b 	bl	800f4ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e0:	2b40      	cmp	r3, #64	; 0x40
 800f7e2:	d109      	bne.n	800f7f8 <UART_DMAError+0x62>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2b22      	cmp	r3, #34	; 0x22
 800f7e8:	d106      	bne.n	800f7f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f7f2:	6978      	ldr	r0, [r7, #20]
 800f7f4:	f7ff febc 	bl	800f570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7fe:	f043 0210 	orr.w	r2, r3, #16
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f808:	6978      	ldr	r0, [r7, #20]
 800f80a:	f7fe fe93 	bl	800e534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f80e:	bf00      	nop
 800f810:	3718      	adds	r7, #24
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b084      	sub	sp, #16
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2200      	movs	r2, #0
 800f828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f7fe fe7d 	bl	800e534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f842:	b480      	push	{r7}
 800f844:	b08f      	sub	sp, #60	; 0x3c
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f850:	2b21      	cmp	r3, #33	; 0x21
 800f852:	d14c      	bne.n	800f8ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d132      	bne.n	800f8c6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	e853 3f00 	ldrex	r3, [r3]
 800f86c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f874:	637b      	str	r3, [r7, #52]	; 0x34
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	461a      	mov	r2, r3
 800f87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f880:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f886:	e841 2300 	strex	r3, r2, [r1]
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1e6      	bne.n	800f860 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	e853 3f00 	ldrex	r3, [r3]
 800f89e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a6:	633b      	str	r3, [r7, #48]	; 0x30
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b0:	61bb      	str	r3, [r7, #24]
 800f8b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b4:	6979      	ldr	r1, [r7, #20]
 800f8b6:	69ba      	ldr	r2, [r7, #24]
 800f8b8:	e841 2300 	strex	r3, r2, [r1]
 800f8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e6      	bne.n	800f892 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f8c4:	e013      	b.n	800f8ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ca:	781a      	ldrb	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f8ee:	bf00      	nop
 800f8f0:	373c      	adds	r7, #60	; 0x3c
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f8fa:	b480      	push	{r7}
 800f8fc:	b091      	sub	sp, #68	; 0x44
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f908:	2b21      	cmp	r3, #33	; 0x21
 800f90a:	d151      	bne.n	800f9b0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f912:	b29b      	uxth	r3, r3
 800f914:	2b00      	cmp	r3, #0
 800f916:	d132      	bne.n	800f97e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	e853 3f00 	ldrex	r3, [r3]
 800f924:	623b      	str	r3, [r7, #32]
   return(result);
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f92c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	633b      	str	r3, [r7, #48]	; 0x30
 800f938:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f93e:	e841 2300 	strex	r3, r2, [r1]
 800f942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1e6      	bne.n	800f918 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	e853 3f00 	ldrex	r3, [r3]
 800f956:	60fb      	str	r3, [r7, #12]
   return(result);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f95e:	637b      	str	r3, [r7, #52]	; 0x34
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f968:	61fb      	str	r3, [r7, #28]
 800f96a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96c:	69b9      	ldr	r1, [r7, #24]
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	e841 2300 	strex	r3, r2, [r1]
 800f974:	617b      	str	r3, [r7, #20]
   return(result);
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1e6      	bne.n	800f94a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f97c:	e018      	b.n	800f9b0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f982:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f992:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f998:	1c9a      	adds	r2, r3, #2
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f9b0:	bf00      	nop
 800f9b2:	3744      	adds	r7, #68	; 0x44
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b091      	sub	sp, #68	; 0x44
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9ca:	2b21      	cmp	r3, #33	; 0x21
 800f9cc:	d160      	bne.n	800fa90 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f9d6:	e057      	b.n	800fa88 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d133      	bne.n	800fa4c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	e853 3f00 	ldrex	r3, [r3]
 800f9f2:	623b      	str	r3, [r7, #32]
   return(result);
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f9fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	3308      	adds	r3, #8
 800fa02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa04:	633a      	str	r2, [r7, #48]	; 0x30
 800fa06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa0c:	e841 2300 	strex	r3, r2, [r1]
 800fa10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1e5      	bne.n	800f9e4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	e853 3f00 	ldrex	r3, [r3]
 800fa24:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa2c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa36:	61fb      	str	r3, [r7, #28]
 800fa38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3a:	69b9      	ldr	r1, [r7, #24]
 800fa3c:	69fa      	ldr	r2, [r7, #28]
 800fa3e:	e841 2300 	strex	r3, r2, [r1]
 800fa42:	617b      	str	r3, [r7, #20]
   return(result);
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1e6      	bne.n	800fa18 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fa4a:	e021      	b.n	800fa90 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	69db      	ldr	r3, [r3, #28]
 800fa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d013      	beq.n	800fa82 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa5e:	781a      	ldrb	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fa82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa84:	3b01      	subs	r3, #1
 800fa86:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fa88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1a4      	bne.n	800f9d8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fa8e:	e7ff      	b.n	800fa90 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800fa90:	bf00      	nop
 800fa92:	3744      	adds	r7, #68	; 0x44
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b091      	sub	sp, #68	; 0x44
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faaa:	2b21      	cmp	r3, #33	; 0x21
 800faac:	d165      	bne.n	800fb7a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fab4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fab6:	e05c      	b.n	800fb72 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d133      	bne.n	800fb2c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3308      	adds	r3, #8
 800faca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	e853 3f00 	ldrex	r3, [r3]
 800fad2:	61fb      	str	r3, [r7, #28]
   return(result);
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fada:	637b      	str	r3, [r7, #52]	; 0x34
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	3308      	adds	r3, #8
 800fae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faec:	e841 2300 	strex	r3, r2, [r1]
 800faf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1e5      	bne.n	800fac4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb0c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	61bb      	str	r3, [r7, #24]
 800fb18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6979      	ldr	r1, [r7, #20]
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	613b      	str	r3, [r7, #16]
   return(result);
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e6      	bne.n	800faf8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fb2a:	e026      	b.n	800fb7a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	69db      	ldr	r3, [r3, #28]
 800fb32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d018      	beq.n	800fb6c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb3e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	461a      	mov	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb4e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb54:	1c9a      	adds	r2, r3, #2
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fb6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fb72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d19f      	bne.n	800fab8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fb78:	e7ff      	b.n	800fb7a <UART_TxISR_16BIT_FIFOEN+0xde>
 800fb7a:	bf00      	nop
 800fb7c:	3744      	adds	r7, #68	; 0x44
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b088      	sub	sp, #32
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fba2:	61fb      	str	r3, [r7, #28]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	61bb      	str	r3, [r7, #24]
 800fbae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb0:	6979      	ldr	r1, [r7, #20]
 800fbb2:	69ba      	ldr	r2, [r7, #24]
 800fbb4:	e841 2300 	strex	r3, r2, [r1]
 800fbb8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e6      	bne.n	800fb8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7fe fc9c 	bl	800e50c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbd4:	bf00      	nop
 800fbd6:	3720      	adds	r7, #32
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fbf8:	bf00      	nop
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d101      	bne.n	800fc2e <HAL_UARTEx_DisableFifoMode+0x16>
 800fc2a:	2302      	movs	r3, #2
 800fc2c:	e027      	b.n	800fc7e <HAL_UARTEx_DisableFifoMode+0x66>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2201      	movs	r2, #1
 800fc32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2224      	movs	r2, #36	; 0x24
 800fc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f022 0201 	bic.w	r2, r2, #1
 800fc54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fc5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2220      	movs	r2, #32
 800fc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc7c:	2300      	movs	r3, #0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3714      	adds	r7, #20
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr

0800fc8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d101      	bne.n	800fca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc9e:	2302      	movs	r3, #2
 800fca0:	e02d      	b.n	800fcfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2201      	movs	r2, #1
 800fca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2224      	movs	r2, #36	; 0x24
 800fcae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f022 0201 	bic.w	r2, r2, #1
 800fcc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f850 	bl	800fd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2220      	movs	r2, #32
 800fcf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}

0800fd06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b084      	sub	sp, #16
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d101      	bne.n	800fd1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	e02d      	b.n	800fd7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2224      	movs	r2, #36	; 0x24
 800fd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f022 0201 	bic.w	r2, r2, #1
 800fd44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	430a      	orrs	r2, r1
 800fd58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f812 	bl	800fd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2220      	movs	r2, #32
 800fd6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d108      	bne.n	800fda6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fda4:	e031      	b.n	800fe0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fda6:	2310      	movs	r3, #16
 800fda8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdaa:	2310      	movs	r3, #16
 800fdac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	0e5b      	lsrs	r3, r3, #25
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	f003 0307 	and.w	r3, r3, #7
 800fdbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	0f5b      	lsrs	r3, r3, #29
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	f003 0307 	and.w	r3, r3, #7
 800fdcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdce:	7bbb      	ldrb	r3, [r7, #14]
 800fdd0:	7b3a      	ldrb	r2, [r7, #12]
 800fdd2:	4911      	ldr	r1, [pc, #68]	; (800fe18 <UARTEx_SetNbDataToProcess+0x94>)
 800fdd4:	5c8a      	ldrb	r2, [r1, r2]
 800fdd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdda:	7b3a      	ldrb	r2, [r7, #12]
 800fddc:	490f      	ldr	r1, [pc, #60]	; (800fe1c <UARTEx_SetNbDataToProcess+0x98>)
 800fdde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fde0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
 800fdee:	7b7a      	ldrb	r2, [r7, #13]
 800fdf0:	4909      	ldr	r1, [pc, #36]	; (800fe18 <UARTEx_SetNbDataToProcess+0x94>)
 800fdf2:	5c8a      	ldrb	r2, [r1, r2]
 800fdf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fdf8:	7b7a      	ldrb	r2, [r7, #13]
 800fdfa:	4908      	ldr	r1, [pc, #32]	; (800fe1c <UARTEx_SetNbDataToProcess+0x98>)
 800fdfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdfe:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe02:	b29a      	uxth	r2, r3
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fe0a:	bf00      	nop
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	08011d8c 	.word	0x08011d8c
 800fe1c:	08011d94 	.word	0x08011d94

0800fe20 <atoi>:
 800fe20:	220a      	movs	r2, #10
 800fe22:	2100      	movs	r1, #0
 800fe24:	f000 b8e2 	b.w	800ffec <strtol>

0800fe28 <__errno>:
 800fe28:	4b01      	ldr	r3, [pc, #4]	; (800fe30 <__errno+0x8>)
 800fe2a:	6818      	ldr	r0, [r3, #0]
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop
 800fe30:	2400003c 	.word	0x2400003c

0800fe34 <__libc_init_array>:
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	4d0d      	ldr	r5, [pc, #52]	; (800fe6c <__libc_init_array+0x38>)
 800fe38:	4c0d      	ldr	r4, [pc, #52]	; (800fe70 <__libc_init_array+0x3c>)
 800fe3a:	1b64      	subs	r4, r4, r5
 800fe3c:	10a4      	asrs	r4, r4, #2
 800fe3e:	2600      	movs	r6, #0
 800fe40:	42a6      	cmp	r6, r4
 800fe42:	d109      	bne.n	800fe58 <__libc_init_array+0x24>
 800fe44:	4d0b      	ldr	r5, [pc, #44]	; (800fe74 <__libc_init_array+0x40>)
 800fe46:	4c0c      	ldr	r4, [pc, #48]	; (800fe78 <__libc_init_array+0x44>)
 800fe48:	f001 ff70 	bl	8011d2c <_init>
 800fe4c:	1b64      	subs	r4, r4, r5
 800fe4e:	10a4      	asrs	r4, r4, #2
 800fe50:	2600      	movs	r6, #0
 800fe52:	42a6      	cmp	r6, r4
 800fe54:	d105      	bne.n	800fe62 <__libc_init_array+0x2e>
 800fe56:	bd70      	pop	{r4, r5, r6, pc}
 800fe58:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe5c:	4798      	blx	r3
 800fe5e:	3601      	adds	r6, #1
 800fe60:	e7ee      	b.n	800fe40 <__libc_init_array+0xc>
 800fe62:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe66:	4798      	blx	r3
 800fe68:	3601      	adds	r6, #1
 800fe6a:	e7f2      	b.n	800fe52 <__libc_init_array+0x1e>
 800fe6c:	08013968 	.word	0x08013968
 800fe70:	08013968 	.word	0x08013968
 800fe74:	08013968 	.word	0x08013968
 800fe78:	0801396c 	.word	0x0801396c

0800fe7c <memcpy>:
 800fe7c:	440a      	add	r2, r1
 800fe7e:	4291      	cmp	r1, r2
 800fe80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe84:	d100      	bne.n	800fe88 <memcpy+0xc>
 800fe86:	4770      	bx	lr
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe92:	4291      	cmp	r1, r2
 800fe94:	d1f9      	bne.n	800fe8a <memcpy+0xe>
 800fe96:	bd10      	pop	{r4, pc}

0800fe98 <memset>:
 800fe98:	4402      	add	r2, r0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d100      	bne.n	800fea2 <memset+0xa>
 800fea0:	4770      	bx	lr
 800fea2:	f803 1b01 	strb.w	r1, [r3], #1
 800fea6:	e7f9      	b.n	800fe9c <memset+0x4>

0800fea8 <siprintf>:
 800fea8:	b40e      	push	{r1, r2, r3}
 800feaa:	b500      	push	{lr}
 800feac:	b09c      	sub	sp, #112	; 0x70
 800feae:	ab1d      	add	r3, sp, #116	; 0x74
 800feb0:	9002      	str	r0, [sp, #8]
 800feb2:	9006      	str	r0, [sp, #24]
 800feb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800feb8:	4809      	ldr	r0, [pc, #36]	; (800fee0 <siprintf+0x38>)
 800feba:	9107      	str	r1, [sp, #28]
 800febc:	9104      	str	r1, [sp, #16]
 800febe:	4909      	ldr	r1, [pc, #36]	; (800fee4 <siprintf+0x3c>)
 800fec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fec4:	9105      	str	r1, [sp, #20]
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	a902      	add	r1, sp, #8
 800fecc:	f000 f8f4 	bl	80100b8 <_svfiprintf_r>
 800fed0:	9b02      	ldr	r3, [sp, #8]
 800fed2:	2200      	movs	r2, #0
 800fed4:	701a      	strb	r2, [r3, #0]
 800fed6:	b01c      	add	sp, #112	; 0x70
 800fed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fedc:	b003      	add	sp, #12
 800fede:	4770      	bx	lr
 800fee0:	2400003c 	.word	0x2400003c
 800fee4:	ffff0208 	.word	0xffff0208

0800fee8 <_strtol_l.constprop.0>:
 800fee8:	2b01      	cmp	r3, #1
 800feea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feee:	d001      	beq.n	800fef4 <_strtol_l.constprop.0+0xc>
 800fef0:	2b24      	cmp	r3, #36	; 0x24
 800fef2:	d906      	bls.n	800ff02 <_strtol_l.constprop.0+0x1a>
 800fef4:	f7ff ff98 	bl	800fe28 <__errno>
 800fef8:	2316      	movs	r3, #22
 800fefa:	6003      	str	r3, [r0, #0]
 800fefc:	2000      	movs	r0, #0
 800fefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ffe8 <_strtol_l.constprop.0+0x100>
 800ff06:	460d      	mov	r5, r1
 800ff08:	462e      	mov	r6, r5
 800ff0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ff12:	f017 0708 	ands.w	r7, r7, #8
 800ff16:	d1f7      	bne.n	800ff08 <_strtol_l.constprop.0+0x20>
 800ff18:	2c2d      	cmp	r4, #45	; 0x2d
 800ff1a:	d132      	bne.n	800ff82 <_strtol_l.constprop.0+0x9a>
 800ff1c:	782c      	ldrb	r4, [r5, #0]
 800ff1e:	2701      	movs	r7, #1
 800ff20:	1cb5      	adds	r5, r6, #2
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d05b      	beq.n	800ffde <_strtol_l.constprop.0+0xf6>
 800ff26:	2b10      	cmp	r3, #16
 800ff28:	d109      	bne.n	800ff3e <_strtol_l.constprop.0+0x56>
 800ff2a:	2c30      	cmp	r4, #48	; 0x30
 800ff2c:	d107      	bne.n	800ff3e <_strtol_l.constprop.0+0x56>
 800ff2e:	782c      	ldrb	r4, [r5, #0]
 800ff30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ff34:	2c58      	cmp	r4, #88	; 0x58
 800ff36:	d14d      	bne.n	800ffd4 <_strtol_l.constprop.0+0xec>
 800ff38:	786c      	ldrb	r4, [r5, #1]
 800ff3a:	2310      	movs	r3, #16
 800ff3c:	3502      	adds	r5, #2
 800ff3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ff42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ff46:	f04f 0c00 	mov.w	ip, #0
 800ff4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ff4e:	4666      	mov	r6, ip
 800ff50:	fb03 8a19 	mls	sl, r3, r9, r8
 800ff54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ff58:	f1be 0f09 	cmp.w	lr, #9
 800ff5c:	d816      	bhi.n	800ff8c <_strtol_l.constprop.0+0xa4>
 800ff5e:	4674      	mov	r4, lr
 800ff60:	42a3      	cmp	r3, r4
 800ff62:	dd24      	ble.n	800ffae <_strtol_l.constprop.0+0xc6>
 800ff64:	f1bc 0f00 	cmp.w	ip, #0
 800ff68:	db1e      	blt.n	800ffa8 <_strtol_l.constprop.0+0xc0>
 800ff6a:	45b1      	cmp	r9, r6
 800ff6c:	d31c      	bcc.n	800ffa8 <_strtol_l.constprop.0+0xc0>
 800ff6e:	d101      	bne.n	800ff74 <_strtol_l.constprop.0+0x8c>
 800ff70:	45a2      	cmp	sl, r4
 800ff72:	db19      	blt.n	800ffa8 <_strtol_l.constprop.0+0xc0>
 800ff74:	fb06 4603 	mla	r6, r6, r3, r4
 800ff78:	f04f 0c01 	mov.w	ip, #1
 800ff7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff80:	e7e8      	b.n	800ff54 <_strtol_l.constprop.0+0x6c>
 800ff82:	2c2b      	cmp	r4, #43	; 0x2b
 800ff84:	bf04      	itt	eq
 800ff86:	782c      	ldrbeq	r4, [r5, #0]
 800ff88:	1cb5      	addeq	r5, r6, #2
 800ff8a:	e7ca      	b.n	800ff22 <_strtol_l.constprop.0+0x3a>
 800ff8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ff90:	f1be 0f19 	cmp.w	lr, #25
 800ff94:	d801      	bhi.n	800ff9a <_strtol_l.constprop.0+0xb2>
 800ff96:	3c37      	subs	r4, #55	; 0x37
 800ff98:	e7e2      	b.n	800ff60 <_strtol_l.constprop.0+0x78>
 800ff9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ff9e:	f1be 0f19 	cmp.w	lr, #25
 800ffa2:	d804      	bhi.n	800ffae <_strtol_l.constprop.0+0xc6>
 800ffa4:	3c57      	subs	r4, #87	; 0x57
 800ffa6:	e7db      	b.n	800ff60 <_strtol_l.constprop.0+0x78>
 800ffa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ffac:	e7e6      	b.n	800ff7c <_strtol_l.constprop.0+0x94>
 800ffae:	f1bc 0f00 	cmp.w	ip, #0
 800ffb2:	da05      	bge.n	800ffc0 <_strtol_l.constprop.0+0xd8>
 800ffb4:	2322      	movs	r3, #34	; 0x22
 800ffb6:	6003      	str	r3, [r0, #0]
 800ffb8:	4646      	mov	r6, r8
 800ffba:	b942      	cbnz	r2, 800ffce <_strtol_l.constprop.0+0xe6>
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	e79e      	b.n	800fefe <_strtol_l.constprop.0+0x16>
 800ffc0:	b107      	cbz	r7, 800ffc4 <_strtol_l.constprop.0+0xdc>
 800ffc2:	4276      	negs	r6, r6
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	d0f9      	beq.n	800ffbc <_strtol_l.constprop.0+0xd4>
 800ffc8:	f1bc 0f00 	cmp.w	ip, #0
 800ffcc:	d000      	beq.n	800ffd0 <_strtol_l.constprop.0+0xe8>
 800ffce:	1e69      	subs	r1, r5, #1
 800ffd0:	6011      	str	r1, [r2, #0]
 800ffd2:	e7f3      	b.n	800ffbc <_strtol_l.constprop.0+0xd4>
 800ffd4:	2430      	movs	r4, #48	; 0x30
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1b1      	bne.n	800ff3e <_strtol_l.constprop.0+0x56>
 800ffda:	2308      	movs	r3, #8
 800ffdc:	e7af      	b.n	800ff3e <_strtol_l.constprop.0+0x56>
 800ffde:	2c30      	cmp	r4, #48	; 0x30
 800ffe0:	d0a5      	beq.n	800ff2e <_strtol_l.constprop.0+0x46>
 800ffe2:	230a      	movs	r3, #10
 800ffe4:	e7ab      	b.n	800ff3e <_strtol_l.constprop.0+0x56>
 800ffe6:	bf00      	nop
 800ffe8:	08011d9d 	.word	0x08011d9d

0800ffec <strtol>:
 800ffec:	4613      	mov	r3, r2
 800ffee:	460a      	mov	r2, r1
 800fff0:	4601      	mov	r1, r0
 800fff2:	4802      	ldr	r0, [pc, #8]	; (800fffc <strtol+0x10>)
 800fff4:	6800      	ldr	r0, [r0, #0]
 800fff6:	f7ff bf77 	b.w	800fee8 <_strtol_l.constprop.0>
 800fffa:	bf00      	nop
 800fffc:	2400003c 	.word	0x2400003c

08010000 <__ssputs_r>:
 8010000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010004:	688e      	ldr	r6, [r1, #8]
 8010006:	429e      	cmp	r6, r3
 8010008:	4682      	mov	sl, r0
 801000a:	460c      	mov	r4, r1
 801000c:	4690      	mov	r8, r2
 801000e:	461f      	mov	r7, r3
 8010010:	d838      	bhi.n	8010084 <__ssputs_r+0x84>
 8010012:	898a      	ldrh	r2, [r1, #12]
 8010014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010018:	d032      	beq.n	8010080 <__ssputs_r+0x80>
 801001a:	6825      	ldr	r5, [r4, #0]
 801001c:	6909      	ldr	r1, [r1, #16]
 801001e:	eba5 0901 	sub.w	r9, r5, r1
 8010022:	6965      	ldr	r5, [r4, #20]
 8010024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801002c:	3301      	adds	r3, #1
 801002e:	444b      	add	r3, r9
 8010030:	106d      	asrs	r5, r5, #1
 8010032:	429d      	cmp	r5, r3
 8010034:	bf38      	it	cc
 8010036:	461d      	movcc	r5, r3
 8010038:	0553      	lsls	r3, r2, #21
 801003a:	d531      	bpl.n	80100a0 <__ssputs_r+0xa0>
 801003c:	4629      	mov	r1, r5
 801003e:	f000 fb55 	bl	80106ec <_malloc_r>
 8010042:	4606      	mov	r6, r0
 8010044:	b950      	cbnz	r0, 801005c <__ssputs_r+0x5c>
 8010046:	230c      	movs	r3, #12
 8010048:	f8ca 3000 	str.w	r3, [sl]
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010052:	81a3      	strh	r3, [r4, #12]
 8010054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801005c:	6921      	ldr	r1, [r4, #16]
 801005e:	464a      	mov	r2, r9
 8010060:	f7ff ff0c 	bl	800fe7c <memcpy>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801006a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801006e:	81a3      	strh	r3, [r4, #12]
 8010070:	6126      	str	r6, [r4, #16]
 8010072:	6165      	str	r5, [r4, #20]
 8010074:	444e      	add	r6, r9
 8010076:	eba5 0509 	sub.w	r5, r5, r9
 801007a:	6026      	str	r6, [r4, #0]
 801007c:	60a5      	str	r5, [r4, #8]
 801007e:	463e      	mov	r6, r7
 8010080:	42be      	cmp	r6, r7
 8010082:	d900      	bls.n	8010086 <__ssputs_r+0x86>
 8010084:	463e      	mov	r6, r7
 8010086:	6820      	ldr	r0, [r4, #0]
 8010088:	4632      	mov	r2, r6
 801008a:	4641      	mov	r1, r8
 801008c:	f000 faa8 	bl	80105e0 <memmove>
 8010090:	68a3      	ldr	r3, [r4, #8]
 8010092:	1b9b      	subs	r3, r3, r6
 8010094:	60a3      	str	r3, [r4, #8]
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	4433      	add	r3, r6
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	2000      	movs	r0, #0
 801009e:	e7db      	b.n	8010058 <__ssputs_r+0x58>
 80100a0:	462a      	mov	r2, r5
 80100a2:	f000 fb97 	bl	80107d4 <_realloc_r>
 80100a6:	4606      	mov	r6, r0
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d1e1      	bne.n	8010070 <__ssputs_r+0x70>
 80100ac:	6921      	ldr	r1, [r4, #16]
 80100ae:	4650      	mov	r0, sl
 80100b0:	f000 fab0 	bl	8010614 <_free_r>
 80100b4:	e7c7      	b.n	8010046 <__ssputs_r+0x46>
	...

080100b8 <_svfiprintf_r>:
 80100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	4698      	mov	r8, r3
 80100be:	898b      	ldrh	r3, [r1, #12]
 80100c0:	061b      	lsls	r3, r3, #24
 80100c2:	b09d      	sub	sp, #116	; 0x74
 80100c4:	4607      	mov	r7, r0
 80100c6:	460d      	mov	r5, r1
 80100c8:	4614      	mov	r4, r2
 80100ca:	d50e      	bpl.n	80100ea <_svfiprintf_r+0x32>
 80100cc:	690b      	ldr	r3, [r1, #16]
 80100ce:	b963      	cbnz	r3, 80100ea <_svfiprintf_r+0x32>
 80100d0:	2140      	movs	r1, #64	; 0x40
 80100d2:	f000 fb0b 	bl	80106ec <_malloc_r>
 80100d6:	6028      	str	r0, [r5, #0]
 80100d8:	6128      	str	r0, [r5, #16]
 80100da:	b920      	cbnz	r0, 80100e6 <_svfiprintf_r+0x2e>
 80100dc:	230c      	movs	r3, #12
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100e4:	e0d1      	b.n	801028a <_svfiprintf_r+0x1d2>
 80100e6:	2340      	movs	r3, #64	; 0x40
 80100e8:	616b      	str	r3, [r5, #20]
 80100ea:	2300      	movs	r3, #0
 80100ec:	9309      	str	r3, [sp, #36]	; 0x24
 80100ee:	2320      	movs	r3, #32
 80100f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80100f8:	2330      	movs	r3, #48	; 0x30
 80100fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102a4 <_svfiprintf_r+0x1ec>
 80100fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010102:	f04f 0901 	mov.w	r9, #1
 8010106:	4623      	mov	r3, r4
 8010108:	469a      	mov	sl, r3
 801010a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801010e:	b10a      	cbz	r2, 8010114 <_svfiprintf_r+0x5c>
 8010110:	2a25      	cmp	r2, #37	; 0x25
 8010112:	d1f9      	bne.n	8010108 <_svfiprintf_r+0x50>
 8010114:	ebba 0b04 	subs.w	fp, sl, r4
 8010118:	d00b      	beq.n	8010132 <_svfiprintf_r+0x7a>
 801011a:	465b      	mov	r3, fp
 801011c:	4622      	mov	r2, r4
 801011e:	4629      	mov	r1, r5
 8010120:	4638      	mov	r0, r7
 8010122:	f7ff ff6d 	bl	8010000 <__ssputs_r>
 8010126:	3001      	adds	r0, #1
 8010128:	f000 80aa 	beq.w	8010280 <_svfiprintf_r+0x1c8>
 801012c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801012e:	445a      	add	r2, fp
 8010130:	9209      	str	r2, [sp, #36]	; 0x24
 8010132:	f89a 3000 	ldrb.w	r3, [sl]
 8010136:	2b00      	cmp	r3, #0
 8010138:	f000 80a2 	beq.w	8010280 <_svfiprintf_r+0x1c8>
 801013c:	2300      	movs	r3, #0
 801013e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010146:	f10a 0a01 	add.w	sl, sl, #1
 801014a:	9304      	str	r3, [sp, #16]
 801014c:	9307      	str	r3, [sp, #28]
 801014e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010152:	931a      	str	r3, [sp, #104]	; 0x68
 8010154:	4654      	mov	r4, sl
 8010156:	2205      	movs	r2, #5
 8010158:	f814 1b01 	ldrb.w	r1, [r4], #1
 801015c:	4851      	ldr	r0, [pc, #324]	; (80102a4 <_svfiprintf_r+0x1ec>)
 801015e:	f7f0 f8c7 	bl	80002f0 <memchr>
 8010162:	9a04      	ldr	r2, [sp, #16]
 8010164:	b9d8      	cbnz	r0, 801019e <_svfiprintf_r+0xe6>
 8010166:	06d0      	lsls	r0, r2, #27
 8010168:	bf44      	itt	mi
 801016a:	2320      	movmi	r3, #32
 801016c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010170:	0711      	lsls	r1, r2, #28
 8010172:	bf44      	itt	mi
 8010174:	232b      	movmi	r3, #43	; 0x2b
 8010176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801017a:	f89a 3000 	ldrb.w	r3, [sl]
 801017e:	2b2a      	cmp	r3, #42	; 0x2a
 8010180:	d015      	beq.n	80101ae <_svfiprintf_r+0xf6>
 8010182:	9a07      	ldr	r2, [sp, #28]
 8010184:	4654      	mov	r4, sl
 8010186:	2000      	movs	r0, #0
 8010188:	f04f 0c0a 	mov.w	ip, #10
 801018c:	4621      	mov	r1, r4
 801018e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010192:	3b30      	subs	r3, #48	; 0x30
 8010194:	2b09      	cmp	r3, #9
 8010196:	d94e      	bls.n	8010236 <_svfiprintf_r+0x17e>
 8010198:	b1b0      	cbz	r0, 80101c8 <_svfiprintf_r+0x110>
 801019a:	9207      	str	r2, [sp, #28]
 801019c:	e014      	b.n	80101c8 <_svfiprintf_r+0x110>
 801019e:	eba0 0308 	sub.w	r3, r0, r8
 80101a2:	fa09 f303 	lsl.w	r3, r9, r3
 80101a6:	4313      	orrs	r3, r2
 80101a8:	9304      	str	r3, [sp, #16]
 80101aa:	46a2      	mov	sl, r4
 80101ac:	e7d2      	b.n	8010154 <_svfiprintf_r+0x9c>
 80101ae:	9b03      	ldr	r3, [sp, #12]
 80101b0:	1d19      	adds	r1, r3, #4
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	9103      	str	r1, [sp, #12]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	bfbb      	ittet	lt
 80101ba:	425b      	neglt	r3, r3
 80101bc:	f042 0202 	orrlt.w	r2, r2, #2
 80101c0:	9307      	strge	r3, [sp, #28]
 80101c2:	9307      	strlt	r3, [sp, #28]
 80101c4:	bfb8      	it	lt
 80101c6:	9204      	strlt	r2, [sp, #16]
 80101c8:	7823      	ldrb	r3, [r4, #0]
 80101ca:	2b2e      	cmp	r3, #46	; 0x2e
 80101cc:	d10c      	bne.n	80101e8 <_svfiprintf_r+0x130>
 80101ce:	7863      	ldrb	r3, [r4, #1]
 80101d0:	2b2a      	cmp	r3, #42	; 0x2a
 80101d2:	d135      	bne.n	8010240 <_svfiprintf_r+0x188>
 80101d4:	9b03      	ldr	r3, [sp, #12]
 80101d6:	1d1a      	adds	r2, r3, #4
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	9203      	str	r2, [sp, #12]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	bfb8      	it	lt
 80101e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80101e4:	3402      	adds	r4, #2
 80101e6:	9305      	str	r3, [sp, #20]
 80101e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102b4 <_svfiprintf_r+0x1fc>
 80101ec:	7821      	ldrb	r1, [r4, #0]
 80101ee:	2203      	movs	r2, #3
 80101f0:	4650      	mov	r0, sl
 80101f2:	f7f0 f87d 	bl	80002f0 <memchr>
 80101f6:	b140      	cbz	r0, 801020a <_svfiprintf_r+0x152>
 80101f8:	2340      	movs	r3, #64	; 0x40
 80101fa:	eba0 000a 	sub.w	r0, r0, sl
 80101fe:	fa03 f000 	lsl.w	r0, r3, r0
 8010202:	9b04      	ldr	r3, [sp, #16]
 8010204:	4303      	orrs	r3, r0
 8010206:	3401      	adds	r4, #1
 8010208:	9304      	str	r3, [sp, #16]
 801020a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801020e:	4826      	ldr	r0, [pc, #152]	; (80102a8 <_svfiprintf_r+0x1f0>)
 8010210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010214:	2206      	movs	r2, #6
 8010216:	f7f0 f86b 	bl	80002f0 <memchr>
 801021a:	2800      	cmp	r0, #0
 801021c:	d038      	beq.n	8010290 <_svfiprintf_r+0x1d8>
 801021e:	4b23      	ldr	r3, [pc, #140]	; (80102ac <_svfiprintf_r+0x1f4>)
 8010220:	bb1b      	cbnz	r3, 801026a <_svfiprintf_r+0x1b2>
 8010222:	9b03      	ldr	r3, [sp, #12]
 8010224:	3307      	adds	r3, #7
 8010226:	f023 0307 	bic.w	r3, r3, #7
 801022a:	3308      	adds	r3, #8
 801022c:	9303      	str	r3, [sp, #12]
 801022e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010230:	4433      	add	r3, r6
 8010232:	9309      	str	r3, [sp, #36]	; 0x24
 8010234:	e767      	b.n	8010106 <_svfiprintf_r+0x4e>
 8010236:	fb0c 3202 	mla	r2, ip, r2, r3
 801023a:	460c      	mov	r4, r1
 801023c:	2001      	movs	r0, #1
 801023e:	e7a5      	b.n	801018c <_svfiprintf_r+0xd4>
 8010240:	2300      	movs	r3, #0
 8010242:	3401      	adds	r4, #1
 8010244:	9305      	str	r3, [sp, #20]
 8010246:	4619      	mov	r1, r3
 8010248:	f04f 0c0a 	mov.w	ip, #10
 801024c:	4620      	mov	r0, r4
 801024e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010252:	3a30      	subs	r2, #48	; 0x30
 8010254:	2a09      	cmp	r2, #9
 8010256:	d903      	bls.n	8010260 <_svfiprintf_r+0x1a8>
 8010258:	2b00      	cmp	r3, #0
 801025a:	d0c5      	beq.n	80101e8 <_svfiprintf_r+0x130>
 801025c:	9105      	str	r1, [sp, #20]
 801025e:	e7c3      	b.n	80101e8 <_svfiprintf_r+0x130>
 8010260:	fb0c 2101 	mla	r1, ip, r1, r2
 8010264:	4604      	mov	r4, r0
 8010266:	2301      	movs	r3, #1
 8010268:	e7f0      	b.n	801024c <_svfiprintf_r+0x194>
 801026a:	ab03      	add	r3, sp, #12
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	462a      	mov	r2, r5
 8010270:	4b0f      	ldr	r3, [pc, #60]	; (80102b0 <_svfiprintf_r+0x1f8>)
 8010272:	a904      	add	r1, sp, #16
 8010274:	4638      	mov	r0, r7
 8010276:	f3af 8000 	nop.w
 801027a:	1c42      	adds	r2, r0, #1
 801027c:	4606      	mov	r6, r0
 801027e:	d1d6      	bne.n	801022e <_svfiprintf_r+0x176>
 8010280:	89ab      	ldrh	r3, [r5, #12]
 8010282:	065b      	lsls	r3, r3, #25
 8010284:	f53f af2c 	bmi.w	80100e0 <_svfiprintf_r+0x28>
 8010288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801028a:	b01d      	add	sp, #116	; 0x74
 801028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010290:	ab03      	add	r3, sp, #12
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	462a      	mov	r2, r5
 8010296:	4b06      	ldr	r3, [pc, #24]	; (80102b0 <_svfiprintf_r+0x1f8>)
 8010298:	a904      	add	r1, sp, #16
 801029a:	4638      	mov	r0, r7
 801029c:	f000 f87a 	bl	8010394 <_printf_i>
 80102a0:	e7eb      	b.n	801027a <_svfiprintf_r+0x1c2>
 80102a2:	bf00      	nop
 80102a4:	08011e9d 	.word	0x08011e9d
 80102a8:	08011ea7 	.word	0x08011ea7
 80102ac:	00000000 	.word	0x00000000
 80102b0:	08010001 	.word	0x08010001
 80102b4:	08011ea3 	.word	0x08011ea3

080102b8 <_printf_common>:
 80102b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102bc:	4616      	mov	r6, r2
 80102be:	4699      	mov	r9, r3
 80102c0:	688a      	ldr	r2, [r1, #8]
 80102c2:	690b      	ldr	r3, [r1, #16]
 80102c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102c8:	4293      	cmp	r3, r2
 80102ca:	bfb8      	it	lt
 80102cc:	4613      	movlt	r3, r2
 80102ce:	6033      	str	r3, [r6, #0]
 80102d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102d4:	4607      	mov	r7, r0
 80102d6:	460c      	mov	r4, r1
 80102d8:	b10a      	cbz	r2, 80102de <_printf_common+0x26>
 80102da:	3301      	adds	r3, #1
 80102dc:	6033      	str	r3, [r6, #0]
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	0699      	lsls	r1, r3, #26
 80102e2:	bf42      	ittt	mi
 80102e4:	6833      	ldrmi	r3, [r6, #0]
 80102e6:	3302      	addmi	r3, #2
 80102e8:	6033      	strmi	r3, [r6, #0]
 80102ea:	6825      	ldr	r5, [r4, #0]
 80102ec:	f015 0506 	ands.w	r5, r5, #6
 80102f0:	d106      	bne.n	8010300 <_printf_common+0x48>
 80102f2:	f104 0a19 	add.w	sl, r4, #25
 80102f6:	68e3      	ldr	r3, [r4, #12]
 80102f8:	6832      	ldr	r2, [r6, #0]
 80102fa:	1a9b      	subs	r3, r3, r2
 80102fc:	42ab      	cmp	r3, r5
 80102fe:	dc26      	bgt.n	801034e <_printf_common+0x96>
 8010300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010304:	1e13      	subs	r3, r2, #0
 8010306:	6822      	ldr	r2, [r4, #0]
 8010308:	bf18      	it	ne
 801030a:	2301      	movne	r3, #1
 801030c:	0692      	lsls	r2, r2, #26
 801030e:	d42b      	bmi.n	8010368 <_printf_common+0xb0>
 8010310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010314:	4649      	mov	r1, r9
 8010316:	4638      	mov	r0, r7
 8010318:	47c0      	blx	r8
 801031a:	3001      	adds	r0, #1
 801031c:	d01e      	beq.n	801035c <_printf_common+0xa4>
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	68e5      	ldr	r5, [r4, #12]
 8010322:	6832      	ldr	r2, [r6, #0]
 8010324:	f003 0306 	and.w	r3, r3, #6
 8010328:	2b04      	cmp	r3, #4
 801032a:	bf08      	it	eq
 801032c:	1aad      	subeq	r5, r5, r2
 801032e:	68a3      	ldr	r3, [r4, #8]
 8010330:	6922      	ldr	r2, [r4, #16]
 8010332:	bf0c      	ite	eq
 8010334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010338:	2500      	movne	r5, #0
 801033a:	4293      	cmp	r3, r2
 801033c:	bfc4      	itt	gt
 801033e:	1a9b      	subgt	r3, r3, r2
 8010340:	18ed      	addgt	r5, r5, r3
 8010342:	2600      	movs	r6, #0
 8010344:	341a      	adds	r4, #26
 8010346:	42b5      	cmp	r5, r6
 8010348:	d11a      	bne.n	8010380 <_printf_common+0xc8>
 801034a:	2000      	movs	r0, #0
 801034c:	e008      	b.n	8010360 <_printf_common+0xa8>
 801034e:	2301      	movs	r3, #1
 8010350:	4652      	mov	r2, sl
 8010352:	4649      	mov	r1, r9
 8010354:	4638      	mov	r0, r7
 8010356:	47c0      	blx	r8
 8010358:	3001      	adds	r0, #1
 801035a:	d103      	bne.n	8010364 <_printf_common+0xac>
 801035c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010364:	3501      	adds	r5, #1
 8010366:	e7c6      	b.n	80102f6 <_printf_common+0x3e>
 8010368:	18e1      	adds	r1, r4, r3
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	2030      	movs	r0, #48	; 0x30
 801036e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010372:	4422      	add	r2, r4
 8010374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801037c:	3302      	adds	r3, #2
 801037e:	e7c7      	b.n	8010310 <_printf_common+0x58>
 8010380:	2301      	movs	r3, #1
 8010382:	4622      	mov	r2, r4
 8010384:	4649      	mov	r1, r9
 8010386:	4638      	mov	r0, r7
 8010388:	47c0      	blx	r8
 801038a:	3001      	adds	r0, #1
 801038c:	d0e6      	beq.n	801035c <_printf_common+0xa4>
 801038e:	3601      	adds	r6, #1
 8010390:	e7d9      	b.n	8010346 <_printf_common+0x8e>
	...

08010394 <_printf_i>:
 8010394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010398:	7e0f      	ldrb	r7, [r1, #24]
 801039a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801039c:	2f78      	cmp	r7, #120	; 0x78
 801039e:	4691      	mov	r9, r2
 80103a0:	4680      	mov	r8, r0
 80103a2:	460c      	mov	r4, r1
 80103a4:	469a      	mov	sl, r3
 80103a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103aa:	d807      	bhi.n	80103bc <_printf_i+0x28>
 80103ac:	2f62      	cmp	r7, #98	; 0x62
 80103ae:	d80a      	bhi.n	80103c6 <_printf_i+0x32>
 80103b0:	2f00      	cmp	r7, #0
 80103b2:	f000 80d8 	beq.w	8010566 <_printf_i+0x1d2>
 80103b6:	2f58      	cmp	r7, #88	; 0x58
 80103b8:	f000 80a3 	beq.w	8010502 <_printf_i+0x16e>
 80103bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103c4:	e03a      	b.n	801043c <_printf_i+0xa8>
 80103c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103ca:	2b15      	cmp	r3, #21
 80103cc:	d8f6      	bhi.n	80103bc <_printf_i+0x28>
 80103ce:	a101      	add	r1, pc, #4	; (adr r1, 80103d4 <_printf_i+0x40>)
 80103d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103d4:	0801042d 	.word	0x0801042d
 80103d8:	08010441 	.word	0x08010441
 80103dc:	080103bd 	.word	0x080103bd
 80103e0:	080103bd 	.word	0x080103bd
 80103e4:	080103bd 	.word	0x080103bd
 80103e8:	080103bd 	.word	0x080103bd
 80103ec:	08010441 	.word	0x08010441
 80103f0:	080103bd 	.word	0x080103bd
 80103f4:	080103bd 	.word	0x080103bd
 80103f8:	080103bd 	.word	0x080103bd
 80103fc:	080103bd 	.word	0x080103bd
 8010400:	0801054d 	.word	0x0801054d
 8010404:	08010471 	.word	0x08010471
 8010408:	0801052f 	.word	0x0801052f
 801040c:	080103bd 	.word	0x080103bd
 8010410:	080103bd 	.word	0x080103bd
 8010414:	0801056f 	.word	0x0801056f
 8010418:	080103bd 	.word	0x080103bd
 801041c:	08010471 	.word	0x08010471
 8010420:	080103bd 	.word	0x080103bd
 8010424:	080103bd 	.word	0x080103bd
 8010428:	08010537 	.word	0x08010537
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	1d1a      	adds	r2, r3, #4
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	602a      	str	r2, [r5, #0]
 8010434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801043c:	2301      	movs	r3, #1
 801043e:	e0a3      	b.n	8010588 <_printf_i+0x1f4>
 8010440:	6820      	ldr	r0, [r4, #0]
 8010442:	6829      	ldr	r1, [r5, #0]
 8010444:	0606      	lsls	r6, r0, #24
 8010446:	f101 0304 	add.w	r3, r1, #4
 801044a:	d50a      	bpl.n	8010462 <_printf_i+0xce>
 801044c:	680e      	ldr	r6, [r1, #0]
 801044e:	602b      	str	r3, [r5, #0]
 8010450:	2e00      	cmp	r6, #0
 8010452:	da03      	bge.n	801045c <_printf_i+0xc8>
 8010454:	232d      	movs	r3, #45	; 0x2d
 8010456:	4276      	negs	r6, r6
 8010458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801045c:	485e      	ldr	r0, [pc, #376]	; (80105d8 <_printf_i+0x244>)
 801045e:	230a      	movs	r3, #10
 8010460:	e019      	b.n	8010496 <_printf_i+0x102>
 8010462:	680e      	ldr	r6, [r1, #0]
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	f010 0f40 	tst.w	r0, #64	; 0x40
 801046a:	bf18      	it	ne
 801046c:	b236      	sxthne	r6, r6
 801046e:	e7ef      	b.n	8010450 <_printf_i+0xbc>
 8010470:	682b      	ldr	r3, [r5, #0]
 8010472:	6820      	ldr	r0, [r4, #0]
 8010474:	1d19      	adds	r1, r3, #4
 8010476:	6029      	str	r1, [r5, #0]
 8010478:	0601      	lsls	r1, r0, #24
 801047a:	d501      	bpl.n	8010480 <_printf_i+0xec>
 801047c:	681e      	ldr	r6, [r3, #0]
 801047e:	e002      	b.n	8010486 <_printf_i+0xf2>
 8010480:	0646      	lsls	r6, r0, #25
 8010482:	d5fb      	bpl.n	801047c <_printf_i+0xe8>
 8010484:	881e      	ldrh	r6, [r3, #0]
 8010486:	4854      	ldr	r0, [pc, #336]	; (80105d8 <_printf_i+0x244>)
 8010488:	2f6f      	cmp	r7, #111	; 0x6f
 801048a:	bf0c      	ite	eq
 801048c:	2308      	moveq	r3, #8
 801048e:	230a      	movne	r3, #10
 8010490:	2100      	movs	r1, #0
 8010492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010496:	6865      	ldr	r5, [r4, #4]
 8010498:	60a5      	str	r5, [r4, #8]
 801049a:	2d00      	cmp	r5, #0
 801049c:	bfa2      	ittt	ge
 801049e:	6821      	ldrge	r1, [r4, #0]
 80104a0:	f021 0104 	bicge.w	r1, r1, #4
 80104a4:	6021      	strge	r1, [r4, #0]
 80104a6:	b90e      	cbnz	r6, 80104ac <_printf_i+0x118>
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	d04d      	beq.n	8010548 <_printf_i+0x1b4>
 80104ac:	4615      	mov	r5, r2
 80104ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80104b2:	fb03 6711 	mls	r7, r3, r1, r6
 80104b6:	5dc7      	ldrb	r7, [r0, r7]
 80104b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104bc:	4637      	mov	r7, r6
 80104be:	42bb      	cmp	r3, r7
 80104c0:	460e      	mov	r6, r1
 80104c2:	d9f4      	bls.n	80104ae <_printf_i+0x11a>
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	d10b      	bne.n	80104e0 <_printf_i+0x14c>
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	07de      	lsls	r6, r3, #31
 80104cc:	d508      	bpl.n	80104e0 <_printf_i+0x14c>
 80104ce:	6923      	ldr	r3, [r4, #16]
 80104d0:	6861      	ldr	r1, [r4, #4]
 80104d2:	4299      	cmp	r1, r3
 80104d4:	bfde      	ittt	le
 80104d6:	2330      	movle	r3, #48	; 0x30
 80104d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80104e0:	1b52      	subs	r2, r2, r5
 80104e2:	6122      	str	r2, [r4, #16]
 80104e4:	f8cd a000 	str.w	sl, [sp]
 80104e8:	464b      	mov	r3, r9
 80104ea:	aa03      	add	r2, sp, #12
 80104ec:	4621      	mov	r1, r4
 80104ee:	4640      	mov	r0, r8
 80104f0:	f7ff fee2 	bl	80102b8 <_printf_common>
 80104f4:	3001      	adds	r0, #1
 80104f6:	d14c      	bne.n	8010592 <_printf_i+0x1fe>
 80104f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104fc:	b004      	add	sp, #16
 80104fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010502:	4835      	ldr	r0, [pc, #212]	; (80105d8 <_printf_i+0x244>)
 8010504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010508:	6829      	ldr	r1, [r5, #0]
 801050a:	6823      	ldr	r3, [r4, #0]
 801050c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010510:	6029      	str	r1, [r5, #0]
 8010512:	061d      	lsls	r5, r3, #24
 8010514:	d514      	bpl.n	8010540 <_printf_i+0x1ac>
 8010516:	07df      	lsls	r7, r3, #31
 8010518:	bf44      	itt	mi
 801051a:	f043 0320 	orrmi.w	r3, r3, #32
 801051e:	6023      	strmi	r3, [r4, #0]
 8010520:	b91e      	cbnz	r6, 801052a <_printf_i+0x196>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	f023 0320 	bic.w	r3, r3, #32
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	2310      	movs	r3, #16
 801052c:	e7b0      	b.n	8010490 <_printf_i+0xfc>
 801052e:	6823      	ldr	r3, [r4, #0]
 8010530:	f043 0320 	orr.w	r3, r3, #32
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	2378      	movs	r3, #120	; 0x78
 8010538:	4828      	ldr	r0, [pc, #160]	; (80105dc <_printf_i+0x248>)
 801053a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801053e:	e7e3      	b.n	8010508 <_printf_i+0x174>
 8010540:	0659      	lsls	r1, r3, #25
 8010542:	bf48      	it	mi
 8010544:	b2b6      	uxthmi	r6, r6
 8010546:	e7e6      	b.n	8010516 <_printf_i+0x182>
 8010548:	4615      	mov	r5, r2
 801054a:	e7bb      	b.n	80104c4 <_printf_i+0x130>
 801054c:	682b      	ldr	r3, [r5, #0]
 801054e:	6826      	ldr	r6, [r4, #0]
 8010550:	6961      	ldr	r1, [r4, #20]
 8010552:	1d18      	adds	r0, r3, #4
 8010554:	6028      	str	r0, [r5, #0]
 8010556:	0635      	lsls	r5, r6, #24
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	d501      	bpl.n	8010560 <_printf_i+0x1cc>
 801055c:	6019      	str	r1, [r3, #0]
 801055e:	e002      	b.n	8010566 <_printf_i+0x1d2>
 8010560:	0670      	lsls	r0, r6, #25
 8010562:	d5fb      	bpl.n	801055c <_printf_i+0x1c8>
 8010564:	8019      	strh	r1, [r3, #0]
 8010566:	2300      	movs	r3, #0
 8010568:	6123      	str	r3, [r4, #16]
 801056a:	4615      	mov	r5, r2
 801056c:	e7ba      	b.n	80104e4 <_printf_i+0x150>
 801056e:	682b      	ldr	r3, [r5, #0]
 8010570:	1d1a      	adds	r2, r3, #4
 8010572:	602a      	str	r2, [r5, #0]
 8010574:	681d      	ldr	r5, [r3, #0]
 8010576:	6862      	ldr	r2, [r4, #4]
 8010578:	2100      	movs	r1, #0
 801057a:	4628      	mov	r0, r5
 801057c:	f7ef feb8 	bl	80002f0 <memchr>
 8010580:	b108      	cbz	r0, 8010586 <_printf_i+0x1f2>
 8010582:	1b40      	subs	r0, r0, r5
 8010584:	6060      	str	r0, [r4, #4]
 8010586:	6863      	ldr	r3, [r4, #4]
 8010588:	6123      	str	r3, [r4, #16]
 801058a:	2300      	movs	r3, #0
 801058c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010590:	e7a8      	b.n	80104e4 <_printf_i+0x150>
 8010592:	6923      	ldr	r3, [r4, #16]
 8010594:	462a      	mov	r2, r5
 8010596:	4649      	mov	r1, r9
 8010598:	4640      	mov	r0, r8
 801059a:	47d0      	blx	sl
 801059c:	3001      	adds	r0, #1
 801059e:	d0ab      	beq.n	80104f8 <_printf_i+0x164>
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	079b      	lsls	r3, r3, #30
 80105a4:	d413      	bmi.n	80105ce <_printf_i+0x23a>
 80105a6:	68e0      	ldr	r0, [r4, #12]
 80105a8:	9b03      	ldr	r3, [sp, #12]
 80105aa:	4298      	cmp	r0, r3
 80105ac:	bfb8      	it	lt
 80105ae:	4618      	movlt	r0, r3
 80105b0:	e7a4      	b.n	80104fc <_printf_i+0x168>
 80105b2:	2301      	movs	r3, #1
 80105b4:	4632      	mov	r2, r6
 80105b6:	4649      	mov	r1, r9
 80105b8:	4640      	mov	r0, r8
 80105ba:	47d0      	blx	sl
 80105bc:	3001      	adds	r0, #1
 80105be:	d09b      	beq.n	80104f8 <_printf_i+0x164>
 80105c0:	3501      	adds	r5, #1
 80105c2:	68e3      	ldr	r3, [r4, #12]
 80105c4:	9903      	ldr	r1, [sp, #12]
 80105c6:	1a5b      	subs	r3, r3, r1
 80105c8:	42ab      	cmp	r3, r5
 80105ca:	dcf2      	bgt.n	80105b2 <_printf_i+0x21e>
 80105cc:	e7eb      	b.n	80105a6 <_printf_i+0x212>
 80105ce:	2500      	movs	r5, #0
 80105d0:	f104 0619 	add.w	r6, r4, #25
 80105d4:	e7f5      	b.n	80105c2 <_printf_i+0x22e>
 80105d6:	bf00      	nop
 80105d8:	08011eae 	.word	0x08011eae
 80105dc:	08011ebf 	.word	0x08011ebf

080105e0 <memmove>:
 80105e0:	4288      	cmp	r0, r1
 80105e2:	b510      	push	{r4, lr}
 80105e4:	eb01 0402 	add.w	r4, r1, r2
 80105e8:	d902      	bls.n	80105f0 <memmove+0x10>
 80105ea:	4284      	cmp	r4, r0
 80105ec:	4623      	mov	r3, r4
 80105ee:	d807      	bhi.n	8010600 <memmove+0x20>
 80105f0:	1e43      	subs	r3, r0, #1
 80105f2:	42a1      	cmp	r1, r4
 80105f4:	d008      	beq.n	8010608 <memmove+0x28>
 80105f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105fe:	e7f8      	b.n	80105f2 <memmove+0x12>
 8010600:	4402      	add	r2, r0
 8010602:	4601      	mov	r1, r0
 8010604:	428a      	cmp	r2, r1
 8010606:	d100      	bne.n	801060a <memmove+0x2a>
 8010608:	bd10      	pop	{r4, pc}
 801060a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801060e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010612:	e7f7      	b.n	8010604 <memmove+0x24>

08010614 <_free_r>:
 8010614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010616:	2900      	cmp	r1, #0
 8010618:	d044      	beq.n	80106a4 <_free_r+0x90>
 801061a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801061e:	9001      	str	r0, [sp, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	f1a1 0404 	sub.w	r4, r1, #4
 8010626:	bfb8      	it	lt
 8010628:	18e4      	addlt	r4, r4, r3
 801062a:	f000 f913 	bl	8010854 <__malloc_lock>
 801062e:	4a1e      	ldr	r2, [pc, #120]	; (80106a8 <_free_r+0x94>)
 8010630:	9801      	ldr	r0, [sp, #4]
 8010632:	6813      	ldr	r3, [r2, #0]
 8010634:	b933      	cbnz	r3, 8010644 <_free_r+0x30>
 8010636:	6063      	str	r3, [r4, #4]
 8010638:	6014      	str	r4, [r2, #0]
 801063a:	b003      	add	sp, #12
 801063c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010640:	f000 b90e 	b.w	8010860 <__malloc_unlock>
 8010644:	42a3      	cmp	r3, r4
 8010646:	d908      	bls.n	801065a <_free_r+0x46>
 8010648:	6825      	ldr	r5, [r4, #0]
 801064a:	1961      	adds	r1, r4, r5
 801064c:	428b      	cmp	r3, r1
 801064e:	bf01      	itttt	eq
 8010650:	6819      	ldreq	r1, [r3, #0]
 8010652:	685b      	ldreq	r3, [r3, #4]
 8010654:	1949      	addeq	r1, r1, r5
 8010656:	6021      	streq	r1, [r4, #0]
 8010658:	e7ed      	b.n	8010636 <_free_r+0x22>
 801065a:	461a      	mov	r2, r3
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	b10b      	cbz	r3, 8010664 <_free_r+0x50>
 8010660:	42a3      	cmp	r3, r4
 8010662:	d9fa      	bls.n	801065a <_free_r+0x46>
 8010664:	6811      	ldr	r1, [r2, #0]
 8010666:	1855      	adds	r5, r2, r1
 8010668:	42a5      	cmp	r5, r4
 801066a:	d10b      	bne.n	8010684 <_free_r+0x70>
 801066c:	6824      	ldr	r4, [r4, #0]
 801066e:	4421      	add	r1, r4
 8010670:	1854      	adds	r4, r2, r1
 8010672:	42a3      	cmp	r3, r4
 8010674:	6011      	str	r1, [r2, #0]
 8010676:	d1e0      	bne.n	801063a <_free_r+0x26>
 8010678:	681c      	ldr	r4, [r3, #0]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	6053      	str	r3, [r2, #4]
 801067e:	4421      	add	r1, r4
 8010680:	6011      	str	r1, [r2, #0]
 8010682:	e7da      	b.n	801063a <_free_r+0x26>
 8010684:	d902      	bls.n	801068c <_free_r+0x78>
 8010686:	230c      	movs	r3, #12
 8010688:	6003      	str	r3, [r0, #0]
 801068a:	e7d6      	b.n	801063a <_free_r+0x26>
 801068c:	6825      	ldr	r5, [r4, #0]
 801068e:	1961      	adds	r1, r4, r5
 8010690:	428b      	cmp	r3, r1
 8010692:	bf04      	itt	eq
 8010694:	6819      	ldreq	r1, [r3, #0]
 8010696:	685b      	ldreq	r3, [r3, #4]
 8010698:	6063      	str	r3, [r4, #4]
 801069a:	bf04      	itt	eq
 801069c:	1949      	addeq	r1, r1, r5
 801069e:	6021      	streq	r1, [r4, #0]
 80106a0:	6054      	str	r4, [r2, #4]
 80106a2:	e7ca      	b.n	801063a <_free_r+0x26>
 80106a4:	b003      	add	sp, #12
 80106a6:	bd30      	pop	{r4, r5, pc}
 80106a8:	24001684 	.word	0x24001684

080106ac <sbrk_aligned>:
 80106ac:	b570      	push	{r4, r5, r6, lr}
 80106ae:	4e0e      	ldr	r6, [pc, #56]	; (80106e8 <sbrk_aligned+0x3c>)
 80106b0:	460c      	mov	r4, r1
 80106b2:	6831      	ldr	r1, [r6, #0]
 80106b4:	4605      	mov	r5, r0
 80106b6:	b911      	cbnz	r1, 80106be <sbrk_aligned+0x12>
 80106b8:	f000 f8bc 	bl	8010834 <_sbrk_r>
 80106bc:	6030      	str	r0, [r6, #0]
 80106be:	4621      	mov	r1, r4
 80106c0:	4628      	mov	r0, r5
 80106c2:	f000 f8b7 	bl	8010834 <_sbrk_r>
 80106c6:	1c43      	adds	r3, r0, #1
 80106c8:	d00a      	beq.n	80106e0 <sbrk_aligned+0x34>
 80106ca:	1cc4      	adds	r4, r0, #3
 80106cc:	f024 0403 	bic.w	r4, r4, #3
 80106d0:	42a0      	cmp	r0, r4
 80106d2:	d007      	beq.n	80106e4 <sbrk_aligned+0x38>
 80106d4:	1a21      	subs	r1, r4, r0
 80106d6:	4628      	mov	r0, r5
 80106d8:	f000 f8ac 	bl	8010834 <_sbrk_r>
 80106dc:	3001      	adds	r0, #1
 80106de:	d101      	bne.n	80106e4 <sbrk_aligned+0x38>
 80106e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80106e4:	4620      	mov	r0, r4
 80106e6:	bd70      	pop	{r4, r5, r6, pc}
 80106e8:	24001688 	.word	0x24001688

080106ec <_malloc_r>:
 80106ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f0:	1ccd      	adds	r5, r1, #3
 80106f2:	f025 0503 	bic.w	r5, r5, #3
 80106f6:	3508      	adds	r5, #8
 80106f8:	2d0c      	cmp	r5, #12
 80106fa:	bf38      	it	cc
 80106fc:	250c      	movcc	r5, #12
 80106fe:	2d00      	cmp	r5, #0
 8010700:	4607      	mov	r7, r0
 8010702:	db01      	blt.n	8010708 <_malloc_r+0x1c>
 8010704:	42a9      	cmp	r1, r5
 8010706:	d905      	bls.n	8010714 <_malloc_r+0x28>
 8010708:	230c      	movs	r3, #12
 801070a:	603b      	str	r3, [r7, #0]
 801070c:	2600      	movs	r6, #0
 801070e:	4630      	mov	r0, r6
 8010710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010714:	4e2e      	ldr	r6, [pc, #184]	; (80107d0 <_malloc_r+0xe4>)
 8010716:	f000 f89d 	bl	8010854 <__malloc_lock>
 801071a:	6833      	ldr	r3, [r6, #0]
 801071c:	461c      	mov	r4, r3
 801071e:	bb34      	cbnz	r4, 801076e <_malloc_r+0x82>
 8010720:	4629      	mov	r1, r5
 8010722:	4638      	mov	r0, r7
 8010724:	f7ff ffc2 	bl	80106ac <sbrk_aligned>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	4604      	mov	r4, r0
 801072c:	d14d      	bne.n	80107ca <_malloc_r+0xde>
 801072e:	6834      	ldr	r4, [r6, #0]
 8010730:	4626      	mov	r6, r4
 8010732:	2e00      	cmp	r6, #0
 8010734:	d140      	bne.n	80107b8 <_malloc_r+0xcc>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	4631      	mov	r1, r6
 801073a:	4638      	mov	r0, r7
 801073c:	eb04 0803 	add.w	r8, r4, r3
 8010740:	f000 f878 	bl	8010834 <_sbrk_r>
 8010744:	4580      	cmp	r8, r0
 8010746:	d13a      	bne.n	80107be <_malloc_r+0xd2>
 8010748:	6821      	ldr	r1, [r4, #0]
 801074a:	3503      	adds	r5, #3
 801074c:	1a6d      	subs	r5, r5, r1
 801074e:	f025 0503 	bic.w	r5, r5, #3
 8010752:	3508      	adds	r5, #8
 8010754:	2d0c      	cmp	r5, #12
 8010756:	bf38      	it	cc
 8010758:	250c      	movcc	r5, #12
 801075a:	4629      	mov	r1, r5
 801075c:	4638      	mov	r0, r7
 801075e:	f7ff ffa5 	bl	80106ac <sbrk_aligned>
 8010762:	3001      	adds	r0, #1
 8010764:	d02b      	beq.n	80107be <_malloc_r+0xd2>
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	442b      	add	r3, r5
 801076a:	6023      	str	r3, [r4, #0]
 801076c:	e00e      	b.n	801078c <_malloc_r+0xa0>
 801076e:	6822      	ldr	r2, [r4, #0]
 8010770:	1b52      	subs	r2, r2, r5
 8010772:	d41e      	bmi.n	80107b2 <_malloc_r+0xc6>
 8010774:	2a0b      	cmp	r2, #11
 8010776:	d916      	bls.n	80107a6 <_malloc_r+0xba>
 8010778:	1961      	adds	r1, r4, r5
 801077a:	42a3      	cmp	r3, r4
 801077c:	6025      	str	r5, [r4, #0]
 801077e:	bf18      	it	ne
 8010780:	6059      	strne	r1, [r3, #4]
 8010782:	6863      	ldr	r3, [r4, #4]
 8010784:	bf08      	it	eq
 8010786:	6031      	streq	r1, [r6, #0]
 8010788:	5162      	str	r2, [r4, r5]
 801078a:	604b      	str	r3, [r1, #4]
 801078c:	4638      	mov	r0, r7
 801078e:	f104 060b 	add.w	r6, r4, #11
 8010792:	f000 f865 	bl	8010860 <__malloc_unlock>
 8010796:	f026 0607 	bic.w	r6, r6, #7
 801079a:	1d23      	adds	r3, r4, #4
 801079c:	1af2      	subs	r2, r6, r3
 801079e:	d0b6      	beq.n	801070e <_malloc_r+0x22>
 80107a0:	1b9b      	subs	r3, r3, r6
 80107a2:	50a3      	str	r3, [r4, r2]
 80107a4:	e7b3      	b.n	801070e <_malloc_r+0x22>
 80107a6:	6862      	ldr	r2, [r4, #4]
 80107a8:	42a3      	cmp	r3, r4
 80107aa:	bf0c      	ite	eq
 80107ac:	6032      	streq	r2, [r6, #0]
 80107ae:	605a      	strne	r2, [r3, #4]
 80107b0:	e7ec      	b.n	801078c <_malloc_r+0xa0>
 80107b2:	4623      	mov	r3, r4
 80107b4:	6864      	ldr	r4, [r4, #4]
 80107b6:	e7b2      	b.n	801071e <_malloc_r+0x32>
 80107b8:	4634      	mov	r4, r6
 80107ba:	6876      	ldr	r6, [r6, #4]
 80107bc:	e7b9      	b.n	8010732 <_malloc_r+0x46>
 80107be:	230c      	movs	r3, #12
 80107c0:	603b      	str	r3, [r7, #0]
 80107c2:	4638      	mov	r0, r7
 80107c4:	f000 f84c 	bl	8010860 <__malloc_unlock>
 80107c8:	e7a1      	b.n	801070e <_malloc_r+0x22>
 80107ca:	6025      	str	r5, [r4, #0]
 80107cc:	e7de      	b.n	801078c <_malloc_r+0xa0>
 80107ce:	bf00      	nop
 80107d0:	24001684 	.word	0x24001684

080107d4 <_realloc_r>:
 80107d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d8:	4680      	mov	r8, r0
 80107da:	4614      	mov	r4, r2
 80107dc:	460e      	mov	r6, r1
 80107de:	b921      	cbnz	r1, 80107ea <_realloc_r+0x16>
 80107e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107e4:	4611      	mov	r1, r2
 80107e6:	f7ff bf81 	b.w	80106ec <_malloc_r>
 80107ea:	b92a      	cbnz	r2, 80107f8 <_realloc_r+0x24>
 80107ec:	f7ff ff12 	bl	8010614 <_free_r>
 80107f0:	4625      	mov	r5, r4
 80107f2:	4628      	mov	r0, r5
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	f000 f838 	bl	801086c <_malloc_usable_size_r>
 80107fc:	4284      	cmp	r4, r0
 80107fe:	4607      	mov	r7, r0
 8010800:	d802      	bhi.n	8010808 <_realloc_r+0x34>
 8010802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010806:	d812      	bhi.n	801082e <_realloc_r+0x5a>
 8010808:	4621      	mov	r1, r4
 801080a:	4640      	mov	r0, r8
 801080c:	f7ff ff6e 	bl	80106ec <_malloc_r>
 8010810:	4605      	mov	r5, r0
 8010812:	2800      	cmp	r0, #0
 8010814:	d0ed      	beq.n	80107f2 <_realloc_r+0x1e>
 8010816:	42bc      	cmp	r4, r7
 8010818:	4622      	mov	r2, r4
 801081a:	4631      	mov	r1, r6
 801081c:	bf28      	it	cs
 801081e:	463a      	movcs	r2, r7
 8010820:	f7ff fb2c 	bl	800fe7c <memcpy>
 8010824:	4631      	mov	r1, r6
 8010826:	4640      	mov	r0, r8
 8010828:	f7ff fef4 	bl	8010614 <_free_r>
 801082c:	e7e1      	b.n	80107f2 <_realloc_r+0x1e>
 801082e:	4635      	mov	r5, r6
 8010830:	e7df      	b.n	80107f2 <_realloc_r+0x1e>
	...

08010834 <_sbrk_r>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4d06      	ldr	r5, [pc, #24]	; (8010850 <_sbrk_r+0x1c>)
 8010838:	2300      	movs	r3, #0
 801083a:	4604      	mov	r4, r0
 801083c:	4608      	mov	r0, r1
 801083e:	602b      	str	r3, [r5, #0]
 8010840:	f7f3 fa02 	bl	8003c48 <_sbrk>
 8010844:	1c43      	adds	r3, r0, #1
 8010846:	d102      	bne.n	801084e <_sbrk_r+0x1a>
 8010848:	682b      	ldr	r3, [r5, #0]
 801084a:	b103      	cbz	r3, 801084e <_sbrk_r+0x1a>
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	2400168c 	.word	0x2400168c

08010854 <__malloc_lock>:
 8010854:	4801      	ldr	r0, [pc, #4]	; (801085c <__malloc_lock+0x8>)
 8010856:	f000 b811 	b.w	801087c <__retarget_lock_acquire_recursive>
 801085a:	bf00      	nop
 801085c:	24001690 	.word	0x24001690

08010860 <__malloc_unlock>:
 8010860:	4801      	ldr	r0, [pc, #4]	; (8010868 <__malloc_unlock+0x8>)
 8010862:	f000 b80c 	b.w	801087e <__retarget_lock_release_recursive>
 8010866:	bf00      	nop
 8010868:	24001690 	.word	0x24001690

0801086c <_malloc_usable_size_r>:
 801086c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010870:	1f18      	subs	r0, r3, #4
 8010872:	2b00      	cmp	r3, #0
 8010874:	bfbc      	itt	lt
 8010876:	580b      	ldrlt	r3, [r1, r0]
 8010878:	18c0      	addlt	r0, r0, r3
 801087a:	4770      	bx	lr

0801087c <__retarget_lock_acquire_recursive>:
 801087c:	4770      	bx	lr

0801087e <__retarget_lock_release_recursive>:
 801087e:	4770      	bx	lr

08010880 <checkint>:
 8010880:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010884:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010888:	429a      	cmp	r2, r3
 801088a:	b570      	push	{r4, r5, r6, lr}
 801088c:	dd2a      	ble.n	80108e4 <checkint+0x64>
 801088e:	f240 4333 	movw	r3, #1075	; 0x433
 8010892:	429a      	cmp	r2, r3
 8010894:	dc24      	bgt.n	80108e0 <checkint+0x60>
 8010896:	1a9b      	subs	r3, r3, r2
 8010898:	f1a3 0620 	sub.w	r6, r3, #32
 801089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108a0:	fa02 f403 	lsl.w	r4, r2, r3
 80108a4:	fa02 f606 	lsl.w	r6, r2, r6
 80108a8:	f1c3 0520 	rsb	r5, r3, #32
 80108ac:	fa22 f505 	lsr.w	r5, r2, r5
 80108b0:	4334      	orrs	r4, r6
 80108b2:	432c      	orrs	r4, r5
 80108b4:	409a      	lsls	r2, r3
 80108b6:	ea20 0202 	bic.w	r2, r0, r2
 80108ba:	ea21 0404 	bic.w	r4, r1, r4
 80108be:	4322      	orrs	r2, r4
 80108c0:	f1a3 0420 	sub.w	r4, r3, #32
 80108c4:	f1c3 0220 	rsb	r2, r3, #32
 80108c8:	d10c      	bne.n	80108e4 <checkint+0x64>
 80108ca:	40d8      	lsrs	r0, r3
 80108cc:	fa01 f302 	lsl.w	r3, r1, r2
 80108d0:	4318      	orrs	r0, r3
 80108d2:	40e1      	lsrs	r1, r4
 80108d4:	4308      	orrs	r0, r1
 80108d6:	f000 0001 	and.w	r0, r0, #1
 80108da:	f1d0 0002 	rsbs	r0, r0, #2
 80108de:	bd70      	pop	{r4, r5, r6, pc}
 80108e0:	2002      	movs	r0, #2
 80108e2:	e7fc      	b.n	80108de <checkint+0x5e>
 80108e4:	2000      	movs	r0, #0
 80108e6:	e7fa      	b.n	80108de <checkint+0x5e>

080108e8 <pow>:
 80108e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ec:	ee10 4a90 	vmov	r4, s1
 80108f0:	ed2d 8b0a 	vpush	{d8-d12}
 80108f4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80108f8:	ee11 7a90 	vmov	r7, s3
 80108fc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010900:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010904:	429a      	cmp	r2, r3
 8010906:	ee10 6a10 	vmov	r6, s0
 801090a:	ee11 0a10 	vmov	r0, s2
 801090e:	b086      	sub	sp, #24
 8010910:	46d4      	mov	ip, sl
 8010912:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010916:	d806      	bhi.n	8010926 <pow+0x3e>
 8010918:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801091c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010920:	2b7f      	cmp	r3, #127	; 0x7f
 8010922:	f240 8156 	bls.w	8010bd2 <pow+0x2ea>
 8010926:	1802      	adds	r2, r0, r0
 8010928:	eb47 0107 	adc.w	r1, r7, r7
 801092c:	f06f 0e01 	mvn.w	lr, #1
 8010930:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 8010934:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010938:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801093c:	45ce      	cmp	lr, r9
 801093e:	eb73 0808 	sbcs.w	r8, r3, r8
 8010942:	d23f      	bcs.n	80109c4 <pow+0xdc>
 8010944:	ea52 0301 	orrs.w	r3, r2, r1
 8010948:	f04f 0300 	mov.w	r3, #0
 801094c:	d10c      	bne.n	8010968 <pow+0x80>
 801094e:	19b6      	adds	r6, r6, r6
 8010950:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010954:	4164      	adcs	r4, r4
 8010956:	42b3      	cmp	r3, r6
 8010958:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801095c:	41a3      	sbcs	r3, r4
 801095e:	f0c0 808c 	bcc.w	8010a7a <pow+0x192>
 8010962:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010966:	e028      	b.n	80109ba <pow+0xd2>
 8010968:	4da3      	ldr	r5, [pc, #652]	; (8010bf8 <pow+0x310>)
 801096a:	42ac      	cmp	r4, r5
 801096c:	bf08      	it	eq
 801096e:	429e      	cmpeq	r6, r3
 8010970:	d107      	bne.n	8010982 <pow+0x9a>
 8010972:	1800      	adds	r0, r0, r0
 8010974:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010978:	417f      	adcs	r7, r7
 801097a:	4283      	cmp	r3, r0
 801097c:	4b9f      	ldr	r3, [pc, #636]	; (8010bfc <pow+0x314>)
 801097e:	41bb      	sbcs	r3, r7
 8010980:	e7ed      	b.n	801095e <pow+0x76>
 8010982:	19b6      	adds	r6, r6, r6
 8010984:	489e      	ldr	r0, [pc, #632]	; (8010c00 <pow+0x318>)
 8010986:	4164      	adcs	r4, r4
 8010988:	42b3      	cmp	r3, r6
 801098a:	eb70 0504 	sbcs.w	r5, r0, r4
 801098e:	d374      	bcc.n	8010a7a <pow+0x192>
 8010990:	4281      	cmp	r1, r0
 8010992:	bf08      	it	eq
 8010994:	429a      	cmpeq	r2, r3
 8010996:	d170      	bne.n	8010a7a <pow+0x192>
 8010998:	4a9a      	ldr	r2, [pc, #616]	; (8010c04 <pow+0x31c>)
 801099a:	4294      	cmp	r4, r2
 801099c:	bf08      	it	eq
 801099e:	429e      	cmpeq	r6, r3
 80109a0:	d0df      	beq.n	8010962 <pow+0x7a>
 80109a2:	4294      	cmp	r4, r2
 80109a4:	ea6f 0707 	mvn.w	r7, r7
 80109a8:	bf34      	ite	cc
 80109aa:	2400      	movcc	r4, #0
 80109ac:	2401      	movcs	r4, #1
 80109ae:	0fff      	lsrs	r7, r7, #31
 80109b0:	42bc      	cmp	r4, r7
 80109b2:	f040 81d9 	bne.w	8010d68 <pow+0x480>
 80109b6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80109ba:	b006      	add	sp, #24
 80109bc:	ecbd 8b0a 	vpop	{d8-d12}
 80109c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c4:	eb16 0806 	adds.w	r8, r6, r6
 80109c8:	eb44 0904 	adc.w	r9, r4, r4
 80109cc:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 80109d0:	f169 0200 	sbc.w	r2, r9, #0
 80109d4:	458e      	cmp	lr, r1
 80109d6:	4193      	sbcs	r3, r2
 80109d8:	d223      	bcs.n	8010a22 <pow+0x13a>
 80109da:	ee20 0b00 	vmul.f64	d0, d0, d0
 80109de:	2c00      	cmp	r4, #0
 80109e0:	da12      	bge.n	8010a08 <pow+0x120>
 80109e2:	4639      	mov	r1, r7
 80109e4:	f7ff ff4c 	bl	8010880 <checkint>
 80109e8:	2801      	cmp	r0, #1
 80109ea:	d10d      	bne.n	8010a08 <pow+0x120>
 80109ec:	eeb1 0b40 	vneg.f64	d0, d0
 80109f0:	ea58 0309 	orrs.w	r3, r8, r9
 80109f4:	d10a      	bne.n	8010a0c <pow+0x124>
 80109f6:	2f00      	cmp	r7, #0
 80109f8:	dadf      	bge.n	80109ba <pow+0xd2>
 80109fa:	b006      	add	sp, #24
 80109fc:	ecbd 8b0a 	vpop	{d8-d12}
 8010a00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a04:	f001 b83c 	b.w	8011a80 <__math_divzero>
 8010a08:	2000      	movs	r0, #0
 8010a0a:	e7f1      	b.n	80109f0 <pow+0x108>
 8010a0c:	2f00      	cmp	r7, #0
 8010a0e:	dad4      	bge.n	80109ba <pow+0xd2>
 8010a10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010a14:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010a18:	ed8d 7b00 	vstr	d7, [sp]
 8010a1c:	ed9d 0b00 	vldr	d0, [sp]
 8010a20:	e7cb      	b.n	80109ba <pow+0xd2>
 8010a22:	2c00      	cmp	r4, #0
 8010a24:	da2c      	bge.n	8010a80 <pow+0x198>
 8010a26:	4639      	mov	r1, r7
 8010a28:	f7ff ff2a 	bl	8010880 <checkint>
 8010a2c:	b930      	cbnz	r0, 8010a3c <pow+0x154>
 8010a2e:	b006      	add	sp, #24
 8010a30:	ecbd 8b0a 	vpop	{d8-d12}
 8010a34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a38:	f001 b83a 	b.w	8011ab0 <__math_invalid>
 8010a3c:	2801      	cmp	r0, #1
 8010a3e:	bf14      	ite	ne
 8010a40:	2000      	movne	r0, #0
 8010a42:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010a46:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010a4a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010a4e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010a52:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010a56:	2b7f      	cmp	r3, #127	; 0x7f
 8010a58:	d92d      	bls.n	8010ab6 <pow+0x1ce>
 8010a5a:	4b67      	ldr	r3, [pc, #412]	; (8010bf8 <pow+0x310>)
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	429c      	cmp	r4, r3
 8010a60:	bf08      	it	eq
 8010a62:	4286      	cmpeq	r6, r0
 8010a64:	f43f af7d 	beq.w	8010962 <pow+0x7a>
 8010a68:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010a6c:	428a      	cmp	r2, r1
 8010a6e:	d80c      	bhi.n	8010a8a <pow+0x1a2>
 8010a70:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010a74:	42b0      	cmp	r0, r6
 8010a76:	41a3      	sbcs	r3, r4
 8010a78:	d204      	bcs.n	8010a84 <pow+0x19c>
 8010a7a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010a7e:	e79c      	b.n	80109ba <pow+0xd2>
 8010a80:	2000      	movs	r0, #0
 8010a82:	e7e4      	b.n	8010a4e <pow+0x166>
 8010a84:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010a88:	e797      	b.n	80109ba <pow+0xd2>
 8010a8a:	2e01      	cmp	r6, #1
 8010a8c:	eb74 0303 	sbcs.w	r3, r4, r3
 8010a90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010a94:	bf34      	ite	cc
 8010a96:	2301      	movcc	r3, #1
 8010a98:	2300      	movcs	r3, #0
 8010a9a:	4295      	cmp	r5, r2
 8010a9c:	bf8c      	ite	hi
 8010a9e:	2500      	movhi	r5, #0
 8010aa0:	2501      	movls	r5, #1
 8010aa2:	42ab      	cmp	r3, r5
 8010aa4:	f000 809d 	beq.w	8010be2 <pow+0x2fa>
 8010aa8:	b006      	add	sp, #24
 8010aaa:	ecbd 8b0a 	vpop	{d8-d12}
 8010aae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab2:	f000 bfdd 	b.w	8011a70 <__math_oflow>
 8010ab6:	f1bc 0f00 	cmp.w	ip, #0
 8010aba:	d10b      	bne.n	8010ad4 <pow+0x1ec>
 8010abc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010bf0 <pow+0x308>
 8010ac0:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ac4:	ec53 2b17 	vmov	r2, r3, d7
 8010ac8:	ee17 6a10 	vmov	r6, s14
 8010acc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010ad0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010ad4:	4b4c      	ldr	r3, [pc, #304]	; (8010c08 <pow+0x320>)
 8010ad6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010ada:	4423      	add	r3, r4
 8010adc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010ae0:	1519      	asrs	r1, r3, #20
 8010ae2:	0d1b      	lsrs	r3, r3, #20
 8010ae4:	051b      	lsls	r3, r3, #20
 8010ae6:	eba4 0903 	sub.w	r9, r4, r3
 8010aea:	4b48      	ldr	r3, [pc, #288]	; (8010c0c <pow+0x324>)
 8010aec:	ee04 1a10 	vmov	s8, r1
 8010af0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010af4:	f1b6 0800 	subs.w	r8, r6, #0
 8010af8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010afc:	ec49 8b15 	vmov	d5, r8, r9
 8010b00:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010b04:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010b08:	ed93 7b00 	vldr	d7, [r3]
 8010b0c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010b10:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010b14:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010b18:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010b1c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010b20:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010b24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010b28:	ed93 5b04 	vldr	d5, [r3, #16]
 8010b2c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010b30:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010b34:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010b38:	ed93 4b08 	vldr	d4, [r3, #32]
 8010b3c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010b40:	eeb0 9b40 	vmov.f64	d9, d0
 8010b44:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010b48:	ed93 5b06 	vldr	d5, [r3, #24]
 8010b4c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010b50:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010b54:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010b58:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010b5c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010b60:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010b64:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010b68:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010b6c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010b70:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010b74:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010b78:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010b7c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010b80:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010b84:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010b88:	eeab ab05 	vfma.f64	d10, d11, d5
 8010b8c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010b90:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010b94:	ee17 3a90 	vmov	r3, s15
 8010b98:	eeb0 5b47 	vmov.f64	d5, d7
 8010b9c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010ba0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010ba4:	18b2      	adds	r2, r6, r2
 8010ba6:	2a3e      	cmp	r2, #62	; 0x3e
 8010ba8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010bac:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010bb0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010bb4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010bb8:	d92b      	bls.n	8010c12 <pow+0x32a>
 8010bba:	2a00      	cmp	r2, #0
 8010bbc:	da0b      	bge.n	8010bd6 <pow+0x2ee>
 8010bbe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010bc2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	f43f aef7 	beq.w	80109ba <pow+0xd2>
 8010bcc:	eeb1 0b40 	vneg.f64	d0, d0
 8010bd0:	e6f3      	b.n	80109ba <pow+0xd2>
 8010bd2:	2000      	movs	r0, #0
 8010bd4:	e77e      	b.n	8010ad4 <pow+0x1ec>
 8010bd6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010bda:	d919      	bls.n	8010c10 <pow+0x328>
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f6bf af63 	bge.w	8010aa8 <pow+0x1c0>
 8010be2:	b006      	add	sp, #24
 8010be4:	ecbd 8b0a 	vpop	{d8-d12}
 8010be8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bec:	f000 bf38 	b.w	8011a60 <__math_uflow>
 8010bf0:	00000000 	.word	0x00000000
 8010bf4:	43300000 	.word	0x43300000
 8010bf8:	3ff00000 	.word	0x3ff00000
 8010bfc:	fff00000 	.word	0xfff00000
 8010c00:	ffe00000 	.word	0xffe00000
 8010c04:	7fe00000 	.word	0x7fe00000
 8010c08:	c0196aab 	.word	0xc0196aab
 8010c0c:	08011ed0 	.word	0x08011ed0
 8010c10:	2600      	movs	r6, #0
 8010c12:	495d      	ldr	r1, [pc, #372]	; (8010d88 <pow+0x4a0>)
 8010c14:	ed91 4b02 	vldr	d4, [r1, #8]
 8010c18:	ed91 3b00 	vldr	d3, [r1]
 8010c1c:	eeb0 6b44 	vmov.f64	d6, d4
 8010c20:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010c24:	ee16 5a10 	vmov	r5, s12
 8010c28:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010c2c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010c30:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010c34:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010c38:	eeb0 0b47 	vmov.f64	d0, d7
 8010c3c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010c40:	18dc      	adds	r4, r3, r3
 8010c42:	f104 030f 	add.w	r3, r4, #15
 8010c46:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010c4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010c4e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010c52:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010c56:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010c5a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010c5e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010c62:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010c66:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010c6a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010c6e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010c72:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c76:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010c7a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010c7e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010c82:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010c86:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010c8a:	1940      	adds	r0, r0, r5
 8010c8c:	2700      	movs	r7, #0
 8010c8e:	eb17 020c 	adds.w	r2, r7, ip
 8010c92:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010c96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c9a:	2e00      	cmp	r6, #0
 8010c9c:	d15f      	bne.n	8010d5e <pow+0x476>
 8010c9e:	42bd      	cmp	r5, r7
 8010ca0:	db13      	blt.n	8010cca <pow+0x3e2>
 8010ca2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010ca6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010caa:	4610      	mov	r0, r2
 8010cac:	ec41 0b10 	vmov	d0, r0, r1
 8010cb0:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010cb4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010d70 <pow+0x488>
 8010cb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010cbc:	b006      	add	sp, #24
 8010cbe:	ecbd 8b0a 	vpop	{d8-d12}
 8010cc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cc6:	f000 bf0b 	b.w	8011ae0 <__math_check_oflow>
 8010cca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010cce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	ec41 0b15 	vmov	d5, r0, r1
 8010cd8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010cdc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010ce0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010ce4:	eeb0 3bc7 	vabs.f64	d3, d7
 8010ce8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010d78 <pow+0x490>
 8010cf4:	d52a      	bpl.n	8010d4c <pow+0x464>
 8010cf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010cfa:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d02:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010d06:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010d0a:	bf48      	it	mi
 8010d0c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010d10:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010d14:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010d18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010d1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d20:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010d24:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	d104      	bne.n	8010d3c <pow+0x454>
 8010d32:	4632      	mov	r2, r6
 8010d34:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010d38:	ec43 2b17 	vmov	d7, r2, r3
 8010d3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d44:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010d48:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010d4c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010d50:	b006      	add	sp, #24
 8010d52:	ecbd 8b0a 	vpop	{d8-d12}
 8010d56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d5a:	f000 beb8 	b.w	8011ace <__math_check_uflow>
 8010d5e:	ec43 2b10 	vmov	d0, r2, r3
 8010d62:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010d66:	e628      	b.n	80109ba <pow+0xd2>
 8010d68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010d80 <pow+0x498>
 8010d6c:	e625      	b.n	80109ba <pow+0xd2>
 8010d6e:	bf00      	nop
 8010d70:	00000000 	.word	0x00000000
 8010d74:	7f000000 	.word	0x7f000000
 8010d78:	00000000 	.word	0x00000000
 8010d7c:	00100000 	.word	0x00100000
	...
 8010d88:	080130a0 	.word	0x080130a0
 8010d8c:	00000000 	.word	0x00000000

08010d90 <sin>:
 8010d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d92:	eeb0 7b40 	vmov.f64	d7, d0
 8010d96:	ee17 3a90 	vmov	r3, s15
 8010d9a:	4a21      	ldr	r2, [pc, #132]	; (8010e20 <sin+0x90>)
 8010d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010da0:	4293      	cmp	r3, r2
 8010da2:	dc07      	bgt.n	8010db4 <sin+0x24>
 8010da4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010e18 <sin+0x88>
 8010da8:	2000      	movs	r0, #0
 8010daa:	b005      	add	sp, #20
 8010dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010db0:	f000 bde2 	b.w	8011978 <__kernel_sin>
 8010db4:	4a1b      	ldr	r2, [pc, #108]	; (8010e24 <sin+0x94>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	dd04      	ble.n	8010dc4 <sin+0x34>
 8010dba:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010dbe:	b005      	add	sp, #20
 8010dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc4:	4668      	mov	r0, sp
 8010dc6:	f000 f98b 	bl	80110e0 <__ieee754_rem_pio2>
 8010dca:	f000 0003 	and.w	r0, r0, #3
 8010dce:	2801      	cmp	r0, #1
 8010dd0:	d00a      	beq.n	8010de8 <sin+0x58>
 8010dd2:	2802      	cmp	r0, #2
 8010dd4:	d00f      	beq.n	8010df6 <sin+0x66>
 8010dd6:	b9c0      	cbnz	r0, 8010e0a <sin+0x7a>
 8010dd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ddc:	ed9d 0b00 	vldr	d0, [sp]
 8010de0:	2001      	movs	r0, #1
 8010de2:	f000 fdc9 	bl	8011978 <__kernel_sin>
 8010de6:	e7ea      	b.n	8010dbe <sin+0x2e>
 8010de8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dec:	ed9d 0b00 	vldr	d0, [sp]
 8010df0:	f000 fabe 	bl	8011370 <__kernel_cos>
 8010df4:	e7e3      	b.n	8010dbe <sin+0x2e>
 8010df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dfa:	ed9d 0b00 	vldr	d0, [sp]
 8010dfe:	2001      	movs	r0, #1
 8010e00:	f000 fdba 	bl	8011978 <__kernel_sin>
 8010e04:	eeb1 0b40 	vneg.f64	d0, d0
 8010e08:	e7d9      	b.n	8010dbe <sin+0x2e>
 8010e0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e0e:	ed9d 0b00 	vldr	d0, [sp]
 8010e12:	f000 faad 	bl	8011370 <__kernel_cos>
 8010e16:	e7f5      	b.n	8010e04 <sin+0x74>
	...
 8010e20:	3fe921fb 	.word	0x3fe921fb
 8010e24:	7fefffff 	.word	0x7fefffff

08010e28 <asin>:
 8010e28:	b508      	push	{r3, lr}
 8010e2a:	ed2d 8b04 	vpush	{d8-d9}
 8010e2e:	eeb0 8b40 	vmov.f64	d8, d0
 8010e32:	f000 f845 	bl	8010ec0 <__ieee754_asin>
 8010e36:	eeb4 8b48 	vcmp.f64	d8, d8
 8010e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3e:	eeb0 9b40 	vmov.f64	d9, d0
 8010e42:	d615      	bvs.n	8010e70 <asin+0x48>
 8010e44:	eeb0 0b48 	vmov.f64	d0, d8
 8010e48:	f000 fe5e 	bl	8011b08 <fabs>
 8010e4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010e50:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e58:	dd0a      	ble.n	8010e70 <asin+0x48>
 8010e5a:	f7fe ffe5 	bl	800fe28 <__errno>
 8010e5e:	ecbd 8b04 	vpop	{d8-d9}
 8010e62:	2321      	movs	r3, #33	; 0x21
 8010e64:	6003      	str	r3, [r0, #0]
 8010e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e6a:	4804      	ldr	r0, [pc, #16]	; (8010e7c <asin+0x54>)
 8010e6c:	f000 becc 	b.w	8011c08 <nan>
 8010e70:	eeb0 0b49 	vmov.f64	d0, d9
 8010e74:	ecbd 8b04 	vpop	{d8-d9}
 8010e78:	bd08      	pop	{r3, pc}
 8010e7a:	bf00      	nop
 8010e7c:	08011ea2 	.word	0x08011ea2

08010e80 <sqrt>:
 8010e80:	b508      	push	{r3, lr}
 8010e82:	ed2d 8b04 	vpush	{d8-d9}
 8010e86:	eeb0 8b40 	vmov.f64	d8, d0
 8010e8a:	f000 fa6d 	bl	8011368 <__ieee754_sqrt>
 8010e8e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e96:	d60c      	bvs.n	8010eb2 <sqrt+0x32>
 8010e98:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010eb8 <sqrt+0x38>
 8010e9c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	d505      	bpl.n	8010eb2 <sqrt+0x32>
 8010ea6:	f7fe ffbf 	bl	800fe28 <__errno>
 8010eaa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010eae:	2321      	movs	r3, #33	; 0x21
 8010eb0:	6003      	str	r3, [r0, #0]
 8010eb2:	ecbd 8b04 	vpop	{d8-d9}
 8010eb6:	bd08      	pop	{r3, pc}
	...

08010ec0 <__ieee754_asin>:
 8010ec0:	b538      	push	{r3, r4, r5, lr}
 8010ec2:	ee10 5a90 	vmov	r5, s1
 8010ec6:	4b82      	ldr	r3, [pc, #520]	; (80110d0 <__ieee754_asin+0x210>)
 8010ec8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010ecc:	429c      	cmp	r4, r3
 8010ece:	ed2d 8b06 	vpush	{d8-d10}
 8010ed2:	dd19      	ble.n	8010f08 <__ieee754_asin+0x48>
 8010ed4:	ee10 3a10 	vmov	r3, s0
 8010ed8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010edc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010ee0:	4323      	orrs	r3, r4
 8010ee2:	d10c      	bne.n	8010efe <__ieee754_asin+0x3e>
 8010ee4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011058 <__ieee754_asin+0x198>
 8010ee8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011060 <__ieee754_asin+0x1a0>
 8010eec:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ef0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010ef4:	eeb0 0b47 	vmov.f64	d0, d7
 8010ef8:	ecbd 8b06 	vpop	{d8-d10}
 8010efc:	bd38      	pop	{r3, r4, r5, pc}
 8010efe:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010f02:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010f06:	e7f7      	b.n	8010ef8 <__ieee754_asin+0x38>
 8010f08:	4b72      	ldr	r3, [pc, #456]	; (80110d4 <__ieee754_asin+0x214>)
 8010f0a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010f0e:	429c      	cmp	r4, r3
 8010f10:	dc0b      	bgt.n	8010f2a <__ieee754_asin+0x6a>
 8010f12:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8010f16:	da52      	bge.n	8010fbe <__ieee754_asin+0xfe>
 8010f18:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011068 <__ieee754_asin+0x1a8>
 8010f1c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010f20:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8010f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f28:	dce6      	bgt.n	8010ef8 <__ieee754_asin+0x38>
 8010f2a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010f2e:	f000 fdeb 	bl	8011b08 <fabs>
 8010f32:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011070 <__ieee754_asin+0x1b0>
 8010f36:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010f3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010f3e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011078 <__ieee754_asin+0x1b8>
 8010f42:	eeb0 0b48 	vmov.f64	d0, d8
 8010f46:	eea8 6b07 	vfma.f64	d6, d8, d7
 8010f4a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011080 <__ieee754_asin+0x1c0>
 8010f4e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f52:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011088 <__ieee754_asin+0x1c8>
 8010f56:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8011090 <__ieee754_asin+0x1d0>
 8010f5a:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010f5e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8011098 <__ieee754_asin+0x1d8>
 8010f62:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f66:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80110a0 <__ieee754_asin+0x1e0>
 8010f6a:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010f6e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010f72:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80110a8 <__ieee754_asin+0x1e8>
 8010f76:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010f7a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80110b0 <__ieee754_asin+0x1f0>
 8010f7e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010f82:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80110b8 <__ieee754_asin+0x1f8>
 8010f86:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f8a:	eea7 9b08 	vfma.f64	d9, d7, d8
 8010f8e:	f000 f9eb 	bl	8011368 <__ieee754_sqrt>
 8010f92:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010f96:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8010f9a:	4b4f      	ldr	r3, [pc, #316]	; (80110d8 <__ieee754_asin+0x218>)
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	dd3d      	ble.n	801101c <__ieee754_asin+0x15c>
 8010fa0:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010fa4:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80110c0 <__ieee754_asin+0x200>
 8010fa8:	eea0 7b04 	vfma.f64	d7, d0, d4
 8010fac:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011060 <__ieee754_asin+0x1a0>
 8010fb0:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010fb4:	2d00      	cmp	r5, #0
 8010fb6:	bfd8      	it	le
 8010fb8:	eeb1 0b40 	vnegle.f64	d0, d0
 8010fbc:	e79c      	b.n	8010ef8 <__ieee754_asin+0x38>
 8010fbe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011070 <__ieee754_asin+0x1b0>
 8010fc2:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010fc6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011078 <__ieee754_asin+0x1b8>
 8010fca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010fce:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011080 <__ieee754_asin+0x1c0>
 8010fd2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010fd6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011088 <__ieee754_asin+0x1c8>
 8010fda:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010fde:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8011098 <__ieee754_asin+0x1d8>
 8010fe2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010fe6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8011090 <__ieee754_asin+0x1d0>
 8010fea:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80110a0 <__ieee754_asin+0x1e0>
 8010fee:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010ff2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010ff6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80110a8 <__ieee754_asin+0x1e8>
 8010ffa:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010ffe:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80110b0 <__ieee754_asin+0x1f0>
 8011002:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011006:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80110b8 <__ieee754_asin+0x1f8>
 801100a:	eea4 5b07 	vfma.f64	d5, d4, d7
 801100e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8011012:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8011016:	eea0 0b07 	vfma.f64	d0, d0, d7
 801101a:	e76d      	b.n	8010ef8 <__ieee754_asin+0x38>
 801101c:	ec53 2b10 	vmov	r2, r3, d0
 8011020:	2200      	movs	r2, #0
 8011022:	ec43 2b16 	vmov	d6, r2, r3
 8011026:	ee30 7b06 	vadd.f64	d7, d0, d6
 801102a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801102e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8011032:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011058 <__ieee754_asin+0x198>
 8011036:	ee30 0b00 	vadd.f64	d0, d0, d0
 801103a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801103e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8011042:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80110c8 <__ieee754_asin+0x208>
 8011046:	eeb0 0b45 	vmov.f64	d0, d5
 801104a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801104e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011052:	ee35 0b40 	vsub.f64	d0, d5, d0
 8011056:	e7ad      	b.n	8010fb4 <__ieee754_asin+0xf4>
 8011058:	33145c07 	.word	0x33145c07
 801105c:	3c91a626 	.word	0x3c91a626
 8011060:	54442d18 	.word	0x54442d18
 8011064:	3ff921fb 	.word	0x3ff921fb
 8011068:	8800759c 	.word	0x8800759c
 801106c:	7e37e43c 	.word	0x7e37e43c
 8011070:	0dfdf709 	.word	0x0dfdf709
 8011074:	3f023de1 	.word	0x3f023de1
 8011078:	7501b288 	.word	0x7501b288
 801107c:	3f49efe0 	.word	0x3f49efe0
 8011080:	b5688f3b 	.word	0xb5688f3b
 8011084:	bfa48228 	.word	0xbfa48228
 8011088:	0e884455 	.word	0x0e884455
 801108c:	3fc9c155 	.word	0x3fc9c155
 8011090:	55555555 	.word	0x55555555
 8011094:	3fc55555 	.word	0x3fc55555
 8011098:	03eb6f7d 	.word	0x03eb6f7d
 801109c:	bfd4d612 	.word	0xbfd4d612
 80110a0:	b12e9282 	.word	0xb12e9282
 80110a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80110a8:	1b8d0159 	.word	0x1b8d0159
 80110ac:	bfe6066c 	.word	0xbfe6066c
 80110b0:	9c598ac8 	.word	0x9c598ac8
 80110b4:	40002ae5 	.word	0x40002ae5
 80110b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80110bc:	c0033a27 	.word	0xc0033a27
 80110c0:	33145c07 	.word	0x33145c07
 80110c4:	bc91a626 	.word	0xbc91a626
 80110c8:	54442d18 	.word	0x54442d18
 80110cc:	3fe921fb 	.word	0x3fe921fb
 80110d0:	3fefffff 	.word	0x3fefffff
 80110d4:	3fdfffff 	.word	0x3fdfffff
 80110d8:	3fef3332 	.word	0x3fef3332
 80110dc:	00000000 	.word	0x00000000

080110e0 <__ieee754_rem_pio2>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	eeb0 7b40 	vmov.f64	d7, d0
 80110e6:	ee17 5a90 	vmov	r5, s15
 80110ea:	4b99      	ldr	r3, [pc, #612]	; (8011350 <__ieee754_rem_pio2+0x270>)
 80110ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110f0:	429e      	cmp	r6, r3
 80110f2:	b088      	sub	sp, #32
 80110f4:	4604      	mov	r4, r0
 80110f6:	dc07      	bgt.n	8011108 <__ieee754_rem_pio2+0x28>
 80110f8:	2200      	movs	r2, #0
 80110fa:	2300      	movs	r3, #0
 80110fc:	ed84 0b00 	vstr	d0, [r4]
 8011100:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011104:	2000      	movs	r0, #0
 8011106:	e01b      	b.n	8011140 <__ieee754_rem_pio2+0x60>
 8011108:	4b92      	ldr	r3, [pc, #584]	; (8011354 <__ieee754_rem_pio2+0x274>)
 801110a:	429e      	cmp	r6, r3
 801110c:	dc3b      	bgt.n	8011186 <__ieee754_rem_pio2+0xa6>
 801110e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011112:	2d00      	cmp	r5, #0
 8011114:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011310 <__ieee754_rem_pio2+0x230>
 8011118:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801111c:	dd19      	ble.n	8011152 <__ieee754_rem_pio2+0x72>
 801111e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011122:	429e      	cmp	r6, r3
 8011124:	d00e      	beq.n	8011144 <__ieee754_rem_pio2+0x64>
 8011126:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011318 <__ieee754_rem_pio2+0x238>
 801112a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801112e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011132:	ed84 5b00 	vstr	d5, [r4]
 8011136:	ee37 7b46 	vsub.f64	d7, d7, d6
 801113a:	ed84 7b02 	vstr	d7, [r4, #8]
 801113e:	2001      	movs	r0, #1
 8011140:	b008      	add	sp, #32
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011320 <__ieee754_rem_pio2+0x240>
 8011148:	ee37 7b46 	vsub.f64	d7, d7, d6
 801114c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011328 <__ieee754_rem_pio2+0x248>
 8011150:	e7eb      	b.n	801112a <__ieee754_rem_pio2+0x4a>
 8011152:	429e      	cmp	r6, r3
 8011154:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011158:	d00e      	beq.n	8011178 <__ieee754_rem_pio2+0x98>
 801115a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011318 <__ieee754_rem_pio2+0x238>
 801115e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011162:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011166:	ed84 5b00 	vstr	d5, [r4]
 801116a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011172:	ed84 7b02 	vstr	d7, [r4, #8]
 8011176:	e7e3      	b.n	8011140 <__ieee754_rem_pio2+0x60>
 8011178:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011320 <__ieee754_rem_pio2+0x240>
 801117c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011180:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011328 <__ieee754_rem_pio2+0x248>
 8011184:	e7eb      	b.n	801115e <__ieee754_rem_pio2+0x7e>
 8011186:	4b74      	ldr	r3, [pc, #464]	; (8011358 <__ieee754_rem_pio2+0x278>)
 8011188:	429e      	cmp	r6, r3
 801118a:	dc70      	bgt.n	801126e <__ieee754_rem_pio2+0x18e>
 801118c:	f000 fcbc 	bl	8011b08 <fabs>
 8011190:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011194:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011330 <__ieee754_rem_pio2+0x250>
 8011198:	eea0 7b06 	vfma.f64	d7, d0, d6
 801119c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80111a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80111a4:	ee17 0a90 	vmov	r0, s15
 80111a8:	eeb1 4b45 	vneg.f64	d4, d5
 80111ac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011310 <__ieee754_rem_pio2+0x230>
 80111b0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80111b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011318 <__ieee754_rem_pio2+0x238>
 80111b8:	281f      	cmp	r0, #31
 80111ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80111be:	ee30 6b47 	vsub.f64	d6, d0, d7
 80111c2:	dc08      	bgt.n	80111d6 <__ieee754_rem_pio2+0xf6>
 80111c4:	4b65      	ldr	r3, [pc, #404]	; (801135c <__ieee754_rem_pio2+0x27c>)
 80111c6:	1e42      	subs	r2, r0, #1
 80111c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111cc:	42b3      	cmp	r3, r6
 80111ce:	d002      	beq.n	80111d6 <__ieee754_rem_pio2+0xf6>
 80111d0:	ed84 6b00 	vstr	d6, [r4]
 80111d4:	e026      	b.n	8011224 <__ieee754_rem_pio2+0x144>
 80111d6:	ee16 3a90 	vmov	r3, s13
 80111da:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111de:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80111e2:	2b10      	cmp	r3, #16
 80111e4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80111e8:	ddf2      	ble.n	80111d0 <__ieee754_rem_pio2+0xf0>
 80111ea:	eeb0 6b40 	vmov.f64	d6, d0
 80111ee:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011320 <__ieee754_rem_pio2+0x240>
 80111f2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011328 <__ieee754_rem_pio2+0x248>
 80111f6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80111fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111fe:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011202:	eeb0 7b40 	vmov.f64	d7, d0
 8011206:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801120a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801120e:	ee13 3a90 	vmov	r3, s7
 8011212:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	2b31      	cmp	r3, #49	; 0x31
 801121a:	dc17      	bgt.n	801124c <__ieee754_rem_pio2+0x16c>
 801121c:	eeb0 0b46 	vmov.f64	d0, d6
 8011220:	ed84 3b00 	vstr	d3, [r4]
 8011224:	ed94 6b00 	vldr	d6, [r4]
 8011228:	2d00      	cmp	r5, #0
 801122a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801122e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011232:	ed84 0b02 	vstr	d0, [r4, #8]
 8011236:	da83      	bge.n	8011140 <__ieee754_rem_pio2+0x60>
 8011238:	eeb1 6b46 	vneg.f64	d6, d6
 801123c:	eeb1 0b40 	vneg.f64	d0, d0
 8011240:	ed84 6b00 	vstr	d6, [r4]
 8011244:	ed84 0b02 	vstr	d0, [r4, #8]
 8011248:	4240      	negs	r0, r0
 801124a:	e779      	b.n	8011140 <__ieee754_rem_pio2+0x60>
 801124c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011338 <__ieee754_rem_pio2+0x258>
 8011250:	eeb0 0b46 	vmov.f64	d0, d6
 8011254:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011258:	ee36 7b40 	vsub.f64	d7, d6, d0
 801125c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011340 <__ieee754_rem_pio2+0x260>
 8011260:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011264:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011268:	ee30 6b47 	vsub.f64	d6, d0, d7
 801126c:	e7b0      	b.n	80111d0 <__ieee754_rem_pio2+0xf0>
 801126e:	4b3c      	ldr	r3, [pc, #240]	; (8011360 <__ieee754_rem_pio2+0x280>)
 8011270:	429e      	cmp	r6, r3
 8011272:	dd06      	ble.n	8011282 <__ieee754_rem_pio2+0x1a2>
 8011274:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011278:	ed80 7b02 	vstr	d7, [r0, #8]
 801127c:	ed80 7b00 	vstr	d7, [r0]
 8011280:	e740      	b.n	8011104 <__ieee754_rem_pio2+0x24>
 8011282:	1532      	asrs	r2, r6, #20
 8011284:	ee10 0a10 	vmov	r0, s0
 8011288:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801128c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011290:	ec41 0b17 	vmov	d7, r0, r1
 8011294:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011298:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011348 <__ieee754_rem_pio2+0x268>
 801129c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80112b0:	a902      	add	r1, sp, #8
 80112b2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112ba:	ed8d 6b04 	vstr	d6, [sp, #16]
 80112be:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112c6:	2603      	movs	r6, #3
 80112c8:	4608      	mov	r0, r1
 80112ca:	ed91 7b04 	vldr	d7, [r1, #16]
 80112ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	4633      	mov	r3, r6
 80112d8:	f1a1 0108 	sub.w	r1, r1, #8
 80112dc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80112e0:	d0f3      	beq.n	80112ca <__ieee754_rem_pio2+0x1ea>
 80112e2:	4920      	ldr	r1, [pc, #128]	; (8011364 <__ieee754_rem_pio2+0x284>)
 80112e4:	9101      	str	r1, [sp, #4]
 80112e6:	2102      	movs	r1, #2
 80112e8:	9100      	str	r1, [sp, #0]
 80112ea:	4621      	mov	r1, r4
 80112ec:	f000 f8ac 	bl	8011448 <__kernel_rem_pio2>
 80112f0:	2d00      	cmp	r5, #0
 80112f2:	f6bf af25 	bge.w	8011140 <__ieee754_rem_pio2+0x60>
 80112f6:	ed94 7b00 	vldr	d7, [r4]
 80112fa:	eeb1 7b47 	vneg.f64	d7, d7
 80112fe:	ed84 7b00 	vstr	d7, [r4]
 8011302:	ed94 7b02 	vldr	d7, [r4, #8]
 8011306:	eeb1 7b47 	vneg.f64	d7, d7
 801130a:	ed84 7b02 	vstr	d7, [r4, #8]
 801130e:	e79b      	b.n	8011248 <__ieee754_rem_pio2+0x168>
 8011310:	54400000 	.word	0x54400000
 8011314:	3ff921fb 	.word	0x3ff921fb
 8011318:	1a626331 	.word	0x1a626331
 801131c:	3dd0b461 	.word	0x3dd0b461
 8011320:	1a600000 	.word	0x1a600000
 8011324:	3dd0b461 	.word	0x3dd0b461
 8011328:	2e037073 	.word	0x2e037073
 801132c:	3ba3198a 	.word	0x3ba3198a
 8011330:	6dc9c883 	.word	0x6dc9c883
 8011334:	3fe45f30 	.word	0x3fe45f30
 8011338:	2e000000 	.word	0x2e000000
 801133c:	3ba3198a 	.word	0x3ba3198a
 8011340:	252049c1 	.word	0x252049c1
 8011344:	397b839a 	.word	0x397b839a
 8011348:	00000000 	.word	0x00000000
 801134c:	41700000 	.word	0x41700000
 8011350:	3fe921fb 	.word	0x3fe921fb
 8011354:	4002d97b 	.word	0x4002d97b
 8011358:	413921fb 	.word	0x413921fb
 801135c:	08012f18 	.word	0x08012f18
 8011360:	7fefffff 	.word	0x7fefffff
 8011364:	08012f98 	.word	0x08012f98

08011368 <__ieee754_sqrt>:
 8011368:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801136c:	4770      	bx	lr
	...

08011370 <__kernel_cos>:
 8011370:	ee10 1a90 	vmov	r1, s1
 8011374:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801137c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011380:	da05      	bge.n	801138e <__kernel_cos+0x1e>
 8011382:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011386:	ee17 3a90 	vmov	r3, s15
 801138a:	2b00      	cmp	r3, #0
 801138c:	d03d      	beq.n	801140a <__kernel_cos+0x9a>
 801138e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011392:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011410 <__kernel_cos+0xa0>
 8011396:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011418 <__kernel_cos+0xa8>
 801139a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801139e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011420 <__kernel_cos+0xb0>
 80113a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80113a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011428 <__kernel_cos+0xb8>
 80113aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80113ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011430 <__kernel_cos+0xc0>
 80113b2:	4b23      	ldr	r3, [pc, #140]	; (8011440 <__kernel_cos+0xd0>)
 80113b4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80113b8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011438 <__kernel_cos+0xc8>
 80113bc:	4299      	cmp	r1, r3
 80113be:	eea7 6b03 	vfma.f64	d6, d7, d3
 80113c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80113c6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80113ca:	ee23 7b07 	vmul.f64	d7, d3, d7
 80113ce:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80113d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80113d6:	dc04      	bgt.n	80113e2 <__kernel_cos+0x72>
 80113d8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80113dc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80113e0:	4770      	bx	lr
 80113e2:	4b18      	ldr	r3, [pc, #96]	; (8011444 <__kernel_cos+0xd4>)
 80113e4:	4299      	cmp	r1, r3
 80113e6:	dc0d      	bgt.n	8011404 <__kernel_cos+0x94>
 80113e8:	2200      	movs	r2, #0
 80113ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80113ee:	ec43 2b15 	vmov	d5, r2, r3
 80113f2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80113f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80113fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011402:	4770      	bx	lr
 8011404:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011408:	e7f3      	b.n	80113f2 <__kernel_cos+0x82>
 801140a:	eeb0 0b44 	vmov.f64	d0, d4
 801140e:	4770      	bx	lr
 8011410:	be8838d4 	.word	0xbe8838d4
 8011414:	bda8fae9 	.word	0xbda8fae9
 8011418:	bdb4b1c4 	.word	0xbdb4b1c4
 801141c:	3e21ee9e 	.word	0x3e21ee9e
 8011420:	809c52ad 	.word	0x809c52ad
 8011424:	be927e4f 	.word	0xbe927e4f
 8011428:	19cb1590 	.word	0x19cb1590
 801142c:	3efa01a0 	.word	0x3efa01a0
 8011430:	16c15177 	.word	0x16c15177
 8011434:	bf56c16c 	.word	0xbf56c16c
 8011438:	5555554c 	.word	0x5555554c
 801143c:	3fa55555 	.word	0x3fa55555
 8011440:	3fd33332 	.word	0x3fd33332
 8011444:	3fe90000 	.word	0x3fe90000

08011448 <__kernel_rem_pio2>:
 8011448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144c:	ed2d 8b06 	vpush	{d8-d10}
 8011450:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011454:	460f      	mov	r7, r1
 8011456:	9002      	str	r0, [sp, #8]
 8011458:	49c5      	ldr	r1, [pc, #788]	; (8011770 <__kernel_rem_pio2+0x328>)
 801145a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801145c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011460:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011464:	9301      	str	r3, [sp, #4]
 8011466:	f112 0f14 	cmn.w	r2, #20
 801146a:	bfa8      	it	ge
 801146c:	2018      	movge	r0, #24
 801146e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011472:	bfb8      	it	lt
 8011474:	2000      	movlt	r0, #0
 8011476:	f06f 0417 	mvn.w	r4, #23
 801147a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011758 <__kernel_rem_pio2+0x310>
 801147e:	bfa4      	itt	ge
 8011480:	f1a2 0a03 	subge.w	sl, r2, #3
 8011484:	fb9a f0f0 	sdivge	r0, sl, r0
 8011488:	fb00 4404 	mla	r4, r0, r4, r4
 801148c:	1a46      	subs	r6, r0, r1
 801148e:	4414      	add	r4, r2
 8011490:	eb09 0c01 	add.w	ip, r9, r1
 8011494:	ad1a      	add	r5, sp, #104	; 0x68
 8011496:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801149a:	2200      	movs	r2, #0
 801149c:	4562      	cmp	r2, ip
 801149e:	dd10      	ble.n	80114c2 <__kernel_rem_pio2+0x7a>
 80114a0:	9a01      	ldr	r2, [sp, #4]
 80114a2:	ab1a      	add	r3, sp, #104	; 0x68
 80114a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80114a8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80114ac:	f04f 0c00 	mov.w	ip, #0
 80114b0:	45cc      	cmp	ip, r9
 80114b2:	dc26      	bgt.n	8011502 <__kernel_rem_pio2+0xba>
 80114b4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011758 <__kernel_rem_pio2+0x310>
 80114b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80114bc:	4616      	mov	r6, r2
 80114be:	2500      	movs	r5, #0
 80114c0:	e015      	b.n	80114ee <__kernel_rem_pio2+0xa6>
 80114c2:	42d6      	cmn	r6, r2
 80114c4:	d409      	bmi.n	80114da <__kernel_rem_pio2+0x92>
 80114c6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80114ca:	ee07 3a90 	vmov	s15, r3
 80114ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80114d2:	eca5 7b02 	vstmia	r5!, {d7}
 80114d6:	3201      	adds	r2, #1
 80114d8:	e7e0      	b.n	801149c <__kernel_rem_pio2+0x54>
 80114da:	eeb0 7b46 	vmov.f64	d7, d6
 80114de:	e7f8      	b.n	80114d2 <__kernel_rem_pio2+0x8a>
 80114e0:	ecb8 5b02 	vldmia	r8!, {d5}
 80114e4:	ed96 6b00 	vldr	d6, [r6]
 80114e8:	3501      	adds	r5, #1
 80114ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114ee:	428d      	cmp	r5, r1
 80114f0:	f1a6 0608 	sub.w	r6, r6, #8
 80114f4:	ddf4      	ble.n	80114e0 <__kernel_rem_pio2+0x98>
 80114f6:	ecaa 7b02 	vstmia	sl!, {d7}
 80114fa:	f10c 0c01 	add.w	ip, ip, #1
 80114fe:	3208      	adds	r2, #8
 8011500:	e7d6      	b.n	80114b0 <__kernel_rem_pio2+0x68>
 8011502:	ab06      	add	r3, sp, #24
 8011504:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011760 <__kernel_rem_pio2+0x318>
 8011508:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011768 <__kernel_rem_pio2+0x320>
 801150c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011510:	9303      	str	r3, [sp, #12]
 8011512:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011516:	464d      	mov	r5, r9
 8011518:	00eb      	lsls	r3, r5, #3
 801151a:	9304      	str	r3, [sp, #16]
 801151c:	ab92      	add	r3, sp, #584	; 0x248
 801151e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011522:	f10d 0b18 	add.w	fp, sp, #24
 8011526:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011528:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801152c:	465e      	mov	r6, fp
 801152e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011532:	4628      	mov	r0, r5
 8011534:	2800      	cmp	r0, #0
 8011536:	f1a2 0208 	sub.w	r2, r2, #8
 801153a:	dc4c      	bgt.n	80115d6 <__kernel_rem_pio2+0x18e>
 801153c:	4620      	mov	r0, r4
 801153e:	9105      	str	r1, [sp, #20]
 8011540:	f000 fb6a 	bl	8011c18 <scalbn>
 8011544:	eeb0 8b40 	vmov.f64	d8, d0
 8011548:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801154c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011550:	f000 fae6 	bl	8011b20 <floor>
 8011554:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011558:	eea0 8b47 	vfms.f64	d8, d0, d7
 801155c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011560:	2c00      	cmp	r4, #0
 8011562:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011566:	ee17 8a90 	vmov	r8, s15
 801156a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801156e:	9905      	ldr	r1, [sp, #20]
 8011570:	dd43      	ble.n	80115fa <__kernel_rem_pio2+0x1b2>
 8011572:	1e68      	subs	r0, r5, #1
 8011574:	ab06      	add	r3, sp, #24
 8011576:	f1c4 0c18 	rsb	ip, r4, #24
 801157a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801157e:	fa46 f20c 	asr.w	r2, r6, ip
 8011582:	4490      	add	r8, r2
 8011584:	fa02 f20c 	lsl.w	r2, r2, ip
 8011588:	1ab6      	subs	r6, r6, r2
 801158a:	f1c4 0217 	rsb	r2, r4, #23
 801158e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011592:	4116      	asrs	r6, r2
 8011594:	2e00      	cmp	r6, #0
 8011596:	dd3f      	ble.n	8011618 <__kernel_rem_pio2+0x1d0>
 8011598:	f04f 0c00 	mov.w	ip, #0
 801159c:	f108 0801 	add.w	r8, r8, #1
 80115a0:	4660      	mov	r0, ip
 80115a2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80115a6:	4565      	cmp	r5, ip
 80115a8:	dc6e      	bgt.n	8011688 <__kernel_rem_pio2+0x240>
 80115aa:	2c00      	cmp	r4, #0
 80115ac:	dd04      	ble.n	80115b8 <__kernel_rem_pio2+0x170>
 80115ae:	2c01      	cmp	r4, #1
 80115b0:	d07f      	beq.n	80116b2 <__kernel_rem_pio2+0x26a>
 80115b2:	2c02      	cmp	r4, #2
 80115b4:	f000 8087 	beq.w	80116c6 <__kernel_rem_pio2+0x27e>
 80115b8:	2e02      	cmp	r6, #2
 80115ba:	d12d      	bne.n	8011618 <__kernel_rem_pio2+0x1d0>
 80115bc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115c0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80115c4:	b340      	cbz	r0, 8011618 <__kernel_rem_pio2+0x1d0>
 80115c6:	4620      	mov	r0, r4
 80115c8:	9105      	str	r1, [sp, #20]
 80115ca:	f000 fb25 	bl	8011c18 <scalbn>
 80115ce:	9905      	ldr	r1, [sp, #20]
 80115d0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80115d4:	e020      	b.n	8011618 <__kernel_rem_pio2+0x1d0>
 80115d6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80115da:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80115de:	3801      	subs	r0, #1
 80115e0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80115e4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80115e8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80115ec:	eca6 0a01 	vstmia	r6!, {s0}
 80115f0:	ed92 0b00 	vldr	d0, [r2]
 80115f4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115f8:	e79c      	b.n	8011534 <__kernel_rem_pio2+0xec>
 80115fa:	d105      	bne.n	8011608 <__kernel_rem_pio2+0x1c0>
 80115fc:	1e6a      	subs	r2, r5, #1
 80115fe:	ab06      	add	r3, sp, #24
 8011600:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011604:	15f6      	asrs	r6, r6, #23
 8011606:	e7c5      	b.n	8011594 <__kernel_rem_pio2+0x14c>
 8011608:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801160c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011614:	da36      	bge.n	8011684 <__kernel_rem_pio2+0x23c>
 8011616:	2600      	movs	r6, #0
 8011618:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011620:	f040 80aa 	bne.w	8011778 <__kernel_rem_pio2+0x330>
 8011624:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011628:	4658      	mov	r0, fp
 801162a:	2200      	movs	r2, #0
 801162c:	4548      	cmp	r0, r9
 801162e:	da52      	bge.n	80116d6 <__kernel_rem_pio2+0x28e>
 8011630:	2a00      	cmp	r2, #0
 8011632:	f000 8081 	beq.w	8011738 <__kernel_rem_pio2+0x2f0>
 8011636:	ab06      	add	r3, sp, #24
 8011638:	3c18      	subs	r4, #24
 801163a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801163e:	2b00      	cmp	r3, #0
 8011640:	f000 8087 	beq.w	8011752 <__kernel_rem_pio2+0x30a>
 8011644:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011648:	4620      	mov	r0, r4
 801164a:	f000 fae5 	bl	8011c18 <scalbn>
 801164e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011652:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011760 <__kernel_rem_pio2+0x318>
 8011656:	a96a      	add	r1, sp, #424	; 0x1a8
 8011658:	f103 0208 	add.w	r2, r3, #8
 801165c:	1888      	adds	r0, r1, r2
 801165e:	4659      	mov	r1, fp
 8011660:	2900      	cmp	r1, #0
 8011662:	f280 80b7 	bge.w	80117d4 <__kernel_rem_pio2+0x38c>
 8011666:	4659      	mov	r1, fp
 8011668:	2900      	cmp	r1, #0
 801166a:	f2c0 80d5 	blt.w	8011818 <__kernel_rem_pio2+0x3d0>
 801166e:	a86a      	add	r0, sp, #424	; 0x1a8
 8011670:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011674:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011758 <__kernel_rem_pio2+0x310>
 8011678:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011774 <__kernel_rem_pio2+0x32c>
 801167c:	2400      	movs	r4, #0
 801167e:	ebab 0001 	sub.w	r0, fp, r1
 8011682:	e0be      	b.n	8011802 <__kernel_rem_pio2+0x3ba>
 8011684:	2602      	movs	r6, #2
 8011686:	e787      	b.n	8011598 <__kernel_rem_pio2+0x150>
 8011688:	f8db 2000 	ldr.w	r2, [fp]
 801168c:	b958      	cbnz	r0, 80116a6 <__kernel_rem_pio2+0x25e>
 801168e:	b122      	cbz	r2, 801169a <__kernel_rem_pio2+0x252>
 8011690:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011694:	f8cb 2000 	str.w	r2, [fp]
 8011698:	2201      	movs	r2, #1
 801169a:	f10c 0c01 	add.w	ip, ip, #1
 801169e:	f10b 0b04 	add.w	fp, fp, #4
 80116a2:	4610      	mov	r0, r2
 80116a4:	e77f      	b.n	80115a6 <__kernel_rem_pio2+0x15e>
 80116a6:	ebae 0202 	sub.w	r2, lr, r2
 80116aa:	f8cb 2000 	str.w	r2, [fp]
 80116ae:	4602      	mov	r2, r0
 80116b0:	e7f3      	b.n	801169a <__kernel_rem_pio2+0x252>
 80116b2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80116b6:	ab06      	add	r3, sp, #24
 80116b8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80116bc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80116c0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80116c4:	e778      	b.n	80115b8 <__kernel_rem_pio2+0x170>
 80116c6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80116ca:	ab06      	add	r3, sp, #24
 80116cc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80116d0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80116d4:	e7f4      	b.n	80116c0 <__kernel_rem_pio2+0x278>
 80116d6:	ab06      	add	r3, sp, #24
 80116d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80116dc:	3801      	subs	r0, #1
 80116de:	431a      	orrs	r2, r3
 80116e0:	e7a4      	b.n	801162c <__kernel_rem_pio2+0x1e4>
 80116e2:	f10c 0c01 	add.w	ip, ip, #1
 80116e6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d0f9      	beq.n	80116e2 <__kernel_rem_pio2+0x29a>
 80116ee:	9b04      	ldr	r3, [sp, #16]
 80116f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80116f4:	eb0d 0203 	add.w	r2, sp, r3
 80116f8:	9b01      	ldr	r3, [sp, #4]
 80116fa:	18e8      	adds	r0, r5, r3
 80116fc:	ab1a      	add	r3, sp, #104	; 0x68
 80116fe:	1c6e      	adds	r6, r5, #1
 8011700:	3a98      	subs	r2, #152	; 0x98
 8011702:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011706:	4465      	add	r5, ip
 8011708:	42b5      	cmp	r5, r6
 801170a:	f6ff af05 	blt.w	8011518 <__kernel_rem_pio2+0xd0>
 801170e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011712:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011716:	ee07 3a90 	vmov	s15, r3
 801171a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801171e:	f04f 0c00 	mov.w	ip, #0
 8011722:	eca0 7b02 	vstmia	r0!, {d7}
 8011726:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011758 <__kernel_rem_pio2+0x310>
 801172a:	4680      	mov	r8, r0
 801172c:	458c      	cmp	ip, r1
 801172e:	dd07      	ble.n	8011740 <__kernel_rem_pio2+0x2f8>
 8011730:	eca2 7b02 	vstmia	r2!, {d7}
 8011734:	3601      	adds	r6, #1
 8011736:	e7e7      	b.n	8011708 <__kernel_rem_pio2+0x2c0>
 8011738:	9a03      	ldr	r2, [sp, #12]
 801173a:	f04f 0c01 	mov.w	ip, #1
 801173e:	e7d2      	b.n	80116e6 <__kernel_rem_pio2+0x29e>
 8011740:	ecbe 5b02 	vldmia	lr!, {d5}
 8011744:	ed38 6b02 	vldmdb	r8!, {d6}
 8011748:	f10c 0c01 	add.w	ip, ip, #1
 801174c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011750:	e7ec      	b.n	801172c <__kernel_rem_pio2+0x2e4>
 8011752:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011756:	e76e      	b.n	8011636 <__kernel_rem_pio2+0x1ee>
	...
 8011764:	3e700000 	.word	0x3e700000
 8011768:	00000000 	.word	0x00000000
 801176c:	41700000 	.word	0x41700000
 8011770:	08013950 	.word	0x08013950
 8011774:	08013910 	.word	0x08013910
 8011778:	4260      	negs	r0, r4
 801177a:	eeb0 0b48 	vmov.f64	d0, d8
 801177e:	f000 fa4b 	bl	8011c18 <scalbn>
 8011782:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011960 <__kernel_rem_pio2+0x518>
 8011786:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	db18      	blt.n	80117c2 <__kernel_rem_pio2+0x37a>
 8011790:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011968 <__kernel_rem_pio2+0x520>
 8011794:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011798:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801179c:	aa06      	add	r2, sp, #24
 801179e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80117a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80117a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80117aa:	f105 0b01 	add.w	fp, r5, #1
 80117ae:	ee10 3a10 	vmov	r3, s0
 80117b2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80117b6:	ee17 3a10 	vmov	r3, s14
 80117ba:	3418      	adds	r4, #24
 80117bc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80117c0:	e740      	b.n	8011644 <__kernel_rem_pio2+0x1fc>
 80117c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80117c6:	aa06      	add	r2, sp, #24
 80117c8:	ee10 3a10 	vmov	r3, s0
 80117cc:	46ab      	mov	fp, r5
 80117ce:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80117d2:	e737      	b.n	8011644 <__kernel_rem_pio2+0x1fc>
 80117d4:	ac06      	add	r4, sp, #24
 80117d6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80117da:	9401      	str	r4, [sp, #4]
 80117dc:	ee07 4a90 	vmov	s15, r4
 80117e0:	3901      	subs	r1, #1
 80117e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117e6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80117ea:	ee20 0b06 	vmul.f64	d0, d0, d6
 80117ee:	ed20 7b02 	vstmdb	r0!, {d7}
 80117f2:	e735      	b.n	8011660 <__kernel_rem_pio2+0x218>
 80117f4:	ecbc 5b02 	vldmia	ip!, {d5}
 80117f8:	ecb5 6b02 	vldmia	r5!, {d6}
 80117fc:	3401      	adds	r4, #1
 80117fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011802:	454c      	cmp	r4, r9
 8011804:	dc01      	bgt.n	801180a <__kernel_rem_pio2+0x3c2>
 8011806:	4284      	cmp	r4, r0
 8011808:	ddf4      	ble.n	80117f4 <__kernel_rem_pio2+0x3ac>
 801180a:	ac42      	add	r4, sp, #264	; 0x108
 801180c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011810:	ed80 7b00 	vstr	d7, [r0]
 8011814:	3901      	subs	r1, #1
 8011816:	e727      	b.n	8011668 <__kernel_rem_pio2+0x220>
 8011818:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801181a:	2902      	cmp	r1, #2
 801181c:	dc0a      	bgt.n	8011834 <__kernel_rem_pio2+0x3ec>
 801181e:	2900      	cmp	r1, #0
 8011820:	dc2c      	bgt.n	801187c <__kernel_rem_pio2+0x434>
 8011822:	d045      	beq.n	80118b0 <__kernel_rem_pio2+0x468>
 8011824:	f008 0007 	and.w	r0, r8, #7
 8011828:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801182c:	ecbd 8b06 	vpop	{d8-d10}
 8011830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011836:	2a03      	cmp	r2, #3
 8011838:	d1f4      	bne.n	8011824 <__kernel_rem_pio2+0x3dc>
 801183a:	aa42      	add	r2, sp, #264	; 0x108
 801183c:	4413      	add	r3, r2
 801183e:	461a      	mov	r2, r3
 8011840:	4619      	mov	r1, r3
 8011842:	4658      	mov	r0, fp
 8011844:	2800      	cmp	r0, #0
 8011846:	f1a1 0108 	sub.w	r1, r1, #8
 801184a:	dc54      	bgt.n	80118f6 <__kernel_rem_pio2+0x4ae>
 801184c:	4659      	mov	r1, fp
 801184e:	2901      	cmp	r1, #1
 8011850:	f1a2 0208 	sub.w	r2, r2, #8
 8011854:	dc5f      	bgt.n	8011916 <__kernel_rem_pio2+0x4ce>
 8011856:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011970 <__kernel_rem_pio2+0x528>
 801185a:	3308      	adds	r3, #8
 801185c:	f1bb 0f01 	cmp.w	fp, #1
 8011860:	dc69      	bgt.n	8011936 <__kernel_rem_pio2+0x4ee>
 8011862:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011866:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801186a:	2e00      	cmp	r6, #0
 801186c:	d16a      	bne.n	8011944 <__kernel_rem_pio2+0x4fc>
 801186e:	ed87 5b00 	vstr	d5, [r7]
 8011872:	ed87 6b02 	vstr	d6, [r7, #8]
 8011876:	ed87 7b04 	vstr	d7, [r7, #16]
 801187a:	e7d3      	b.n	8011824 <__kernel_rem_pio2+0x3dc>
 801187c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011970 <__kernel_rem_pio2+0x528>
 8011880:	ab42      	add	r3, sp, #264	; 0x108
 8011882:	441a      	add	r2, r3
 8011884:	465b      	mov	r3, fp
 8011886:	2b00      	cmp	r3, #0
 8011888:	da26      	bge.n	80118d8 <__kernel_rem_pio2+0x490>
 801188a:	b35e      	cbz	r6, 80118e4 <__kernel_rem_pio2+0x49c>
 801188c:	eeb1 7b46 	vneg.f64	d7, d6
 8011890:	ed87 7b00 	vstr	d7, [r7]
 8011894:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011898:	aa44      	add	r2, sp, #272	; 0x110
 801189a:	2301      	movs	r3, #1
 801189c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118a0:	459b      	cmp	fp, r3
 80118a2:	da22      	bge.n	80118ea <__kernel_rem_pio2+0x4a2>
 80118a4:	b10e      	cbz	r6, 80118aa <__kernel_rem_pio2+0x462>
 80118a6:	eeb1 7b47 	vneg.f64	d7, d7
 80118aa:	ed87 7b02 	vstr	d7, [r7, #8]
 80118ae:	e7b9      	b.n	8011824 <__kernel_rem_pio2+0x3dc>
 80118b0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011970 <__kernel_rem_pio2+0x528>
 80118b4:	ab42      	add	r3, sp, #264	; 0x108
 80118b6:	441a      	add	r2, r3
 80118b8:	f1bb 0f00 	cmp.w	fp, #0
 80118bc:	da05      	bge.n	80118ca <__kernel_rem_pio2+0x482>
 80118be:	b10e      	cbz	r6, 80118c4 <__kernel_rem_pio2+0x47c>
 80118c0:	eeb1 7b47 	vneg.f64	d7, d7
 80118c4:	ed87 7b00 	vstr	d7, [r7]
 80118c8:	e7ac      	b.n	8011824 <__kernel_rem_pio2+0x3dc>
 80118ca:	ed32 6b02 	vldmdb	r2!, {d6}
 80118ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80118d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118d6:	e7ef      	b.n	80118b8 <__kernel_rem_pio2+0x470>
 80118d8:	ed32 7b02 	vldmdb	r2!, {d7}
 80118dc:	3b01      	subs	r3, #1
 80118de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80118e2:	e7d0      	b.n	8011886 <__kernel_rem_pio2+0x43e>
 80118e4:	eeb0 7b46 	vmov.f64	d7, d6
 80118e8:	e7d2      	b.n	8011890 <__kernel_rem_pio2+0x448>
 80118ea:	ecb2 6b02 	vldmia	r2!, {d6}
 80118ee:	3301      	adds	r3, #1
 80118f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118f4:	e7d4      	b.n	80118a0 <__kernel_rem_pio2+0x458>
 80118f6:	ed91 7b00 	vldr	d7, [r1]
 80118fa:	ed91 5b02 	vldr	d5, [r1, #8]
 80118fe:	3801      	subs	r0, #1
 8011900:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011904:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011908:	ed81 6b00 	vstr	d6, [r1]
 801190c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011910:	ed81 7b02 	vstr	d7, [r1, #8]
 8011914:	e796      	b.n	8011844 <__kernel_rem_pio2+0x3fc>
 8011916:	ed92 7b00 	vldr	d7, [r2]
 801191a:	ed92 5b02 	vldr	d5, [r2, #8]
 801191e:	3901      	subs	r1, #1
 8011920:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011924:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011928:	ed82 6b00 	vstr	d6, [r2]
 801192c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011930:	ed82 7b02 	vstr	d7, [r2, #8]
 8011934:	e78b      	b.n	801184e <__kernel_rem_pio2+0x406>
 8011936:	ed33 6b02 	vldmdb	r3!, {d6}
 801193a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801193e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011942:	e78b      	b.n	801185c <__kernel_rem_pio2+0x414>
 8011944:	eeb1 5b45 	vneg.f64	d5, d5
 8011948:	eeb1 6b46 	vneg.f64	d6, d6
 801194c:	ed87 5b00 	vstr	d5, [r7]
 8011950:	eeb1 7b47 	vneg.f64	d7, d7
 8011954:	ed87 6b02 	vstr	d6, [r7, #8]
 8011958:	e78d      	b.n	8011876 <__kernel_rem_pio2+0x42e>
 801195a:	bf00      	nop
 801195c:	f3af 8000 	nop.w
 8011960:	00000000 	.word	0x00000000
 8011964:	41700000 	.word	0x41700000
 8011968:	00000000 	.word	0x00000000
 801196c:	3e700000 	.word	0x3e700000
	...

08011978 <__kernel_sin>:
 8011978:	ee10 3a90 	vmov	r3, s1
 801197c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011980:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011984:	da04      	bge.n	8011990 <__kernel_sin+0x18>
 8011986:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801198a:	ee17 3a90 	vmov	r3, s15
 801198e:	b35b      	cbz	r3, 80119e8 <__kernel_sin+0x70>
 8011990:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011994:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011998:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80119f0 <__kernel_sin+0x78>
 801199c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119f8 <__kernel_sin+0x80>
 80119a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80119a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a00 <__kernel_sin+0x88>
 80119a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80119ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a08 <__kernel_sin+0x90>
 80119b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80119b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a10 <__kernel_sin+0x98>
 80119b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80119bc:	b930      	cbnz	r0, 80119cc <__kernel_sin+0x54>
 80119be:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a18 <__kernel_sin+0xa0>
 80119c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80119c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80119ca:	4770      	bx	lr
 80119cc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80119d0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80119d4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80119d8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80119dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011a20 <__kernel_sin+0xa8>
 80119e0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80119e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	f3af 8000 	nop.w
 80119f0:	5acfd57c 	.word	0x5acfd57c
 80119f4:	3de5d93a 	.word	0x3de5d93a
 80119f8:	8a2b9ceb 	.word	0x8a2b9ceb
 80119fc:	be5ae5e6 	.word	0xbe5ae5e6
 8011a00:	57b1fe7d 	.word	0x57b1fe7d
 8011a04:	3ec71de3 	.word	0x3ec71de3
 8011a08:	19c161d5 	.word	0x19c161d5
 8011a0c:	bf2a01a0 	.word	0xbf2a01a0
 8011a10:	1110f8a6 	.word	0x1110f8a6
 8011a14:	3f811111 	.word	0x3f811111
 8011a18:	55555549 	.word	0x55555549
 8011a1c:	bfc55555 	.word	0xbfc55555
 8011a20:	55555549 	.word	0x55555549
 8011a24:	3fc55555 	.word	0x3fc55555

08011a28 <with_errno>:
 8011a28:	b513      	push	{r0, r1, r4, lr}
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	ed8d 0b00 	vstr	d0, [sp]
 8011a30:	f7fe f9fa 	bl	800fe28 <__errno>
 8011a34:	ed9d 0b00 	vldr	d0, [sp]
 8011a38:	6004      	str	r4, [r0, #0]
 8011a3a:	b002      	add	sp, #8
 8011a3c:	bd10      	pop	{r4, pc}

08011a3e <xflow>:
 8011a3e:	b082      	sub	sp, #8
 8011a40:	b158      	cbz	r0, 8011a5a <xflow+0x1c>
 8011a42:	eeb1 7b40 	vneg.f64	d7, d0
 8011a46:	ed8d 7b00 	vstr	d7, [sp]
 8011a4a:	ed9d 7b00 	vldr	d7, [sp]
 8011a4e:	2022      	movs	r0, #34	; 0x22
 8011a50:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a54:	b002      	add	sp, #8
 8011a56:	f7ff bfe7 	b.w	8011a28 <with_errno>
 8011a5a:	eeb0 7b40 	vmov.f64	d7, d0
 8011a5e:	e7f2      	b.n	8011a46 <xflow+0x8>

08011a60 <__math_uflow>:
 8011a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a68 <__math_uflow+0x8>
 8011a64:	f7ff bfeb 	b.w	8011a3e <xflow>
 8011a68:	00000000 	.word	0x00000000
 8011a6c:	10000000 	.word	0x10000000

08011a70 <__math_oflow>:
 8011a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a78 <__math_oflow+0x8>
 8011a74:	f7ff bfe3 	b.w	8011a3e <xflow>
 8011a78:	00000000 	.word	0x00000000
 8011a7c:	70000000 	.word	0x70000000

08011a80 <__math_divzero>:
 8011a80:	b082      	sub	sp, #8
 8011a82:	2800      	cmp	r0, #0
 8011a84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a88:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a8c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011a90:	ed8d 7b00 	vstr	d7, [sp]
 8011a94:	ed9d 0b00 	vldr	d0, [sp]
 8011a98:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011aa8 <__math_divzero+0x28>
 8011a9c:	2022      	movs	r0, #34	; 0x22
 8011a9e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011aa2:	b002      	add	sp, #8
 8011aa4:	f7ff bfc0 	b.w	8011a28 <with_errno>
	...

08011ab0 <__math_invalid>:
 8011ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8011ab4:	eeb4 7b47 	vcmp.f64	d7, d7
 8011ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011ac0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011ac4:	d602      	bvs.n	8011acc <__math_invalid+0x1c>
 8011ac6:	2021      	movs	r0, #33	; 0x21
 8011ac8:	f7ff bfae 	b.w	8011a28 <with_errno>
 8011acc:	4770      	bx	lr

08011ace <__math_check_uflow>:
 8011ace:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad6:	d102      	bne.n	8011ade <__math_check_uflow+0x10>
 8011ad8:	2022      	movs	r0, #34	; 0x22
 8011ada:	f7ff bfa5 	b.w	8011a28 <with_errno>
 8011ade:	4770      	bx	lr

08011ae0 <__math_check_oflow>:
 8011ae0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011b00 <__math_check_oflow+0x20>
 8011ae4:	eeb0 7bc0 	vabs.f64	d7, d0
 8011ae8:	eeb4 7b46 	vcmp.f64	d7, d6
 8011aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af0:	dd02      	ble.n	8011af8 <__math_check_oflow+0x18>
 8011af2:	2022      	movs	r0, #34	; 0x22
 8011af4:	f7ff bf98 	b.w	8011a28 <with_errno>
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	f3af 8000 	nop.w
 8011b00:	ffffffff 	.word	0xffffffff
 8011b04:	7fefffff 	.word	0x7fefffff

08011b08 <fabs>:
 8011b08:	ec51 0b10 	vmov	r0, r1, d0
 8011b0c:	ee10 2a10 	vmov	r2, s0
 8011b10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b14:	ec43 2b10 	vmov	d0, r2, r3
 8011b18:	4770      	bx	lr
 8011b1a:	0000      	movs	r0, r0
 8011b1c:	0000      	movs	r0, r0
	...

08011b20 <floor>:
 8011b20:	ee10 1a90 	vmov	r1, s1
 8011b24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011b28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011b2c:	2b13      	cmp	r3, #19
 8011b2e:	b530      	push	{r4, r5, lr}
 8011b30:	ee10 0a10 	vmov	r0, s0
 8011b34:	ee10 5a10 	vmov	r5, s0
 8011b38:	dc31      	bgt.n	8011b9e <floor+0x7e>
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da15      	bge.n	8011b6a <floor+0x4a>
 8011b3e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011bf8 <floor+0xd8>
 8011b42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4e:	dd07      	ble.n	8011b60 <floor+0x40>
 8011b50:	2900      	cmp	r1, #0
 8011b52:	da4e      	bge.n	8011bf2 <floor+0xd2>
 8011b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b58:	4318      	orrs	r0, r3
 8011b5a:	d001      	beq.n	8011b60 <floor+0x40>
 8011b5c:	4928      	ldr	r1, [pc, #160]	; (8011c00 <floor+0xe0>)
 8011b5e:	2000      	movs	r0, #0
 8011b60:	460b      	mov	r3, r1
 8011b62:	4602      	mov	r2, r0
 8011b64:	ec43 2b10 	vmov	d0, r2, r3
 8011b68:	e020      	b.n	8011bac <floor+0x8c>
 8011b6a:	4a26      	ldr	r2, [pc, #152]	; (8011c04 <floor+0xe4>)
 8011b6c:	411a      	asrs	r2, r3
 8011b6e:	ea01 0402 	and.w	r4, r1, r2
 8011b72:	4304      	orrs	r4, r0
 8011b74:	d01a      	beq.n	8011bac <floor+0x8c>
 8011b76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011bf8 <floor+0xd8>
 8011b7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b86:	ddeb      	ble.n	8011b60 <floor+0x40>
 8011b88:	2900      	cmp	r1, #0
 8011b8a:	bfbe      	ittt	lt
 8011b8c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011b90:	fa40 f303 	asrlt.w	r3, r0, r3
 8011b94:	18c9      	addlt	r1, r1, r3
 8011b96:	ea21 0102 	bic.w	r1, r1, r2
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	e7e0      	b.n	8011b60 <floor+0x40>
 8011b9e:	2b33      	cmp	r3, #51	; 0x33
 8011ba0:	dd05      	ble.n	8011bae <floor+0x8e>
 8011ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ba6:	d101      	bne.n	8011bac <floor+0x8c>
 8011ba8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011bac:	bd30      	pop	{r4, r5, pc}
 8011bae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bb6:	40e2      	lsrs	r2, r4
 8011bb8:	4202      	tst	r2, r0
 8011bba:	d0f7      	beq.n	8011bac <floor+0x8c>
 8011bbc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011bf8 <floor+0xd8>
 8011bc0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011bc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	ddc8      	ble.n	8011b60 <floor+0x40>
 8011bce:	2900      	cmp	r1, #0
 8011bd0:	da02      	bge.n	8011bd8 <floor+0xb8>
 8011bd2:	2b14      	cmp	r3, #20
 8011bd4:	d103      	bne.n	8011bde <floor+0xbe>
 8011bd6:	3101      	adds	r1, #1
 8011bd8:	ea20 0002 	bic.w	r0, r0, r2
 8011bdc:	e7c0      	b.n	8011b60 <floor+0x40>
 8011bde:	2401      	movs	r4, #1
 8011be0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011be4:	fa04 f303 	lsl.w	r3, r4, r3
 8011be8:	4418      	add	r0, r3
 8011bea:	42a8      	cmp	r0, r5
 8011bec:	bf38      	it	cc
 8011bee:	1909      	addcc	r1, r1, r4
 8011bf0:	e7f2      	b.n	8011bd8 <floor+0xb8>
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	4601      	mov	r1, r0
 8011bf6:	e7b3      	b.n	8011b60 <floor+0x40>
 8011bf8:	8800759c 	.word	0x8800759c
 8011bfc:	7e37e43c 	.word	0x7e37e43c
 8011c00:	bff00000 	.word	0xbff00000
 8011c04:	000fffff 	.word	0x000fffff

08011c08 <nan>:
 8011c08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c10 <nan+0x8>
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop
 8011c10:	00000000 	.word	0x00000000
 8011c14:	7ff80000 	.word	0x7ff80000

08011c18 <scalbn>:
 8011c18:	ee10 1a90 	vmov	r1, s1
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011c22:	b98c      	cbnz	r4, 8011c48 <scalbn+0x30>
 8011c24:	ee10 3a10 	vmov	r3, s0
 8011c28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c2c:	430b      	orrs	r3, r1
 8011c2e:	d011      	beq.n	8011c54 <scalbn+0x3c>
 8011c30:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011cf8 <scalbn+0xe0>
 8011c34:	4b3c      	ldr	r3, [pc, #240]	; (8011d28 <scalbn+0x110>)
 8011c36:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011c3a:	4298      	cmp	r0, r3
 8011c3c:	da0b      	bge.n	8011c56 <scalbn+0x3e>
 8011c3e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011d00 <scalbn+0xe8>
 8011c42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011c46:	e005      	b.n	8011c54 <scalbn+0x3c>
 8011c48:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011c4c:	429c      	cmp	r4, r3
 8011c4e:	d107      	bne.n	8011c60 <scalbn+0x48>
 8011c50:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011c54:	bd10      	pop	{r4, pc}
 8011c56:	ee10 1a90 	vmov	r1, s1
 8011c5a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011c5e:	3c36      	subs	r4, #54	; 0x36
 8011c60:	4404      	add	r4, r0
 8011c62:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011c66:	429c      	cmp	r4, r3
 8011c68:	dd0d      	ble.n	8011c86 <scalbn+0x6e>
 8011c6a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011d08 <scalbn+0xf0>
 8011c6e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011d10 <scalbn+0xf8>
 8011c72:	eeb0 6b47 	vmov.f64	d6, d7
 8011c76:	ee10 3a90 	vmov	r3, s1
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011c80:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011c84:	e7e6      	b.n	8011c54 <scalbn+0x3c>
 8011c86:	2c00      	cmp	r4, #0
 8011c88:	dd0a      	ble.n	8011ca0 <scalbn+0x88>
 8011c8a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011c8e:	ec53 2b10 	vmov	r2, r3, d0
 8011c92:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011c96:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011c9a:	ec43 2b10 	vmov	d0, r2, r3
 8011c9e:	e7d9      	b.n	8011c54 <scalbn+0x3c>
 8011ca0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011ca4:	da19      	bge.n	8011cda <scalbn+0xc2>
 8011ca6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011caa:	4298      	cmp	r0, r3
 8011cac:	ee10 3a90 	vmov	r3, s1
 8011cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011cb4:	dd09      	ble.n	8011cca <scalbn+0xb2>
 8011cb6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011d08 <scalbn+0xf0>
 8011cba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011d10 <scalbn+0xf8>
 8011cbe:	eeb0 7b40 	vmov.f64	d7, d0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011cc8:	e7bb      	b.n	8011c42 <scalbn+0x2a>
 8011cca:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011d00 <scalbn+0xe8>
 8011cce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011d18 <scalbn+0x100>
 8011cd2:	eeb0 7b40 	vmov.f64	d7, d0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	e7f4      	b.n	8011cc4 <scalbn+0xac>
 8011cda:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011cde:	ec53 2b10 	vmov	r2, r3, d0
 8011ce2:	3436      	adds	r4, #54	; 0x36
 8011ce4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011ce8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011cec:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011d20 <scalbn+0x108>
 8011cf0:	ec43 2b10 	vmov	d0, r2, r3
 8011cf4:	e7a5      	b.n	8011c42 <scalbn+0x2a>
 8011cf6:	bf00      	nop
 8011cf8:	00000000 	.word	0x00000000
 8011cfc:	43500000 	.word	0x43500000
 8011d00:	c2f8f359 	.word	0xc2f8f359
 8011d04:	01a56e1f 	.word	0x01a56e1f
 8011d08:	8800759c 	.word	0x8800759c
 8011d0c:	7e37e43c 	.word	0x7e37e43c
 8011d10:	8800759c 	.word	0x8800759c
 8011d14:	fe37e43c 	.word	0xfe37e43c
 8011d18:	c2f8f359 	.word	0xc2f8f359
 8011d1c:	81a56e1f 	.word	0x81a56e1f
 8011d20:	00000000 	.word	0x00000000
 8011d24:	3c900000 	.word	0x3c900000
 8011d28:	ffff3cb0 	.word	0xffff3cb0

08011d2c <_init>:
 8011d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2e:	bf00      	nop
 8011d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d32:	bc08      	pop	{r3}
 8011d34:	469e      	mov	lr, r3
 8011d36:	4770      	bx	lr

08011d38 <_fini>:
 8011d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3a:	bf00      	nop
 8011d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d3e:	bc08      	pop	{r3}
 8011d40:	469e      	mov	lr, r3
 8011d42:	4770      	bx	lr
