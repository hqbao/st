
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f094  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d90  0800f338  0800f338  0001f338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080110c8  080110c8  000210c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080110d0  080110d0  000210d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  080110d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001850  24000088  08011160  00030088  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240018d8  08011160  000318d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d274  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030e5  00000000  00000000  0004d32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  00050410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013b8  00000000  00000000  000518c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038885  00000000  00000000  00052c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d571  00000000  00000000  0008b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167186  00000000  00000000  000a8a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020fbf4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006300  00000000  00000000  0020fc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f31c 	.word	0x0800f31c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800f31c 	.word	0x0800f31c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a18:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a1c:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	609a      	str	r2, [r3, #8]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <kalman_filter_update>:

float kalman_filter_update(kalman_filter_t* filter, float mea) {
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	ed87 0a00 	vstr	s0, [r7]
  filter->_kalman_gain = filter->_err_estimate/(filter->_err_estimate + filter->_err_measure);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	edc3 7a05 	vstr	s15, [r3, #20]
  filter->_current_estimate = filter->_last_estimate + filter->_kalman_gain * (mea - filter->_last_estimate);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edd3 6a05 	vldr	s13, [r3, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a7c:	ed97 6a00 	vldr	s12, [r7]
 8000a80:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	edc3 7a03 	vstr	s15, [r3, #12]
  filter->_err_estimate =  ((float)1.0 - filter->_kalman_gain)*filter->_err_estimate + fabs(filter->_last_estimate-filter->_current_estimate)*filter->_q;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aaa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	eef0 7ae7 	vabs.f32	s15, s15
 8000ac2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ad4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ad8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->_last_estimate=filter->_current_estimate;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	611a      	str	r2, [r3, #16]

  return filter->_current_estimate;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	ee07 3a90 	vmov	s15, r3
}
 8000af2:	eeb0 0a67 	vmov.f32	s0, s15
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <average_filter_init>:

void average_filter_init(average_filter_t* filter, int width) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f103 0008 	add.w	r0, r3, #8
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f00c fb6c 	bl	800d20c <memset>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000b4e:	3301      	adds	r3, #1
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b58:	fb01 f202 	mul.w	r2, r1, r2
 8000b5c:	1a9a      	subs	r2, r3, r2
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	3302      	adds	r3, #2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b8c:	edd7 7a00 	vldr	s15, [r7]
 8000b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	ee07 3a90 	vmov	s15, r3
 8000bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000bc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e010      	b.n	8000c06 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000be4:	2102      	movs	r1, #2
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <flash+0x48>)
 8000be8:	f004 fd27 	bl	800563a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f003 fc9f 	bl	8004530 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <flash+0x48>)
 8000bf6:	f004 fd20 	bl	800563a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000bfa:	2032      	movs	r0, #50	; 0x32
 8000bfc:	f003 fc98 	bl	8004530 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbea      	blt.n	8000be4 <flash+0x10>
  }

  HAL_Delay(100);
 8000c0e:	2064      	movs	r0, #100	; 0x64
 8000c10:	f003 fc8e 	bl	8004530 <HAL_Delay>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58020000 	.word	0x58020000

08000c20 <console>:

// Monitor console
void console(const char *str) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fb59 	bl	80002e0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <console+0x24>)
 8000c38:	f009 fdfc 	bl	800a834 <HAL_UART_Transmit_IT>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240002b8 	.word	0x240002b8

08000c48 <send_data>:

void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b093      	sub	sp, #76	; 0x4c
 8000c4c:	af08      	add	r7, sp, #32
 8000c4e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000c52:	edc7 0a08 	vstr	s1, [r7, #32]
 8000c56:	ed87 1a07 	vstr	s2, [r7, #28]
 8000c5a:	edc7 1a06 	vstr	s3, [r7, #24]
 8000c5e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000c62:	edc7 2a04 	vstr	s5, [r7, #16]
 8000c66:	ed87 3a03 	vstr	s6, [r7, #12]
 8000c6a:	edc7 3a02 	vstr	s7, [r7, #8]
 8000c6e:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8000c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c76:	2100      	movs	r1, #0
 8000c78:	4837      	ldr	r0, [pc, #220]	; (8000d58 <send_data+0x110>)
 8000c7a:	f00c fac7 	bl	800d20c <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8000c7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c82:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000d5c <send_data+0x114>
 8000c86:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000c8a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8000c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c92:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000d5c <send_data+0x114>
 8000c96:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000c9a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8000c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ca2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000d5c <send_data+0x114>
 8000ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cae:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8000cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cb6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000d5c <send_data+0x114>
 8000cba:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc2:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 8000cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000d5c <send_data+0x114>
 8000cce:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cd6:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 8000cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000d5c <send_data+0x114>
 8000ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cea:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8000cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d5c <send_data+0x114>
 8000cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfe:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 8000d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d06:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000d5c <send_data+0x114>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d12:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 8000d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d5c <send_data+0x114>
 8000d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d26:	ee17 6a90 	vmov	r6, s15
 8000d2a:	9606      	str	r6, [sp, #24]
 8000d2c:	9505      	str	r5, [sp, #20]
 8000d2e:	9404      	str	r4, [sp, #16]
 8000d30:	9003      	str	r0, [sp, #12]
 8000d32:	9102      	str	r1, [sp, #8]
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	ee16 3a10 	vmov	r3, s12
 8000d3c:	ee16 2a90 	vmov	r2, s13
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <send_data+0x118>)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <send_data+0x110>)
 8000d44:	f00c fa6a 	bl	800d21c <siprintf>
  console(g_console_msg);
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <send_data+0x110>)
 8000d4a:	f7ff ff69 	bl	8000c20 <console>
}
 8000d4e:	bf00      	nop
 8000d50:	372c      	adds	r7, #44	; 0x2c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24001688 	.word	0x24001688
 8000d5c:	47c35000 	.word	0x47c35000
 8000d60:	0800f338 	.word	0x0800f338

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f003 fb4f 	bl	800440c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f8d1 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 fc89 	bl	8001688 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d76:	f000 f947 	bl	8001008 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d7a:	f000 fc39 	bl	80015f0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000d7e:	f000 fbcb 	bl	8001518 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000d82:	f000 f981 	bl	8001088 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d86:	f000 fa17 	bl	80011b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d8a:	f000 faa9 	bl	80012e0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d8e:	f000 fb3b 	bl	8001408 <MX_TIM5_Init>
  MX_TIM7_Init();
 8000d92:	f000 fbf7 	bl	8001584 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4848      	ldr	r0, [pc, #288]	; (8000ebc <main+0x158>)
 8000d9c:	f004 fc34 	bl	8005608 <HAL_GPIO_WritePin>

  flash(5);
 8000da0:	2005      	movs	r0, #5
 8000da2:	f7ff ff17 	bl	8000bd4 <flash>

  // Initialise filters for remote control
  average_filter_init(&g_af[0], 5); // Thrust
 8000da6:	2105      	movs	r1, #5
 8000da8:	4845      	ldr	r0, [pc, #276]	; (8000ec0 <main+0x15c>)
 8000daa:	f7ff fea9 	bl	8000b00 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 8000dae:	2105      	movs	r1, #5
 8000db0:	4844      	ldr	r0, [pc, #272]	; (8000ec4 <main+0x160>)
 8000db2:	f7ff fea5 	bl	8000b00 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8000db6:	2105      	movs	r1, #5
 8000db8:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x164>)
 8000dba:	f7ff fea1 	bl	8000b00 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	4842      	ldr	r0, [pc, #264]	; (8000ecc <main+0x168>)
 8000dc2:	f7ff fe9d 	bl	8000b00 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Tune 1
 8000dc6:	2105      	movs	r1, #5
 8000dc8:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <main+0x16c>)
 8000dca:	f7ff fe99 	bl	8000b00 <average_filter_init>
  average_filter_init(&g_af[5], 5); // Tune 2
 8000dce:	2105      	movs	r1, #5
 8000dd0:	4840      	ldr	r0, [pc, #256]	; (8000ed4 <main+0x170>)
 8000dd2:	f7ff fe95 	bl	8000b00 <average_filter_init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2303      	movs	r3, #3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	493e      	ldr	r1, [pc, #248]	; (8000ed8 <main+0x174>)
 8000de0:	483e      	ldr	r0, [pc, #248]	; (8000edc <main+0x178>)
 8000de2:	f000 fe6f 	bl	8001ac4 <MPU6050_init>
 8000de6:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <main+0x96>
    flash(error);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feee 	bl	8000bd4 <flash>
  while (1) {
 8000df8:	e7ed      	b.n	8000dd6 <main+0x72>
    if (error == 0) break;
 8000dfa:	bf00      	nop
  }

  MPU6050_set_offset(&g_mpu6050, -370, 50, 0, -4.4, -1.8, 0.5);
 8000dfc:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
 8000e00:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8000ee0 <main+0x17c>
 8000e04:	eddf 1a37 	vldr	s3, [pc, #220]	; 8000ee4 <main+0x180>
 8000e08:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8000ee8 <main+0x184>
 8000e0c:	eddf 0a37 	vldr	s1, [pc, #220]	; 8000eec <main+0x188>
 8000e10:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8000ef0 <main+0x18c>
 8000e14:	4831      	ldr	r0, [pc, #196]	; (8000edc <main+0x178>)
 8000e16:	f001 f845 	bl	8001ea4 <MPU6050_set_offset>

  while (1) {
    int error = MS5611_init(
 8000e1a:	492f      	ldr	r1, [pc, #188]	; (8000ed8 <main+0x174>)
 8000e1c:	4835      	ldr	r0, [pc, #212]	; (8000ef4 <main+0x190>)
 8000e1e:	f001 fb51 	bl	80024c4 <MS5611_init>
 8000e22:	6038      	str	r0, [r7, #0]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <main+0xd2>
    flash(error);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fed0 	bl	8000bd4 <flash>
  while (1) {
 8000e34:	e7f1      	b.n	8000e1a <main+0xb6>
    if (error == 0) break;
 8000e36:	bf00      	nop
  }

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <main+0x194>)
 8000e3c:	f008 f91c 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e40:	2104      	movs	r1, #4
 8000e42:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <main+0x194>)
 8000e44:	f008 f918 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000e48:	2108      	movs	r1, #8
 8000e4a:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <main+0x194>)
 8000e4c:	f008 f914 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000e50:	210c      	movs	r1, #12
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <main+0x194>)
 8000e54:	f008 f910 	bl	8009078 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4828      	ldr	r0, [pc, #160]	; (8000efc <main+0x198>)
 8000e5c:	f008 f90c 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000e60:	2104      	movs	r1, #4
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <main+0x198>)
 8000e64:	f008 f908 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4824      	ldr	r0, [pc, #144]	; (8000efc <main+0x198>)
 8000e6c:	f008 f904 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000e70:	210c      	movs	r1, #12
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <main+0x198>)
 8000e74:	f008 f900 	bl	8009078 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <main+0x19c>)
 8000e7c:	f008 f8fc 	bl	8009078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000e80:	210c      	movs	r1, #12
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <main+0x19c>)
 8000e84:	f008 f8f8 	bl	8009078 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	481e      	ldr	r0, [pc, #120]	; (8000f04 <main+0x1a0>)
 8000e8c:	f007 ff84 	bl	8008d98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e90:	2104      	movs	r1, #4
 8000e92:	481c      	ldr	r0, [pc, #112]	; (8000f04 <main+0x1a0>)
 8000e94:	f007 ff80 	bl	8008d98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <main+0x1a0>)
 8000e9c:	f007 ff7c 	bl	8008d98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <main+0x1a0>)
 8000ea4:	f007 ff78 	bl	8008d98 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000ea8:	4817      	ldr	r0, [pc, #92]	; (8000f08 <main+0x1a4>)
 8000eaa:	f007 fe9b 	bl	8008be4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4916      	ldr	r1, [pc, #88]	; (8000f0c <main+0x1a8>)
 8000eb2:	4817      	ldr	r0, [pc, #92]	; (8000f10 <main+0x1ac>)
 8000eb4:	f009 fd66 	bl	800a984 <HAL_UART_Receive_IT>
 8000eb8:	e7f9      	b.n	8000eae <main+0x14a>
 8000eba:	bf00      	nop
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	24000348 	.word	0x24000348
 8000ec4:	240004e4 	.word	0x240004e4
 8000ec8:	24000680 	.word	0x24000680
 8000ecc:	2400081c 	.word	0x2400081c
 8000ed0:	240009b8 	.word	0x240009b8
 8000ed4:	24000b54 	.word	0x24000b54
 8000ed8:	240000a4 	.word	0x240000a4
 8000edc:	24001360 	.word	0x24001360
 8000ee0:	bfe66666 	.word	0xbfe66666
 8000ee4:	c08ccccd 	.word	0xc08ccccd
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	42480000 	.word	0x42480000
 8000ef0:	c3b90000 	.word	0xc3b90000
 8000ef4:	24001488 	.word	0x24001488
 8000ef8:	2400013c 	.word	0x2400013c
 8000efc:	24000188 	.word	0x24000188
 8000f00:	240001d4 	.word	0x240001d4
 8000f04:	240000f0 	.word	0x240000f0
 8000f08:	2400026c 	.word	0x2400026c
 8000f0c:	24001788 	.word	0x24001788
 8000f10:	240002b8 	.word	0x240002b8

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09c      	sub	sp, #112	; 0x70
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	224c      	movs	r2, #76	; 0x4c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00c f972 	bl	800d20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00c f96c 	bl	800d20c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f005 faa1 	bl	800647c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <SystemClock_Config+0xec>)
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <SystemClock_Config+0xec>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <SystemClock_Config+0xec>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <SystemClock_Config+0xf0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <SystemClock_Config+0xf0>)
 8000f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <SystemClock_Config+0xf0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f6c:	bf00      	nop
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SystemClock_Config+0xf0>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f7a:	d1f8      	bne.n	8000f6e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fa9c 	bl	80064f0 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fbe:	f000 fbc5 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	233f      	movs	r3, #63	; 0x3f
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 feaf 	bl	8006d4c <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ff4:	f000 fbaa 	bl	800174c <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3770      	adds	r7, #112	; 0x70
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58000400 	.word	0x58000400
 8001004:	58024800 	.word	0x58024800

08001008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_I2C1_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_I2C1_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_I2C1_Init+0x74>)
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <MX_I2C1_Init+0x7c>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_I2C1_Init+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_I2C1_Init+0x74>)
 8001044:	f004 fb14 	bl	8005670 <HAL_I2C_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 fb7d 	bl	800174c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <MX_I2C1_Init+0x74>)
 8001056:	f005 f979 	bl	800634c <HAL_I2CEx_ConfigAnalogFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 fb74 	bl	800174c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_I2C1_Init+0x74>)
 8001068:	f005 f9bb 	bl	80063e2 <HAL_I2CEx_ConfigDigitalFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fb6b 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240000a4 	.word	0x240000a4
 8001080:	40005400 	.word	0x40005400
 8001084:	10c0ecff 	.word	0x10c0ecff

08001088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010c4:	2214      	movs	r2, #20
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010d0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4834      	ldr	r0, [pc, #208]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80010e4:	f007 fd26 	bl	8008b34 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 fb2d 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	4619      	mov	r1, r3
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <MX_TIM2_Init+0x12c>)
 8001100:	f008 fbda 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800110a:	f000 fb1f 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800110e:	4829      	ldr	r0, [pc, #164]	; (80011b4 <MX_TIM2_Init+0x12c>)
 8001110:	f007 fde0 	bl	8008cd4 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800111a:	f000 fb17 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_TIM2_Init+0x12c>)
 800112e:	f009 fa85 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 fb08 	bl	800174c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x12c>)
 8001154:	f008 fa9c 	bl	8009690 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800115e:	f000 faf5 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_TIM2_Init+0x12c>)
 800116a:	f008 fa91 	bl	8009690 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001174:	f000 faea 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2208      	movs	r2, #8
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM2_Init+0x12c>)
 8001180:	f008 fa86 	bl	8009690 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800118a:	f000 fadf 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	220c      	movs	r2, #12
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM2_Init+0x12c>)
 8001196:	f008 fa7b 	bl	8009690 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80011a0:	f000 fad4 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM2_Init+0x12c>)
 80011a6:	f001 fdd9 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3738      	adds	r7, #56	; 0x38
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240000f0 	.word	0x240000f0

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MX_TIM3_Init+0x120>)
 80011e6:	4a3d      	ldr	r2, [pc, #244]	; (80012dc <MX_TIM3_Init+0x124>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_TIM3_Init+0x120>)
 80011ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <MX_TIM3_Init+0x120>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MX_TIM3_Init+0x120>)
 80011fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <MX_TIM3_Init+0x120>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <MX_TIM3_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800120c:	4832      	ldr	r0, [pc, #200]	; (80012d8 <MX_TIM3_Init+0x120>)
 800120e:	f007 fc91 	bl	8008b34 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001218:	f000 fa98 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	4619      	mov	r1, r3
 8001228:	482b      	ldr	r0, [pc, #172]	; (80012d8 <MX_TIM3_Init+0x120>)
 800122a:	f008 fb45 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001234:	f000 fa8a 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_TIM3_Init+0x120>)
 800123a:	f007 febb 	bl	8008fb4 <HAL_TIM_IC_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 fa82 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <MX_TIM3_Init+0x120>)
 8001258:	f009 f9f0 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001262:	f000 fa73 	bl	800174c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001266:	230a      	movs	r3, #10
 8001268:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_TIM3_Init+0x120>)
 800127e:	f008 f96a 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001288:	f000 fa60 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2204      	movs	r2, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_TIM3_Init+0x120>)
 8001294:	f008 f95f 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800129e:	f000 fa55 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_TIM3_Init+0x120>)
 80012aa:	f008 f954 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80012b4:	f000 fa4a 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	220c      	movs	r2, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM3_Init+0x120>)
 80012c0:	f008 f949 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80012ca:	f000 fa3f 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	; 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2400013c 	.word	0x2400013c
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <MX_TIM4_Init+0x120>)
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <MX_TIM4_Init+0x124>)
 8001310:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <MX_TIM4_Init+0x120>)
 8001314:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001318:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <MX_TIM4_Init+0x120>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <MX_TIM4_Init+0x120>)
 8001322:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001326:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <MX_TIM4_Init+0x120>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <MX_TIM4_Init+0x120>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <MX_TIM4_Init+0x120>)
 8001336:	f007 fbfd 	bl	8008b34 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001340:	f000 fa04 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	482b      	ldr	r0, [pc, #172]	; (8001400 <MX_TIM4_Init+0x120>)
 8001352:	f008 fab1 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800135c:	f000 f9f6 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001360:	4827      	ldr	r0, [pc, #156]	; (8001400 <MX_TIM4_Init+0x120>)
 8001362:	f007 fe27 	bl	8008fb4 <HAL_TIM_IC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800136c:	f000 f9ee 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4820      	ldr	r0, [pc, #128]	; (8001400 <MX_TIM4_Init+0x120>)
 8001380:	f009 f95c 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800138a:	f000 f9df 	bl	800174c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800138e:	230a      	movs	r3, #10
 8001390:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <MX_TIM4_Init+0x120>)
 80013a6:	f008 f8d6 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80013b0:	f000 f9cc 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2204      	movs	r2, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <MX_TIM4_Init+0x120>)
 80013bc:	f008 f8cb 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80013c6:	f000 f9c1 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2208      	movs	r2, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_TIM4_Init+0x120>)
 80013d2:	f008 f8c0 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80013dc:	f000 f9b6 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	220c      	movs	r2, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_TIM4_Init+0x120>)
 80013e8:	f008 f8b5 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80013f2:	f000 f9ab 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	; 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000188 	.word	0x24000188
 8001404:	40000800 	.word	0x40000800

08001408 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <MX_TIM5_Init+0x108>)
 8001436:	4a37      	ldr	r2, [pc, #220]	; (8001514 <MX_TIM5_Init+0x10c>)
 8001438:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <MX_TIM5_Init+0x108>)
 800143c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001440:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <MX_TIM5_Init+0x108>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_TIM5_Init+0x108>)
 800144a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800144e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <MX_TIM5_Init+0x108>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_TIM5_Init+0x108>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800145c:	482c      	ldr	r0, [pc, #176]	; (8001510 <MX_TIM5_Init+0x108>)
 800145e:	f007 fb69 	bl	8008b34 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001468:	f000 f970 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	4825      	ldr	r0, [pc, #148]	; (8001510 <MX_TIM5_Init+0x108>)
 800147a:	f008 fa1d 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001484:	f000 f962 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_TIM5_Init+0x108>)
 800148a:	f007 fd93 	bl	8008fb4 <HAL_TIM_IC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 f95a 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	481a      	ldr	r0, [pc, #104]	; (8001510 <MX_TIM5_Init+0x108>)
 80014a8:	f009 f8c8 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80014b2:	f000 f94b 	bl	800174c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014b6:	230a      	movs	r3, #10
 80014b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_TIM5_Init+0x108>)
 80014ce:	f008 f842 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80014d8:	f000 f938 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2208      	movs	r2, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <MX_TIM5_Init+0x108>)
 80014e4:	f008 f837 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80014ee:	f000 f92d 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	220c      	movs	r2, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_TIM5_Init+0x108>)
 80014fa:	f008 f82c 	bl	8009556 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 8001504:	f000 f922 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	240001d4 	.word	0x240001d4
 8001514:	40000c00 	.word	0x40000c00

08001518 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_TIM6_Init+0x64>)
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_TIM6_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_TIM6_Init+0x64>)
 8001530:	2264      	movs	r2, #100	; 0x64
 8001532:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_TIM6_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_TIM6_Init+0x64>)
 800153c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001540:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM6_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM6_Init+0x64>)
 800154a:	f007 faf3 	bl	8008b34 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001554:	f000 f8fa 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM6_Init+0x64>)
 8001566:	f009 f869 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001570:	f000 f8ec 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000220 	.word	0x24000220
 8001580:	40001000 	.word	0x40001000

08001584 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_TIM7_Init+0x64>)
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <MX_TIM7_Init+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_TIM7_Init+0x64>)
 800159c:	2264      	movs	r2, #100	; 0x64
 800159e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_TIM7_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2500;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_TIM7_Init+0x64>)
 80015a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_TIM7_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_TIM7_Init+0x64>)
 80015b6:	f007 fabd 	bl	8008b34 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015c0:	f000 f8c4 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM7_Init+0x64>)
 80015d2:	f009 f833 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f000 f8b6 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2400026c 	.word	0x2400026c
 80015ec:	40001400 	.word	0x40001400

080015f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_USART1_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <MX_USART1_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_USART1_UART_Init+0x90>)
 80015fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800163a:	f009 f8ab 	bl	800a794 <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 f882 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800164c:	f00b fce9 	bl	800d022 <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 f879 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800165e:	f00b fd1e 	bl	800d09e <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 f870 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800166e:	f00b fc9f 	bl	800cfb0 <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 f868 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	240002b8 	.word	0x240002b8
 8001684:	40011000 	.word	0x40011000

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_GPIO_Init+0xbc>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <MX_GPIO_Init+0xbc>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_GPIO_Init+0xbc>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2102      	movs	r1, #2
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0xc0>)
 800171c:	f003 ff74 	bl	8005608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001720:	2302      	movs	r3, #2
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0xc0>)
 8001738:	f003 fd9e 	bl	8005278 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024400 	.word	0x58024400
 8001748:	58020000 	.word	0x58020000

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001758:	b580      	push	{r7, lr}
 800175a:	ed2d 8b04 	vpush	{d8-d9}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gx / FREQ;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001770:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001ac0 <calc_angles+0x368>
 8001774:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_angle[Y] += -mpu6050->gy / FREQ; // Change sign to match the accelerometer's one
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a07 	vldr	s15, [r3, #28]
 800178e:	eef1 6a67 	vneg.f32	s13, s15
 8001792:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001ac0 <calc_angles+0x368>
 8001796:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800179a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017aa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80017b4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80017be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c2:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001a98 <calc_angles+0x340>
 80017c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ca:	eeb0 0b47 	vmov.f64	d0, d7
 80017ce:	f00c fc1b 	bl	800e008 <sin>
 80017d2:	eeb0 7b40 	vmov.f64	d7, d0
 80017d6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80017da:	ee38 7b07 	vadd.f64	d7, d8, d7
 80017de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80017ee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001806:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001a98 <calc_angles+0x340>
 800180a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	f00c fbf9 	bl	800e008 <sin>
 8001816:	eeb0 7b40 	vmov.f64	d7, d0
 800181a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800181e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001822:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001836:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800183a:	eeb0 0b47 	vmov.f64	d0, d7
 800183e:	f00c f98f 	bl	800db60 <pow>
 8001842:	eeb0 8b40 	vmov.f64	d8, d0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edd3 7a03 	vldr	s15, [r3, #12]
 800184c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001850:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001854:	eeb0 0b47 	vmov.f64	d0, d7
 8001858:	f00c f982 	bl	800db60 <pow>
 800185c:	eeb0 7b40 	vmov.f64	d7, d0
 8001860:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edd3 7a04 	vldr	s15, [r3, #16]
 800186a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800186e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001872:	eeb0 0b47 	vmov.f64	d0, d7
 8001876:	f00c f973 	bl	800db60 <pow>
 800187a:	eeb0 7b40 	vmov.f64	d7, d0
 800187e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001882:	eeb0 0b47 	vmov.f64	d0, d7
 8001886:	f00c fdaf 	bl	800e3e8 <sqrt>
 800188a:	eeb0 7b40 	vmov.f64	d7, d0
 800188e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001892:	ee17 2a90 	vmov	r2, s15
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	66da      	str	r2, [r3, #108]	; 0x6c

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 3a90 	vmov	r3, s15
 80018a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b4:	429a      	cmp	r2, r3
 80018b6:	da1b      	bge.n	80018f0 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d2:	eeb0 0b47 	vmov.f64	d0, d7
 80018d6:	f00c fd5b 	bl	800e390 <asin>
 80018da:	eeb0 7b40 	vmov.f64	d7, d0
 80018de:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001aa0 <calc_angles+0x348>
 80018e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001902:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800190a:	429a      	cmp	r2, r3
 800190c:	da1b      	bge.n	8001946 <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edd3 6a02 	vldr	s13, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001928:	eeb0 0b47 	vmov.f64	d0, d7
 800192c:	f00c fd30 	bl	800e390 <asin>
 8001930:	eeb0 7b40 	vmov.f64	d7, d0
 8001934:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001aa0 <calc_angles+0x348>
 8001938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800193c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  }

  if (mpu6050->initialized == 1) {
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800194c:	2b01      	cmp	r3, #1
 800194e:	d132      	bne.n	80019b6 <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001956:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800195a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800195e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800196c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001970:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001974:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800198c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001990:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800199a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800199e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80019a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80019b4:	e00b      	b.n	80019ce <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	649a      	str	r2, [r3, #72]	; 0x48
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	64da      	str	r2, [r3, #76]	; 0x4c

    mpu6050->initialized = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80019d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001aa8 <calc_angles+0x350>
 80019dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80019e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ea:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001ab0 <calc_angles+0x358>
 80019ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001a06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a0a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001aa8 <calc_angles+0x350>
 8001a0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a1c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001ab0 <calc_angles+0x358>
 8001a20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  mpu6050->measures[YAW] = -mpu6050->gz; // Store the angular motion for this axis
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a38:	eef1 7a67 	vneg.f32	s15, s15
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001a48:	eef1 7a67 	vneg.f32	s15, s15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001a58:	eef1 7a67 	vneg.f32	s15, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001a72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a76:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001ab8 <calc_angles+0x360>
 8001a7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	ecbd 8b04 	vpop	{d8-d9}
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	695f8190 	.word	0x695f8190
 8001a9c:	3f16e05a 	.word	0x3f16e05a
 8001aa0:	1a63c1f8 	.word	0x1a63c1f8
 8001aa4:	404ca5dc 	.word	0x404ca5dc
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	3feccccc 	.word	0x3feccccc
 8001ab0:	9999999a 	.word	0x9999999a
 8001ab4:	3fb99999 	.word	0x3fb99999
 8001ab8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001abc:	3f50624d 	.word	0x3f50624d
 8001ac0:	43480000 	.word	0x43480000

08001ac4 <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	22d0      	movs	r2, #208	; 0xd0
 8001ae4:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e00a      	b.n	8001b02 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 f951 	bl	8005d98 <HAL_I2C_GetState>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d006      	beq.n	8001b0a <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3301      	adds	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	ddf1      	ble.n	8001aec <MPU6050_init+0x28>
 8001b08:	e000      	b.n	8001b0c <MPU6050_init+0x48>
      break;
 8001b0a:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	dd01      	ble.n	8001b16 <MPU6050_init+0x52>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1bf      	b.n	8001e96 <MPU6050_init+0x3d2>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001b16:	2375      	movs	r3, #117	; 0x75
 8001b18:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e011      	b.n	8001b44 <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	f107 021b 	add.w	r2, r7, #27
 8001b2e:	2364      	movs	r3, #100	; 0x64
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2301      	movs	r3, #1
 8001b34:	f003 fe2c 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	ddea      	ble.n	8001b20 <MPU6050_init+0x5c>
 8001b4a:	e000      	b.n	8001b4e <MPU6050_init+0x8a>
      break;
 8001b4c:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	dd01      	ble.n	8001b58 <MPU6050_init+0x94>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19e      	b.n	8001e96 <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	e011      	b.n	8001b82 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	b299      	uxth	r1, r3
 8001b68:	f107 021a 	add.w	r2, r7, #26
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	f003 ff01 	bl	8005978 <HAL_I2C_Master_Receive>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	ddea      	ble.n	8001b5e <MPU6050_init+0x9a>
 8001b88:	e000      	b.n	8001b8c <MPU6050_init+0xc8>
      break;
 8001b8a:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	dd01      	ble.n	8001b96 <MPU6050_init+0xd2>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e17f      	b.n	8001e96 <MPU6050_init+0x3d2>

  if (whoiam_res != 0x68) return 5;
 8001b96:	7ebb      	ldrb	r3, [r7, #26]
 8001b98:	2b68      	cmp	r3, #104	; 0x68
 8001b9a:	d001      	beq.n	8001ba0 <MPU6050_init+0xdc>
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	e17a      	b.n	8001e96 <MPU6050_init+0x3d2>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001ba0:	236b      	movs	r3, #107	; 0x6b
 8001ba2:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e011      	b.n	8001bce <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	f107 0218 	add.w	r2, r7, #24
 8001bb8:	2364      	movs	r3, #100	; 0x64
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f003 fde7 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	ddea      	ble.n	8001baa <MPU6050_init+0xe6>
 8001bd4:	e000      	b.n	8001bd8 <MPU6050_init+0x114>
      break;
 8001bd6:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	dd01      	ble.n	8001be2 <MPU6050_init+0x11e>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e159      	b.n	8001e96 <MPU6050_init+0x3d2>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001be2:	2319      	movs	r3, #25
 8001be4:	753b      	strb	r3, [r7, #20]
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e011      	b.n	8001c14 <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	791b      	ldrb	r3, [r3, #4]
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 0214 	add.w	r2, r7, #20
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	f003 fdc4 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	ddea      	ble.n	8001bf0 <MPU6050_init+0x12c>
 8001c1a:	e000      	b.n	8001c1e <MPU6050_init+0x15a>
      break;
 8001c1c:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	dd01      	ble.n	8001c28 <MPU6050_init+0x164>
 8001c24:	2307      	movs	r3, #7
 8001c26:	e136      	b.n	8001e96 <MPU6050_init+0x3d2>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001c28:	231c      	movs	r3, #28
 8001c2a:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	e011      	b.n	8001c56 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	b299      	uxth	r1, r3
 8001c3c:	f107 0213 	add.w	r2, r7, #19
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	f003 fda3 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	ddea      	ble.n	8001c32 <MPU6050_init+0x16e>
 8001c5c:	e000      	b.n	8001c60 <MPU6050_init+0x19c>
      break;
 8001c5e:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	dd01      	ble.n	8001c6a <MPU6050_init+0x1a6>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e115      	b.n	8001e96 <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e011      	b.n	8001c94 <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	f107 0213 	add.w	r2, r7, #19
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	f003 fe78 	bl	8005978 <HAL_I2C_Master_Receive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	ddea      	ble.n	8001c70 <MPU6050_init+0x1ac>
 8001c9a:	e000      	b.n	8001c9e <MPU6050_init+0x1da>
      break;
 8001c9c:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	dd01      	ble.n	8001ca8 <MPU6050_init+0x1e4>
 8001ca4:	2309      	movs	r3, #9
 8001ca6:	e0f6      	b.n	8001e96 <MPU6050_init+0x3d2>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	f023 0318 	bic.w	r3, r3, #24
 8001cb0:	b25a      	sxtb	r2, r3
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	e011      	b.n	8001cea <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	b299      	uxth	r1, r3
 8001cd0:	f107 0213 	add.w	r2, r7, #19
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f003 fd59 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	ddea      	ble.n	8001cc6 <MPU6050_init+0x202>
 8001cf0:	e000      	b.n	8001cf4 <MPU6050_init+0x230>
      break;
 8001cf2:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	dd01      	ble.n	8001cfe <MPU6050_init+0x23a>
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	e0cb      	b.n	8001e96 <MPU6050_init+0x3d2>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001cfe:	231b      	movs	r3, #27
 8001d00:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e011      	b.n	8001d2c <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	b299      	uxth	r1, r3
 8001d12:	f107 0212 	add.w	r2, r7, #18
 8001d16:	2364      	movs	r3, #100	; 0x64
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f003 fd38 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	ddea      	ble.n	8001d08 <MPU6050_init+0x244>
 8001d32:	e000      	b.n	8001d36 <MPU6050_init+0x272>
      break;
 8001d34:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	dd01      	ble.n	8001d40 <MPU6050_init+0x27c>
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	e0aa      	b.n	8001e96 <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	e011      	b.n	8001d6a <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	791b      	ldrb	r3, [r3, #4]
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	f107 0212 	add.w	r2, r7, #18
 8001d54:	2364      	movs	r3, #100	; 0x64
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f003 fe0d 	bl	8005978 <HAL_I2C_Master_Receive>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	ddea      	ble.n	8001d46 <MPU6050_init+0x282>
 8001d70:	e000      	b.n	8001d74 <MPU6050_init+0x2b0>
      break;
 8001d72:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	dd01      	ble.n	8001d7e <MPU6050_init+0x2ba>
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	e08b      	b.n	8001e96 <MPU6050_init+0x3d2>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001d7e:	7cfb      	ldrb	r3, [r7, #19]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	f023 0318 	bic.w	r3, r3, #24
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	e011      	b.n	8001dc2 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	b299      	uxth	r1, r3
 8001da8:	f107 0212 	add.w	r2, r7, #18
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2301      	movs	r3, #1
 8001db2:	f003 fced 	bl	8005790 <HAL_I2C_Master_Transmit>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	ddea      	ble.n	8001d9e <MPU6050_init+0x2da>
 8001dc8:	e000      	b.n	8001dcc <MPU6050_init+0x308>
      break;
 8001dca:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	dd01      	ble.n	8001dd6 <MPU6050_init+0x312>
 8001dd2:	230d      	movs	r3, #13
 8001dd4:	e05f      	b.n	8001e96 <MPU6050_init+0x3d2>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3374      	adds	r3, #116	; 0x74
 8001dda:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001ea0 <MPU6050_init+0x3dc>
 8001dde:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001de2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fe10 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	338c      	adds	r3, #140	; 0x8c
 8001df0:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001ea0 <MPU6050_init+0x3dc>
 8001df4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001df8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fe05 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	33a4      	adds	r3, #164	; 0xa4
 8001e06:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001ea0 <MPU6050_init+0x3dc>
 8001e0a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e0e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fdfa 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 0.1); // Gyro x
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	33bc      	adds	r3, #188	; 0xbc
 8001e1c:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001ea0 <MPU6050_init+0x3dc>
 8001e20:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e24:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fdef 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 0.1); // Gyro Y
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	33d4      	adds	r3, #212	; 0xd4
 8001e32:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001ea0 <MPU6050_init+0x3dc>
 8001e36:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e3a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fde4 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 0.1); // Gyro z
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	33ec      	adds	r3, #236	; 0xec
 8001e48:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001ea0 <MPU6050_init+0x3dc>
 8001e4c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e50:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fdd9 	bl	8000a0c <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3348      	adds	r3, #72	; 0x48
 8001e5e:	220c      	movs	r2, #12
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00b f9d2 	bl	800d20c <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3354      	adds	r3, #84	; 0x54
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00b f9cb 	bl	800d20c <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3360      	adds	r3, #96	; 0x60
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00b f9c4 	bl	800d20c <memset>
  mpu6050->initialized = 0;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  mpu6050->angle_z = 0;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	3dcccccd 	.word	0x3dcccccd

08001ea4 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	61f8      	str	r0, [r7, #28]
 8001eac:	ed87 0a06 	vstr	s0, [r7, #24]
 8001eb0:	edc7 0a05 	vstr	s1, [r7, #20]
 8001eb4:	ed87 1a04 	vstr	s2, [r7, #16]
 8001eb8:	edc7 1a03 	vstr	s3, [r7, #12]
 8001ebc:	ed87 2a02 	vstr	s4, [r7, #8]
 8001ec0:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af04      	add	r7, sp, #16
 8001efa:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	b299      	uxth	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001f0c:	220a      	movs	r2, #10
 8001f0e:	9202      	str	r2, [sp, #8]
 8001f10:	220e      	movs	r2, #14
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2301      	movs	r3, #1
 8001f18:	223b      	movs	r2, #59	; 0x3b
 8001f1a:	f003 fe23 	bl	8005b64 <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f804 	bl	8001f2c <MPU6050_parse_6axis>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc2:	eddf 6a73 	vldr	s13, [pc, #460]	; 8002190 <MPU6050_parse_6axis+0x264>
 8001fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fca:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002194 <MPU6050_parse_6axis+0x268>
 8001fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	425b      	negs	r3, r3
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	425b      	negs	r3, r3
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gx = mpu6050->gx / SSF_GYRO;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	ed93 7a06 	vldr	s14, [r3, #24]
 800204e:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002198 <MPU6050_parse_6axis+0x26c>
 8002052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy / SSF_GYRO;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002062:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002198 <MPU6050_parse_6axis+0x26c>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz / SSF_GYRO;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	ed93 7a08 	vldr	s14, [r3, #32]
 8002076:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002198 <MPU6050_parse_6axis+0x26c>
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax) + mpu6050->ax_offset;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002090:	eeb0 0a67 	vmov.f32	s0, s15
 8002094:	4610      	mov	r0, r2
 8002096:	f7fe fcd2 	bl	8000a3e <kalman_filter_update>
 800209a:	eeb0 7a40 	vmov.f32	s14, s0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay) + mpu6050->ay_offset;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	4610      	mov	r0, r2
 80020c0:	f7fe fcbd 	bl	8000a3e <kalman_filter_update>
 80020c4:	eeb0 7a40 	vmov.f32	s14, s0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az) + mpu6050->az_offset;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	4610      	mov	r0, r2
 80020ea:	f7fe fca8 	bl	8000a3e <kalman_filter_update>
 80020ee:	eeb0 7a40 	vmov.f32	s14, s0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edc3 7a04 	vstr	s15, [r3, #16]
  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx) + mpu6050->gx_offset;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edd3 7a06 	vldr	s15, [r3, #24]
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	4610      	mov	r0, r2
 8002114:	f7fe fc93 	bl	8000a3e <kalman_filter_update>
 8002118:	eeb0 7a40 	vmov.f32	s14, s0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy) + mpu6050->gy_offset;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 7a07 	vldr	s15, [r3, #28]
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	4610      	mov	r0, r2
 800213e:	f7fe fc7e 	bl	8000a3e <kalman_filter_update>
 8002142:	eeb0 7a40 	vmov.f32	s14, s0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz) + mpu6050->gz_offset;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	4610      	mov	r0, r2
 8002168:	f7fe fc69 	bl	8000a3e <kalman_filter_update>
 800216c:	eeb0 7a40 	vmov.f32	s14, s0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edc3 7a08 	vstr	s15, [r3, #32]

  calc_angles(mpu6050);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fae9 	bl	8001758 <calc_angles>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	43aa0000 	.word	0x43aa0000
 8002194:	42121eb8 	.word	0x42121eb8
 8002198:	42830000 	.word	0x42830000

0800219c <limit>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

float limit(float number, float min, float max) {
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80021a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80021aa:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 80021ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d501      	bpl.n	80021c4 <limit+0x28>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	e00b      	b.n	80021dc <limit+0x40>
 80021c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	dd01      	ble.n	80021da <limit+0x3e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	e000      	b.n	80021dc <limit+0x40>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	ee07 3a90 	vmov	s15, r3
}
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_reset>:

void _reset(ms5611_t *ms5611) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	221e      	movs	r2, #30
 80021fa:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f103 0216 	add.w	r2, r3, #22
 8002206:	2364      	movs	r3, #100	; 0x64
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2301      	movs	r3, #1
 800220c:	21ee      	movs	r1, #238	; 0xee
 800220e:	f003 fabf 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8002212:	200a      	movs	r0, #10
 8002214:	f002 f98c 	bl	8004530 <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  ms5611->OFF2 = 0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  ms5611->SENS2 = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  average_filter_init(&ms5611->af, 20);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	334c      	adds	r3, #76	; 0x4c
 8002234:	2114      	movs	r1, #20
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fc62 	bl	8000b00 <average_filter_init>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af02      	add	r7, sp, #8
 800224a:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	22a0      	movs	r2, #160	; 0xa0
 8002250:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 0216 	add.w	r2, r3, #22
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	21ee      	movs	r1, #238	; 0xee
 8002264:	f003 fa94 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	2364      	movs	r3, #100	; 0x64
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2302      	movs	r3, #2
 8002276:	21ee      	movs	r1, #238	; 0xee
 8002278:	f003 fb7e 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b21a      	sxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	795b      	ldrb	r3, [r3, #5]
 8002288:	b21b      	sxth	r3, r3
 800228a:	4313      	orrs	r3, r2
 800228c:	b21b      	sxth	r3, r3
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 8002294:	200a      	movs	r0, #10
 8002296:	f002 f94b 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	22a2      	movs	r2, #162	; 0xa2
 800229e:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0216 	add.w	r2, r3, #22
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	21ee      	movs	r1, #238	; 0xee
 80022b2:	f003 fa6d 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1d1a      	adds	r2, r3, #4
 80022be:	2364      	movs	r3, #100	; 0x64
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2302      	movs	r3, #2
 80022c4:	21ee      	movs	r1, #238	; 0xee
 80022c6:	f003 fb57 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	795b      	ldrb	r3, [r3, #5]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21b      	sxth	r3, r3
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 80022e2:	200a      	movs	r0, #10
 80022e4:	f002 f924 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	22a4      	movs	r2, #164	; 0xa4
 80022ec:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 0216 	add.w	r2, r3, #22
 80022f8:	2364      	movs	r3, #100	; 0x64
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	21ee      	movs	r1, #238	; 0xee
 8002300:	f003 fa46 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	2364      	movs	r3, #100	; 0x64
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2302      	movs	r3, #2
 8002312:	21ee      	movs	r1, #238	; 0xee
 8002314:	f003 fb30 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	791b      	ldrb	r3, [r3, #4]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	795b      	ldrb	r3, [r3, #5]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 8002330:	200a      	movs	r0, #10
 8002332:	f002 f8fd 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	22a6      	movs	r2, #166	; 0xa6
 800233a:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0216 	add.w	r2, r3, #22
 8002346:	2364      	movs	r3, #100	; 0x64
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2301      	movs	r3, #1
 800234c:	21ee      	movs	r1, #238	; 0xee
 800234e:	f003 fa1f 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1d1a      	adds	r2, r3, #4
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2302      	movs	r3, #2
 8002360:	21ee      	movs	r1, #238	; 0xee
 8002362:	f003 fb09 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	791b      	ldrb	r3, [r3, #4]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b21a      	sxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	795b      	ldrb	r3, [r3, #5]
 8002372:	b21b      	sxth	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b21b      	sxth	r3, r3
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 800237e:	200a      	movs	r0, #10
 8002380:	f002 f8d6 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	22a8      	movs	r2, #168	; 0xa8
 8002388:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f103 0216 	add.w	r2, r3, #22
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	21ee      	movs	r1, #238	; 0xee
 800239c:	f003 f9f8 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2302      	movs	r3, #2
 80023ae:	21ee      	movs	r1, #238	; 0xee
 80023b0:	f003 fae2 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	795b      	ldrb	r3, [r3, #5]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 80023cc:	200a      	movs	r0, #10
 80023ce:	f002 f8af 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	22aa      	movs	r2, #170	; 0xaa
 80023d6:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0216 	add.w	r2, r3, #22
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	21ee      	movs	r1, #238	; 0xee
 80023ea:	f003 f9d1 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1d1a      	adds	r2, r3, #4
 80023f6:	2364      	movs	r3, #100	; 0x64
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2302      	movs	r3, #2
 80023fc:	21ee      	movs	r1, #238	; 0xee
 80023fe:	f003 fabb 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b21a      	sxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	795b      	ldrb	r3, [r3, #5]
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 800241a:	200a      	movs	r0, #10
 800241c:	f002 f888 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	22ac      	movs	r2, #172	; 0xac
 8002424:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 0216 	add.w	r2, r3, #22
 8002430:	2364      	movs	r3, #100	; 0x64
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	21ee      	movs	r1, #238	; 0xee
 8002438:	f003 f9aa 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	2364      	movs	r3, #100	; 0x64
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2302      	movs	r3, #2
 800244a:	21ee      	movs	r1, #238	; 0xee
 800244c:	f003 fa94 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	795b      	ldrb	r3, [r3, #5]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 8002468:	200a      	movs	r0, #10
 800246a:	f002 f861 	bl	8004530 <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	22ae      	movs	r2, #174	; 0xae
 8002472:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 0216 	add.w	r2, r3, #22
 800247e:	2364      	movs	r3, #100	; 0x64
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	21ee      	movs	r1, #238	; 0xee
 8002486:	f003 f983 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2302      	movs	r3, #2
 8002498:	21ee      	movs	r1, #238	; 0xee
 800249a:	f003 fa6d 	bl	8005978 <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 80024b6:	200a      	movs	r0, #10
 80024b8:	f002 f83a 	bl	8004530 <HAL_Delay>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fe8a 	bl	80021ee <_reset>
  _read_PROM(ms5611);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff feb2 	bl	8002244 <_read_PROM>

  return 0;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	3328      	adds	r3, #40	; 0x28
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f103 0216 	add.w	r2, r3, #22
 800250e:	2364      	movs	r3, #100	; 0x64
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	21ee      	movs	r1, #238	; 0xee
 8002516:	f003 f93b 	bl	8005790 <HAL_I2C_Master_Transmit>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	3320      	adds	r3, #32
 8002532:	b2db      	uxtb	r3, r3
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	b2da      	uxtb	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0216 	add.w	r2, r3, #22
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	21ee      	movs	r1, #238	; 0xee
 800254e:	f003 f91f 	bl	8005790 <HAL_I2C_Master_Transmit>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af02      	add	r7, sp, #8
 8002560:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0216 	add.w	r2, r3, #22
 8002572:	2364      	movs	r3, #100	; 0x64
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	21ee      	movs	r1, #238	; 0xee
 800257a:	f003 f909 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0210 	add.w	r2, r3, #16
 8002588:	2364      	movs	r3, #100	; 0x64
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2303      	movs	r3, #3
 800258e:	21ef      	movs	r1, #239	; 0xef
 8002590:	f003 f9f2 	bl	8005978 <HAL_I2C_Master_Receive>
//  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3, 100);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7c1b      	ldrb	r3, [r3, #16]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7c5b      	ldrb	r3, [r3, #17]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	4313      	orrs	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	7c92      	ldrb	r2, [r2, #18]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0216 	add.w	r2, r3, #22
 80025ce:	2364      	movs	r3, #100	; 0x64
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	21ee      	movs	r1, #238	; 0xee
 80025d6:	f003 f8db 	bl	8005790 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f103 0213 	add.w	r2, r3, #19
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2303      	movs	r3, #3
 80025ea:	21ef      	movs	r1, #239	; 0xef
 80025ec:	f003 f9c4 	bl	8005978 <HAL_I2C_Master_Receive>
  //HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1, 0x00, 1, ms5611->rx_press, 3, 100);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7cdb      	ldrb	r3, [r3, #19]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7d1b      	ldrb	r3, [r3, #20]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	4313      	orrs	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	7d52      	ldrb	r2, [r2, #21]
 8002602:	4313      	orrs	r3, r2
 8002604:	461a      	mov	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	021a      	lsls	r2, r3, #8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	425a      	negs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4413      	add	r3, r2
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002652:	fb03 f202 	mul.w	r2, r3, r2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	15da      	asrs	r2, r3, #23
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	0000      	movs	r0, r0
	...

08002680 <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 8002680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002684:	ed2d 8b02 	vpush	{d8}
 8002688:	b08c      	sub	sp, #48	; 0x30
 800268a:	af00      	add	r7, sp, #0
 800268c:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	8b9b      	ldrh	r3, [r3, #28]
 8002692:	b29b      	uxth	r3, r3
 8002694:	2200      	movs	r2, #0
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	61fa      	str	r2, [r7, #28]
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80026a0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0419      	lsls	r1, r3, #16
 80026b4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80026b8:	0410      	lsls	r0, r2, #16
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	8c1b      	ldrh	r3, [r3, #32]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	11db      	asrs	r3, r3, #7
 80026d6:	17da      	asrs	r2, r3, #31
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	627a      	str	r2, [r7, #36]	; 0x24
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	18c3      	adds	r3, r0, r3
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	eb41 0303 	adc.w	r3, r1, r3
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80026f0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	8b5b      	ldrh	r3, [r3, #26]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2200      	movs	r2, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002706:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	03cb      	lsls	r3, r1, #15
 800271a:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 800271e:	03c2      	lsls	r2, r0, #15
 8002720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002722:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800272c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800272e:	8bc9      	ldrh	r1, [r1, #30]
 8002730:	4608      	mov	r0, r1
 8002732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002734:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002736:	fb00 f101 	mul.w	r1, r0, r1
 800273a:	1209      	asrs	r1, r1, #8
 800273c:	17c8      	asrs	r0, r1, #31
 800273e:	468a      	mov	sl, r1
 8002740:	4683      	mov	fp, r0
 8002742:	eb12 010a 	adds.w	r1, r2, sl
 8002746:	6039      	str	r1, [r7, #0]
 8002748:	eb43 030b 	adc.w	r3, r3, fp
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002754:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	2200      	movs	r2, #0
 800275e:	4698      	mov	r8, r3
 8002760:	4691      	mov	r9, r2
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002768:	fb02 f009 	mul.w	r0, r2, r9
 800276c:	fb08 f103 	mul.w	r1, r8, r3
 8002770:	4401      	add	r1, r0
 8002772:	fba8 4502 	umull	r4, r5, r8, r2
 8002776:	194b      	adds	r3, r1, r5
 8002778:	461d      	mov	r5, r3
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd ff95 	bl	80006ac <__aeabi_l2d>
 8002782:	ec41 0b16 	vmov	d6, r0, r1
 8002786:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80027c8 <MS5611_calc_pressure+0x148>
 800278a:	ee86 8b07 	vdiv.f64	d8, d6, d7
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fd ff88 	bl	80006ac <__aeabi_l2d>
 800279c:	ec41 0b17 	vmov	d7, r0, r1
 80027a0:	ee38 6b47 	vsub.f64	d6, d8, d7
 80027a4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80027d0 <MS5611_calc_pressure+0x150>
 80027a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80027b0:	ee17 2a90 	vmov	r2, s15
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80027b8:	bf00      	nop
 80027ba:	3730      	adds	r7, #48	; 0x30
 80027bc:	46bd      	mov	sp, r7
 80027be:	ecbd 8b02 	vpop	{d8}
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	00000000 	.word	0x00000000
 80027cc:	41400000 	.word	0x41400000
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40e00000 	.word	0x40e00000

080027d8 <MS5611_calc_altitude>:

#define SEA_PRESSURE 1013.25f
void MS5611_calc_altitude(ms5611_t *ms5611) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  float temperature = (float)ms5611->TEMP/100.f;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ec:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002950 <MS5611_calc_altitude+0x178>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	edc7 7a05 	vstr	s15, [r7, #20]
  float pressure = (float)ms5611->P/100.f;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002804:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002950 <MS5611_calc_altitude+0x178>
 8002808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280c:	edc7 7a04 	vstr	s15, [r7, #16]

  // Apply average filter for altitude
  ms5611->fast_pressure = average_filter_update(&ms5611->af, pressure);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	334c      	adds	r3, #76	; 0x4c
 8002814:	ed97 0a04 	vldr	s0, [r7, #16]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe f98f 	bl	8000b3c <average_filter_update>
 800281e:	eef0 7a40 	vmov.f32	s15, s0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	edc3 7a7a 	vstr	s15, [r3, #488]	; 0x1e8

  // Apply complementary filter
  ms5611->slow_pressure = ms5611->slow_pressure*0.99 + ms5611->fast_pressure*0.01;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 800282e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002832:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002928 <MS5611_calc_altitude+0x150>
 8002836:	ee27 6b06 	vmul.f64	d6, d7, d6
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8002840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002844:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002930 <MS5611_calc_altitude+0x158>
 8002848:	ee27 7b05 	vmul.f64	d7, d7, d5
 800284c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002850:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  // Fix slow response problem
  float diff = limit(ms5611->fast_pressure - ms5611->slow_pressure, -8, 8);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 800286e:	eefa 0a00 	vmov.f32	s1, #160	; 0xc1000000 -8.0
 8002872:	eeb0 0a67 	vmov.f32	s0, s15
 8002876:	f7ff fc91 	bl	800219c <limit>
 800287a:	ed87 0a03 	vstr	s0, [r7, #12]
  if (diff < -0.012 || diff > 0.012)
 800287e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002882:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002886:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8002938 <MS5611_calc_altitude+0x160>
 800288a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	d40a      	bmi.n	80028aa <MS5611_calc_altitude+0xd2>
 8002894:	edd7 7a03 	vldr	s15, [r7, #12]
 8002898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800289c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002940 <MS5611_calc_altitude+0x168>
 80028a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a8:	dd13      	ble.n	80028d2 <MS5611_calc_altitude+0xfa>
    ms5611->slow_pressure += 0.2*diff;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80028b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80028b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028bc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002948 <MS5611_calc_altitude+0x170>
 80028c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80028c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  pressure = ms5611->slow_pressure;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80028d8:	613b      	str	r3, [r7, #16]

  ms5611->altitude = (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 80028da:	edd7 7a04 	vldr	s15, [r7, #16]
 80028de:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002954 <MS5611_calc_altitude+0x17c>
 80028e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028e6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8002958 <MS5611_calc_altitude+0x180>
 80028ea:	eeb0 0a47 	vmov.f32	s0, s14
 80028ee:	f00b fbef 	bl	800e0d0 <powf>
 80028f2:	eef0 7a40 	vmov.f32	s15, s0
 80028f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002902:	eddf 6a16 	vldr	s13, [pc, #88]	; 800295c <MS5611_calc_altitude+0x184>
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002960 <MS5611_calc_altitude+0x188>
 8002912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	7ae147ae 	.word	0x7ae147ae
 800292c:	3fefae14 	.word	0x3fefae14
 8002930:	47ae147b 	.word	0x47ae147b
 8002934:	3f847ae1 	.word	0x3f847ae1
 8002938:	bc6a7efa 	.word	0xbc6a7efa
 800293c:	bf889374 	.word	0xbf889374
 8002940:	bc6a7efa 	.word	0xbc6a7efa
 8002944:	3f889374 	.word	0x3f889374
 8002948:	9999999a 	.word	0x9999999a
 800294c:	3fc99999 	.word	0x3fc99999
 8002950:	42c80000 	.word	0x42c80000
 8002954:	447d5000 	.word	0x447d5000
 8002958:	3e42c9b7 	.word	0x3e42c9b7
 800295c:	43889333 	.word	0x43889333
 8002960:	3bd4fdf4 	.word	0x3bd4fdf4

08002964 <MS5611_update>:
// Counter checks depend on timer frequency
#define STEP_1 0
#define STEP_2 4
#define STEP_3 8
#define STEP_END 10
void MS5611_update(ms5611_t *ms5611) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  static int counter = 0;

  if (counter == STEP_1) {
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MS5611_update+0x70>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <MS5611_update+0x18>
    MS5611_req_temperature(ms5611, OSR_4096);
 8002974:	2104      	movs	r1, #4
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fdb7 	bl	80024ea <MS5611_req_temperature>
  }

  if (counter == STEP_2) {
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MS5611_update+0x70>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d109      	bne.n	8002998 <MS5611_update+0x34>
    MS5611_read_temperature(ms5611);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fde8 	bl	800255a <MS5611_read_temperature>
    MS5611_calc_temperature(ms5611);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe41 	bl	8002612 <MS5611_calc_temperature>
    MS5611_req_pressure(ms5611, OSR_4096);
 8002990:	2104      	movs	r1, #4
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fdc5 	bl	8002522 <MS5611_req_pressure>
  }

  if (counter == STEP_3) {
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MS5611_update+0x70>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d108      	bne.n	80029b2 <MS5611_update+0x4e>
    MS5611_read_pressure(ms5611);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe08 	bl	80025b6 <MS5611_read_pressure>
    MS5611_calc_pressure(ms5611);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fe6a 	bl	8002680 <MS5611_calc_pressure>
    MS5611_calc_altitude(ms5611);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff13 	bl	80027d8 <MS5611_calc_altitude>
  }

  counter += 1;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MS5611_update+0x70>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <MS5611_update+0x70>)
 80029ba:	6013      	str	r3, [r2, #0]
  if (counter >= STEP_END)
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <MS5611_update+0x70>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	dd02      	ble.n	80029ca <MS5611_update+0x66>
    counter = 0;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <MS5611_update+0x70>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	24001794 	.word	0x24001794

080029d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_MspInit+0x30>)
 80029e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029e4:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_MspInit+0x30>)
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_MspInit+0x30>)
 80029f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	58024400 	.word	0x58024400

08002a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0b8      	sub	sp, #224	; 0xe0
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	22bc      	movs	r2, #188	; 0xbc
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00a fbed 	bl	800d20c <memset>
  if(hi2c->Instance==I2C1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <HAL_I2C_MspInit+0xbc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d141      	bne.n	8002ac0 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fd0a 	bl	8007464 <HAL_RCCEx_PeriphCLKConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a56:	f7fe fe79 	bl	800174c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7e:	2312      	movs	r3, #18
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a90:	2304      	movs	r3, #4
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <HAL_I2C_MspInit+0xc4>)
 8002a9e:	f002 fbeb 	bl	8005278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_I2C_MspInit+0xc0>)
 8002ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	37e0      	adds	r7, #224	; 0xe0
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	58020400 	.word	0x58020400

08002ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b092      	sub	sp, #72	; 0x48
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d10f      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af6:	4b90      	ldr	r3, [pc, #576]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002afc:	4a8e      	ldr	r2, [pc, #568]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b06:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b14:	e10c      	b.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
  else if(htim_base->Instance==TIM3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a88      	ldr	r2, [pc, #544]	; (8002d3c <HAL_TIM_Base_MspInit+0x268>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d155      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b20:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b26:	4a84      	ldr	r2, [pc, #528]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b30:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b44:	4a7c      	ldr	r2, [pc, #496]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5c:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b6c:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b92:	4619      	mov	r1, r3
 8002b94:	486a      	ldr	r0, [pc, #424]	; (8002d40 <HAL_TIM_Base_MspInit+0x26c>)
 8002b96:	f002 fb6f 	bl	8005278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002baa:	2302      	movs	r3, #2
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4863      	ldr	r0, [pc, #396]	; (8002d44 <HAL_TIM_Base_MspInit+0x270>)
 8002bb6:	f002 fb5f 	bl	8005278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	201d      	movs	r0, #29
 8002bc0:	f001 fdc1 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bc4:	201d      	movs	r0, #29
 8002bc6:	f001 fdd8 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002bca:	e0b1      	b.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
  else if(htim_base->Instance==TIM4)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_TIM_Base_MspInit+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d137      	bne.n	8002c46 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bd6:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bdc:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfa:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002bfc:	f043 0308 	orr.w	r3, r3, #8
 8002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c04:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c24:	2302      	movs	r3, #2
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4847      	ldr	r0, [pc, #284]	; (8002d4c <HAL_TIM_Base_MspInit+0x278>)
 8002c30:	f002 fb22 	bl	8005278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	201e      	movs	r0, #30
 8002c3a:	f001 fd84 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c3e:	201e      	movs	r0, #30
 8002c40:	f001 fd9b 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002c44:	e074      	b.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
  else if(htim_base->Instance==TIM5)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <HAL_TIM_Base_MspInit+0x27c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d136      	bne.n	8002cbe <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c56:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c60:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c74:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002c8c:	230d      	movs	r3, #13
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4826      	ldr	r0, [pc, #152]	; (8002d40 <HAL_TIM_Base_MspInit+0x26c>)
 8002ca8:	f002 fae6 	bl	8005278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2032      	movs	r0, #50	; 0x32
 8002cb2:	f001 fd48 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cb6:	2032      	movs	r0, #50	; 0x32
 8002cb8:	f001 fd5f 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002cbc:	e038      	b.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
  else if(htim_base->Instance==TIM6)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_TIM_Base_MspInit+0x280>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d117      	bne.n	8002cf8 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cce:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2036      	movs	r0, #54	; 0x36
 8002cec:	f001 fd2b 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cf0:	2036      	movs	r0, #54	; 0x36
 8002cf2:	f001 fd42 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002cf6:	e01b      	b.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
  else if(htim_base->Instance==TIM7)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <HAL_TIM_Base_MspInit+0x284>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d116      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002d0a:	f043 0320 	orr.w	r3, r3, #32
 8002d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_TIM_Base_MspInit+0x264>)
 8002d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	2037      	movs	r0, #55	; 0x37
 8002d26:	f001 fd0e 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d2a:	2037      	movs	r0, #55	; 0x37
 8002d2c:	f001 fd25 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002d30:	bf00      	nop
 8002d32:	3748      	adds	r7, #72	; 0x48
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	58020000 	.word	0x58020000
 8002d44:	58020400 	.word	0x58020400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	58020c00 	.word	0x58020c00
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40001000 	.word	0x40001000
 8002d58:	40001400 	.word	0x40001400

08002d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d13e      	bne.n	8002dfc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_TIM_MspPostInit+0xa8>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480c      	ldr	r0, [pc, #48]	; (8002e08 <HAL_TIM_MspPostInit+0xac>)
 8002dd6:	f002 fa4f 	bl	8005278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002dda:	f640 4308 	movw	r3, #3080	; 0xc08
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dec:	2301      	movs	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <HAL_TIM_MspPostInit+0xb0>)
 8002df8:	f002 fa3e 	bl	8005278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024400 	.word	0x58024400
 8002e08:	58020000 	.word	0x58020000
 8002e0c:	58020400 	.word	0x58020400

08002e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0b8      	sub	sp, #224	; 0xe0
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	22bc      	movs	r2, #188	; 0xbc
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00a f9eb 	bl	800d20c <memset>
  if(huart->Instance==USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <HAL_UART_MspInit+0xd0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d14a      	bne.n	8002ed6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fb08 	bl	8007464 <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e5a:	f7fe fc77 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_UART_MspInit+0xd4>)
 8002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <HAL_UART_MspInit+0xd8>)
 8002ec2:	f002 f9d9 	bl	8005278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2025      	movs	r0, #37	; 0x25
 8002ecc:	f001 fc3b 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed0:	2025      	movs	r0, #37	; 0x25
 8002ed2:	f001 fc52 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	37e0      	adds	r7, #224	; 0xe0
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40011000 	.word	0x40011000
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	58020400 	.word	0x58020400

08002eec <set_speed>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void set_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 8002efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 8002f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 8002f0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 8002f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <NMI_Handler+0x4>

08002f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <HardFault_Handler+0x4>

08002f32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <MemManage_Handler+0x4>

08002f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <BusFault_Handler+0x4>

08002f3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <UsageFault_Handler+0x4>

08002f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f72:	f001 fabd 	bl	80044f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <TIM3_IRQHandler+0x10>)
 8002f82:	f006 f9c9 	bl	8009318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2400013c 	.word	0x2400013c

08002f90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <TIM4_IRQHandler+0x10>)
 8002f96:	f006 f9bf 	bl	8009318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	24000188 	.word	0x24000188

08002fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <USART1_IRQHandler+0x10>)
 8002faa:	f007 fd41 	bl	800aa30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	240002b8 	.word	0x240002b8

08002fb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM5_IRQHandler+0x10>)
 8002fbe:	f006 f9ab 	bl	8009318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	240001d4 	.word	0x240001d4

08002fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM6_DAC_IRQHandler+0x10>)
 8002fd2:	f006 f9a1 	bl	8009318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	24000220 	.word	0x24000220

08002fe0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  fly();
 8002fe4:	f000 fc60 	bl	80038a8 <fly>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <TIM7_IRQHandler+0x14>)
 8002fea:	f006 f995 	bl	8009318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2400026c 	.word	0x2400026c

08002ff8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8003000:	2102      	movs	r1, #2
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <HAL_UART_TxCpltCallback+0x18>)
 8003004:	f002 fb19 	bl	800563a <HAL_GPIO_TogglePin>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	58020000 	.word	0x58020000

08003014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800301c:	2102      	movs	r1, #2
 800301e:	4819      	ldr	r0, [pc, #100]	; (8003084 <HAL_UART_RxCpltCallback+0x70>)
 8003020:	f002 fb0b 	bl	800563a <HAL_GPIO_TogglePin>

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 800302c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003032:	edd3 6a02 	vldr	s13, [r3, #8]
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003038:	ed93 6a03 	vldr	s12, [r3, #12]
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 800303e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003044:	ed93 5a05 	vldr	s10, [r3, #20]
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 800304a:	edd3 4a06 	vldr	s9, [r3, #24]
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003050:	edd3 3a07 	vldr	s7, [r3, #28]
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_UART_RxCpltCallback+0x74>)
 8003056:	ed93 4a08 	vldr	s8, [r3, #32]
 800305a:	eeb0 3a64 	vmov.f32	s6, s9
 800305e:	eef0 2a45 	vmov.f32	s5, s10
 8003062:	eeb0 2a65 	vmov.f32	s4, s11
 8003066:	eef0 1a46 	vmov.f32	s3, s12
 800306a:	eeb0 1a66 	vmov.f32	s2, s13
 800306e:	eef0 0a47 	vmov.f32	s1, s14
 8003072:	eeb0 0a67 	vmov.f32	s0, s15
 8003076:	f7fd fde7 	bl	8000c48 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	58020000 	.word	0x58020000
 8003088:	2400189c 	.word	0x2400189c

0800308c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4aaa      	ldr	r2, [pc, #680]	; (8003344 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	f040 8133 	bne.w	8003306 <HAL_TIM_IC_CaptureCallback+0x27a>
    switch (htim->Channel) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7f1b      	ldrb	r3, [r3, #28]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	2b07      	cmp	r3, #7
 80030a8:	f200 80dc 	bhi.w	8003264 <HAL_TIM_IC_CaptureCallback+0x1d8>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	0800313d 	.word	0x0800313d
 80030bc:	08003265 	.word	0x08003265
 80030c0:	080031a1 	.word	0x080031a1
 80030c4:	08003265 	.word	0x08003265
 80030c8:	08003265 	.word	0x08003265
 80030cc:	08003265 	.word	0x08003265
 80030d0:	08003203 	.word	0x08003203
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	489c      	ldr	r0, [pc, #624]	; (8003348 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80030d8:	f002 fa7e 	bl	80055d8 <HAL_GPIO_ReadPin>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_IC_CaptureCallback+0x66>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80030e2:	2100      	movs	r1, #0
 80030e4:	4899      	ldr	r0, [pc, #612]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80030e6:	f006 fcdf 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b98      	ldr	r3, [pc, #608]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80030f0:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) {
 80030f2:	2140      	movs	r1, #64	; 0x40
 80030f4:	4894      	ldr	r0, [pc, #592]	; (8003348 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80030f6:	f002 fa6f 	bl	80055d8 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 80b3 	bne.w	8003268 <HAL_TIM_IC_CaptureCallback+0x1dc>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8003102:	2100      	movs	r1, #0
 8003104:	4891      	ldr	r0, [pc, #580]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003106:	f006 fccf 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003110:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 8003112:	4b8f      	ldr	r3, [pc, #572]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
          if (value >= 400 && value <= 798) { // [400, 798]
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003124:	f2c0 80a0 	blt.w	8003268 <HAL_TIM_IC_CaptureCallback+0x1dc>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f240 321e 	movw	r2, #798	; 0x31e
 800312e:	4293      	cmp	r3, r2
 8003130:	f300 809a 	bgt.w	8003268 <HAL_TIM_IC_CaptureCallback+0x1dc>
            pwm_in[2] = value;
 8003134:	4a86      	ldr	r2, [pc, #536]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 800313a:	e095      	b.n	8003268 <HAL_TIM_IC_CaptureCallback+0x1dc>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	4882      	ldr	r0, [pc, #520]	; (8003348 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003140:	f002 fa4a 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_TIM_IC_CaptureCallback+0xce>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800314a:	2104      	movs	r1, #4
 800314c:	487f      	ldr	r0, [pc, #508]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800314e:	f006 fcab 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	4b7e      	ldr	r3, [pc, #504]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003158:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET) {
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	487a      	ldr	r0, [pc, #488]	; (8003348 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800315e:	f002 fa3b 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f040 8081 	bne.w	800326c <HAL_TIM_IC_CaptureCallback+0x1e0>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800316a:	2104      	movs	r1, #4
 800316c:	4877      	ldr	r0, [pc, #476]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800316e:	f006 fc9b 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003178:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 800317a:	4b75      	ldr	r3, [pc, #468]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	4b74      	ldr	r3, [pc, #464]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
          if (value >= 400 && value <= 798) {
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800318c:	db6e      	blt.n	800326c <HAL_TIM_IC_CaptureCallback+0x1e0>
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	f240 321e 	movw	r2, #798	; 0x31e
 8003194:	4293      	cmp	r3, r2
 8003196:	dc69      	bgt.n	800326c <HAL_TIM_IC_CaptureCallback+0x1e0>
            pwm_in[5] = value;
 8003198:	4a6d      	ldr	r2, [pc, #436]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 800319e:	e065      	b.n	800326c <HAL_TIM_IC_CaptureCallback+0x1e0>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) {
 80031a0:	2101      	movs	r1, #1
 80031a2:	486c      	ldr	r0, [pc, #432]	; (8003354 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80031a4:	f002 fa18 	bl	80055d8 <HAL_GPIO_ReadPin>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_TIM_IC_CaptureCallback+0x132>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 80031ae:	2108      	movs	r1, #8
 80031b0:	4866      	ldr	r0, [pc, #408]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80031b2:	f006 fc79 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80031bc:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80031be:	2101      	movs	r1, #1
 80031c0:	4864      	ldr	r0, [pc, #400]	; (8003354 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80031c2:	f002 fa09 	bl	80055d8 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d151      	bne.n	8003270 <HAL_TIM_IC_CaptureCallback+0x1e4>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 80031cc:	2108      	movs	r1, #8
 80031ce:	485f      	ldr	r0, [pc, #380]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80031d0:	f006 fc6a 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80031da:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 80031dc:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (value >= 400 && value <= 798) {
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031ee:	db3f      	blt.n	8003270 <HAL_TIM_IC_CaptureCallback+0x1e4>
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	f240 321e 	movw	r2, #798	; 0x31e
 80031f6:	4293      	cmp	r3, r2
 80031f8:	dc3a      	bgt.n	8003270 <HAL_TIM_IC_CaptureCallback+0x1e4>
            pwm_in[8] = value;
 80031fa:	4a55      	ldr	r2, [pc, #340]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8003200:	e036      	b.n	8003270 <HAL_TIM_IC_CaptureCallback+0x1e4>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) {
 8003202:	2102      	movs	r1, #2
 8003204:	4853      	ldr	r0, [pc, #332]	; (8003354 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003206:	f002 f9e7 	bl	80055d8 <HAL_GPIO_ReadPin>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IC_CaptureCallback+0x194>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8003210:	210c      	movs	r1, #12
 8003212:	484e      	ldr	r0, [pc, #312]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003214:	f006 fc48 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8003220:	2102      	movs	r1, #2
 8003222:	484c      	ldr	r0, [pc, #304]	; (8003354 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8003224:	f002 f9d8 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IC_CaptureCallback+0x1e8>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800322e:	210c      	movs	r1, #12
 8003230:	4846      	ldr	r0, [pc, #280]	; (800334c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003232:	f006 fc39 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	4b45      	ldr	r3, [pc, #276]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003242:	4b43      	ldr	r3, [pc, #268]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
          if (value >= 400 && value <= 798) {
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003250:	db10      	blt.n	8003274 <HAL_TIM_IC_CaptureCallback+0x1e8>
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	f240 321e 	movw	r2, #798	; 0x31e
 8003258:	4293      	cmp	r3, r2
 800325a:	dc0b      	bgt.n	8003274 <HAL_TIM_IC_CaptureCallback+0x1e8>
            pwm_in[11] = value;
 800325c:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 8003262:	e007      	b.n	8003274 <HAL_TIM_IC_CaptureCallback+0x1e8>
      default:
        break;
 8003264:	bf00      	nop
 8003266:	e006      	b.n	8003276 <HAL_TIM_IC_CaptureCallback+0x1ea>
        break;
 8003268:	bf00      	nop
 800326a:	e004      	b.n	8003276 <HAL_TIM_IC_CaptureCallback+0x1ea>
        break;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_TIM_IC_CaptureCallback+0x1ea>
        break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_TIM_IC_CaptureCallback+0x1ea>
        break;
 8003274:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[5] - 599);
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003286:	eeb0 0a67 	vmov.f32	s0, s15
 800328a:	4833      	ldr	r0, [pc, #204]	; (8003358 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800328c:	f7fd fc56 	bl	8000b3c <average_filter_update>
 8003290:	eef0 7a40 	vmov.f32	s15, s0
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8003296:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[2] - 599);
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	482c      	ldr	r0, [pc, #176]	; (8003360 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80032b0:	f7fd fc44 	bl	8000b3c <average_filter_update>
 80032b4:	eef0 7a40 	vmov.f32	s15, s0
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[8] - 599);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ce:	eeb0 0a67 	vmov.f32	s0, s15
 80032d2:	4825      	ldr	r0, [pc, #148]	; (8003368 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80032d4:	f7fd fc32 	bl	8000b3c <average_filter_update>
 80032d8:	eef0 7a40 	vmov.f32	s15, s0
 80032dc:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80032de:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[11] - 599);
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	481e      	ldr	r0, [pc, #120]	; (8003370 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80032f8:	f7fd fc20 	bl	8000b3c <average_filter_update>
 80032fc:	eef0 7a40 	vmov.f32	s15, s0
 8003300:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM4) {
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	f040 820e 	bne.w	800372e <HAL_TIM_IC_CaptureCallback+0x6a2>
    switch (htim->Channel) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7f1b      	ldrb	r3, [r3, #28]
 8003316:	3b01      	subs	r3, #1
 8003318:	2b07      	cmp	r3, #7
 800331a:	f200 8121 	bhi.w	8003560 <HAL_TIM_IC_CaptureCallback+0x4d4>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	0800337d 	.word	0x0800337d
 8003328:	080033f3 	.word	0x080033f3
 800332c:	08003561 	.word	0x08003561
 8003330:	08003475 	.word	0x08003475
 8003334:	08003561 	.word	0x08003561
 8003338:	08003561 	.word	0x08003561
 800333c:	08003561 	.word	0x08003561
 8003340:	080034f1 	.word	0x080034f1
 8003344:	40000400 	.word	0x40000400
 8003348:	58020000 	.word	0x58020000
 800334c:	2400013c 	.word	0x2400013c
 8003350:	240017dc 	.word	0x240017dc
 8003354:	58020400 	.word	0x58020400
 8003358:	24000348 	.word	0x24000348
 800335c:	24001854 	.word	0x24001854
 8003360:	240004e4 	.word	0x240004e4
 8003364:	24001860 	.word	0x24001860
 8003368:	24000680 	.word	0x24000680
 800336c:	24001858 	.word	0x24001858
 8003370:	2400081c 	.word	0x2400081c
 8003374:	2400185c 	.word	0x2400185c
 8003378:	40000800 	.word	0x40000800
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 800337c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003380:	4899      	ldr	r0, [pc, #612]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 8003382:	f002 f929 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_TIM_IC_CaptureCallback+0x310>
          pwm_in[18] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800338c:	2100      	movs	r1, #0
 800338e:	4897      	ldr	r0, [pc, #604]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003390:	f006 fb8a 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	4b95      	ldr	r3, [pc, #596]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800339a:	649a      	str	r2, [r3, #72]	; 0x48
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 800339c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a0:	4891      	ldr	r0, [pc, #580]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 80033a2:	f002 f919 	bl	80055d8 <HAL_GPIO_ReadPin>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 80db 	bne.w	8003564 <HAL_TIM_IC_CaptureCallback+0x4d8>
          pwm_in[19] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80033ae:	2100      	movs	r1, #0
 80033b0:	488e      	ldr	r0, [pc, #568]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 80033b2:	f006 fb79 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80033bc:	64da      	str	r2, [r3, #76]	; 0x4c
          int value = pwm_in[19] - pwm_in[18];
 80033be:	4b8c      	ldr	r3, [pc, #560]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80033c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
          if (value >= 399 && value <= 799) { // [399, 799]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80033d0:	f340 80c8 	ble.w	8003564 <HAL_TIM_IC_CaptureCallback+0x4d8>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033da:	f280 80c3 	bge.w	8003564 <HAL_TIM_IC_CaptureCallback+0x4d8>
            pwm_in[20] = value > 600 ? 2 : 1;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80033e4:	dd01      	ble.n	80033ea <HAL_TIM_IC_CaptureCallback+0x35e>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e000      	b.n	80033ec <HAL_TIM_IC_CaptureCallback+0x360>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4a80      	ldr	r2, [pc, #512]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80033ee:	6513      	str	r3, [r2, #80]	; 0x50
          }
        }
        break;
 80033f0:	e0b8      	b.n	8003564 <HAL_TIM_IC_CaptureCallback+0x4d8>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 80033f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f6:	487c      	ldr	r0, [pc, #496]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 80033f8:	f002 f8ee 	bl	80055d8 <HAL_GPIO_ReadPin>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <HAL_TIM_IC_CaptureCallback+0x386>
          pwm_in[21] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003402:	2104      	movs	r1, #4
 8003404:	4879      	ldr	r0, [pc, #484]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003406:	f006 fb4f 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003416:	4874      	ldr	r0, [pc, #464]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 8003418:	f002 f8de 	bl	80055d8 <HAL_GPIO_ReadPin>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 80a2 	bne.w	8003568 <HAL_TIM_IC_CaptureCallback+0x4dc>
          pwm_in[22] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003424:	2104      	movs	r1, #4
 8003426:	4871      	ldr	r0, [pc, #452]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003428:	f006 fb3e 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003432:	659a      	str	r2, [r3, #88]	; 0x58
          int value = pwm_in[22] - pwm_in[21];
 8003434:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003438:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	61bb      	str	r3, [r7, #24]
          if (value >= 399 && value <= 799) { // [399, 799]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8003446:	f340 808f 	ble.w	8003568 <HAL_TIM_IC_CaptureCallback+0x4dc>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003450:	f280 808a 	bge.w	8003568 <HAL_TIM_IC_CaptureCallback+0x4dc>
            pwm_in[23] = value > 700 ? 3 : (value < 500 ? 1 : 2);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800345a:	dc07      	bgt.n	800346c <HAL_TIM_IC_CaptureCallback+0x3e0>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003462:	da01      	bge.n	8003468 <HAL_TIM_IC_CaptureCallback+0x3dc>
 8003464:	2301      	movs	r3, #1
 8003466:	e002      	b.n	800346e <HAL_TIM_IC_CaptureCallback+0x3e2>
 8003468:	2302      	movs	r3, #2
 800346a:	e000      	b.n	800346e <HAL_TIM_IC_CaptureCallback+0x3e2>
 800346c:	2303      	movs	r3, #3
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003470:	65d3      	str	r3, [r2, #92]	; 0x5c
          }
        }
        break;
 8003472:	e079      	b.n	8003568 <HAL_TIM_IC_CaptureCallback+0x4dc>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003478:	485b      	ldr	r0, [pc, #364]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 800347a:	f002 f8ad 	bl	80055d8 <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IC_CaptureCallback+0x408>
          pwm_in[24] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003484:	2108      	movs	r1, #8
 8003486:	4859      	ldr	r0, [pc, #356]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003488:	f006 fb0e 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003492:	661a      	str	r2, [r3, #96]	; 0x60
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003498:	4853      	ldr	r0, [pc, #332]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 800349a:	f002 f89d 	bl	80055d8 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d163      	bne.n	800356c <HAL_TIM_IC_CaptureCallback+0x4e0>
          pwm_in[25] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80034a4:	2108      	movs	r1, #8
 80034a6:	4851      	ldr	r0, [pc, #324]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 80034a8:	f006 fafe 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80034b2:	665a      	str	r2, [r3, #100]	; 0x64
          int value = pwm_in[25] - pwm_in[24];
 80034b4:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80034b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	61fb      	str	r3, [r7, #28]
          if (value >= 399 && value <= 799) {
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80034c6:	dd51      	ble.n	800356c <HAL_TIM_IC_CaptureCallback+0x4e0>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80034ce:	da4d      	bge.n	800356c <HAL_TIM_IC_CaptureCallback+0x4e0>
            pwm_in[26] = value > 700 ? 3 : (value < 500 ? 1 : 2);
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80034d6:	dc07      	bgt.n	80034e8 <HAL_TIM_IC_CaptureCallback+0x45c>
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034de:	da01      	bge.n	80034e4 <HAL_TIM_IC_CaptureCallback+0x458>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e002      	b.n	80034ea <HAL_TIM_IC_CaptureCallback+0x45e>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e000      	b.n	80034ea <HAL_TIM_IC_CaptureCallback+0x45e>
 80034e8:	2303      	movs	r3, #3
 80034ea:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 80034ec:	6693      	str	r3, [r2, #104]	; 0x68
          }
        }
        break;
 80034ee:	e03d      	b.n	800356c <HAL_TIM_IC_CaptureCallback+0x4e0>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 80034f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034f4:	483c      	ldr	r0, [pc, #240]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 80034f6:	f002 f86f 	bl	80055d8 <HAL_GPIO_ReadPin>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IC_CaptureCallback+0x484>
          pwm_in[27] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003500:	210c      	movs	r1, #12
 8003502:	483a      	ldr	r0, [pc, #232]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003504:	f006 fad0 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800350e:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8003510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003514:	4834      	ldr	r0, [pc, #208]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0x55c>)
 8003516:	f002 f85f 	bl	80055d8 <HAL_GPIO_ReadPin>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d127      	bne.n	8003570 <HAL_TIM_IC_CaptureCallback+0x4e4>
          pwm_in[28] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003520:	210c      	movs	r1, #12
 8003522:	4832      	ldr	r0, [pc, #200]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x560>)
 8003524:	f006 fac0 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800352e:	671a      	str	r2, [r3, #112]	; 0x70
          int value = pwm_in[28] - pwm_in[27];
 8003530:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	623b      	str	r3, [r7, #32]
          if (value >= 399 && value <= 799) {
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8003542:	dd15      	ble.n	8003570 <HAL_TIM_IC_CaptureCallback+0x4e4>
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800354a:	da11      	bge.n	8003570 <HAL_TIM_IC_CaptureCallback+0x4e4>
            pwm_in[29] = value > 600 ? 2 : 1;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003552:	dd01      	ble.n	8003558 <HAL_TIM_IC_CaptureCallback+0x4cc>
 8003554:	2302      	movs	r3, #2
 8003556:	e000      	b.n	800355a <HAL_TIM_IC_CaptureCallback+0x4ce>
 8003558:	2301      	movs	r3, #1
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800355c:	6753      	str	r3, [r2, #116]	; 0x74
          }
        }
        break;
 800355e:	e007      	b.n	8003570 <HAL_TIM_IC_CaptureCallback+0x4e4>
      default:
        break;
 8003560:	bf00      	nop
 8003562:	e006      	b.n	8003572 <HAL_TIM_IC_CaptureCallback+0x4e6>
        break;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <HAL_TIM_IC_CaptureCallback+0x4e6>
        break;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <HAL_TIM_IC_CaptureCallback+0x4e6>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_TIM_IC_CaptureCallback+0x4e6>
        break;
 8003570:	bf00      	nop
    }

    g_stick1 = pwm_in[20];
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_TIM_IC_CaptureCallback+0x568>)
 8003578:	6013      	str	r3, [r2, #0]
    g_stick2 = pwm_in[23];
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <HAL_TIM_IC_CaptureCallback+0x56c>)
 8003580:	6013      	str	r3, [r2, #0]
    g_stick3 = pwm_in[26];
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 8003584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_TIM_IC_CaptureCallback+0x570>)
 8003588:	6013      	str	r3, [r2, #0]
    g_stick4 = pwm_in[29];
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x564>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_TIM_IC_CaptureCallback+0x574>)
 8003590:	6013      	str	r3, [r2, #0]

    if (g_stick4 == 2) { // Tuning PID
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_TIM_IC_CaptureCallback+0x574>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b02      	cmp	r3, #2
 8003598:	f040 80c9 	bne.w	800372e <HAL_TIM_IC_CaptureCallback+0x6a2>
      float add = 0.0;
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (g_stick3 != g_pid_tuning) {
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_TIM_IC_CaptureCallback+0x578>)
 80035a4:	f993 3000 	ldrsb.w	r3, [r3]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_TIM_IC_CaptureCallback+0x570>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d00d      	beq.n	80035ce <HAL_TIM_IC_CaptureCallback+0x542>
        add = g_stick3 - 2; // -1, 0, 1
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_TIM_IC_CaptureCallback+0x570>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3b02      	subs	r3, #2
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        g_pid_tuning = g_stick3;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_TIM_IC_CaptureCallback+0x570>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_TIM_IC_CaptureCallback+0x578>)
 80035cc:	701a      	strb	r2, [r3, #0]
      }

      switch (g_stick2) {
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_TIM_IC_CaptureCallback+0x56c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d07a      	beq.n	80036cc <HAL_TIM_IC_CaptureCallback+0x640>
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	f300 80ab 	bgt.w	8003732 <HAL_TIM_IC_CaptureCallback+0x6a6>
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d013      	beq.n	8003608 <HAL_TIM_IC_CaptureCallback+0x57c>
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d042      	beq.n	800366a <HAL_TIM_IC_CaptureCallback+0x5de>
          g_D_pitch_gain = limit(g_D_pitch_gain + add / 100, 0, 0.5);
          g_D_roll_gain = limit(g_D_roll_gain + add / 100, 0, 0.5);
//          g_D_yaw_gain = limit(g_D_yaw_gain + add / 1000, 0, 0.05);
          break;
        default:
          break;
 80035e4:	e0a5      	b.n	8003732 <HAL_TIM_IC_CaptureCallback+0x6a6>
 80035e6:	bf00      	nop
 80035e8:	58020c00 	.word	0x58020c00
 80035ec:	24000188 	.word	0x24000188
 80035f0:	240017dc 	.word	0x240017dc
 80035f4:	2400186c 	.word	0x2400186c
 80035f8:	24001870 	.word	0x24001870
 80035fc:	24001874 	.word	0x24001874
 8003600:	24001878 	.word	0x24001878
 8003604:	24000010 	.word	0x24000010
          g_P_pitch_gain = limit(g_P_pitch_gain + add / 10, 0, 5);
 8003608:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800360c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003610:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003614:	4b93      	ldr	r3, [pc, #588]	; (8003864 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8003622:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 8003626:	eeb0 0a67 	vmov.f32	s0, s15
 800362a:	f7fe fdb7 	bl	800219c <limit>
 800362e:	eef0 7a40 	vmov.f32	s15, s0
 8003632:	4b8c      	ldr	r3, [pc, #560]	; (8003864 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003634:	edc3 7a00 	vstr	s15, [r3]
          g_P_roll_gain = limit(g_P_roll_gain + add / 10, 0, 5);
 8003638:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800363c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003640:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003644:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_TIM_IC_CaptureCallback+0x7e0>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8003652:	eddf 0a85 	vldr	s1, [pc, #532]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 8003656:	eeb0 0a67 	vmov.f32	s0, s15
 800365a:	f7fe fd9f 	bl	800219c <limit>
 800365e:	eef0 7a40 	vmov.f32	s15, s0
 8003662:	4b82      	ldr	r3, [pc, #520]	; (800386c <HAL_TIM_IC_CaptureCallback+0x7e0>)
 8003664:	edc3 7a00 	vstr	s15, [r3]
          break;
 8003668:	e064      	b.n	8003734 <HAL_TIM_IC_CaptureCallback+0x6a8>
          g_I_pitch_period = limit(g_I_pitch_period + add / 100, 0, 0.5);
 800366a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800366e:	eddf 6a80 	vldr	s13, [pc, #512]	; 8003870 <HAL_TIM_IC_CaptureCallback+0x7e4>
 8003672:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003676:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x7e8>)
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003680:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003684:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 8003688:	eeb0 0a67 	vmov.f32	s0, s15
 800368c:	f7fe fd86 	bl	800219c <limit>
 8003690:	eef0 7a40 	vmov.f32	s15, s0
 8003694:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x7e8>)
 8003696:	edc3 7a00 	vstr	s15, [r3]
          g_I_roll_period = limit(g_I_roll_period + add / 100, 0, 0.5);
 800369a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800369e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003870 <HAL_TIM_IC_CaptureCallback+0x7e4>
 80036a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036a6:	4b74      	ldr	r3, [pc, #464]	; (8003878 <HAL_TIM_IC_CaptureCallback+0x7ec>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80036b4:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f7fe fd6e 	bl	800219c <limit>
 80036c0:	eef0 7a40 	vmov.f32	s15, s0
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_TIM_IC_CaptureCallback+0x7ec>)
 80036c6:	edc3 7a00 	vstr	s15, [r3]
          break;
 80036ca:	e033      	b.n	8003734 <HAL_TIM_IC_CaptureCallback+0x6a8>
          g_D_pitch_gain = limit(g_D_pitch_gain + add / 100, 0, 0.5);
 80036cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80036d0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003870 <HAL_TIM_IC_CaptureCallback+0x7e4>
 80036d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036d8:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_TIM_IC_CaptureCallback+0x7f0>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80036e6:	eddf 0a60 	vldr	s1, [pc, #384]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 80036ea:	eeb0 0a67 	vmov.f32	s0, s15
 80036ee:	f7fe fd55 	bl	800219c <limit>
 80036f2:	eef0 7a40 	vmov.f32	s15, s0
 80036f6:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_TIM_IC_CaptureCallback+0x7f0>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
          g_D_roll_gain = limit(g_D_roll_gain + add / 100, 0, 0.5);
 80036fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003700:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003870 <HAL_TIM_IC_CaptureCallback+0x7e4>
 8003704:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003708:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_TIM_IC_CaptureCallback+0x7f4>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003716:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003868 <HAL_TIM_IC_CaptureCallback+0x7dc>
 800371a:	eeb0 0a67 	vmov.f32	s0, s15
 800371e:	f7fe fd3d 	bl	800219c <limit>
 8003722:	eef0 7a40 	vmov.f32	s15, s0
 8003726:	4b56      	ldr	r3, [pc, #344]	; (8003880 <HAL_TIM_IC_CaptureCallback+0x7f4>)
 8003728:	edc3 7a00 	vstr	s15, [r3]
          break;
 800372c:	e002      	b.n	8003734 <HAL_TIM_IC_CaptureCallback+0x6a8>
      }
    }
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_TIM_IC_CaptureCallback+0x6a8>
          break;
 8003732:	bf00      	nop
  }

  if (htim->Instance == TIM5) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a52      	ldr	r2, [pc, #328]	; (8003884 <HAL_TIM_IC_CaptureCallback+0x7f8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	f040 808e 	bne.w	800385c <HAL_TIM_IC_CaptureCallback+0x7d0>
    switch (htim->Channel) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7f1b      	ldrb	r3, [r3, #28]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d002      	beq.n	800374e <HAL_TIM_IC_CaptureCallback+0x6c2>
 8003748:	2b08      	cmp	r3, #8
 800374a:	d030      	beq.n	80037ae <HAL_TIM_IC_CaptureCallback+0x722>
            pwm_in[17] = value;
          }
        }
        break;
      default:
        break;
 800374c:	e062      	b.n	8003814 <HAL_TIM_IC_CaptureCallback+0x788>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 800374e:	2104      	movs	r1, #4
 8003750:	484d      	ldr	r0, [pc, #308]	; (8003888 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 8003752:	f001 ff41 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_TIM_IC_CaptureCallback+0x6e0>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 800375c:	2108      	movs	r1, #8
 800375e:	484b      	ldr	r0, [pc, #300]	; (800388c <HAL_TIM_IC_CaptureCallback+0x800>)
 8003760:	f006 f9a2 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 800376c:	2104      	movs	r1, #4
 800376e:	4846      	ldr	r0, [pc, #280]	; (8003888 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 8003770:	f001 ff32 	bl	80055d8 <HAL_GPIO_ReadPin>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d149      	bne.n	800380e <HAL_TIM_IC_CaptureCallback+0x782>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 800377a:	2108      	movs	r1, #8
 800377c:	4843      	ldr	r0, [pc, #268]	; (800388c <HAL_TIM_IC_CaptureCallback+0x800>)
 800377e:	f006 f993 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	4b42      	ldr	r3, [pc, #264]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 8003788:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 800378c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	60fb      	str	r3, [r7, #12]
          if (value >= 399 && value <= 799) { // [399, 799]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800379c:	dd37      	ble.n	800380e <HAL_TIM_IC_CaptureCallback+0x782>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80037a4:	da33      	bge.n	800380e <HAL_TIM_IC_CaptureCallback+0x782>
            pwm_in[14] = value;
 80037a6:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6393      	str	r3, [r2, #56]	; 0x38
        break;
 80037ac:	e02f      	b.n	800380e <HAL_TIM_IC_CaptureCallback+0x782>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 80037ae:	2108      	movs	r1, #8
 80037b0:	4835      	ldr	r0, [pc, #212]	; (8003888 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 80037b2:	f001 ff11 	bl	80055d8 <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IC_CaptureCallback+0x740>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 80037bc:	210c      	movs	r1, #12
 80037be:	4833      	ldr	r0, [pc, #204]	; (800388c <HAL_TIM_IC_CaptureCallback+0x800>)
 80037c0:	f006 f972 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 80037cc:	2108      	movs	r1, #8
 80037ce:	482e      	ldr	r0, [pc, #184]	; (8003888 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 80037d0:	f001 ff02 	bl	80055d8 <HAL_GPIO_ReadPin>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11b      	bne.n	8003812 <HAL_TIM_IC_CaptureCallback+0x786>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 80037da:	210c      	movs	r1, #12
 80037dc:	482b      	ldr	r0, [pc, #172]	; (800388c <HAL_TIM_IC_CaptureCallback+0x800>)
 80037de:	f006 f963 	bl	8009aa8 <HAL_TIM_ReadCapturedValue>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	613b      	str	r3, [r7, #16]
          if (value >= 399 && value <= 799) {
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80037fc:	dd09      	ble.n	8003812 <HAL_TIM_IC_CaptureCallback+0x786>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003804:	da05      	bge.n	8003812 <HAL_TIM_IC_CaptureCallback+0x786>
            pwm_in[17] = value;
 8003806:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6453      	str	r3, [r2, #68]	; 0x44
        break;
 800380c:	e001      	b.n	8003812 <HAL_TIM_IC_CaptureCallback+0x786>
        break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_TIM_IC_CaptureCallback+0x788>
        break;
 8003812:	bf00      	nop
    }

    g_tune1 = average_filter_update(&g_af[4], pwm_in[14] - 599);
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	481a      	ldr	r0, [pc, #104]	; (8003894 <HAL_TIM_IC_CaptureCallback+0x808>)
 800382a:	f7fd f987 	bl	8000b3c <average_filter_update>
 800382e:	eef0 7a40 	vmov.f32	s15, s0
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_TIM_IC_CaptureCallback+0x80c>)
 8003834:	edc3 7a00 	vstr	s15, [r3]
    g_tune2 = average_filter_update(&g_af[5], pwm_in[17] - 599);
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_TIM_IC_CaptureCallback+0x804>)
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f2a3 2357 	subw	r3, r3, #599	; 0x257
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	4813      	ldr	r0, [pc, #76]	; (800389c <HAL_TIM_IC_CaptureCallback+0x810>)
 800384e:	f7fd f975 	bl	8000b3c <average_filter_update>
 8003852:	eef0 7a40 	vmov.f32	s15, s0
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_TIM_IC_CaptureCallback+0x814>)
 8003858:	edc3 7a00 	vstr	s15, [r3]
  monitor[5] = g_I_yaw_period;
  monitor[6] = g_D_pitch_gain;
  monitor[7] = g_D_roll_gain;
  monitor[8] = g_D_yaw_gain;
#endif
}
 800385c:	bf00      	nop
 800385e:	3738      	adds	r7, #56	; 0x38
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	24000000 	.word	0x24000000
 8003868:	00000000 	.word	0x00000000
 800386c:	24000008 	.word	0x24000008
 8003870:	42c80000 	.word	0x42c80000
 8003874:	24001880 	.word	0x24001880
 8003878:	24001888 	.word	0x24001888
 800387c:	24000004 	.word	0x24000004
 8003880:	2400000c 	.word	0x2400000c
 8003884:	40000c00 	.word	0x40000c00
 8003888:	58020000 	.word	0x58020000
 800388c:	240001d4 	.word	0x240001d4
 8003890:	240017dc 	.word	0x240017dc
 8003894:	240009b8 	.word	0x240009b8
 8003898:	24001864 	.word	0x24001864
 800389c:	24000b54 	.word	0x24000b54
 80038a0:	24001868 	.word	0x24001868
 80038a4:	00000000 	.word	0x00000000

080038a8 <fly>:

void fly() {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 80038ae:	487c      	ldr	r0, [pc, #496]	; (8003aa0 <fly+0x1f8>)
 80038b0:	f7fe fb20 	bl	8001ef4 <MPU6050_update>
  MS5611_update(&g_ms5611);
 80038b4:	487b      	ldr	r0, [pc, #492]	; (8003aa4 <fly+0x1fc>)
 80038b6:	f7ff f855 	bl	8002964 <MS5611_update>

  float angle_x = g_mpu6050.angle_x;
 80038ba:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <fly+0x1f8>)
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	61fb      	str	r3, [r7, #28]
  float angle_y = g_mpu6050.angle_y;
 80038c0:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <fly+0x1f8>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	61bb      	str	r3, [r7, #24]
  float angle_z = g_mpu6050.angle_z;
 80038c6:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <fly+0x1f8>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	617b      	str	r3, [r7, #20]
  float gyro_x = g_mpu6050.gx;
 80038cc:	4b74      	ldr	r3, [pc, #464]	; (8003aa0 <fly+0x1f8>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]
  float gyro_y = g_mpu6050.gy;
 80038d2:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <fly+0x1f8>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]
  float gyro_z = g_mpu6050.gz;
 80038d8:	4b71      	ldr	r3, [pc, #452]	; (8003aa0 <fly+0x1f8>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	60bb      	str	r3, [r7, #8]

  // Add remote control bias
  angle_y -= 0.5*g_pitch;
 80038de:	edd7 7a06 	vldr	s15, [r7, #24]
 80038e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <fly+0x200>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80038f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80038f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80038fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003900:	edc7 7a06 	vstr	s15, [r7, #24]
  angle_x -= 0.5*g_roll;
 8003904:	edd7 7a07 	vldr	s15, [r7, #28]
 8003908:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800390c:	4b67      	ldr	r3, [pc, #412]	; (8003aac <fly+0x204>)
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003916:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800391a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800391e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003922:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003926:	edc7 7a07 	vstr	s15, [r7, #28]
  angle_z -= 0.0*g_yaw;
 800392a:	edd7 7a05 	vldr	s15, [r7, #20]
 800392e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <fly+0x208>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800393c:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8003a98 <fly+0x1f0>
 8003940:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003944:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800394c:	edc7 7a05 	vstr	s15, [r7, #20]

  // Keep alive for the fly
  if (g_stick1 != 2) {
 8003950:	4b58      	ldr	r3, [pc, #352]	; (8003ab4 <fly+0x20c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d002      	beq.n	800395e <fly+0xb6>
    fly_mode = init;
 8003958:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <fly+0x210>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <fly+0x210>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b05      	cmp	r3, #5
 8003964:	f200 8414 	bhi.w	8004190 <fly+0x8e8>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <fly+0xc8>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003989 	.word	0x08003989
 8003974:	08003a4d 	.word	0x08003a4d
 8003978:	08004191 	.word	0x08004191
 800397c:	08003b09 	.word	0x08003b09
 8003980:	08004191 	.word	0x08004191
 8003984:	080040e3 	.word	0x080040e3
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <fly+0x214>)
 800398a:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <fly+0x218>)
 800398c:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 800398e:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <fly+0x21c>)
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8003996:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <fly+0x220>)
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 800399e:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <fly+0x224>)
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <fly+0x228>)
 80039a2:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <fly+0x22c>)
 80039a6:	4a46      	ldr	r2, [pc, #280]	; (8003ac0 <fly+0x218>)
 80039a8:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <fly+0x230>)
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 80039b2:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <fly+0x234>)
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <fly+0x238>)
 80039bc:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <fly+0x228>)
 80039be:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 80039c0:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <fly+0x23c>)
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <fly+0x240>)
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <fly+0x244>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 80039d8:	4b45      	ldr	r3, [pc, #276]	; (8003af0 <fly+0x248>)
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80039e0:	2364      	movs	r3, #100	; 0x64
 80039e2:	2264      	movs	r2, #100	; 0x64
 80039e4:	2164      	movs	r1, #100	; 0x64
 80039e6:	2064      	movs	r0, #100	; 0x64
 80039e8:	f7ff fa80 	bl	8002eec <set_speed>

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <fly+0x24c>)
 80039ee:	edd3 7a00 	vldr	s15, [r3]
 80039f2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003af8 <fly+0x250>
 80039f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	d900      	bls.n	8003a02 <fly+0x15a>
          && g_pitch <= MIN_PITCH && g_roll >= MIN_ROLL) {
        fly_mode = ready;
      }

      break;
 8003a00:	e3c6      	b.n	8004190 <fly+0x8e8>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <fly+0x208>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003af8 <fly+0x250>
 8003a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	d900      	bls.n	8003a18 <fly+0x170>
      break;
 8003a16:	e3bb      	b.n	8004190 <fly+0x8e8>
          && g_pitch <= MIN_PITCH && g_roll >= MIN_ROLL) {
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <fly+0x200>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003af8 <fly+0x250>
 8003a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d900      	bls.n	8003a2e <fly+0x186>
      break;
 8003a2c:	e3b0      	b.n	8004190 <fly+0x8e8>
          && g_pitch <= MIN_PITCH && g_roll >= MIN_ROLL) {
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <fly+0x204>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003af8 <fly+0x250>
 8003a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	da00      	bge.n	8003a44 <fly+0x19c>
      break;
 8003a42:	e3a5      	b.n	8004190 <fly+0x8e8>
        fly_mode = ready;
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <fly+0x210>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
      break;
 8003a4a:	e3a1      	b.n	8004190 <fly+0x8e8>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <fly+0x254>)
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <fly+0x258>)
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003a5c:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <fly+0x25c>)
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003a64:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8003a68:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003a6c:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8003a70:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8003a74:	f7ff fa3a 	bl	8002eec <set_speed>

      // Switch to fly mode
      if (g_throttle > 0) {
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <fly+0x24c>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a86:	dc00      	bgt.n	8003a8a <fly+0x1e2>
        fly_mode = moving;
      }

      break;
 8003a88:	e382      	b.n	8004190 <fly+0x8e8>
        fly_mode = moving;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <fly+0x210>)
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	701a      	strb	r2, [r3, #0]
      break;
 8003a90:	e37e      	b.n	8004190 <fly+0x8e8>
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
	...
 8003aa0:	24001360 	.word	0x24001360
 8003aa4:	24001488 	.word	0x24001488
 8003aa8:	24001858 	.word	0x24001858
 8003aac:	2400185c 	.word	0x2400185c
 8003ab0:	24001860 	.word	0x24001860
 8003ab4:	2400186c 	.word	0x2400186c
 8003ab8:	24001798 	.word	0x24001798
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	3f99999a 	.word	0x3f99999a
 8003ac4:	2400187c 	.word	0x2400187c
 8003ac8:	24001880 	.word	0x24001880
 8003acc:	24000004 	.word	0x24000004
 8003ad0:	3ecccccd 	.word	0x3ecccccd
 8003ad4:	24000008 	.word	0x24000008
 8003ad8:	24001884 	.word	0x24001884
 8003adc:	24001888 	.word	0x24001888
 8003ae0:	2400000c 	.word	0x2400000c
 8003ae4:	2400188c 	.word	0x2400188c
 8003ae8:	24001890 	.word	0x24001890
 8003aec:	24001894 	.word	0x24001894
 8003af0:	24001898 	.word	0x24001898
 8003af4:	24001854 	.word	0x24001854
 8003af8:	c3470000 	.word	0xc3470000
 8003afc:	240017a4 	.word	0x240017a4
 8003b00:	240017b4 	.word	0x240017b4
 8003b04:	240017c4 	.word	0x240017c4
    case holding:

      break;
    case moving:
      g_P_pitch = limit(angle_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003b08:	4bdd      	ldr	r3, [pc, #884]	; (8003e80 <fly+0x5d8>)
 8003b0a:	ed93 7a00 	vldr	s14, [r3]
 8003b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	ed9f 1adb 	vldr	s2, [pc, #876]	; 8003e84 <fly+0x5dc>
 8003b1a:	eddf 0adb 	vldr	s1, [pc, #876]	; 8003e88 <fly+0x5e0>
 8003b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b22:	f7fe fb3b 	bl	800219c <limit>
 8003b26:	eef0 7a40 	vmov.f32	s15, s0
 8003b2a:	4bd8      	ldr	r3, [pc, #864]	; (8003e8c <fly+0x5e4>)
 8003b2c:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8003b30:	4bd7      	ldr	r3, [pc, #860]	; (8003e90 <fly+0x5e8>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b42:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8003e78 <fly+0x5d0>
 8003b46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b52:	4bcf      	ldr	r3, [pc, #828]	; (8003e90 <fly+0x5e8>)
 8003b54:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = limit(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8003b58:	4bcd      	ldr	r3, [pc, #820]	; (8003e90 <fly+0x5e8>)
 8003b5a:	ed93 7a00 	vldr	s14, [r3]
 8003b5e:	4bcd      	ldr	r3, [pc, #820]	; (8003e94 <fly+0x5ec>)
 8003b60:	edd3 7a00 	vldr	s15, [r3]
 8003b64:	ed9f 6acc 	vldr	s12, [pc, #816]	; 8003e98 <fly+0x5f0>
 8003b68:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003b6c:	4bc9      	ldr	r3, [pc, #804]	; (8003e94 <fly+0x5ec>)
 8003b6e:	edd3 7a00 	vldr	s15, [r3]
 8003b72:	eddf 5aca 	vldr	s11, [pc, #808]	; 8003e9c <fly+0x5f4>
 8003b76:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003b7a:	eeb0 1a46 	vmov.f32	s2, s12
 8003b7e:	eef0 0a66 	vmov.f32	s1, s13
 8003b82:	eeb0 0a47 	vmov.f32	s0, s14
 8003b86:	f7fe fb09 	bl	800219c <limit>
 8003b8a:	eef0 7a40 	vmov.f32	s15, s0
 8003b8e:	4bc0      	ldr	r3, [pc, #768]	; (8003e90 <fly+0x5e8>)
 8003b90:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8003b94:	4bbe      	ldr	r3, [pc, #760]	; (8003e90 <fly+0x5e8>)
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	4bbe      	ldr	r3, [pc, #760]	; (8003e94 <fly+0x5ec>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	4bbe      	ldr	r3, [pc, #760]	; (8003ea0 <fly+0x5f8>)
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = limit(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8003baa:	4bbe      	ldr	r3, [pc, #760]	; (8003ea4 <fly+0x5fc>)
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 8003e84 <fly+0x5dc>
 8003bbc:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8003e88 <fly+0x5e0>
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	f7fe faea 	bl	800219c <limit>
 8003bc8:	eef0 7a40 	vmov.f32	s15, s0
 8003bcc:	4bb6      	ldr	r3, [pc, #728]	; (8003ea8 <fly+0x600>)
 8003bce:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = limit(angle_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8003bd2:	4bb6      	ldr	r3, [pc, #728]	; (8003eac <fly+0x604>)
 8003bd4:	ed93 7a00 	vldr	s14, [r3]
 8003bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be0:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8003e84 <fly+0x5dc>
 8003be4:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8003e88 <fly+0x5e0>
 8003be8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bec:	f7fe fad6 	bl	800219c <limit>
 8003bf0:	eef0 7a40 	vmov.f32	s15, s0
 8003bf4:	4bae      	ldr	r3, [pc, #696]	; (8003eb0 <fly+0x608>)
 8003bf6:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_x*I_ROLL_PERIOD;
 8003bfa:	4bae      	ldr	r3, [pc, #696]	; (8003eb4 <fly+0x60c>)
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c0c:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8003e78 <fly+0x5d0>
 8003c10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003c14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c1c:	4ba5      	ldr	r3, [pc, #660]	; (8003eb4 <fly+0x60c>)
 8003c1e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = limit(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8003c22:	4ba4      	ldr	r3, [pc, #656]	; (8003eb4 <fly+0x60c>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	4ba3      	ldr	r3, [pc, #652]	; (8003eb8 <fly+0x610>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 8003e98 <fly+0x5f0>
 8003c32:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003c36:	4ba0      	ldr	r3, [pc, #640]	; (8003eb8 <fly+0x610>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eddf 5a97 	vldr	s11, [pc, #604]	; 8003e9c <fly+0x5f4>
 8003c40:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003c44:	eeb0 1a46 	vmov.f32	s2, s12
 8003c48:	eef0 0a66 	vmov.f32	s1, s13
 8003c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c50:	f7fe faa4 	bl	800219c <limit>
 8003c54:	eef0 7a40 	vmov.f32	s15, s0
 8003c58:	4b96      	ldr	r3, [pc, #600]	; (8003eb4 <fly+0x60c>)
 8003c5a:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8003c5e:	4b95      	ldr	r3, [pc, #596]	; (8003eb4 <fly+0x60c>)
 8003c60:	ed93 7a00 	vldr	s14, [r3]
 8003c64:	4b94      	ldr	r3, [pc, #592]	; (8003eb8 <fly+0x610>)
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	4b93      	ldr	r3, [pc, #588]	; (8003ebc <fly+0x614>)
 8003c70:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = limit(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8003c74:	4b92      	ldr	r3, [pc, #584]	; (8003ec0 <fly+0x618>)
 8003c76:	ed93 7a00 	vldr	s14, [r3]
 8003c7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8003e84 <fly+0x5dc>
 8003c86:	eddf 0a80 	vldr	s1, [pc, #512]	; 8003e88 <fly+0x5e0>
 8003c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8e:	f7fe fa85 	bl	800219c <limit>
 8003c92:	eef0 7a40 	vmov.f32	s15, s0
 8003c96:	4b8b      	ldr	r3, [pc, #556]	; (8003ec4 <fly+0x61c>)
 8003c98:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = limit(angle_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8003c9c:	4b8a      	ldr	r3, [pc, #552]	; (8003ec8 <fly+0x620>)
 8003c9e:	ed93 7a00 	vldr	s14, [r3]
 8003ca2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8003cae:	eefa 0a04 	vmov.f32	s1, #164	; 0xc1200000 -10.0
 8003cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb6:	f7fe fa71 	bl	800219c <limit>
 8003cba:	eef0 7a40 	vmov.f32	s15, s0
 8003cbe:	4b83      	ldr	r3, [pc, #524]	; (8003ecc <fly+0x624>)
 8003cc0:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*I_YAW_PERIOD;
 8003cc4:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <fly+0x628>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd6:	ed9f 5b68 	vldr	d5, [pc, #416]	; 8003e78 <fly+0x5d0>
 8003cda:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003cde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ce6:	4b7a      	ldr	r3, [pc, #488]	; (8003ed0 <fly+0x628>)
 8003ce8:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = limit(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8003cec:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <fly+0x628>)
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <fly+0x62c>)
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	eeba 6a04 	vmov.f32	s12, #164	; 0xc1200000 -10.0
 8003cfc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003d00:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <fly+0x62c>)
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8003d0a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003d0e:	eeb0 1a46 	vmov.f32	s2, s12
 8003d12:	eef0 0a66 	vmov.f32	s1, s13
 8003d16:	eeb0 0a47 	vmov.f32	s0, s14
 8003d1a:	f7fe fa3f 	bl	800219c <limit>
 8003d1e:	eef0 7a40 	vmov.f32	s15, s0
 8003d22:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <fly+0x628>)
 8003d24:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <fly+0x628>)
 8003d2a:	ed93 7a00 	vldr	s14, [r3]
 8003d2e:	4b69      	ldr	r3, [pc, #420]	; (8003ed4 <fly+0x62c>)
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d38:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <fly+0x630>)
 8003d3a:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = limit(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003d3e:	4b67      	ldr	r3, [pc, #412]	; (8003edc <fly+0x634>)
 8003d40:	ed93 7a00 	vldr	s14, [r3]
 8003d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8003d50:	eefa 0a04 	vmov.f32	s1, #164	; 0xc1200000 -10.0
 8003d54:	eeb0 0a67 	vmov.f32	s0, s15
 8003d58:	f7fe fa20 	bl	800219c <limit>
 8003d5c:	eef0 7a40 	vmov.f32	s15, s0
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <fly+0x638>)
 8003d62:	edc3 7a00 	vstr	s15, [r3]

      int throttle = MIN_SPEED + (int)(10.0f*sqrt(g_throttle));
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <fly+0x63c>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d70:	eeb0 0b47 	vmov.f64	d0, d7
 8003d74:	f00a fb38 	bl	800e3e8 <sqrt>
 8003d78:	eeb0 7b40 	vmov.f64	d7, d0
 8003d7c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d88:	ee17 3a90 	vmov	r3, s15
 8003d8c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8003d90:	607b      	str	r3, [r7, #4]

      g_sig1 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <fly+0x5e4>)
 8003d9e:	edd3 6a00 	vldr	s13, [r3]
 8003da2:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <fly+0x5f8>)
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <fly+0x600>)
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <fly+0x608>)
 8003dbc:	edd3 6a00 	vldr	s13, [r3]
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <fly+0x614>)
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <fly+0x61c>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <fly+0x624>)
 8003dda:	edd3 6a00 	vldr	s13, [r3]
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <fly+0x630>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003de8:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <fly+0x638>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <fly+0x640>)
 8003df8:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <fly+0x5e4>)
 8003e08:	edd3 6a00 	vldr	s13, [r3]
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <fly+0x5f8>)
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <fly+0x600>)
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <fly+0x608>)
 8003e26:	edd3 6a00 	vldr	s13, [r3]
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <fly+0x614>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e34:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <fly+0x61c>)
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <fly+0x624>)
 8003e44:	edd3 6a00 	vldr	s13, [r3]
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <fly+0x630>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <fly+0x638>)
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <fly+0x644>)
 8003e62:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e70:	e03e      	b.n	8003ef0 <fly+0x648>
 8003e72:	bf00      	nop
 8003e74:	f3af 8000 	nop.w
	...
 8003e80:	24000000 	.word	0x24000000
 8003e84:	42c80000 	.word	0x42c80000
 8003e88:	c2c80000 	.word	0xc2c80000
 8003e8c:	2400179c 	.word	0x2400179c
 8003e90:	240017a4 	.word	0x240017a4
 8003e94:	2400187c 	.word	0x2400187c
 8003e98:	c2480000 	.word	0xc2480000
 8003e9c:	42480000 	.word	0x42480000
 8003ea0:	240017a0 	.word	0x240017a0
 8003ea4:	24000004 	.word	0x24000004
 8003ea8:	240017a8 	.word	0x240017a8
 8003eac:	24000008 	.word	0x24000008
 8003eb0:	240017ac 	.word	0x240017ac
 8003eb4:	240017b4 	.word	0x240017b4
 8003eb8:	24001884 	.word	0x24001884
 8003ebc:	240017b0 	.word	0x240017b0
 8003ec0:	2400000c 	.word	0x2400000c
 8003ec4:	240017b8 	.word	0x240017b8
 8003ec8:	2400188c 	.word	0x2400188c
 8003ecc:	240017bc 	.word	0x240017bc
 8003ed0:	240017c4 	.word	0x240017c4
 8003ed4:	24001890 	.word	0x24001890
 8003ed8:	240017c0 	.word	0x240017c0
 8003edc:	24001898 	.word	0x24001898
 8003ee0:	240017c8 	.word	0x240017c8
 8003ee4:	24001854 	.word	0x24001854
 8003ee8:	240017cc 	.word	0x240017cc
 8003eec:	240017d0 	.word	0x240017d0
 8003ef0:	4bba      	ldr	r3, [pc, #744]	; (80041dc <fly+0x934>)
 8003ef2:	edd3 6a00 	vldr	s13, [r3]
 8003ef6:	4bba      	ldr	r3, [pc, #744]	; (80041e0 <fly+0x938>)
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f00:	4bb8      	ldr	r3, [pc, #736]	; (80041e4 <fly+0x93c>)
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f0e:	4bb6      	ldr	r3, [pc, #728]	; (80041e8 <fly+0x940>)
 8003f10:	edd3 6a00 	vldr	s13, [r3]
 8003f14:	4bb5      	ldr	r3, [pc, #724]	; (80041ec <fly+0x944>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f1e:	4bb4      	ldr	r3, [pc, #720]	; (80041f0 <fly+0x948>)
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f2c:	4bb1      	ldr	r3, [pc, #708]	; (80041f4 <fly+0x94c>)
 8003f2e:	edd3 6a00 	vldr	s13, [r3]
 8003f32:	4bb1      	ldr	r3, [pc, #708]	; (80041f8 <fly+0x950>)
 8003f34:	edd3 7a00 	vldr	s15, [r3]
 8003f38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f3c:	4baf      	ldr	r3, [pc, #700]	; (80041fc <fly+0x954>)
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	4bad      	ldr	r3, [pc, #692]	; (8004200 <fly+0x958>)
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5a:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <fly+0x934>)
 8003f5c:	edd3 6a00 	vldr	s13, [r3]
 8003f60:	4b9f      	ldr	r3, [pc, #636]	; (80041e0 <fly+0x938>)
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f6a:	4b9e      	ldr	r3, [pc, #632]	; (80041e4 <fly+0x93c>)
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f78:	4b9b      	ldr	r3, [pc, #620]	; (80041e8 <fly+0x940>)
 8003f7a:	edd3 6a00 	vldr	s13, [r3]
 8003f7e:	4b9b      	ldr	r3, [pc, #620]	; (80041ec <fly+0x944>)
 8003f80:	edd3 7a00 	vldr	s15, [r3]
 8003f84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f88:	4b99      	ldr	r3, [pc, #612]	; (80041f0 <fly+0x948>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f96:	4b97      	ldr	r3, [pc, #604]	; (80041f4 <fly+0x94c>)
 8003f98:	edd3 6a00 	vldr	s13, [r3]
 8003f9c:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <fly+0x950>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003fa6:	4b95      	ldr	r3, [pc, #596]	; (80041fc <fly+0x954>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb4:	4b93      	ldr	r3, [pc, #588]	; (8004204 <fly+0x95c>)
 8003fb6:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003fba:	4b93      	ldr	r3, [pc, #588]	; (8004208 <fly+0x960>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	ed9f 1a92 	vldr	s2, [pc, #584]	; 800420c <fly+0x964>
 8003fc4:	eddf 0a92 	vldr	s1, [pc, #584]	; 8004210 <fly+0x968>
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	f7fe f8e6 	bl	800219c <limit>
 8003fd0:	eef0 7a40 	vmov.f32	s15, s0
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <fly+0x960>)
 8003fd6:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003fda:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <fly+0x96c>)
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800420c <fly+0x964>
 8003fe4:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8004210 <fly+0x968>
 8003fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fec:	f7fe f8d6 	bl	800219c <limit>
 8003ff0:	eef0 7a40 	vmov.f32	s15, s0
 8003ff4:	4b87      	ldr	r3, [pc, #540]	; (8004214 <fly+0x96c>)
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <fly+0x958>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ed9f 1a82 	vldr	s2, [pc, #520]	; 800420c <fly+0x964>
 8004004:	eddf 0a82 	vldr	s1, [pc, #520]	; 8004210 <fly+0x968>
 8004008:	eeb0 0a67 	vmov.f32	s0, s15
 800400c:	f7fe f8c6 	bl	800219c <limit>
 8004010:	eef0 7a40 	vmov.f32	s15, s0
 8004014:	4b7a      	ldr	r3, [pc, #488]	; (8004200 <fly+0x958>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 800401a:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <fly+0x95c>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 800420c <fly+0x964>
 8004024:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8004210 <fly+0x968>
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	f7fe f8b6 	bl	800219c <limit>
 8004030:	eef0 7a40 	vmov.f32	s15, s0
 8004034:	4b73      	ldr	r3, [pc, #460]	; (8004204 <fly+0x95c>)
 8004036:	edc3 7a00 	vstr	s15, [r3]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <fly+0x960>)
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004044:	4b73      	ldr	r3, [pc, #460]	; (8004214 <fly+0x96c>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <fly+0x958>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004058:	4b6a      	ldr	r3, [pc, #424]	; (8004204 <fly+0x95c>)
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004062:	ee17 3a90 	vmov	r3, s15
 8004066:	ee16 2a10 	vmov	r2, s12
 800406a:	ee16 1a90 	vmov	r1, s13
 800406e:	ee17 0a10 	vmov	r0, s14
 8004072:	f7fe ff3b 	bl	8002eec <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8004076:	4b68      	ldr	r3, [pc, #416]	; (8004218 <fly+0x970>)
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800421c <fly+0x974>
 8004080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004088:	d802      	bhi.n	8004090 <fly+0x7e8>
        fly_mode = init;
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <fly+0x978>)
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed)
      if (angle_x < -70 || angle_x > 70 || angle_y < -70 || angle_y > 70) {
 8004090:	edd7 7a07 	vldr	s15, [r7, #28]
 8004094:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004224 <fly+0x97c>
 8004098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	d41b      	bmi.n	80040da <fly+0x832>
 80040a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80040a6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004228 <fly+0x980>
 80040aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	dc12      	bgt.n	80040da <fly+0x832>
 80040b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80040b8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004224 <fly+0x97c>
 80040bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c4:	d409      	bmi.n	80040da <fly+0x832>
 80040c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ca:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004228 <fly+0x980>
 80040ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	dc00      	bgt.n	80040da <fly+0x832>
        fly_mode = init;
      }

      break;
 80040d8:	e05a      	b.n	8004190 <fly+0x8e8>
        fly_mode = init;
 80040da:	4b51      	ldr	r3, [pc, #324]	; (8004220 <fly+0x978>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
      break;
 80040e0:	e056      	b.n	8004190 <fly+0x8e8>
    case landing:

      break;
    case testing:
      g_sig1 = MIN_SPEED + 6*g_throttle;
 80040e2:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <fly+0x970>)
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80040ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004210 <fly+0x968>
 80040f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <fly+0x960>)
 80040fa:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + 6*g_throttle;
 80040fe:	4b46      	ldr	r3, [pc, #280]	; (8004218 <fly+0x970>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004210 <fly+0x968>
 8004110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004114:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <fly+0x96c>)
 8004116:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + 6*g_throttle;
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <fly+0x970>)
 800411c:	edd3 7a00 	vldr	s15, [r3]
 8004120:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004128:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004210 <fly+0x968>
 800412c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004130:	4b33      	ldr	r3, [pc, #204]	; (8004200 <fly+0x958>)
 8004132:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + 6*g_throttle;
 8004136:	4b38      	ldr	r3, [pc, #224]	; (8004218 <fly+0x970>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004144:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004210 <fly+0x968>
 8004148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <fly+0x95c>)
 800414e:	edc3 7a00 	vstr	s15, [r3]
      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <fly+0x960>)
 8004154:	edd3 7a00 	vldr	s15, [r3]
 8004158:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <fly+0x96c>)
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <fly+0x958>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <fly+0x95c>)
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 3a90 	vmov	r3, s15
 800417e:	ee16 2a10 	vmov	r2, s12
 8004182:	ee16 1a90 	vmov	r1, s13
 8004186:	ee17 0a10 	vmov	r0, s14
 800418a:	f7fe feaf 	bl	8002eec <set_speed>
      break;
 800418e:	bf00      	nop
  }

#if MONITOR == 1
  monitor[0] = angle_x;
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <fly+0x984>)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	6013      	str	r3, [r2, #0]
  monitor[1] = angle_y;
 8004196:	4a25      	ldr	r2, [pc, #148]	; (800422c <fly+0x984>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6053      	str	r3, [r2, #4]
  monitor[2] = angle_z;
 800419c:	4a23      	ldr	r2, [pc, #140]	; (800422c <fly+0x984>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	6093      	str	r3, [r2, #8]
  monitor[3] = gyro_x;
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <fly+0x984>)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	60d3      	str	r3, [r2, #12]
  monitor[4] = gyro_y;
 80041a8:	4a20      	ldr	r2, [pc, #128]	; (800422c <fly+0x984>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6113      	str	r3, [r2, #16]
  monitor[5] = gyro_z;
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <fly+0x984>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6153      	str	r3, [r2, #20]
  monitor[6] = g_ms5611.altitude;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <fly+0x988>)
 80041b6:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80041ba:	4a1c      	ldr	r2, [pc, #112]	; (800422c <fly+0x984>)
 80041bc:	6193      	str	r3, [r2, #24]
  monitor[7] = g_ms5611.altitude;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <fly+0x988>)
 80041c0:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80041c4:	4a19      	ldr	r2, [pc, #100]	; (800422c <fly+0x984>)
 80041c6:	61d3      	str	r3, [r2, #28]
  monitor[8] = g_ms5611.altitude;
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <fly+0x988>)
 80041ca:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <fly+0x984>)
 80041d0:	6213      	str	r3, [r2, #32]
  monitor[2] = g_sig1 > g_sig2 ? g_sig2 : g_sig1;
  monitor[3] = g_sig3;
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif
}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2400179c 	.word	0x2400179c
 80041e0:	240017a0 	.word	0x240017a0
 80041e4:	240017a8 	.word	0x240017a8
 80041e8:	240017ac 	.word	0x240017ac
 80041ec:	240017b0 	.word	0x240017b0
 80041f0:	240017b8 	.word	0x240017b8
 80041f4:	240017bc 	.word	0x240017bc
 80041f8:	240017c0 	.word	0x240017c0
 80041fc:	240017c8 	.word	0x240017c8
 8004200:	240017d4 	.word	0x240017d4
 8004204:	240017d8 	.word	0x240017d8
 8004208:	240017cc 	.word	0x240017cc
 800420c:	45160000 	.word	0x45160000
 8004210:	44af0000 	.word	0x44af0000
 8004214:	240017d0 	.word	0x240017d0
 8004218:	24001854 	.word	0x24001854
 800421c:	c3470000 	.word	0xc3470000
 8004220:	24001798 	.word	0x24001798
 8004224:	c28c0000 	.word	0xc28c0000
 8004228:	428c0000 	.word	0x428c0000
 800422c:	2400189c 	.word	0x2400189c
 8004230:	24001488 	.word	0x24001488

08004234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <_sbrk+0x5c>)
 800423e:	4b15      	ldr	r3, [pc, #84]	; (8004294 <_sbrk+0x60>)
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <_sbrk+0x64>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <_sbrk+0x64>)
 8004252:	4a12      	ldr	r2, [pc, #72]	; (800429c <_sbrk+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d207      	bcs.n	8004274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004264:	f008 ffa8 	bl	800d1b8 <__errno>
 8004268:	4603      	mov	r3, r0
 800426a:	220c      	movs	r2, #12
 800426c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004272:	e009      	b.n	8004288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_sbrk+0x64>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <_sbrk+0x64>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <_sbrk+0x64>)
 8004284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	24080000 	.word	0x24080000
 8004294:	00000400 	.word	0x00000400
 8004298:	240018c0 	.word	0x240018c0
 800429c:	240018d8 	.word	0x240018d8

080042a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042a4:	4b39      	ldr	r3, [pc, #228]	; (800438c <SystemInit+0xec>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	4a38      	ldr	r2, [pc, #224]	; (800438c <SystemInit+0xec>)
 80042ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <SystemInit+0xf0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d807      	bhi.n	80042d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042c0:	4b33      	ldr	r3, [pc, #204]	; (8004390 <SystemInit+0xf0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 030f 	bic.w	r3, r3, #15
 80042c8:	4a31      	ldr	r2, [pc, #196]	; (8004390 <SystemInit+0xf0>)
 80042ca:	f043 0307 	orr.w	r3, r3, #7
 80042ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80042d0:	4b30      	ldr	r3, [pc, #192]	; (8004394 <SystemInit+0xf4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <SystemInit+0xf4>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <SystemInit+0xf4>)
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80042e2:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <SystemInit+0xf4>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	492b      	ldr	r1, [pc, #172]	; (8004394 <SystemInit+0xf4>)
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <SystemInit+0xf8>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <SystemInit+0xf0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <SystemInit+0xf0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 030f 	bic.w	r3, r3, #15
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <SystemInit+0xf0>)
 8004304:	f043 0307 	orr.w	r3, r3, #7
 8004308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <SystemInit+0xf4>)
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <SystemInit+0xf4>)
 8004312:	2200      	movs	r2, #0
 8004314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <SystemInit+0xf4>)
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <SystemInit+0xf4>)
 800431e:	4a1f      	ldr	r2, [pc, #124]	; (800439c <SystemInit+0xfc>)
 8004320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <SystemInit+0xf4>)
 8004324:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <SystemInit+0x100>)
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <SystemInit+0xf4>)
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <SystemInit+0x104>)
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <SystemInit+0xf4>)
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004334:	4b17      	ldr	r3, [pc, #92]	; (8004394 <SystemInit+0xf4>)
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <SystemInit+0x104>)
 8004338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <SystemInit+0xf4>)
 800433c:	2200      	movs	r2, #0
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <SystemInit+0xf4>)
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <SystemInit+0x104>)
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <SystemInit+0xf4>)
 8004348:	2200      	movs	r2, #0
 800434a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <SystemInit+0xf4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a10      	ldr	r2, [pc, #64]	; (8004394 <SystemInit+0xf4>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <SystemInit+0xf4>)
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <SystemInit+0x108>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <SystemInit+0x10c>)
 8004364:	4013      	ands	r3, r2
 8004366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436a:	d202      	bcs.n	8004372 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <SystemInit+0x110>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <SystemInit+0x114>)
 8004374:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004378:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800437a:	4b04      	ldr	r3, [pc, #16]	; (800438c <SystemInit+0xec>)
 800437c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004380:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00
 8004390:	52002000 	.word	0x52002000
 8004394:	58024400 	.word	0x58024400
 8004398:	eaf6ed7f 	.word	0xeaf6ed7f
 800439c:	02020200 	.word	0x02020200
 80043a0:	01ff0000 	.word	0x01ff0000
 80043a4:	01010280 	.word	0x01010280
 80043a8:	5c001000 	.word	0x5c001000
 80043ac:	ffff0000 	.word	0xffff0000
 80043b0:	51008108 	.word	0x51008108
 80043b4:	52004000 	.word	0x52004000

080043b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043bc:	f7ff ff70 	bl	80042a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043c2:	e003      	b.n	80043cc <LoopCopyDataInit>

080043c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80043c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043ca:	3104      	adds	r1, #4

080043cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043cc:	480a      	ldr	r0, [pc, #40]	; (80043f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80043d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043d4:	d3f6      	bcc.n	80043c4 <CopyDataInit>
  ldr  r2, =_sbss
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80043d8:	e002      	b.n	80043e0 <LoopFillZerobss>

080043da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043dc:	f842 3b04 	str.w	r3, [r2], #4

080043e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80043e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043e4:	d3f9      	bcc.n	80043da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043e6:	f008 feed 	bl	800d1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ea:	f7fc fcbb 	bl	8000d64 <main>
  bx  lr    
 80043ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80043f4:	080110d8 	.word	0x080110d8
  ldr  r0, =_sdata
 80043f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80043fc:	24000088 	.word	0x24000088
  ldr  r2, =_sbss
 8004400:	24000088 	.word	0x24000088
  ldr  r3, = _ebss
 8004404:	240018d8 	.word	0x240018d8

08004408 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004408:	e7fe      	b.n	8004408 <ADC3_IRQHandler>
	...

0800440c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004412:	2003      	movs	r0, #3
 8004414:	f000 f98c 	bl	8004730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004418:	f002 fe4e 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <HAL_Init+0x68>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	4913      	ldr	r1, [pc, #76]	; (8004478 <HAL_Init+0x6c>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_Init+0x68>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <HAL_Init+0x6c>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <HAL_Init+0x70>)
 800444e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004450:	4a0b      	ldr	r2, [pc, #44]	; (8004480 <HAL_Init+0x74>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004456:	2000      	movs	r0, #0
 8004458:	f000 f814 	bl	8004484 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e002      	b.n	800446c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004466:	f7fe fab7 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	58024400 	.word	0x58024400
 8004478:	0800f358 	.word	0x0800f358
 800447c:	24000018 	.word	0x24000018
 8004480:	24000014 	.word	0x24000014

08004484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_InitTick+0x60>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e021      	b.n	80044dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_InitTick+0x64>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_InitTick+0x60>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f971 	bl	8004796 <HAL_SYSTICK_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e00e      	b.n	80044dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	d80a      	bhi.n	80044da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044c4:	2200      	movs	r2, #0
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044cc:	f000 f93b 	bl	8004746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044d0:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_InitTick+0x68>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	24000020 	.word	0x24000020
 80044e8:	24000014 	.word	0x24000014
 80044ec:	2400001c 	.word	0x2400001c

080044f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_IncTick+0x20>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_IncTick+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_IncTick+0x24>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	24000020 	.word	0x24000020
 8004514:	240018c4 	.word	0x240018c4

08004518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return uwTick;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_GetTick+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	240018c4 	.word	0x240018c4

08004530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7ff ffee 	bl	8004518 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004548:	d005      	beq.n	8004556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_Delay+0x44>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004556:	bf00      	nop
 8004558:	f7ff ffde 	bl	8004518 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	429a      	cmp	r2, r3
 8004566:	d8f7      	bhi.n	8004558 <HAL_Delay+0x28>
  {
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	24000020 	.word	0x24000020

08004578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_GetREVID+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0c1b      	lsrs	r3, r3, #16
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	5c001000 	.word	0x5c001000

08004590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ac:	4013      	ands	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	60d3      	str	r3, [r2, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00
 80045d4:	05fa0000 	.word	0x05fa0000

080045d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <__NVIC_GetPriorityGrouping+0x18>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	f003 0307 	and.w	r3, r3, #7
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db0b      	blt.n	800461e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <__NVIC_EnableIRQ+0x38>)
 800460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2001      	movs	r0, #1
 8004616:	fa00 f202 	lsl.w	r2, r0, r2
 800461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000e100 	.word	0xe000e100

08004630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800463c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db0a      	blt.n	800465a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <__NVIC_SetPriority+0x4c>)
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	440b      	add	r3, r1
 8004654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004658:	e00a      	b.n	8004670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <__NVIC_SetPriority+0x50>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3b04      	subs	r3, #4
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	440b      	add	r3, r1
 800466e:	761a      	strb	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000e100 	.word	0xe000e100
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf28      	it	cs
 80046a2:	2304      	movcs	r3, #4
 80046a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d902      	bls.n	80046b4 <NVIC_EncodePriority+0x30>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b03      	subs	r3, #3
 80046b2:	e000      	b.n	80046b6 <NVIC_EncodePriority+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	401a      	ands	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	4313      	orrs	r3, r2
         );
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fc:	d301      	bcc.n	8004702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <SysTick_Config+0x40>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470a:	210f      	movs	r1, #15
 800470c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004710:	f7ff ff8e 	bl	8004630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <SysTick_Config+0x40>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <SysTick_Config+0x40>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010

08004730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff29 	bl	8004590 <__NVIC_SetPriorityGrouping>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff40 	bl	80045d8 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff90 	bl	8004684 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5f 	bl	8004630 <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff33 	bl	80045f4 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffa4 	bl	80046ec <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7ff feae 	bl	8004518 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e2dc      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e2cd      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a76      	ldr	r2, [pc, #472]	; (80049c4 <HAL_DMA_Abort+0x214>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a74      	ldr	r2, [pc, #464]	; (80049c8 <HAL_DMA_Abort+0x218>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_DMA_Abort+0x21c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a71      	ldr	r2, [pc, #452]	; (80049d0 <HAL_DMA_Abort+0x220>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a70      	ldr	r2, [pc, #448]	; (80049d4 <HAL_DMA_Abort+0x224>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_DMA_Abort+0x228>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6d      	ldr	r2, [pc, #436]	; (80049dc <HAL_DMA_Abort+0x22c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6b      	ldr	r2, [pc, #428]	; (80049e0 <HAL_DMA_Abort+0x230>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6a      	ldr	r2, [pc, #424]	; (80049e4 <HAL_DMA_Abort+0x234>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_DMA_Abort+0x238>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_DMA_Abort+0x23c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_DMA_Abort+0x240>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a64      	ldr	r2, [pc, #400]	; (80049f4 <HAL_DMA_Abort+0x244>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a62      	ldr	r2, [pc, #392]	; (80049f8 <HAL_DMA_Abort+0x248>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a61      	ldr	r2, [pc, #388]	; (80049fc <HAL_DMA_Abort+0x24c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5f      	ldr	r2, [pc, #380]	; (8004a00 <HAL_DMA_Abort+0x250>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_DMA_Abort+0xda>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_DMA_Abort+0xdc>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 021e 	bic.w	r2, r2, #30
 800489e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e00a      	b.n	80048ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 020e 	bic.w	r2, r2, #14
 80048c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <HAL_DMA_Abort+0x214>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d072      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3a      	ldr	r2, [pc, #232]	; (80049c8 <HAL_DMA_Abort+0x218>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d06d      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a39      	ldr	r2, [pc, #228]	; (80049cc <HAL_DMA_Abort+0x21c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d068      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_DMA_Abort+0x220>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d063      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <HAL_DMA_Abort+0x224>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d05e      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a34      	ldr	r2, [pc, #208]	; (80049d8 <HAL_DMA_Abort+0x228>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d059      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_DMA_Abort+0x22c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d054      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_DMA_Abort+0x230>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d04f      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_DMA_Abort+0x234>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_DMA_Abort+0x238>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_DMA_Abort+0x23c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_DMA_Abort+0x240>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_DMA_Abort+0x244>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_DMA_Abort+0x248>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_DMA_Abort+0x24c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <HAL_DMA_Abort+0x250>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <HAL_DMA_Abort+0x254>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <HAL_DMA_Abort+0x258>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <HAL_DMA_Abort+0x25c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_DMA_Abort+0x260>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_DMA_Abort+0x264>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_DMA_Abort+0x268>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_DMA_Abort+0x26c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_DMA_Abort+0x270>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d132      	bne.n	8004a24 <HAL_DMA_Abort+0x274>
 80049be:	2301      	movs	r3, #1
 80049c0:	e031      	b.n	8004a26 <HAL_DMA_Abort+0x276>
 80049c2:	bf00      	nop
 80049c4:	40020010 	.word	0x40020010
 80049c8:	40020028 	.word	0x40020028
 80049cc:	40020040 	.word	0x40020040
 80049d0:	40020058 	.word	0x40020058
 80049d4:	40020070 	.word	0x40020070
 80049d8:	40020088 	.word	0x40020088
 80049dc:	400200a0 	.word	0x400200a0
 80049e0:	400200b8 	.word	0x400200b8
 80049e4:	40020410 	.word	0x40020410
 80049e8:	40020428 	.word	0x40020428
 80049ec:	40020440 	.word	0x40020440
 80049f0:	40020458 	.word	0x40020458
 80049f4:	40020470 	.word	0x40020470
 80049f8:	40020488 	.word	0x40020488
 80049fc:	400204a0 	.word	0x400204a0
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	58025408 	.word	0x58025408
 8004a08:	5802541c 	.word	0x5802541c
 8004a0c:	58025430 	.word	0x58025430
 8004a10:	58025444 	.word	0x58025444
 8004a14:	58025458 	.word	0x58025458
 8004a18:	5802546c 	.word	0x5802546c
 8004a1c:	58025480 	.word	0x58025480
 8004a20:	58025494 	.word	0x58025494
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <HAL_DMA_Abort+0x444>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d04a      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <HAL_DMA_Abort+0x448>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d045      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_DMA_Abort+0x44c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d040      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_DMA_Abort+0x450>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d03b      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a67      	ldr	r2, [pc, #412]	; (8004c04 <HAL_DMA_Abort+0x454>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d036      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_DMA_Abort+0x458>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d031      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_DMA_Abort+0x45c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d02c      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a62      	ldr	r2, [pc, #392]	; (8004c10 <HAL_DMA_Abort+0x460>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <HAL_DMA_Abort+0x464>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5f      	ldr	r2, [pc, #380]	; (8004c18 <HAL_DMA_Abort+0x468>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5e      	ldr	r2, [pc, #376]	; (8004c1c <HAL_DMA_Abort+0x46c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5c      	ldr	r2, [pc, #368]	; (8004c20 <HAL_DMA_Abort+0x470>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_DMA_Abort+0x474>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <HAL_DMA_Abort+0x478>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_DMA_Abort+0x47c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_DMA_Abort+0x480>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_Abort+0x33c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e007      	b.n	8004afc <HAL_DMA_Abort+0x34c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004afc:	e013      	b.n	8004b26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004afe:	f7ff fd0b 	bl	8004518 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d90c      	bls.n	8004b26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2203      	movs	r2, #3
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e12d      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e5      	bne.n	8004afe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <HAL_DMA_Abort+0x444>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d04a      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <HAL_DMA_Abort+0x448>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d045      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <HAL_DMA_Abort+0x44c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d040      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <HAL_DMA_Abort+0x450>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d03b      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <HAL_DMA_Abort+0x454>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d036      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <HAL_DMA_Abort+0x458>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d031      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_DMA_Abort+0x45c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d02c      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <HAL_DMA_Abort+0x460>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d027      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_DMA_Abort+0x464>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <HAL_DMA_Abort+0x468>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a20      	ldr	r2, [pc, #128]	; (8004c1c <HAL_DMA_Abort+0x46c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_DMA_Abort+0x470>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <HAL_DMA_Abort+0x474>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_DMA_Abort+0x478>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	; (8004c2c <HAL_DMA_Abort+0x47c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_DMA_Abort+0x480>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_DMA_Abort+0x426>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_Abort+0x428>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02b      	beq.n	8004c34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	223f      	movs	r2, #63	; 0x3f
 8004bec:	409a      	lsls	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	e02a      	b.n	8004c4a <HAL_DMA_Abort+0x49a>
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	2201      	movs	r2, #1
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a4f      	ldr	r2, [pc, #316]	; (8004d8c <HAL_DMA_Abort+0x5dc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a4d      	ldr	r2, [pc, #308]	; (8004d90 <HAL_DMA_Abort+0x5e0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4c      	ldr	r2, [pc, #304]	; (8004d94 <HAL_DMA_Abort+0x5e4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <HAL_DMA_Abort+0x5e8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a49      	ldr	r2, [pc, #292]	; (8004d9c <HAL_DMA_Abort+0x5ec>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a47      	ldr	r2, [pc, #284]	; (8004da0 <HAL_DMA_Abort+0x5f0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a46      	ldr	r2, [pc, #280]	; (8004da4 <HAL_DMA_Abort+0x5f4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <HAL_DMA_Abort+0x5f8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_DMA_Abort+0x5fc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <HAL_DMA_Abort+0x600>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a40      	ldr	r2, [pc, #256]	; (8004db4 <HAL_DMA_Abort+0x604>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <HAL_DMA_Abort+0x608>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3d      	ldr	r2, [pc, #244]	; (8004dbc <HAL_DMA_Abort+0x60c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3b      	ldr	r2, [pc, #236]	; (8004dc0 <HAL_DMA_Abort+0x610>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3a      	ldr	r2, [pc, #232]	; (8004dc4 <HAL_DMA_Abort+0x614>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_DMA_Abort+0x618>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <HAL_DMA_Abort+0x61c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_DMA_Abort+0x620>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <HAL_DMA_Abort+0x624>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <HAL_DMA_Abort+0x628>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <HAL_DMA_Abort+0x62c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_DMA_Abort+0x630>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_DMA_Abort+0x634>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_DMA_Abort+0x638>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_DMA_Abort+0x58e>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_DMA_Abort+0x590>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494

08004dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e237      	b.n	800526e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e22c      	b.n	800526e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5c      	ldr	r2, [pc, #368]	; (8004f8c <HAL_DMA_Abort_IT+0x1a0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5b      	ldr	r2, [pc, #364]	; (8004f90 <HAL_DMA_Abort_IT+0x1a4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <HAL_DMA_Abort_IT+0x1a8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_DMA_Abort_IT+0x1ac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a56      	ldr	r2, [pc, #344]	; (8004f9c <HAL_DMA_Abort_IT+0x1b0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a55      	ldr	r2, [pc, #340]	; (8004fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a53      	ldr	r2, [pc, #332]	; (8004fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a50      	ldr	r2, [pc, #320]	; (8004fac <HAL_DMA_Abort_IT+0x1c0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a4d      	ldr	r2, [pc, #308]	; (8004fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4c      	ldr	r2, [pc, #304]	; (8004fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a4a      	ldr	r2, [pc, #296]	; (8004fbc <HAL_DMA_Abort_IT+0x1d0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a49      	ldr	r2, [pc, #292]	; (8004fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_DMA_Abort_IT+0xcc>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_DMA_Abort_IT+0xce>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8086 	beq.w	8004fcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <HAL_DMA_Abort_IT+0x1a0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d04a      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <HAL_DMA_Abort_IT+0x1a4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d045      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <HAL_DMA_Abort_IT+0x1a8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d040      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <HAL_DMA_Abort_IT+0x1ac>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d03b      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <HAL_DMA_Abort_IT+0x1b0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d036      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d031      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02c      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d027      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a23      	ldr	r2, [pc, #140]	; (8004fac <HAL_DMA_Abort_IT+0x1c0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d022      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d01d      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_DMA_Abort_IT+0x1d0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x17c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d108      	bne.n	8004f7a <HAL_DMA_Abort_IT+0x18e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e178      	b.n	800526c <HAL_DMA_Abort_IT+0x480>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e16f      	b.n	800526c <HAL_DMA_Abort_IT+0x480>
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 020e 	bic.w	r2, r2, #14
 8004fda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6c      	ldr	r2, [pc, #432]	; (8005194 <HAL_DMA_Abort_IT+0x3a8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d04a      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6b      	ldr	r2, [pc, #428]	; (8005198 <HAL_DMA_Abort_IT+0x3ac>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d045      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a69      	ldr	r2, [pc, #420]	; (800519c <HAL_DMA_Abort_IT+0x3b0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d040      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_DMA_Abort_IT+0x3b4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d03b      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a66      	ldr	r2, [pc, #408]	; (80051a4 <HAL_DMA_Abort_IT+0x3b8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d036      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a65      	ldr	r2, [pc, #404]	; (80051a8 <HAL_DMA_Abort_IT+0x3bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d031      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a63      	ldr	r2, [pc, #396]	; (80051ac <HAL_DMA_Abort_IT+0x3c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d02c      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a62      	ldr	r2, [pc, #392]	; (80051b0 <HAL_DMA_Abort_IT+0x3c4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d027      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a60      	ldr	r2, [pc, #384]	; (80051b4 <HAL_DMA_Abort_IT+0x3c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5f      	ldr	r2, [pc, #380]	; (80051b8 <HAL_DMA_Abort_IT+0x3cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d01d      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5d      	ldr	r2, [pc, #372]	; (80051bc <HAL_DMA_Abort_IT+0x3d0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5a      	ldr	r2, [pc, #360]	; (80051c4 <HAL_DMA_Abort_IT+0x3d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a59      	ldr	r2, [pc, #356]	; (80051c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_DMA_Abort_IT+0x3e0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_DMA_Abort_IT+0x290>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <HAL_DMA_Abort_IT+0x3e4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d108      	bne.n	800508e <HAL_DMA_Abort_IT+0x2a2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e007      	b.n	800509e <HAL_DMA_Abort_IT+0x2b2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <HAL_DMA_Abort_IT+0x3a8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d072      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3a      	ldr	r2, [pc, #232]	; (8005198 <HAL_DMA_Abort_IT+0x3ac>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d06d      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_DMA_Abort_IT+0x3b0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d068      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a37      	ldr	r2, [pc, #220]	; (80051a0 <HAL_DMA_Abort_IT+0x3b4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d063      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <HAL_DMA_Abort_IT+0x3b8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d05e      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a34      	ldr	r2, [pc, #208]	; (80051a8 <HAL_DMA_Abort_IT+0x3bc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d059      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_DMA_Abort_IT+0x3c0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d054      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <HAL_DMA_Abort_IT+0x3c4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04f      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <HAL_DMA_Abort_IT+0x3c8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <HAL_DMA_Abort_IT+0x3cc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_DMA_Abort_IT+0x3d0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <HAL_DMA_Abort_IT+0x3d8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a27      	ldr	r2, [pc, #156]	; (80051cc <HAL_DMA_Abort_IT+0x3e0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <HAL_DMA_Abort_IT+0x3e4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <HAL_DMA_Abort_IT+0x3e8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_DMA_Abort_IT+0x3ec>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a21      	ldr	r2, [pc, #132]	; (80051dc <HAL_DMA_Abort_IT+0x3f0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_DMA_Abort_IT+0x3f4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_DMA_Abort_IT+0x3f8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_DMA_Abort_IT+0x3fc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_DMA_Abort_IT+0x400>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_Abort_IT+0x3a2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <HAL_DMA_Abort_IT+0x404>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d132      	bne.n	80051f4 <HAL_DMA_Abort_IT+0x408>
 800518e:	2301      	movs	r3, #1
 8005190:	e031      	b.n	80051f6 <HAL_DMA_Abort_IT+0x40a>
 8005192:	bf00      	nop
 8005194:	40020010 	.word	0x40020010
 8005198:	40020028 	.word	0x40020028
 800519c:	40020040 	.word	0x40020040
 80051a0:	40020058 	.word	0x40020058
 80051a4:	40020070 	.word	0x40020070
 80051a8:	40020088 	.word	0x40020088
 80051ac:	400200a0 	.word	0x400200a0
 80051b0:	400200b8 	.word	0x400200b8
 80051b4:	40020410 	.word	0x40020410
 80051b8:	40020428 	.word	0x40020428
 80051bc:	40020440 	.word	0x40020440
 80051c0:	40020458 	.word	0x40020458
 80051c4:	40020470 	.word	0x40020470
 80051c8:	40020488 	.word	0x40020488
 80051cc:	400204a0 	.word	0x400204a0
 80051d0:	400204b8 	.word	0x400204b8
 80051d4:	58025408 	.word	0x58025408
 80051d8:	5802541c 	.word	0x5802541c
 80051dc:	58025430 	.word	0x58025430
 80051e0:	58025444 	.word	0x58025444
 80051e4:	58025458 	.word	0x58025458
 80051e8:	5802546c 	.word	0x5802546c
 80051ec:	58025480 	.word	0x58025480
 80051f0:	58025494 	.word	0x58025494
 80051f4:	2300      	movs	r3, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d028      	beq.n	800524c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005208:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	2201      	movs	r2, #1
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005228:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005240:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800524a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop

08005278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005286:	4b89      	ldr	r3, [pc, #548]	; (80054ac <HAL_GPIO_Init+0x234>)
 8005288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800528a:	e194      	b.n	80055b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	2101      	movs	r1, #1
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8186 	beq.w	80055b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d005      	beq.n	80052bc <HAL_GPIO_Init+0x44>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d130      	bne.n	800531e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	2203      	movs	r2, #3
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052f2:	2201      	movs	r2, #1
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4013      	ands	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 0201 	and.w	r2, r3, #1
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d017      	beq.n	800535a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	2203      	movs	r2, #3
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d123      	bne.n	80053ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	08da      	lsrs	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3208      	adds	r2, #8
 800536e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	220f      	movs	r2, #15
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	08da      	lsrs	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3208      	adds	r2, #8
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	2203      	movs	r2, #3
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0203 	and.w	r2, r3, #3
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80e0 	beq.w	80055b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_GPIO_Init+0x238>)
 80053f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <HAL_GPIO_Init+0x238>)
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_GPIO_Init+0x238>)
 8005402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800540e:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <HAL_GPIO_Init+0x23c>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <HAL_GPIO_Init+0x240>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d052      	beq.n	80054e0 <HAL_GPIO_Init+0x268>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <HAL_GPIO_Init+0x244>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_GPIO_Init+0x22e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <HAL_GPIO_Init+0x248>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02b      	beq.n	80054a2 <HAL_GPIO_Init+0x22a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_GPIO_Init+0x24c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d025      	beq.n	800549e <HAL_GPIO_Init+0x226>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <HAL_GPIO_Init+0x250>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01f      	beq.n	800549a <HAL_GPIO_Init+0x222>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <HAL_GPIO_Init+0x254>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d019      	beq.n	8005496 <HAL_GPIO_Init+0x21e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <HAL_GPIO_Init+0x258>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_GPIO_Init+0x21a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_GPIO_Init+0x25c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00d      	beq.n	800548e <HAL_GPIO_Init+0x216>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_GPIO_Init+0x260>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <HAL_GPIO_Init+0x212>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <HAL_GPIO_Init+0x264>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <HAL_GPIO_Init+0x20e>
 8005482:	2309      	movs	r3, #9
 8005484:	e02d      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 8005486:	230a      	movs	r3, #10
 8005488:	e02b      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 800548a:	2308      	movs	r3, #8
 800548c:	e029      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 800548e:	2307      	movs	r3, #7
 8005490:	e027      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 8005492:	2306      	movs	r3, #6
 8005494:	e025      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 8005496:	2305      	movs	r3, #5
 8005498:	e023      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 800549a:	2304      	movs	r3, #4
 800549c:	e021      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 800549e:	2303      	movs	r3, #3
 80054a0:	e01f      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e01d      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e01b      	b.n	80054e2 <HAL_GPIO_Init+0x26a>
 80054aa:	bf00      	nop
 80054ac:	58000080 	.word	0x58000080
 80054b0:	58024400 	.word	0x58024400
 80054b4:	58000400 	.word	0x58000400
 80054b8:	58020000 	.word	0x58020000
 80054bc:	58020400 	.word	0x58020400
 80054c0:	58020800 	.word	0x58020800
 80054c4:	58020c00 	.word	0x58020c00
 80054c8:	58021000 	.word	0x58021000
 80054cc:	58021400 	.word	0x58021400
 80054d0:	58021800 	.word	0x58021800
 80054d4:	58021c00 	.word	0x58021c00
 80054d8:	58022000 	.word	0x58022000
 80054dc:	58022400 	.word	0x58022400
 80054e0:	2300      	movs	r3, #0
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	f002 0203 	and.w	r2, r2, #3
 80054e8:	0092      	lsls	r2, r2, #2
 80054ea:	4093      	lsls	r3, r2
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f2:	4938      	ldr	r1, [pc, #224]	; (80055d4 <HAL_GPIO_Init+0x35c>)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	3302      	adds	r3, #2
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	43db      	mvns	r3, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4013      	ands	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f47f ae63 	bne.w	800528c <HAL_GPIO_Init+0x14>
  }
}
 80055c6:	bf00      	nop
 80055c8:	bf00      	nop
 80055ca:	3724      	adds	r7, #36	; 0x24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	58000400 	.word	0x58000400

080055d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	887b      	ldrh	r3, [r7, #2]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e001      	b.n	80055fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
 8005614:	4613      	mov	r3, r2
 8005616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005618:	787b      	ldrb	r3, [r7, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800561e:	887a      	ldrh	r2, [r7, #2]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005624:	e003      	b.n	800562e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	041a      	lsls	r2, r3, #16
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	619a      	str	r2, [r3, #24]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800564c:	887a      	ldrh	r2, [r7, #2]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	041a      	lsls	r2, r3, #16
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	43d9      	mvns	r1, r3
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	400b      	ands	r3, r1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	619a      	str	r2, [r3, #24]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07f      	b.n	8005782 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd f9b8 	bl	8002a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	; 0x24
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d107      	bne.n	80056ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e006      	b.n	80056f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d104      	bne.n	800570a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005708:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_I2C_Init+0x11c>)
 8005716:	430b      	orrs	r3, r1
 8005718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69d9      	ldr	r1, [r3, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	02008000 	.word	0x02008000

08005790 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	461a      	mov	r2, r3
 800579c:	460b      	mov	r3, r1
 800579e:	817b      	strh	r3, [r7, #10]
 80057a0:	4613      	mov	r3, r2
 80057a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	f040 80da 	bne.w	8005966 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_I2C_Master_Transmit+0x30>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0d3      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057c8:	f7fe fea6 	bl	8004518 <HAL_GetTick>
 80057cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2319      	movs	r3, #25
 80057d4:	2201      	movs	r2, #1
 80057d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fb62 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0be      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2210      	movs	r2, #16
 80057f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	893a      	ldrh	r2, [r7, #8]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2bff      	cmp	r3, #255	; 0xff
 800581a:	d90e      	bls.n	800583a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	22ff      	movs	r2, #255	; 0xff
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	4b51      	ldr	r3, [pc, #324]	; (8005970 <HAL_I2C_Master_Transmit+0x1e0>)
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fd58 	bl	80062e8 <I2C_TransferConfig>
 8005838:	e06c      	b.n	8005914 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	b2da      	uxtb	r2, r3
 800584a:	8979      	ldrh	r1, [r7, #10]
 800584c:	4b48      	ldr	r3, [pc, #288]	; (8005970 <HAL_I2C_Master_Transmit+0x1e0>)
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fd47 	bl	80062e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800585a:	e05b      	b.n	8005914 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	6a39      	ldr	r1, [r7, #32]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fb5f 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e07b      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d034      	beq.n	8005914 <HAL_I2C_Master_Transmit+0x184>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d130      	bne.n	8005914 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 faf1 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04d      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	; 0xff
 80058d4:	d90e      	bls.n	80058f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	8979      	ldrh	r1, [r7, #10]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fcfb 	bl	80062e8 <I2C_TransferConfig>
 80058f2:	e00f      	b.n	8005914 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fcea 	bl	80062e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d19e      	bne.n	800585c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6a39      	ldr	r1, [r7, #32]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb3e 	bl	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e01a      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2220      	movs	r2, #32
 8005938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_I2C_Master_Transmit+0x1e4>)
 8005946:	400b      	ands	r3, r1
 8005948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	80002000 	.word	0x80002000
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	461a      	mov	r2, r3
 8005984:	460b      	mov	r3, r1
 8005986:	817b      	strh	r3, [r7, #10]
 8005988:	4613      	mov	r3, r2
 800598a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b20      	cmp	r3, #32
 8005996:	f040 80db 	bne.w	8005b50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_I2C_Master_Receive+0x30>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0d4      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b0:	f7fe fdb2 	bl	8004518 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2319      	movs	r3, #25
 80059bc:	2201      	movs	r2, #1
 80059be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fa6e 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0bf      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2222      	movs	r2, #34	; 0x22
 80059d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2210      	movs	r2, #16
 80059de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	893a      	ldrh	r2, [r7, #8]
 80059f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2bff      	cmp	r3, #255	; 0xff
 8005a02:	d90e      	bls.n	8005a22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	8979      	ldrh	r1, [r7, #10]
 8005a12:	4b52      	ldr	r3, [pc, #328]	; (8005b5c <HAL_I2C_Master_Receive+0x1e4>)
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fc64 	bl	80062e8 <I2C_TransferConfig>
 8005a20:	e06d      	b.n	8005afe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	8979      	ldrh	r1, [r7, #10]
 8005a34:	4b49      	ldr	r3, [pc, #292]	; (8005b5c <HAL_I2C_Master_Receive+0x1e4>)
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fc53 	bl	80062e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005a42:	e05c      	b.n	8005afe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	6a39      	ldr	r1, [r7, #32]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fae7 	bl	800601c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e07c      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d034      	beq.n	8005afe <HAL_I2C_Master_Receive+0x186>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d130      	bne.n	8005afe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f9fc 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e04d      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2bff      	cmp	r3, #255	; 0xff
 8005abe:	d90e      	bls.n	8005ade <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	22ff      	movs	r2, #255	; 0xff
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	8979      	ldrh	r1, [r7, #10]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fc06 	bl	80062e8 <I2C_TransferConfig>
 8005adc:	e00f      	b.n	8005afe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	8979      	ldrh	r1, [r7, #10]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fbf5 	bl	80062e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d19d      	bne.n	8005a44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	6a39      	ldr	r1, [r7, #32]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fa49 	bl	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e01a      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2220      	movs	r2, #32
 8005b22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_I2C_Master_Receive+0x1e8>)
 8005b30:	400b      	ands	r3, r1
 8005b32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	80002400 	.word	0x80002400
 8005b60:	fe00e800 	.word	0xfe00e800

08005b64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	461a      	mov	r2, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	817b      	strh	r3, [r7, #10]
 8005b76:	460b      	mov	r3, r1
 8005b78:	813b      	strh	r3, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	f040 80fd 	bne.w	8005d86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_I2C_Mem_Read+0x34>
 8005b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0f1      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x4e>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0ea      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bba:	f7fe fcad 	bl	8004518 <HAL_GetTick>
 8005bbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2319      	movs	r3, #25
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f969 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0d5      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2222      	movs	r2, #34	; 0x22
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c04:	88f8      	ldrh	r0, [r7, #6]
 8005c06:	893a      	ldrh	r2, [r7, #8]
 8005c08:	8979      	ldrh	r1, [r7, #10]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4603      	mov	r3, r0
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f8cd 	bl	8005db4 <I2C_RequestMemoryRead>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0ad      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2bff      	cmp	r3, #255	; 0xff
 8005c34:	d90e      	bls.n	8005c54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	8979      	ldrh	r1, [r7, #10]
 8005c44:	4b52      	ldr	r3, [pc, #328]	; (8005d90 <HAL_I2C_Mem_Read+0x22c>)
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fb4b 	bl	80062e8 <I2C_TransferConfig>
 8005c52:	e00f      	b.n	8005c74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	8979      	ldrh	r1, [r7, #10]
 8005c66:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <HAL_I2C_Mem_Read+0x22c>)
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fb3a 	bl	80062e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f910 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e07c      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d034      	beq.n	8005d34 <HAL_I2C_Mem_Read+0x1d0>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d130      	bne.n	8005d34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2180      	movs	r1, #128	; 0x80
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f8e1 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e04d      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2bff      	cmp	r3, #255	; 0xff
 8005cf4:	d90e      	bls.n	8005d14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	22ff      	movs	r2, #255	; 0xff
 8005cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	8979      	ldrh	r1, [r7, #10]
 8005d04:	2300      	movs	r3, #0
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 faeb 	bl	80062e8 <I2C_TransferConfig>
 8005d12:	e00f      	b.n	8005d34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	8979      	ldrh	r1, [r7, #10]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fada 	bl	80062e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d19a      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f92e 	bl	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e01a      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2220      	movs	r2, #32
 8005d58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6859      	ldr	r1, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <HAL_I2C_Mem_Read+0x230>)
 8005d66:	400b      	ands	r3, r1
 8005d68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	80002400 	.word	0x80002400
 8005d94:	fe00e800 	.word	0xfe00e800

08005d98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da6:	b2db      	uxtb	r3, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	817b      	strh	r3, [r7, #10]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	813b      	strh	r3, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <I2C_RequestMemoryRead+0xa4>)
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fa84 	bl	80062e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f89d 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e02c      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dfa:	893b      	ldrh	r3, [r7, #8]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	e015      	b.n	8005e32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e06:	893b      	ldrh	r3, [r7, #8]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f883 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e012      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e28:	893b      	ldrh	r3, [r7, #8]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	; 0x40
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f831 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	80002000 	.word	0x80002000

08005e5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d103      	bne.n	8005e7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2200      	movs	r2, #0
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d007      	beq.n	8005e98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	619a      	str	r2, [r3, #24]
  }
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb4:	e022      	b.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebc:	d01e      	beq.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fe fb2b 	bl	8004518 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d113      	bne.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e00f      	b.n	8005f1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d0cd      	beq.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f30:	e02c      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8ea 	bl	8006110 <I2C_IsErrorOccurred>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e02a      	b.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4c:	d01e      	beq.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fe fae3 	bl	8004518 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d1cb      	bne.n	8005f32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb0:	e028      	b.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f8aa 	bl	8006110 <I2C_IsErrorOccurred>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e026      	b.n	8006014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fe faa7 	bl	8004518 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d113      	bne.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e007      	b.n	8006014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d1cf      	bne.n	8005fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006028:	e064      	b.n	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f86e 	bl	8006110 <I2C_IsErrorOccurred>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e062      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d138      	bne.n	80060be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b04      	cmp	r3, #4
 8006058:	d105      	bne.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e04e      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d107      	bne.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2210      	movs	r2, #16
 800607a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2204      	movs	r2, #4
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
 8006082:	e002      	b.n	800608a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2220      	movs	r2, #32
 8006090:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800609e:	400b      	ands	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e022      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fe fa2b 	bl	8004518 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10f      	bne.n	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e007      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d193      	bne.n	800602a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	fe00e800 	.word	0xfe00e800

08006110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	d075      	beq.n	8006228 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2210      	movs	r2, #16
 8006142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006144:	e056      	b.n	80061f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614c:	d052      	beq.n	80061f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fe f9e3 	bl	8004518 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <I2C_IsErrorOccurred+0x54>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d147      	bne.n	80061f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006186:	d12e      	bne.n	80061e6 <I2C_IsErrorOccurred+0xd6>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618e:	d02a      	beq.n	80061e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b20      	cmp	r3, #32
 8006194:	d027      	beq.n	80061e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061a6:	f7fe f9b7 	bl	8004518 <HAL_GetTick>
 80061aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ac:	e01b      	b.n	80061e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061ae:	f7fe f9b3 	bl	8004518 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b19      	cmp	r3, #25
 80061ba:	d914      	bls.n	80061e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d1dc      	bne.n	80061ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d003      	beq.n	800620a <I2C_IsErrorOccurred+0xfa>
 8006202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006206:	2b00      	cmp	r3, #0
 8006208:	d09d      	beq.n	8006146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800620a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2220      	movs	r2, #32
 8006218:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800624a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f043 0308 	orr.w	r3, r3, #8
 8006262:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800626c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01c      	beq.n	80062d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fddc 	bl	8005e5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <I2C_IsErrorOccurred+0x1d4>)
 80062b0:	400b      	ands	r3, r1
 80062b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80062d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	; 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	fe00e800 	.word	0xfe00e800

080062e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	817b      	strh	r3, [r7, #10]
 80062f6:	4613      	mov	r3, r2
 80062f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006300:	7a7b      	ldrb	r3, [r7, #9]
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006308:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	4313      	orrs	r3, r2
 8006312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006316:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	0d5b      	lsrs	r3, r3, #21
 8006322:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <I2C_TransferConfig+0x60>)
 8006328:	430b      	orrs	r3, r1
 800632a:	43db      	mvns	r3, r3
 800632c:	ea02 0103 	and.w	r1, r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	03ff63ff 	.word	0x03ff63ff

0800634c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	d138      	bne.n	80063d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800636c:	2302      	movs	r3, #2
 800636e:	e032      	b.n	80063d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	; 0x24
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800639e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e000      	b.n	80063d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063d4:	2302      	movs	r3, #2
  }
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d139      	bne.n	800646c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006402:	2302      	movs	r3, #2
 8006404:	e033      	b.n	800646e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d00a      	beq.n	80064a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006490:	4b16      	ldr	r3, [pc, #88]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d001      	beq.n	80064a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01f      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e01d      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 0207 	bic.w	r2, r3, #7
 80064ae:	490f      	ldr	r1, [pc, #60]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064b6:	f7fe f82f 	bl	8004518 <HAL_GetTick>
 80064ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064bc:	e009      	b.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064be:	f7fe f82b 	bl	8004518 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064cc:	d901      	bls.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d1ee      	bne.n	80064be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	58024800 	.word	0x58024800

080064f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f000 bc1d 	b.w	8006d3e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8087 	beq.w	8006620 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006512:	4b99      	ldr	r3, [pc, #612]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800651c:	4b96      	ldr	r3, [pc, #600]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b10      	cmp	r3, #16
 8006526:	d007      	beq.n	8006538 <HAL_RCC_OscConfig+0x48>
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b18      	cmp	r3, #24
 800652c:	d110      	bne.n	8006550 <HAL_RCC_OscConfig+0x60>
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d10b      	bne.n	8006550 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	4b8f      	ldr	r3, [pc, #572]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d06c      	beq.n	800661e <HAL_RCC_OscConfig+0x12e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d168      	bne.n	800661e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e3f6      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006558:	d106      	bne.n	8006568 <HAL_RCC_OscConfig+0x78>
 800655a:	4b87      	ldr	r3, [pc, #540]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a86      	ldr	r2, [pc, #536]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e02e      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <HAL_RCC_OscConfig+0x9a>
 8006570:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b7e      	ldr	r3, [pc, #504]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a7d      	ldr	r2, [pc, #500]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e01d      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006592:	d10c      	bne.n	80065ae <HAL_RCC_OscConfig+0xbe>
 8006594:	4b78      	ldr	r3, [pc, #480]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a77      	ldr	r2, [pc, #476]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800659a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b75      	ldr	r3, [pc, #468]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e00b      	b.n	80065c6 <HAL_RCC_OscConfig+0xd6>
 80065ae:	4b72      	ldr	r3, [pc, #456]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a71      	ldr	r2, [pc, #452]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ce:	f7fd ffa3 	bl	8004518 <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d6:	f7fd ff9f 	bl	8004518 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b64      	cmp	r3, #100	; 0x64
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e3aa      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065e8:	4b63      	ldr	r3, [pc, #396]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0xe6>
 80065f4:	e014      	b.n	8006620 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fd ff8f 	bl	8004518 <HAL_GetTick>
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065fe:	f7fd ff8b 	bl	8004518 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b64      	cmp	r3, #100	; 0x64
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e396      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006610:	4b59      	ldr	r3, [pc, #356]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f0      	bne.n	80065fe <HAL_RCC_OscConfig+0x10e>
 800661c:	e000      	b.n	8006620 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80cb 	beq.w	80067c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800662e:	4b52      	ldr	r3, [pc, #328]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006636:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006638:	4b4f      	ldr	r3, [pc, #316]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_RCC_OscConfig+0x164>
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b18      	cmp	r3, #24
 8006648:	d156      	bne.n	80066f8 <HAL_RCC_OscConfig+0x208>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d151      	bne.n	80066f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_OscConfig+0x17c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e368      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 0219 	bic.w	r2, r3, #25
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	493f      	ldr	r1, [pc, #252]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800667e:	f7fd ff4b 	bl	8004518 <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006686:	f7fd ff47 	bl	8004518 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e352      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	4b37      	ldr	r3, [pc, #220]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	f7fd ff68 	bl	8004578 <HAL_GetREVID>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d817      	bhi.n	80066e2 <HAL_RCC_OscConfig+0x1f2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d108      	bne.n	80066cc <HAL_RCC_OscConfig+0x1dc>
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ca:	e07b      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066cc:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	4927      	ldr	r1, [pc, #156]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066e0:	e070      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e2:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	4921      	ldr	r1, [pc, #132]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f6:	e065      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d048      	beq.n	8006792 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f023 0219 	bic.w	r2, r3, #25
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	491a      	ldr	r1, [pc, #104]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fd ff01 	bl	8004518 <HAL_GetTick>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800671a:	f7fd fefd 	bl	8004518 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e308      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006738:	f7fd ff1e 	bl	8004578 <HAL_GetREVID>
 800673c:	4603      	mov	r3, r0
 800673e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006742:	4293      	cmp	r3, r2
 8006744:	d81a      	bhi.n	800677c <HAL_RCC_OscConfig+0x28c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d108      	bne.n	8006760 <HAL_RCC_OscConfig+0x270>
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	e031      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	031b      	lsls	r3, r3, #12
 800676e:	4902      	ldr	r1, [pc, #8]	; (8006778 <HAL_RCC_OscConfig+0x288>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
 8006774:	e026      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	4b9a      	ldr	r3, [pc, #616]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	4997      	ldr	r1, [pc, #604]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	e018      	b.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006792:	4b95      	ldr	r3, [pc, #596]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a94      	ldr	r2, [pc, #592]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fd febb 	bl	8004518 <HAL_GetTick>
 80067a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067a6:	f7fd feb7 	bl	8004518 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e2c2      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067b8:	4b8b      	ldr	r3, [pc, #556]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f0      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a9 	beq.w	8006924 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d2:	4b85      	ldr	r3, [pc, #532]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d007      	beq.n	80067f8 <HAL_RCC_OscConfig+0x308>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b18      	cmp	r3, #24
 80067ec:	d13a      	bne.n	8006864 <HAL_RCC_OscConfig+0x374>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d135      	bne.n	8006864 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067f8:	4b7b      	ldr	r3, [pc, #492]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_OscConfig+0x320>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d001      	beq.n	8006810 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e296      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006810:	f7fd feb2 	bl	8004578 <HAL_GetREVID>
 8006814:	4603      	mov	r3, r0
 8006816:	f241 0203 	movw	r2, #4099	; 0x1003
 800681a:	4293      	cmp	r3, r2
 800681c:	d817      	bhi.n	800684e <HAL_RCC_OscConfig+0x35e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	2b20      	cmp	r3, #32
 8006824:	d108      	bne.n	8006838 <HAL_RCC_OscConfig+0x348>
 8006826:	4b70      	ldr	r3, [pc, #448]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800682e:	4a6e      	ldr	r2, [pc, #440]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006834:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006836:	e075      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006838:	4b6b      	ldr	r3, [pc, #428]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	069b      	lsls	r3, r3, #26
 8006846:	4968      	ldr	r1, [pc, #416]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800684c:	e06a      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	061b      	lsls	r3, r3, #24
 800685c:	4962      	ldr	r1, [pc, #392]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800685e:	4313      	orrs	r3, r2
 8006860:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006862:	e05f      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d042      	beq.n	80068f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800686c:	4b5e      	ldr	r3, [pc, #376]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5d      	ldr	r2, [pc, #372]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fd fe4e 	bl	8004518 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006880:	f7fd fe4a 	bl	8004518 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e255      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006892:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800689e:	f7fd fe6b 	bl	8004578 <HAL_GetREVID>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d817      	bhi.n	80068dc <HAL_RCC_OscConfig+0x3ec>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d108      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3d6>
 80068b4:	4b4c      	ldr	r3, [pc, #304]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068bc:	4a4a      	ldr	r2, [pc, #296]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c2:	6053      	str	r3, [r2, #4]
 80068c4:	e02e      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
 80068c6:	4b48      	ldr	r3, [pc, #288]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	069b      	lsls	r3, r3, #26
 80068d4:	4944      	ldr	r1, [pc, #272]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
 80068da:	e023      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	493f      	ldr	r1, [pc, #252]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60cb      	str	r3, [r1, #12]
 80068f0:	e018      	b.n	8006924 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068f2:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80068f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fe:	f7fd fe0b 	bl	8004518 <HAL_GetTick>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006906:	f7fd fe07 	bl	8004518 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e212      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f0      	bne.n	8006906 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d036      	beq.n	800699e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d019      	beq.n	800696c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006938:	4b2b      	ldr	r3, [pc, #172]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fd fde8 	bl	8004518 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694c:	f7fd fde4 	bl	8004518 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e1ef      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x45c>
 800696a:	e018      	b.n	800699e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800696c:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 800696e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fd fdce 	bl	8004518 <HAL_GetTick>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006980:	f7fd fdca 	bl	8004518 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1d5      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d039      	beq.n	8006a1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01c      	beq.n	80069ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069be:	f7fd fdab 	bl	8004518 <HAL_GetTick>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069c6:	f7fd fda7 	bl	8004518 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e1b2      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <HAL_RCC_OscConfig+0x4f8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x4d6>
 80069e4:	e01b      	b.n	8006a1e <HAL_RCC_OscConfig+0x52e>
 80069e6:	bf00      	nop
 80069e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069ec:	4b9b      	ldr	r3, [pc, #620]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a9a      	ldr	r2, [pc, #616]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 80069f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069f8:	f7fd fd8e 	bl	8004518 <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a00:	f7fd fd8a 	bl	8004518 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e195      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a12:	4b92      	ldr	r3, [pc, #584]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8081 	beq.w	8006b2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a2c:	4b8c      	ldr	r3, [pc, #560]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a8b      	ldr	r2, [pc, #556]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a38:	f7fd fd6e 	bl	8004518 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a40:	f7fd fd6a 	bl	8004518 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e175      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a52:	4b83      	ldr	r3, [pc, #524]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d106      	bne.n	8006a74 <HAL_RCC_OscConfig+0x584>
 8006a66:	4b7d      	ldr	r3, [pc, #500]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4a7c      	ldr	r2, [pc, #496]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6713      	str	r3, [r2, #112]	; 0x70
 8006a72:	e02d      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCC_OscConfig+0x5a6>
 8006a7c:	4b77      	ldr	r3, [pc, #476]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	4a76      	ldr	r2, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	6713      	str	r3, [r2, #112]	; 0x70
 8006a88:	4b74      	ldr	r3, [pc, #464]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	4a73      	ldr	r2, [pc, #460]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006a8e:	f023 0304 	bic.w	r3, r3, #4
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70
 8006a94:	e01c      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c8>
 8006a9e:	4b6f      	ldr	r3, [pc, #444]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a6e      	ldr	r2, [pc, #440]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a6b      	ldr	r2, [pc, #428]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0x5e0>
 8006ab8:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac4:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	4a64      	ldr	r2, [pc, #400]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006aca:	f023 0304 	bic.w	r3, r3, #4
 8006ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fd fd1e 	bl	8004518 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fd fd1a 	bl	8004518 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e123      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006af6:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ee      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x5f0>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fd fd08 	bl	8004518 <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fd fd04 	bl	8004518 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e10d      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b22:	4b4e      	ldr	r3, [pc, #312]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ee      	bne.n	8006b0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8102 	beq.w	8006d3c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b38:	4b48      	ldr	r3, [pc, #288]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b40:	2b18      	cmp	r3, #24
 8006b42:	f000 80bd 	beq.w	8006cc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	f040 809e 	bne.w	8006c8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b50:	4b42      	ldr	r3, [pc, #264]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a41      	ldr	r2, [pc, #260]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fd fcdc 	bl	8004518 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b64:	f7fd fcd8 	bl	8004518 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0e3      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b82:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b86:	4b37      	ldr	r3, [pc, #220]	; (8006c64 <HAL_RCC_OscConfig+0x774>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b92:	0112      	lsls	r2, r2, #4
 8006b94:	430a      	orrs	r2, r1
 8006b96:	4931      	ldr	r1, [pc, #196]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	3b01      	subs	r3, #1
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bcc:	4923      	ldr	r1, [pc, #140]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bde:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <HAL_RCC_OscConfig+0x778>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bea:	00d2      	lsls	r2, r2, #3
 8006bec:	491b      	ldr	r1, [pc, #108]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	f023 020c 	bic.w	r2, r3, #12
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4917      	ldr	r1, [pc, #92]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	f023 0202 	bic.w	r2, r3, #2
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	4912      	ldr	r1, [pc, #72]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c22:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c3a:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fd fc61 	bl	8004518 <HAL_GetTick>
 8006c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c58:	e011      	b.n	8006c7e <HAL_RCC_OscConfig+0x78e>
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	58024800 	.word	0x58024800
 8006c64:	fffffc0c 	.word	0xfffffc0c
 8006c68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c6c:	f7fd fc54 	bl	8004518 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e05f      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c7e:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0x77c>
 8006c8a:	e057      	b.n	8006d3c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fd fc3e 	bl	8004518 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fd fc3a 	bl	8004518 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e045      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x7b0>
 8006cbe:	e03d      	b.n	8006d3c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cc0:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cc6:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <HAL_RCC_OscConfig+0x858>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f003 0203 	and.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d12a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d122      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d11a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d111      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d108      	bne.n	8006d38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3730      	adds	r7, #48	; 0x30
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	58024400 	.word	0x58024400

08006d4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e19c      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b8a      	ldr	r3, [pc, #552]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d910      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b87      	ldr	r3, [pc, #540]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 020f 	bic.w	r2, r3, #15
 8006d76:	4985      	ldr	r1, [pc, #532]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b83      	ldr	r3, [pc, #524]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e184      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	4b7b      	ldr	r3, [pc, #492]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dac:	4b78      	ldr	r3, [pc, #480]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	4975      	ldr	r1, [pc, #468]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	4b70      	ldr	r3, [pc, #448]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d908      	bls.n	8006dec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dda:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	496a      	ldr	r1, [pc, #424]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	4b64      	ldr	r3, [pc, #400]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d908      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e08:	4b61      	ldr	r3, [pc, #388]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	495e      	ldr	r1, [pc, #376]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	4b59      	ldr	r3, [pc, #356]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d908      	bls.n	8006e48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e36:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4953      	ldr	r1, [pc, #332]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d010      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d908      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e64:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f023 020f 	bic.w	r2, r3, #15
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4947      	ldr	r1, [pc, #284]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d055      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e82:	4b43      	ldr	r3, [pc, #268]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	4940      	ldr	r1, [pc, #256]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e9c:	4b3c      	ldr	r3, [pc, #240]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d121      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0f6      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d115      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0ea      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ecc:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0de      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006edc:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0d6      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eec:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f023 0207 	bic.w	r2, r3, #7
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4925      	ldr	r1, [pc, #148]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fd fb0b 	bl	8004518 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f06:	f7fd fb07 	bl	8004518 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e0be      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1c:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d1eb      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d010      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d208      	bcs.n	8006f5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f023 020f 	bic.w	r2, r3, #15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	490e      	ldr	r1, [pc, #56]	; (8006f90 <HAL_RCC_ClockConfig+0x244>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d214      	bcs.n	8006f94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 020f 	bic.w	r2, r3, #15
 8006f72:	4906      	ldr	r1, [pc, #24]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <HAL_RCC_ClockConfig+0x240>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e086      	b.n	800709a <HAL_RCC_ClockConfig+0x34e>
 8006f8c:	52002000 	.word	0x52002000
 8006f90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d208      	bcs.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fb0:	4b3c      	ldr	r3, [pc, #240]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4939      	ldr	r1, [pc, #228]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d208      	bcs.n	8006ff0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	492e      	ldr	r1, [pc, #184]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007008:	429a      	cmp	r2, r3
 800700a:	d208      	bcs.n	800701e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	4922      	ldr	r1, [pc, #136]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800701a:	4313      	orrs	r3, r2
 800701c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007036:	429a      	cmp	r2, r3
 8007038:	d208      	bcs.n	800704c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4917      	ldr	r1, [pc, #92]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007048:	4313      	orrs	r3, r2
 800704a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800704c:	f000 f834 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007050:	4602      	mov	r2, r0
 8007052:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	4912      	ldr	r1, [pc, #72]	; (80070a8 <HAL_RCC_ClockConfig+0x35c>)
 800705e:	5ccb      	ldrb	r3, [r1, r3]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_RCC_ClockConfig+0x358>)
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <HAL_RCC_ClockConfig+0x35c>)
 8007074:	5cd3      	ldrb	r3, [r2, r3]
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <HAL_RCC_ClockConfig+0x360>)
 8007082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007084:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <HAL_RCC_ClockConfig+0x364>)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_RCC_ClockConfig+0x368>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd f9f8 	bl	8004484 <HAL_InitTick>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	0800f358 	.word	0x0800f358
 80070ac:	24000018 	.word	0x24000018
 80070b0:	24000014 	.word	0x24000014
 80070b4:	2400001c 	.word	0x2400001c

080070b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070be:	4bb3      	ldr	r3, [pc, #716]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c6:	2b18      	cmp	r3, #24
 80070c8:	f200 8155 	bhi.w	8007376 <HAL_RCC_GetSysClockFreq+0x2be>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007377 	.word	0x08007377
 80070dc:	08007377 	.word	0x08007377
 80070e0:	08007377 	.word	0x08007377
 80070e4:	08007377 	.word	0x08007377
 80070e8:	08007377 	.word	0x08007377
 80070ec:	08007377 	.word	0x08007377
 80070f0:	08007377 	.word	0x08007377
 80070f4:	0800715f 	.word	0x0800715f
 80070f8:	08007377 	.word	0x08007377
 80070fc:	08007377 	.word	0x08007377
 8007100:	08007377 	.word	0x08007377
 8007104:	08007377 	.word	0x08007377
 8007108:	08007377 	.word	0x08007377
 800710c:	08007377 	.word	0x08007377
 8007110:	08007377 	.word	0x08007377
 8007114:	08007165 	.word	0x08007165
 8007118:	08007377 	.word	0x08007377
 800711c:	08007377 	.word	0x08007377
 8007120:	08007377 	.word	0x08007377
 8007124:	08007377 	.word	0x08007377
 8007128:	08007377 	.word	0x08007377
 800712c:	08007377 	.word	0x08007377
 8007130:	08007377 	.word	0x08007377
 8007134:	0800716b 	.word	0x0800716b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007138:	4b94      	ldr	r3, [pc, #592]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007144:	4b91      	ldr	r3, [pc, #580]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	4a90      	ldr	r2, [pc, #576]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007156:	e111      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007158:	4b8d      	ldr	r3, [pc, #564]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800715a:	61bb      	str	r3, [r7, #24]
    break;
 800715c:	e10e      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800715e:	4b8d      	ldr	r3, [pc, #564]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007160:	61bb      	str	r3, [r7, #24]
    break;
 8007162:	e10b      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007164:	4b8c      	ldr	r3, [pc, #560]	; (8007398 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007166:	61bb      	str	r3, [r7, #24]
    break;
 8007168:	e108      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800716a:	4b88      	ldr	r3, [pc, #544]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007174:	4b85      	ldr	r3, [pc, #532]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	091b      	lsrs	r3, r3, #4
 800717a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007180:	4b82      	ldr	r3, [pc, #520]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800718a:	4b80      	ldr	r3, [pc, #512]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80e1 	beq.w	8007370 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f000 8083 	beq.w	80072bc <HAL_RCC_GetSysClockFreq+0x204>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f200 80a1 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x248>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x114>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d056      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071ca:	e099      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02d      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071d8:	4b6c      	ldr	r3, [pc, #432]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	08db      	lsrs	r3, r3, #3
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	4a6b      	ldr	r2, [pc, #428]	; (8007390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
 80071e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b62      	ldr	r3, [pc, #392]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a02 	vldr	s12, [r7, #8]
 8007216:	eddf 5a61 	vldr	s11, [pc, #388]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007232:	e087      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b51      	ldr	r3, [pc, #324]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a02 	vldr	s12, [r7, #8]
 800725a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	e065      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b40      	ldr	r3, [pc, #256]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a02 	vldr	s12, [r7, #8]
 800729e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ba:	e043      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072de:	ed97 6a02 	vldr	s12, [r7, #8]
 80072e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fe:	e021      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800730e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007312:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007322:	ed97 6a02 	vldr	s12, [r7, #8]
 8007326:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800739c <HAL_RCC_GetSysClockFreq+0x2e4>
 800732a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007342:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007344:	4b11      	ldr	r3, [pc, #68]	; (800738c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	0a5b      	lsrs	r3, r3, #9
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	3301      	adds	r3, #1
 8007350:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800735c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007368:	ee17 3a90 	vmov	r3, s15
 800736c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800736e:	e005      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
    break;
 8007374:	e002      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007378:	61bb      	str	r3, [r7, #24]
    break;
 800737a:	bf00      	nop
  }

  return sysclockfreq;
 800737c:	69bb      	ldr	r3, [r7, #24]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	003d0900 	.word	0x003d0900
 8007398:	017d7840 	.word	0x017d7840
 800739c:	46000000 	.word	0x46000000
 80073a0:	4c742400 	.word	0x4c742400
 80073a4:	4a742400 	.word	0x4a742400
 80073a8:	4bbebc20 	.word	0x4bbebc20

080073ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073b2:	f7ff fe81 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80073b6:	4602      	mov	r2, r0
 80073b8:	4b10      	ldr	r3, [pc, #64]	; (80073fc <HAL_RCC_GetHCLKFreq+0x50>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	490f      	ldr	r1, [pc, #60]	; (8007400 <HAL_RCC_GetHCLKFreq+0x54>)
 80073c4:	5ccb      	ldrb	r3, [r1, r3]
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	fa22 f303 	lsr.w	r3, r2, r3
 80073ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <HAL_RCC_GetHCLKFreq+0x50>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <HAL_RCC_GetHCLKFreq+0x54>)
 80073da:	5cd3      	ldrb	r3, [r2, r3]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	4a07      	ldr	r2, [pc, #28]	; (8007404 <HAL_RCC_GetHCLKFreq+0x58>)
 80073e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073ea:	4a07      	ldr	r2, [pc, #28]	; (8007408 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <HAL_RCC_GetHCLKFreq+0x58>)
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	58024400 	.word	0x58024400
 8007400:	0800f358 	.word	0x0800f358
 8007404:	24000018 	.word	0x24000018
 8007408:	24000014 	.word	0x24000014

0800740c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007410:	f7ff ffcc 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	; (8007434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800f358 	.word	0x0800f358

08007438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800743c:	f7ff ffb6 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	4904      	ldr	r1, [pc, #16]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58024400 	.word	0x58024400
 8007460:	0800f358 	.word	0x0800f358

08007464 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007470:	2300      	movs	r3, #0
 8007472:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d03f      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007488:	d02a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800748a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800748e:	d824      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007494:	d018      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800749a:	d81e      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a4:	d007      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074a6:	e018      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a8:	4ba3      	ldr	r3, [pc, #652]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	4aa2      	ldr	r2, [pc, #648]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074b4:	e015      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	2102      	movs	r1, #2
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 f9d5 	bl	800886c <RCCEx_PLL2_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074c6:	e00c      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	2102      	movs	r1, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fa7e 	bl	80089d0 <RCCEx_PLL3_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074d8:	e003      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
      break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074e8:	4b93      	ldr	r3, [pc, #588]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074f4:	4990      	ldr	r1, [pc, #576]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	650b      	str	r3, [r1, #80]	; 0x50
 80074fa:	e001      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d03d      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	2b04      	cmp	r3, #4
 8007512:	d826      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007514:	a201      	add	r2, pc, #4	; (adr r2, 800751c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	08007531 	.word	0x08007531
 8007520:	0800753f 	.word	0x0800753f
 8007524:	08007551 	.word	0x08007551
 8007528:	08007569 	.word	0x08007569
 800752c:	08007569 	.word	0x08007569
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007530:	4b81      	ldr	r3, [pc, #516]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	4a80      	ldr	r2, [pc, #512]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800753c:	e015      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f991 	bl	800886c <RCCEx_PLL2_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800754e:	e00c      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3324      	adds	r3, #36	; 0x24
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f001 fa3a 	bl	80089d0 <RCCEx_PLL3_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
      break;
 8007566:	e000      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d109      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007570:	4b71      	ldr	r3, [pc, #452]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007574:	f023 0207 	bic.w	r2, r3, #7
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	496e      	ldr	r1, [pc, #440]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800757e:	4313      	orrs	r3, r2
 8007580:	650b      	str	r3, [r1, #80]	; 0x50
 8007582:	e001      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007590:	2b00      	cmp	r3, #0
 8007592:	d042      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759c:	d02b      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a2:	d825      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075a4:	2bc0      	cmp	r3, #192	; 0xc0
 80075a6:	d028      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075a8:	2bc0      	cmp	r3, #192	; 0xc0
 80075aa:	d821      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d016      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80075b0:	2b80      	cmp	r3, #128	; 0x80
 80075b2:	d81d      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d007      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80075bc:	e018      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075be:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	4a5d      	ldr	r2, [pc, #372]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075ca:	e017      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 f94a 	bl	800886c <RCCEx_PLL2_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075dc:	e00e      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3324      	adds	r3, #36	; 0x24
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 f9f3 	bl	80089d0 <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075ee:	e005      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
      break;
 80075f4:	e002      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075f6:	bf00      	nop
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007602:	4b4d      	ldr	r3, [pc, #308]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007606:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	494a      	ldr	r1, [pc, #296]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	650b      	str	r3, [r1, #80]	; 0x50
 8007614:	e001      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007622:	2b00      	cmp	r3, #0
 8007624:	d049      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800762c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007630:	d030      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007636:	d82a      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007638:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800763c:	d02c      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800763e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007642:	d824      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007648:	d018      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800764a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800764e:	d81e      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007658:	d007      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800765a:	e018      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a35      	ldr	r2, [pc, #212]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007668:	e017      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f8fb 	bl	800886c <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800767a:	e00e      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f001 f9a4 	bl	80089d0 <RCCEx_PLL3_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800768c:	e005      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e002      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076ae:	4922      	ldr	r1, [pc, #136]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	658b      	str	r3, [r1, #88]	; 0x58
 80076b4:	e001      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04b      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d0:	d030      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80076d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d6:	d82a      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076dc:	d02e      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80076de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076e2:	d824      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e8:	d018      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80076ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ee:	d81e      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80076f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076f8:	d007      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80076fa:	e018      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4a0d      	ldr	r2, [pc, #52]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007708:	e019      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f001 f8ab 	bl	800886c <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800771a:	e010      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f001 f954 	bl	80089d0 <RCCEx_PLL3_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800772c:	e007      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
      break;
 8007732:	e004      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007738:	58024400 	.word	0x58024400
      break;
 800773c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007744:	4b99      	ldr	r3, [pc, #612]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007748:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007752:	4996      	ldr	r1, [pc, #600]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007754:	4313      	orrs	r3, r2
 8007756:	658b      	str	r3, [r1, #88]	; 0x58
 8007758:	e001      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d032      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776e:	2b30      	cmp	r3, #48	; 0x30
 8007770:	d01c      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007772:	2b30      	cmp	r3, #48	; 0x30
 8007774:	d817      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007776:	2b20      	cmp	r3, #32
 8007778:	d00c      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800777a:	2b20      	cmp	r3, #32
 800777c:	d813      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d016      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007782:	2b10      	cmp	r3, #16
 8007784:	d10f      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007786:	4b89      	ldr	r3, [pc, #548]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a88      	ldr	r2, [pc, #544]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800778c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007792:	e00e      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f001 f866 	bl	800886c <RCCEx_PLL2_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077a4:	e005      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
      break;
 80077aa:	e002      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80077b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d109      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077b8:	4b7c      	ldr	r3, [pc, #496]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c4:	4979      	ldr	r1, [pc, #484]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077ca:	e001      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d047      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e4:	d030      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80077e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ea:	d82a      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80077ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f0:	d02c      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80077f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f6:	d824      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fc:	d018      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80077fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007802:	d81e      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	d007      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800780e:	e018      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007810:	4b66      	ldr	r3, [pc, #408]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4a65      	ldr	r2, [pc, #404]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800781c:	e017      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f001 f821 	bl	800886c <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800782e:	e00e      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f8ca 	bl	80089d0 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007840:	e005      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800784c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007854:	4b55      	ldr	r3, [pc, #340]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007860:	4952      	ldr	r1, [pc, #328]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007862:	4313      	orrs	r3, r2
 8007864:	650b      	str	r3, [r1, #80]	; 0x50
 8007866:	e001      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d049      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007880:	d02e      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007886:	d828      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800788c:	d02a      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800788e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007892:	d822      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007898:	d026      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800789a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800789e:	d81c      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a4:	d010      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80078a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078aa:	d816      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01d      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b4:	d111      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	2101      	movs	r1, #1
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ffd5 	bl	800886c <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078c6:	e012      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	2101      	movs	r1, #1
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 f87e 	bl	80089d0 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078d8:	e009      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
      break;
 80078de:	e006      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80078e0:	bf00      	nop
 80078e2:	e004      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80078e4:	bf00      	nop
 80078e6:	e002      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80078e8:	bf00      	nop
 80078ea:	e000      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80078ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078f4:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007900:	492a      	ldr	r1, [pc, #168]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007902:	4313      	orrs	r3, r2
 8007904:	650b      	str	r3, [r1, #80]	; 0x50
 8007906:	e001      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d04d      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800791e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007922:	d02e      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007928:	d828      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792e:	d02a      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007934:	d822      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800793a:	d026      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800793c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007940:	d81c      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007946:	d010      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800794c:	d816      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01d      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007956:	d111      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ff84 	bl	800886c <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007968:	e012      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3324      	adds	r3, #36	; 0x24
 800796e:	2101      	movs	r1, #1
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f82d 	bl	80089d0 <RCCEx_PLL3_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800797a:	e009      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
      break;
 8007980:	e006      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007982:	bf00      	nop
 8007984:	e004      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007986:	bf00      	nop
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800798e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10c      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079a4:	4901      	ldr	r1, [pc, #4]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	658b      	str	r3, [r1, #88]	; 0x58
 80079aa:	e003      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80079ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c8:	d00e      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80079ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ce:	d814      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x596>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d015      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80079d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d8:	d10f      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079da:	4baf      	ldr	r3, [pc, #700]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	4aae      	ldr	r2, [pc, #696]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079e6:	e00c      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	2101      	movs	r1, #1
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 ff3c 	bl	800886c <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079f8:	e003      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
      break;
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a08:	4ba3      	ldr	r3, [pc, #652]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a14:	49a0      	ldr	r1, [pc, #640]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	650b      	str	r3, [r1, #80]	; 0x50
 8007a1a:	e001      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d032      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d81b      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a73 	.word	0x08007a73
 8007a40:	08007a4d 	.word	0x08007a4d
 8007a44:	08007a5b 	.word	0x08007a5b
 8007a48:	08007a73 	.word	0x08007a73
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b92      	ldr	r3, [pc, #584]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a91      	ldr	r2, [pc, #580]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a58:	e00c      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 ff03 	bl	800886c <RCCEx_PLL2_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a6a:	e003      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a70:	e000      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a7a:	4b87      	ldr	r3, [pc, #540]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	f023 0203 	bic.w	r2, r3, #3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	4984      	ldr	r1, [pc, #528]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a8c:	e001      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8086 	beq.w	8007bac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aa0:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a7d      	ldr	r2, [pc, #500]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aac:	f7fc fd34 	bl	8004518 <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ab2:	e009      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ab4:	f7fc fd30 	bl	8004518 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b64      	cmp	r3, #100	; 0x64
 8007ac0:	d902      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	75fb      	strb	r3, [r7, #23]
        break;
 8007ac6:	e005      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac8:	4b74      	ldr	r3, [pc, #464]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0ef      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d166      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ada:	4b6f      	ldr	r3, [pc, #444]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ae4:	4053      	eors	r3, r2
 8007ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aee:	4b6a      	ldr	r3, [pc, #424]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af8:	4b67      	ldr	r3, [pc, #412]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	4a66      	ldr	r2, [pc, #408]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b02:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b04:	4b64      	ldr	r3, [pc, #400]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a63      	ldr	r2, [pc, #396]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b10:	4a61      	ldr	r2, [pc, #388]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b20:	d115      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fc fcf9 	bl	8004518 <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b28:	e00b      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2a:	f7fc fcf5 	bl	8004518 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d902      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b42:	4b55      	ldr	r3, [pc, #340]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ed      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d126      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b62:	d10d      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007b64:	4b4c      	ldr	r3, [pc, #304]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b72:	0919      	lsrs	r1, r3, #4
 8007b74:	4b4a      	ldr	r3, [pc, #296]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007b76:	400b      	ands	r3, r1
 8007b78:	4947      	ldr	r1, [pc, #284]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
 8007b7e:	e005      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007b80:	4b45      	ldr	r3, [pc, #276]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a44      	ldr	r2, [pc, #272]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b8a:	6113      	str	r3, [r2, #16]
 8007b8c:	4b42      	ldr	r3, [pc, #264]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9a:	493f      	ldr	r1, [pc, #252]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	670b      	str	r3, [r1, #112]	; 0x70
 8007ba0:	e004      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	75bb      	strb	r3, [r7, #22]
 8007ba6:	e001      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8085 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbe:	2b28      	cmp	r3, #40	; 0x28
 8007bc0:	d866      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007bc2:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007ca5 	.word	0x08007ca5
 8007bcc:	08007c91 	.word	0x08007c91
 8007bd0:	08007c91 	.word	0x08007c91
 8007bd4:	08007c91 	.word	0x08007c91
 8007bd8:	08007c91 	.word	0x08007c91
 8007bdc:	08007c91 	.word	0x08007c91
 8007be0:	08007c91 	.word	0x08007c91
 8007be4:	08007c91 	.word	0x08007c91
 8007be8:	08007c6d 	.word	0x08007c6d
 8007bec:	08007c91 	.word	0x08007c91
 8007bf0:	08007c91 	.word	0x08007c91
 8007bf4:	08007c91 	.word	0x08007c91
 8007bf8:	08007c91 	.word	0x08007c91
 8007bfc:	08007c91 	.word	0x08007c91
 8007c00:	08007c91 	.word	0x08007c91
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007c7f 	.word	0x08007c7f
 8007c0c:	08007c91 	.word	0x08007c91
 8007c10:	08007c91 	.word	0x08007c91
 8007c14:	08007c91 	.word	0x08007c91
 8007c18:	08007c91 	.word	0x08007c91
 8007c1c:	08007c91 	.word	0x08007c91
 8007c20:	08007c91 	.word	0x08007c91
 8007c24:	08007c91 	.word	0x08007c91
 8007c28:	08007ca5 	.word	0x08007ca5
 8007c2c:	08007c91 	.word	0x08007c91
 8007c30:	08007c91 	.word	0x08007c91
 8007c34:	08007c91 	.word	0x08007c91
 8007c38:	08007c91 	.word	0x08007c91
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007c91 	.word	0x08007c91
 8007c44:	08007c91 	.word	0x08007c91
 8007c48:	08007ca5 	.word	0x08007ca5
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007c91 	.word	0x08007c91
 8007c54:	08007c91 	.word	0x08007c91
 8007c58:	08007c91 	.word	0x08007c91
 8007c5c:	08007c91 	.word	0x08007c91
 8007c60:	08007c91 	.word	0x08007c91
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	08007ca5 	.word	0x08007ca5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	2101      	movs	r1, #1
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fdfa 	bl	800886c <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c7c:	e013      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3324      	adds	r3, #36	; 0x24
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fea3 	bl	80089d0 <RCCEx_PLL3_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e007      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007c96:	bf00      	nop
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	58024800 	.word	0x58024800
 8007ca0:	00ffffcf 	.word	0x00ffffcf
      break;
 8007ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cac:	4b96      	ldr	r3, [pc, #600]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb8:	4993      	ldr	r1, [pc, #588]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	654b      	str	r3, [r1, #84]	; 0x54
 8007cbe:	e001      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d038      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d821      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d23 	.word	0x08007d23
 8007ce4:	08007cf9 	.word	0x08007cf9
 8007ce8:	08007d0b 	.word	0x08007d0b
 8007cec:	08007d23 	.word	0x08007d23
 8007cf0:	08007d23 	.word	0x08007d23
 8007cf4:	08007d23 	.word	0x08007d23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fdb4 	bl	800886c <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d08:	e00c      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3324      	adds	r3, #36	; 0x24
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fe5d 	bl	80089d0 <RCCEx_PLL3_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d1a:	e003      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d20:	e000      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d2a:	4b77      	ldr	r3, [pc, #476]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	f023 0207 	bic.w	r2, r3, #7
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d36:	4974      	ldr	r1, [pc, #464]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d3c:	e001      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d03a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d821      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007d58:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007da3 	.word	0x08007da3
 8007d64:	08007d79 	.word	0x08007d79
 8007d68:	08007d8b 	.word	0x08007d8b
 8007d6c:	08007da3 	.word	0x08007da3
 8007d70:	08007da3 	.word	0x08007da3
 8007d74:	08007da3 	.word	0x08007da3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fd74 	bl	800886c <RCCEx_PLL2_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d88:	e00c      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3324      	adds	r3, #36	; 0x24
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fe1d 	bl	80089d0 <RCCEx_PLL3_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d9a:	e003      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007daa:	4b57      	ldr	r3, [pc, #348]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dae:	f023 0207 	bic.w	r2, r3, #7
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db8:	4953      	ldr	r1, [pc, #332]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	658b      	str	r3, [r1, #88]	; 0x58
 8007dbe:	e001      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d04b      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dda:	d02e      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de0:	d828      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de6:	d02a      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dec:	d822      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007df2:	d026      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007df8:	d81c      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfe:	d010      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e04:	d816      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01d      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0e:	d111      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fd28 	bl	800886c <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e20:	e012      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	2102      	movs	r1, #2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fdd1 	bl	80089d0 <RCCEx_PLL3_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e32:	e009      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
      break;
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e004      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e4e:	4b2e      	ldr	r3, [pc, #184]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5c:	492a      	ldr	r1, [pc, #168]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	654b      	str	r3, [r1, #84]	; 0x54
 8007e62:	e001      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d04d      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e7e:	d02e      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007e80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e84:	d828      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8a:	d02a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d822      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e96:	d026      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e9c:	d81c      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea2:	d010      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea8:	d816      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01d      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d111      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fcd6 	bl	800886c <RCCEx_PLL2_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ec4:	e012      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3324      	adds	r3, #36	; 0x24
 8007eca:	2102      	movs	r1, #2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fd7f 	bl	80089d0 <RCCEx_PLL3_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ed6:	e009      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
      break;
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007ede:	bf00      	nop
 8007ee0:	e004      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f00:	4901      	ldr	r1, [pc, #4]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	658b      	str	r3, [r1, #88]	; 0x58
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d04b      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f26:	d02e      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007f28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f2c:	d828      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f32:	d02a      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d822      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f3e:	d026      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007f40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f44:	d81c      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f4a:	d010      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f50:	d816      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01d      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5a:	d111      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fc82 	bl	800886c <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f6c:	e012      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3324      	adds	r3, #36	; 0x24
 8007f72:	2102      	movs	r1, #2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fd2b 	bl	80089d0 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f7e:	e009      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
      break;
 8007f84:	e006      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f86:	bf00      	nop
 8007f88:	e004      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e002      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e000      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f9a:	4b9d      	ldr	r3, [pc, #628]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fa8:	4999      	ldr	r1, [pc, #612]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	658b      	str	r3, [r1, #88]	; 0x58
 8007fae:	e001      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fca:	d10a      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3324      	adds	r3, #36	; 0x24
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fcfc 	bl	80089d0 <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007fe2:	4b8b      	ldr	r3, [pc, #556]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff0:	4987      	ldr	r1, [pc, #540]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800c:	d10a      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	2102      	movs	r1, #2
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fcdb 	bl	80089d0 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008024:	4b7a      	ldr	r3, [pc, #488]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008032:	4977      	ldr	r1, [pc, #476]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008034:	4313      	orrs	r3, r2
 8008036:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d034      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800804e:	d01d      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008054:	d817      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d009      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008060:	e011      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fbff 	bl	800886c <RCCEx_PLL2_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008072:	e00c      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	2102      	movs	r1, #2
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fca8 	bl	80089d0 <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008084:	e003      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
      break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800808c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008094:	4b5e      	ldr	r3, [pc, #376]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a2:	495b      	ldr	r1, [pc, #364]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	658b      	str	r3, [r1, #88]	; 0x58
 80080a8:	e001      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d033      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080c4:	d01c      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80080c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080ca:	d816      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80080cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d0:	d003      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d6:	d007      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80080d8:	e00f      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080da:	4b4d      	ldr	r3, [pc, #308]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	4a4c      	ldr	r2, [pc, #304]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80080e6:	e00c      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3324      	adds	r3, #36	; 0x24
 80080ec:	2101      	movs	r1, #1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fc6e 	bl	80089d0 <RCCEx_PLL3_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080f8:	e003      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
      break;
 80080fe:	e000      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008108:	4b41      	ldr	r3, [pc, #260]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008116:	493e      	ldr	r1, [pc, #248]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008118:	4313      	orrs	r3, r2
 800811a:	654b      	str	r3, [r1, #84]	; 0x54
 800811c:	e001      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d029      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813a:	d007      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800813c:	e00f      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813e:	4b34      	ldr	r3, [pc, #208]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	4a33      	ldr	r2, [pc, #204]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800814a:	e00b      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	2102      	movs	r1, #2
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fb8a 	bl	800886c <RCCEx_PLL2_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800815c:	e002      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	75fb      	strb	r3, [r7, #23]
      break;
 8008162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800816a:	4b29      	ldr	r3, [pc, #164]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	4926      	ldr	r1, [pc, #152]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008178:	4313      	orrs	r3, r2
 800817a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800817c:	e001      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3324      	adds	r3, #36	; 0x24
 8008192:	2102      	movs	r1, #2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fc1b 	bl	80089d0 <RCCEx_PLL3_Config>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d033      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b8:	d017      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80081ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081be:	d811      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80081c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c4:	d013      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80081c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ca:	d80b      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d010      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80081d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d4:	d106      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d6:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	4a0d      	ldr	r2, [pc, #52]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80081e2:	e007      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
      break;
 80081e8:	e004      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80081ea:	bf00      	nop
 80081ec:	e002      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80081f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10c      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008206:	4902      	ldr	r1, [pc, #8]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008208:	4313      	orrs	r3, r2
 800820a:	654b      	str	r3, [r1, #84]	; 0x54
 800820c:	e004      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d008      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008224:	4b31      	ldr	r3, [pc, #196]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008230:	492e      	ldr	r1, [pc, #184]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008232:	4313      	orrs	r3, r2
 8008234:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008242:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008250:	4926      	ldr	r1, [pc, #152]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008252:	4313      	orrs	r3, r2
 8008254:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d008      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008266:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800826e:	491f      	ldr	r1, [pc, #124]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008270:	4313      	orrs	r3, r2
 8008272:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00d      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008280:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800828a:	6113      	str	r3, [r2, #16]
 800828c:	4b17      	ldr	r3, [pc, #92]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008296:	4915      	ldr	r1, [pc, #84]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008298:	4313      	orrs	r3, r2
 800829a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da08      	bge.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	490e      	ldr	r1, [pc, #56]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d009      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082c2:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d0:	4906      	ldr	r1, [pc, #24]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80082d6:	7dbb      	ldrb	r3, [r7, #22]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	58024400 	.word	0x58024400

080082f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082f4:	f7ff f85a 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80082f8:	4602      	mov	r2, r0
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	091b      	lsrs	r3, r3, #4
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	4904      	ldr	r1, [pc, #16]	; (8008318 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008306:	5ccb      	ldrb	r3, [r1, r3]
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	58024400 	.word	0x58024400
 8008318:	0800f358 	.word	0x0800f358

0800831c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800831c:	b480      	push	{r7}
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008324:	4ba1      	ldr	r3, [pc, #644]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800832e:	4b9f      	ldr	r3, [pc, #636]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	0b1b      	lsrs	r3, r3, #12
 8008334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008338:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800833a:	4b9c      	ldr	r3, [pc, #624]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008346:	4b99      	ldr	r3, [pc, #612]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	08db      	lsrs	r3, r3, #3
 800834c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8111 	beq.w	800858c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b02      	cmp	r3, #2
 800836e:	f000 8083 	beq.w	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b02      	cmp	r3, #2
 8008376:	f200 80a1 	bhi.w	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d056      	beq.n	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008386:	e099      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02d      	beq.n	80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008394:	4b85      	ldr	r3, [pc, #532]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	08db      	lsrs	r3, r3, #3
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	4a84      	ldr	r2, [pc, #528]	; (80085b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
 80083a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	ee07 3a90 	vmov	s15, r3
 80083ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b7b      	ldr	r3, [pc, #492]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083ee:	e087      	b.n	8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80085b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008402:	4b6a      	ldr	r3, [pc, #424]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008412:	ed97 6a03 	vldr	s12, [r7, #12]
 8008416:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008432:	e065      	b.n	8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80085bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b59      	ldr	r3, [pc, #356]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a03 	vldr	s12, [r7, #12]
 800845a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008476:	e043      	b.n	8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848a:	4b48      	ldr	r3, [pc, #288]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a03 	vldr	s12, [r7, #12]
 800849e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ba:	e021      	b.n	8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80085bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b37      	ldr	r3, [pc, #220]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008500:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	0a5b      	lsrs	r3, r3, #9
 8008506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800851a:	edd7 6a07 	vldr	s13, [r7, #28]
 800851e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008526:	ee17 2a90 	vmov	r2, s15
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800852e:	4b1f      	ldr	r3, [pc, #124]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	0c1b      	lsrs	r3, r3, #16
 8008534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008548:	edd7 6a07 	vldr	s13, [r7, #28]
 800854c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008554:	ee17 2a90 	vmov	r2, s15
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800855c:	4b13      	ldr	r3, [pc, #76]	; (80085ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	0e1b      	lsrs	r3, r3, #24
 8008562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008576:	edd7 6a07 	vldr	s13, [r7, #28]
 800857a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800857e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008582:	ee17 2a90 	vmov	r2, s15
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800858a:	e008      	b.n	800859e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	609a      	str	r2, [r3, #8]
}
 800859e:	bf00      	nop
 80085a0:	3724      	adds	r7, #36	; 0x24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	58024400 	.word	0x58024400
 80085b0:	03d09000 	.word	0x03d09000
 80085b4:	46000000 	.word	0x46000000
 80085b8:	4c742400 	.word	0x4c742400
 80085bc:	4a742400 	.word	0x4a742400
 80085c0:	4bbebc20 	.word	0x4bbebc20

080085c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b089      	sub	sp, #36	; 0x24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085cc:	4ba1      	ldr	r3, [pc, #644]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80085d6:	4b9f      	ldr	r3, [pc, #636]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	0d1b      	lsrs	r3, r3, #20
 80085dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085e2:	4b9c      	ldr	r3, [pc, #624]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	0a1b      	lsrs	r3, r3, #8
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80085ee:	4b99      	ldr	r3, [pc, #612]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	08db      	lsrs	r3, r3, #3
 80085f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8111 	beq.w	8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b02      	cmp	r3, #2
 8008616:	f000 8083 	beq.w	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b02      	cmp	r3, #2
 800861e:	f200 80a1 	bhi.w	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d056      	beq.n	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800862e:	e099      	b.n	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008630:	4b88      	ldr	r3, [pc, #544]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d02d      	beq.n	8008698 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800863c:	4b85      	ldr	r3, [pc, #532]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	4a84      	ldr	r2, [pc, #528]	; (8008858 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008666:	4b7b      	ldr	r3, [pc, #492]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008676:	ed97 6a03 	vldr	s12, [r7, #12]
 800867a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800885c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008692:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008696:	e087      	b.n	80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008860 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	4b6a      	ldr	r3, [pc, #424]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80086be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800885c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086da:	e065      	b.n	80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	4b59      	ldr	r3, [pc, #356]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008702:	eddf 5a56 	vldr	s11, [pc, #344]	; 800885c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800871e:	e043      	b.n	80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	4b48      	ldr	r3, [pc, #288]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	ed97 6a03 	vldr	s12, [r7, #12]
 8008746:	eddf 5a45 	vldr	s11, [pc, #276]	; 800885c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008762:	e021      	b.n	80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008776:	4b37      	ldr	r3, [pc, #220]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008786:	ed97 6a03 	vldr	s12, [r7, #12]
 800878a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800885c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80087a8:	4b2a      	ldr	r3, [pc, #168]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ac:	0a5b      	lsrs	r3, r3, #9
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ce:	ee17 2a90 	vmov	r2, s15
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80087d6:	4b1f      	ldr	r3, [pc, #124]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fc:	ee17 2a90 	vmov	r2, s15
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008804:	4b13      	ldr	r3, [pc, #76]	; (8008854 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	0e1b      	lsrs	r3, r3, #24
 800880a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800881a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800881e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800882a:	ee17 2a90 	vmov	r2, s15
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008832:	e008      	b.n	8008846 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
}
 8008846:	bf00      	nop
 8008848:	3724      	adds	r7, #36	; 0x24
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	03d09000 	.word	0x03d09000
 800885c:	46000000 	.word	0x46000000
 8008860:	4c742400 	.word	0x4c742400
 8008864:	4a742400 	.word	0x4a742400
 8008868:	4bbebc20 	.word	0x4bbebc20

0800886c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800887a:	4b53      	ldr	r3, [pc, #332]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	2b03      	cmp	r3, #3
 8008884:	d101      	bne.n	800888a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e099      	b.n	80089be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800888a:	4b4f      	ldr	r3, [pc, #316]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a4e      	ldr	r2, [pc, #312]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008890:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008896:	f7fb fe3f 	bl	8004518 <HAL_GetTick>
 800889a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800889c:	e008      	b.n	80088b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800889e:	f7fb fe3b 	bl	8004518 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d901      	bls.n	80088b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e086      	b.n	80089be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088b0:	4b45      	ldr	r3, [pc, #276]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f0      	bne.n	800889e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088bc:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	031b      	lsls	r3, r3, #12
 80088ca:	493f      	ldr	r1, [pc, #252]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	628b      	str	r3, [r1, #40]	; 0x28
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	3b01      	subs	r3, #1
 80088e0:	025b      	lsls	r3, r3, #9
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	041b      	lsls	r3, r3, #16
 80088ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	061b      	lsls	r3, r3, #24
 80088fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008900:	4931      	ldr	r1, [pc, #196]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008906:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	492d      	ldr	r1, [pc, #180]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008914:	4313      	orrs	r3, r2
 8008916:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008918:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	f023 0220 	bic.w	r2, r3, #32
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	4928      	ldr	r1, [pc, #160]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800892a:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <RCCEx_PLL2_Config+0x160>)
 800893c:	4013      	ands	r3, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	69d2      	ldr	r2, [r2, #28]
 8008942:	00d2      	lsls	r2, r2, #3
 8008944:	4920      	ldr	r1, [pc, #128]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008946:	4313      	orrs	r3, r2
 8008948:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800894a:	4b1f      	ldr	r3, [pc, #124]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	4a1e      	ldr	r2, [pc, #120]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008950:	f043 0310 	orr.w	r3, r3, #16
 8008954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d106      	bne.n	800896a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008968:	e00f      	b.n	800898a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d106      	bne.n	800897e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008970:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4a14      	ldr	r2, [pc, #80]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800897a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800897c:	e005      	b.n	800898a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008988:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800898a:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a0e      	ldr	r2, [pc, #56]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 8008990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008996:	f7fb fdbf 	bl	8004518 <HAL_GetTick>
 800899a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800899c:	e008      	b.n	80089b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800899e:	f7fb fdbb 	bl	8004518 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e006      	b.n	80089be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0f0      	beq.n	800899e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	58024400 	.word	0x58024400
 80089cc:	ffff0007 	.word	0xffff0007

080089d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089de:	4b53      	ldr	r3, [pc, #332]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d101      	bne.n	80089ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e099      	b.n	8008b22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089ee:	4b4f      	ldr	r3, [pc, #316]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a4e      	ldr	r2, [pc, #312]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 80089f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089fa:	f7fb fd8d 	bl	8004518 <HAL_GetTick>
 80089fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a00:	e008      	b.n	8008a14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a02:	f7fb fd89 	bl	8004518 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e086      	b.n	8008b22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a14:	4b45      	ldr	r3, [pc, #276]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f0      	bne.n	8008a02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a20:	4b42      	ldr	r3, [pc, #264]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	051b      	lsls	r3, r3, #20
 8008a2e:	493f      	ldr	r1, [pc, #252]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	628b      	str	r3, [r1, #40]	; 0x28
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	025b      	lsls	r3, r3, #9
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a64:	4931      	ldr	r1, [pc, #196]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a6a:	4b30      	ldr	r3, [pc, #192]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	492d      	ldr	r1, [pc, #180]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	4928      	ldr	r1, [pc, #160]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a8e:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <RCCEx_PLL3_Config+0x160>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	69d2      	ldr	r2, [r2, #28]
 8008aa6:	00d2      	lsls	r2, r2, #3
 8008aa8:	4920      	ldr	r1, [pc, #128]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008aae:	4b1f      	ldr	r3, [pc, #124]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ac0:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008acc:	e00f      	b.n	8008aee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d106      	bne.n	8008ae2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ad4:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ada:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ae0:	e005      	b.n	8008aee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a0e      	ldr	r2, [pc, #56]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008afa:	f7fb fd0d 	bl	8004518 <HAL_GetTick>
 8008afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b00:	e008      	b.n	8008b14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b02:	f7fb fd09 	bl	8004518 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e006      	b.n	8008b22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <RCCEx_PLL3_Config+0x15c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	ffff0007 	.word	0xffff0007

08008b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e049      	b.n	8008bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7f9 ffba 	bl	8002ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f001 f804 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d001      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e054      	b.n	8008ca6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d022      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d01d      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a22      	ldr	r2, [pc, #136]	; (8008cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d018      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00e      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	; (8008cc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d009      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d004      	beq.n	8008c64 <HAL_TIM_Base_Start_IT+0x80>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <HAL_TIM_Base_Start_IT+0xe8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d115      	bne.n	8008c90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	4b19      	ldr	r3, [pc, #100]	; (8008cd0 <HAL_TIM_Base_Start_IT+0xec>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d015      	beq.n	8008ca2 <HAL_TIM_Base_Start_IT+0xbe>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7c:	d011      	beq.n	8008ca2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8e:	e008      	b.n	8008ca2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0201 	orr.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e000      	b.n	8008ca4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40010400 	.word	0x40010400
 8008cc8:	40001800 	.word	0x40001800
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	00010007 	.word	0x00010007

08008cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e049      	b.n	8008d7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d106      	bne.n	8008d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f841 	bl	8008d82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f000 ff34 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HAL_TIM_PWM_Start+0x24>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	e03c      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d109      	bne.n	8008dd6 <HAL_TIM_PWM_Start+0x3e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	bf14      	ite	ne
 8008dce:	2301      	movne	r3, #1
 8008dd0:	2300      	moveq	r3, #0
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	e02f      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d109      	bne.n	8008df0 <HAL_TIM_PWM_Start+0x58>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	bf14      	ite	ne
 8008de8:	2301      	movne	r3, #1
 8008dea:	2300      	moveq	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	e022      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b0c      	cmp	r3, #12
 8008df4:	d109      	bne.n	8008e0a <HAL_TIM_PWM_Start+0x72>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	e015      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b10      	cmp	r3, #16
 8008e0e:	d109      	bne.n	8008e24 <HAL_TIM_PWM_Start+0x8c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e008      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e0a1      	b.n	8008f82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_TIM_PWM_Start+0xb6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e4c:	e023      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d104      	bne.n	8008e5e <HAL_TIM_PWM_Start+0xc6>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e5c:	e01b      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d104      	bne.n	8008e6e <HAL_TIM_PWM_Start+0xd6>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e6c:	e013      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b0c      	cmp	r3, #12
 8008e72:	d104      	bne.n	8008e7e <HAL_TIM_PWM_Start+0xe6>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e7c:	e00b      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	d104      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xf6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e8c:	e003      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fba6 	bl	800a5f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a38      	ldr	r2, [pc, #224]	; (8008f8c <HAL_TIM_PWM_Start+0x1f4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d013      	beq.n	8008ed6 <HAL_TIM_PWM_Start+0x13e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a37      	ldr	r2, [pc, #220]	; (8008f90 <HAL_TIM_PWM_Start+0x1f8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00e      	beq.n	8008ed6 <HAL_TIM_PWM_Start+0x13e>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a35      	ldr	r2, [pc, #212]	; (8008f94 <HAL_TIM_PWM_Start+0x1fc>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d009      	beq.n	8008ed6 <HAL_TIM_PWM_Start+0x13e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a34      	ldr	r2, [pc, #208]	; (8008f98 <HAL_TIM_PWM_Start+0x200>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d004      	beq.n	8008ed6 <HAL_TIM_PWM_Start+0x13e>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a32      	ldr	r2, [pc, #200]	; (8008f9c <HAL_TIM_PWM_Start+0x204>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d101      	bne.n	8008eda <HAL_TIM_PWM_Start+0x142>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <HAL_TIM_PWM_Start+0x144>
 8008eda:	2300      	movs	r3, #0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a25      	ldr	r2, [pc, #148]	; (8008f8c <HAL_TIM_PWM_Start+0x1f4>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d022      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f02:	d01d      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <HAL_TIM_PWM_Start+0x208>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d018      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a24      	ldr	r2, [pc, #144]	; (8008fa4 <HAL_TIM_PWM_Start+0x20c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <HAL_TIM_PWM_Start+0x210>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1a      	ldr	r2, [pc, #104]	; (8008f90 <HAL_TIM_PWM_Start+0x1f8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <HAL_TIM_PWM_Start+0x214>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_PWM_Start+0x1a8>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a16      	ldr	r2, [pc, #88]	; (8008f94 <HAL_TIM_PWM_Start+0x1fc>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d115      	bne.n	8008f6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <HAL_TIM_PWM_Start+0x218>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d015      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x1e6>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f58:	d011      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e008      	b.n	8008f7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e000      	b.n	8008f80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40010000 	.word	0x40010000
 8008f90:	40010400 	.word	0x40010400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800
 8008fa0:	40000400 	.word	0x40000400
 8008fa4:	40000800 	.word	0x40000800
 8008fa8:	40000c00 	.word	0x40000c00
 8008fac:	40001800 	.word	0x40001800
 8008fb0:	00010007 	.word	0x00010007

08008fb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e049      	b.n	800905a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f841 	bl	8009062 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f000 fdc4 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <HAL_TIM_IC_Start_IT+0x1e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009092:	b2db      	uxtb	r3, r3
 8009094:	e023      	b.n	80090de <HAL_TIM_IC_Start_IT+0x66>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d104      	bne.n	80090a6 <HAL_TIM_IC_Start_IT+0x2e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	e01b      	b.n	80090de <HAL_TIM_IC_Start_IT+0x66>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d104      	bne.n	80090b6 <HAL_TIM_IC_Start_IT+0x3e>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	e013      	b.n	80090de <HAL_TIM_IC_Start_IT+0x66>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b0c      	cmp	r3, #12
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_IC_Start_IT+0x4e>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	e00b      	b.n	80090de <HAL_TIM_IC_Start_IT+0x66>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b10      	cmp	r3, #16
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_IC_Start_IT+0x5e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	e003      	b.n	80090de <HAL_TIM_IC_Start_IT+0x66>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <HAL_TIM_IC_Start_IT+0x78>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e013      	b.n	8009118 <HAL_TIM_IC_Start_IT+0xa0>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d104      	bne.n	8009100 <HAL_TIM_IC_Start_IT+0x88>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	e00b      	b.n	8009118 <HAL_TIM_IC_Start_IT+0xa0>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b08      	cmp	r3, #8
 8009104:	d104      	bne.n	8009110 <HAL_TIM_IC_Start_IT+0x98>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e003      	b.n	8009118 <HAL_TIM_IC_Start_IT+0xa0>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009116:	b2db      	uxtb	r3, r3
 8009118:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d102      	bne.n	8009126 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009120:	7b7b      	ldrb	r3, [r7, #13]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d001      	beq.n	800912a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e0e2      	b.n	80092f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d104      	bne.n	800913a <HAL_TIM_IC_Start_IT+0xc2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009138:	e023      	b.n	8009182 <HAL_TIM_IC_Start_IT+0x10a>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b04      	cmp	r3, #4
 800913e:	d104      	bne.n	800914a <HAL_TIM_IC_Start_IT+0xd2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009148:	e01b      	b.n	8009182 <HAL_TIM_IC_Start_IT+0x10a>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b08      	cmp	r3, #8
 800914e:	d104      	bne.n	800915a <HAL_TIM_IC_Start_IT+0xe2>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009158:	e013      	b.n	8009182 <HAL_TIM_IC_Start_IT+0x10a>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b0c      	cmp	r3, #12
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0xf2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009168:	e00b      	b.n	8009182 <HAL_TIM_IC_Start_IT+0x10a>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b10      	cmp	r3, #16
 800916e:	d104      	bne.n	800917a <HAL_TIM_IC_Start_IT+0x102>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009178:	e003      	b.n	8009182 <HAL_TIM_IC_Start_IT+0x10a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2202      	movs	r2, #2
 800917e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <HAL_TIM_IC_Start_IT+0x11a>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	e013      	b.n	80091ba <HAL_TIM_IC_Start_IT+0x142>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b04      	cmp	r3, #4
 8009196:	d104      	bne.n	80091a2 <HAL_TIM_IC_Start_IT+0x12a>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a0:	e00b      	b.n	80091ba <HAL_TIM_IC_Start_IT+0x142>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d104      	bne.n	80091b2 <HAL_TIM_IC_Start_IT+0x13a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091b0:	e003      	b.n	80091ba <HAL_TIM_IC_Start_IT+0x142>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b0c      	cmp	r3, #12
 80091be:	d841      	bhi.n	8009244 <HAL_TIM_IC_Start_IT+0x1cc>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <HAL_TIM_IC_Start_IT+0x150>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091fd 	.word	0x080091fd
 80091cc:	08009245 	.word	0x08009245
 80091d0:	08009245 	.word	0x08009245
 80091d4:	08009245 	.word	0x08009245
 80091d8:	0800920f 	.word	0x0800920f
 80091dc:	08009245 	.word	0x08009245
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009221 	.word	0x08009221
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009245 	.word	0x08009245
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009233 	.word	0x08009233
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0202 	orr.w	r2, r2, #2
 800920a:	60da      	str	r2, [r3, #12]
      break;
 800920c:	e01d      	b.n	800924a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 0204 	orr.w	r2, r2, #4
 800921c:	60da      	str	r2, [r3, #12]
      break;
 800921e:	e014      	b.n	800924a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0208 	orr.w	r2, r2, #8
 800922e:	60da      	str	r2, [r3, #12]
      break;
 8009230:	e00b      	b.n	800924a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0210 	orr.w	r2, r2, #16
 8009240:	60da      	str	r2, [r3, #12]
      break;
 8009242:	e002      	b.n	800924a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
      break;
 8009248:	bf00      	nop
  }

  if (status == HAL_OK)
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d14e      	bne.n	80092ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2201      	movs	r2, #1
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f9c9 	bl	800a5f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a25      	ldr	r2, [pc, #148]	; (80092f8 <HAL_TIM_IC_Start_IT+0x280>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d022      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009270:	d01d      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a21      	ldr	r2, [pc, #132]	; (80092fc <HAL_TIM_IC_Start_IT+0x284>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d018      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <HAL_TIM_IC_Start_IT+0x288>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d013      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <HAL_TIM_IC_Start_IT+0x28c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00e      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <HAL_TIM_IC_Start_IT+0x290>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d009      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1b      	ldr	r2, [pc, #108]	; (800930c <HAL_TIM_IC_Start_IT+0x294>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d004      	beq.n	80092ae <HAL_TIM_IC_Start_IT+0x236>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a19      	ldr	r2, [pc, #100]	; (8009310 <HAL_TIM_IC_Start_IT+0x298>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d115      	bne.n	80092da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	4b17      	ldr	r3, [pc, #92]	; (8009314 <HAL_TIM_IC_Start_IT+0x29c>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b06      	cmp	r3, #6
 80092be:	d015      	beq.n	80092ec <HAL_TIM_IC_Start_IT+0x274>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c6:	d011      	beq.n	80092ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d8:	e008      	b.n	80092ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0201 	orr.w	r2, r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e000      	b.n	80092ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40000400 	.word	0x40000400
 8009300:	40000800 	.word	0x40000800
 8009304:	40000c00 	.word	0x40000c00
 8009308:	40010400 	.word	0x40010400
 800930c:	40001800 	.word	0x40001800
 8009310:	40014000 	.word	0x40014000
 8009314:	00010007 	.word	0x00010007

08009318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d122      	bne.n	8009374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b02      	cmp	r3, #2
 800933a:	d11b      	bne.n	8009374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f06f 0202 	mvn.w	r2, #2
 8009344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7f9 fe96 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8009360:	e005      	b.n	800936e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fbee 	bl	8009b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fbf5 	bl	8009b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b04      	cmp	r3, #4
 8009380:	d122      	bne.n	80093c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b04      	cmp	r3, #4
 800938e:	d11b      	bne.n	80093c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f06f 0204 	mvn.w	r2, #4
 8009398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7f9 fe6c 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 80093b4:	e005      	b.n	80093c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fbc4 	bl	8009b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fbcb 	bl	8009b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b08      	cmp	r3, #8
 80093d4:	d122      	bne.n	800941c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d11b      	bne.n	800941c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f06f 0208 	mvn.w	r2, #8
 80093ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2204      	movs	r2, #4
 80093f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7f9 fe42 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8009408:	e005      	b.n	8009416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fb9a 	bl	8009b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fba1 	bl	8009b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b10      	cmp	r3, #16
 8009428:	d122      	bne.n	8009470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b10      	cmp	r3, #16
 8009436:	d11b      	bne.n	8009470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0210 	mvn.w	r2, #16
 8009440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2208      	movs	r2, #8
 8009446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7f9 fe18 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 800945c:	e005      	b.n	800946a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fb70 	bl	8009b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fb77 	bl	8009b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b01      	cmp	r3, #1
 800947c:	d10e      	bne.n	800949c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b01      	cmp	r3, #1
 800948a:	d107      	bne.n	800949c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0201 	mvn.w	r2, #1
 8009494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fb4a 	bl	8009b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a6:	2b80      	cmp	r3, #128	; 0x80
 80094a8:	d10e      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b4:	2b80      	cmp	r3, #128	; 0x80
 80094b6:	d107      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f952 	bl	800a76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d6:	d10e      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b80      	cmp	r3, #128	; 0x80
 80094e4:	d107      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f945 	bl	800a780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	d10e      	bne.n	8009522 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d107      	bne.n	8009522 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb25 	bl	8009b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b20      	cmp	r3, #32
 800952e:	d10e      	bne.n	800954e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d107      	bne.n	800954e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f06f 0220 	mvn.w	r2, #32
 8009546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f905 	bl	800a758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009570:	2302      	movs	r3, #2
 8009572:	e088      	b.n	8009686 <HAL_TIM_IC_ConfigChannel+0x130>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d11b      	bne.n	80095ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f000 fe65 	bl	800a260 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 020c 	bic.w	r2, r2, #12
 80095a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6999      	ldr	r1, [r3, #24]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	619a      	str	r2, [r3, #24]
 80095b8:	e060      	b.n	800967c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d11c      	bne.n	80095fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6819      	ldr	r1, [r3, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	f000 fee9 	bl	800a3a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80095e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6999      	ldr	r1, [r3, #24]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	021a      	lsls	r2, r3, #8
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	619a      	str	r2, [r3, #24]
 80095f8:	e040      	b.n	800967c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d11b      	bne.n	8009638 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6819      	ldr	r1, [r3, #0]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f000 ff36 	bl	800a480 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 020c 	bic.w	r2, r2, #12
 8009622:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69d9      	ldr	r1, [r3, #28]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	61da      	str	r2, [r3, #28]
 8009636:	e021      	b.n	800967c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b0c      	cmp	r3, #12
 800963c:	d11c      	bne.n	8009678 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f000 ff53 	bl	800a4f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69da      	ldr	r2, [r3, #28]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009660:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69d9      	ldr	r1, [r3, #28]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	021a      	lsls	r2, r3, #8
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	61da      	str	r2, [r3, #28]
 8009676:	e001      	b.n	800967c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009684:	7dfb      	ldrb	r3, [r7, #23]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e0ff      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b14      	cmp	r3, #20
 80096ba:	f200 80f0 	bhi.w	800989e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	08009719 	.word	0x08009719
 80096c8:	0800989f 	.word	0x0800989f
 80096cc:	0800989f 	.word	0x0800989f
 80096d0:	0800989f 	.word	0x0800989f
 80096d4:	08009759 	.word	0x08009759
 80096d8:	0800989f 	.word	0x0800989f
 80096dc:	0800989f 	.word	0x0800989f
 80096e0:	0800989f 	.word	0x0800989f
 80096e4:	0800979b 	.word	0x0800979b
 80096e8:	0800989f 	.word	0x0800989f
 80096ec:	0800989f 	.word	0x0800989f
 80096f0:	0800989f 	.word	0x0800989f
 80096f4:	080097db 	.word	0x080097db
 80096f8:	0800989f 	.word	0x0800989f
 80096fc:	0800989f 	.word	0x0800989f
 8009700:	0800989f 	.word	0x0800989f
 8009704:	0800981d 	.word	0x0800981d
 8009708:	0800989f 	.word	0x0800989f
 800970c:	0800989f 	.word	0x0800989f
 8009710:	0800989f 	.word	0x0800989f
 8009714:	0800985d 	.word	0x0800985d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fac8 	bl	8009cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0208 	orr.w	r2, r2, #8
 8009732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	619a      	str	r2, [r3, #24]
      break;
 8009756:	e0a5      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fb38 	bl	8009dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	699a      	ldr	r2, [r3, #24]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6999      	ldr	r1, [r3, #24]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	619a      	str	r2, [r3, #24]
      break;
 8009798:	e084      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fba1 	bl	8009ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0208 	orr.w	r2, r2, #8
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0204 	bic.w	r2, r2, #4
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	61da      	str	r2, [r3, #28]
      break;
 80097d8:	e064      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fc09 	bl	8009ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69da      	ldr	r2, [r3, #28]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69da      	ldr	r2, [r3, #28]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69d9      	ldr	r1, [r3, #28]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	021a      	lsls	r2, r3, #8
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	61da      	str	r2, [r3, #28]
      break;
 800981a:	e043      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fc52 	bl	800a0cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0204 	bic.w	r2, r2, #4
 8009846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800985a:	e023      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fc96 	bl	800a194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	021a      	lsls	r2, r3, #8
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800989c:	e002      	b.n	80098a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
      break;
 80098a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop

080098b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_TIM_ConfigClockSource+0x1c>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e0dc      	b.n	8009a8e <HAL_TIM_ConfigClockSource+0x1d6>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4b6a      	ldr	r3, [pc, #424]	; (8009a98 <HAL_TIM_ConfigClockSource+0x1e0>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a64      	ldr	r2, [pc, #400]	; (8009a9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	f000 80a9 	beq.w	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009910:	4a62      	ldr	r2, [pc, #392]	; (8009a9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009912:	4293      	cmp	r3, r2
 8009914:	f200 80ae 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009918:	4a61      	ldr	r2, [pc, #388]	; (8009aa0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800991a:	4293      	cmp	r3, r2
 800991c:	f000 80a1 	beq.w	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009920:	4a5f      	ldr	r2, [pc, #380]	; (8009aa0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009922:	4293      	cmp	r3, r2
 8009924:	f200 80a6 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009928:	4a5e      	ldr	r2, [pc, #376]	; (8009aa4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800992a:	4293      	cmp	r3, r2
 800992c:	f000 8099 	beq.w	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009930:	4a5c      	ldr	r2, [pc, #368]	; (8009aa4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009932:	4293      	cmp	r3, r2
 8009934:	f200 809e 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009938:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800993c:	f000 8091 	beq.w	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009940:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009944:	f200 8096 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800994c:	f000 8089 	beq.w	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009954:	f200 808e 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800995c:	d03e      	beq.n	80099dc <HAL_TIM_ConfigClockSource+0x124>
 800995e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009962:	f200 8087 	bhi.w	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996a:	f000 8086 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1c2>
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009972:	d87f      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009974:	2b70      	cmp	r3, #112	; 0x70
 8009976:	d01a      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0xf6>
 8009978:	2b70      	cmp	r3, #112	; 0x70
 800997a:	d87b      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 800997c:	2b60      	cmp	r3, #96	; 0x60
 800997e:	d050      	beq.n	8009a22 <HAL_TIM_ConfigClockSource+0x16a>
 8009980:	2b60      	cmp	r3, #96	; 0x60
 8009982:	d877      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009984:	2b50      	cmp	r3, #80	; 0x50
 8009986:	d03c      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0x14a>
 8009988:	2b50      	cmp	r3, #80	; 0x50
 800998a:	d873      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 800998c:	2b40      	cmp	r3, #64	; 0x40
 800998e:	d058      	beq.n	8009a42 <HAL_TIM_ConfigClockSource+0x18a>
 8009990:	2b40      	cmp	r3, #64	; 0x40
 8009992:	d86f      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009994:	2b30      	cmp	r3, #48	; 0x30
 8009996:	d064      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009998:	2b30      	cmp	r3, #48	; 0x30
 800999a:	d86b      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 800999c:	2b20      	cmp	r3, #32
 800999e:	d060      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d867      	bhi.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d05c      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d05a      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0x1aa>
 80099ac:	e062      	b.n	8009a74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	6899      	ldr	r1, [r3, #8]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f000 fdf7 	bl	800a5b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	609a      	str	r2, [r3, #8]
      break;
 80099da:	e04f      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	6899      	ldr	r1, [r3, #8]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f000 fde0 	bl	800a5b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099fe:	609a      	str	r2, [r3, #8]
      break;
 8009a00:	e03c      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	6859      	ldr	r1, [r3, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f000 fc9a 	bl	800a348 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2150      	movs	r1, #80	; 0x50
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fdaa 	bl	800a574 <TIM_ITRx_SetConfig>
      break;
 8009a20:	e02c      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	6859      	ldr	r1, [r3, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f000 fcf6 	bl	800a420 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2160      	movs	r1, #96	; 0x60
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 fd9a 	bl	800a574 <TIM_ITRx_SetConfig>
      break;
 8009a40:	e01c      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	6859      	ldr	r1, [r3, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f000 fc7a 	bl	800a348 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2140      	movs	r1, #64	; 0x40
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fd8a 	bl	800a574 <TIM_ITRx_SetConfig>
      break;
 8009a60:	e00c      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f000 fd81 	bl	800a574 <TIM_ITRx_SetConfig>
      break;
 8009a72:	e003      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
      break;
 8009a78:	e000      	b.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	ffceff88 	.word	0xffceff88
 8009a9c:	00100040 	.word	0x00100040
 8009aa0:	00100030 	.word	0x00100030
 8009aa4:	00100020 	.word	0x00100020

08009aa8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b0c      	cmp	r3, #12
 8009aba:	d831      	bhi.n	8009b20 <HAL_TIM_ReadCapturedValue+0x78>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009b21 	.word	0x08009b21
 8009ad4:	08009b03 	.word	0x08009b03
 8009ad8:	08009b21 	.word	0x08009b21
 8009adc:	08009b21 	.word	0x08009b21
 8009ae0:	08009b21 	.word	0x08009b21
 8009ae4:	08009b0d 	.word	0x08009b0d
 8009ae8:	08009b21 	.word	0x08009b21
 8009aec:	08009b21 	.word	0x08009b21
 8009af0:	08009b21 	.word	0x08009b21
 8009af4:	08009b17 	.word	0x08009b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afe:	60fb      	str	r3, [r7, #12]

      break;
 8009b00:	e00f      	b.n	8009b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	60fb      	str	r3, [r7, #12]

      break;
 8009b0a:	e00a      	b.n	8009b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	60fb      	str	r3, [r7, #12]

      break;
 8009b14:	e005      	b.n	8009b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	60fb      	str	r3, [r7, #12]

      break;
 8009b1e:	e000      	b.n	8009b22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009b20:	bf00      	nop
  }

  return tmpreg;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a40      	ldr	r2, [pc, #256]	; (8009c94 <TIM_Base_SetConfig+0x114>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d013      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9e:	d00f      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a3d      	ldr	r2, [pc, #244]	; (8009c98 <TIM_Base_SetConfig+0x118>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00b      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a3c      	ldr	r2, [pc, #240]	; (8009c9c <TIM_Base_SetConfig+0x11c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d007      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a3b      	ldr	r2, [pc, #236]	; (8009ca0 <TIM_Base_SetConfig+0x120>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a3a      	ldr	r2, [pc, #232]	; (8009ca4 <TIM_Base_SetConfig+0x124>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d108      	bne.n	8009bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a2f      	ldr	r2, [pc, #188]	; (8009c94 <TIM_Base_SetConfig+0x114>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d01f      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be0:	d01b      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a2c      	ldr	r2, [pc, #176]	; (8009c98 <TIM_Base_SetConfig+0x118>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d017      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a2b      	ldr	r2, [pc, #172]	; (8009c9c <TIM_Base_SetConfig+0x11c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d013      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a2a      	ldr	r2, [pc, #168]	; (8009ca0 <TIM_Base_SetConfig+0x120>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d00f      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a29      	ldr	r2, [pc, #164]	; (8009ca4 <TIM_Base_SetConfig+0x124>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00b      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a28      	ldr	r2, [pc, #160]	; (8009ca8 <TIM_Base_SetConfig+0x128>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d007      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a27      	ldr	r2, [pc, #156]	; (8009cac <TIM_Base_SetConfig+0x12c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_Base_SetConfig+0x9a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a26      	ldr	r2, [pc, #152]	; (8009cb0 <TIM_Base_SetConfig+0x130>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d108      	bne.n	8009c2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a10      	ldr	r2, [pc, #64]	; (8009c94 <TIM_Base_SetConfig+0x114>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00f      	beq.n	8009c78 <TIM_Base_SetConfig+0xf8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a12      	ldr	r2, [pc, #72]	; (8009ca4 <TIM_Base_SetConfig+0x124>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00b      	beq.n	8009c78 <TIM_Base_SetConfig+0xf8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <TIM_Base_SetConfig+0x128>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d007      	beq.n	8009c78 <TIM_Base_SetConfig+0xf8>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a10      	ldr	r2, [pc, #64]	; (8009cac <TIM_Base_SetConfig+0x12c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_Base_SetConfig+0xf8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a0f      	ldr	r2, [pc, #60]	; (8009cb0 <TIM_Base_SetConfig+0x130>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d103      	bne.n	8009c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	615a      	str	r2, [r3, #20]
}
 8009c86:	bf00      	nop
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40010000 	.word	0x40010000
 8009c98:	40000400 	.word	0x40000400
 8009c9c:	40000800 	.word	0x40000800
 8009ca0:	40000c00 	.word	0x40000c00
 8009ca4:	40010400 	.word	0x40010400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	40014400 	.word	0x40014400
 8009cb0:	40014800 	.word	0x40014800

08009cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f023 0201 	bic.w	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <TIM_OC1_SetConfig+0x108>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f023 0302 	bic.w	r3, r3, #2
 8009cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a2d      	ldr	r2, [pc, #180]	; (8009dc0 <TIM_OC1_SetConfig+0x10c>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00f      	beq.n	8009d30 <TIM_OC1_SetConfig+0x7c>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a2c      	ldr	r2, [pc, #176]	; (8009dc4 <TIM_OC1_SetConfig+0x110>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d00b      	beq.n	8009d30 <TIM_OC1_SetConfig+0x7c>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a2b      	ldr	r2, [pc, #172]	; (8009dc8 <TIM_OC1_SetConfig+0x114>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d007      	beq.n	8009d30 <TIM_OC1_SetConfig+0x7c>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a2a      	ldr	r2, [pc, #168]	; (8009dcc <TIM_OC1_SetConfig+0x118>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_OC1_SetConfig+0x7c>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a29      	ldr	r2, [pc, #164]	; (8009dd0 <TIM_OC1_SetConfig+0x11c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10c      	bne.n	8009d4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f023 0308 	bic.w	r3, r3, #8
 8009d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f023 0304 	bic.w	r3, r3, #4
 8009d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <TIM_OC1_SetConfig+0x10c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00f      	beq.n	8009d72 <TIM_OC1_SetConfig+0xbe>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a1b      	ldr	r2, [pc, #108]	; (8009dc4 <TIM_OC1_SetConfig+0x110>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00b      	beq.n	8009d72 <TIM_OC1_SetConfig+0xbe>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	; (8009dc8 <TIM_OC1_SetConfig+0x114>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d007      	beq.n	8009d72 <TIM_OC1_SetConfig+0xbe>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a19      	ldr	r2, [pc, #100]	; (8009dcc <TIM_OC1_SetConfig+0x118>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d003      	beq.n	8009d72 <TIM_OC1_SetConfig+0xbe>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a18      	ldr	r2, [pc, #96]	; (8009dd0 <TIM_OC1_SetConfig+0x11c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d111      	bne.n	8009d96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	621a      	str	r2, [r3, #32]
}
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	fffeff8f 	.word	0xfffeff8f
 8009dc0:	40010000 	.word	0x40010000
 8009dc4:	40010400 	.word	0x40010400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	40014400 	.word	0x40014400
 8009dd0:	40014800 	.word	0x40014800

08009dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f023 0210 	bic.w	r2, r3, #16
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4b34      	ldr	r3, [pc, #208]	; (8009ed0 <TIM_OC2_SetConfig+0xfc>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f023 0320 	bic.w	r3, r3, #32
 8009e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a29      	ldr	r2, [pc, #164]	; (8009ed4 <TIM_OC2_SetConfig+0x100>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <TIM_OC2_SetConfig+0x68>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a28      	ldr	r2, [pc, #160]	; (8009ed8 <TIM_OC2_SetConfig+0x104>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d10d      	bne.n	8009e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <TIM_OC2_SetConfig+0x100>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d00f      	beq.n	8009e80 <TIM_OC2_SetConfig+0xac>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <TIM_OC2_SetConfig+0x104>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00b      	beq.n	8009e80 <TIM_OC2_SetConfig+0xac>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1c      	ldr	r2, [pc, #112]	; (8009edc <TIM_OC2_SetConfig+0x108>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d007      	beq.n	8009e80 <TIM_OC2_SetConfig+0xac>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a1b      	ldr	r2, [pc, #108]	; (8009ee0 <TIM_OC2_SetConfig+0x10c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d003      	beq.n	8009e80 <TIM_OC2_SetConfig+0xac>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ee4 <TIM_OC2_SetConfig+0x110>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d113      	bne.n	8009ea8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	621a      	str	r2, [r3, #32]
}
 8009ec2:	bf00      	nop
 8009ec4:	371c      	adds	r7, #28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	feff8fff 	.word	0xfeff8fff
 8009ed4:	40010000 	.word	0x40010000
 8009ed8:	40010400 	.word	0x40010400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800

08009ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4b33      	ldr	r3, [pc, #204]	; (8009fe0 <TIM_OC3_SetConfig+0xf8>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a28      	ldr	r2, [pc, #160]	; (8009fe4 <TIM_OC3_SetConfig+0xfc>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d003      	beq.n	8009f4e <TIM_OC3_SetConfig+0x66>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a27      	ldr	r2, [pc, #156]	; (8009fe8 <TIM_OC3_SetConfig+0x100>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d10d      	bne.n	8009f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	021b      	lsls	r3, r3, #8
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a1d      	ldr	r2, [pc, #116]	; (8009fe4 <TIM_OC3_SetConfig+0xfc>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00f      	beq.n	8009f92 <TIM_OC3_SetConfig+0xaa>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <TIM_OC3_SetConfig+0x100>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00b      	beq.n	8009f92 <TIM_OC3_SetConfig+0xaa>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1b      	ldr	r2, [pc, #108]	; (8009fec <TIM_OC3_SetConfig+0x104>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <TIM_OC3_SetConfig+0xaa>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a1a      	ldr	r2, [pc, #104]	; (8009ff0 <TIM_OC3_SetConfig+0x108>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_OC3_SetConfig+0xaa>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <TIM_OC3_SetConfig+0x10c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d113      	bne.n	8009fba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	011b      	lsls	r3, r3, #4
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	621a      	str	r2, [r3, #32]
}
 8009fd4:	bf00      	nop
 8009fd6:	371c      	adds	r7, #28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	fffeff8f 	.word	0xfffeff8f
 8009fe4:	40010000 	.word	0x40010000
 8009fe8:	40010400 	.word	0x40010400
 8009fec:	40014000 	.word	0x40014000
 8009ff0:	40014400 	.word	0x40014400
 8009ff4:	40014800 	.word	0x40014800

08009ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <TIM_OC4_SetConfig+0xbc>)
 800a024:	4013      	ands	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	031b      	lsls	r3, r3, #12
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a19      	ldr	r2, [pc, #100]	; (800a0b8 <TIM_OC4_SetConfig+0xc0>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d00f      	beq.n	800a078 <TIM_OC4_SetConfig+0x80>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <TIM_OC4_SetConfig+0xc4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00b      	beq.n	800a078 <TIM_OC4_SetConfig+0x80>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <TIM_OC4_SetConfig+0xc8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d007      	beq.n	800a078 <TIM_OC4_SetConfig+0x80>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <TIM_OC4_SetConfig+0xcc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d003      	beq.n	800a078 <TIM_OC4_SetConfig+0x80>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <TIM_OC4_SetConfig+0xd0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d109      	bne.n	800a08c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a07e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	019b      	lsls	r3, r3, #6
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4313      	orrs	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	621a      	str	r2, [r3, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	feff8fff 	.word	0xfeff8fff
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40010400 	.word	0x40010400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800

0800a0cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4b21      	ldr	r3, [pc, #132]	; (800a17c <TIM_OC5_SetConfig+0xb0>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a10c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	041b      	lsls	r3, r3, #16
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a18      	ldr	r2, [pc, #96]	; (800a180 <TIM_OC5_SetConfig+0xb4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00f      	beq.n	800a142 <TIM_OC5_SetConfig+0x76>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a17      	ldr	r2, [pc, #92]	; (800a184 <TIM_OC5_SetConfig+0xb8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00b      	beq.n	800a142 <TIM_OC5_SetConfig+0x76>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a16      	ldr	r2, [pc, #88]	; (800a188 <TIM_OC5_SetConfig+0xbc>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d007      	beq.n	800a142 <TIM_OC5_SetConfig+0x76>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a15      	ldr	r2, [pc, #84]	; (800a18c <TIM_OC5_SetConfig+0xc0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <TIM_OC5_SetConfig+0x76>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <TIM_OC5_SetConfig+0xc4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d109      	bne.n	800a156 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	621a      	str	r2, [r3, #32]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	fffeff8f 	.word	0xfffeff8f
 800a180:	40010000 	.word	0x40010000
 800a184:	40010400 	.word	0x40010400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <TIM_OC6_SetConfig+0xb4>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	051b      	lsls	r3, r3, #20
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a19      	ldr	r2, [pc, #100]	; (800a24c <TIM_OC6_SetConfig+0xb8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d00f      	beq.n	800a20c <TIM_OC6_SetConfig+0x78>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a18      	ldr	r2, [pc, #96]	; (800a250 <TIM_OC6_SetConfig+0xbc>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d00b      	beq.n	800a20c <TIM_OC6_SetConfig+0x78>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a17      	ldr	r2, [pc, #92]	; (800a254 <TIM_OC6_SetConfig+0xc0>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d007      	beq.n	800a20c <TIM_OC6_SetConfig+0x78>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a16      	ldr	r2, [pc, #88]	; (800a258 <TIM_OC6_SetConfig+0xc4>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d003      	beq.n	800a20c <TIM_OC6_SetConfig+0x78>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a15      	ldr	r2, [pc, #84]	; (800a25c <TIM_OC6_SetConfig+0xc8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d109      	bne.n	800a220 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	029b      	lsls	r3, r3, #10
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	feff8fff 	.word	0xfeff8fff
 800a24c:	40010000 	.word	0x40010000
 800a250:	40010400 	.word	0x40010400
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400
 800a25c:	40014800 	.word	0x40014800

0800a260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f023 0201 	bic.w	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4a28      	ldr	r2, [pc, #160]	; (800a32c <TIM_TI1_SetConfig+0xcc>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d01b      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a294:	d017      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4a25      	ldr	r2, [pc, #148]	; (800a330 <TIM_TI1_SetConfig+0xd0>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d013      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4a24      	ldr	r2, [pc, #144]	; (800a334 <TIM_TI1_SetConfig+0xd4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00f      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4a23      	ldr	r2, [pc, #140]	; (800a338 <TIM_TI1_SetConfig+0xd8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d00b      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4a22      	ldr	r2, [pc, #136]	; (800a33c <TIM_TI1_SetConfig+0xdc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d007      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4a21      	ldr	r2, [pc, #132]	; (800a340 <TIM_TI1_SetConfig+0xe0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d003      	beq.n	800a2c6 <TIM_TI1_SetConfig+0x66>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	4a20      	ldr	r2, [pc, #128]	; (800a344 <TIM_TI1_SetConfig+0xe4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d101      	bne.n	800a2ca <TIM_TI1_SetConfig+0x6a>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <TIM_TI1_SetConfig+0x6c>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e003      	b.n	800a2ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f043 0301 	orr.w	r3, r3, #1
 800a2e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f023 030a 	bic.w	r3, r3, #10
 800a304:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f003 030a 	and.w	r3, r3, #10
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4313      	orrs	r3, r2
 800a310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40010000 	.word	0x40010000
 800a330:	40000400 	.word	0x40000400
 800a334:	40000800 	.word	0x40000800
 800a338:	40000c00 	.word	0x40000c00
 800a33c:	40010400 	.word	0x40010400
 800a340:	40001800 	.word	0x40001800
 800a344:	40014000 	.word	0x40014000

0800a348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	f023 0201 	bic.w	r2, r3, #1
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f023 030a 	bic.w	r3, r3, #10
 800a384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f023 0210 	bic.w	r2, r3, #16
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	031b      	lsls	r3, r3, #12
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	621a      	str	r2, [r3, #32]
}
 800a414:	bf00      	nop
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	f023 0210 	bic.w	r2, r3, #16
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a44a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	031b      	lsls	r3, r3, #12
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a45c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	011b      	lsls	r3, r3, #4
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	4313      	orrs	r3, r2
 800a466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	621a      	str	r2, [r3, #32]
}
 800a474:	bf00      	nop
 800a476:	371c      	adds	r7, #28
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	011b      	lsls	r3, r3, #4
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a4d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	621a      	str	r2, [r3, #32]
}
 800a4ec:	bf00      	nop
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a524:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a536:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	031b      	lsls	r3, r3, #12
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a54a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	031b      	lsls	r3, r3, #12
 800a550:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	4313      	orrs	r3, r2
 800a558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	621a      	str	r2, [r3, #32]
}
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <TIM_ITRx_SetConfig+0x38>)
 800a588:	4013      	ands	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	4313      	orrs	r3, r2
 800a592:	f043 0307 	orr.w	r3, r3, #7
 800a596:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	ffcfff8f 	.word	0xffcfff8f

0800a5b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	021a      	lsls	r2, r3, #8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	609a      	str	r2, [r3, #8]
}
 800a5e4:	bf00      	nop
 800a5e6:	371c      	adds	r7, #28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f003 031f 	and.w	r3, r3, #31
 800a602:	2201      	movs	r2, #1
 800a604:	fa02 f303 	lsl.w	r3, r2, r3
 800a608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1a      	ldr	r2, [r3, #32]
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	43db      	mvns	r3, r3
 800a612:	401a      	ands	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6a1a      	ldr	r2, [r3, #32]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f003 031f 	and.w	r3, r3, #31
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	fa01 f303 	lsl.w	r3, r1, r3
 800a628:	431a      	orrs	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
	...

0800a63c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d101      	bne.n	800a654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a650:	2302      	movs	r3, #2
 800a652:	e06d      	b.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a30      	ldr	r2, [pc, #192]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d004      	beq.n	800a688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a2f      	ldr	r2, [pc, #188]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d108      	bne.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a68e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a20      	ldr	r2, [pc, #128]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d022      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c6:	d01d      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d018      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1c      	ldr	r2, [pc, #112]	; (800a748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a1a      	ldr	r2, [pc, #104]	; (800a74c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00e      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d009      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a15      	ldr	r2, [pc, #84]	; (800a754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d10c      	bne.n	800a71e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a70a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	4313      	orrs	r3, r2
 800a714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	40010000 	.word	0x40010000
 800a740:	40010400 	.word	0x40010400
 800a744:	40000400 	.word	0x40000400
 800a748:	40000800 	.word	0x40000800
 800a74c:	40000c00 	.word	0x40000c00
 800a750:	40001800 	.word	0x40001800
 800a754:	40014000 	.word	0x40014000

0800a758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e042      	b.n	800a82c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7f8 fb29 	bl	8002e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2224      	movs	r2, #36	; 0x24
 800a7c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0201 	bic.w	r2, r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fcde 	bl	800b198 <UART_SetConfig>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d101      	bne.n	800a7e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e022      	b.n	800a82c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f001 fa3a 	bl	800bc68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689a      	ldr	r2, [r3, #8]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fac1 	bl	800bdac <UART_CheckIdleState>
 800a82a:	4603      	mov	r3, r0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a834:	b480      	push	{r7}
 800a836:	b091      	sub	sp, #68	; 0x44
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a848:	2b20      	cmp	r3, #32
 800a84a:	f040 808c 	bne.w	800a966 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_UART_Transmit_IT+0x26>
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e084      	b.n	800a968 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_UART_Transmit_IT+0x38>
 800a868:	2302      	movs	r3, #2
 800a86a:	e07d      	b.n	800a968 <HAL_UART_Transmit_IT+0x134>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	88fa      	ldrh	r2, [r7, #6]
 800a87e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	88fa      	ldrh	r2, [r7, #6]
 800a886:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2221      	movs	r2, #33	; 0x21
 800a89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a8:	d12e      	bne.n	800a908 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b2:	d107      	bne.n	800a8c4 <HAL_UART_Transmit_IT+0x90>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4a2d      	ldr	r2, [pc, #180]	; (800a974 <HAL_UART_Transmit_IT+0x140>)
 800a8c0:	675a      	str	r2, [r3, #116]	; 0x74
 800a8c2:	e002      	b.n	800a8ca <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4a2c      	ldr	r2, [pc, #176]	; (800a978 <HAL_UART_Transmit_IT+0x144>)
 800a8c8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f2:	637a      	str	r2, [r7, #52]	; 0x34
 800a8f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e5      	bne.n	800a8d2 <HAL_UART_Transmit_IT+0x9e>
 800a906:	e02c      	b.n	800a962 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a910:	d107      	bne.n	800a922 <HAL_UART_Transmit_IT+0xee>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d103      	bne.n	800a922 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a17      	ldr	r2, [pc, #92]	; (800a97c <HAL_UART_Transmit_IT+0x148>)
 800a91e:	675a      	str	r2, [r3, #116]	; 0x74
 800a920:	e002      	b.n	800a928 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4a16      	ldr	r2, [pc, #88]	; (800a980 <HAL_UART_Transmit_IT+0x14c>)
 800a926:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	613b      	str	r3, [r7, #16]
   return(result);
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a944:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94e:	623b      	str	r3, [r7, #32]
 800a950:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	69f9      	ldr	r1, [r7, #28]
 800a954:	6a3a      	ldr	r2, [r7, #32]
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e6      	bne.n	800a930 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	e000      	b.n	800a968 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a966:	2302      	movs	r3, #2
  }
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3744      	adds	r7, #68	; 0x44
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	0800c57b 	.word	0x0800c57b
 800a978:	0800c49b 	.word	0x0800c49b
 800a97c:	0800c3d9 	.word	0x0800c3d9
 800a980:	0800c321 	.word	0x0800c321

0800a984 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08a      	sub	sp, #40	; 0x28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	2b20      	cmp	r3, #32
 800a99a:	d142      	bne.n	800aa22 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <HAL_UART_Receive_IT+0x24>
 800a9a2:	88fb      	ldrh	r3, [r7, #6]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e03b      	b.n	800aa24 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_UART_Receive_IT+0x36>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e034      	b.n	800aa24 <HAL_UART_Receive_IT+0xa0>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a17      	ldr	r2, [pc, #92]	; (800aa2c <HAL_UART_Receive_IT+0xa8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d01f      	beq.n	800aa12 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d018      	beq.n	800aa12 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	623b      	str	r3, [r7, #32]
 800aa00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	69f9      	ldr	r1, [r7, #28]
 800aa04:	6a3a      	ldr	r2, [r7, #32]
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e6      	bne.n	800a9e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	461a      	mov	r2, r3
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f001 fadb 	bl	800bfd4 <UART_Start_Receive_IT>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	e000      	b.n	800aa24 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aa22:	2302      	movs	r3, #2
  }
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3728      	adds	r7, #40	; 0x28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	58000c00 	.word	0x58000c00

0800aa30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b0ba      	sub	sp, #232	; 0xe8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa5a:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa5e:	4013      	ands	r3, r2
 800aa60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d015      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 835a 	beq.w	800b14e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	4798      	blx	r3
      }
      return;
 800aaa2:	e354      	b.n	800b14e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aaa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 811f 	beq.w	800acec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aaae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aab2:	4b8b      	ldr	r3, [pc, #556]	; (800ace0 <HAL_UART_IRQHandler+0x2b0>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aaba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aabe:	4b89      	ldr	r3, [pc, #548]	; (800ace4 <HAL_UART_IRQHandler+0x2b4>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 8112 	beq.w	800acec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d011      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xc8>
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2201      	movs	r2, #1
 800aae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaee:	f043 0201 	orr.w	r2, r3, #1
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d011      	beq.n	800ab28 <HAL_UART_IRQHandler+0xf8>
 800ab04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2202      	movs	r2, #2
 800ab16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab1e:	f043 0204 	orr.w	r2, r3, #4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d011      	beq.n	800ab58 <HAL_UART_IRQHandler+0x128>
 800ab34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2204      	movs	r2, #4
 800ab46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab4e:	f043 0202 	orr.w	r2, r3, #2
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5c:	f003 0308 	and.w	r3, r3, #8
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d017      	beq.n	800ab94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab68:	f003 0320 	and.w	r3, r3, #32
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d105      	bne.n	800ab7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab74:	4b5a      	ldr	r3, [pc, #360]	; (800ace0 <HAL_UART_IRQHandler+0x2b0>)
 800ab76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2208      	movs	r2, #8
 800ab82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab8a:	f043 0208 	orr.w	r2, r3, #8
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d012      	beq.n	800abc6 <HAL_UART_IRQHandler+0x196>
 800aba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00c      	beq.n	800abc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abbc:	f043 0220 	orr.w	r2, r3, #32
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 82c0 	beq.w	800b152 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d013      	beq.n	800ac06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d105      	bne.n	800abf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d007      	beq.n	800ac06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	2b40      	cmp	r3, #64	; 0x40
 800ac1c:	d005      	beq.n	800ac2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04f      	beq.n	800acca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 fafc 	bl	800c228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b40      	cmp	r3, #64	; 0x40
 800ac3c:	d141      	bne.n	800acc2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3308      	adds	r3, #8
 800ac44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3308      	adds	r3, #8
 800ac66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1d9      	bne.n	800ac3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d013      	beq.n	800acba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac96:	4a14      	ldr	r2, [pc, #80]	; (800ace8 <HAL_UART_IRQHandler+0x2b8>)
 800ac98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fa f8a4 	bl	8004dec <HAL_DMA_Abort_IT>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d017      	beq.n	800acda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	e00f      	b.n	800acda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fa56 	bl	800b16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc0:	e00b      	b.n	800acda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa52 	bl	800b16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc8:	e007      	b.n	800acda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa4e 	bl	800b16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800acd8:	e23b      	b.n	800b152 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acda:	bf00      	nop
    return;
 800acdc:	e239      	b.n	800b152 <HAL_UART_IRQHandler+0x722>
 800acde:	bf00      	nop
 800ace0:	10000001 	.word	0x10000001
 800ace4:	04000120 	.word	0x04000120
 800ace8:	0800c2f5 	.word	0x0800c2f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	f040 81ce 	bne.w	800b092 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfa:	f003 0310 	and.w	r3, r3, #16
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 81c7 	beq.w	800b092 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 81c0 	beq.w	800b092 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2210      	movs	r2, #16
 800ad18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad24:	2b40      	cmp	r3, #64	; 0x40
 800ad26:	f040 813b 	bne.w	800afa0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a8b      	ldr	r2, [pc, #556]	; (800af60 <HAL_UART_IRQHandler+0x530>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d059      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a89      	ldr	r2, [pc, #548]	; (800af64 <HAL_UART_IRQHandler+0x534>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d053      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a87      	ldr	r2, [pc, #540]	; (800af68 <HAL_UART_IRQHandler+0x538>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d04d      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a85      	ldr	r2, [pc, #532]	; (800af6c <HAL_UART_IRQHandler+0x53c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d047      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a83      	ldr	r2, [pc, #524]	; (800af70 <HAL_UART_IRQHandler+0x540>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d041      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a81      	ldr	r2, [pc, #516]	; (800af74 <HAL_UART_IRQHandler+0x544>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d03b      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a7f      	ldr	r2, [pc, #508]	; (800af78 <HAL_UART_IRQHandler+0x548>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d035      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a7d      	ldr	r2, [pc, #500]	; (800af7c <HAL_UART_IRQHandler+0x54c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d02f      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a7b      	ldr	r2, [pc, #492]	; (800af80 <HAL_UART_IRQHandler+0x550>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d029      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a79      	ldr	r2, [pc, #484]	; (800af84 <HAL_UART_IRQHandler+0x554>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d023      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a77      	ldr	r2, [pc, #476]	; (800af88 <HAL_UART_IRQHandler+0x558>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d01d      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a75      	ldr	r2, [pc, #468]	; (800af8c <HAL_UART_IRQHandler+0x55c>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d017      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a73      	ldr	r2, [pc, #460]	; (800af90 <HAL_UART_IRQHandler+0x560>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d011      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a71      	ldr	r2, [pc, #452]	; (800af94 <HAL_UART_IRQHandler+0x564>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00b      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a6f      	ldr	r2, [pc, #444]	; (800af98 <HAL_UART_IRQHandler+0x568>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d005      	beq.n	800adea <HAL_UART_IRQHandler+0x3ba>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a6d      	ldr	r2, [pc, #436]	; (800af9c <HAL_UART_IRQHandler+0x56c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d105      	bne.n	800adf6 <HAL_UART_IRQHandler+0x3c6>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	e004      	b.n	800ae00 <HAL_UART_IRQHandler+0x3d0>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 81a4 	beq.w	800b156 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	f080 819c 	bcs.w	800b156 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae32:	f000 8086 	beq.w	800af42 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae42:	e853 3f00 	ldrex	r3, [r3]
 800ae46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1da      	bne.n	800ae36 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3308      	adds	r3, #8
 800ae86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3308      	adds	r3, #8
 800aea0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aea4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aea8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeaa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aeac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aeb0:	e841 2300 	strex	r3, r2, [r1]
 800aeb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aeb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e1      	bne.n	800ae80 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3308      	adds	r3, #8
 800aec2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aec6:	e853 3f00 	ldrex	r3, [r3]
 800aeca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aee0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aee6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aeee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e3      	bne.n	800aebc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af12:	f023 0310 	bic.w	r3, r3, #16
 800af16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af24:	65bb      	str	r3, [r7, #88]	; 0x58
 800af26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af2c:	e841 2300 	strex	r3, r2, [r1]
 800af30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e4      	bne.n	800af02 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7f9 fc37 	bl	80047b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af4e:	b29b      	uxth	r3, r3
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	b29b      	uxth	r3, r3
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f912 	bl	800b180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af5c:	e0fb      	b.n	800b156 <HAL_UART_IRQHandler+0x726>
 800af5e:	bf00      	nop
 800af60:	40020010 	.word	0x40020010
 800af64:	40020028 	.word	0x40020028
 800af68:	40020040 	.word	0x40020040
 800af6c:	40020058 	.word	0x40020058
 800af70:	40020070 	.word	0x40020070
 800af74:	40020088 	.word	0x40020088
 800af78:	400200a0 	.word	0x400200a0
 800af7c:	400200b8 	.word	0x400200b8
 800af80:	40020410 	.word	0x40020410
 800af84:	40020428 	.word	0x40020428
 800af88:	40020440 	.word	0x40020440
 800af8c:	40020458 	.word	0x40020458
 800af90:	40020470 	.word	0x40020470
 800af94:	40020488 	.word	0x40020488
 800af98:	400204a0 	.word	0x400204a0
 800af9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afac:	b29b      	uxth	r3, r3
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 80cc 	beq.w	800b15a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800afc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 80c7 	beq.w	800b15a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afee:	647b      	str	r3, [r7, #68]	; 0x44
 800aff0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aff6:	e841 2300 	strex	r3, r2, [r1]
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1e4      	bne.n	800afcc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	623b      	str	r3, [r7, #32]
   return(result);
 800b012:	6a3a      	ldr	r2, [r7, #32]
 800b014:	4b54      	ldr	r3, [pc, #336]	; (800b168 <HAL_UART_IRQHandler+0x738>)
 800b016:	4013      	ands	r3, r2
 800b018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3308      	adds	r3, #8
 800b022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b026:	633a      	str	r2, [r7, #48]	; 0x30
 800b028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e3      	bne.n	800b002 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0310 	bic.w	r3, r3, #16
 800b062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b070:	61fb      	str	r3, [r7, #28]
 800b072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	69b9      	ldr	r1, [r7, #24]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	617b      	str	r3, [r7, #20]
   return(result);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e4      	bne.n	800b04e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f878 	bl	800b180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b090:	e063      	b.n	800b15a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00e      	beq.n	800b0bc <HAL_UART_IRQHandler+0x68c>
 800b09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b0b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 ff5d 	bl	800cf74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0ba:	e051      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d014      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d03a      	beq.n	800b15e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	4798      	blx	r3
    }
    return;
 800b0f0:	e035      	b.n	800b15e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <HAL_UART_IRQHandler+0x6e2>
 800b0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 faaa 	bl	800c664 <UART_EndTransmit_IT>
    return;
 800b110:	e026      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <HAL_UART_IRQHandler+0x702>
 800b11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b122:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 ff36 	bl	800cf9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b130:	e016      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <HAL_UART_IRQHandler+0x730>
 800b13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b142:	2b00      	cmp	r3, #0
 800b144:	da0c      	bge.n	800b160 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f001 ff1e 	bl	800cf88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b14c:	e008      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
      return;
 800b14e:	bf00      	nop
 800b150:	e006      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
    return;
 800b152:	bf00      	nop
 800b154:	e004      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
      return;
 800b156:	bf00      	nop
 800b158:	e002      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
      return;
 800b15a:	bf00      	nop
 800b15c:	e000      	b.n	800b160 <HAL_UART_IRQHandler+0x730>
    return;
 800b15e:	bf00      	nop
  }
}
 800b160:	37e8      	adds	r7, #232	; 0xe8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	effffffe 	.word	0xeffffffe

0800b16c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b19c:	b092      	sub	sp, #72	; 0x48
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	689a      	ldr	r2, [r3, #8]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	4bbe      	ldr	r3, [pc, #760]	; (800b4c0 <UART_SetConfig+0x328>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1d0:	430b      	orrs	r3, r1
 800b1d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4ab3      	ldr	r2, [pc, #716]	; (800b4c4 <UART_SetConfig+0x32c>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d004      	beq.n	800b204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b200:	4313      	orrs	r3, r2
 800b202:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689a      	ldr	r2, [r3, #8]
 800b20a:	4baf      	ldr	r3, [pc, #700]	; (800b4c8 <UART_SetConfig+0x330>)
 800b20c:	4013      	ands	r3, r2
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b214:	430b      	orrs	r3, r1
 800b216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	f023 010f 	bic.w	r1, r3, #15
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4aa6      	ldr	r2, [pc, #664]	; (800b4cc <UART_SetConfig+0x334>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d177      	bne.n	800b328 <UART_SetConfig+0x190>
 800b238:	4ba5      	ldr	r3, [pc, #660]	; (800b4d0 <UART_SetConfig+0x338>)
 800b23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b240:	2b28      	cmp	r3, #40	; 0x28
 800b242:	d86d      	bhi.n	800b320 <UART_SetConfig+0x188>
 800b244:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0xb4>)
 800b246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24a:	bf00      	nop
 800b24c:	0800b2f1 	.word	0x0800b2f1
 800b250:	0800b321 	.word	0x0800b321
 800b254:	0800b321 	.word	0x0800b321
 800b258:	0800b321 	.word	0x0800b321
 800b25c:	0800b321 	.word	0x0800b321
 800b260:	0800b321 	.word	0x0800b321
 800b264:	0800b321 	.word	0x0800b321
 800b268:	0800b321 	.word	0x0800b321
 800b26c:	0800b2f9 	.word	0x0800b2f9
 800b270:	0800b321 	.word	0x0800b321
 800b274:	0800b321 	.word	0x0800b321
 800b278:	0800b321 	.word	0x0800b321
 800b27c:	0800b321 	.word	0x0800b321
 800b280:	0800b321 	.word	0x0800b321
 800b284:	0800b321 	.word	0x0800b321
 800b288:	0800b321 	.word	0x0800b321
 800b28c:	0800b301 	.word	0x0800b301
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b309 	.word	0x0800b309
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b311 	.word	0x0800b311
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f6:	e222      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fe:	e21e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b300:	2308      	movs	r3, #8
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b306:	e21a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b308:	2310      	movs	r3, #16
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b30e:	e216      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b310:	2320      	movs	r3, #32
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b316:	e212      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b318:	2340      	movs	r3, #64	; 0x40
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b31e:	e20e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b320:	2380      	movs	r3, #128	; 0x80
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b326:	e20a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a69      	ldr	r2, [pc, #420]	; (800b4d4 <UART_SetConfig+0x33c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d130      	bne.n	800b394 <UART_SetConfig+0x1fc>
 800b332:	4b67      	ldr	r3, [pc, #412]	; (800b4d0 <UART_SetConfig+0x338>)
 800b334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b05      	cmp	r3, #5
 800b33c:	d826      	bhi.n	800b38c <UART_SetConfig+0x1f4>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0x1ac>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b35d 	.word	0x0800b35d
 800b348:	0800b365 	.word	0x0800b365
 800b34c:	0800b36d 	.word	0x0800b36d
 800b350:	0800b375 	.word	0x0800b375
 800b354:	0800b37d 	.word	0x0800b37d
 800b358:	0800b385 	.word	0x0800b385
 800b35c:	2300      	movs	r3, #0
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e1ec      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b364:	2304      	movs	r3, #4
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e1e8      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b36c:	2308      	movs	r3, #8
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b372:	e1e4      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b374:	2310      	movs	r3, #16
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37a:	e1e0      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b37c:	2320      	movs	r3, #32
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b382:	e1dc      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38a:	e1d8      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b38c:	2380      	movs	r3, #128	; 0x80
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b392:	e1d4      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a4f      	ldr	r2, [pc, #316]	; (800b4d8 <UART_SetConfig+0x340>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d130      	bne.n	800b400 <UART_SetConfig+0x268>
 800b39e:	4b4c      	ldr	r3, [pc, #304]	; (800b4d0 <UART_SetConfig+0x338>)
 800b3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	2b05      	cmp	r3, #5
 800b3a8:	d826      	bhi.n	800b3f8 <UART_SetConfig+0x260>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <UART_SetConfig+0x218>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b3c9 	.word	0x0800b3c9
 800b3b4:	0800b3d1 	.word	0x0800b3d1
 800b3b8:	0800b3d9 	.word	0x0800b3d9
 800b3bc:	0800b3e1 	.word	0x0800b3e1
 800b3c0:	0800b3e9 	.word	0x0800b3e9
 800b3c4:	0800b3f1 	.word	0x0800b3f1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e1b6      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e1b2      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3d8:	2308      	movs	r3, #8
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3de:	e1ae      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e6:	e1aa      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e1a6      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3f0:	2340      	movs	r3, #64	; 0x40
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e1a2      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b3f8:	2380      	movs	r3, #128	; 0x80
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e19e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a35      	ldr	r2, [pc, #212]	; (800b4dc <UART_SetConfig+0x344>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d130      	bne.n	800b46c <UART_SetConfig+0x2d4>
 800b40a:	4b31      	ldr	r3, [pc, #196]	; (800b4d0 <UART_SetConfig+0x338>)
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	f003 0307 	and.w	r3, r3, #7
 800b412:	2b05      	cmp	r3, #5
 800b414:	d826      	bhi.n	800b464 <UART_SetConfig+0x2cc>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <UART_SetConfig+0x284>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b43d 	.word	0x0800b43d
 800b424:	0800b445 	.word	0x0800b445
 800b428:	0800b44d 	.word	0x0800b44d
 800b42c:	0800b455 	.word	0x0800b455
 800b430:	0800b45d 	.word	0x0800b45d
 800b434:	2300      	movs	r3, #0
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e180      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b43c:	2304      	movs	r3, #4
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e17c      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b444:	2308      	movs	r3, #8
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44a:	e178      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b44c:	2310      	movs	r3, #16
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b452:	e174      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b454:	2320      	movs	r3, #32
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e170      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e16c      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b464:	2380      	movs	r3, #128	; 0x80
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46a:	e168      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1b      	ldr	r2, [pc, #108]	; (800b4e0 <UART_SetConfig+0x348>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d142      	bne.n	800b4fc <UART_SetConfig+0x364>
 800b476:	4b16      	ldr	r3, [pc, #88]	; (800b4d0 <UART_SetConfig+0x338>)
 800b478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b47a:	f003 0307 	and.w	r3, r3, #7
 800b47e:	2b05      	cmp	r3, #5
 800b480:	d838      	bhi.n	800b4f4 <UART_SetConfig+0x35c>
 800b482:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <UART_SetConfig+0x2f0>)
 800b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b488:	0800b4a1 	.word	0x0800b4a1
 800b48c:	0800b4a9 	.word	0x0800b4a9
 800b490:	0800b4b1 	.word	0x0800b4b1
 800b494:	0800b4b9 	.word	0x0800b4b9
 800b498:	0800b4e5 	.word	0x0800b4e5
 800b49c:	0800b4ed 	.word	0x0800b4ed
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a6:	e14a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ae:	e146      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b6:	e142      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4be:	e13e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4c0:	cfff69f3 	.word	0xcfff69f3
 800b4c4:	58000c00 	.word	0x58000c00
 800b4c8:	11fff4ff 	.word	0x11fff4ff
 800b4cc:	40011000 	.word	0x40011000
 800b4d0:	58024400 	.word	0x58024400
 800b4d4:	40004400 	.word	0x40004400
 800b4d8:	40004800 	.word	0x40004800
 800b4dc:	40004c00 	.word	0x40004c00
 800b4e0:	40005000 	.word	0x40005000
 800b4e4:	2320      	movs	r3, #32
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e128      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4ec:	2340      	movs	r3, #64	; 0x40
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e124      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fa:	e120      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4acb      	ldr	r2, [pc, #812]	; (800b830 <UART_SetConfig+0x698>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d176      	bne.n	800b5f4 <UART_SetConfig+0x45c>
 800b506:	4bcb      	ldr	r3, [pc, #812]	; (800b834 <UART_SetConfig+0x69c>)
 800b508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b50e:	2b28      	cmp	r3, #40	; 0x28
 800b510:	d86c      	bhi.n	800b5ec <UART_SetConfig+0x454>
 800b512:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <UART_SetConfig+0x380>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b5bd 	.word	0x0800b5bd
 800b51c:	0800b5ed 	.word	0x0800b5ed
 800b520:	0800b5ed 	.word	0x0800b5ed
 800b524:	0800b5ed 	.word	0x0800b5ed
 800b528:	0800b5ed 	.word	0x0800b5ed
 800b52c:	0800b5ed 	.word	0x0800b5ed
 800b530:	0800b5ed 	.word	0x0800b5ed
 800b534:	0800b5ed 	.word	0x0800b5ed
 800b538:	0800b5c5 	.word	0x0800b5c5
 800b53c:	0800b5ed 	.word	0x0800b5ed
 800b540:	0800b5ed 	.word	0x0800b5ed
 800b544:	0800b5ed 	.word	0x0800b5ed
 800b548:	0800b5ed 	.word	0x0800b5ed
 800b54c:	0800b5ed 	.word	0x0800b5ed
 800b550:	0800b5ed 	.word	0x0800b5ed
 800b554:	0800b5ed 	.word	0x0800b5ed
 800b558:	0800b5cd 	.word	0x0800b5cd
 800b55c:	0800b5ed 	.word	0x0800b5ed
 800b560:	0800b5ed 	.word	0x0800b5ed
 800b564:	0800b5ed 	.word	0x0800b5ed
 800b568:	0800b5ed 	.word	0x0800b5ed
 800b56c:	0800b5ed 	.word	0x0800b5ed
 800b570:	0800b5ed 	.word	0x0800b5ed
 800b574:	0800b5ed 	.word	0x0800b5ed
 800b578:	0800b5d5 	.word	0x0800b5d5
 800b57c:	0800b5ed 	.word	0x0800b5ed
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b5ed 	.word	0x0800b5ed
 800b588:	0800b5ed 	.word	0x0800b5ed
 800b58c:	0800b5ed 	.word	0x0800b5ed
 800b590:	0800b5ed 	.word	0x0800b5ed
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b5dd 	.word	0x0800b5dd
 800b59c:	0800b5ed 	.word	0x0800b5ed
 800b5a0:	0800b5ed 	.word	0x0800b5ed
 800b5a4:	0800b5ed 	.word	0x0800b5ed
 800b5a8:	0800b5ed 	.word	0x0800b5ed
 800b5ac:	0800b5ed 	.word	0x0800b5ed
 800b5b0:	0800b5ed 	.word	0x0800b5ed
 800b5b4:	0800b5ed 	.word	0x0800b5ed
 800b5b8:	0800b5e5 	.word	0x0800b5e5
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c2:	e0bc      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ca:	e0b8      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5d2:	e0b4      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5da:	e0b0      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5dc:	2320      	movs	r3, #32
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e0ac      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ea:	e0a8      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5ec:	2380      	movs	r3, #128	; 0x80
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f2:	e0a4      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a8f      	ldr	r2, [pc, #572]	; (800b838 <UART_SetConfig+0x6a0>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d130      	bne.n	800b660 <UART_SetConfig+0x4c8>
 800b5fe:	4b8d      	ldr	r3, [pc, #564]	; (800b834 <UART_SetConfig+0x69c>)
 800b600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	2b05      	cmp	r3, #5
 800b608:	d826      	bhi.n	800b658 <UART_SetConfig+0x4c0>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <UART_SetConfig+0x478>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b629 	.word	0x0800b629
 800b614:	0800b631 	.word	0x0800b631
 800b618:	0800b639 	.word	0x0800b639
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b651 	.word	0x0800b651
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62e:	e086      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b630:	2304      	movs	r3, #4
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b636:	e082      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b638:	2308      	movs	r3, #8
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63e:	e07e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b640:	2310      	movs	r3, #16
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b646:	e07a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b648:	2320      	movs	r3, #32
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e076      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e072      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e06e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a75      	ldr	r2, [pc, #468]	; (800b83c <UART_SetConfig+0x6a4>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d130      	bne.n	800b6cc <UART_SetConfig+0x534>
 800b66a:	4b72      	ldr	r3, [pc, #456]	; (800b834 <UART_SetConfig+0x69c>)
 800b66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	2b05      	cmp	r3, #5
 800b674:	d826      	bhi.n	800b6c4 <UART_SetConfig+0x52c>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <UART_SetConfig+0x4e4>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b695 	.word	0x0800b695
 800b680:	0800b69d 	.word	0x0800b69d
 800b684:	0800b6a5 	.word	0x0800b6a5
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6b5 	.word	0x0800b6b5
 800b690:	0800b6bd 	.word	0x0800b6bd
 800b694:	2300      	movs	r3, #0
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e050      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b69c:	2304      	movs	r3, #4
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a2:	e04c      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6a4:	2308      	movs	r3, #8
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6aa:	e048      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b2:	e044      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6b4:	2320      	movs	r3, #32
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e040      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6bc:	2340      	movs	r3, #64	; 0x40
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e03c      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e038      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a5b      	ldr	r2, [pc, #364]	; (800b840 <UART_SetConfig+0x6a8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d130      	bne.n	800b738 <UART_SetConfig+0x5a0>
 800b6d6:	4b57      	ldr	r3, [pc, #348]	; (800b834 <UART_SetConfig+0x69c>)
 800b6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d826      	bhi.n	800b730 <UART_SetConfig+0x598>
 800b6e2:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <UART_SetConfig+0x550>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b701 	.word	0x0800b701
 800b6ec:	0800b709 	.word	0x0800b709
 800b6f0:	0800b711 	.word	0x0800b711
 800b6f4:	0800b719 	.word	0x0800b719
 800b6f8:	0800b721 	.word	0x0800b721
 800b6fc:	0800b729 	.word	0x0800b729
 800b700:	2302      	movs	r3, #2
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b706:	e01a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b708:	2304      	movs	r3, #4
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70e:	e016      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b710:	2308      	movs	r3, #8
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b716:	e012      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b718:	2310      	movs	r3, #16
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71e:	e00e      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b720:	2320      	movs	r3, #32
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b726:	e00a      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b72e:	e006      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b730:	2380      	movs	r3, #128	; 0x80
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b736:	e002      	b.n	800b73e <UART_SetConfig+0x5a6>
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a3f      	ldr	r2, [pc, #252]	; (800b840 <UART_SetConfig+0x6a8>)
 800b744:	4293      	cmp	r3, r2
 800b746:	f040 80f8 	bne.w	800b93a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b74a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b74e:	2b20      	cmp	r3, #32
 800b750:	dc46      	bgt.n	800b7e0 <UART_SetConfig+0x648>
 800b752:	2b02      	cmp	r3, #2
 800b754:	f2c0 8082 	blt.w	800b85c <UART_SetConfig+0x6c4>
 800b758:	3b02      	subs	r3, #2
 800b75a:	2b1e      	cmp	r3, #30
 800b75c:	d87e      	bhi.n	800b85c <UART_SetConfig+0x6c4>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <UART_SetConfig+0x5cc>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b7e7 	.word	0x0800b7e7
 800b768:	0800b85d 	.word	0x0800b85d
 800b76c:	0800b7ef 	.word	0x0800b7ef
 800b770:	0800b85d 	.word	0x0800b85d
 800b774:	0800b85d 	.word	0x0800b85d
 800b778:	0800b85d 	.word	0x0800b85d
 800b77c:	0800b7ff 	.word	0x0800b7ff
 800b780:	0800b85d 	.word	0x0800b85d
 800b784:	0800b85d 	.word	0x0800b85d
 800b788:	0800b85d 	.word	0x0800b85d
 800b78c:	0800b85d 	.word	0x0800b85d
 800b790:	0800b85d 	.word	0x0800b85d
 800b794:	0800b85d 	.word	0x0800b85d
 800b798:	0800b85d 	.word	0x0800b85d
 800b79c:	0800b80f 	.word	0x0800b80f
 800b7a0:	0800b85d 	.word	0x0800b85d
 800b7a4:	0800b85d 	.word	0x0800b85d
 800b7a8:	0800b85d 	.word	0x0800b85d
 800b7ac:	0800b85d 	.word	0x0800b85d
 800b7b0:	0800b85d 	.word	0x0800b85d
 800b7b4:	0800b85d 	.word	0x0800b85d
 800b7b8:	0800b85d 	.word	0x0800b85d
 800b7bc:	0800b85d 	.word	0x0800b85d
 800b7c0:	0800b85d 	.word	0x0800b85d
 800b7c4:	0800b85d 	.word	0x0800b85d
 800b7c8:	0800b85d 	.word	0x0800b85d
 800b7cc:	0800b85d 	.word	0x0800b85d
 800b7d0:	0800b85d 	.word	0x0800b85d
 800b7d4:	0800b85d 	.word	0x0800b85d
 800b7d8:	0800b85d 	.word	0x0800b85d
 800b7dc:	0800b84f 	.word	0x0800b84f
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d037      	beq.n	800b854 <UART_SetConfig+0x6bc>
 800b7e4:	e03a      	b.n	800b85c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b7e6:	f7fc fd83 	bl	80082f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b7ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7ec:	e03c      	b.n	800b868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fc fd92 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7fc:	e034      	b.n	800b868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7fe:	f107 0318 	add.w	r3, r7, #24
 800b802:	4618      	mov	r0, r3
 800b804:	f7fc fede 	bl	80085c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b80c:	e02c      	b.n	800b868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <UART_SetConfig+0x69c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	d016      	beq.n	800b848 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b81a:	4b06      	ldr	r3, [pc, #24]	; (800b834 <UART_SetConfig+0x69c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	08db      	lsrs	r3, r3, #3
 800b820:	f003 0303 	and.w	r3, r3, #3
 800b824:	4a07      	ldr	r2, [pc, #28]	; (800b844 <UART_SetConfig+0x6ac>)
 800b826:	fa22 f303 	lsr.w	r3, r2, r3
 800b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b82c:	e01c      	b.n	800b868 <UART_SetConfig+0x6d0>
 800b82e:	bf00      	nop
 800b830:	40011400 	.word	0x40011400
 800b834:	58024400 	.word	0x58024400
 800b838:	40007800 	.word	0x40007800
 800b83c:	40007c00 	.word	0x40007c00
 800b840:	58000c00 	.word	0x58000c00
 800b844:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b848:	4b9d      	ldr	r3, [pc, #628]	; (800bac0 <UART_SetConfig+0x928>)
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84c:	e00c      	b.n	800b868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b84e:	4b9d      	ldr	r3, [pc, #628]	; (800bac4 <UART_SetConfig+0x92c>)
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b852:	e009      	b.n	800b868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85a:	e005      	b.n	800b868 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b866:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 81de 	beq.w	800bc2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	4a94      	ldr	r2, [pc, #592]	; (800bac8 <UART_SetConfig+0x930>)
 800b876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b87a:	461a      	mov	r2, r3
 800b87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b882:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	685a      	ldr	r2, [r3, #4]
 800b888:	4613      	mov	r3, r2
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	4413      	add	r3, r2
 800b88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b890:	429a      	cmp	r2, r3
 800b892:	d305      	bcc.n	800b8a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d903      	bls.n	800b8a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b8a6:	e1c1      	b.n	800bc2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	60bb      	str	r3, [r7, #8]
 800b8ae:	60fa      	str	r2, [r7, #12]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	4a84      	ldr	r2, [pc, #528]	; (800bac8 <UART_SetConfig+0x930>)
 800b8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2200      	movs	r2, #0
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b8ca:	f7f4 ff1d 	bl	8000708 <__aeabi_uldivmod>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f04f 0200 	mov.w	r2, #0
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	020b      	lsls	r3, r1, #8
 800b8e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b8e4:	0202      	lsls	r2, r0, #8
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	6849      	ldr	r1, [r1, #4]
 800b8ea:	0849      	lsrs	r1, r1, #1
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	eb12 0804 	adds.w	r8, r2, r4
 800b8f6:	eb43 0905 	adc.w	r9, r3, r5
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	469a      	mov	sl, r3
 800b902:	4693      	mov	fp, r2
 800b904:	4652      	mov	r2, sl
 800b906:	465b      	mov	r3, fp
 800b908:	4640      	mov	r0, r8
 800b90a:	4649      	mov	r1, r9
 800b90c:	f7f4 fefc 	bl	8000708 <__aeabi_uldivmod>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4613      	mov	r3, r2
 800b916:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b91e:	d308      	bcc.n	800b932 <UART_SetConfig+0x79a>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b926:	d204      	bcs.n	800b932 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b92e:	60da      	str	r2, [r3, #12]
 800b930:	e17c      	b.n	800bc2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b938:	e178      	b.n	800bc2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b942:	f040 80c5 	bne.w	800bad0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	dc48      	bgt.n	800b9e0 <UART_SetConfig+0x848>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	db7b      	blt.n	800ba4a <UART_SetConfig+0x8b2>
 800b952:	2b20      	cmp	r3, #32
 800b954:	d879      	bhi.n	800ba4a <UART_SetConfig+0x8b2>
 800b956:	a201      	add	r2, pc, #4	; (adr r2, 800b95c <UART_SetConfig+0x7c4>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b9e7 	.word	0x0800b9e7
 800b960:	0800b9ef 	.word	0x0800b9ef
 800b964:	0800ba4b 	.word	0x0800ba4b
 800b968:	0800ba4b 	.word	0x0800ba4b
 800b96c:	0800b9f7 	.word	0x0800b9f7
 800b970:	0800ba4b 	.word	0x0800ba4b
 800b974:	0800ba4b 	.word	0x0800ba4b
 800b978:	0800ba4b 	.word	0x0800ba4b
 800b97c:	0800ba07 	.word	0x0800ba07
 800b980:	0800ba4b 	.word	0x0800ba4b
 800b984:	0800ba4b 	.word	0x0800ba4b
 800b988:	0800ba4b 	.word	0x0800ba4b
 800b98c:	0800ba4b 	.word	0x0800ba4b
 800b990:	0800ba4b 	.word	0x0800ba4b
 800b994:	0800ba4b 	.word	0x0800ba4b
 800b998:	0800ba4b 	.word	0x0800ba4b
 800b99c:	0800ba17 	.word	0x0800ba17
 800b9a0:	0800ba4b 	.word	0x0800ba4b
 800b9a4:	0800ba4b 	.word	0x0800ba4b
 800b9a8:	0800ba4b 	.word	0x0800ba4b
 800b9ac:	0800ba4b 	.word	0x0800ba4b
 800b9b0:	0800ba4b 	.word	0x0800ba4b
 800b9b4:	0800ba4b 	.word	0x0800ba4b
 800b9b8:	0800ba4b 	.word	0x0800ba4b
 800b9bc:	0800ba4b 	.word	0x0800ba4b
 800b9c0:	0800ba4b 	.word	0x0800ba4b
 800b9c4:	0800ba4b 	.word	0x0800ba4b
 800b9c8:	0800ba4b 	.word	0x0800ba4b
 800b9cc:	0800ba4b 	.word	0x0800ba4b
 800b9d0:	0800ba4b 	.word	0x0800ba4b
 800b9d4:	0800ba4b 	.word	0x0800ba4b
 800b9d8:	0800ba4b 	.word	0x0800ba4b
 800b9dc:	0800ba3d 	.word	0x0800ba3d
 800b9e0:	2b40      	cmp	r3, #64	; 0x40
 800b9e2:	d02e      	beq.n	800ba42 <UART_SetConfig+0x8aa>
 800b9e4:	e031      	b.n	800ba4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e6:	f7fb fd11 	bl	800740c <HAL_RCC_GetPCLK1Freq>
 800b9ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9ec:	e033      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9ee:	f7fb fd23 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 800b9f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9f4:	e02f      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc fc8e 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba04:	e027      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba06:	f107 0318 	add.w	r3, r7, #24
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fc fdda 	bl	80085c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba14:	e01f      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba16:	4b2d      	ldr	r3, [pc, #180]	; (800bacc <UART_SetConfig+0x934>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba22:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <UART_SetConfig+0x934>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	08db      	lsrs	r3, r3, #3
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	4a24      	ldr	r2, [pc, #144]	; (800bac0 <UART_SetConfig+0x928>)
 800ba2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba34:	e00f      	b.n	800ba56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba36:	4b22      	ldr	r3, [pc, #136]	; (800bac0 <UART_SetConfig+0x928>)
 800ba38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba3a:	e00c      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba3c:	4b21      	ldr	r3, [pc, #132]	; (800bac4 <UART_SetConfig+0x92c>)
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba40:	e009      	b.n	800ba56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba48:	e005      	b.n	800ba56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f000 80e7 	beq.w	800bc2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	4a19      	ldr	r2, [pc, #100]	; (800bac8 <UART_SetConfig+0x930>)
 800ba64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba70:	005a      	lsls	r2, r3, #1
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	085b      	lsrs	r3, r3, #1
 800ba78:	441a      	add	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	2b0f      	cmp	r3, #15
 800ba88:	d916      	bls.n	800bab8 <UART_SetConfig+0x920>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba90:	d212      	bcs.n	800bab8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	f023 030f 	bic.w	r3, r3, #15
 800ba9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	085b      	lsrs	r3, r3, #1
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800baaa:	4313      	orrs	r3, r2
 800baac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bab4:	60da      	str	r2, [r3, #12]
 800bab6:	e0b9      	b.n	800bc2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800babe:	e0b5      	b.n	800bc2c <UART_SetConfig+0xa94>
 800bac0:	03d09000 	.word	0x03d09000
 800bac4:	003d0900 	.word	0x003d0900
 800bac8:	0800f368 	.word	0x0800f368
 800bacc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bad0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bad4:	2b20      	cmp	r3, #32
 800bad6:	dc49      	bgt.n	800bb6c <UART_SetConfig+0x9d4>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	db7c      	blt.n	800bbd6 <UART_SetConfig+0xa3e>
 800badc:	2b20      	cmp	r3, #32
 800bade:	d87a      	bhi.n	800bbd6 <UART_SetConfig+0xa3e>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <UART_SetConfig+0x950>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bb73 	.word	0x0800bb73
 800baec:	0800bb7b 	.word	0x0800bb7b
 800baf0:	0800bbd7 	.word	0x0800bbd7
 800baf4:	0800bbd7 	.word	0x0800bbd7
 800baf8:	0800bb83 	.word	0x0800bb83
 800bafc:	0800bbd7 	.word	0x0800bbd7
 800bb00:	0800bbd7 	.word	0x0800bbd7
 800bb04:	0800bbd7 	.word	0x0800bbd7
 800bb08:	0800bb93 	.word	0x0800bb93
 800bb0c:	0800bbd7 	.word	0x0800bbd7
 800bb10:	0800bbd7 	.word	0x0800bbd7
 800bb14:	0800bbd7 	.word	0x0800bbd7
 800bb18:	0800bbd7 	.word	0x0800bbd7
 800bb1c:	0800bbd7 	.word	0x0800bbd7
 800bb20:	0800bbd7 	.word	0x0800bbd7
 800bb24:	0800bbd7 	.word	0x0800bbd7
 800bb28:	0800bba3 	.word	0x0800bba3
 800bb2c:	0800bbd7 	.word	0x0800bbd7
 800bb30:	0800bbd7 	.word	0x0800bbd7
 800bb34:	0800bbd7 	.word	0x0800bbd7
 800bb38:	0800bbd7 	.word	0x0800bbd7
 800bb3c:	0800bbd7 	.word	0x0800bbd7
 800bb40:	0800bbd7 	.word	0x0800bbd7
 800bb44:	0800bbd7 	.word	0x0800bbd7
 800bb48:	0800bbd7 	.word	0x0800bbd7
 800bb4c:	0800bbd7 	.word	0x0800bbd7
 800bb50:	0800bbd7 	.word	0x0800bbd7
 800bb54:	0800bbd7 	.word	0x0800bbd7
 800bb58:	0800bbd7 	.word	0x0800bbd7
 800bb5c:	0800bbd7 	.word	0x0800bbd7
 800bb60:	0800bbd7 	.word	0x0800bbd7
 800bb64:	0800bbd7 	.word	0x0800bbd7
 800bb68:	0800bbc9 	.word	0x0800bbc9
 800bb6c:	2b40      	cmp	r3, #64	; 0x40
 800bb6e:	d02e      	beq.n	800bbce <UART_SetConfig+0xa36>
 800bb70:	e031      	b.n	800bbd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb72:	f7fb fc4b 	bl	800740c <HAL_RCC_GetPCLK1Freq>
 800bb76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb78:	e033      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb7a:	f7fb fc5d 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 800bb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb80:	e02f      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fc fbc8 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb90:	e027      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb92:	f107 0318 	add.w	r3, r7, #24
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fc fd14 	bl	80085c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba0:	e01f      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bba2:	4b2d      	ldr	r3, [pc, #180]	; (800bc58 <UART_SetConfig+0xac0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0320 	and.w	r3, r3, #32
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d009      	beq.n	800bbc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbae:	4b2a      	ldr	r3, [pc, #168]	; (800bc58 <UART_SetConfig+0xac0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	08db      	lsrs	r3, r3, #3
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	4a28      	ldr	r2, [pc, #160]	; (800bc5c <UART_SetConfig+0xac4>)
 800bbba:	fa22 f303 	lsr.w	r3, r2, r3
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbc0:	e00f      	b.n	800bbe2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bbc2:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <UART_SetConfig+0xac4>)
 800bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc6:	e00c      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbc8:	4b25      	ldr	r3, [pc, #148]	; (800bc60 <UART_SetConfig+0xac8>)
 800bbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbcc:	e009      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd4:	e005      	b.n	800bbe2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bbe0:	bf00      	nop
    }

    if (pclk != 0U)
 800bbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d021      	beq.n	800bc2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	4a1d      	ldr	r2, [pc, #116]	; (800bc64 <UART_SetConfig+0xacc>)
 800bbee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	085b      	lsrs	r3, r3, #1
 800bc00:	441a      	add	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0e:	2b0f      	cmp	r3, #15
 800bc10:	d909      	bls.n	800bc26 <UART_SetConfig+0xa8e>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc18:	d205      	bcs.n	800bc26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60da      	str	r2, [r3, #12]
 800bc24:	e002      	b.n	800bc2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2200      	movs	r2, #0
 800bc46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bc48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3748      	adds	r7, #72	; 0x48
 800bc50:	46bd      	mov	sp, r7
 800bc52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc56:	bf00      	nop
 800bc58:	58024400 	.word	0x58024400
 800bc5c:	03d09000 	.word	0x03d09000
 800bc60:	003d0900 	.word	0x003d0900
 800bc64:	0800f368 	.word	0x0800f368

0800bc68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00a      	beq.n	800bcd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcda:	f003 0308 	and.w	r3, r3, #8
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00a      	beq.n	800bd1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01a      	beq.n	800bd7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd66:	d10a      	bne.n	800bd7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	605a      	str	r2, [r3, #4]
  }
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdbc:	f7f8 fbac 	bl	8004518 <HAL_GetTick>
 800bdc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d10e      	bne.n	800bdee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f82f 	bl	800be42 <UART_WaitOnFlagUntilTimeout>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e025      	b.n	800be3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d10e      	bne.n	800be1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f819 	bl	800be42 <UART_WaitOnFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e00f      	b.n	800be3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2220      	movs	r2, #32
 800be1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2220      	movs	r2, #32
 800be26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b09c      	sub	sp, #112	; 0x70
 800be46:	af00      	add	r7, sp, #0
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	603b      	str	r3, [r7, #0]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be52:	e0a9      	b.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be5a:	f000 80a5 	beq.w	800bfa8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be5e:	f7f8 fb5b 	bl	8004518 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d302      	bcc.n	800be74 <UART_WaitOnFlagUntilTimeout+0x32>
 800be6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be70:	2b00      	cmp	r3, #0
 800be72:	d140      	bne.n	800bef6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be88:	667b      	str	r3, [r7, #100]	; 0x64
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e6      	bne.n	800be74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3308      	adds	r3, #8
 800beac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb0:	e853 3f00 	ldrex	r3, [r3]
 800beb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	663b      	str	r3, [r7, #96]	; 0x60
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3308      	adds	r3, #8
 800bec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bec6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800becc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e5      	bne.n	800bea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2220      	movs	r2, #32
 800bede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e069      	b.n	800bfca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d051      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf12:	d149      	bne.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e6      	bne.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3308      	adds	r3, #8
 800bf56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f023 0301 	bic.w	r3, r3, #1
 800bf66:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf70:	623a      	str	r2, [r7, #32]
 800bf72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	69f9      	ldr	r1, [r7, #28]
 800bf76:	6a3a      	ldr	r2, [r7, #32]
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e5      	bne.n	800bf50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e010      	b.n	800bfca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	69da      	ldr	r2, [r3, #28]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	bf0c      	ite	eq
 800bfb8:	2301      	moveq	r3, #1
 800bfba:	2300      	movne	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	f43f af46 	beq.w	800be54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3770      	adds	r7, #112	; 0x70
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b0a3      	sub	sp, #140	; 0x8c
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	88fa      	ldrh	r2, [r7, #6]
 800bfec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	88fa      	ldrh	r2, [r7, #6]
 800bff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c006:	d10e      	bne.n	800c026 <UART_Start_Receive_IT+0x52>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <UART_Start_Receive_IT+0x48>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c01a:	e02d      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	22ff      	movs	r2, #255	; 0xff
 800c020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c024:	e028      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <UART_Start_Receive_IT+0x76>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <UART_Start_Receive_IT+0x6c>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	22ff      	movs	r2, #255	; 0xff
 800c03a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c03e:	e01b      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	227f      	movs	r2, #127	; 0x7f
 800c044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c048:	e016      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c052:	d10d      	bne.n	800c070 <UART_Start_Receive_IT+0x9c>
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <UART_Start_Receive_IT+0x92>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	227f      	movs	r2, #127	; 0x7f
 800c060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c064:	e008      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	223f      	movs	r2, #63	; 0x3f
 800c06a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c06e:	e003      	b.n	800c078 <UART_Start_Receive_IT+0xa4>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2222      	movs	r2, #34	; 0x22
 800c084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c09a:	f043 0301 	orr.w	r3, r3, #1
 800c09e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c0ac:	673a      	str	r2, [r7, #112]	; 0x70
 800c0ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c0b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c0ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e3      	bne.n	800c088 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c8:	d153      	bne.n	800c172 <UART_Start_Receive_IT+0x19e>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0d0:	88fa      	ldrh	r2, [r7, #6]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d34d      	bcc.n	800c172 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0de:	d107      	bne.n	800c0f0 <UART_Start_Receive_IT+0x11c>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d103      	bne.n	800c0f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4a4b      	ldr	r2, [pc, #300]	; (800c218 <UART_Start_Receive_IT+0x244>)
 800c0ec:	671a      	str	r2, [r3, #112]	; 0x70
 800c0ee:	e002      	b.n	800c0f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a4a      	ldr	r2, [pc, #296]	; (800c21c <UART_Start_Receive_IT+0x248>)
 800c0f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d01a      	beq.n	800c13c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c11a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c12a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c12e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c130:	e841 2300 	strex	r3, r2, [r1]
 800c134:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e4      	bne.n	800c106 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c152:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3308      	adds	r3, #8
 800c15a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c15c:	64ba      	str	r2, [r7, #72]	; 0x48
 800c15e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e5      	bne.n	800c13c <UART_Start_Receive_IT+0x168>
 800c170:	e04a      	b.n	800c208 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17a:	d107      	bne.n	800c18c <UART_Start_Receive_IT+0x1b8>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d103      	bne.n	800c18c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4a26      	ldr	r2, [pc, #152]	; (800c220 <UART_Start_Receive_IT+0x24c>)
 800c188:	671a      	str	r2, [r3, #112]	; 0x70
 800c18a:	e002      	b.n	800c192 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4a25      	ldr	r2, [pc, #148]	; (800c224 <UART_Start_Receive_IT+0x250>)
 800c190:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d019      	beq.n	800c1d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c1b6:	677b      	str	r3, [r7, #116]	; 0x74
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c8:	e841 2300 	strex	r3, r2, [r1]
 800c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e6      	bne.n	800c1a2 <UART_Start_Receive_IT+0x1ce>
 800c1d4:	e018      	b.n	800c208 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	e853 3f00 	ldrex	r3, [r3]
 800c1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f043 0320 	orr.w	r3, r3, #32
 800c1ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1f4:	623b      	str	r3, [r7, #32]
 800c1f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f8:	69f9      	ldr	r1, [r7, #28]
 800c1fa:	6a3a      	ldr	r2, [r7, #32]
 800c1fc:	e841 2300 	strex	r3, r2, [r1]
 800c200:	61bb      	str	r3, [r7, #24]
   return(result);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e6      	bne.n	800c1d6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	378c      	adds	r7, #140	; 0x8c
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	0800cc75 	.word	0x0800cc75
 800c21c:	0800c97d 	.word	0x0800c97d
 800c220:	0800c81b 	.word	0x0800c81b
 800c224:	0800c6bb 	.word	0x0800c6bb

0800c228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c228:	b480      	push	{r7}
 800c22a:	b095      	sub	sp, #84	; 0x54
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c244:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c24e:	643b      	str	r3, [r7, #64]	; 0x40
 800c250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e6      	bne.n	800c230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3308      	adds	r3, #8
 800c268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	61fb      	str	r3, [r7, #28]
   return(result);
 800c272:	69fa      	ldr	r2, [r7, #28]
 800c274:	4b1e      	ldr	r3, [pc, #120]	; (800c2f0 <UART_EndRxTransfer+0xc8>)
 800c276:	4013      	ands	r3, r2
 800c278:	64bb      	str	r3, [r7, #72]	; 0x48
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3308      	adds	r3, #8
 800c280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c282:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e5      	bne.n	800c262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d118      	bne.n	800c2d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	f023 0310 	bic.w	r3, r3, #16
 800c2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2bc:	61bb      	str	r3, [r7, #24]
 800c2be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6979      	ldr	r1, [r7, #20]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	e841 2300 	strex	r3, r2, [r1]
 800c2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e6      	bne.n	800c29e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2220      	movs	r2, #32
 800c2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c2e4:	bf00      	nop
 800c2e6:	3754      	adds	r7, #84	; 0x54
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	effffffe 	.word	0xeffffffe

0800c2f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7fe ff2a 	bl	800b16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c320:	b480      	push	{r7}
 800c322:	b08f      	sub	sp, #60	; 0x3c
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32e:	2b21      	cmp	r3, #33	; 0x21
 800c330:	d14c      	bne.n	800c3cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c338:	b29b      	uxth	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d132      	bne.n	800c3a4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	461a      	mov	r2, r3
 800c35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c35e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c364:	e841 2300 	strex	r3, r2, [r1]
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e6      	bne.n	800c33e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	e853 3f00 	ldrex	r3, [r3]
 800c37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c384:	633b      	str	r3, [r7, #48]	; 0x30
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	61bb      	str	r3, [r7, #24]
 800c390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c392:	6979      	ldr	r1, [r7, #20]
 800c394:	69ba      	ldr	r2, [r7, #24]
 800c396:	e841 2300 	strex	r3, r2, [r1]
 800c39a:	613b      	str	r3, [r7, #16]
   return(result);
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1e6      	bne.n	800c370 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c3a2:	e013      	b.n	800c3cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	781a      	ldrb	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c3cc:	bf00      	nop
 800c3ce:	373c      	adds	r7, #60	; 0x3c
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b091      	sub	sp, #68	; 0x44
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e6:	2b21      	cmp	r3, #33	; 0x21
 800c3e8:	d151      	bne.n	800c48e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d132      	bne.n	800c45c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	e853 3f00 	ldrex	r3, [r3]
 800c402:	623b      	str	r3, [r7, #32]
   return(result);
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c40a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	633b      	str	r3, [r7, #48]	; 0x30
 800c416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41c:	e841 2300 	strex	r3, r2, [r1]
 800c420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e6      	bne.n	800c3f6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	60fb      	str	r3, [r7, #12]
   return(result);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c43c:	637b      	str	r3, [r7, #52]	; 0x34
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	69b9      	ldr	r1, [r7, #24]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	617b      	str	r3, [r7, #20]
   return(result);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e6      	bne.n	800c428 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c45a:	e018      	b.n	800c48e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c470:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c476:	1c9a      	adds	r2, r3, #2
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c482:	b29b      	uxth	r3, r3
 800c484:	3b01      	subs	r3, #1
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c48e:	bf00      	nop
 800c490:	3744      	adds	r7, #68	; 0x44
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b091      	sub	sp, #68	; 0x44
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4a8:	2b21      	cmp	r3, #33	; 0x21
 800c4aa:	d160      	bne.n	800c56e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c4b4:	e057      	b.n	800c566 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d133      	bne.n	800c52a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	e853 3f00 	ldrex	r3, [r3]
 800c4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c4d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e2:	633a      	str	r2, [r7, #48]	; 0x30
 800c4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ea:	e841 2300 	strex	r3, r2, [r1]
 800c4ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1e5      	bne.n	800c4c2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	60fb      	str	r3, [r7, #12]
   return(result);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c50a:	637b      	str	r3, [r7, #52]	; 0x34
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	461a      	mov	r2, r3
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	61fb      	str	r3, [r7, #28]
 800c516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	69b9      	ldr	r1, [r7, #24]
 800c51a:	69fa      	ldr	r2, [r7, #28]
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	617b      	str	r3, [r7, #20]
   return(result);
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e6      	bne.n	800c4f6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c528:	e021      	b.n	800c56e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c534:	2b00      	cmp	r3, #0
 800c536:	d013      	beq.n	800c560 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c554:	b29b      	uxth	r3, r3
 800c556:	3b01      	subs	r3, #1
 800c558:	b29a      	uxth	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c562:	3b01      	subs	r3, #1
 800c564:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c566:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1a4      	bne.n	800c4b6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c56c:	e7ff      	b.n	800c56e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c56e:	bf00      	nop
 800c570:	3744      	adds	r7, #68	; 0x44
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b091      	sub	sp, #68	; 0x44
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c588:	2b21      	cmp	r3, #33	; 0x21
 800c58a:	d165      	bne.n	800c658 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c592:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c594:	e05c      	b.n	800c650 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d133      	bne.n	800c60a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e5      	bne.n	800c5a2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	61bb      	str	r3, [r7, #24]
 800c5f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6979      	ldr	r1, [r7, #20]
 800c5fa:	69ba      	ldr	r2, [r7, #24]
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	613b      	str	r3, [r7, #16]
   return(result);
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e6      	bne.n	800c5d6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c608:	e026      	b.n	800c658 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c614:	2b00      	cmp	r3, #0
 800c616:	d018      	beq.n	800c64a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c61c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c62c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c632:	1c9a      	adds	r2, r3, #2
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c63e:	b29b      	uxth	r3, r3
 800c640:	3b01      	subs	r3, #1
 800c642:	b29a      	uxth	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c64a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c64c:	3b01      	subs	r3, #1
 800c64e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c652:	2b00      	cmp	r3, #0
 800c654:	d19f      	bne.n	800c596 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c656:	e7ff      	b.n	800c658 <UART_TxISR_16BIT_FIFOEN+0xde>
 800c658:	bf00      	nop
 800c65a:	3744      	adds	r7, #68	; 0x44
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	60bb      	str	r3, [r7, #8]
   return(result);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	61bb      	str	r3, [r7, #24]
 800c68c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68e:	6979      	ldr	r1, [r7, #20]
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	e841 2300 	strex	r3, r2, [r1]
 800c696:	613b      	str	r3, [r7, #16]
   return(result);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e6      	bne.n	800c66c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2220      	movs	r2, #32
 800c6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7f6 fca3 	bl	8002ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b2:	bf00      	nop
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b096      	sub	sp, #88	; 0x58
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6d2:	2b22      	cmp	r3, #34	; 0x22
 800c6d4:	f040 8095 	bne.w	800c802 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c6e6:	b2d9      	uxtb	r1, r3
 800c6e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f2:	400a      	ands	r2, r1
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c708:	b29b      	uxth	r3, r3
 800c70a:	3b01      	subs	r3, #1
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d178      	bne.n	800c812 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c734:	653b      	str	r3, [r7, #80]	; 0x50
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c73e:	647b      	str	r3, [r7, #68]	; 0x44
 800c740:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e6      	bne.n	800c720 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	623b      	str	r3, [r7, #32]
   return(result);
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	f023 0301 	bic.w	r3, r3, #1
 800c768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3308      	adds	r3, #8
 800c770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c772:	633a      	str	r2, [r7, #48]	; 0x30
 800c774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e5      	bne.n	800c752 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2220      	movs	r2, #32
 800c78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d12e      	bne.n	800c7fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	e853 3f00 	ldrex	r3, [r3]
 800c7ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f023 0310 	bic.w	r3, r3, #16
 800c7b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7c0:	61fb      	str	r3, [r7, #28]
 800c7c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	69b9      	ldr	r1, [r7, #24]
 800c7c6:	69fa      	ldr	r2, [r7, #28]
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e6      	bne.n	800c7a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	f003 0310 	and.w	r3, r3, #16
 800c7de:	2b10      	cmp	r3, #16
 800c7e0:	d103      	bne.n	800c7ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2210      	movs	r2, #16
 800c7e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7fe fcc4 	bl	800b180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7f8:	e00b      	b.n	800c812 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7f6 fc0a 	bl	8003014 <HAL_UART_RxCpltCallback>
}
 800c800:	e007      	b.n	800c812 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	699a      	ldr	r2, [r3, #24]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f042 0208 	orr.w	r2, r2, #8
 800c810:	619a      	str	r2, [r3, #24]
}
 800c812:	bf00      	nop
 800c814:	3758      	adds	r7, #88	; 0x58
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b096      	sub	sp, #88	; 0x58
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c828:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c832:	2b22      	cmp	r3, #34	; 0x22
 800c834:	f040 8095 	bne.w	800c962 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c846:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c848:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c84c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c850:	4013      	ands	r3, r2
 800c852:	b29a      	uxth	r2, r3
 800c854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c856:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c85c:	1c9a      	adds	r2, r3, #2
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	3b01      	subs	r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d178      	bne.n	800c972 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c894:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89e:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e6      	bne.n	800c880 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f023 0301 	bic.w	r3, r3, #1
 800c8c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e5      	bne.n	800c8b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d12e      	bne.n	800c95a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	f023 0310 	bic.w	r3, r3, #16
 800c916:	647b      	str	r3, [r7, #68]	; 0x44
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c920:	61bb      	str	r3, [r7, #24]
 800c922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c924:	6979      	ldr	r1, [r7, #20]
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	613b      	str	r3, [r7, #16]
   return(result);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e6      	bne.n	800c902 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	f003 0310 	and.w	r3, r3, #16
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d103      	bne.n	800c94a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2210      	movs	r2, #16
 800c948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7fe fc14 	bl	800b180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c958:	e00b      	b.n	800c972 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7f6 fb5a 	bl	8003014 <HAL_UART_RxCpltCallback>
}
 800c960:	e007      	b.n	800c972 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	699a      	ldr	r2, [r3, #24]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f042 0208 	orr.w	r2, r2, #8
 800c970:	619a      	str	r2, [r3, #24]
}
 800c972:	bf00      	nop
 800c974:	3758      	adds	r7, #88	; 0x58
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b0a6      	sub	sp, #152	; 0x98
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c98a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9b2:	2b22      	cmp	r3, #34	; 0x22
 800c9b4:	f040 814d 	bne.w	800cc52 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9c2:	e0f4      	b.n	800cbae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c9d2:	b2d9      	uxtb	r1, r3
 800c9d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9de:	400a      	ands	r2, r1
 800c9e0:	b2d2      	uxtb	r2, r2
 800c9e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d053      	beq.n	800cabe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d011      	beq.n	800ca46 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ca22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2201      	movs	r2, #1
 800ca34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca3c:	f043 0201 	orr.w	r2, r3, #1
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca4a:	f003 0302 	and.w	r3, r3, #2
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d011      	beq.n	800ca76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ca52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2202      	movs	r2, #2
 800ca64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca6c:	f043 0204 	orr.w	r2, r3, #4
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca7a:	f003 0304 	and.w	r3, r3, #4
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d011      	beq.n	800caa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ca82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2204      	movs	r2, #4
 800ca94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca9c:	f043 0202 	orr.w	r2, r3, #2
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d006      	beq.n	800cabe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7fe fb5b 	bl	800b16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d171      	bne.n	800cbae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cad2:	e853 3f00 	ldrex	r3, [r3]
 800cad6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800caec:	66bb      	str	r3, [r7, #104]	; 0x68
 800caee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800caf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cafa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e4      	bne.n	800caca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb12:	4b56      	ldr	r3, [pc, #344]	; (800cc6c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb20:	657a      	str	r2, [r7, #84]	; 0x54
 800cb22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d12e      	bne.n	800cba8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	f023 0310 	bic.w	r3, r3, #16
 800cb64:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb6e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb76:	e841 2300 	strex	r3, r2, [r1]
 800cb7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1e6      	bne.n	800cb50 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69db      	ldr	r3, [r3, #28]
 800cb88:	f003 0310 	and.w	r3, r3, #16
 800cb8c:	2b10      	cmp	r3, #16
 800cb8e:	d103      	bne.n	800cb98 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2210      	movs	r2, #16
 800cb96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb9e:	4619      	mov	r1, r3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7fe faed 	bl	800b180 <HAL_UARTEx_RxEventCallback>
 800cba6:	e002      	b.n	800cbae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7f6 fa33 	bl	8003014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d006      	beq.n	800cbc4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800cbb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f47f af00 	bne.w	800c9c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cbce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d045      	beq.n	800cc62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d23e      	bcs.n	800cc62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3308      	adds	r3, #8
 800cbea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbfa:	673b      	str	r3, [r7, #112]	; 0x70
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3308      	adds	r3, #8
 800cc02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc04:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e5      	bne.n	800cbe4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800cc1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f043 0320 	orr.w	r3, r3, #32
 800cc32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6979      	ldr	r1, [r7, #20]
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	613b      	str	r3, [r7, #16]
   return(result);
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e6      	bne.n	800cc1e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc50:	e007      	b.n	800cc62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	699a      	ldr	r2, [r3, #24]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f042 0208 	orr.w	r2, r2, #8
 800cc60:	619a      	str	r2, [r3, #24]
}
 800cc62:	bf00      	nop
 800cc64:	3798      	adds	r7, #152	; 0x98
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	effffffe 	.word	0xeffffffe
 800cc70:	0800c6bb 	.word	0x0800c6bb

0800cc74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b0a8      	sub	sp, #160	; 0xa0
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc82:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	69db      	ldr	r3, [r3, #28]
 800cc8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccaa:	2b22      	cmp	r3, #34	; 0x22
 800ccac:	f040 8151 	bne.w	800cf52 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccba:	e0f8      	b.n	800ceae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ccce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ccd2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ccde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce4:	1c9a      	adds	r2, r3, #2
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cd06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d053      	beq.n	800cdba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d011      	beq.n	800cd42 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cd1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00b      	beq.n	800cd42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd38:	f043 0201 	orr.w	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d011      	beq.n	800cd72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cd4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00b      	beq.n	800cd72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd68:	f043 0204 	orr.w	r2, r3, #4
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd76:	f003 0304 	and.w	r3, r3, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d011      	beq.n	800cda2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cd7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00b      	beq.n	800cda2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2204      	movs	r2, #4
 800cd90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd98:	f043 0202 	orr.w	r2, r3, #2
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe f9dd 	bl	800b16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d173      	bne.n	800ceae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cdd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cde8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdf0:	e841 2300 	strex	r3, r2, [r1]
 800cdf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cdf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e4      	bne.n	800cdc6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3308      	adds	r3, #8
 800ce02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce0e:	4b57      	ldr	r3, [pc, #348]	; (800cf6c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce20:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e3      	bne.n	800cdfc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2220      	movs	r2, #32
 800ce38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d12e      	bne.n	800cea8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	e853 3f00 	ldrex	r3, [r3]
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	f023 0310 	bic.w	r3, r3, #16
 800ce64:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ce70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e6      	bne.n	800ce50 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b10      	cmp	r3, #16
 800ce8e:	d103      	bne.n	800ce98 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2210      	movs	r2, #16
 800ce96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7fe f96d 	bl	800b180 <HAL_UARTEx_RxEventCallback>
 800cea6:	e002      	b.n	800ceae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7f6 f8b3 	bl	8003014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ceae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800ceb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f47f aefc 	bne.w	800ccbc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cece:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d045      	beq.n	800cf62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cedc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d23e      	bcs.n	800cf62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3308      	adds	r3, #8
 800ceea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	623b      	str	r3, [r7, #32]
   return(result);
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cefa:	677b      	str	r3, [r7, #116]	; 0x74
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3308      	adds	r3, #8
 800cf02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cf04:	633a      	str	r2, [r7, #48]	; 0x30
 800cf06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf0c:	e841 2300 	strex	r3, r2, [r1]
 800cf10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e5      	bne.n	800cee4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a15      	ldr	r2, [pc, #84]	; (800cf70 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800cf1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	e853 3f00 	ldrex	r3, [r3]
 800cf2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f043 0320 	orr.w	r3, r3, #32
 800cf32:	673b      	str	r3, [r7, #112]	; 0x70
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf40:	69b9      	ldr	r1, [r7, #24]
 800cf42:	69fa      	ldr	r2, [r7, #28]
 800cf44:	e841 2300 	strex	r3, r2, [r1]
 800cf48:	617b      	str	r3, [r7, #20]
   return(result);
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e6      	bne.n	800cf1e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf50:	e007      	b.n	800cf62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	699a      	ldr	r2, [r3, #24]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f042 0208 	orr.w	r2, r2, #8
 800cf60:	619a      	str	r2, [r3, #24]
}
 800cf62:	bf00      	nop
 800cf64:	37a0      	adds	r7, #160	; 0xa0
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	effffffe 	.word	0xeffffffe
 800cf70:	0800c81b 	.word	0x0800c81b

0800cf74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	e027      	b.n	800d016 <HAL_UARTEx_DisableFifoMode+0x66>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2224      	movs	r2, #36	; 0x24
 800cfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 0201 	bic.w	r2, r2, #1
 800cfec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cff4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d032:	2b01      	cmp	r3, #1
 800d034:	d101      	bne.n	800d03a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d036:	2302      	movs	r3, #2
 800d038:	e02d      	b.n	800d096 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2224      	movs	r2, #36	; 0x24
 800d046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f022 0201 	bic.w	r2, r2, #1
 800d060:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	430a      	orrs	r2, r1
 800d074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f850 	bl	800d11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2220      	movs	r2, #32
 800d088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d101      	bne.n	800d0b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e02d      	b.n	800d112 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2224      	movs	r2, #36	; 0x24
 800d0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f022 0201 	bic.w	r2, r2, #1
 800d0dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f812 	bl	800d11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d108      	bne.n	800d13e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d13c:	e031      	b.n	800d1a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d13e:	2310      	movs	r3, #16
 800d140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d142:	2310      	movs	r3, #16
 800d144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	0e5b      	lsrs	r3, r3, #25
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0307 	and.w	r3, r3, #7
 800d154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	0f5b      	lsrs	r3, r3, #29
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	f003 0307 	and.w	r3, r3, #7
 800d164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	7b3a      	ldrb	r2, [r7, #12]
 800d16a:	4911      	ldr	r1, [pc, #68]	; (800d1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d16c:	5c8a      	ldrb	r2, [r1, r2]
 800d16e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d172:	7b3a      	ldrb	r2, [r7, #12]
 800d174:	490f      	ldr	r1, [pc, #60]	; (800d1b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d178:	fb93 f3f2 	sdiv	r3, r3, r2
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	7b7a      	ldrb	r2, [r7, #13]
 800d188:	4909      	ldr	r1, [pc, #36]	; (800d1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d18a:	5c8a      	ldrb	r2, [r1, r2]
 800d18c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d190:	7b7a      	ldrb	r2, [r7, #13]
 800d192:	4908      	ldr	r1, [pc, #32]	; (800d1b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d196:	fb93 f3f2 	sdiv	r3, r3, r2
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	0800f380 	.word	0x0800f380
 800d1b4:	0800f388 	.word	0x0800f388

0800d1b8 <__errno>:
 800d1b8:	4b01      	ldr	r3, [pc, #4]	; (800d1c0 <__errno+0x8>)
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	24000024 	.word	0x24000024

0800d1c4 <__libc_init_array>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	4d0d      	ldr	r5, [pc, #52]	; (800d1fc <__libc_init_array+0x38>)
 800d1c8:	4c0d      	ldr	r4, [pc, #52]	; (800d200 <__libc_init_array+0x3c>)
 800d1ca:	1b64      	subs	r4, r4, r5
 800d1cc:	10a4      	asrs	r4, r4, #2
 800d1ce:	2600      	movs	r6, #0
 800d1d0:	42a6      	cmp	r6, r4
 800d1d2:	d109      	bne.n	800d1e8 <__libc_init_array+0x24>
 800d1d4:	4d0b      	ldr	r5, [pc, #44]	; (800d204 <__libc_init_array+0x40>)
 800d1d6:	4c0c      	ldr	r4, [pc, #48]	; (800d208 <__libc_init_array+0x44>)
 800d1d8:	f002 f8a0 	bl	800f31c <_init>
 800d1dc:	1b64      	subs	r4, r4, r5
 800d1de:	10a4      	asrs	r4, r4, #2
 800d1e0:	2600      	movs	r6, #0
 800d1e2:	42a6      	cmp	r6, r4
 800d1e4:	d105      	bne.n	800d1f2 <__libc_init_array+0x2e>
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ec:	4798      	blx	r3
 800d1ee:	3601      	adds	r6, #1
 800d1f0:	e7ee      	b.n	800d1d0 <__libc_init_array+0xc>
 800d1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f6:	4798      	blx	r3
 800d1f8:	3601      	adds	r6, #1
 800d1fa:	e7f2      	b.n	800d1e2 <__libc_init_array+0x1e>
 800d1fc:	080110d0 	.word	0x080110d0
 800d200:	080110d0 	.word	0x080110d0
 800d204:	080110d0 	.word	0x080110d0
 800d208:	080110d4 	.word	0x080110d4

0800d20c <memset>:
 800d20c:	4402      	add	r2, r0
 800d20e:	4603      	mov	r3, r0
 800d210:	4293      	cmp	r3, r2
 800d212:	d100      	bne.n	800d216 <memset+0xa>
 800d214:	4770      	bx	lr
 800d216:	f803 1b01 	strb.w	r1, [r3], #1
 800d21a:	e7f9      	b.n	800d210 <memset+0x4>

0800d21c <siprintf>:
 800d21c:	b40e      	push	{r1, r2, r3}
 800d21e:	b500      	push	{lr}
 800d220:	b09c      	sub	sp, #112	; 0x70
 800d222:	ab1d      	add	r3, sp, #116	; 0x74
 800d224:	9002      	str	r0, [sp, #8]
 800d226:	9006      	str	r0, [sp, #24]
 800d228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d22c:	4809      	ldr	r0, [pc, #36]	; (800d254 <siprintf+0x38>)
 800d22e:	9107      	str	r1, [sp, #28]
 800d230:	9104      	str	r1, [sp, #16]
 800d232:	4909      	ldr	r1, [pc, #36]	; (800d258 <siprintf+0x3c>)
 800d234:	f853 2b04 	ldr.w	r2, [r3], #4
 800d238:	9105      	str	r1, [sp, #20]
 800d23a:	6800      	ldr	r0, [r0, #0]
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	a902      	add	r1, sp, #8
 800d240:	f000 f868 	bl	800d314 <_svfiprintf_r>
 800d244:	9b02      	ldr	r3, [sp, #8]
 800d246:	2200      	movs	r2, #0
 800d248:	701a      	strb	r2, [r3, #0]
 800d24a:	b01c      	add	sp, #112	; 0x70
 800d24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d250:	b003      	add	sp, #12
 800d252:	4770      	bx	lr
 800d254:	24000024 	.word	0x24000024
 800d258:	ffff0208 	.word	0xffff0208

0800d25c <__ssputs_r>:
 800d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d260:	688e      	ldr	r6, [r1, #8]
 800d262:	429e      	cmp	r6, r3
 800d264:	4682      	mov	sl, r0
 800d266:	460c      	mov	r4, r1
 800d268:	4690      	mov	r8, r2
 800d26a:	461f      	mov	r7, r3
 800d26c:	d838      	bhi.n	800d2e0 <__ssputs_r+0x84>
 800d26e:	898a      	ldrh	r2, [r1, #12]
 800d270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d274:	d032      	beq.n	800d2dc <__ssputs_r+0x80>
 800d276:	6825      	ldr	r5, [r4, #0]
 800d278:	6909      	ldr	r1, [r1, #16]
 800d27a:	eba5 0901 	sub.w	r9, r5, r1
 800d27e:	6965      	ldr	r5, [r4, #20]
 800d280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d288:	3301      	adds	r3, #1
 800d28a:	444b      	add	r3, r9
 800d28c:	106d      	asrs	r5, r5, #1
 800d28e:	429d      	cmp	r5, r3
 800d290:	bf38      	it	cc
 800d292:	461d      	movcc	r5, r3
 800d294:	0553      	lsls	r3, r2, #21
 800d296:	d531      	bpl.n	800d2fc <__ssputs_r+0xa0>
 800d298:	4629      	mov	r1, r5
 800d29a:	f000 fb63 	bl	800d964 <_malloc_r>
 800d29e:	4606      	mov	r6, r0
 800d2a0:	b950      	cbnz	r0, 800d2b8 <__ssputs_r+0x5c>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	f8ca 3000 	str.w	r3, [sl]
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b8:	6921      	ldr	r1, [r4, #16]
 800d2ba:	464a      	mov	r2, r9
 800d2bc:	f000 fabe 	bl	800d83c <memcpy>
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	6126      	str	r6, [r4, #16]
 800d2ce:	6165      	str	r5, [r4, #20]
 800d2d0:	444e      	add	r6, r9
 800d2d2:	eba5 0509 	sub.w	r5, r5, r9
 800d2d6:	6026      	str	r6, [r4, #0]
 800d2d8:	60a5      	str	r5, [r4, #8]
 800d2da:	463e      	mov	r6, r7
 800d2dc:	42be      	cmp	r6, r7
 800d2de:	d900      	bls.n	800d2e2 <__ssputs_r+0x86>
 800d2e0:	463e      	mov	r6, r7
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	4641      	mov	r1, r8
 800d2e8:	f000 fab6 	bl	800d858 <memmove>
 800d2ec:	68a3      	ldr	r3, [r4, #8]
 800d2ee:	1b9b      	subs	r3, r3, r6
 800d2f0:	60a3      	str	r3, [r4, #8]
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	4433      	add	r3, r6
 800d2f6:	6023      	str	r3, [r4, #0]
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7db      	b.n	800d2b4 <__ssputs_r+0x58>
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	f000 fba5 	bl	800da4c <_realloc_r>
 800d302:	4606      	mov	r6, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	d1e1      	bne.n	800d2cc <__ssputs_r+0x70>
 800d308:	6921      	ldr	r1, [r4, #16]
 800d30a:	4650      	mov	r0, sl
 800d30c:	f000 fabe 	bl	800d88c <_free_r>
 800d310:	e7c7      	b.n	800d2a2 <__ssputs_r+0x46>
	...

0800d314 <_svfiprintf_r>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	4698      	mov	r8, r3
 800d31a:	898b      	ldrh	r3, [r1, #12]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	b09d      	sub	sp, #116	; 0x74
 800d320:	4607      	mov	r7, r0
 800d322:	460d      	mov	r5, r1
 800d324:	4614      	mov	r4, r2
 800d326:	d50e      	bpl.n	800d346 <_svfiprintf_r+0x32>
 800d328:	690b      	ldr	r3, [r1, #16]
 800d32a:	b963      	cbnz	r3, 800d346 <_svfiprintf_r+0x32>
 800d32c:	2140      	movs	r1, #64	; 0x40
 800d32e:	f000 fb19 	bl	800d964 <_malloc_r>
 800d332:	6028      	str	r0, [r5, #0]
 800d334:	6128      	str	r0, [r5, #16]
 800d336:	b920      	cbnz	r0, 800d342 <_svfiprintf_r+0x2e>
 800d338:	230c      	movs	r3, #12
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d340:	e0d1      	b.n	800d4e6 <_svfiprintf_r+0x1d2>
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	616b      	str	r3, [r5, #20]
 800d346:	2300      	movs	r3, #0
 800d348:	9309      	str	r3, [sp, #36]	; 0x24
 800d34a:	2320      	movs	r3, #32
 800d34c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d350:	f8cd 800c 	str.w	r8, [sp, #12]
 800d354:	2330      	movs	r3, #48	; 0x30
 800d356:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d500 <_svfiprintf_r+0x1ec>
 800d35a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d35e:	f04f 0901 	mov.w	r9, #1
 800d362:	4623      	mov	r3, r4
 800d364:	469a      	mov	sl, r3
 800d366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d36a:	b10a      	cbz	r2, 800d370 <_svfiprintf_r+0x5c>
 800d36c:	2a25      	cmp	r2, #37	; 0x25
 800d36e:	d1f9      	bne.n	800d364 <_svfiprintf_r+0x50>
 800d370:	ebba 0b04 	subs.w	fp, sl, r4
 800d374:	d00b      	beq.n	800d38e <_svfiprintf_r+0x7a>
 800d376:	465b      	mov	r3, fp
 800d378:	4622      	mov	r2, r4
 800d37a:	4629      	mov	r1, r5
 800d37c:	4638      	mov	r0, r7
 800d37e:	f7ff ff6d 	bl	800d25c <__ssputs_r>
 800d382:	3001      	adds	r0, #1
 800d384:	f000 80aa 	beq.w	800d4dc <_svfiprintf_r+0x1c8>
 800d388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d38a:	445a      	add	r2, fp
 800d38c:	9209      	str	r2, [sp, #36]	; 0x24
 800d38e:	f89a 3000 	ldrb.w	r3, [sl]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80a2 	beq.w	800d4dc <_svfiprintf_r+0x1c8>
 800d398:	2300      	movs	r3, #0
 800d39a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3a2:	f10a 0a01 	add.w	sl, sl, #1
 800d3a6:	9304      	str	r3, [sp, #16]
 800d3a8:	9307      	str	r3, [sp, #28]
 800d3aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b0:	4654      	mov	r4, sl
 800d3b2:	2205      	movs	r2, #5
 800d3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b8:	4851      	ldr	r0, [pc, #324]	; (800d500 <_svfiprintf_r+0x1ec>)
 800d3ba:	f7f2 ff99 	bl	80002f0 <memchr>
 800d3be:	9a04      	ldr	r2, [sp, #16]
 800d3c0:	b9d8      	cbnz	r0, 800d3fa <_svfiprintf_r+0xe6>
 800d3c2:	06d0      	lsls	r0, r2, #27
 800d3c4:	bf44      	itt	mi
 800d3c6:	2320      	movmi	r3, #32
 800d3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3cc:	0711      	lsls	r1, r2, #28
 800d3ce:	bf44      	itt	mi
 800d3d0:	232b      	movmi	r3, #43	; 0x2b
 800d3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3da:	2b2a      	cmp	r3, #42	; 0x2a
 800d3dc:	d015      	beq.n	800d40a <_svfiprintf_r+0xf6>
 800d3de:	9a07      	ldr	r2, [sp, #28]
 800d3e0:	4654      	mov	r4, sl
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f04f 0c0a 	mov.w	ip, #10
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ee:	3b30      	subs	r3, #48	; 0x30
 800d3f0:	2b09      	cmp	r3, #9
 800d3f2:	d94e      	bls.n	800d492 <_svfiprintf_r+0x17e>
 800d3f4:	b1b0      	cbz	r0, 800d424 <_svfiprintf_r+0x110>
 800d3f6:	9207      	str	r2, [sp, #28]
 800d3f8:	e014      	b.n	800d424 <_svfiprintf_r+0x110>
 800d3fa:	eba0 0308 	sub.w	r3, r0, r8
 800d3fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	46a2      	mov	sl, r4
 800d408:	e7d2      	b.n	800d3b0 <_svfiprintf_r+0x9c>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	1d19      	adds	r1, r3, #4
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	9103      	str	r1, [sp, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	bfbb      	ittet	lt
 800d416:	425b      	neglt	r3, r3
 800d418:	f042 0202 	orrlt.w	r2, r2, #2
 800d41c:	9307      	strge	r3, [sp, #28]
 800d41e:	9307      	strlt	r3, [sp, #28]
 800d420:	bfb8      	it	lt
 800d422:	9204      	strlt	r2, [sp, #16]
 800d424:	7823      	ldrb	r3, [r4, #0]
 800d426:	2b2e      	cmp	r3, #46	; 0x2e
 800d428:	d10c      	bne.n	800d444 <_svfiprintf_r+0x130>
 800d42a:	7863      	ldrb	r3, [r4, #1]
 800d42c:	2b2a      	cmp	r3, #42	; 0x2a
 800d42e:	d135      	bne.n	800d49c <_svfiprintf_r+0x188>
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	1d1a      	adds	r2, r3, #4
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	9203      	str	r2, [sp, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	bfb8      	it	lt
 800d43c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d440:	3402      	adds	r4, #2
 800d442:	9305      	str	r3, [sp, #20]
 800d444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d510 <_svfiprintf_r+0x1fc>
 800d448:	7821      	ldrb	r1, [r4, #0]
 800d44a:	2203      	movs	r2, #3
 800d44c:	4650      	mov	r0, sl
 800d44e:	f7f2 ff4f 	bl	80002f0 <memchr>
 800d452:	b140      	cbz	r0, 800d466 <_svfiprintf_r+0x152>
 800d454:	2340      	movs	r3, #64	; 0x40
 800d456:	eba0 000a 	sub.w	r0, r0, sl
 800d45a:	fa03 f000 	lsl.w	r0, r3, r0
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	4303      	orrs	r3, r0
 800d462:	3401      	adds	r4, #1
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46a:	4826      	ldr	r0, [pc, #152]	; (800d504 <_svfiprintf_r+0x1f0>)
 800d46c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d470:	2206      	movs	r2, #6
 800d472:	f7f2 ff3d 	bl	80002f0 <memchr>
 800d476:	2800      	cmp	r0, #0
 800d478:	d038      	beq.n	800d4ec <_svfiprintf_r+0x1d8>
 800d47a:	4b23      	ldr	r3, [pc, #140]	; (800d508 <_svfiprintf_r+0x1f4>)
 800d47c:	bb1b      	cbnz	r3, 800d4c6 <_svfiprintf_r+0x1b2>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	3308      	adds	r3, #8
 800d488:	9303      	str	r3, [sp, #12]
 800d48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48c:	4433      	add	r3, r6
 800d48e:	9309      	str	r3, [sp, #36]	; 0x24
 800d490:	e767      	b.n	800d362 <_svfiprintf_r+0x4e>
 800d492:	fb0c 3202 	mla	r2, ip, r2, r3
 800d496:	460c      	mov	r4, r1
 800d498:	2001      	movs	r0, #1
 800d49a:	e7a5      	b.n	800d3e8 <_svfiprintf_r+0xd4>
 800d49c:	2300      	movs	r3, #0
 800d49e:	3401      	adds	r4, #1
 800d4a0:	9305      	str	r3, [sp, #20]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	f04f 0c0a 	mov.w	ip, #10
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ae:	3a30      	subs	r2, #48	; 0x30
 800d4b0:	2a09      	cmp	r2, #9
 800d4b2:	d903      	bls.n	800d4bc <_svfiprintf_r+0x1a8>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0c5      	beq.n	800d444 <_svfiprintf_r+0x130>
 800d4b8:	9105      	str	r1, [sp, #20]
 800d4ba:	e7c3      	b.n	800d444 <_svfiprintf_r+0x130>
 800d4bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e7f0      	b.n	800d4a8 <_svfiprintf_r+0x194>
 800d4c6:	ab03      	add	r3, sp, #12
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	4b0f      	ldr	r3, [pc, #60]	; (800d50c <_svfiprintf_r+0x1f8>)
 800d4ce:	a904      	add	r1, sp, #16
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f3af 8000 	nop.w
 800d4d6:	1c42      	adds	r2, r0, #1
 800d4d8:	4606      	mov	r6, r0
 800d4da:	d1d6      	bne.n	800d48a <_svfiprintf_r+0x176>
 800d4dc:	89ab      	ldrh	r3, [r5, #12]
 800d4de:	065b      	lsls	r3, r3, #25
 800d4e0:	f53f af2c 	bmi.w	800d33c <_svfiprintf_r+0x28>
 800d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4e6:	b01d      	add	sp, #116	; 0x74
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	ab03      	add	r3, sp, #12
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	462a      	mov	r2, r5
 800d4f2:	4b06      	ldr	r3, [pc, #24]	; (800d50c <_svfiprintf_r+0x1f8>)
 800d4f4:	a904      	add	r1, sp, #16
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	f000 f87a 	bl	800d5f0 <_printf_i>
 800d4fc:	e7eb      	b.n	800d4d6 <_svfiprintf_r+0x1c2>
 800d4fe:	bf00      	nop
 800d500:	0800f390 	.word	0x0800f390
 800d504:	0800f39a 	.word	0x0800f39a
 800d508:	00000000 	.word	0x00000000
 800d50c:	0800d25d 	.word	0x0800d25d
 800d510:	0800f396 	.word	0x0800f396

0800d514 <_printf_common>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	4616      	mov	r6, r2
 800d51a:	4699      	mov	r9, r3
 800d51c:	688a      	ldr	r2, [r1, #8]
 800d51e:	690b      	ldr	r3, [r1, #16]
 800d520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d524:	4293      	cmp	r3, r2
 800d526:	bfb8      	it	lt
 800d528:	4613      	movlt	r3, r2
 800d52a:	6033      	str	r3, [r6, #0]
 800d52c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d530:	4607      	mov	r7, r0
 800d532:	460c      	mov	r4, r1
 800d534:	b10a      	cbz	r2, 800d53a <_printf_common+0x26>
 800d536:	3301      	adds	r3, #1
 800d538:	6033      	str	r3, [r6, #0]
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	0699      	lsls	r1, r3, #26
 800d53e:	bf42      	ittt	mi
 800d540:	6833      	ldrmi	r3, [r6, #0]
 800d542:	3302      	addmi	r3, #2
 800d544:	6033      	strmi	r3, [r6, #0]
 800d546:	6825      	ldr	r5, [r4, #0]
 800d548:	f015 0506 	ands.w	r5, r5, #6
 800d54c:	d106      	bne.n	800d55c <_printf_common+0x48>
 800d54e:	f104 0a19 	add.w	sl, r4, #25
 800d552:	68e3      	ldr	r3, [r4, #12]
 800d554:	6832      	ldr	r2, [r6, #0]
 800d556:	1a9b      	subs	r3, r3, r2
 800d558:	42ab      	cmp	r3, r5
 800d55a:	dc26      	bgt.n	800d5aa <_printf_common+0x96>
 800d55c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d560:	1e13      	subs	r3, r2, #0
 800d562:	6822      	ldr	r2, [r4, #0]
 800d564:	bf18      	it	ne
 800d566:	2301      	movne	r3, #1
 800d568:	0692      	lsls	r2, r2, #26
 800d56a:	d42b      	bmi.n	800d5c4 <_printf_common+0xb0>
 800d56c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d570:	4649      	mov	r1, r9
 800d572:	4638      	mov	r0, r7
 800d574:	47c0      	blx	r8
 800d576:	3001      	adds	r0, #1
 800d578:	d01e      	beq.n	800d5b8 <_printf_common+0xa4>
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	68e5      	ldr	r5, [r4, #12]
 800d57e:	6832      	ldr	r2, [r6, #0]
 800d580:	f003 0306 	and.w	r3, r3, #6
 800d584:	2b04      	cmp	r3, #4
 800d586:	bf08      	it	eq
 800d588:	1aad      	subeq	r5, r5, r2
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	6922      	ldr	r2, [r4, #16]
 800d58e:	bf0c      	ite	eq
 800d590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d594:	2500      	movne	r5, #0
 800d596:	4293      	cmp	r3, r2
 800d598:	bfc4      	itt	gt
 800d59a:	1a9b      	subgt	r3, r3, r2
 800d59c:	18ed      	addgt	r5, r5, r3
 800d59e:	2600      	movs	r6, #0
 800d5a0:	341a      	adds	r4, #26
 800d5a2:	42b5      	cmp	r5, r6
 800d5a4:	d11a      	bne.n	800d5dc <_printf_common+0xc8>
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	e008      	b.n	800d5bc <_printf_common+0xa8>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	4652      	mov	r2, sl
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	4638      	mov	r0, r7
 800d5b2:	47c0      	blx	r8
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d103      	bne.n	800d5c0 <_printf_common+0xac>
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	e7c6      	b.n	800d552 <_printf_common+0x3e>
 800d5c4:	18e1      	adds	r1, r4, r3
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	2030      	movs	r0, #48	; 0x30
 800d5ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ce:	4422      	add	r2, r4
 800d5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5d8:	3302      	adds	r3, #2
 800d5da:	e7c7      	b.n	800d56c <_printf_common+0x58>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4649      	mov	r1, r9
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	47c0      	blx	r8
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d0e6      	beq.n	800d5b8 <_printf_common+0xa4>
 800d5ea:	3601      	adds	r6, #1
 800d5ec:	e7d9      	b.n	800d5a2 <_printf_common+0x8e>
	...

0800d5f0 <_printf_i>:
 800d5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f4:	7e0f      	ldrb	r7, [r1, #24]
 800d5f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5f8:	2f78      	cmp	r7, #120	; 0x78
 800d5fa:	4691      	mov	r9, r2
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	460c      	mov	r4, r1
 800d600:	469a      	mov	sl, r3
 800d602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d606:	d807      	bhi.n	800d618 <_printf_i+0x28>
 800d608:	2f62      	cmp	r7, #98	; 0x62
 800d60a:	d80a      	bhi.n	800d622 <_printf_i+0x32>
 800d60c:	2f00      	cmp	r7, #0
 800d60e:	f000 80d8 	beq.w	800d7c2 <_printf_i+0x1d2>
 800d612:	2f58      	cmp	r7, #88	; 0x58
 800d614:	f000 80a3 	beq.w	800d75e <_printf_i+0x16e>
 800d618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d61c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d620:	e03a      	b.n	800d698 <_printf_i+0xa8>
 800d622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d626:	2b15      	cmp	r3, #21
 800d628:	d8f6      	bhi.n	800d618 <_printf_i+0x28>
 800d62a:	a101      	add	r1, pc, #4	; (adr r1, 800d630 <_printf_i+0x40>)
 800d62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d630:	0800d689 	.word	0x0800d689
 800d634:	0800d69d 	.word	0x0800d69d
 800d638:	0800d619 	.word	0x0800d619
 800d63c:	0800d619 	.word	0x0800d619
 800d640:	0800d619 	.word	0x0800d619
 800d644:	0800d619 	.word	0x0800d619
 800d648:	0800d69d 	.word	0x0800d69d
 800d64c:	0800d619 	.word	0x0800d619
 800d650:	0800d619 	.word	0x0800d619
 800d654:	0800d619 	.word	0x0800d619
 800d658:	0800d619 	.word	0x0800d619
 800d65c:	0800d7a9 	.word	0x0800d7a9
 800d660:	0800d6cd 	.word	0x0800d6cd
 800d664:	0800d78b 	.word	0x0800d78b
 800d668:	0800d619 	.word	0x0800d619
 800d66c:	0800d619 	.word	0x0800d619
 800d670:	0800d7cb 	.word	0x0800d7cb
 800d674:	0800d619 	.word	0x0800d619
 800d678:	0800d6cd 	.word	0x0800d6cd
 800d67c:	0800d619 	.word	0x0800d619
 800d680:	0800d619 	.word	0x0800d619
 800d684:	0800d793 	.word	0x0800d793
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	1d1a      	adds	r2, r3, #4
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	602a      	str	r2, [r5, #0]
 800d690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d698:	2301      	movs	r3, #1
 800d69a:	e0a3      	b.n	800d7e4 <_printf_i+0x1f4>
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	6829      	ldr	r1, [r5, #0]
 800d6a0:	0606      	lsls	r6, r0, #24
 800d6a2:	f101 0304 	add.w	r3, r1, #4
 800d6a6:	d50a      	bpl.n	800d6be <_printf_i+0xce>
 800d6a8:	680e      	ldr	r6, [r1, #0]
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	2e00      	cmp	r6, #0
 800d6ae:	da03      	bge.n	800d6b8 <_printf_i+0xc8>
 800d6b0:	232d      	movs	r3, #45	; 0x2d
 800d6b2:	4276      	negs	r6, r6
 800d6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6b8:	485e      	ldr	r0, [pc, #376]	; (800d834 <_printf_i+0x244>)
 800d6ba:	230a      	movs	r3, #10
 800d6bc:	e019      	b.n	800d6f2 <_printf_i+0x102>
 800d6be:	680e      	ldr	r6, [r1, #0]
 800d6c0:	602b      	str	r3, [r5, #0]
 800d6c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6c6:	bf18      	it	ne
 800d6c8:	b236      	sxthne	r6, r6
 800d6ca:	e7ef      	b.n	800d6ac <_printf_i+0xbc>
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	6820      	ldr	r0, [r4, #0]
 800d6d0:	1d19      	adds	r1, r3, #4
 800d6d2:	6029      	str	r1, [r5, #0]
 800d6d4:	0601      	lsls	r1, r0, #24
 800d6d6:	d501      	bpl.n	800d6dc <_printf_i+0xec>
 800d6d8:	681e      	ldr	r6, [r3, #0]
 800d6da:	e002      	b.n	800d6e2 <_printf_i+0xf2>
 800d6dc:	0646      	lsls	r6, r0, #25
 800d6de:	d5fb      	bpl.n	800d6d8 <_printf_i+0xe8>
 800d6e0:	881e      	ldrh	r6, [r3, #0]
 800d6e2:	4854      	ldr	r0, [pc, #336]	; (800d834 <_printf_i+0x244>)
 800d6e4:	2f6f      	cmp	r7, #111	; 0x6f
 800d6e6:	bf0c      	ite	eq
 800d6e8:	2308      	moveq	r3, #8
 800d6ea:	230a      	movne	r3, #10
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6f2:	6865      	ldr	r5, [r4, #4]
 800d6f4:	60a5      	str	r5, [r4, #8]
 800d6f6:	2d00      	cmp	r5, #0
 800d6f8:	bfa2      	ittt	ge
 800d6fa:	6821      	ldrge	r1, [r4, #0]
 800d6fc:	f021 0104 	bicge.w	r1, r1, #4
 800d700:	6021      	strge	r1, [r4, #0]
 800d702:	b90e      	cbnz	r6, 800d708 <_printf_i+0x118>
 800d704:	2d00      	cmp	r5, #0
 800d706:	d04d      	beq.n	800d7a4 <_printf_i+0x1b4>
 800d708:	4615      	mov	r5, r2
 800d70a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d70e:	fb03 6711 	mls	r7, r3, r1, r6
 800d712:	5dc7      	ldrb	r7, [r0, r7]
 800d714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d718:	4637      	mov	r7, r6
 800d71a:	42bb      	cmp	r3, r7
 800d71c:	460e      	mov	r6, r1
 800d71e:	d9f4      	bls.n	800d70a <_printf_i+0x11a>
 800d720:	2b08      	cmp	r3, #8
 800d722:	d10b      	bne.n	800d73c <_printf_i+0x14c>
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	07de      	lsls	r6, r3, #31
 800d728:	d508      	bpl.n	800d73c <_printf_i+0x14c>
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	6861      	ldr	r1, [r4, #4]
 800d72e:	4299      	cmp	r1, r3
 800d730:	bfde      	ittt	le
 800d732:	2330      	movle	r3, #48	; 0x30
 800d734:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d738:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d73c:	1b52      	subs	r2, r2, r5
 800d73e:	6122      	str	r2, [r4, #16]
 800d740:	f8cd a000 	str.w	sl, [sp]
 800d744:	464b      	mov	r3, r9
 800d746:	aa03      	add	r2, sp, #12
 800d748:	4621      	mov	r1, r4
 800d74a:	4640      	mov	r0, r8
 800d74c:	f7ff fee2 	bl	800d514 <_printf_common>
 800d750:	3001      	adds	r0, #1
 800d752:	d14c      	bne.n	800d7ee <_printf_i+0x1fe>
 800d754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d758:	b004      	add	sp, #16
 800d75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d75e:	4835      	ldr	r0, [pc, #212]	; (800d834 <_printf_i+0x244>)
 800d760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d764:	6829      	ldr	r1, [r5, #0]
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	f851 6b04 	ldr.w	r6, [r1], #4
 800d76c:	6029      	str	r1, [r5, #0]
 800d76e:	061d      	lsls	r5, r3, #24
 800d770:	d514      	bpl.n	800d79c <_printf_i+0x1ac>
 800d772:	07df      	lsls	r7, r3, #31
 800d774:	bf44      	itt	mi
 800d776:	f043 0320 	orrmi.w	r3, r3, #32
 800d77a:	6023      	strmi	r3, [r4, #0]
 800d77c:	b91e      	cbnz	r6, 800d786 <_printf_i+0x196>
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	f023 0320 	bic.w	r3, r3, #32
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	2310      	movs	r3, #16
 800d788:	e7b0      	b.n	800d6ec <_printf_i+0xfc>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	f043 0320 	orr.w	r3, r3, #32
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	2378      	movs	r3, #120	; 0x78
 800d794:	4828      	ldr	r0, [pc, #160]	; (800d838 <_printf_i+0x248>)
 800d796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d79a:	e7e3      	b.n	800d764 <_printf_i+0x174>
 800d79c:	0659      	lsls	r1, r3, #25
 800d79e:	bf48      	it	mi
 800d7a0:	b2b6      	uxthmi	r6, r6
 800d7a2:	e7e6      	b.n	800d772 <_printf_i+0x182>
 800d7a4:	4615      	mov	r5, r2
 800d7a6:	e7bb      	b.n	800d720 <_printf_i+0x130>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	6826      	ldr	r6, [r4, #0]
 800d7ac:	6961      	ldr	r1, [r4, #20]
 800d7ae:	1d18      	adds	r0, r3, #4
 800d7b0:	6028      	str	r0, [r5, #0]
 800d7b2:	0635      	lsls	r5, r6, #24
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	d501      	bpl.n	800d7bc <_printf_i+0x1cc>
 800d7b8:	6019      	str	r1, [r3, #0]
 800d7ba:	e002      	b.n	800d7c2 <_printf_i+0x1d2>
 800d7bc:	0670      	lsls	r0, r6, #25
 800d7be:	d5fb      	bpl.n	800d7b8 <_printf_i+0x1c8>
 800d7c0:	8019      	strh	r1, [r3, #0]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	4615      	mov	r5, r2
 800d7c8:	e7ba      	b.n	800d740 <_printf_i+0x150>
 800d7ca:	682b      	ldr	r3, [r5, #0]
 800d7cc:	1d1a      	adds	r2, r3, #4
 800d7ce:	602a      	str	r2, [r5, #0]
 800d7d0:	681d      	ldr	r5, [r3, #0]
 800d7d2:	6862      	ldr	r2, [r4, #4]
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f7f2 fd8a 	bl	80002f0 <memchr>
 800d7dc:	b108      	cbz	r0, 800d7e2 <_printf_i+0x1f2>
 800d7de:	1b40      	subs	r0, r0, r5
 800d7e0:	6060      	str	r0, [r4, #4]
 800d7e2:	6863      	ldr	r3, [r4, #4]
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ec:	e7a8      	b.n	800d740 <_printf_i+0x150>
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	462a      	mov	r2, r5
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	47d0      	blx	sl
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d0ab      	beq.n	800d754 <_printf_i+0x164>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	079b      	lsls	r3, r3, #30
 800d800:	d413      	bmi.n	800d82a <_printf_i+0x23a>
 800d802:	68e0      	ldr	r0, [r4, #12]
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	4298      	cmp	r0, r3
 800d808:	bfb8      	it	lt
 800d80a:	4618      	movlt	r0, r3
 800d80c:	e7a4      	b.n	800d758 <_printf_i+0x168>
 800d80e:	2301      	movs	r3, #1
 800d810:	4632      	mov	r2, r6
 800d812:	4649      	mov	r1, r9
 800d814:	4640      	mov	r0, r8
 800d816:	47d0      	blx	sl
 800d818:	3001      	adds	r0, #1
 800d81a:	d09b      	beq.n	800d754 <_printf_i+0x164>
 800d81c:	3501      	adds	r5, #1
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	9903      	ldr	r1, [sp, #12]
 800d822:	1a5b      	subs	r3, r3, r1
 800d824:	42ab      	cmp	r3, r5
 800d826:	dcf2      	bgt.n	800d80e <_printf_i+0x21e>
 800d828:	e7eb      	b.n	800d802 <_printf_i+0x212>
 800d82a:	2500      	movs	r5, #0
 800d82c:	f104 0619 	add.w	r6, r4, #25
 800d830:	e7f5      	b.n	800d81e <_printf_i+0x22e>
 800d832:	bf00      	nop
 800d834:	0800f3a1 	.word	0x0800f3a1
 800d838:	0800f3b2 	.word	0x0800f3b2

0800d83c <memcpy>:
 800d83c:	440a      	add	r2, r1
 800d83e:	4291      	cmp	r1, r2
 800d840:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d844:	d100      	bne.n	800d848 <memcpy+0xc>
 800d846:	4770      	bx	lr
 800d848:	b510      	push	{r4, lr}
 800d84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d84e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d852:	4291      	cmp	r1, r2
 800d854:	d1f9      	bne.n	800d84a <memcpy+0xe>
 800d856:	bd10      	pop	{r4, pc}

0800d858 <memmove>:
 800d858:	4288      	cmp	r0, r1
 800d85a:	b510      	push	{r4, lr}
 800d85c:	eb01 0402 	add.w	r4, r1, r2
 800d860:	d902      	bls.n	800d868 <memmove+0x10>
 800d862:	4284      	cmp	r4, r0
 800d864:	4623      	mov	r3, r4
 800d866:	d807      	bhi.n	800d878 <memmove+0x20>
 800d868:	1e43      	subs	r3, r0, #1
 800d86a:	42a1      	cmp	r1, r4
 800d86c:	d008      	beq.n	800d880 <memmove+0x28>
 800d86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d876:	e7f8      	b.n	800d86a <memmove+0x12>
 800d878:	4402      	add	r2, r0
 800d87a:	4601      	mov	r1, r0
 800d87c:	428a      	cmp	r2, r1
 800d87e:	d100      	bne.n	800d882 <memmove+0x2a>
 800d880:	bd10      	pop	{r4, pc}
 800d882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d88a:	e7f7      	b.n	800d87c <memmove+0x24>

0800d88c <_free_r>:
 800d88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d88e:	2900      	cmp	r1, #0
 800d890:	d044      	beq.n	800d91c <_free_r+0x90>
 800d892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d896:	9001      	str	r0, [sp, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f1a1 0404 	sub.w	r4, r1, #4
 800d89e:	bfb8      	it	lt
 800d8a0:	18e4      	addlt	r4, r4, r3
 800d8a2:	f000 f913 	bl	800dacc <__malloc_lock>
 800d8a6:	4a1e      	ldr	r2, [pc, #120]	; (800d920 <_free_r+0x94>)
 800d8a8:	9801      	ldr	r0, [sp, #4]
 800d8aa:	6813      	ldr	r3, [r2, #0]
 800d8ac:	b933      	cbnz	r3, 800d8bc <_free_r+0x30>
 800d8ae:	6063      	str	r3, [r4, #4]
 800d8b0:	6014      	str	r4, [r2, #0]
 800d8b2:	b003      	add	sp, #12
 800d8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8b8:	f000 b90e 	b.w	800dad8 <__malloc_unlock>
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	d908      	bls.n	800d8d2 <_free_r+0x46>
 800d8c0:	6825      	ldr	r5, [r4, #0]
 800d8c2:	1961      	adds	r1, r4, r5
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	bf01      	itttt	eq
 800d8c8:	6819      	ldreq	r1, [r3, #0]
 800d8ca:	685b      	ldreq	r3, [r3, #4]
 800d8cc:	1949      	addeq	r1, r1, r5
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	e7ed      	b.n	800d8ae <_free_r+0x22>
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	b10b      	cbz	r3, 800d8dc <_free_r+0x50>
 800d8d8:	42a3      	cmp	r3, r4
 800d8da:	d9fa      	bls.n	800d8d2 <_free_r+0x46>
 800d8dc:	6811      	ldr	r1, [r2, #0]
 800d8de:	1855      	adds	r5, r2, r1
 800d8e0:	42a5      	cmp	r5, r4
 800d8e2:	d10b      	bne.n	800d8fc <_free_r+0x70>
 800d8e4:	6824      	ldr	r4, [r4, #0]
 800d8e6:	4421      	add	r1, r4
 800d8e8:	1854      	adds	r4, r2, r1
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	6011      	str	r1, [r2, #0]
 800d8ee:	d1e0      	bne.n	800d8b2 <_free_r+0x26>
 800d8f0:	681c      	ldr	r4, [r3, #0]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	6053      	str	r3, [r2, #4]
 800d8f6:	4421      	add	r1, r4
 800d8f8:	6011      	str	r1, [r2, #0]
 800d8fa:	e7da      	b.n	800d8b2 <_free_r+0x26>
 800d8fc:	d902      	bls.n	800d904 <_free_r+0x78>
 800d8fe:	230c      	movs	r3, #12
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	e7d6      	b.n	800d8b2 <_free_r+0x26>
 800d904:	6825      	ldr	r5, [r4, #0]
 800d906:	1961      	adds	r1, r4, r5
 800d908:	428b      	cmp	r3, r1
 800d90a:	bf04      	itt	eq
 800d90c:	6819      	ldreq	r1, [r3, #0]
 800d90e:	685b      	ldreq	r3, [r3, #4]
 800d910:	6063      	str	r3, [r4, #4]
 800d912:	bf04      	itt	eq
 800d914:	1949      	addeq	r1, r1, r5
 800d916:	6021      	streq	r1, [r4, #0]
 800d918:	6054      	str	r4, [r2, #4]
 800d91a:	e7ca      	b.n	800d8b2 <_free_r+0x26>
 800d91c:	b003      	add	sp, #12
 800d91e:	bd30      	pop	{r4, r5, pc}
 800d920:	240018c8 	.word	0x240018c8

0800d924 <sbrk_aligned>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	4e0e      	ldr	r6, [pc, #56]	; (800d960 <sbrk_aligned+0x3c>)
 800d928:	460c      	mov	r4, r1
 800d92a:	6831      	ldr	r1, [r6, #0]
 800d92c:	4605      	mov	r5, r0
 800d92e:	b911      	cbnz	r1, 800d936 <sbrk_aligned+0x12>
 800d930:	f000 f8bc 	bl	800daac <_sbrk_r>
 800d934:	6030      	str	r0, [r6, #0]
 800d936:	4621      	mov	r1, r4
 800d938:	4628      	mov	r0, r5
 800d93a:	f000 f8b7 	bl	800daac <_sbrk_r>
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	d00a      	beq.n	800d958 <sbrk_aligned+0x34>
 800d942:	1cc4      	adds	r4, r0, #3
 800d944:	f024 0403 	bic.w	r4, r4, #3
 800d948:	42a0      	cmp	r0, r4
 800d94a:	d007      	beq.n	800d95c <sbrk_aligned+0x38>
 800d94c:	1a21      	subs	r1, r4, r0
 800d94e:	4628      	mov	r0, r5
 800d950:	f000 f8ac 	bl	800daac <_sbrk_r>
 800d954:	3001      	adds	r0, #1
 800d956:	d101      	bne.n	800d95c <sbrk_aligned+0x38>
 800d958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d95c:	4620      	mov	r0, r4
 800d95e:	bd70      	pop	{r4, r5, r6, pc}
 800d960:	240018cc 	.word	0x240018cc

0800d964 <_malloc_r>:
 800d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	1ccd      	adds	r5, r1, #3
 800d96a:	f025 0503 	bic.w	r5, r5, #3
 800d96e:	3508      	adds	r5, #8
 800d970:	2d0c      	cmp	r5, #12
 800d972:	bf38      	it	cc
 800d974:	250c      	movcc	r5, #12
 800d976:	2d00      	cmp	r5, #0
 800d978:	4607      	mov	r7, r0
 800d97a:	db01      	blt.n	800d980 <_malloc_r+0x1c>
 800d97c:	42a9      	cmp	r1, r5
 800d97e:	d905      	bls.n	800d98c <_malloc_r+0x28>
 800d980:	230c      	movs	r3, #12
 800d982:	603b      	str	r3, [r7, #0]
 800d984:	2600      	movs	r6, #0
 800d986:	4630      	mov	r0, r6
 800d988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d98c:	4e2e      	ldr	r6, [pc, #184]	; (800da48 <_malloc_r+0xe4>)
 800d98e:	f000 f89d 	bl	800dacc <__malloc_lock>
 800d992:	6833      	ldr	r3, [r6, #0]
 800d994:	461c      	mov	r4, r3
 800d996:	bb34      	cbnz	r4, 800d9e6 <_malloc_r+0x82>
 800d998:	4629      	mov	r1, r5
 800d99a:	4638      	mov	r0, r7
 800d99c:	f7ff ffc2 	bl	800d924 <sbrk_aligned>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	d14d      	bne.n	800da42 <_malloc_r+0xde>
 800d9a6:	6834      	ldr	r4, [r6, #0]
 800d9a8:	4626      	mov	r6, r4
 800d9aa:	2e00      	cmp	r6, #0
 800d9ac:	d140      	bne.n	800da30 <_malloc_r+0xcc>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	eb04 0803 	add.w	r8, r4, r3
 800d9b8:	f000 f878 	bl	800daac <_sbrk_r>
 800d9bc:	4580      	cmp	r8, r0
 800d9be:	d13a      	bne.n	800da36 <_malloc_r+0xd2>
 800d9c0:	6821      	ldr	r1, [r4, #0]
 800d9c2:	3503      	adds	r5, #3
 800d9c4:	1a6d      	subs	r5, r5, r1
 800d9c6:	f025 0503 	bic.w	r5, r5, #3
 800d9ca:	3508      	adds	r5, #8
 800d9cc:	2d0c      	cmp	r5, #12
 800d9ce:	bf38      	it	cc
 800d9d0:	250c      	movcc	r5, #12
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7ff ffa5 	bl	800d924 <sbrk_aligned>
 800d9da:	3001      	adds	r0, #1
 800d9dc:	d02b      	beq.n	800da36 <_malloc_r+0xd2>
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	442b      	add	r3, r5
 800d9e2:	6023      	str	r3, [r4, #0]
 800d9e4:	e00e      	b.n	800da04 <_malloc_r+0xa0>
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	1b52      	subs	r2, r2, r5
 800d9ea:	d41e      	bmi.n	800da2a <_malloc_r+0xc6>
 800d9ec:	2a0b      	cmp	r2, #11
 800d9ee:	d916      	bls.n	800da1e <_malloc_r+0xba>
 800d9f0:	1961      	adds	r1, r4, r5
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	6025      	str	r5, [r4, #0]
 800d9f6:	bf18      	it	ne
 800d9f8:	6059      	strne	r1, [r3, #4]
 800d9fa:	6863      	ldr	r3, [r4, #4]
 800d9fc:	bf08      	it	eq
 800d9fe:	6031      	streq	r1, [r6, #0]
 800da00:	5162      	str	r2, [r4, r5]
 800da02:	604b      	str	r3, [r1, #4]
 800da04:	4638      	mov	r0, r7
 800da06:	f104 060b 	add.w	r6, r4, #11
 800da0a:	f000 f865 	bl	800dad8 <__malloc_unlock>
 800da0e:	f026 0607 	bic.w	r6, r6, #7
 800da12:	1d23      	adds	r3, r4, #4
 800da14:	1af2      	subs	r2, r6, r3
 800da16:	d0b6      	beq.n	800d986 <_malloc_r+0x22>
 800da18:	1b9b      	subs	r3, r3, r6
 800da1a:	50a3      	str	r3, [r4, r2]
 800da1c:	e7b3      	b.n	800d986 <_malloc_r+0x22>
 800da1e:	6862      	ldr	r2, [r4, #4]
 800da20:	42a3      	cmp	r3, r4
 800da22:	bf0c      	ite	eq
 800da24:	6032      	streq	r2, [r6, #0]
 800da26:	605a      	strne	r2, [r3, #4]
 800da28:	e7ec      	b.n	800da04 <_malloc_r+0xa0>
 800da2a:	4623      	mov	r3, r4
 800da2c:	6864      	ldr	r4, [r4, #4]
 800da2e:	e7b2      	b.n	800d996 <_malloc_r+0x32>
 800da30:	4634      	mov	r4, r6
 800da32:	6876      	ldr	r6, [r6, #4]
 800da34:	e7b9      	b.n	800d9aa <_malloc_r+0x46>
 800da36:	230c      	movs	r3, #12
 800da38:	603b      	str	r3, [r7, #0]
 800da3a:	4638      	mov	r0, r7
 800da3c:	f000 f84c 	bl	800dad8 <__malloc_unlock>
 800da40:	e7a1      	b.n	800d986 <_malloc_r+0x22>
 800da42:	6025      	str	r5, [r4, #0]
 800da44:	e7de      	b.n	800da04 <_malloc_r+0xa0>
 800da46:	bf00      	nop
 800da48:	240018c8 	.word	0x240018c8

0800da4c <_realloc_r>:
 800da4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	4680      	mov	r8, r0
 800da52:	4614      	mov	r4, r2
 800da54:	460e      	mov	r6, r1
 800da56:	b921      	cbnz	r1, 800da62 <_realloc_r+0x16>
 800da58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	4611      	mov	r1, r2
 800da5e:	f7ff bf81 	b.w	800d964 <_malloc_r>
 800da62:	b92a      	cbnz	r2, 800da70 <_realloc_r+0x24>
 800da64:	f7ff ff12 	bl	800d88c <_free_r>
 800da68:	4625      	mov	r5, r4
 800da6a:	4628      	mov	r0, r5
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	f000 f838 	bl	800dae4 <_malloc_usable_size_r>
 800da74:	4284      	cmp	r4, r0
 800da76:	4607      	mov	r7, r0
 800da78:	d802      	bhi.n	800da80 <_realloc_r+0x34>
 800da7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da7e:	d812      	bhi.n	800daa6 <_realloc_r+0x5a>
 800da80:	4621      	mov	r1, r4
 800da82:	4640      	mov	r0, r8
 800da84:	f7ff ff6e 	bl	800d964 <_malloc_r>
 800da88:	4605      	mov	r5, r0
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d0ed      	beq.n	800da6a <_realloc_r+0x1e>
 800da8e:	42bc      	cmp	r4, r7
 800da90:	4622      	mov	r2, r4
 800da92:	4631      	mov	r1, r6
 800da94:	bf28      	it	cs
 800da96:	463a      	movcs	r2, r7
 800da98:	f7ff fed0 	bl	800d83c <memcpy>
 800da9c:	4631      	mov	r1, r6
 800da9e:	4640      	mov	r0, r8
 800daa0:	f7ff fef4 	bl	800d88c <_free_r>
 800daa4:	e7e1      	b.n	800da6a <_realloc_r+0x1e>
 800daa6:	4635      	mov	r5, r6
 800daa8:	e7df      	b.n	800da6a <_realloc_r+0x1e>
	...

0800daac <_sbrk_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4d06      	ldr	r5, [pc, #24]	; (800dac8 <_sbrk_r+0x1c>)
 800dab0:	2300      	movs	r3, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4608      	mov	r0, r1
 800dab6:	602b      	str	r3, [r5, #0]
 800dab8:	f7f6 fbbc 	bl	8004234 <_sbrk>
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d102      	bne.n	800dac6 <_sbrk_r+0x1a>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	b103      	cbz	r3, 800dac6 <_sbrk_r+0x1a>
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	240018d0 	.word	0x240018d0

0800dacc <__malloc_lock>:
 800dacc:	4801      	ldr	r0, [pc, #4]	; (800dad4 <__malloc_lock+0x8>)
 800dace:	f000 b811 	b.w	800daf4 <__retarget_lock_acquire_recursive>
 800dad2:	bf00      	nop
 800dad4:	240018d4 	.word	0x240018d4

0800dad8 <__malloc_unlock>:
 800dad8:	4801      	ldr	r0, [pc, #4]	; (800dae0 <__malloc_unlock+0x8>)
 800dada:	f000 b80c 	b.w	800daf6 <__retarget_lock_release_recursive>
 800dade:	bf00      	nop
 800dae0:	240018d4 	.word	0x240018d4

0800dae4 <_malloc_usable_size_r>:
 800dae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dae8:	1f18      	subs	r0, r3, #4
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfbc      	itt	lt
 800daee:	580b      	ldrlt	r3, [r1, r0]
 800daf0:	18c0      	addlt	r0, r0, r3
 800daf2:	4770      	bx	lr

0800daf4 <__retarget_lock_acquire_recursive>:
 800daf4:	4770      	bx	lr

0800daf6 <__retarget_lock_release_recursive>:
 800daf6:	4770      	bx	lr

0800daf8 <checkint>:
 800daf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dafc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800db00:	429a      	cmp	r2, r3
 800db02:	b570      	push	{r4, r5, r6, lr}
 800db04:	dd2a      	ble.n	800db5c <checkint+0x64>
 800db06:	f240 4333 	movw	r3, #1075	; 0x433
 800db0a:	429a      	cmp	r2, r3
 800db0c:	dc24      	bgt.n	800db58 <checkint+0x60>
 800db0e:	1a9b      	subs	r3, r3, r2
 800db10:	f1a3 0620 	sub.w	r6, r3, #32
 800db14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db18:	fa02 f403 	lsl.w	r4, r2, r3
 800db1c:	fa02 f606 	lsl.w	r6, r2, r6
 800db20:	f1c3 0520 	rsb	r5, r3, #32
 800db24:	fa22 f505 	lsr.w	r5, r2, r5
 800db28:	4334      	orrs	r4, r6
 800db2a:	432c      	orrs	r4, r5
 800db2c:	409a      	lsls	r2, r3
 800db2e:	ea20 0202 	bic.w	r2, r0, r2
 800db32:	ea21 0404 	bic.w	r4, r1, r4
 800db36:	4322      	orrs	r2, r4
 800db38:	f1a3 0420 	sub.w	r4, r3, #32
 800db3c:	f1c3 0220 	rsb	r2, r3, #32
 800db40:	d10c      	bne.n	800db5c <checkint+0x64>
 800db42:	40d8      	lsrs	r0, r3
 800db44:	fa01 f302 	lsl.w	r3, r1, r2
 800db48:	4318      	orrs	r0, r3
 800db4a:	40e1      	lsrs	r1, r4
 800db4c:	4308      	orrs	r0, r1
 800db4e:	f000 0001 	and.w	r0, r0, #1
 800db52:	f1d0 0002 	rsbs	r0, r0, #2
 800db56:	bd70      	pop	{r4, r5, r6, pc}
 800db58:	2002      	movs	r0, #2
 800db5a:	e7fc      	b.n	800db56 <checkint+0x5e>
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7fa      	b.n	800db56 <checkint+0x5e>

0800db60 <pow>:
 800db60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	ee10 4a90 	vmov	r4, s1
 800db68:	ed2d 8b0a 	vpush	{d8-d12}
 800db6c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800db70:	ee11 7a90 	vmov	r7, s3
 800db74:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800db78:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800db7c:	429a      	cmp	r2, r3
 800db7e:	ee10 6a10 	vmov	r6, s0
 800db82:	ee11 0a10 	vmov	r0, s2
 800db86:	b086      	sub	sp, #24
 800db88:	46d4      	mov	ip, sl
 800db8a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800db8e:	d806      	bhi.n	800db9e <pow+0x3e>
 800db90:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800db94:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800db98:	2b7f      	cmp	r3, #127	; 0x7f
 800db9a:	f240 8156 	bls.w	800de4a <pow+0x2ea>
 800db9e:	1802      	adds	r2, r0, r0
 800dba0:	eb47 0107 	adc.w	r1, r7, r7
 800dba4:	f06f 0e01 	mvn.w	lr, #1
 800dba8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800dbac:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800dbb0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800dbb4:	45ce      	cmp	lr, r9
 800dbb6:	eb73 0808 	sbcs.w	r8, r3, r8
 800dbba:	d23f      	bcs.n	800dc3c <pow+0xdc>
 800dbbc:	ea52 0301 	orrs.w	r3, r2, r1
 800dbc0:	f04f 0300 	mov.w	r3, #0
 800dbc4:	d10c      	bne.n	800dbe0 <pow+0x80>
 800dbc6:	19b6      	adds	r6, r6, r6
 800dbc8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800dbcc:	4164      	adcs	r4, r4
 800dbce:	42b3      	cmp	r3, r6
 800dbd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dbd4:	41a3      	sbcs	r3, r4
 800dbd6:	f0c0 808c 	bcc.w	800dcf2 <pow+0x192>
 800dbda:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dbde:	e028      	b.n	800dc32 <pow+0xd2>
 800dbe0:	4da3      	ldr	r5, [pc, #652]	; (800de70 <pow+0x310>)
 800dbe2:	42ac      	cmp	r4, r5
 800dbe4:	bf08      	it	eq
 800dbe6:	429e      	cmpeq	r6, r3
 800dbe8:	d107      	bne.n	800dbfa <pow+0x9a>
 800dbea:	1800      	adds	r0, r0, r0
 800dbec:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800dbf0:	417f      	adcs	r7, r7
 800dbf2:	4283      	cmp	r3, r0
 800dbf4:	4b9f      	ldr	r3, [pc, #636]	; (800de74 <pow+0x314>)
 800dbf6:	41bb      	sbcs	r3, r7
 800dbf8:	e7ed      	b.n	800dbd6 <pow+0x76>
 800dbfa:	19b6      	adds	r6, r6, r6
 800dbfc:	489e      	ldr	r0, [pc, #632]	; (800de78 <pow+0x318>)
 800dbfe:	4164      	adcs	r4, r4
 800dc00:	42b3      	cmp	r3, r6
 800dc02:	eb70 0504 	sbcs.w	r5, r0, r4
 800dc06:	d374      	bcc.n	800dcf2 <pow+0x192>
 800dc08:	4281      	cmp	r1, r0
 800dc0a:	bf08      	it	eq
 800dc0c:	429a      	cmpeq	r2, r3
 800dc0e:	d170      	bne.n	800dcf2 <pow+0x192>
 800dc10:	4a9a      	ldr	r2, [pc, #616]	; (800de7c <pow+0x31c>)
 800dc12:	4294      	cmp	r4, r2
 800dc14:	bf08      	it	eq
 800dc16:	429e      	cmpeq	r6, r3
 800dc18:	d0df      	beq.n	800dbda <pow+0x7a>
 800dc1a:	4294      	cmp	r4, r2
 800dc1c:	ea6f 0707 	mvn.w	r7, r7
 800dc20:	bf34      	ite	cc
 800dc22:	2400      	movcc	r4, #0
 800dc24:	2401      	movcs	r4, #1
 800dc26:	0fff      	lsrs	r7, r7, #31
 800dc28:	42bc      	cmp	r4, r7
 800dc2a:	f040 81d9 	bne.w	800dfe0 <pow+0x480>
 800dc2e:	ee21 0b01 	vmul.f64	d0, d1, d1
 800dc32:	b006      	add	sp, #24
 800dc34:	ecbd 8b0a 	vpop	{d8-d12}
 800dc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3c:	eb16 0806 	adds.w	r8, r6, r6
 800dc40:	eb44 0904 	adc.w	r9, r4, r4
 800dc44:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800dc48:	f169 0200 	sbc.w	r2, r9, #0
 800dc4c:	458e      	cmp	lr, r1
 800dc4e:	4193      	sbcs	r3, r2
 800dc50:	d223      	bcs.n	800dc9a <pow+0x13a>
 800dc52:	ee20 0b00 	vmul.f64	d0, d0, d0
 800dc56:	2c00      	cmp	r4, #0
 800dc58:	da12      	bge.n	800dc80 <pow+0x120>
 800dc5a:	4639      	mov	r1, r7
 800dc5c:	f7ff ff4c 	bl	800daf8 <checkint>
 800dc60:	2801      	cmp	r0, #1
 800dc62:	d10d      	bne.n	800dc80 <pow+0x120>
 800dc64:	eeb1 0b40 	vneg.f64	d0, d0
 800dc68:	ea58 0309 	orrs.w	r3, r8, r9
 800dc6c:	d10a      	bne.n	800dc84 <pow+0x124>
 800dc6e:	2f00      	cmp	r7, #0
 800dc70:	dadf      	bge.n	800dc32 <pow+0xd2>
 800dc72:	b006      	add	sp, #24
 800dc74:	ecbd 8b0a 	vpop	{d8-d12}
 800dc78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	f001 b9b4 	b.w	800efe8 <__math_divzero>
 800dc80:	2000      	movs	r0, #0
 800dc82:	e7f1      	b.n	800dc68 <pow+0x108>
 800dc84:	2f00      	cmp	r7, #0
 800dc86:	dad4      	bge.n	800dc32 <pow+0xd2>
 800dc88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dc8c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc90:	ed8d 7b00 	vstr	d7, [sp]
 800dc94:	ed9d 0b00 	vldr	d0, [sp]
 800dc98:	e7cb      	b.n	800dc32 <pow+0xd2>
 800dc9a:	2c00      	cmp	r4, #0
 800dc9c:	da2c      	bge.n	800dcf8 <pow+0x198>
 800dc9e:	4639      	mov	r1, r7
 800dca0:	f7ff ff2a 	bl	800daf8 <checkint>
 800dca4:	b930      	cbnz	r0, 800dcb4 <pow+0x154>
 800dca6:	b006      	add	sp, #24
 800dca8:	ecbd 8b0a 	vpop	{d8-d12}
 800dcac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb0:	f001 b9b2 	b.w	800f018 <__math_invalid>
 800dcb4:	2801      	cmp	r0, #1
 800dcb6:	bf14      	ite	ne
 800dcb8:	2000      	movne	r0, #0
 800dcba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800dcbe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800dcc2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800dcc6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800dcca:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800dcce:	2b7f      	cmp	r3, #127	; 0x7f
 800dcd0:	d92d      	bls.n	800dd2e <pow+0x1ce>
 800dcd2:	4b67      	ldr	r3, [pc, #412]	; (800de70 <pow+0x310>)
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	bf08      	it	eq
 800dcda:	4286      	cmpeq	r6, r0
 800dcdc:	f43f af7d 	beq.w	800dbda <pow+0x7a>
 800dce0:	f240 31bd 	movw	r1, #957	; 0x3bd
 800dce4:	428a      	cmp	r2, r1
 800dce6:	d80c      	bhi.n	800dd02 <pow+0x1a2>
 800dce8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dcec:	42b0      	cmp	r0, r6
 800dcee:	41a3      	sbcs	r3, r4
 800dcf0:	d204      	bcs.n	800dcfc <pow+0x19c>
 800dcf2:	ee31 0b00 	vadd.f64	d0, d1, d0
 800dcf6:	e79c      	b.n	800dc32 <pow+0xd2>
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	e7e4      	b.n	800dcc6 <pow+0x166>
 800dcfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dd00:	e797      	b.n	800dc32 <pow+0xd2>
 800dd02:	2e01      	cmp	r6, #1
 800dd04:	eb74 0303 	sbcs.w	r3, r4, r3
 800dd08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dd0c:	bf34      	ite	cc
 800dd0e:	2301      	movcc	r3, #1
 800dd10:	2300      	movcs	r3, #0
 800dd12:	4295      	cmp	r5, r2
 800dd14:	bf8c      	ite	hi
 800dd16:	2500      	movhi	r5, #0
 800dd18:	2501      	movls	r5, #1
 800dd1a:	42ab      	cmp	r3, r5
 800dd1c:	f000 809d 	beq.w	800de5a <pow+0x2fa>
 800dd20:	b006      	add	sp, #24
 800dd22:	ecbd 8b0a 	vpop	{d8-d12}
 800dd26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2a:	f001 b955 	b.w	800efd8 <__math_oflow>
 800dd2e:	f1bc 0f00 	cmp.w	ip, #0
 800dd32:	d10b      	bne.n	800dd4c <pow+0x1ec>
 800dd34:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800de68 <pow+0x308>
 800dd38:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dd3c:	ec53 2b17 	vmov	r2, r3, d7
 800dd40:	ee17 6a10 	vmov	r6, s14
 800dd44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dd48:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800dd4c:	4b4c      	ldr	r3, [pc, #304]	; (800de80 <pow+0x320>)
 800dd4e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dd52:	4423      	add	r3, r4
 800dd54:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800dd58:	1519      	asrs	r1, r3, #20
 800dd5a:	0d1b      	lsrs	r3, r3, #20
 800dd5c:	051b      	lsls	r3, r3, #20
 800dd5e:	eba4 0903 	sub.w	r9, r4, r3
 800dd62:	4b48      	ldr	r3, [pc, #288]	; (800de84 <pow+0x324>)
 800dd64:	ee04 1a10 	vmov	s8, r1
 800dd68:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800dd6c:	f1b6 0800 	subs.w	r8, r6, #0
 800dd70:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800dd74:	ec49 8b15 	vmov	d5, r8, r9
 800dd78:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800dd7c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dd80:	ed93 7b00 	vldr	d7, [r3]
 800dd84:	ed93 5b02 	vldr	d5, [r3, #8]
 800dd88:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800dd8c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800dd90:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800dd94:	ee36 ab02 	vadd.f64	d10, d6, d2
 800dd98:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800dd9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dda0:	ed93 5b04 	vldr	d5, [r3, #16]
 800dda4:	ee32 2b06 	vadd.f64	d2, d2, d6
 800dda8:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ddac:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ddb0:	ed93 4b08 	vldr	d4, [r3, #32]
 800ddb4:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ddb8:	eeb0 9b40 	vmov.f64	d9, d0
 800ddbc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800ddc0:	ed93 5b06 	vldr	d5, [r3, #24]
 800ddc4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800ddc8:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ddcc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800ddd0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ddd4:	ee3a ab48 	vsub.f64	d10, d10, d8
 800ddd8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800dddc:	ee37 9b09 	vadd.f64	d9, d7, d9
 800dde0:	ee3a ab00 	vadd.f64	d10, d10, d0
 800dde4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800dde8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800ddec:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800ddf0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800ddf4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ddf8:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ddfc:	eea0 5b04 	vfma.f64	d5, d0, d4
 800de00:	eeab ab05 	vfma.f64	d10, d11, d5
 800de04:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800de08:	ee21 7b06 	vmul.f64	d7, d1, d6
 800de0c:	ee17 3a90 	vmov	r3, s15
 800de10:	eeb0 5b47 	vmov.f64	d5, d7
 800de14:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800de18:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800de1c:	18b2      	adds	r2, r6, r2
 800de1e:	2a3e      	cmp	r2, #62	; 0x3e
 800de20:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800de24:	ee38 8b46 	vsub.f64	d8, d8, d6
 800de28:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800de2c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800de30:	d92b      	bls.n	800de8a <pow+0x32a>
 800de32:	2a00      	cmp	r2, #0
 800de34:	da0b      	bge.n	800de4e <pow+0x2ee>
 800de36:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800de3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800de3e:	2800      	cmp	r0, #0
 800de40:	f43f aef7 	beq.w	800dc32 <pow+0xd2>
 800de44:	eeb1 0b40 	vneg.f64	d0, d0
 800de48:	e6f3      	b.n	800dc32 <pow+0xd2>
 800de4a:	2000      	movs	r0, #0
 800de4c:	e77e      	b.n	800dd4c <pow+0x1ec>
 800de4e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800de52:	d919      	bls.n	800de88 <pow+0x328>
 800de54:	2b00      	cmp	r3, #0
 800de56:	f6bf af63 	bge.w	800dd20 <pow+0x1c0>
 800de5a:	b006      	add	sp, #24
 800de5c:	ecbd 8b0a 	vpop	{d8-d12}
 800de60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de64:	f001 b8b0 	b.w	800efc8 <__math_uflow>
 800de68:	00000000 	.word	0x00000000
 800de6c:	43300000 	.word	0x43300000
 800de70:	3ff00000 	.word	0x3ff00000
 800de74:	fff00000 	.word	0xfff00000
 800de78:	ffe00000 	.word	0xffe00000
 800de7c:	7fe00000 	.word	0x7fe00000
 800de80:	c0196aab 	.word	0xc0196aab
 800de84:	0800f3c8 	.word	0x0800f3c8
 800de88:	2600      	movs	r6, #0
 800de8a:	495d      	ldr	r1, [pc, #372]	; (800e000 <pow+0x4a0>)
 800de8c:	ed91 4b02 	vldr	d4, [r1, #8]
 800de90:	ed91 3b00 	vldr	d3, [r1]
 800de94:	eeb0 6b44 	vmov.f64	d6, d4
 800de98:	eea7 6b03 	vfma.f64	d6, d7, d3
 800de9c:	ee16 5a10 	vmov	r5, s12
 800dea0:	ee36 6b44 	vsub.f64	d6, d6, d4
 800dea4:	ed91 4b04 	vldr	d4, [r1, #16]
 800dea8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800deac:	eea6 7b04 	vfma.f64	d7, d6, d4
 800deb0:	eeb0 0b47 	vmov.f64	d0, d7
 800deb4:	ed91 7b06 	vldr	d7, [r1, #24]
 800deb8:	18dc      	adds	r4, r3, r3
 800deba:	f104 030f 	add.w	r3, r4, #15
 800debe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800dec2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800dec6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800deca:	ee35 0b00 	vadd.f64	d0, d5, d0
 800dece:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ded2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800ded6:	ed91 5b08 	vldr	d5, [r1, #32]
 800deda:	ee30 7b07 	vadd.f64	d7, d0, d7
 800dede:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800dee2:	eea0 5b04 	vfma.f64	d5, d0, d4
 800dee6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800deea:	eea6 7b05 	vfma.f64	d7, d6, d5
 800deee:	ee26 6b06 	vmul.f64	d6, d6, d6
 800def2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800def6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800defa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800defe:	eea0 5b04 	vfma.f64	d5, d0, d4
 800df02:	1940      	adds	r0, r0, r5
 800df04:	2700      	movs	r7, #0
 800df06:	eb17 020c 	adds.w	r2, r7, ip
 800df0a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800df0e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800df12:	2e00      	cmp	r6, #0
 800df14:	d15f      	bne.n	800dfd6 <pow+0x476>
 800df16:	42bd      	cmp	r5, r7
 800df18:	db13      	blt.n	800df42 <pow+0x3e2>
 800df1a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800df1e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800df22:	4610      	mov	r0, r2
 800df24:	ec41 0b10 	vmov	d0, r0, r1
 800df28:	eea7 0b00 	vfma.f64	d0, d7, d0
 800df2c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800dfe8 <pow+0x488>
 800df30:	ee20 0b07 	vmul.f64	d0, d0, d7
 800df34:	b006      	add	sp, #24
 800df36:	ecbd 8b0a 	vpop	{d8-d12}
 800df3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3e:	f001 b883 	b.w	800f048 <__math_check_oflow>
 800df42:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800df46:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800df4a:	4610      	mov	r0, r2
 800df4c:	ec41 0b15 	vmov	d5, r0, r1
 800df50:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800df54:	ee27 6b05 	vmul.f64	d6, d7, d5
 800df58:	ee35 7b06 	vadd.f64	d7, d5, d6
 800df5c:	eeb0 3bc7 	vabs.f64	d3, d7
 800df60:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800dff0 <pow+0x490>
 800df6c:	d52a      	bpl.n	800dfc4 <pow+0x464>
 800df6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800df72:	ee35 5b47 	vsub.f64	d5, d5, d7
 800df76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800df7e:	ee35 6b06 	vadd.f64	d6, d5, d6
 800df82:	bf48      	it	mi
 800df84:	eeb0 4b43 	vmovmi.f64	d4, d3
 800df88:	ee37 3b04 	vadd.f64	d3, d7, d4
 800df8c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800df90:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df94:	ee37 7b06 	vadd.f64	d7, d7, d6
 800df98:	ee37 7b03 	vadd.f64	d7, d7, d3
 800df9c:	ee37 7b44 	vsub.f64	d7, d7, d4
 800dfa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	d104      	bne.n	800dfb4 <pow+0x454>
 800dfaa:	4632      	mov	r2, r6
 800dfac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dfb0:	ec43 2b17 	vmov	d7, r2, r3
 800dfb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfb8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dfbc:	ee26 6b00 	vmul.f64	d6, d6, d0
 800dfc0:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dfc4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800dfc8:	b006      	add	sp, #24
 800dfca:	ecbd 8b0a 	vpop	{d8-d12}
 800dfce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd2:	f001 b830 	b.w	800f036 <__math_check_uflow>
 800dfd6:	ec43 2b10 	vmov	d0, r2, r3
 800dfda:	eea7 0b00 	vfma.f64	d0, d7, d0
 800dfde:	e628      	b.n	800dc32 <pow+0xd2>
 800dfe0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800dff8 <pow+0x498>
 800dfe4:	e625      	b.n	800dc32 <pow+0xd2>
 800dfe6:	bf00      	nop
 800dfe8:	00000000 	.word	0x00000000
 800dfec:	7f000000 	.word	0x7f000000
 800dff0:	00000000 	.word	0x00000000
 800dff4:	00100000 	.word	0x00100000
	...
 800e000:	080106c0 	.word	0x080106c0
 800e004:	00000000 	.word	0x00000000

0800e008 <sin>:
 800e008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e00a:	eeb0 7b40 	vmov.f64	d7, d0
 800e00e:	ee17 3a90 	vmov	r3, s15
 800e012:	4a21      	ldr	r2, [pc, #132]	; (800e098 <sin+0x90>)
 800e014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e018:	4293      	cmp	r3, r2
 800e01a:	dc07      	bgt.n	800e02c <sin+0x24>
 800e01c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800e090 <sin+0x88>
 800e020:	2000      	movs	r0, #0
 800e022:	b005      	add	sp, #20
 800e024:	f85d eb04 	ldr.w	lr, [sp], #4
 800e028:	f000 bf5a 	b.w	800eee0 <__kernel_sin>
 800e02c:	4a1b      	ldr	r2, [pc, #108]	; (800e09c <sin+0x94>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	dd04      	ble.n	800e03c <sin+0x34>
 800e032:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e036:	b005      	add	sp, #20
 800e038:	f85d fb04 	ldr.w	pc, [sp], #4
 800e03c:	4668      	mov	r0, sp
 800e03e:	f000 fb03 	bl	800e648 <__ieee754_rem_pio2>
 800e042:	f000 0003 	and.w	r0, r0, #3
 800e046:	2801      	cmp	r0, #1
 800e048:	d00a      	beq.n	800e060 <sin+0x58>
 800e04a:	2802      	cmp	r0, #2
 800e04c:	d00f      	beq.n	800e06e <sin+0x66>
 800e04e:	b9c0      	cbnz	r0, 800e082 <sin+0x7a>
 800e050:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e054:	ed9d 0b00 	vldr	d0, [sp]
 800e058:	2001      	movs	r0, #1
 800e05a:	f000 ff41 	bl	800eee0 <__kernel_sin>
 800e05e:	e7ea      	b.n	800e036 <sin+0x2e>
 800e060:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e064:	ed9d 0b00 	vldr	d0, [sp]
 800e068:	f000 fc36 	bl	800e8d8 <__kernel_cos>
 800e06c:	e7e3      	b.n	800e036 <sin+0x2e>
 800e06e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e072:	ed9d 0b00 	vldr	d0, [sp]
 800e076:	2001      	movs	r0, #1
 800e078:	f000 ff32 	bl	800eee0 <__kernel_sin>
 800e07c:	eeb1 0b40 	vneg.f64	d0, d0
 800e080:	e7d9      	b.n	800e036 <sin+0x2e>
 800e082:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e086:	ed9d 0b00 	vldr	d0, [sp]
 800e08a:	f000 fc25 	bl	800e8d8 <__kernel_cos>
 800e08e:	e7f5      	b.n	800e07c <sin+0x74>
	...
 800e098:	3fe921fb 	.word	0x3fe921fb
 800e09c:	7fefffff 	.word	0x7fefffff

0800e0a0 <checkint>:
 800e0a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e0a4:	2b7e      	cmp	r3, #126	; 0x7e
 800e0a6:	dd10      	ble.n	800e0ca <checkint+0x2a>
 800e0a8:	2b96      	cmp	r3, #150	; 0x96
 800e0aa:	dc0c      	bgt.n	800e0c6 <checkint+0x26>
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b6:	1e5a      	subs	r2, r3, #1
 800e0b8:	4202      	tst	r2, r0
 800e0ba:	d106      	bne.n	800e0ca <checkint+0x2a>
 800e0bc:	4203      	tst	r3, r0
 800e0be:	bf0c      	ite	eq
 800e0c0:	2002      	moveq	r0, #2
 800e0c2:	2001      	movne	r0, #1
 800e0c4:	4770      	bx	lr
 800e0c6:	2002      	movs	r0, #2
 800e0c8:	4770      	bx	lr
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	4770      	bx	lr
	...

0800e0d0 <powf>:
 800e0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0d2:	ee10 1a10 	vmov	r1, s0
 800e0d6:	ee10 4a90 	vmov	r4, s1
 800e0da:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800e0de:	0062      	lsls	r2, r4, #1
 800e0e0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e0e4:	eef0 7a40 	vmov.f32	s15, s0
 800e0e8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800e0ec:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800e0f0:	d252      	bcs.n	800e198 <powf+0xc8>
 800e0f2:	4298      	cmp	r0, r3
 800e0f4:	d252      	bcs.n	800e19c <powf+0xcc>
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800e0fc:	4ca0      	ldr	r4, [pc, #640]	; (800e380 <powf+0x2b0>)
 800e0fe:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800e102:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e106:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 800e10a:	0dd2      	lsrs	r2, r2, #23
 800e10c:	05d2      	lsls	r2, r2, #23
 800e10e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800e112:	1a8b      	subs	r3, r1, r2
 800e114:	ed95 6b00 	vldr	d6, [r5]
 800e118:	ee07 3a90 	vmov	s15, r3
 800e11c:	15d2      	asrs	r2, r2, #23
 800e11e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e122:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e126:	ed95 6b02 	vldr	d6, [r5, #8]
 800e12a:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e12e:	ee22 1b02 	vmul.f64	d1, d2, d2
 800e132:	ee07 2a90 	vmov	s15, r2
 800e136:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 800e13a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e13e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e142:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 800e146:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 800e14a:	eea5 3b06 	vfma.f64	d3, d5, d6
 800e14e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 800e152:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e156:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 800e15a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800e15e:	eea5 7b04 	vfma.f64	d7, d5, d4
 800e162:	eea2 7b06 	vfma.f64	d7, d2, d6
 800e166:	eea3 7b01 	vfma.f64	d7, d3, d1
 800e16a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e16e:	ee10 3a90 	vmov	r3, s1
 800e172:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800e176:	f248 03bf 	movw	r3, #32959	; 0x80bf
 800e17a:	429a      	cmp	r2, r3
 800e17c:	f0c0 80b1 	bcc.w	800e2e2 <powf+0x212>
 800e180:	ed9f 7b77 	vldr	d7, [pc, #476]	; 800e360 <powf+0x290>
 800e184:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18c:	dd79      	ble.n	800e282 <powf+0x1b2>
 800e18e:	b003      	add	sp, #12
 800e190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e194:	f000 bf8e 	b.w	800f0b4 <__math_oflowf>
 800e198:	4298      	cmp	r0, r3
 800e19a:	d32d      	bcc.n	800e1f8 <powf+0x128>
 800e19c:	b952      	cbnz	r2, 800e1b4 <powf+0xe4>
 800e19e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800e1a8:	f240 80c9 	bls.w	800e33e <powf+0x26e>
 800e1ac:	ee37 0aa0 	vadd.f32	s0, s15, s1
 800e1b0:	b003      	add	sp, #12
 800e1b2:	bd30      	pop	{r4, r5, pc}
 800e1b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800e1b8:	d105      	bne.n	800e1c6 <powf+0xf6>
 800e1ba:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800e1be:	0064      	lsls	r4, r4, #1
 800e1c0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800e1c4:	e7f0      	b.n	800e1a8 <powf+0xd8>
 800e1c6:	004b      	lsls	r3, r1, #1
 800e1c8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e1cc:	d8ee      	bhi.n	800e1ac <powf+0xdc>
 800e1ce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e1d2:	d1eb      	bne.n	800e1ac <powf+0xdc>
 800e1d4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e1d8:	f000 80b1 	beq.w	800e33e <powf+0x26e>
 800e1dc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e1e0:	ea6f 0404 	mvn.w	r4, r4
 800e1e4:	bf34      	ite	cc
 800e1e6:	2300      	movcc	r3, #0
 800e1e8:	2301      	movcs	r3, #1
 800e1ea:	0fe4      	lsrs	r4, r4, #31
 800e1ec:	42a3      	cmp	r3, r4
 800e1ee:	f040 80a9 	bne.w	800e344 <powf+0x274>
 800e1f2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800e1f6:	e7db      	b.n	800e1b0 <powf+0xe0>
 800e1f8:	004d      	lsls	r5, r1, #1
 800e1fa:	1e6a      	subs	r2, r5, #1
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d31c      	bcc.n	800e23a <powf+0x16a>
 800e200:	2900      	cmp	r1, #0
 800e202:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e206:	da0f      	bge.n	800e228 <powf+0x158>
 800e208:	ee10 0a90 	vmov	r0, s1
 800e20c:	f7ff ff48 	bl	800e0a0 <checkint>
 800e210:	2801      	cmp	r0, #1
 800e212:	d109      	bne.n	800e228 <powf+0x158>
 800e214:	eeb1 0a40 	vneg.f32	s0, s0
 800e218:	b945      	cbnz	r5, 800e22c <powf+0x15c>
 800e21a:	2c00      	cmp	r4, #0
 800e21c:	dac8      	bge.n	800e1b0 <powf+0xe0>
 800e21e:	b003      	add	sp, #12
 800e220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e224:	f000 bf4c 	b.w	800f0c0 <__math_divzerof>
 800e228:	2000      	movs	r0, #0
 800e22a:	e7f5      	b.n	800e218 <powf+0x148>
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	dabf      	bge.n	800e1b0 <powf+0xe0>
 800e230:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e234:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e238:	e7ba      	b.n	800e1b0 <powf+0xe0>
 800e23a:	2900      	cmp	r1, #0
 800e23c:	da1f      	bge.n	800e27e <powf+0x1ae>
 800e23e:	ee10 0a90 	vmov	r0, s1
 800e242:	f7ff ff2d 	bl	800e0a0 <checkint>
 800e246:	b920      	cbnz	r0, 800e252 <powf+0x182>
 800e248:	b003      	add	sp, #12
 800e24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e24e:	f000 bf47 	b.w	800f0e0 <__math_invalidf>
 800e252:	2801      	cmp	r0, #1
 800e254:	bf14      	ite	ne
 800e256:	2000      	movne	r0, #0
 800e258:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800e25c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800e264:	f4bf af48 	bcs.w	800e0f8 <powf+0x28>
 800e268:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800e384 <powf+0x2b4>
 800e26c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e270:	ee10 3a10 	vmov	r3, s0
 800e274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e278:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800e27c:	e73c      	b.n	800e0f8 <powf+0x28>
 800e27e:	2000      	movs	r0, #0
 800e280:	e7ee      	b.n	800e260 <powf+0x190>
 800e282:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800e368 <powf+0x298>
 800e286:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28e:	dd10      	ble.n	800e2b2 <powf+0x1e2>
 800e290:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800e294:	2800      	cmp	r0, #0
 800e296:	d158      	bne.n	800e34a <powf+0x27a>
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	eddd 7a00 	vldr	s15, [sp]
 800e29e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2a6:	eef4 7a47 	vcmp.f32	s15, s14
 800e2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ae:	f47f af6e 	bne.w	800e18e <powf+0xbe>
 800e2b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e370 <powf+0x2a0>
 800e2b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	d804      	bhi.n	800e2ca <powf+0x1fa>
 800e2c0:	b003      	add	sp, #12
 800e2c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2c6:	f000 bee9 	b.w	800f09c <__math_uflowf>
 800e2ca:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e378 <powf+0x2a8>
 800e2ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d6:	d504      	bpl.n	800e2e2 <powf+0x212>
 800e2d8:	b003      	add	sp, #12
 800e2da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2de:	f000 bee3 	b.w	800f0a8 <__math_may_uflowf>
 800e2e2:	4b29      	ldr	r3, [pc, #164]	; (800e388 <powf+0x2b8>)
 800e2e4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800e2e8:	ee30 6b07 	vadd.f64	d6, d0, d7
 800e2ec:	ee16 2a10 	vmov	r2, s12
 800e2f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e2f4:	f002 011f 	and.w	r1, r2, #31
 800e2f8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800e2fc:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e300:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e304:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800e308:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e30c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800e310:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800e314:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e318:	686d      	ldr	r5, [r5, #4]
 800e31a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 800e31e:	1882      	adds	r2, r0, r2
 800e320:	2300      	movs	r3, #0
 800e322:	1918      	adds	r0, r3, r4
 800e324:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 800e328:	eea7 0b05 	vfma.f64	d0, d7, d5
 800e32c:	ec41 0b17 	vmov	d7, r0, r1
 800e330:	eea6 0b04 	vfma.f64	d0, d6, d4
 800e334:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e338:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e33c:	e738      	b.n	800e1b0 <powf+0xe0>
 800e33e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e342:	e735      	b.n	800e1b0 <powf+0xe0>
 800e344:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e38c <powf+0x2bc>
 800e348:	e732      	b.n	800e1b0 <powf+0xe0>
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	eddd 7a01 	vldr	s15, [sp, #4]
 800e350:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e354:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e358:	e7a5      	b.n	800e2a6 <powf+0x1d6>
 800e35a:	bf00      	nop
 800e35c:	f3af 8000 	nop.w
 800e360:	ffd1d571 	.word	0xffd1d571
 800e364:	405fffff 	.word	0x405fffff
 800e368:	ffa3aae2 	.word	0xffa3aae2
 800e36c:	405fffff 	.word	0x405fffff
 800e370:	00000000 	.word	0x00000000
 800e374:	c062c000 	.word	0xc062c000
 800e378:	00000000 	.word	0x00000000
 800e37c:	c062a000 	.word	0xc062a000
 800e380:	08010410 	.word	0x08010410
 800e384:	4b000000 	.word	0x4b000000
 800e388:	08010f80 	.word	0x08010f80
 800e38c:	00000000 	.word	0x00000000

0800e390 <asin>:
 800e390:	b508      	push	{r3, lr}
 800e392:	ed2d 8b04 	vpush	{d8-d9}
 800e396:	eeb0 8b40 	vmov.f64	d8, d0
 800e39a:	f000 f845 	bl	800e428 <__ieee754_asin>
 800e39e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a6:	eeb0 9b40 	vmov.f64	d9, d0
 800e3aa:	d615      	bvs.n	800e3d8 <asin+0x48>
 800e3ac:	eeb0 0b48 	vmov.f64	d0, d8
 800e3b0:	f000 fea5 	bl	800f0fe <fabs>
 800e3b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e3b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	dd0a      	ble.n	800e3d8 <asin+0x48>
 800e3c2:	f7fe fef9 	bl	800d1b8 <__errno>
 800e3c6:	ecbd 8b04 	vpop	{d8-d9}
 800e3ca:	2321      	movs	r3, #33	; 0x21
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e3d2:	4804      	ldr	r0, [pc, #16]	; (800e3e4 <asin+0x54>)
 800e3d4:	f000 bf10 	b.w	800f1f8 <nan>
 800e3d8:	eeb0 0b49 	vmov.f64	d0, d9
 800e3dc:	ecbd 8b04 	vpop	{d8-d9}
 800e3e0:	bd08      	pop	{r3, pc}
 800e3e2:	bf00      	nop
 800e3e4:	0800f395 	.word	0x0800f395

0800e3e8 <sqrt>:
 800e3e8:	b508      	push	{r3, lr}
 800e3ea:	ed2d 8b04 	vpush	{d8-d9}
 800e3ee:	eeb0 8b40 	vmov.f64	d8, d0
 800e3f2:	f000 fa6d 	bl	800e8d0 <__ieee754_sqrt>
 800e3f6:	eeb4 8b48 	vcmp.f64	d8, d8
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	d60c      	bvs.n	800e41a <sqrt+0x32>
 800e400:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800e420 <sqrt+0x38>
 800e404:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	d505      	bpl.n	800e41a <sqrt+0x32>
 800e40e:	f7fe fed3 	bl	800d1b8 <__errno>
 800e412:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e416:	2321      	movs	r3, #33	; 0x21
 800e418:	6003      	str	r3, [r0, #0]
 800e41a:	ecbd 8b04 	vpop	{d8-d9}
 800e41e:	bd08      	pop	{r3, pc}
	...

0800e428 <__ieee754_asin>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	ee10 5a90 	vmov	r5, s1
 800e42e:	4b82      	ldr	r3, [pc, #520]	; (800e638 <__ieee754_asin+0x210>)
 800e430:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e434:	429c      	cmp	r4, r3
 800e436:	ed2d 8b06 	vpush	{d8-d10}
 800e43a:	dd19      	ble.n	800e470 <__ieee754_asin+0x48>
 800e43c:	ee10 3a10 	vmov	r3, s0
 800e440:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e444:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e448:	4323      	orrs	r3, r4
 800e44a:	d10c      	bne.n	800e466 <__ieee754_asin+0x3e>
 800e44c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800e5c0 <__ieee754_asin+0x198>
 800e450:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800e5c8 <__ieee754_asin+0x1a0>
 800e454:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e458:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e45c:	eeb0 0b47 	vmov.f64	d0, d7
 800e460:	ecbd 8b06 	vpop	{d8-d10}
 800e464:	bd38      	pop	{r3, r4, r5, pc}
 800e466:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e46a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e46e:	e7f7      	b.n	800e460 <__ieee754_asin+0x38>
 800e470:	4b72      	ldr	r3, [pc, #456]	; (800e63c <__ieee754_asin+0x214>)
 800e472:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800e476:	429c      	cmp	r4, r3
 800e478:	dc0b      	bgt.n	800e492 <__ieee754_asin+0x6a>
 800e47a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800e47e:	da52      	bge.n	800e526 <__ieee754_asin+0xfe>
 800e480:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800e5d0 <__ieee754_asin+0x1a8>
 800e484:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e488:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800e48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e490:	dce6      	bgt.n	800e460 <__ieee754_asin+0x38>
 800e492:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e496:	f000 fe32 	bl	800f0fe <fabs>
 800e49a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800e5d8 <__ieee754_asin+0x1b0>
 800e49e:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e4a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e4a6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e5e0 <__ieee754_asin+0x1b8>
 800e4aa:	eeb0 0b48 	vmov.f64	d0, d8
 800e4ae:	eea8 6b07 	vfma.f64	d6, d8, d7
 800e4b2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e5e8 <__ieee754_asin+0x1c0>
 800e4b6:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e4ba:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e5f0 <__ieee754_asin+0x1c8>
 800e4be:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800e5f8 <__ieee754_asin+0x1d0>
 800e4c2:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e4c6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800e600 <__ieee754_asin+0x1d8>
 800e4ca:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e4ce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e608 <__ieee754_asin+0x1e0>
 800e4d2:	eea7 ab08 	vfma.f64	d10, d7, d8
 800e4d6:	ee2a ab08 	vmul.f64	d10, d10, d8
 800e4da:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e610 <__ieee754_asin+0x1e8>
 800e4de:	eea8 7b06 	vfma.f64	d7, d8, d6
 800e4e2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e618 <__ieee754_asin+0x1f0>
 800e4e6:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e4ea:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e620 <__ieee754_asin+0x1f8>
 800e4ee:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e4f2:	eea7 9b08 	vfma.f64	d9, d7, d8
 800e4f6:	f000 f9eb 	bl	800e8d0 <__ieee754_sqrt>
 800e4fa:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800e4fe:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800e502:	4b4f      	ldr	r3, [pc, #316]	; (800e640 <__ieee754_asin+0x218>)
 800e504:	429c      	cmp	r4, r3
 800e506:	dd3d      	ble.n	800e584 <__ieee754_asin+0x15c>
 800e508:	eea0 0b05 	vfma.f64	d0, d0, d5
 800e50c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e628 <__ieee754_asin+0x200>
 800e510:	eea0 7b04 	vfma.f64	d7, d0, d4
 800e514:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800e5c8 <__ieee754_asin+0x1a0>
 800e518:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e51c:	2d00      	cmp	r5, #0
 800e51e:	bfd8      	it	le
 800e520:	eeb1 0b40 	vnegle.f64	d0, d0
 800e524:	e79c      	b.n	800e460 <__ieee754_asin+0x38>
 800e526:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e5d8 <__ieee754_asin+0x1b0>
 800e52a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800e52e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e5e0 <__ieee754_asin+0x1b8>
 800e532:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e536:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e5e8 <__ieee754_asin+0x1c0>
 800e53a:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e53e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e5f0 <__ieee754_asin+0x1c8>
 800e542:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e546:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800e600 <__ieee754_asin+0x1d8>
 800e54a:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e54e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800e5f8 <__ieee754_asin+0x1d0>
 800e552:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800e608 <__ieee754_asin+0x1e0>
 800e556:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e55a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e55e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e610 <__ieee754_asin+0x1e8>
 800e562:	eea7 5b04 	vfma.f64	d5, d7, d4
 800e566:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800e618 <__ieee754_asin+0x1f0>
 800e56a:	eea5 4b07 	vfma.f64	d4, d5, d7
 800e56e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e620 <__ieee754_asin+0x1f8>
 800e572:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e576:	eea5 9b07 	vfma.f64	d9, d5, d7
 800e57a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800e57e:	eea0 0b07 	vfma.f64	d0, d0, d7
 800e582:	e76d      	b.n	800e460 <__ieee754_asin+0x38>
 800e584:	ec53 2b10 	vmov	r2, r3, d0
 800e588:	2200      	movs	r2, #0
 800e58a:	ec43 2b16 	vmov	d6, r2, r3
 800e58e:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e592:	eea6 8b46 	vfms.f64	d8, d6, d6
 800e596:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800e59a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800e5c0 <__ieee754_asin+0x198>
 800e59e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e5a2:	eea3 7b44 	vfms.f64	d7, d3, d4
 800e5a6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800e5aa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800e630 <__ieee754_asin+0x208>
 800e5ae:	eeb0 0b45 	vmov.f64	d0, d5
 800e5b2:	eea6 0b44 	vfms.f64	d0, d6, d4
 800e5b6:	ee37 0b40 	vsub.f64	d0, d7, d0
 800e5ba:	ee35 0b40 	vsub.f64	d0, d5, d0
 800e5be:	e7ad      	b.n	800e51c <__ieee754_asin+0xf4>
 800e5c0:	33145c07 	.word	0x33145c07
 800e5c4:	3c91a626 	.word	0x3c91a626
 800e5c8:	54442d18 	.word	0x54442d18
 800e5cc:	3ff921fb 	.word	0x3ff921fb
 800e5d0:	8800759c 	.word	0x8800759c
 800e5d4:	7e37e43c 	.word	0x7e37e43c
 800e5d8:	0dfdf709 	.word	0x0dfdf709
 800e5dc:	3f023de1 	.word	0x3f023de1
 800e5e0:	7501b288 	.word	0x7501b288
 800e5e4:	3f49efe0 	.word	0x3f49efe0
 800e5e8:	b5688f3b 	.word	0xb5688f3b
 800e5ec:	bfa48228 	.word	0xbfa48228
 800e5f0:	0e884455 	.word	0x0e884455
 800e5f4:	3fc9c155 	.word	0x3fc9c155
 800e5f8:	55555555 	.word	0x55555555
 800e5fc:	3fc55555 	.word	0x3fc55555
 800e600:	03eb6f7d 	.word	0x03eb6f7d
 800e604:	bfd4d612 	.word	0xbfd4d612
 800e608:	b12e9282 	.word	0xb12e9282
 800e60c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e610:	1b8d0159 	.word	0x1b8d0159
 800e614:	bfe6066c 	.word	0xbfe6066c
 800e618:	9c598ac8 	.word	0x9c598ac8
 800e61c:	40002ae5 	.word	0x40002ae5
 800e620:	1c8a2d4b 	.word	0x1c8a2d4b
 800e624:	c0033a27 	.word	0xc0033a27
 800e628:	33145c07 	.word	0x33145c07
 800e62c:	bc91a626 	.word	0xbc91a626
 800e630:	54442d18 	.word	0x54442d18
 800e634:	3fe921fb 	.word	0x3fe921fb
 800e638:	3fefffff 	.word	0x3fefffff
 800e63c:	3fdfffff 	.word	0x3fdfffff
 800e640:	3fef3332 	.word	0x3fef3332
 800e644:	00000000 	.word	0x00000000

0800e648 <__ieee754_rem_pio2>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	eeb0 7b40 	vmov.f64	d7, d0
 800e64e:	ee17 5a90 	vmov	r5, s15
 800e652:	4b99      	ldr	r3, [pc, #612]	; (800e8b8 <__ieee754_rem_pio2+0x270>)
 800e654:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e658:	429e      	cmp	r6, r3
 800e65a:	b088      	sub	sp, #32
 800e65c:	4604      	mov	r4, r0
 800e65e:	dc07      	bgt.n	800e670 <__ieee754_rem_pio2+0x28>
 800e660:	2200      	movs	r2, #0
 800e662:	2300      	movs	r3, #0
 800e664:	ed84 0b00 	vstr	d0, [r4]
 800e668:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e66c:	2000      	movs	r0, #0
 800e66e:	e01b      	b.n	800e6a8 <__ieee754_rem_pio2+0x60>
 800e670:	4b92      	ldr	r3, [pc, #584]	; (800e8bc <__ieee754_rem_pio2+0x274>)
 800e672:	429e      	cmp	r6, r3
 800e674:	dc3b      	bgt.n	800e6ee <__ieee754_rem_pio2+0xa6>
 800e676:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800e878 <__ieee754_rem_pio2+0x230>
 800e680:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e684:	dd19      	ble.n	800e6ba <__ieee754_rem_pio2+0x72>
 800e686:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e68a:	429e      	cmp	r6, r3
 800e68c:	d00e      	beq.n	800e6ac <__ieee754_rem_pio2+0x64>
 800e68e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e880 <__ieee754_rem_pio2+0x238>
 800e692:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e696:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e69a:	ed84 5b00 	vstr	d5, [r4]
 800e69e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	b008      	add	sp, #32
 800e6aa:	bd70      	pop	{r4, r5, r6, pc}
 800e6ac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e888 <__ieee754_rem_pio2+0x240>
 800e6b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6b4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e890 <__ieee754_rem_pio2+0x248>
 800e6b8:	e7eb      	b.n	800e692 <__ieee754_rem_pio2+0x4a>
 800e6ba:	429e      	cmp	r6, r3
 800e6bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e6c0:	d00e      	beq.n	800e6e0 <__ieee754_rem_pio2+0x98>
 800e6c2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800e880 <__ieee754_rem_pio2+0x238>
 800e6c6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e6ca:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e6ce:	ed84 5b00 	vstr	d5, [r4]
 800e6d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6da:	ed84 7b02 	vstr	d7, [r4, #8]
 800e6de:	e7e3      	b.n	800e6a8 <__ieee754_rem_pio2+0x60>
 800e6e0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e888 <__ieee754_rem_pio2+0x240>
 800e6e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e6e8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e890 <__ieee754_rem_pio2+0x248>
 800e6ec:	e7eb      	b.n	800e6c6 <__ieee754_rem_pio2+0x7e>
 800e6ee:	4b74      	ldr	r3, [pc, #464]	; (800e8c0 <__ieee754_rem_pio2+0x278>)
 800e6f0:	429e      	cmp	r6, r3
 800e6f2:	dc70      	bgt.n	800e7d6 <__ieee754_rem_pio2+0x18e>
 800e6f4:	f000 fd03 	bl	800f0fe <fabs>
 800e6f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e6fc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e898 <__ieee754_rem_pio2+0x250>
 800e700:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e704:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e708:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e70c:	ee17 0a90 	vmov	r0, s15
 800e710:	eeb1 4b45 	vneg.f64	d4, d5
 800e714:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e878 <__ieee754_rem_pio2+0x230>
 800e718:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e71c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e880 <__ieee754_rem_pio2+0x238>
 800e720:	281f      	cmp	r0, #31
 800e722:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e726:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e72a:	dc08      	bgt.n	800e73e <__ieee754_rem_pio2+0xf6>
 800e72c:	4b65      	ldr	r3, [pc, #404]	; (800e8c4 <__ieee754_rem_pio2+0x27c>)
 800e72e:	1e42      	subs	r2, r0, #1
 800e730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e734:	42b3      	cmp	r3, r6
 800e736:	d002      	beq.n	800e73e <__ieee754_rem_pio2+0xf6>
 800e738:	ed84 6b00 	vstr	d6, [r4]
 800e73c:	e026      	b.n	800e78c <__ieee754_rem_pio2+0x144>
 800e73e:	ee16 3a90 	vmov	r3, s13
 800e742:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e746:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e74a:	2b10      	cmp	r3, #16
 800e74c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e750:	ddf2      	ble.n	800e738 <__ieee754_rem_pio2+0xf0>
 800e752:	eeb0 6b40 	vmov.f64	d6, d0
 800e756:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e888 <__ieee754_rem_pio2+0x240>
 800e75a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e890 <__ieee754_rem_pio2+0x248>
 800e75e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e762:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e766:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e76a:	eeb0 7b40 	vmov.f64	d7, d0
 800e76e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e772:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e776:	ee13 3a90 	vmov	r3, s7
 800e77a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	2b31      	cmp	r3, #49	; 0x31
 800e782:	dc17      	bgt.n	800e7b4 <__ieee754_rem_pio2+0x16c>
 800e784:	eeb0 0b46 	vmov.f64	d0, d6
 800e788:	ed84 3b00 	vstr	d3, [r4]
 800e78c:	ed94 6b00 	vldr	d6, [r4]
 800e790:	2d00      	cmp	r5, #0
 800e792:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e796:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e79a:	ed84 0b02 	vstr	d0, [r4, #8]
 800e79e:	da83      	bge.n	800e6a8 <__ieee754_rem_pio2+0x60>
 800e7a0:	eeb1 6b46 	vneg.f64	d6, d6
 800e7a4:	eeb1 0b40 	vneg.f64	d0, d0
 800e7a8:	ed84 6b00 	vstr	d6, [r4]
 800e7ac:	ed84 0b02 	vstr	d0, [r4, #8]
 800e7b0:	4240      	negs	r0, r0
 800e7b2:	e779      	b.n	800e6a8 <__ieee754_rem_pio2+0x60>
 800e7b4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800e8a0 <__ieee754_rem_pio2+0x258>
 800e7b8:	eeb0 0b46 	vmov.f64	d0, d6
 800e7bc:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e7c0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e7c4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800e8a8 <__ieee754_rem_pio2+0x260>
 800e7c8:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e7cc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e7d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e7d4:	e7b0      	b.n	800e738 <__ieee754_rem_pio2+0xf0>
 800e7d6:	4b3c      	ldr	r3, [pc, #240]	; (800e8c8 <__ieee754_rem_pio2+0x280>)
 800e7d8:	429e      	cmp	r6, r3
 800e7da:	dd06      	ble.n	800e7ea <__ieee754_rem_pio2+0x1a2>
 800e7dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e7e0:	ed80 7b02 	vstr	d7, [r0, #8]
 800e7e4:	ed80 7b00 	vstr	d7, [r0]
 800e7e8:	e740      	b.n	800e66c <__ieee754_rem_pio2+0x24>
 800e7ea:	1532      	asrs	r2, r6, #20
 800e7ec:	ee10 0a10 	vmov	r0, s0
 800e7f0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e7f4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e7f8:	ec41 0b17 	vmov	d7, r0, r1
 800e7fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e800:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e8b0 <__ieee754_rem_pio2+0x268>
 800e804:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e80c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e810:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e814:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e818:	a902      	add	r1, sp, #8
 800e81a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e81e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e822:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e82a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e82e:	2603      	movs	r6, #3
 800e830:	4608      	mov	r0, r1
 800e832:	ed91 7b04 	vldr	d7, [r1, #16]
 800e836:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83e:	4633      	mov	r3, r6
 800e840:	f1a1 0108 	sub.w	r1, r1, #8
 800e844:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800e848:	d0f3      	beq.n	800e832 <__ieee754_rem_pio2+0x1ea>
 800e84a:	4920      	ldr	r1, [pc, #128]	; (800e8cc <__ieee754_rem_pio2+0x284>)
 800e84c:	9101      	str	r1, [sp, #4]
 800e84e:	2102      	movs	r1, #2
 800e850:	9100      	str	r1, [sp, #0]
 800e852:	4621      	mov	r1, r4
 800e854:	f000 f8ac 	bl	800e9b0 <__kernel_rem_pio2>
 800e858:	2d00      	cmp	r5, #0
 800e85a:	f6bf af25 	bge.w	800e6a8 <__ieee754_rem_pio2+0x60>
 800e85e:	ed94 7b00 	vldr	d7, [r4]
 800e862:	eeb1 7b47 	vneg.f64	d7, d7
 800e866:	ed84 7b00 	vstr	d7, [r4]
 800e86a:	ed94 7b02 	vldr	d7, [r4, #8]
 800e86e:	eeb1 7b47 	vneg.f64	d7, d7
 800e872:	ed84 7b02 	vstr	d7, [r4, #8]
 800e876:	e79b      	b.n	800e7b0 <__ieee754_rem_pio2+0x168>
 800e878:	54400000 	.word	0x54400000
 800e87c:	3ff921fb 	.word	0x3ff921fb
 800e880:	1a626331 	.word	0x1a626331
 800e884:	3dd0b461 	.word	0x3dd0b461
 800e888:	1a600000 	.word	0x1a600000
 800e88c:	3dd0b461 	.word	0x3dd0b461
 800e890:	2e037073 	.word	0x2e037073
 800e894:	3ba3198a 	.word	0x3ba3198a
 800e898:	6dc9c883 	.word	0x6dc9c883
 800e89c:	3fe45f30 	.word	0x3fe45f30
 800e8a0:	2e000000 	.word	0x2e000000
 800e8a4:	3ba3198a 	.word	0x3ba3198a
 800e8a8:	252049c1 	.word	0x252049c1
 800e8ac:	397b839a 	.word	0x397b839a
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	41700000 	.word	0x41700000
 800e8b8:	3fe921fb 	.word	0x3fe921fb
 800e8bc:	4002d97b 	.word	0x4002d97b
 800e8c0:	413921fb 	.word	0x413921fb
 800e8c4:	08010538 	.word	0x08010538
 800e8c8:	7fefffff 	.word	0x7fefffff
 800e8cc:	080105b8 	.word	0x080105b8

0800e8d0 <__ieee754_sqrt>:
 800e8d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e8d4:	4770      	bx	lr
	...

0800e8d8 <__kernel_cos>:
 800e8d8:	ee10 1a90 	vmov	r1, s1
 800e8dc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e8e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8e4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e8e8:	da05      	bge.n	800e8f6 <__kernel_cos+0x1e>
 800e8ea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e8ee:	ee17 3a90 	vmov	r3, s15
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d03d      	beq.n	800e972 <__kernel_cos+0x9a>
 800e8f6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e8fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e978 <__kernel_cos+0xa0>
 800e8fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e980 <__kernel_cos+0xa8>
 800e902:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e906:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e988 <__kernel_cos+0xb0>
 800e90a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e90e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e990 <__kernel_cos+0xb8>
 800e912:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e916:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e998 <__kernel_cos+0xc0>
 800e91a:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <__kernel_cos+0xd0>)
 800e91c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e920:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e9a0 <__kernel_cos+0xc8>
 800e924:	4299      	cmp	r1, r3
 800e926:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e92a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e92e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e932:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e936:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e93a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e93e:	dc04      	bgt.n	800e94a <__kernel_cos+0x72>
 800e940:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e944:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e948:	4770      	bx	lr
 800e94a:	4b18      	ldr	r3, [pc, #96]	; (800e9ac <__kernel_cos+0xd4>)
 800e94c:	4299      	cmp	r1, r3
 800e94e:	dc0d      	bgt.n	800e96c <__kernel_cos+0x94>
 800e950:	2200      	movs	r2, #0
 800e952:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e956:	ec43 2b15 	vmov	d5, r2, r3
 800e95a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e95e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e962:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e966:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e96a:	4770      	bx	lr
 800e96c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e970:	e7f3      	b.n	800e95a <__kernel_cos+0x82>
 800e972:	eeb0 0b44 	vmov.f64	d0, d4
 800e976:	4770      	bx	lr
 800e978:	be8838d4 	.word	0xbe8838d4
 800e97c:	bda8fae9 	.word	0xbda8fae9
 800e980:	bdb4b1c4 	.word	0xbdb4b1c4
 800e984:	3e21ee9e 	.word	0x3e21ee9e
 800e988:	809c52ad 	.word	0x809c52ad
 800e98c:	be927e4f 	.word	0xbe927e4f
 800e990:	19cb1590 	.word	0x19cb1590
 800e994:	3efa01a0 	.word	0x3efa01a0
 800e998:	16c15177 	.word	0x16c15177
 800e99c:	bf56c16c 	.word	0xbf56c16c
 800e9a0:	5555554c 	.word	0x5555554c
 800e9a4:	3fa55555 	.word	0x3fa55555
 800e9a8:	3fd33332 	.word	0x3fd33332
 800e9ac:	3fe90000 	.word	0x3fe90000

0800e9b0 <__kernel_rem_pio2>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	ed2d 8b06 	vpush	{d8-d10}
 800e9b8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e9bc:	460f      	mov	r7, r1
 800e9be:	9002      	str	r0, [sp, #8]
 800e9c0:	49c5      	ldr	r1, [pc, #788]	; (800ecd8 <__kernel_rem_pio2+0x328>)
 800e9c2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e9c4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800e9c8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	f112 0f14 	cmn.w	r2, #20
 800e9d2:	bfa8      	it	ge
 800e9d4:	2018      	movge	r0, #24
 800e9d6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800e9da:	bfb8      	it	lt
 800e9dc:	2000      	movlt	r0, #0
 800e9de:	f06f 0417 	mvn.w	r4, #23
 800e9e2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800ecc0 <__kernel_rem_pio2+0x310>
 800e9e6:	bfa4      	itt	ge
 800e9e8:	f1a2 0a03 	subge.w	sl, r2, #3
 800e9ec:	fb9a f0f0 	sdivge	r0, sl, r0
 800e9f0:	fb00 4404 	mla	r4, r0, r4, r4
 800e9f4:	1a46      	subs	r6, r0, r1
 800e9f6:	4414      	add	r4, r2
 800e9f8:	eb09 0c01 	add.w	ip, r9, r1
 800e9fc:	ad1a      	add	r5, sp, #104	; 0x68
 800e9fe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800ea02:	2200      	movs	r2, #0
 800ea04:	4562      	cmp	r2, ip
 800ea06:	dd10      	ble.n	800ea2a <__kernel_rem_pio2+0x7a>
 800ea08:	9a01      	ldr	r2, [sp, #4]
 800ea0a:	ab1a      	add	r3, sp, #104	; 0x68
 800ea0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ea10:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800ea14:	f04f 0c00 	mov.w	ip, #0
 800ea18:	45cc      	cmp	ip, r9
 800ea1a:	dc26      	bgt.n	800ea6a <__kernel_rem_pio2+0xba>
 800ea1c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800ecc0 <__kernel_rem_pio2+0x310>
 800ea20:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ea24:	4616      	mov	r6, r2
 800ea26:	2500      	movs	r5, #0
 800ea28:	e015      	b.n	800ea56 <__kernel_rem_pio2+0xa6>
 800ea2a:	42d6      	cmn	r6, r2
 800ea2c:	d409      	bmi.n	800ea42 <__kernel_rem_pio2+0x92>
 800ea2e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800ea32:	ee07 3a90 	vmov	s15, r3
 800ea36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea3a:	eca5 7b02 	vstmia	r5!, {d7}
 800ea3e:	3201      	adds	r2, #1
 800ea40:	e7e0      	b.n	800ea04 <__kernel_rem_pio2+0x54>
 800ea42:	eeb0 7b46 	vmov.f64	d7, d6
 800ea46:	e7f8      	b.n	800ea3a <__kernel_rem_pio2+0x8a>
 800ea48:	ecb8 5b02 	vldmia	r8!, {d5}
 800ea4c:	ed96 6b00 	vldr	d6, [r6]
 800ea50:	3501      	adds	r5, #1
 800ea52:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea56:	428d      	cmp	r5, r1
 800ea58:	f1a6 0608 	sub.w	r6, r6, #8
 800ea5c:	ddf4      	ble.n	800ea48 <__kernel_rem_pio2+0x98>
 800ea5e:	ecaa 7b02 	vstmia	sl!, {d7}
 800ea62:	f10c 0c01 	add.w	ip, ip, #1
 800ea66:	3208      	adds	r2, #8
 800ea68:	e7d6      	b.n	800ea18 <__kernel_rem_pio2+0x68>
 800ea6a:	ab06      	add	r3, sp, #24
 800ea6c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ecc8 <__kernel_rem_pio2+0x318>
 800ea70:	ed9f ab97 	vldr	d10, [pc, #604]	; 800ecd0 <__kernel_rem_pio2+0x320>
 800ea74:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ea78:	9303      	str	r3, [sp, #12]
 800ea7a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800ea7e:	464d      	mov	r5, r9
 800ea80:	00eb      	lsls	r3, r5, #3
 800ea82:	9304      	str	r3, [sp, #16]
 800ea84:	ab92      	add	r3, sp, #584	; 0x248
 800ea86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ea8a:	f10d 0b18 	add.w	fp, sp, #24
 800ea8e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ea90:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ea94:	465e      	mov	r6, fp
 800ea96:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	f1a2 0208 	sub.w	r2, r2, #8
 800eaa2:	dc4c      	bgt.n	800eb3e <__kernel_rem_pio2+0x18e>
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	9105      	str	r1, [sp, #20]
 800eaa8:	f000 fbae 	bl	800f208 <scalbn>
 800eaac:	eeb0 8b40 	vmov.f64	d8, d0
 800eab0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800eab4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eab8:	f000 fb2a 	bl	800f110 <floor>
 800eabc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800eac0:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eac4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800eace:	ee17 8a90 	vmov	r8, s15
 800ead2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ead6:	9905      	ldr	r1, [sp, #20]
 800ead8:	dd43      	ble.n	800eb62 <__kernel_rem_pio2+0x1b2>
 800eada:	1e68      	subs	r0, r5, #1
 800eadc:	ab06      	add	r3, sp, #24
 800eade:	f1c4 0c18 	rsb	ip, r4, #24
 800eae2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800eae6:	fa46 f20c 	asr.w	r2, r6, ip
 800eaea:	4490      	add	r8, r2
 800eaec:	fa02 f20c 	lsl.w	r2, r2, ip
 800eaf0:	1ab6      	subs	r6, r6, r2
 800eaf2:	f1c4 0217 	rsb	r2, r4, #23
 800eaf6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800eafa:	4116      	asrs	r6, r2
 800eafc:	2e00      	cmp	r6, #0
 800eafe:	dd3f      	ble.n	800eb80 <__kernel_rem_pio2+0x1d0>
 800eb00:	f04f 0c00 	mov.w	ip, #0
 800eb04:	f108 0801 	add.w	r8, r8, #1
 800eb08:	4660      	mov	r0, ip
 800eb0a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800eb0e:	4565      	cmp	r5, ip
 800eb10:	dc6e      	bgt.n	800ebf0 <__kernel_rem_pio2+0x240>
 800eb12:	2c00      	cmp	r4, #0
 800eb14:	dd04      	ble.n	800eb20 <__kernel_rem_pio2+0x170>
 800eb16:	2c01      	cmp	r4, #1
 800eb18:	d07f      	beq.n	800ec1a <__kernel_rem_pio2+0x26a>
 800eb1a:	2c02      	cmp	r4, #2
 800eb1c:	f000 8087 	beq.w	800ec2e <__kernel_rem_pio2+0x27e>
 800eb20:	2e02      	cmp	r6, #2
 800eb22:	d12d      	bne.n	800eb80 <__kernel_rem_pio2+0x1d0>
 800eb24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb28:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb2c:	b340      	cbz	r0, 800eb80 <__kernel_rem_pio2+0x1d0>
 800eb2e:	4620      	mov	r0, r4
 800eb30:	9105      	str	r1, [sp, #20]
 800eb32:	f000 fb69 	bl	800f208 <scalbn>
 800eb36:	9905      	ldr	r1, [sp, #20]
 800eb38:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb3c:	e020      	b.n	800eb80 <__kernel_rem_pio2+0x1d0>
 800eb3e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb42:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb46:	3801      	subs	r0, #1
 800eb48:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb4c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb50:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb54:	eca6 0a01 	vstmia	r6!, {s0}
 800eb58:	ed92 0b00 	vldr	d0, [r2]
 800eb5c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eb60:	e79c      	b.n	800ea9c <__kernel_rem_pio2+0xec>
 800eb62:	d105      	bne.n	800eb70 <__kernel_rem_pio2+0x1c0>
 800eb64:	1e6a      	subs	r2, r5, #1
 800eb66:	ab06      	add	r3, sp, #24
 800eb68:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800eb6c:	15f6      	asrs	r6, r6, #23
 800eb6e:	e7c5      	b.n	800eafc <__kernel_rem_pio2+0x14c>
 800eb70:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eb74:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7c:	da36      	bge.n	800ebec <__kernel_rem_pio2+0x23c>
 800eb7e:	2600      	movs	r6, #0
 800eb80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb88:	f040 80aa 	bne.w	800ece0 <__kernel_rem_pio2+0x330>
 800eb8c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800eb90:	4658      	mov	r0, fp
 800eb92:	2200      	movs	r2, #0
 800eb94:	4548      	cmp	r0, r9
 800eb96:	da52      	bge.n	800ec3e <__kernel_rem_pio2+0x28e>
 800eb98:	2a00      	cmp	r2, #0
 800eb9a:	f000 8081 	beq.w	800eca0 <__kernel_rem_pio2+0x2f0>
 800eb9e:	ab06      	add	r3, sp, #24
 800eba0:	3c18      	subs	r4, #24
 800eba2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 8087 	beq.w	800ecba <__kernel_rem_pio2+0x30a>
 800ebac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fb29 	bl	800f208 <scalbn>
 800ebb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ebba:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800ecc8 <__kernel_rem_pio2+0x318>
 800ebbe:	a96a      	add	r1, sp, #424	; 0x1a8
 800ebc0:	f103 0208 	add.w	r2, r3, #8
 800ebc4:	1888      	adds	r0, r1, r2
 800ebc6:	4659      	mov	r1, fp
 800ebc8:	2900      	cmp	r1, #0
 800ebca:	f280 80b7 	bge.w	800ed3c <__kernel_rem_pio2+0x38c>
 800ebce:	4659      	mov	r1, fp
 800ebd0:	2900      	cmp	r1, #0
 800ebd2:	f2c0 80d5 	blt.w	800ed80 <__kernel_rem_pio2+0x3d0>
 800ebd6:	a86a      	add	r0, sp, #424	; 0x1a8
 800ebd8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800ebdc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800ecc0 <__kernel_rem_pio2+0x310>
 800ebe0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ecdc <__kernel_rem_pio2+0x32c>
 800ebe4:	2400      	movs	r4, #0
 800ebe6:	ebab 0001 	sub.w	r0, fp, r1
 800ebea:	e0be      	b.n	800ed6a <__kernel_rem_pio2+0x3ba>
 800ebec:	2602      	movs	r6, #2
 800ebee:	e787      	b.n	800eb00 <__kernel_rem_pio2+0x150>
 800ebf0:	f8db 2000 	ldr.w	r2, [fp]
 800ebf4:	b958      	cbnz	r0, 800ec0e <__kernel_rem_pio2+0x25e>
 800ebf6:	b122      	cbz	r2, 800ec02 <__kernel_rem_pio2+0x252>
 800ebf8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ebfc:	f8cb 2000 	str.w	r2, [fp]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f10c 0c01 	add.w	ip, ip, #1
 800ec06:	f10b 0b04 	add.w	fp, fp, #4
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	e77f      	b.n	800eb0e <__kernel_rem_pio2+0x15e>
 800ec0e:	ebae 0202 	sub.w	r2, lr, r2
 800ec12:	f8cb 2000 	str.w	r2, [fp]
 800ec16:	4602      	mov	r2, r0
 800ec18:	e7f3      	b.n	800ec02 <__kernel_rem_pio2+0x252>
 800ec1a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800ec1e:	ab06      	add	r3, sp, #24
 800ec20:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800ec24:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ec28:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800ec2c:	e778      	b.n	800eb20 <__kernel_rem_pio2+0x170>
 800ec2e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800ec32:	ab06      	add	r3, sp, #24
 800ec34:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800ec38:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800ec3c:	e7f4      	b.n	800ec28 <__kernel_rem_pio2+0x278>
 800ec3e:	ab06      	add	r3, sp, #24
 800ec40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ec44:	3801      	subs	r0, #1
 800ec46:	431a      	orrs	r2, r3
 800ec48:	e7a4      	b.n	800eb94 <__kernel_rem_pio2+0x1e4>
 800ec4a:	f10c 0c01 	add.w	ip, ip, #1
 800ec4e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d0f9      	beq.n	800ec4a <__kernel_rem_pio2+0x29a>
 800ec56:	9b04      	ldr	r3, [sp, #16]
 800ec58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ec5c:	eb0d 0203 	add.w	r2, sp, r3
 800ec60:	9b01      	ldr	r3, [sp, #4]
 800ec62:	18e8      	adds	r0, r5, r3
 800ec64:	ab1a      	add	r3, sp, #104	; 0x68
 800ec66:	1c6e      	adds	r6, r5, #1
 800ec68:	3a98      	subs	r2, #152	; 0x98
 800ec6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ec6e:	4465      	add	r5, ip
 800ec70:	42b5      	cmp	r5, r6
 800ec72:	f6ff af05 	blt.w	800ea80 <__kernel_rem_pio2+0xd0>
 800ec76:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800ec7a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ec7e:	ee07 3a90 	vmov	s15, r3
 800ec82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec86:	f04f 0c00 	mov.w	ip, #0
 800ec8a:	eca0 7b02 	vstmia	r0!, {d7}
 800ec8e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ecc0 <__kernel_rem_pio2+0x310>
 800ec92:	4680      	mov	r8, r0
 800ec94:	458c      	cmp	ip, r1
 800ec96:	dd07      	ble.n	800eca8 <__kernel_rem_pio2+0x2f8>
 800ec98:	eca2 7b02 	vstmia	r2!, {d7}
 800ec9c:	3601      	adds	r6, #1
 800ec9e:	e7e7      	b.n	800ec70 <__kernel_rem_pio2+0x2c0>
 800eca0:	9a03      	ldr	r2, [sp, #12]
 800eca2:	f04f 0c01 	mov.w	ip, #1
 800eca6:	e7d2      	b.n	800ec4e <__kernel_rem_pio2+0x29e>
 800eca8:	ecbe 5b02 	vldmia	lr!, {d5}
 800ecac:	ed38 6b02 	vldmdb	r8!, {d6}
 800ecb0:	f10c 0c01 	add.w	ip, ip, #1
 800ecb4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ecb8:	e7ec      	b.n	800ec94 <__kernel_rem_pio2+0x2e4>
 800ecba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ecbe:	e76e      	b.n	800eb9e <__kernel_rem_pio2+0x1ee>
	...
 800eccc:	3e700000 	.word	0x3e700000
 800ecd0:	00000000 	.word	0x00000000
 800ecd4:	41700000 	.word	0x41700000
 800ecd8:	08010f70 	.word	0x08010f70
 800ecdc:	08010f30 	.word	0x08010f30
 800ece0:	4260      	negs	r0, r4
 800ece2:	eeb0 0b48 	vmov.f64	d0, d8
 800ece6:	f000 fa8f 	bl	800f208 <scalbn>
 800ecea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800eec8 <__kernel_rem_pio2+0x518>
 800ecee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ecf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf6:	db18      	blt.n	800ed2a <__kernel_rem_pio2+0x37a>
 800ecf8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800eed0 <__kernel_rem_pio2+0x520>
 800ecfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ed00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ed04:	aa06      	add	r2, sp, #24
 800ed06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ed0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ed0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed12:	f105 0b01 	add.w	fp, r5, #1
 800ed16:	ee10 3a10 	vmov	r3, s0
 800ed1a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ed1e:	ee17 3a10 	vmov	r3, s14
 800ed22:	3418      	adds	r4, #24
 800ed24:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800ed28:	e740      	b.n	800ebac <__kernel_rem_pio2+0x1fc>
 800ed2a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed2e:	aa06      	add	r2, sp, #24
 800ed30:	ee10 3a10 	vmov	r3, s0
 800ed34:	46ab      	mov	fp, r5
 800ed36:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ed3a:	e737      	b.n	800ebac <__kernel_rem_pio2+0x1fc>
 800ed3c:	ac06      	add	r4, sp, #24
 800ed3e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800ed42:	9401      	str	r4, [sp, #4]
 800ed44:	ee07 4a90 	vmov	s15, r4
 800ed48:	3901      	subs	r1, #1
 800ed4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed4e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed52:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed56:	ed20 7b02 	vstmdb	r0!, {d7}
 800ed5a:	e735      	b.n	800ebc8 <__kernel_rem_pio2+0x218>
 800ed5c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ed60:	ecb5 6b02 	vldmia	r5!, {d6}
 800ed64:	3401      	adds	r4, #1
 800ed66:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed6a:	454c      	cmp	r4, r9
 800ed6c:	dc01      	bgt.n	800ed72 <__kernel_rem_pio2+0x3c2>
 800ed6e:	4284      	cmp	r4, r0
 800ed70:	ddf4      	ble.n	800ed5c <__kernel_rem_pio2+0x3ac>
 800ed72:	ac42      	add	r4, sp, #264	; 0x108
 800ed74:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ed78:	ed80 7b00 	vstr	d7, [r0]
 800ed7c:	3901      	subs	r1, #1
 800ed7e:	e727      	b.n	800ebd0 <__kernel_rem_pio2+0x220>
 800ed80:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ed82:	2902      	cmp	r1, #2
 800ed84:	dc0a      	bgt.n	800ed9c <__kernel_rem_pio2+0x3ec>
 800ed86:	2900      	cmp	r1, #0
 800ed88:	dc2c      	bgt.n	800ede4 <__kernel_rem_pio2+0x434>
 800ed8a:	d045      	beq.n	800ee18 <__kernel_rem_pio2+0x468>
 800ed8c:	f008 0007 	and.w	r0, r8, #7
 800ed90:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800ed94:	ecbd 8b06 	vpop	{d8-d10}
 800ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ed9e:	2a03      	cmp	r2, #3
 800eda0:	d1f4      	bne.n	800ed8c <__kernel_rem_pio2+0x3dc>
 800eda2:	aa42      	add	r2, sp, #264	; 0x108
 800eda4:	4413      	add	r3, r2
 800eda6:	461a      	mov	r2, r3
 800eda8:	4619      	mov	r1, r3
 800edaa:	4658      	mov	r0, fp
 800edac:	2800      	cmp	r0, #0
 800edae:	f1a1 0108 	sub.w	r1, r1, #8
 800edb2:	dc54      	bgt.n	800ee5e <__kernel_rem_pio2+0x4ae>
 800edb4:	4659      	mov	r1, fp
 800edb6:	2901      	cmp	r1, #1
 800edb8:	f1a2 0208 	sub.w	r2, r2, #8
 800edbc:	dc5f      	bgt.n	800ee7e <__kernel_rem_pio2+0x4ce>
 800edbe:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800eed8 <__kernel_rem_pio2+0x528>
 800edc2:	3308      	adds	r3, #8
 800edc4:	f1bb 0f01 	cmp.w	fp, #1
 800edc8:	dc69      	bgt.n	800ee9e <__kernel_rem_pio2+0x4ee>
 800edca:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800edce:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800edd2:	2e00      	cmp	r6, #0
 800edd4:	d16a      	bne.n	800eeac <__kernel_rem_pio2+0x4fc>
 800edd6:	ed87 5b00 	vstr	d5, [r7]
 800edda:	ed87 6b02 	vstr	d6, [r7, #8]
 800edde:	ed87 7b04 	vstr	d7, [r7, #16]
 800ede2:	e7d3      	b.n	800ed8c <__kernel_rem_pio2+0x3dc>
 800ede4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800eed8 <__kernel_rem_pio2+0x528>
 800ede8:	ab42      	add	r3, sp, #264	; 0x108
 800edea:	441a      	add	r2, r3
 800edec:	465b      	mov	r3, fp
 800edee:	2b00      	cmp	r3, #0
 800edf0:	da26      	bge.n	800ee40 <__kernel_rem_pio2+0x490>
 800edf2:	b35e      	cbz	r6, 800ee4c <__kernel_rem_pio2+0x49c>
 800edf4:	eeb1 7b46 	vneg.f64	d7, d6
 800edf8:	ed87 7b00 	vstr	d7, [r7]
 800edfc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800ee00:	aa44      	add	r2, sp, #272	; 0x110
 800ee02:	2301      	movs	r3, #1
 800ee04:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee08:	459b      	cmp	fp, r3
 800ee0a:	da22      	bge.n	800ee52 <__kernel_rem_pio2+0x4a2>
 800ee0c:	b10e      	cbz	r6, 800ee12 <__kernel_rem_pio2+0x462>
 800ee0e:	eeb1 7b47 	vneg.f64	d7, d7
 800ee12:	ed87 7b02 	vstr	d7, [r7, #8]
 800ee16:	e7b9      	b.n	800ed8c <__kernel_rem_pio2+0x3dc>
 800ee18:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800eed8 <__kernel_rem_pio2+0x528>
 800ee1c:	ab42      	add	r3, sp, #264	; 0x108
 800ee1e:	441a      	add	r2, r3
 800ee20:	f1bb 0f00 	cmp.w	fp, #0
 800ee24:	da05      	bge.n	800ee32 <__kernel_rem_pio2+0x482>
 800ee26:	b10e      	cbz	r6, 800ee2c <__kernel_rem_pio2+0x47c>
 800ee28:	eeb1 7b47 	vneg.f64	d7, d7
 800ee2c:	ed87 7b00 	vstr	d7, [r7]
 800ee30:	e7ac      	b.n	800ed8c <__kernel_rem_pio2+0x3dc>
 800ee32:	ed32 6b02 	vldmdb	r2!, {d6}
 800ee36:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ee3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee3e:	e7ef      	b.n	800ee20 <__kernel_rem_pio2+0x470>
 800ee40:	ed32 7b02 	vldmdb	r2!, {d7}
 800ee44:	3b01      	subs	r3, #1
 800ee46:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee4a:	e7d0      	b.n	800edee <__kernel_rem_pio2+0x43e>
 800ee4c:	eeb0 7b46 	vmov.f64	d7, d6
 800ee50:	e7d2      	b.n	800edf8 <__kernel_rem_pio2+0x448>
 800ee52:	ecb2 6b02 	vldmia	r2!, {d6}
 800ee56:	3301      	adds	r3, #1
 800ee58:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee5c:	e7d4      	b.n	800ee08 <__kernel_rem_pio2+0x458>
 800ee5e:	ed91 7b00 	vldr	d7, [r1]
 800ee62:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee66:	3801      	subs	r0, #1
 800ee68:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee70:	ed81 6b00 	vstr	d6, [r1]
 800ee74:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee78:	ed81 7b02 	vstr	d7, [r1, #8]
 800ee7c:	e796      	b.n	800edac <__kernel_rem_pio2+0x3fc>
 800ee7e:	ed92 7b00 	vldr	d7, [r2]
 800ee82:	ed92 5b02 	vldr	d5, [r2, #8]
 800ee86:	3901      	subs	r1, #1
 800ee88:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee90:	ed82 6b00 	vstr	d6, [r2]
 800ee94:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee98:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee9c:	e78b      	b.n	800edb6 <__kernel_rem_pio2+0x406>
 800ee9e:	ed33 6b02 	vldmdb	r3!, {d6}
 800eea2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eea6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eeaa:	e78b      	b.n	800edc4 <__kernel_rem_pio2+0x414>
 800eeac:	eeb1 5b45 	vneg.f64	d5, d5
 800eeb0:	eeb1 6b46 	vneg.f64	d6, d6
 800eeb4:	ed87 5b00 	vstr	d5, [r7]
 800eeb8:	eeb1 7b47 	vneg.f64	d7, d7
 800eebc:	ed87 6b02 	vstr	d6, [r7, #8]
 800eec0:	e78d      	b.n	800edde <__kernel_rem_pio2+0x42e>
 800eec2:	bf00      	nop
 800eec4:	f3af 8000 	nop.w
 800eec8:	00000000 	.word	0x00000000
 800eecc:	41700000 	.word	0x41700000
 800eed0:	00000000 	.word	0x00000000
 800eed4:	3e700000 	.word	0x3e700000
	...

0800eee0 <__kernel_sin>:
 800eee0:	ee10 3a90 	vmov	r3, s1
 800eee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eee8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eeec:	da04      	bge.n	800eef8 <__kernel_sin+0x18>
 800eeee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eef2:	ee17 3a90 	vmov	r3, s15
 800eef6:	b35b      	cbz	r3, 800ef50 <__kernel_sin+0x70>
 800eef8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800eefc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ef00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ef58 <__kernel_sin+0x78>
 800ef04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef60 <__kernel_sin+0x80>
 800ef08:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ef0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef68 <__kernel_sin+0x88>
 800ef10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ef14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef70 <__kernel_sin+0x90>
 800ef18:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ef1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef78 <__kernel_sin+0x98>
 800ef20:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ef24:	b930      	cbnz	r0, 800ef34 <__kernel_sin+0x54>
 800ef26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef80 <__kernel_sin+0xa0>
 800ef2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ef2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ef32:	4770      	bx	lr
 800ef34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ef38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ef3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ef40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ef44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ef88 <__kernel_sin+0xa8>
 800ef48:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ef4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	f3af 8000 	nop.w
 800ef58:	5acfd57c 	.word	0x5acfd57c
 800ef5c:	3de5d93a 	.word	0x3de5d93a
 800ef60:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef64:	be5ae5e6 	.word	0xbe5ae5e6
 800ef68:	57b1fe7d 	.word	0x57b1fe7d
 800ef6c:	3ec71de3 	.word	0x3ec71de3
 800ef70:	19c161d5 	.word	0x19c161d5
 800ef74:	bf2a01a0 	.word	0xbf2a01a0
 800ef78:	1110f8a6 	.word	0x1110f8a6
 800ef7c:	3f811111 	.word	0x3f811111
 800ef80:	55555549 	.word	0x55555549
 800ef84:	bfc55555 	.word	0xbfc55555
 800ef88:	55555549 	.word	0x55555549
 800ef8c:	3fc55555 	.word	0x3fc55555

0800ef90 <with_errno>:
 800ef90:	b513      	push	{r0, r1, r4, lr}
 800ef92:	4604      	mov	r4, r0
 800ef94:	ed8d 0b00 	vstr	d0, [sp]
 800ef98:	f7fe f90e 	bl	800d1b8 <__errno>
 800ef9c:	ed9d 0b00 	vldr	d0, [sp]
 800efa0:	6004      	str	r4, [r0, #0]
 800efa2:	b002      	add	sp, #8
 800efa4:	bd10      	pop	{r4, pc}

0800efa6 <xflow>:
 800efa6:	b082      	sub	sp, #8
 800efa8:	b158      	cbz	r0, 800efc2 <xflow+0x1c>
 800efaa:	eeb1 7b40 	vneg.f64	d7, d0
 800efae:	ed8d 7b00 	vstr	d7, [sp]
 800efb2:	ed9d 7b00 	vldr	d7, [sp]
 800efb6:	2022      	movs	r0, #34	; 0x22
 800efb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800efbc:	b002      	add	sp, #8
 800efbe:	f7ff bfe7 	b.w	800ef90 <with_errno>
 800efc2:	eeb0 7b40 	vmov.f64	d7, d0
 800efc6:	e7f2      	b.n	800efae <xflow+0x8>

0800efc8 <__math_uflow>:
 800efc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efd0 <__math_uflow+0x8>
 800efcc:	f7ff bfeb 	b.w	800efa6 <xflow>
 800efd0:	00000000 	.word	0x00000000
 800efd4:	10000000 	.word	0x10000000

0800efd8 <__math_oflow>:
 800efd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efe0 <__math_oflow+0x8>
 800efdc:	f7ff bfe3 	b.w	800efa6 <xflow>
 800efe0:	00000000 	.word	0x00000000
 800efe4:	70000000 	.word	0x70000000

0800efe8 <__math_divzero>:
 800efe8:	b082      	sub	sp, #8
 800efea:	2800      	cmp	r0, #0
 800efec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eff0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800eff4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800eff8:	ed8d 7b00 	vstr	d7, [sp]
 800effc:	ed9d 0b00 	vldr	d0, [sp]
 800f000:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800f010 <__math_divzero+0x28>
 800f004:	2022      	movs	r0, #34	; 0x22
 800f006:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f00a:	b002      	add	sp, #8
 800f00c:	f7ff bfc0 	b.w	800ef90 <with_errno>
	...

0800f018 <__math_invalid>:
 800f018:	eeb0 7b40 	vmov.f64	d7, d0
 800f01c:	eeb4 7b47 	vcmp.f64	d7, d7
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f028:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f02c:	d602      	bvs.n	800f034 <__math_invalid+0x1c>
 800f02e:	2021      	movs	r0, #33	; 0x21
 800f030:	f7ff bfae 	b.w	800ef90 <with_errno>
 800f034:	4770      	bx	lr

0800f036 <__math_check_uflow>:
 800f036:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03e:	d102      	bne.n	800f046 <__math_check_uflow+0x10>
 800f040:	2022      	movs	r0, #34	; 0x22
 800f042:	f7ff bfa5 	b.w	800ef90 <with_errno>
 800f046:	4770      	bx	lr

0800f048 <__math_check_oflow>:
 800f048:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f068 <__math_check_oflow+0x20>
 800f04c:	eeb0 7bc0 	vabs.f64	d7, d0
 800f050:	eeb4 7b46 	vcmp.f64	d7, d6
 800f054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f058:	dd02      	ble.n	800f060 <__math_check_oflow+0x18>
 800f05a:	2022      	movs	r0, #34	; 0x22
 800f05c:	f7ff bf98 	b.w	800ef90 <with_errno>
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	f3af 8000 	nop.w
 800f068:	ffffffff 	.word	0xffffffff
 800f06c:	7fefffff 	.word	0x7fefffff

0800f070 <with_errnof>:
 800f070:	b513      	push	{r0, r1, r4, lr}
 800f072:	4604      	mov	r4, r0
 800f074:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f078:	f7fe f89e 	bl	800d1b8 <__errno>
 800f07c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f080:	6004      	str	r4, [r0, #0]
 800f082:	b002      	add	sp, #8
 800f084:	bd10      	pop	{r4, pc}

0800f086 <xflowf>:
 800f086:	b130      	cbz	r0, 800f096 <xflowf+0x10>
 800f088:	eef1 7a40 	vneg.f32	s15, s0
 800f08c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f090:	2022      	movs	r0, #34	; 0x22
 800f092:	f7ff bfed 	b.w	800f070 <with_errnof>
 800f096:	eef0 7a40 	vmov.f32	s15, s0
 800f09a:	e7f7      	b.n	800f08c <xflowf+0x6>

0800f09c <__math_uflowf>:
 800f09c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f0a4 <__math_uflowf+0x8>
 800f0a0:	f7ff bff1 	b.w	800f086 <xflowf>
 800f0a4:	10000000 	.word	0x10000000

0800f0a8 <__math_may_uflowf>:
 800f0a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f0b0 <__math_may_uflowf+0x8>
 800f0ac:	f7ff bfeb 	b.w	800f086 <xflowf>
 800f0b0:	1a200000 	.word	0x1a200000

0800f0b4 <__math_oflowf>:
 800f0b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f0bc <__math_oflowf+0x8>
 800f0b8:	f7ff bfe5 	b.w	800f086 <xflowf>
 800f0bc:	70000000 	.word	0x70000000

0800f0c0 <__math_divzerof>:
 800f0c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f0c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f0ce:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f0dc <__math_divzerof+0x1c>
 800f0d2:	2022      	movs	r0, #34	; 0x22
 800f0d4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f0d8:	f7ff bfca 	b.w	800f070 <with_errnof>
 800f0dc:	00000000 	.word	0x00000000

0800f0e0 <__math_invalidf>:
 800f0e0:	eef0 7a40 	vmov.f32	s15, s0
 800f0e4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f0e8:	eef4 7a67 	vcmp.f32	s15, s15
 800f0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f0f4:	d602      	bvs.n	800f0fc <__math_invalidf+0x1c>
 800f0f6:	2021      	movs	r0, #33	; 0x21
 800f0f8:	f7ff bfba 	b.w	800f070 <with_errnof>
 800f0fc:	4770      	bx	lr

0800f0fe <fabs>:
 800f0fe:	ec51 0b10 	vmov	r0, r1, d0
 800f102:	ee10 2a10 	vmov	r2, s0
 800f106:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f10a:	ec43 2b10 	vmov	d0, r2, r3
 800f10e:	4770      	bx	lr

0800f110 <floor>:
 800f110:	ee10 1a90 	vmov	r1, s1
 800f114:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f118:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f11c:	2b13      	cmp	r3, #19
 800f11e:	b530      	push	{r4, r5, lr}
 800f120:	ee10 0a10 	vmov	r0, s0
 800f124:	ee10 5a10 	vmov	r5, s0
 800f128:	dc31      	bgt.n	800f18e <floor+0x7e>
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da15      	bge.n	800f15a <floor+0x4a>
 800f12e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f1e8 <floor+0xd8>
 800f132:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f136:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13e:	dd07      	ble.n	800f150 <floor+0x40>
 800f140:	2900      	cmp	r1, #0
 800f142:	da4e      	bge.n	800f1e2 <floor+0xd2>
 800f144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f148:	4318      	orrs	r0, r3
 800f14a:	d001      	beq.n	800f150 <floor+0x40>
 800f14c:	4928      	ldr	r1, [pc, #160]	; (800f1f0 <floor+0xe0>)
 800f14e:	2000      	movs	r0, #0
 800f150:	460b      	mov	r3, r1
 800f152:	4602      	mov	r2, r0
 800f154:	ec43 2b10 	vmov	d0, r2, r3
 800f158:	e020      	b.n	800f19c <floor+0x8c>
 800f15a:	4a26      	ldr	r2, [pc, #152]	; (800f1f4 <floor+0xe4>)
 800f15c:	411a      	asrs	r2, r3
 800f15e:	ea01 0402 	and.w	r4, r1, r2
 800f162:	4304      	orrs	r4, r0
 800f164:	d01a      	beq.n	800f19c <floor+0x8c>
 800f166:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f1e8 <floor+0xd8>
 800f16a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f16e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f176:	ddeb      	ble.n	800f150 <floor+0x40>
 800f178:	2900      	cmp	r1, #0
 800f17a:	bfbe      	ittt	lt
 800f17c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f180:	fa40 f303 	asrlt.w	r3, r0, r3
 800f184:	18c9      	addlt	r1, r1, r3
 800f186:	ea21 0102 	bic.w	r1, r1, r2
 800f18a:	2000      	movs	r0, #0
 800f18c:	e7e0      	b.n	800f150 <floor+0x40>
 800f18e:	2b33      	cmp	r3, #51	; 0x33
 800f190:	dd05      	ble.n	800f19e <floor+0x8e>
 800f192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f196:	d101      	bne.n	800f19c <floor+0x8c>
 800f198:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f19c:	bd30      	pop	{r4, r5, pc}
 800f19e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f1a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1a6:	40e2      	lsrs	r2, r4
 800f1a8:	4202      	tst	r2, r0
 800f1aa:	d0f7      	beq.n	800f19c <floor+0x8c>
 800f1ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f1e8 <floor+0xd8>
 800f1b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f1b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1bc:	ddc8      	ble.n	800f150 <floor+0x40>
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	da02      	bge.n	800f1c8 <floor+0xb8>
 800f1c2:	2b14      	cmp	r3, #20
 800f1c4:	d103      	bne.n	800f1ce <floor+0xbe>
 800f1c6:	3101      	adds	r1, #1
 800f1c8:	ea20 0002 	bic.w	r0, r0, r2
 800f1cc:	e7c0      	b.n	800f150 <floor+0x40>
 800f1ce:	2401      	movs	r4, #1
 800f1d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f1d4:	fa04 f303 	lsl.w	r3, r4, r3
 800f1d8:	4418      	add	r0, r3
 800f1da:	42a8      	cmp	r0, r5
 800f1dc:	bf38      	it	cc
 800f1de:	1909      	addcc	r1, r1, r4
 800f1e0:	e7f2      	b.n	800f1c8 <floor+0xb8>
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	e7b3      	b.n	800f150 <floor+0x40>
 800f1e8:	8800759c 	.word	0x8800759c
 800f1ec:	7e37e43c 	.word	0x7e37e43c
 800f1f0:	bff00000 	.word	0xbff00000
 800f1f4:	000fffff 	.word	0x000fffff

0800f1f8 <nan>:
 800f1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f200 <nan+0x8>
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	00000000 	.word	0x00000000
 800f204:	7ff80000 	.word	0x7ff80000

0800f208 <scalbn>:
 800f208:	ee10 1a90 	vmov	r1, s1
 800f20c:	b510      	push	{r4, lr}
 800f20e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f212:	b98c      	cbnz	r4, 800f238 <scalbn+0x30>
 800f214:	ee10 3a10 	vmov	r3, s0
 800f218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f21c:	430b      	orrs	r3, r1
 800f21e:	d011      	beq.n	800f244 <scalbn+0x3c>
 800f220:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f2e8 <scalbn+0xe0>
 800f224:	4b3c      	ldr	r3, [pc, #240]	; (800f318 <scalbn+0x110>)
 800f226:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f22a:	4298      	cmp	r0, r3
 800f22c:	da0b      	bge.n	800f246 <scalbn+0x3e>
 800f22e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f2f0 <scalbn+0xe8>
 800f232:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f236:	e005      	b.n	800f244 <scalbn+0x3c>
 800f238:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f23c:	429c      	cmp	r4, r3
 800f23e:	d107      	bne.n	800f250 <scalbn+0x48>
 800f240:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f244:	bd10      	pop	{r4, pc}
 800f246:	ee10 1a90 	vmov	r1, s1
 800f24a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f24e:	3c36      	subs	r4, #54	; 0x36
 800f250:	4404      	add	r4, r0
 800f252:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f256:	429c      	cmp	r4, r3
 800f258:	dd0d      	ble.n	800f276 <scalbn+0x6e>
 800f25a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f2f8 <scalbn+0xf0>
 800f25e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f300 <scalbn+0xf8>
 800f262:	eeb0 6b47 	vmov.f64	d6, d7
 800f266:	ee10 3a90 	vmov	r3, s1
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f270:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f274:	e7e6      	b.n	800f244 <scalbn+0x3c>
 800f276:	2c00      	cmp	r4, #0
 800f278:	dd0a      	ble.n	800f290 <scalbn+0x88>
 800f27a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f27e:	ec53 2b10 	vmov	r2, r3, d0
 800f282:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f286:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f28a:	ec43 2b10 	vmov	d0, r2, r3
 800f28e:	e7d9      	b.n	800f244 <scalbn+0x3c>
 800f290:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f294:	da19      	bge.n	800f2ca <scalbn+0xc2>
 800f296:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f29a:	4298      	cmp	r0, r3
 800f29c:	ee10 3a90 	vmov	r3, s1
 800f2a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2a4:	dd09      	ble.n	800f2ba <scalbn+0xb2>
 800f2a6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f2f8 <scalbn+0xf0>
 800f2aa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f300 <scalbn+0xf8>
 800f2ae:	eeb0 7b40 	vmov.f64	d7, d0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f2b8:	e7bb      	b.n	800f232 <scalbn+0x2a>
 800f2ba:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f2f0 <scalbn+0xe8>
 800f2be:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f308 <scalbn+0x100>
 800f2c2:	eeb0 7b40 	vmov.f64	d7, d0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	e7f4      	b.n	800f2b4 <scalbn+0xac>
 800f2ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f2ce:	ec53 2b10 	vmov	r2, r3, d0
 800f2d2:	3436      	adds	r4, #54	; 0x36
 800f2d4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f2d8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f2dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f310 <scalbn+0x108>
 800f2e0:	ec43 2b10 	vmov	d0, r2, r3
 800f2e4:	e7a5      	b.n	800f232 <scalbn+0x2a>
 800f2e6:	bf00      	nop
 800f2e8:	00000000 	.word	0x00000000
 800f2ec:	43500000 	.word	0x43500000
 800f2f0:	c2f8f359 	.word	0xc2f8f359
 800f2f4:	01a56e1f 	.word	0x01a56e1f
 800f2f8:	8800759c 	.word	0x8800759c
 800f2fc:	7e37e43c 	.word	0x7e37e43c
 800f300:	8800759c 	.word	0x8800759c
 800f304:	fe37e43c 	.word	0xfe37e43c
 800f308:	c2f8f359 	.word	0xc2f8f359
 800f30c:	81a56e1f 	.word	0x81a56e1f
 800f310:	00000000 	.word	0x00000000
 800f314:	3c900000 	.word	0x3c900000
 800f318:	ffff3cb0 	.word	0xffff3cb0

0800f31c <_init>:
 800f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31e:	bf00      	nop
 800f320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f322:	bc08      	pop	{r3}
 800f324:	469e      	mov	lr, r3
 800f326:	4770      	bx	lr

0800f328 <_fini>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	bf00      	nop
 800f32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32e:	bc08      	pop	{r3}
 800f330:	469e      	mov	lr, r3
 800f332:	4770      	bx	lr
