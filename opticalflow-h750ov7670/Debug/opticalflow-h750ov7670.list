
opticalflow-h750ov7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002494  08014ef0  08014ef0  00024ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017384  08017384  00027384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801738c  0801738c  0002738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08017394  08017394  00027394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0801739c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00046518  240000a8  08017440  000300a8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240465c0  08017440  000365c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030479  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c2f  00000000  00000000  0006054b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e30  00000000  00000000  00065180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001cc0  00000000  00000000  00066fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc54  00000000  00000000  00068c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028ef8  00000000  00000000  000a58c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001730df  00000000  00000000  000ce7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024189b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009138  00000000  00000000  002418ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a8 	.word	0x240000a8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ed4 	.word	0x08014ed4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000ac 	.word	0x240000ac
 80002dc:	08014ed4 	.word	0x08014ed4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <Coarse2FineFlowWrapper>:
void Coarse2FineFlowWrapper(double * vx, double * vy, double * warpI2,
                              const double * Im1, const double * Im2,
                              double alpha, double ratio, int minWidth,
                              int nOuterFPIterations, int nInnerFPIterations,
                              int nSORIterations, int colType,
                              int h, int w, int c) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b0b7      	sub	sp, #220	; 0xdc
 80006b8:	af06      	add	r7, sp, #24
 80006ba:	61f8      	str	r0, [r7, #28]
 80006bc:	61b9      	str	r1, [r7, #24]
 80006be:	617a      	str	r2, [r7, #20]
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80006c6:	ed87 1b00 	vstr	d1, [r7]
  DImage ImFormatted1, ImFormatted2;
 80006ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f916 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80006d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f911 	bl	8000900 <_ZN5ImageIdEC1Ev>
  DImage vxFormatted, vyFormatted, warpI2Formatted;
 80006de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f90c 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80006e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f907 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f902 	bl	8000900 <_ZN5ImageIdEC1Ev>

  // format input in the format needed by backend
  ImFormatted1.allocate(w, h, c);
 80006fc:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8000700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000704:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000708:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800070c:	f000 f8b8 	bl	8000880 <_ZN5ImageIdE8allocateEiii>
  ImFormatted2.allocate(w, h, c);
 8000710:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000714:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000718:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800071c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8000720:	f000 f8ae 	bl	8000880 <_ZN5ImageIdE8allocateEiii>
  memcpy(ImFormatted1.pData, Im1, h * w * c * sizeof(double));
 8000724:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000728:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800072c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	461a      	mov	r2, r3
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	f013 ff0d 	bl	8014560 <memcpy>
  memcpy(ImFormatted2.pData, Im2, h * w * c * sizeof(double));
 8000746:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800074a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800074e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000752:	fb02 f303 	mul.w	r3, r2, r3
 8000756:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	461a      	mov	r2, r3
 8000762:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000766:	f013 fefb 	bl	8014560 <memcpy>
  ImFormatted1.setColorType(colType);
 800076a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800076e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f90c 	bl	8000990 <_ZN5ImageIdE12setColorTypeEi>
  ImFormatted2.setColorType(colType);
 8000778:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800077c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f905 	bl	8000990 <_ZN5ImageIdE12setColorTypeEi>

  // call optical flow backend
  OpticalFlow::Coarse2FineFlow(vxFormatted, vyFormatted, warpI2Formatted,
 8000786:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800078a:	f107 0220 	add.w	r2, r7, #32
 800078e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000792:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800079a:	9304      	str	r3, [sp, #16]
 800079c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80007a0:	9303      	str	r3, [sp, #12]
 80007a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	ed97 1b00 	vldr	d1, [r7]
 80007b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80007bc:	4623      	mov	r3, r4
 80007be:	f004 f9bf 	bl	8004b40 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii>
                                alpha, ratio, minWidth,
                                nOuterFPIterations, nInnerFPIterations,
                                nSORIterations);

  // copy formatted output to a contiguous memory to be returned
  memcpy(vx, vxFormatted.pData, h * w * sizeof(double));
 80007c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80007c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80007c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	461a      	mov	r2, r3
 80007d4:	69f8      	ldr	r0, [r7, #28]
 80007d6:	f013 fec3 	bl	8014560 <memcpy>
  memcpy(vy, vyFormatted.pData, h * w * sizeof(double));
 80007da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80007dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80007e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	461a      	mov	r2, r3
 80007ec:	69b8      	ldr	r0, [r7, #24]
 80007ee:	f013 feb7 	bl	8014560 <memcpy>
  memcpy(warpI2, warpI2Formatted.pData, h * w * c * sizeof(double));
 80007f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80007f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	6978      	ldr	r0, [r7, #20]
 800080e:	f013 fea7 	bl	8014560 <memcpy>

  // clear c memory
  ImFormatted1.clear();
 8000812:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f8cf 	bl	80009ba <_ZN5ImageIdE5clearEv>
  ImFormatted2.clear();
 800081c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f8ca 	bl	80009ba <_ZN5ImageIdE5clearEv>
  vxFormatted.clear();
 8000826:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f8c5 	bl	80009ba <_ZN5ImageIdE5clearEv>
  vyFormatted.clear();
 8000830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f8c0 	bl	80009ba <_ZN5ImageIdE5clearEv>
  warpI2Formatted.clear();
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f8bb 	bl	80009ba <_ZN5ImageIdE5clearEv>

  return;
 8000844:	bf00      	nop
  DImage vxFormatted, vyFormatted, warpI2Formatted;
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f884 	bl	8000958 <_ZN5ImageIdED1Ev>
 8000850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f87f 	bl	8000958 <_ZN5ImageIdED1Ev>
 800085a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f87a 	bl	8000958 <_ZN5ImageIdED1Ev>
  DImage ImFormatted1, ImFormatted2;
 8000864:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f875 	bl	8000958 <_ZN5ImageIdED1Ev>
 800086e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f870 	bl	8000958 <_ZN5ImageIdED1Ev>
  return;
 8000878:	bf00      	nop
}
 800087a:	37c4      	adds	r7, #196	; 0xc4
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <_ZN5ImageIdE8allocateEiii>:
//	imread(image);
//}
#endif

template <class T>
void Image<T>::allocate(int width,int height,int nchannels)
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	603b      	str	r3, [r7, #0]
{
	clear();
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	330c      	adds	r3, #12
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	4798      	blx	r3
	imWidth=width;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	609a      	str	r2, [r3, #8]
	imHeight=height;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	60da      	str	r2, [r3, #12]
	nChannels=nchannels;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	611a      	str	r2, [r3, #16]
	computeDimension();
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3304      	adds	r3, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	4798      	blx	r3
	pData=NULL;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]

	if(nElements>0)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dd18      	ble.n	80008f8 <_ZN5ImageIdE8allocateEiii+0x78>
	{
		pData=new T[nElements];
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008ce:	d201      	bcs.n	80008d4 <_ZN5ImageIdE8allocateEiii+0x54>
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	e001      	b.n	80008d8 <_ZN5ImageIdE8allocateEiii+0x58>
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d8:	4618      	mov	r0, r3
 80008da:	f013 f85f 	bl	801399c <_Znaj>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	605a      	str	r2, [r3, #4]
		memset(pData,0,sizeof(T)*nElements);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6858      	ldr	r0, [r3, #4]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	461a      	mov	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f013 fe42 	bl	801457c <memset>
	}
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN5ImageIdEC1Ev>:
Image<T>::Image()
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_ZN5ImageIdEC1Ev+0x54>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
	pData=NULL;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
	imWidth=imHeight=nChannels=nPixels=nElements=0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	699a      	ldr	r2, [r3, #24]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	609a      	str	r2, [r3, #8]
	colorType=RGB;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	775a      	strb	r2, [r3, #29]
	IsDerivativeImage=false;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
}
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	08014f68 	.word	0x08014f68

08000958 <_ZN5ImageIdED1Ev>:

//------------------------------------------------------------------------------------------
// destructor
//------------------------------------------------------------------------------------------
template <class T>
Image<T>::~Image()
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
{
	if(pData!=NULL)
		delete []pData;
}
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <_ZN5ImageIdED1Ev+0x34>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
	if(pData!=NULL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <_ZN5ImageIdED1Ev+0x28>
		delete []pData;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <_ZN5ImageIdED1Ev+0x28>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4618      	mov	r0, r3
 800097c:	f012 fff6 	bl	801396c <_ZdaPv>
}
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08014f68 	.word	0x08014f68

08000990 <_ZN5ImageIdE12setColorTypeEi>:
	void setColorType(int colorVal) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	switch (colorVal) {
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d103      	bne.n	80009a8 <_ZN5ImageIdE12setColorTypeEi+0x18>
	  case 1: colorType = GRAY; break;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2203      	movs	r2, #3
 80009a4:	775a      	strb	r2, [r3, #29]
 80009a6:	e002      	b.n	80009ae <_ZN5ImageIdE12setColorTypeEi+0x1e>
	  default: colorType = RGB;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	775a      	strb	r2, [r3, #29]
	return;
 80009ae:	bf00      	nop
	}
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_ZN5ImageIdE5clearEv>:

//------------------------------------------------------------------------------------------
// clear the image
//------------------------------------------------------------------------------------------
template <class T>
void Image<T>::clear()
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
{
	if(pData!=NULL)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d008      	beq.n	80009dc <_ZN5ImageIdE5clearEv+0x22>
		delete []pData;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <_ZN5ImageIdE5clearEv+0x22>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f012 ffc8 	bl	801396c <_ZdaPv>
	pData=NULL;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
	imWidth=imHeight=nChannels=nPixels=nElements=0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	699a      	ldr	r2, [r3, #24]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695a      	ldr	r2, [r3, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZN5ImageIdE16computeDimensionEv>:
	virtual inline void computeDimension(){nPixels=imWidth*imHeight;nElements=nPixels*nChannels;};
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	68d2      	ldr	r2, [r2, #12]
 8000a20:	fb03 f202 	mul.w	r2, r3, r2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	6912      	ldr	r2, [r2, #16]
 8000a30:	fb03 f202 	mul.w	r2, r3, r2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	619a      	str	r2, [r3, #24]
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_ZN5ImageIdEaSERKS0_>:

//------------------------------------------------------------------------------------------
// override equal operator
//------------------------------------------------------------------------------------------
template <class T>
Image<T>& Image<T>::operator=(const Image<T>& other)
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
{
	copyData(other);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3314      	adds	r3, #20
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	4798      	blx	r3
	return *this;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_ZN5ImageIdE5resetEv>:
void Image<T>::reset()
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	if(pData!=NULL)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d008      	beq.n	8000a88 <_ZN5ImageIdE5resetEv+0x22>
		memset(pData,0,sizeof(T)*nElements);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6858      	ldr	r0, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	461a      	mov	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f013 fd7a 	bl	801457c <memset>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN5ImageIdE8copyDataERKS0_>:
void Image<T>::copyData(const Image<T>& other)
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	imWidth=other.imWidth;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
	imHeight=other.imHeight;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60da      	str	r2, [r3, #12]
	nChannels=other.nChannels;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	611a      	str	r2, [r3, #16]
	nPixels=other.nPixels;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	615a      	str	r2, [r3, #20]
	IsDerivativeImage=other.IsDerivativeImage;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	7f1a      	ldrb	r2, [r3, #28]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	771a      	strb	r2, [r3, #28]
	colorType = other.colorType;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	7f5a      	ldrb	r2, [r3, #29]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	775a      	strb	r2, [r3, #29]
	if(nElements!=other.nElements)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	699a      	ldr	r2, [r3, #24]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d023      	beq.n	8000b1e <_ZN5ImageIdE8copyDataERKS0_+0x8e>
		nElements=other.nElements;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	619a      	str	r2, [r3, #24]
		if(pData!=NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d008      	beq.n	8000af8 <_ZN5ImageIdE8copyDataERKS0_+0x68>
			delete []pData;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <_ZN5ImageIdE8copyDataERKS0_+0x68>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f012 ff3a 	bl	801396c <_ZdaPv>
		pData=NULL;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
		pData=new T[nElements];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b06:	d201      	bcs.n	8000b0c <_ZN5ImageIdE8copyDataERKS0_+0x7c>
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	e001      	b.n	8000b10 <_ZN5ImageIdE8copyDataERKS0_+0x80>
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b10:	4618      	mov	r0, r3
 8000b12:	f012 ff43 	bl	801399c <_Znaj>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	605a      	str	r2, [r3, #4]
	if(nElements>0)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dd09      	ble.n	8000b3a <_ZN5ImageIdE8copyDataERKS0_+0xaa>
		memcpy(pData,other.pData,sizeof(T)*nElements);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6858      	ldr	r0, [r3, #4]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	6859      	ldr	r1, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	461a      	mov	r2, r3
 8000b36:	f013 fd13 	bl	8014560 <memcpy>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_ZN5ImageIdE8imresizeEd>:

//------------------------------------------------------------------------------------------
// resize the image
//------------------------------------------------------------------------------------------
template <class T>
bool Image<T>::imresize(double ratio)
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b08a      	sub	sp, #40	; 0x28
 8000b46:	af02      	add	r7, sp, #8
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	ed87 0b00 	vstr	d0, [r7]
{
	if(pData==NULL)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <_ZN5ImageIdE8imresizeEd+0x18>
		return false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e059      	b.n	8000c0e <_ZN5ImageIdE8imresizeEd+0xcc>

	T* pDstData;
	int DstWidth,DstHeight;
	DstWidth=(double)imWidth*ratio;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b66:	ed97 7b00 	vldr	d7, [r7]
 8000b6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b6e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b72:	ee17 3a90 	vmov	r3, s15
 8000b76:	61fb      	str	r3, [r7, #28]
	DstHeight=(double)imHeight*ratio;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b84:	ed97 7b00 	vldr	d7, [r7]
 8000b88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b90:	ee17 3a90 	vmov	r3, s15
 8000b94:	61bb      	str	r3, [r7, #24]
	pDstData=new T[DstWidth*DstHeight*nChannels];
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	6912      	ldr	r2, [r2, #16]
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000baa:	d201      	bcs.n	8000bb0 <_ZN5ImageIdE8imresizeEd+0x6e>
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	e001      	b.n	8000bb4 <_ZN5ImageIdE8imresizeEd+0x72>
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f012 fef1 	bl	801399c <_Znaj>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	617b      	str	r3, [r7, #20]

	ImageProcessing::ResizeImage(pData,pDstData,imWidth,imHeight,nChannels,ratio);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6858      	ldr	r0, [r3, #4]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	68d9      	ldr	r1, [r3, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	ed97 0b00 	vldr	d0, [r7]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	6979      	ldr	r1, [r7, #20]
 8000bd8:	f000 f81d 	bl	8000c16 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid>

	delete []pData;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d004      	beq.n	8000bee <_ZN5ImageIdE8imresizeEd+0xac>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f012 febf 	bl	801396c <_ZdaPv>
	pData=pDstData;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	605a      	str	r2, [r3, #4]
	imWidth=DstWidth;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	609a      	str	r2, [r3, #8]
	imHeight=DstHeight;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	60da      	str	r2, [r3, #12]
	computeDimension();
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3304      	adds	r3, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	4798      	blx	r3
	return true;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid>:
//------------------------------------------------------------------------------------------------------------
// this is the most general function for reszing an image with a varying nChannels
// bilinear interpolation is used for now. It might be replaced by other (bicubic) interpolation methods
//------------------------------------------------------------------------------------------------------------
template <class T1,class T2>
void ImageProcessing::ResizeImage(const T1* pSrcImage,T2* pDstImage,int SrcWidth,int SrcHeight,int nChannels,double Ratio)
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b090      	sub	sp, #64	; 0x40
 8000c1a:	af02      	add	r7, sp, #8
 8000c1c:	6178      	str	r0, [r7, #20]
 8000c1e:	6139      	str	r1, [r7, #16]
 8000c20:	60fa      	str	r2, [r7, #12]
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	ed87 0b00 	vstr	d0, [r7]
{
	int DstWidth,DstHeight;
	DstWidth=(double)SrcWidth*Ratio;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c32:	ed97 7b00 	vldr	d7, [r7]
 8000c36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c3e:	ee17 3a90 	vmov	r3, s15
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
	DstHeight=(double)SrcHeight*Ratio;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c4e:	ed97 7b00 	vldr	d7, [r7]
 8000c52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	memset(pDstImage,0,sizeof(T2)*DstWidth*DstHeight*nChannels);
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	461a      	mov	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	6938      	ldr	r0, [r7, #16]
 8000c76:	f013 fc81 	bl	801457c <memset>

	double x,y;

	for(int i=0;i<DstHeight;i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	429a      	cmp	r2, r3
 8000c84:	da44      	bge.n	8000d10 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid+0xfa>
		for(int j=0;j<DstWidth;j++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
 8000c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	da3a      	bge.n	8000d08 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid+0xf2>
		{
			x=(double)(j+1)/Ratio-1;
 8000c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c94:	3301      	adds	r3, #1
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000c9e:	ed97 6b00 	vldr	d6, [r7]
 8000ca2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ca6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000caa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cae:	ed87 7b08 	vstr	d7, [r7, #32]
			y=(double)(i+1)/Ratio-1;
 8000cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cbe:	ed97 6b00 	vldr	d6, [r7]
 8000cc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cce:	ed87 7b06 	vstr	d7, [r7, #24]

			// bilinear interpolation
			BilinearInterpolate(pSrcImage,SrcWidth,SrcHeight,nChannels,x,y,pDstImage+(i*DstWidth+j)*nChannels);
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd6:	fb03 f202 	mul.w	r2, r3, r2
 8000cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cdc:	4413      	add	r3, r2
 8000cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ce0:	fb02 f303 	mul.w	r3, r2, r3
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4413      	add	r3, r2
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	ed97 1b06 	vldr	d1, [r7, #24]
 8000cf0:	ed97 0b08 	vldr	d0, [r7, #32]
 8000cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f000 f80c 	bl	8000d18 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_>
		for(int j=0;j<DstWidth;j++)
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	3301      	adds	r3, #1
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
 8000d06:	e7c0      	b.n	8000c8a <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid+0x74>
	for(int i=0;i<DstHeight;i++)
 8000d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d0e:	e7b6      	b.n	8000c7e <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid+0x68>
		}
}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	; 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_>:
inline void ImageProcessing::BilinearInterpolate(const T1* pImage,int width,int height,int nChannels,double x,double y,T2* result)
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09a      	sub	sp, #104	; 0x68
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	61f8      	str	r0, [r7, #28]
 8000d20:	61b9      	str	r1, [r7, #24]
 8000d22:	617a      	str	r2, [r7, #20]
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d2a:	ed87 1b00 	vstr	d1, [r7]
	xx=x;
 8000d2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d36:	ee17 3a90 	vmov	r3, s15
 8000d3a:	65bb      	str	r3, [r7, #88]	; 0x58
	yy=y;
 8000d3c:	ed97 7b00 	vldr	d7, [r7]
 8000d40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	657b      	str	r3, [r7, #84]	; 0x54
	dx=__max(__min(x-xx,1),0);
 8000d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d54:	ed97 6b02 	vldr	d6, [r7, #8]
 8000d58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8000d62:	f000 f89c 	bl	8000e9e <_Z5__minIdiET_S0_T0_>
 8000d66:	eeb0 7b40 	vmov.f64	d7, d0
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d70:	f000 f8b6 	bl	8000ee0 <_Z5__maxIdiET_S0_T0_>
 8000d74:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	dy=__max(__min(y-yy,1),0);
 8000d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d82:	ed97 6b00 	vldr	d6, [r7]
 8000d86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d90:	f000 f885 	bl	8000e9e <_Z5__minIdiET_S0_T0_>
 8000d94:	eeb0 7b40 	vmov.f64	d7, d0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9e:	f000 f89f 	bl	8000ee0 <_Z5__maxIdiET_S0_T0_>
 8000da2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	for(m=0;m<=1;m++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	667b      	str	r3, [r7, #100]	; 0x64
 8000daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dc72      	bgt.n	8000e96 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x17e>
		for(n=0;n<=1;n++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	663b      	str	r3, [r7, #96]	; 0x60
 8000db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	dc69      	bgt.n	8000e8e <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x176>
			u=EnforceRange(xx+m,width);
 8000dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dbe:	4413      	add	r3, r2
 8000dc0:	623b      	str	r3, [r7, #32]
 8000dc2:	f107 0218 	add.w	r2, r7, #24
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f8a8 	bl	8000f22 <_ZN15ImageProcessing12EnforceRangeIiEET_RKS1_RKi>
 8000dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
			v=EnforceRange(yy+n,height);
 8000dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dd8:	4413      	add	r3, r2
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
 8000ddc:	f107 0214 	add.w	r2, r7, #20
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f89b 	bl	8000f22 <_ZN15ImageProcessing12EnforceRangeIiEET_RKS1_RKi>
 8000dec:	63b8      	str	r0, [r7, #56]	; 0x38
			offset=(v*width+u)*nChannels;
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000df2:	fb03 f202 	mul.w	r2, r3, r2
 8000df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df8:	441a      	add	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
			s=fabs(1-m-dx)*fabs(1-n-dy);
 8000e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e04:	f1c3 0301 	rsb	r3, r3, #1
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e10:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8000e14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e18:	eeb0 6bc7 	vabs.f64	d6, d7
 8000e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e1e:	f1c3 0301 	rsb	r3, r3, #1
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e2a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000e2e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000e32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e3a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			for(l=0;l<nChannels;l++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	da1d      	bge.n	8000e86 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x16e>
				result[l]+=pImage[offset+l]*s;
 8000e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e50:	4413      	add	r3, r2
 8000e52:	ed93 6b00 	vldr	d6, [r3]
 8000e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	4413      	add	r3, r2
 8000e62:	ed93 5b00 	vldr	d5, [r3]
 8000e66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e74:	4413      	add	r3, r2
 8000e76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e7a:	ed83 7b00 	vstr	d7, [r3]
			for(l=0;l<nChannels;l++)
 8000e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e80:	3301      	adds	r3, #1
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e84:	e7dd      	b.n	8000e42 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x12a>
		for(n=0;n<=1;n++)
 8000e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e88:	3301      	adds	r3, #1
 8000e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8000e8c:	e792      	b.n	8000db4 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x9c>
	for(m=0;m<=1;m++)
 8000e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e90:	3301      	adds	r3, #1
 8000e92:	667b      	str	r3, [r7, #100]	; 0x64
 8000e94:	e789      	b.n	8000daa <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_+0x92>
}
 8000e96:	bf00      	nop
 8000e98:	3768      	adds	r7, #104	; 0x68
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_Z5__minIdiET_S0_T0_>:


#ifdef _LINUX_MAC

template <class T1,class T2>
T1 __min(T1 a, T2 b)
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ea8:	6078      	str	r0, [r7, #4]
{
  return (a>b)?b:a;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eb4:	ed97 6b02 	vldr	d6, [r7, #8]
 8000eb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	dd05      	ble.n	8000ece <_Z5__minIdiET_S0_T0_+0x30>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ecc:	e001      	b.n	8000ed2 <_Z5__minIdiET_S0_T0_+0x34>
 8000ece:	ed97 7b02 	vldr	d7, [r7, #8]
}
 8000ed2:	eeb0 0b47 	vmov.f64	d0, d7
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_Z5__maxIdiET_S0_T0_>:

template <class T1,class T2>
T1 __max(T1 a, T2 b)
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0b02 	vstr	d0, [r7, #8]
 8000eea:	6078      	str	r0, [r7, #4]
{
  return (a<b)?b:a;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef6:	ed97 6b02 	vldr	d6, [r7, #8]
 8000efa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	d505      	bpl.n	8000f10 <_Z5__maxIdiET_S0_T0_+0x30>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f0e:	e001      	b.n	8000f14 <_Z5__maxIdiET_S0_T0_+0x34>
 8000f10:	ed97 7b02 	vldr	d7, [r7, #8]
}
 8000f14:	eeb0 0b47 	vmov.f64	d0, d7
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN15ImageProcessing12EnforceRangeIiEET_RKS1_RKi>:
	static inline T EnforceRange(const T& x,const int& MaxValue) {return __min(__max(x,0),MaxValue-1);};
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f80d 	bl	8000f52 <_Z5__maxIiiET_S0_T0_>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f000 f817 	bl	8000f76 <_Z5__minIiiET_S0_T0_>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_Z5__maxIiiET_S0_T0_>:
T1 __max(T1 a, T2 b)
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  return (a<b)?b:a;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	da01      	bge.n	8000f68 <_Z5__maxIiiET_S0_T0_+0x16>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	e000      	b.n	8000f6a <_Z5__maxIiiET_S0_T0_+0x18>
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_Z5__minIiiET_S0_T0_>:
T1 __min(T1 a, T2 b)
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  return (a>b)?b:a;
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dd01      	ble.n	8000f8c <_Z5__minIiiET_S0_T0_+0x16>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	e000      	b.n	8000f8e <_Z5__minIiiET_S0_T0_+0x18>
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_ZN15GaussianPyramidC1Ev>:
// Modified By: Deepak Pathak (c) 2016; pathak@berkeley.edu

#include "GaussianPyramid.h"
#include "math.h"

GaussianPyramid::GaussianPyramid(void)
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
{
	ImPyramid=NULL;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZN15GaussianPyramidD1Ev>:

GaussianPyramid::~GaussianPyramid(void)
 8000fb6:	b590      	push	{r4, r7, lr}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
{
	if(ImPyramid!=NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d022      	beq.n	800100c <_ZN15GaussianPyramidD1Ev+0x56>
		delete []ImPyramid;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d01e      	beq.n	800100c <_ZN15GaussianPyramidD1Ev+0x56>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	18d4      	adds	r4, r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	d004      	beq.n	8000ff0 <_ZN15GaussianPyramidD1Ev+0x3a>
 8000fe6:	3c20      	subs	r4, #32
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fcb5 	bl	8000958 <_ZN5ImageIdED1Ev>
 8000fee:	e7f6      	b.n	8000fde <_ZN15GaussianPyramidD1Ev+0x28>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1a3 0208 	sub.w	r2, r3, #8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b04      	subs	r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	015b      	lsls	r3, r3, #5
 8001002:	3308      	adds	r3, #8
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f012 fcb2 	bl	8013970 <_ZdaPvj>
}
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
	...

08001018 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi>:
//---------------------------------------------------------------------------------------
// function to construct the pyramid
// this is the fast way
//---------------------------------------------------------------------------------------
void GaussianPyramid::ConstructPyramid(const DImage &image, double ratio, int minWidth)
{
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	ed2d 8b02 	vpush	{d8}
 800101e:	b09b      	sub	sp, #108	; 0x6c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6178      	str	r0, [r7, #20]
 8001024:	6139      	str	r1, [r7, #16]
 8001026:	ed87 0b02 	vstr	d0, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	// the ratio cannot be arbitrary numbers
	if(ratio>0.98 || ratio<0.4)
 800102c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001030:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80012c8 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x2b0>
 8001034:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dc08      	bgt.n	8001050 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x38>
 800103e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001042:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 80012d0 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x2b8>
 8001046:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d504      	bpl.n	800105a <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x42>
		ratio=0.75;
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4ba2      	ldr	r3, [pc, #648]	; (80012e0 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x2c8>)
 8001056:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// first decide how many levels
	nLevels=log((double)minWidth/image.width())/log(ratio);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001064:	6938      	ldr	r0, [r7, #16]
 8001066:	f000 f93d 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 800106a:	ee07 0a90 	vmov	s15, r0
 800106e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001072:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8001076:	eeb0 0b46 	vmov.f64	d0, d6
 800107a:	f012 fe1d 	bl	8013cb8 <log>
 800107e:	eeb0 8b40 	vmov.f64	d8, d0
 8001082:	ed97 0b02 	vldr	d0, [r7, #8]
 8001086:	f012 fe17 	bl	8013cb8 <log>
 800108a:	eeb0 6b40 	vmov.f64	d6, d0
 800108e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001092:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001096:	ee17 2a90 	vmov	r2, s15
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	605a      	str	r2, [r3, #4]
	if(ImPyramid!=NULL)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d022      	beq.n	80010ec <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xd4>
		delete []ImPyramid;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01e      	beq.n	80010ec <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xd4>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3b04      	subs	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	18d4      	adds	r4, r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429c      	cmp	r4, r3
 80010c4:	d004      	beq.n	80010d0 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xb8>
 80010c6:	3c20      	subs	r4, #32
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fc45 	bl	8000958 <_ZN5ImageIdED1Ev>
 80010ce:	e7f6      	b.n	80010be <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xa6>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f1a3 0208 	sub.w	r2, r3, #8
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3b04      	subs	r3, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	3308      	adds	r3, #8
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f012 fc42 	bl	8013970 <_ZdaPvj>
	ImPyramid=new DImage[nLevels];
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	461d      	mov	r5, r3
 80010f2:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80010f6:	d202      	bcs.n	80010fe <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xe6>
 80010f8:	016b      	lsls	r3, r5, #5
 80010fa:	3308      	adds	r3, #8
 80010fc:	e001      	b.n	8001102 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0xea>
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	4618      	mov	r0, r3
 8001104:	f012 fc4a 	bl	801399c <_Znaj>
 8001108:	4603      	mov	r3, r0
 800110a:	461c      	mov	r4, r3
 800110c:	1d23      	adds	r3, r4, #4
 800110e:	3b04      	subs	r3, #4
 8001110:	2220      	movs	r2, #32
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	1d23      	adds	r3, r4, #4
 8001116:	601d      	str	r5, [r3, #0]
 8001118:	f104 0308 	add.w	r3, r4, #8
 800111c:	1e6a      	subs	r2, r5, #1
 800111e:	4615      	mov	r5, r2
 8001120:	461e      	mov	r6, r3
 8001122:	2d00      	cmp	r5, #0
 8001124:	db05      	blt.n	8001132 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x11a>
 8001126:	4630      	mov	r0, r6
 8001128:	f7ff fbea 	bl	8000900 <_ZN5ImageIdEC1Ev>
 800112c:	3620      	adds	r6, #32
 800112e:	3d01      	subs	r5, #1
 8001130:	e7f7      	b.n	8001122 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x10a>
 8001132:	f104 0208 	add.w	r2, r4, #8
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	601a      	str	r2, [r3, #0]
	ImPyramid[0].copyData(image);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3314      	adds	r3, #20
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	4610      	mov	r0, r2
 800114c:	4798      	blx	r3
	double baseSigma=(1/ratio-1);
 800114e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001152:	ed97 6b02 	vldr	d6, [r7, #8]
 8001156:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800115a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800115e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001162:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	int n=log(0.25)/log(ratio);
 8001166:	ed97 0b02 	vldr	d0, [r7, #8]
 800116a:	f012 fda5 	bl	8013cb8 <log>
 800116e:	eeb0 6b40 	vmov.f64	d6, d0
 8001172:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80012d8 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x2c0>
 8001176:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800117a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	657b      	str	r3, [r7, #84]	; 0x54
	double nSigma=baseSigma*n;
 8001184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001192:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001196:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	for(int i=1;i<nLevels;i++)
 800119a:	2301      	movs	r3, #1
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f280 8086 	bge.w	80012b6 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x29e>
	{
		DImage foo;
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fba6 	bl	8000900 <_ZN5ImageIdEC1Ev>
		if(i<=n)
 80011b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dc31      	bgt.n	8001220 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x208>
		{
			double sigma=baseSigma*i;
 80011bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011c6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80011ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011ce:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
			image.GaussianSmoothing(foo,sigma,sigma*3);
 80011d2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80011d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80011da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011de:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	ee17 2a90 	vmov	r2, s15
 80011ea:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011ee:	4619      	mov	r1, r3
 80011f0:	6938      	ldr	r0, [r7, #16]
 80011f2:	f000 f883 	bl	80012fc <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi>
			foo.imresize(ImPyramid[i],pow(ratio,i));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011fc:	015b      	lsls	r3, r3, #5
 80011fe:	18d4      	adds	r4, r2, r3
 8001200:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001202:	ed97 0b02 	vldr	d0, [r7, #8]
 8001206:	f000 f90b 	bl	8001420 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800120a:	eeb0 7b40 	vmov.f64	d7, d0
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	eeb0 0b47 	vmov.f64	d0, d7
 8001216:	4621      	mov	r1, r4
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f919 	bl	8001450 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed>
 800121e:	e041      	b.n	80012a4 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x28c>
		}
		else
		{
			ImPyramid[i-n].GaussianSmoothing(foo,nSigma,nSigma*3);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001228:	1acb      	subs	r3, r1, r3
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	4413      	add	r3, r2
 800122e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001232:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800123e:	f107 0118 	add.w	r1, r7, #24
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f856 	bl	80012fc <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi>
			double rate=(double)pow(ratio,i)*image.width()/foo.width();
 8001250:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001252:	ed97 0b02 	vldr	d0, [r7, #8]
 8001256:	f000 f8e3 	bl	8001420 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800125a:	eeb0 8b40 	vmov.f64	d8, d0
 800125e:	6938      	ldr	r0, [r7, #16]
 8001260:	f000 f840 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8001264:	ee07 0a90 	vmov	s15, r0
 8001268:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800126c:	ee28 8b07 	vmul.f64	d8, d8, d7
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f835 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 800127a:	ee07 0a90 	vmov	s15, r0
 800127e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001282:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001286:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
			foo.imresize(ImPyramid[i],rate);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	441a      	add	r2, r3
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f8d6 	bl	8001450 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed>
		DImage foo;
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fb55 	bl	8000958 <_ZN5ImageIdED1Ev>
	for(int i=1;i<nLevels;i++)
 80012ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012b0:	3301      	adds	r3, #1
 80012b2:	667b      	str	r3, [r7, #100]	; 0x64
 80012b4:	e773      	b.n	800119e <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi+0x186>
		}
	}
}
 80012b6:	bf00      	nop
 80012b8:	376c      	adds	r7, #108	; 0x6c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	ecbd 8b02 	vpop	{d8}
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	f5c28f5c 	.word	0xf5c28f5c
 80012cc:	3fef5c28 	.word	0x3fef5c28
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3fd99999 	.word	0x3fd99999
 80012d8:	fefa39ef 	.word	0xfefa39ef
 80012dc:	bff62e42 	.word	0xbff62e42
 80012e0:	3fe80000 	.word	0x3fe80000

080012e4 <_ZNK5ImageIdE5widthEv>:
	inline int width() const {return imWidth;};
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi>:



template <class T>
template <class T1>
void Image<T>::GaussianSmoothing(Image<T1>& image,double sigma,int fsize) const
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b097      	sub	sp, #92	; 0x5c
 8001300:	af02      	add	r7, sp, #8
 8001302:	6178      	str	r0, [r7, #20]
 8001304:	6139      	str	r1, [r7, #16]
 8001306:	ed87 0b02 	vstr	d0, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
{
	Image<T1> foo;
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff faf5 	bl	8000900 <_ZN5ImageIdEC1Ev>
	// constructing the 1D gaussian filter
	double* gFilter;
	gFilter=new double[fsize*2+1];
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3301      	adds	r3, #1
 800131c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001320:	d201      	bcs.n	8001326 <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0x2a>
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	e001      	b.n	800132a <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0x2e>
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	4618      	mov	r0, r3
 800132c:	f012 fb36 	bl	801399c <_Znaj>
 8001330:	4603      	mov	r3, r0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
	double sum=0;
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	sigma=sigma*sigma*2;
 8001340:	ed97 7b02 	vldr	d7, [r7, #8]
 8001344:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001348:	ee37 7b07 	vadd.f64	d7, d7, d7
 800134c:	ed87 7b02 	vstr	d7, [r7, #8]
	for(int i=-fsize;i<=fsize;i++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	425b      	negs	r3, r3
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
 8001356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dc2c      	bgt.n	80013b8 <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0xbc>
	{
		gFilter[i+fsize]=exp(-(double)(i*i)/sigma);
 800135e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001360:	fb03 f303 	mul.w	r3, r3, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800136c:	eeb1 6b47 	vneg.f64	d6, d7
 8001370:	ed97 7b02 	vldr	d7, [r7, #8]
 8001374:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001382:	18d4      	adds	r4, r2, r3
 8001384:	eeb0 0b45 	vmov.f64	d0, d5
 8001388:	f012 fbc2 	bl	8013b10 <exp>
 800138c:	eeb0 7b40 	vmov.f64	d7, d0
 8001390:	ed84 7b00 	vstr	d7, [r4]
		sum+=gFilter[i+fsize];
 8001394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800139e:	4413      	add	r3, r2
 80013a0:	ed93 7b00 	vldr	d7, [r3]
 80013a4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80013a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ac:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	for(int i=-fsize;i<=fsize;i++)
 80013b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b2:	3301      	adds	r3, #1
 80013b4:	647b      	str	r3, [r7, #68]	; 0x44
 80013b6:	e7ce      	b.n	8001356 <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0x5a>
	}
	for(int i=0;i<2*fsize+1;i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dc13      	bgt.n	80013ee <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0xf2>
		gFilter[i]/=sum;
 80013c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013cc:	4413      	add	r3, r2
 80013ce:	ed93 5b00 	vldr	d5, [r3]
 80013d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013d8:	4413      	add	r3, r2
 80013da:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80013de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013e2:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<2*fsize+1;i++)
 80013e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e8:	3301      	adds	r3, #1
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
 80013ec:	e7e6      	b.n	80013bc <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0xc0>

	// apply filtering
	imfilter_hv(image,gFilter,fsize,gFilter,fsize);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f000 f890 	bl	8001522 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i>

	delete[] gFilter;
 8001402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <_ZNK5ImageIdE17GaussianSmoothingIdEEvRS_IT_Edi+0x112>
 8001408:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800140a:	f012 faaf 	bl	801396c <_ZdaPv>
	Image<T1> foo;
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff faa0 	bl	8000958 <_ZN5ImageIdED1Ev>
}
 8001418:	bf00      	nop
 800141a:	3754      	adds	r7, #84	; 0x54
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0b02 	vstr	d0, [r7, #8]
 800142a:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001436:	eeb0 1b47 	vmov.f64	d1, d7
 800143a:	ed97 0b02 	vldr	d0, [r7, #8]
 800143e:	f012 fdd7 	bl	8013ff0 <pow>
 8001442:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001446:	eeb0 0b47 	vmov.f64	d0, d7
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed>:
void Image<T>::imresize(Image<T1>& result,double ratio) const
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	ed87 0b00 	vstr	d0, [r7]
	DstWidth=(double)imWidth*ratio;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800146a:	ed97 7b00 	vldr	d7, [r7]
 800146e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001472:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001476:	ee17 3a90 	vmov	r3, s15
 800147a:	617b      	str	r3, [r7, #20]
	DstHeight=(double)imHeight*ratio;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001488:	ed97 7b00 	vldr	d7, [r7]
 800148c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001490:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	613b      	str	r3, [r7, #16]
	if(result.width()!=DstWidth || result.height()!=DstHeight || result.nchannels()!=nChannels)
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff ff22 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d10e      	bne.n	80014c6 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0x76>
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f000 f89a 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d107      	bne.n	80014c6 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0x76>
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f000 f89f 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0x7a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0x7c>
 80014ca:	2300      	movs	r3, #0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0x96>
		result.allocate(DstWidth,DstHeight,nChannels);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3308      	adds	r3, #8
 80014d6:	681c      	ldr	r4, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	47a0      	blx	r4
 80014e4:	e005      	b.n	80014f2 <_ZNK5ImageIdE8imresizeIdEEvRS_IT_Ed+0xa2>
		result.reset();
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3310      	adds	r3, #16
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	4798      	blx	r3
	ImageProcessing::ResizeImage(pData,result.data(),imWidth,imHeight,nChannels,ratio);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	685c      	ldr	r4, [r3, #4]
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f000 f88b 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68d8      	ldr	r0, [r3, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	ed97 0b00 	vldr	d0, [r7]
 8001512:	4603      	mov	r3, r0
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fb7e 	bl	8000c16 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiid>
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}

08001522 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i>:
}


template <class T>
template <class T1>
void Image<T>::imfilter_hv(Image<T1> &image, const double *hfilter, int hfsize, const double *vfilter, int vfsize) const
 8001522:	b590      	push	{r4, r7, lr}
 8001524:	b08b      	sub	sp, #44	; 0x2c
 8001526:	af04      	add	r7, sp, #16
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
{
	if(matchDimension(image)==false)
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f879 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i+0x3e>
		image.allocate(imWidth,imHeight,nChannels);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3308      	adds	r3, #8
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	68b8      	ldr	r0, [r7, #8]
 800155e:	47a0      	blx	r4
	T1* pTempBuffer;
	pTempBuffer=new T1[nElements];
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001568:	d203      	bcs.n	8001572 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i+0x50>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	e001      	b.n	8001576 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i+0x54>
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001576:	4618      	mov	r0, r3
 8001578:	f012 fa10 	bl	801399c <_Znaj>
 800157c:	4603      	mov	r3, r0
 800157e:	617b      	str	r3, [r7, #20]
	ImageProcessing::hfiltering(pData,pTempBuffer,imWidth,imHeight,nChannels,hfilter,hfsize);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6858      	ldr	r0, [r3, #4]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6899      	ldr	r1, [r3, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68dc      	ldr	r4, [r3, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	9202      	str	r2, [sp, #8]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	9201      	str	r2, [sp, #4]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4623      	mov	r3, r4
 800159c:	460a      	mov	r2, r1
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	f000 f86c 	bl	800167c <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi>
	ImageProcessing::vfiltering(pTempBuffer,image.data(),imWidth,imHeight,nChannels,vfilter,vfsize);
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f000 f834 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6898      	ldr	r0, [r3, #8]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68dc      	ldr	r4, [r3, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	9202      	str	r2, [sp, #8]
 80015be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	4602      	mov	r2, r0
 80015c8:	6978      	ldr	r0, [r7, #20]
 80015ca:	f000 f8e1 	bl	8001790 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi>
    delete[] pTempBuffer;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i+0xb8>
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f012 f9c9 	bl	801396c <_ZdaPv>
}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}

080015e2 <_ZNK5ImageIdE6heightEv>:
	inline int height() const {return imHeight;};
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_ZNK5ImageIdE9nchannelsEv>:
	inline int nchannels() const {return nChannels;};
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZN5ImageIdE4dataEv>:
	inline T*& data(){return pData;};
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>:
bool Image<T>::matchDimension(const Image<T1>& image) const
 800162a:	b590      	push	{r4, r7, lr}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	if(imWidth==image.width() && imHeight==image.height() && nChannels==image.nchannels())
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689c      	ldr	r4, [r3, #8]
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f7ff fe53 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 800163e:	4603      	mov	r3, r0
 8001640:	429c      	cmp	r4, r3
 8001642:	d111      	bne.n	8001668 <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x3e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68dc      	ldr	r4, [r3, #12]
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f7ff ffca 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 800164e:	4603      	mov	r3, r0
 8001650:	429c      	cmp	r4, r3
 8001652:	d109      	bne.n	8001668 <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x3e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691c      	ldr	r4, [r3, #16]
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f7ff ffce 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 800165e:	4603      	mov	r3, r0
 8001660:	429c      	cmp	r4, r3
 8001662:	d101      	bne.n	8001668 <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x3e>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x40>
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x48>
		return true;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E+0x4a>
		return false;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}

0800167c <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi>:

//------------------------------------------------------------------------------------------------------------
//  horizontal direction filtering
//------------------------------------------------------------------------------------------------------------
template <class T1,class T2>
void ImageProcessing::hfiltering(const T1* pSrcImage,T2* pDstImage,int width,int height,int nChannels,const double* pfilter1D,int fsize)
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
{
	memset(pDstImage,0,sizeof(T2)*width*height*nChannels);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	461a      	mov	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f012 ff6b 	bl	801457c <memset>
	T2* pBuffer;
	double w;
	int i,j,l,k,offset,jj;
	for(i=0;i<height;i++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
 80016aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	da6a      	bge.n	8001788 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0x10c>
		for(j=0;j<width;j++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ba:	429a      	cmp	r2, r3
 80016bc:	da60      	bge.n	8001780 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0x104>
		{
			offset=i*width*nChannels;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c2:	fb03 f202 	mul.w	r2, r3, r2
 80016c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
			pBuffer=pDstImage+offset+j*nChannels;
 80016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	623b      	str	r3, [r7, #32]
			for(l=-fsize;l<=fsize;l++)
 80016e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e6:	425b      	negs	r3, r3
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dc42      	bgt.n	8001778 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0xfc>
			{
				w=pfilter1D[l+fsize];
 80016f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016fc:	4413      	add	r3, r2
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	e9c7 2306 	strd	r2, r3, [r7, #24]
				jj=EnforceRange(j+l,width);
 8001706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	4413      	add	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fc03 	bl	8000f22 <_ZN15ImageProcessing12EnforceRangeIiEET_RKS1_RKi>
 800171c:	6178      	str	r0, [r7, #20]
				for(k=0;k<nChannels;k++)
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
 8001722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001726:	429a      	cmp	r2, r3
 8001728:	da22      	bge.n	8001770 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0xf4>
					pBuffer[k]+=pSrcImage[offset+jj*nChannels+k]*w;
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	6a3a      	ldr	r2, [r7, #32]
 8001730:	4413      	add	r3, r2
 8001732:	ed93 6b00 	vldr	d6, [r3]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800173a:	fb03 f202 	mul.w	r2, r3, r2
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	441a      	add	r2, r3
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	ed93 5b00 	vldr	d5, [r3]
 8001750:	ed97 7b06 	vldr	d7, [r7, #24]
 8001754:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	4413      	add	r3, r2
 8001760:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001764:	ed83 7b00 	vstr	d7, [r3]
				for(k=0;k<nChannels;k++)
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	3301      	adds	r3, #1
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
 800176e:	e7d8      	b.n	8001722 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0xa6>
			for(l=-fsize;l<=fsize;l++)
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	3301      	adds	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001776:	e7b8      	b.n	80016ea <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0x6e>
		for(j=0;j<width;j++)
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	3301      	adds	r3, #1
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
 800177e:	e79a      	b.n	80016b6 <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0x3a>
	for(i=0;i<height;i++)
 8001780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001782:	3301      	adds	r3, #1
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
 8001786:	e790      	b.n	80016aa <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi+0x2e>
			}
		}
}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi>:

//------------------------------------------------------------------------------------------------------------
// vertical direction filtering
//------------------------------------------------------------------------------------------------------------
template <class T1,class T2>
void ImageProcessing::vfiltering(const T1* pSrcImage,T2* pDstImage,int width,int height,int nChannels,const double* pfilter1D,int fsize)
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
{
	memset(pDstImage,0,sizeof(T2)*width*height*nChannels);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	461a      	mov	r2, r3
 80017b0:	2100      	movs	r1, #0
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f012 fee2 	bl	801457c <memset>
	T2* pBuffer;
	double w;
	int i,j,l,k,ii;
	for(i=0;i<height;i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c0:	429a      	cmp	r2, r3
 80017c2:	da67      	bge.n	8001894 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0x104>
		for(j=0;j<width;j++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
 80017c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	da5d      	bge.n	800188c <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0xfc>
		{
			pBuffer=pDstImage+(i*width+j)*nChannels;
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	fb03 f202 	mul.w	r2, r3, r2
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	4413      	add	r3, r2
 80017dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
			for(l=-fsize;l<=fsize;l++)
 80017ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ec:	425b      	negs	r3, r3
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dc45      	bgt.n	8001884 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0xf4>
			{
				w=pfilter1D[l+fsize];
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001802:	4413      	add	r3, r2
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	e9c7 2306 	strd	r2, r3, [r7, #24]
				ii=EnforceRange(i+l,height);
 800180c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	4413      	add	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	463a      	mov	r2, r7
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb80 	bl	8000f22 <_ZN15ImageProcessing12EnforceRangeIiEET_RKS1_RKi>
 8001822:	6178      	str	r0, [r7, #20]
				for(k=0;k<nChannels;k++)
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182c:	429a      	cmp	r2, r3
 800182e:	da25      	bge.n	800187c <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0xec>
					pBuffer[k]+=pSrcImage[(ii*width+j)*nChannels+k]*w;
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	4413      	add	r3, r2
 8001838:	ed93 6b00 	vldr	d6, [r3]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	fb03 f202 	mul.w	r2, r3, r2
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	4413      	add	r3, r2
 8001848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800184a:	fb03 f202 	mul.w	r2, r3, r2
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	ed93 5b00 	vldr	d5, [r3]
 800185c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001860:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	4413      	add	r3, r2
 800186c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001870:	ed83 7b00 	vstr	d7, [r3]
				for(k=0;k<nChannels;k++)
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	3301      	adds	r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
 800187a:	e7d5      	b.n	8001828 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0x98>
			for(l=-fsize;l<=fsize;l++)
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	3301      	adds	r3, #1
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001882:	e7b5      	b.n	80017f0 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0x60>
		for(j=0;j<width;j++)
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	3301      	adds	r3, #1
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
 800188a:	e79d      	b.n	80017c8 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0x38>
	for(i=0;i<height;i++)
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	3301      	adds	r3, #1
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
 8001892:	e793      	b.n	80017bc <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi+0x2c>
			}
		}
}
 8001894:	bf00      	nop
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <OV7670_Init>:
static uint8_t mtx_yuv[]={0x80, 0x80, 0x00, 0x22, 0x5E, 0x80};
static uint8_t mtx_rgb[]={0xB3, 0xB3, 0x00, 0x3D, 0xB0, 0xE4};


void OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c, LPTIM_HandleTypeDef *p_hlptim)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
	sp_hdcmi=p_hdcmi;
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <OV7670_Init+0x34>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi=p_hdma_dcmi;
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <OV7670_Init+0x38>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6013      	str	r3, [r2, #0]
	sp_hi2c=p_hi2c;
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <OV7670_Init+0x3c>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
	sp_hlptim=p_hlptim;
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <OV7670_Init+0x40>)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	240000c4 	.word	0x240000c4
 80018d4:	240000c8 	.word	0x240000c8
 80018d8:	240000cc 	.word	0x240000cc
 80018dc:	240000d0 	.word	0x240000d0

080018e0 <OV7670_Power>:

void OV7670_Power(uint8_t en)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	if(en)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <OV7670_Power+0x1e>
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <OV7670_Power+0x38>)
 80018f8:	f00b faf8 	bl	800ceec <HAL_GPIO_WritePin>
 80018fc:	e005      	b.n	800190a <OV7670_Power+0x2a>
	else
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <OV7670_Power+0x38>)
 8001906:	f00b faf1 	bl	800ceec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800190a:	2032      	movs	r0, #50	; 0x32
 800190c:	f007 fa0a 	bl	8008d24 <HAL_Delay>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58020c00 	.word	0x58020c00

0800191c <OV7670_ResetHW>:

void OV7670_ResetHW(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <OV7670_ResetHW+0x2c>)
 8001928:	f00b fae0 	bl	800ceec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800192c:	2032      	movs	r0, #50	; 0x32
 800192e:	f007 f9f9 	bl	8008d24 <HAL_Delay>
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <OV7670_ResetHW+0x2c>)
 800193a:	f00b fad7 	bl	800ceec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800193e:	2032      	movs	r0, #50	; 0x32
 8001940:	f007 f9f0 	bl	8008d24 <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58020c00 	.word	0x58020c00

0800194c <OV7670_XCLK>:

void OV7670_XCLK(uint8_t en)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	if(en)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <OV7670_XCLK+0x20>
		HAL_LPTIM_PWM_Start(sp_hlptim, 6,3);//6 3 8mhz
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <OV7670_XCLK+0x34>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2203      	movs	r2, #3
 8001962:	2106      	movs	r1, #6
 8001964:	4618      	mov	r0, r3
 8001966:	f00c f92f 	bl	800dbc8 <HAL_LPTIM_PWM_Start>
	else
		HAL_LPTIM_PWM_Stop(sp_hlptim);
}
 800196a:	e004      	b.n	8001976 <OV7670_XCLK+0x2a>
		HAL_LPTIM_PWM_Stop(sp_hlptim);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <OV7670_XCLK+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f00c f976 	bl	800dc62 <HAL_LPTIM_PWM_Stop>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	240000d0 	.word	0x240000d0

08001984 <OV7670_WriteSCCB>:

void OV7670_WriteSCCB(uint8_t regAddr, uint8_t val)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af02      	add	r7, sp, #8
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	4613      	mov	r3, r2
 8001992:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2]={regAddr, val};
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	733b      	strb	r3, [r7, #12]
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, (uint8_t *)txbuf, 2, OV7670_TIMEOUT);
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <OV7670_WriteSCCB+0x38>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f107 020c 	add.w	r2, r7, #12
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2302      	movs	r3, #2
 80019ac:	2142      	movs	r1, #66	; 0x42
 80019ae:	f00b fb61 	bl	800d074 <HAL_I2C_Master_Transmit>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	240000cc 	.word	0x240000cc

080019c0 <OV7670_ReadSCCB>:

void OV7670_ReadSCCB(uint8_t regAddr, uint8_t *data)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, OV7670_TIMEOUT);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <OV7670_ReadSCCB+0x3c>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	1dfa      	adds	r2, r7, #7
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	2142      	movs	r1, #66	; 0x42
 80019dc:	f00b fb4a 	bl	800d074 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, OV7670_TIMEOUT);
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <OV7670_ReadSCCB+0x3c>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	2142      	movs	r1, #66	; 0x42
 80019f0:	f00b fc34 	bl	800d25c <HAL_I2C_Master_Receive>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	240000cc 	.word	0x240000cc

08001a00 <OV7670_Start>:

void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <OV7670_Start+0x74>)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <OV7670_Start+0x78>)
 8001a16:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <OV7670_Start+0x74>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d112      	bne.n	8001a46 <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <OV7670_Start+0x7c>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <OV7670_Start+0x78>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <OV7670_Start+0x80>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <OV7670_Start+0x84>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da00      	bge.n	8001a3c <OV7670_Start+0x3c>
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	105b      	asrs	r3, r3, #1
 8001a3e:	2102      	movs	r1, #2
 8001a40:	f007 fba6 	bl	8009190 <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 8001a44:	e011      	b.n	8001a6a <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <OV7670_Start+0x7c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <OV7670_Start+0x78>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <OV7670_Start+0x80>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <OV7670_Start+0x84>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da00      	bge.n	8001a62 <OV7670_Start+0x62>
 8001a60:	3301      	adds	r3, #1
 8001a62:	105b      	asrs	r3, r3, #1
 8001a64:	2100      	movs	r1, #0
 8001a66:	f007 fb93 	bl	8009190 <HAL_DCMI_Start_DMA>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	240000d4 	.word	0x240000d4
 8001a78:	240000d8 	.word	0x240000d8
 8001a7c:	240000c4 	.word	0x240000c4
 8001a80:	24000000 	.word	0x24000000
 8001a84:	24000002 	.word	0x24000002

08001a88 <OV7670_ResetSW>:
{
	HAL_DCMI_Stop(sp_hdcmi);
}

void OV7670_ResetSW(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	OV7670_WriteSCCB(REG_COM7, 0x80);
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	2012      	movs	r0, #18
 8001a90:	f7ff ff78 	bl	8001984 <OV7670_WriteSCCB>
	HAL_Delay(30);
 8001a94:	201e      	movs	r0, #30
 8001a96:	f007 f945 	bl	8008d24 <HAL_Delay>
	OV7670_Config(defaults);
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <OV7670_ResetSW+0x24>)
 8001a9c:	f000 f808 	bl	8001ab0 <OV7670_Config>
	HAL_Delay(10);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f007 f93f 	bl	8008d24 <HAL_Delay>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	08015008 	.word	0x08015008

08001ab0 <OV7670_Config>:

void OV7670_Config(const uint8_t params[][2])
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e012      	b.n	8001ae4 <OV7670_Config+0x34>
	{
		OV7670_WriteSCCB(params[i][0], params[i][1]);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	7818      	ldrb	r0, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff ff56 	bl	8001984 <OV7670_WriteSCCB>
		HAL_Delay(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f007 f923 	bl	8008d24 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d1e5      	bne.n	8001abe <OV7670_Config+0xe>
	}
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <OV7670_SetBrightness>:

void OV7670_SetBrightness(uint8_t brightness)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	if(brightness>=127)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b7e      	cmp	r3, #126	; 0x7e
 8001b0a:	d903      	bls.n	8001b14 <OV7670_SetBrightness+0x18>
		brightness=brightness-127;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	3b7f      	subs	r3, #127	; 0x7f
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	e002      	b.n	8001b1a <OV7670_SetBrightness+0x1e>
	else
		brightness=255-brightness;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	71fb      	strb	r3, [r7, #7]

	OV7670_WriteSCCB(REG_BRIGHT, brightness);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2055      	movs	r0, #85	; 0x55
 8001b20:	f7ff ff30 	bl	8001984 <OV7670_WriteSCCB>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <OV7670_SetContrast>:

void OV7670_SetContrast(uint8_t contrast)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_CONTRAS, contrast);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2056      	movs	r0, #86	; 0x56
 8001b3c:	f7ff ff22 	bl	8001984 <OV7670_WriteSCCB>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <OV7670_SetSaturation>:

void OV7670_SetSaturation(uint8_t saturation)//0-100, default 80
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	float temp=0.0f;
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	saturation+=20;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	72fb      	strb	r3, [r7, #11]
 8001b62:	e03b      	b.n	8001bdc <OV7670_SetSaturation+0x94>
	{
		if(img_format==YUV422)temp=(float)mtx_yuv[i];
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <OV7670_SetSaturation+0xac>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <OV7670_SetSaturation+0x38>
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <OV7670_SetSaturation+0xb0>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7a:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b7e:	e008      	b.n	8001b92 <OV7670_SetSaturation+0x4a>
		else temp=(float)mtx_rgb[i];
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <OV7670_SetSaturation+0xb4>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	edc7 7a03 	vstr	s15, [r7, #12]
		temp*=saturation;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	edc7 7a03 	vstr	s15, [r7, #12]
		temp/=100;
 8001ba8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bac:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c00 <OV7670_SetSaturation+0xb8>
 8001bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb4:	edc7 7a03 	vstr	s15, [r7, #12]
		OV7670_WriteSCCB(REG_MTX1+i, (uint8_t)temp);
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	334f      	adds	r3, #79	; 0x4f
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	edc7 7a00 	vstr	s15, [r7]
 8001bca:	783a      	ldrb	r2, [r7, #0]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fed7 	bl	8001984 <OV7670_WriteSCCB>
	for(i=0;i<6;i++)
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	72fb      	strb	r3, [r7, #11]
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d9c0      	bls.n	8001b64 <OV7670_SetSaturation+0x1c>
	}
	OV7670_WriteSCCB(REG_MTX_SIGN, 0x9E);
 8001be2:	219e      	movs	r1, #158	; 0x9e
 8001be4:	2058      	movs	r0, #88	; 0x58
 8001be6:	f7ff fecd 	bl	8001984 <OV7670_WriteSCCB>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	240000dc 	.word	0x240000dc
 8001bf8:	24000004 	.word	0x24000004
 8001bfc:	2400000c 	.word	0x2400000c
 8001c00:	42c80000 	.word	0x42c80000

08001c04 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	f200 808f 	bhi.w	8001d34 <OV7670_SetResolution+0x130>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <OV7670_SetResolution+0x18>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c39 	.word	0x08001c39
 8001c20:	08001c5f 	.word	0x08001c5f
 8001c24:	08001c83 	.word	0x08001c83
 8001c28:	08001ca5 	.word	0x08001ca5
 8001c2c:	08001cc7 	.word	0x08001cc7
 8001c30:	08001ced 	.word	0x08001ced
 8001c34:	08001d11 	.word	0x08001d11
	{
		case VGA:	//NOT TESTED
			OV7670_Config(RES_VGA);
 8001c38:	4840      	ldr	r0, [pc, #256]	; (8001d3c <OV7670_SetResolution+0x138>)
 8001c3a:	f7ff ff39 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(158,14,10,490);
 8001c3e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8001c42:	220a      	movs	r2, #10
 8001c44:	210e      	movs	r1, #14
 8001c46:	209e      	movs	r0, #158	; 0x9e
 8001c48:	f000 fd2a 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=640;
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001c4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c52:	801a      	strh	r2, [r3, #0]
			img_height=480;
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001c56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c5a:	801a      	strh	r2, [r3, #0]
			break;
 8001c5c:	e06a      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 8001c5e:	483a      	ldr	r0, [pc, #232]	; (8001d48 <OV7670_SetResolution+0x144>)
 8001c60:	f7ff ff26 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 8001c64:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001c68:	220c      	movs	r2, #12
 8001c6a:	2118      	movs	r1, #24
 8001c6c:	20a8      	movs	r0, #168	; 0xa8
 8001c6e:	f000 fd17 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=320;
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001c74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c78:	801a      	strh	r2, [r3, #0]
			img_height=240;
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001c7c:	22f0      	movs	r2, #240	; 0xf0
 8001c7e:	801a      	strh	r2, [r3, #0]
			break;
 8001c80:	e058      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 8001c82:	4832      	ldr	r0, [pc, #200]	; (8001d4c <OV7670_SetResolution+0x148>)
 8001c84:	f7ff ff14 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 8001c88:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	211e      	movs	r1, #30
 8001c90:	20ae      	movs	r0, #174	; 0xae
 8001c92:	f000 fd05 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=160;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001c98:	22a0      	movs	r2, #160	; 0xa0
 8001c9a:	801a      	strh	r2, [r3, #0]
			img_height=120;
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001c9e:	2278      	movs	r2, #120	; 0x78
 8001ca0:	801a      	strh	r2, [r3, #0]
			break;
 8001ca2:	e047      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 8001ca4:	482a      	ldr	r0, [pc, #168]	; (8001d50 <OV7670_SetResolution+0x14c>)
 8001ca6:	f7ff ff03 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 8001caa:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001cae:	220c      	movs	r2, #12
 8001cb0:	2134      	movs	r1, #52	; 0x34
 8001cb2:	20c4      	movs	r0, #196	; 0xc4
 8001cb4:	f000 fcf4 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=80;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001cba:	2250      	movs	r2, #80	; 0x50
 8001cbc:	801a      	strh	r2, [r3, #0]
			img_height=60;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001cc0:	223c      	movs	r2, #60	; 0x3c
 8001cc2:	801a      	strh	r2, [r3, #0]
			break;
 8001cc4:	e036      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 8001cc6:	4823      	ldr	r0, [pc, #140]	; (8001d54 <OV7670_SetResolution+0x150>)
 8001cc8:	f7ff fef2 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8001ccc:	f240 13e9 	movw	r3, #489	; 0x1e9
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	215e      	movs	r1, #94	; 0x5e
 8001cd4:	20ae      	movs	r0, #174	; 0xae
 8001cd6:	f000 fce3 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=352;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001cdc:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8001ce0:	801a      	strh	r2, [r3, #0]
			img_height=288;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001ce4:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001ce8:	801a      	strh	r2, [r3, #0]
			break;
 8001cea:	e023      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8001cec:	481a      	ldr	r0, [pc, #104]	; (8001d58 <OV7670_SetResolution+0x154>)
 8001cee:	f7ff fedf 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 8001cf2:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	2116      	movs	r1, #22
 8001cfa:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 8001cfe:	f000 fccf 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=176;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001d04:	22b0      	movs	r2, #176	; 0xb0
 8001d06:	801a      	strh	r2, [r3, #0]
			img_height=144;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001d0a:	2290      	movs	r2, #144	; 0x90
 8001d0c:	801a      	strh	r2, [r3, #0]
			break;
 8001d0e:	e011      	b.n	8001d34 <OV7670_SetResolution+0x130>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <OV7670_SetResolution+0x158>)
 8001d12:	f7ff fecd 	bl	8001ab0 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 8001d16:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	212a      	movs	r1, #42	; 0x2a
 8001d1e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8001d22:	f000 fcbd 	bl	80026a0 <OV7670_SetFrameControl>
			img_width=88;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <OV7670_SetResolution+0x13c>)
 8001d28:	2258      	movs	r2, #88	; 0x58
 8001d2a:	801a      	strh	r2, [r3, #0]
			img_height=72;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <OV7670_SetResolution+0x140>)
 8001d2e:	2248      	movs	r2, #72	; 0x48
 8001d30:	801a      	strh	r2, [r3, #0]
			break;
 8001d32:	bf00      	nop
	}
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	08014f98 	.word	0x08014f98
 8001d40:	24000000 	.word	0x24000000
 8001d44:	24000002 	.word	0x24000002
 8001d48:	08014fa8 	.word	0x08014fa8
 8001d4c:	08014fb8 	.word	0x08014fb8
 8001d50:	08014fc8 	.word	0x08014fc8
 8001d54:	08014fd8 	.word	0x08014fd8
 8001d58:	08014fe8 	.word	0x08014fe8
 8001d5c:	08014ff8 	.word	0x08014ff8

08001d60 <OV7670_SetColorFormat>:

void OV7670_SetColorFormat(Camera_format format)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_ReadSCCB(REG_COM7, &temp[0]);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	2012      	movs	r0, #18
 8001d72:	f7ff fe25 	bl	80019c0 <OV7670_ReadSCCB>
	temp[0]&=0b11111010;
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	f023 0305 	bic.w	r3, r3, #5
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	733b      	strb	r3, [r7, #12]
	OV7670_ReadSCCB(REG_COM15, &temp[1]);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	3301      	adds	r3, #1
 8001d86:	4619      	mov	r1, r3
 8001d88:	2040      	movs	r0, #64	; 0x40
 8001d8a:	f7ff fe19 	bl	80019c0 <OV7670_ReadSCCB>
	temp[1]&=0b00001111;
 8001d8e:	7b7b      	ldrb	r3, [r7, #13]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8001d98:	200a      	movs	r0, #10
 8001d9a:	f006 ffc3 	bl	8008d24 <HAL_Delay>
	switch(format)
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <OV7670_SetColorFormat+0x4a>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d00e      	beq.n	8001dc6 <OV7670_SetColorFormat+0x66>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
			//???
			img_format=RGB565;
			break;
	}
}
 8001da8:	e021      	b.n	8001dee <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x00);
 8001daa:	7b3b      	ldrb	r3, [r7, #12]
 8001dac:	4619      	mov	r1, r3
 8001dae:	2012      	movs	r0, #18
 8001db0:	f7ff fde8 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x00);
 8001db4:	7b7b      	ldrb	r3, [r7, #13]
 8001db6:	4619      	mov	r1, r3
 8001db8:	2040      	movs	r0, #64	; 0x40
 8001dba:	f7ff fde3 	bl	8001984 <OV7670_WriteSCCB>
			img_format=YUV422;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <OV7670_SetColorFormat+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			break;
 8001dc4:	e013      	b.n	8001dee <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x04);//RGB
 8001dc6:	7b3b      	ldrb	r3, [r7, #12]
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	2012      	movs	r0, #18
 8001dd2:	f7ff fdd7 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
 8001dd6:	7b7b      	ldrb	r3, [r7, #13]
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	2040      	movs	r0, #64	; 0x40
 8001de2:	f7ff fdcf 	bl	8001984 <OV7670_WriteSCCB>
			img_format=RGB565;
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <OV7670_SetColorFormat+0x98>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
			break;
 8001dec:	bf00      	nop
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	240000dc 	.word	0x240000dc

08001dfc <OV7670_AutoExposureMode>:

void OV7670_AutoExposureMode(Camera_state en)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001e0a:	f107 030f 	add.w	r3, r7, #15
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2013      	movs	r0, #19
 8001e12:	f7ff fdd5 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <OV7670_AutoExposureMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x01);	//enable AEC
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	2013      	movs	r0, #19
 8001e28:	f7ff fdac 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
}
 8001e2c:	e007      	b.n	8001e3e <OV7670_AutoExposureMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	2013      	movs	r0, #19
 8001e3a:	f7ff fda3 	bl	8001984 <OV7670_WriteSCCB>
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <OV7670_SetAECAlgorithm>:

void OV7670_SetAECAlgorithm(Camera_algorithm algorithm)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_HAECC7, &temp);
 8001e54:	f107 030f 	add.w	r3, r7, #15
 8001e58:	4619      	mov	r1, r3
 8001e5a:	20aa      	movs	r0, #170	; 0xaa
 8001e5c:	f7ff fdb0 	bl	80019c0 <OV7670_ReadSCCB>

	if(algorithm)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <OV7670_SetAECAlgorithm+0x32>

		OV7670_WriteSCCB(REG_HAECC7, temp | 0x80);// Histogram-based
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	20aa      	movs	r0, #170	; 0xaa
 8001e72:	f7ff fd87 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
}
 8001e76:	e007      	b.n	8001e88 <OV7670_SetAECAlgorithm+0x42>
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	20aa      	movs	r0, #170	; 0xaa
 8001e84:	f7ff fd7e 	bl	8001984 <OV7670_WriteSCCB>
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <OV7670_SetExposureTime>:

void OV7670_SetExposureTime(uint16_t time) //AEC must be off
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
	OV7670_WriteSCCB(REG_AECHH, (time>>10) & 0x3F);
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	0a9b      	lsrs	r3, r3, #10
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	2007      	movs	r0, #7
 8001eac:	f7ff fd6a 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_AECH, (time>>2) & 0xFF);
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff fd62 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_COM1, (time) & 0x03);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	2004      	movs	r0, #4
 8001ece:	f7ff fd59 	bl	8001984 <OV7670_WriteSCCB>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <OV7670_SetGainCeiling>:

void OV7670_SetGainCeiling(Camera_gain value)//value 0-6 [2x-128x]
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM9, &temp);
 8001ee8:	f107 030f 	add.w	r3, r7, #15
 8001eec:	4619      	mov	r1, r3
 8001eee:	2014      	movs	r0, #20
 8001ef0:	f7ff fd66 	bl	80019c0 <OV7670_ReadSCCB>
	temp&=0x8F;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_COM9, temp | (value<<4));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	b25a      	sxtb	r2, r3
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2014      	movs	r0, #20
 8001f12:	f7ff fd37 	bl	8001984 <OV7670_WriteSCCB>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <OV7670_AutoGainMode>:

void OV7670_AutoGainMode(Camera_state en)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001f2c:	f107 030f 	add.w	r3, r7, #15
 8001f30:	4619      	mov	r1, r3
 8001f32:	2013      	movs	r0, #19
 8001f34:	f7ff fd44 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <OV7670_AutoGainMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x04); //enable AGC
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4619      	mov	r1, r3
 8001f48:	2013      	movs	r0, #19
 8001f4a:	f7ff fd1b 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
}
 8001f4e:	e007      	b.n	8001f60 <OV7670_AutoGainMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2013      	movs	r0, #19
 8001f5c:	f7ff fd12 	bl	8001984 <OV7670_WriteSCCB>
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <OV7670_SetGain>:

void OV7670_SetGain(uint8_t gain)//value 0-7 [1x-128x], AGC must be off
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_VREF, &temp);
 8001f76:	f107 030f 	add.w	r3, r7, #15
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f7ff fd1f 	bl	80019c0 <OV7670_ReadSCCB>
	temp&=0x3F;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]

	//According to OV7670/7171 implementation guide v1.0 - Table 4-1
	switch(gain)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d86b      	bhi.n	800206a <OV7670_SetGain+0x102>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <OV7670_SetGain+0x30>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fb9 	.word	0x08001fb9
 8001f9c:	08001fcd 	.word	0x08001fcd
 8001fa0:	08001fe1 	.word	0x08001fe1
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08002009 	.word	0x08002009
 8001fac:	0800201d 	.word	0x0800201d
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002051 	.word	0x08002051
	{
		case 0: //1x
			OV7670_WriteSCCB(REG_GAIN, 0x00);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fce2 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f7ff fcdd 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8001fca:	e04e      	b.n	800206a <OV7670_SetGain+0x102>
		case 1: //2x
			OV7670_WriteSCCB(REG_GAIN, 0x10);
 8001fcc:	2110      	movs	r1, #16
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fcd8 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7ff fcd3 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8001fde:	e044      	b.n	800206a <OV7670_SetGain+0x102>
		case 2: //4x
			OV7670_WriteSCCB(REG_GAIN, 0x30);
 8001fe0:	2130      	movs	r1, #48	; 0x30
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff fcce 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	4619      	mov	r1, r3
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7ff fcc9 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8001ff2:	e03a      	b.n	800206a <OV7670_SetGain+0x102>
		case 3: //8x
			OV7670_WriteSCCB(REG_GAIN, 0x70);
 8001ff4:	2170      	movs	r1, #112	; 0x70
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff fcc4 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2003      	movs	r0, #3
 8002002:	f7ff fcbf 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002006:	e030      	b.n	800206a <OV7670_SetGain+0x102>
		case 4: //16x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8002008:	21f0      	movs	r1, #240	; 0xf0
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff fcba 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	4619      	mov	r1, r3
 8002014:	2003      	movs	r0, #3
 8002016:	f7ff fcb5 	bl	8001984 <OV7670_WriteSCCB>
			break;
 800201a:	e026      	b.n	800206a <OV7670_SetGain+0x102>
		case 5: //32x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 800201c:	21f0      	movs	r1, #240	; 0xf0
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fcb0 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x40);
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	2003      	movs	r0, #3
 8002030:	f7ff fca8 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002034:	e019      	b.n	800206a <OV7670_SetGain+0x102>
		case 6: //64x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8002036:	21f0      	movs	r1, #240	; 0xf0
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fca3 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	2003      	movs	r0, #3
 800204a:	f7ff fc9b 	bl	8001984 <OV7670_WriteSCCB>
			break;
 800204e:	e00c      	b.n	800206a <OV7670_SetGain+0x102>
		case 7: //~128x
			OV7670_WriteSCCB(REG_GAIN, 0xFF);
 8002050:	21ff      	movs	r1, #255	; 0xff
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff fc96 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4619      	mov	r1, r3
 8002062:	2003      	movs	r0, #3
 8002064:	f7ff fc8e 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002068:	bf00      	nop
	}
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop

08002074 <OV7670_AutoWhiteBalanceMode>:

void OV7670_AutoWhiteBalanceMode(Camera_state en)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8002082:	f107 030f 	add.w	r3, r7, #15
 8002086:	4619      	mov	r1, r3
 8002088:	2013      	movs	r0, #19
 800208a:	f7ff fc99 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <OV7670_AutoWhiteBalanceMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x02); //enable AWB
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4619      	mov	r1, r3
 800209e:	2013      	movs	r0, #19
 80020a0:	f7ff fc70 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
}
 80020a4:	e007      	b.n	80020b6 <OV7670_AutoWhiteBalanceMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	2013      	movs	r0, #19
 80020b2:	f7ff fc67 	bl	8001984 <OV7670_WriteSCCB>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <OV7670_SetChannelsGain>:

void OV7670_SetChannelsGain(uint8_t r_ch, uint8_t g_ch, uint8_t b_ch) //AWB must be off
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	460b      	mov	r3, r1
 80020ca:	71bb      	strb	r3, [r7, #6]
 80020cc:	4613      	mov	r3, r2
 80020ce:	717b      	strb	r3, [r7, #5]
	OV7670_WriteSCCB(REG_RED, r_ch);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4619      	mov	r1, r3
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fc55 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_GGAIN, g_ch);
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	4619      	mov	r1, r3
 80020de:	206a      	movs	r0, #106	; 0x6a
 80020e0:	f7ff fc50 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_BLUE, b_ch);
 80020e4:	797b      	ldrb	r3, [r7, #5]
 80020e6:	4619      	mov	r1, r3
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff fc4b 	bl	8001984 <OV7670_WriteSCCB>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <OV7670_ShowColorBar>:

void OV7670_ShowColorBar(Camera_state en)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM17, &temp);
 8002104:	f107 030f 	add.w	r3, r7, #15
 8002108:	4619      	mov	r1, r3
 800210a:	2042      	movs	r0, #66	; 0x42
 800210c:	f7ff fc58 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <OV7670_ShowColorBar+0x32>
		OV7670_WriteSCCB(REG_COM17, temp | 0x08);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	2042      	movs	r0, #66	; 0x42
 8002122:	f7ff fc2f 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
}
 8002126:	e007      	b.n	8002138 <OV7670_ShowColorBar+0x42>
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f023 0308 	bic.w	r3, r3, #8
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	2042      	movs	r0, #66	; 0x42
 8002134:	f7ff fc26 	bl	8001984 <OV7670_WriteSCCB>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <OV7670_FlipHorizontal>:

void OV7670_FlipHorizontal(Camera_state flipH)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 800214e:	f107 030f 	add.w	r3, r7, #15
 8002152:	4619      	mov	r1, r3
 8002154:	201e      	movs	r0, #30
 8002156:	f7ff fc33 	bl	80019c0 <OV7670_ReadSCCB>

	if(flipH)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <OV7670_FlipHorizontal+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x20);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f043 0320 	orr.w	r3, r3, #32
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	201e      	movs	r0, #30
 800216c:	f7ff fc0a 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
}
 8002170:	e007      	b.n	8002182 <OV7670_FlipHorizontal+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	f023 0320 	bic.w	r3, r3, #32
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4619      	mov	r1, r3
 800217c:	201e      	movs	r0, #30
 800217e:	f7ff fc01 	bl	8001984 <OV7670_WriteSCCB>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <OV7670_FlipVertical>:

void OV7670_FlipVertical(Camera_state flipV)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8002198:	f107 030f 	add.w	r3, r7, #15
 800219c:	4619      	mov	r1, r3
 800219e:	201e      	movs	r0, #30
 80021a0:	f7ff fc0e 	bl	80019c0 <OV7670_ReadSCCB>

	if(flipV)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <OV7670_FlipVertical+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x10);
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	f043 0310 	orr.w	r3, r3, #16
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	201e      	movs	r0, #30
 80021b6:	f7ff fbe5 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
}
 80021ba:	e007      	b.n	80021cc <OV7670_FlipVertical+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	f023 0310 	bic.w	r3, r3, #16
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	201e      	movs	r0, #30
 80021c8:	f7ff fbdc 	bl	8001984 <OV7670_WriteSCCB>
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <OV7670_NightMode>:

void OV7670_NightMode(Camera_state en,	Camera_fps min_fps)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM11, &temp);
 80021e8:	f107 030f 	add.w	r3, r7, #15
 80021ec:	4619      	mov	r1, r3
 80021ee:	203b      	movs	r0, #59	; 0x3b
 80021f0:	f7ff fbe6 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d011      	beq.n	800221e <OV7670_NightMode+0x4a>
	{
		temp|=(min_fps<<5);
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	b25a      	sxtb	r2, r3
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	b25b      	sxtb	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b25b      	sxtb	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	73fb      	strb	r3, [r7, #15]
		OV7670_WriteSCCB(REG_COM11, temp | 0x80);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	203b      	movs	r0, #59	; 0x3b
 8002218:	f7ff fbb4 	bl	8001984 <OV7670_WriteSCCB>
	}
	else
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
}
 800221c:	e007      	b.n	800222e <OV7670_NightMode+0x5a>
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	203b      	movs	r0, #59	; 0x3b
 800222a:	f7ff fbab 	bl	8001984 <OV7670_WriteSCCB>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <OV7670_AutoSharpness>:

void OV7670_AutoSharpness(Camera_state en)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8002244:	f107 030f 	add.w	r3, r7, #15
 8002248:	4619      	mov	r1, r3
 800224a:	2041      	movs	r0, #65	; 0x41
 800224c:	f7ff fbb8 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <OV7670_AutoSharpness+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x20);// enable Auto Sharpness
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	2041      	movs	r0, #65	; 0x41
 8002262:	f7ff fb8f 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
}
 8002266:	e007      	b.n	8002278 <OV7670_AutoSharpness+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	f023 0320 	bic.w	r3, r3, #32
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	2041      	movs	r0, #65	; 0x41
 8002274:	f7ff fb86 	bl	8001984 <OV7670_WriteSCCB>
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <OV7670_SetSharpness>:

void OV7670_SetSharpness(uint8_t sharpness)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_EDGE, &temp);
 800228e:	f107 030f 	add.w	r3, r7, #15
 8002292:	4619      	mov	r1, r3
 8002294:	203f      	movs	r0, #63	; 0x3f
 8002296:	f7ff fb93 	bl	80019c0 <OV7670_ReadSCCB>
	temp&=0xE0;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	f023 031f 	bic.w	r3, r3, #31
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_EDGE, temp | sharpness);
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	203f      	movs	r0, #63	; 0x3f
 80022b0:	f7ff fb68 	bl	8001984 <OV7670_WriteSCCB>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <OV7670_AutoDeNoise>:

void OV7670_AutoDeNoise(Camera_state en)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 80022ca:	f107 030f 	add.w	r3, r7, #15
 80022ce:	4619      	mov	r1, r3
 80022d0:	2041      	movs	r0, #65	; 0x41
 80022d2:	f7ff fb75 	bl	80019c0 <OV7670_ReadSCCB>

	if(en)
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <OV7670_AutoDeNoise+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x10);// enable Auto Sharpness
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	2041      	movs	r0, #65	; 0x41
 80022e8:	f7ff fb4c 	bl	8001984 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
}
 80022ec:	e007      	b.n	80022fe <OV7670_AutoDeNoise+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	f023 0310 	bic.w	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	2041      	movs	r0, #65	; 0x41
 80022fa:	f7ff fb43 	bl	8001984 <OV7670_WriteSCCB>
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <OV7670_SetDeNoiseStrength>:

void OV7670_SetDeNoiseStrength(uint8_t strength)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_DNSTH, strength);
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4619      	mov	r1, r3
 8002314:	204c      	movs	r0, #76	; 0x4c
 8002316:	f7ff fb35 	bl	8001984 <OV7670_WriteSCCB>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <OV7670_BandingFilter>:

void OV7670_BandingFilter(Camera_state en, Camera_filter filter)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	460a      	mov	r2, r1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	4613      	mov	r3, r2
 8002330:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8002336:	f107 030f 	add.w	r3, r7, #15
 800233a:	4619      	mov	r1, r3
 800233c:	2013      	movs	r0, #19
 800233e:	f7ff fb3f 	bl	80019c0 <OV7670_ReadSCCB>
	if(en)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03f      	beq.n	80023c8 <OV7670_BandingFilter+0xa6>
	{
		OV7670_WriteSCCB(REG_BD50ST, BF_50Hz_VALUE); //50Hz banding filter
 8002348:	21cc      	movs	r1, #204	; 0xcc
 800234a:	209d      	movs	r0, #157	; 0x9d
 800234c:	f7ff fb1a 	bl	8001984 <OV7670_WriteSCCB>
		OV7670_WriteSCCB(REG_BD60ST, BF_60Hz_VALUE); //60Hz banding filter
 8002350:	21aa      	movs	r1, #170	; 0xaa
 8002352:	209e      	movs	r0, #158	; 0x9e
 8002354:	f7ff fb16 	bl	8001984 <OV7670_WriteSCCB>

		OV7670_WriteSCCB(REG_COM8, temp | 0x20); //banding filter enable
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	2013      	movs	r0, #19
 8002364:	f7ff fb0e 	bl	8001984 <OV7670_WriteSCCB>

		OV7670_ReadSCCB(REG_COM11, &temp);
 8002368:	f107 030f 	add.w	r3, r7, #15
 800236c:	4619      	mov	r1, r3
 800236e:	203b      	movs	r0, #59	; 0x3b
 8002370:	f7ff fb26 	bl	80019c0 <OV7670_ReadSCCB>
		temp&=0xE7;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	f023 0318 	bic.w	r3, r3, #24
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]
		switch(filter)
 800237e:	79bb      	ldrb	r3, [r7, #6]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d018      	beq.n	80023b6 <OV7670_BandingFilter+0x94>
 8002384:	2b02      	cmp	r3, #2
 8002386:	dc28      	bgt.n	80023da <OV7670_BandingFilter+0xb8>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <OV7670_BandingFilter+0x70>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d009      	beq.n	80023a4 <OV7670_BandingFilter+0x82>
				break;
		}
	}
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
}
 8002390:	e023      	b.n	80023da <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x0A);
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f043 030a 	orr.w	r3, r3, #10
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	203b      	movs	r0, #59	; 0x3b
 800239e:	f7ff faf1 	bl	8001984 <OV7670_WriteSCCB>
				break;
 80023a2:	e01a      	b.n	80023da <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x02);
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	203b      	movs	r0, #59	; 0x3b
 80023b0:	f7ff fae8 	bl	8001984 <OV7670_WriteSCCB>
				break;
 80023b4:	e011      	b.n	80023da <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x12);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	f043 0312 	orr.w	r3, r3, #18
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	203b      	movs	r0, #59	; 0x3b
 80023c2:	f7ff fadf 	bl	8001984 <OV7670_WriteSCCB>
				break;
 80023c6:	e008      	b.n	80023da <OV7670_BandingFilter+0xb8>
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	f023 0320 	bic.w	r3, r3, #32
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4619      	mov	r1, r3
 80023d2:	2013      	movs	r0, #19
 80023d4:	f7ff fad6 	bl	8001984 <OV7670_WriteSCCB>
}
 80023d8:	e7ff      	b.n	80023da <OV7670_BandingFilter+0xb8>
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <OV7670_SpecialEffect>:

void OV7670_SpecialEffect(Camera_effect effect)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_TSLB, &temp);
 80023f2:	f107 030f 	add.w	r3, r7, #15
 80023f6:	4619      	mov	r1, r3
 80023f8:	203a      	movs	r0, #58	; 0x3a
 80023fa:	f7ff fae1 	bl	80019c0 <OV7670_ReadSCCB>
	temp&=0xCB;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	f023 0334 	bic.w	r3, r3, #52	; 0x34
 8002404:	b2db      	uxtb	r3, r3
 8002406:	73fb      	strb	r3, [r7, #15]

	switch(effect)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	2b07      	cmp	r3, #7
 800240c:	f200 808c 	bhi.w	8002528 <OV7670_SpecialEffect+0x144>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <OV7670_SpecialEffect+0x34>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	08002439 	.word	0x08002439
 800241c:	0800244b 	.word	0x0800244b
 8002420:	0800246d 	.word	0x0800246d
 8002424:	0800248f 	.word	0x0800248f
 8002428:	080024a1 	.word	0x080024a1
 800242c:	080024c3 	.word	0x080024c3
 8002430:	080024e5 	.word	0x080024e5
 8002434:	08002507 	.word	0x08002507
	{
		case NORMAL:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x04);
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	203a      	movs	r0, #58	; 0x3a
 8002444:	f7ff fa9e 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002448:	e06e      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case ANTIQUE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	f043 0314 	orr.w	r3, r3, #20
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	203a      	movs	r0, #58	; 0x3a
 8002456:	f7ff fa95 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xA0);
 800245a:	21a0      	movs	r1, #160	; 0xa0
 800245c:	2067      	movs	r0, #103	; 0x67
 800245e:	f7ff fa91 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 8002462:	2140      	movs	r1, #64	; 0x40
 8002464:	2068      	movs	r0, #104	; 0x68
 8002466:	f7ff fa8d 	bl	8001984 <OV7670_WriteSCCB>
			break;
 800246a:	e05d      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case BW:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	f043 0314 	orr.w	r3, r3, #20
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	203a      	movs	r0, #58	; 0x3a
 8002478:	f7ff fa84 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	2067      	movs	r0, #103	; 0x67
 8002480:	f7ff fa80 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	2068      	movs	r0, #104	; 0x68
 8002488:	f7ff fa7c 	bl	8001984 <OV7670_WriteSCCB>
			break;
 800248c:	e04c      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x24);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	203a      	movs	r0, #58	; 0x3a
 800249a:	f7ff fa73 	bl	8001984 <OV7670_WriteSCCB>
			break;
 800249e:	e043      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case BW_NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x34);
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	203a      	movs	r0, #58	; 0x3a
 80024ac:	f7ff fa6a 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	2067      	movs	r0, #103	; 0x67
 80024b4:	f7ff fa66 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	2068      	movs	r0, #104	; 0x68
 80024bc:	f7ff fa62 	bl	8001984 <OV7670_WriteSCCB>
			break;
 80024c0:	e032      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case BLUISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	f043 0314 	orr.w	r3, r3, #20
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	203a      	movs	r0, #58	; 0x3a
 80024ce:	f7ff fa59 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	2067      	movs	r0, #103	; 0x67
 80024d6:	f7ff fa55 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0xC0);
 80024da:	21c0      	movs	r1, #192	; 0xc0
 80024dc:	2068      	movs	r0, #104	; 0x68
 80024de:	f7ff fa51 	bl	8001984 <OV7670_WriteSCCB>
			break;
 80024e2:	e021      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case GREENISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	f043 0314 	orr.w	r3, r3, #20
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	203a      	movs	r0, #58	; 0x3a
 80024f0:	f7ff fa48 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x40);
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	2067      	movs	r0, #103	; 0x67
 80024f8:	f7ff fa44 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	2068      	movs	r0, #104	; 0x68
 8002500:	f7ff fa40 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002504:	e010      	b.n	8002528 <OV7670_SpecialEffect+0x144>
		case REDDISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	f043 0314 	orr.w	r3, r3, #20
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	203a      	movs	r0, #58	; 0x3a
 8002512:	f7ff fa37 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xC0);
 8002516:	21c0      	movs	r1, #192	; 0xc0
 8002518:	2067      	movs	r0, #103	; 0x67
 800251a:	f7ff fa33 	bl	8001984 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	2068      	movs	r0, #104	; 0x68
 8002522:	f7ff fa2f 	bl	8001984 <OV7670_WriteSCCB>
			break;
 8002526:	bf00      	nop
	}
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <OV7670_SetFrameRate>:

void OV7670_SetFrameRate(uint8_t div, uint8_t mul)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	460a      	mov	r2, r1
 800253a:	71fb      	strb	r3, [r7, #7]
 800253c:	4613      	mov	r3, r2
 800253e:	71bb      	strb	r3, [r7, #6]
	OV7670_WriteSCCB(REG_CLKRC, 0x80 | div);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4619      	mov	r1, r3
 800254a:	2011      	movs	r0, #17
 800254c:	f7ff fa1a 	bl	8001984 <OV7670_WriteSCCB>
	HAL_Delay(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f006 fbe7 	bl	8008d24 <HAL_Delay>
	OV7670_WriteSCCB(REG_DBLV, 0x08 | mul);
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4619      	mov	r1, r3
 8002560:	206b      	movs	r0, #107	; 0x6b
 8002562:	f7ff fa0f 	bl	8001984 <OV7670_WriteSCCB>
	HAL_Delay(1);
 8002566:	2001      	movs	r0, #1
 8002568:	f006 fbdc 	bl	8008d24 <HAL_Delay>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <OV7670_PowerUp>:
	OV7670_XCLK(OFF);
	OV7670_Power(OFF);
}

void OV7670_PowerUp(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	OV7670_Power(ON);
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff f9b1 	bl	80018e0 <OV7670_Power>
	OV7670_XCLK(ON);
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff f9e4 	bl	800194c <OV7670_XCLK>
	OV7670_ResetHW();
 8002584:	f7ff f9ca 	bl	800191c <OV7670_ResetHW>
	OV7670_ResetSW();
 8002588:	f7ff fa7e 	bl	8001a88 <OV7670_ResetSW>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <OV7670_UpdateSettings>:

void OV7670_UpdateSettings(Camera_settings OV7670)
{
 8002590:	b084      	sub	sp, #16
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
 8002596:	f107 0c08 	add.w	ip, r7, #8
 800259a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	OV7670_SetResolution(OV7670.resolution);
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fb2f 	bl	8001c04 <OV7670_SetResolution>

	if(OV7670.format) OV7670_SetColorFormat(RGB565);
 80025a6:	7a7b      	ldrb	r3, [r7, #9]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <OV7670_UpdateSettings+0x24>
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff fbd7 	bl	8001d60 <OV7670_SetColorFormat>
 80025b2:	e002      	b.n	80025ba <OV7670_UpdateSettings+0x2a>
	else OV7670_SetColorFormat(YUV422);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fbd3 	bl	8001d60 <OV7670_SetColorFormat>

	OV7670_SpecialEffect(OV7670.effect);
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff11 	bl	80023e4 <OV7670_SpecialEffect>
	OV7670_AutoExposureMode(OV7670.AEC);
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc19 	bl	8001dfc <OV7670_AutoExposureMode>
	if(!OV7670.AEC) OV7670_SetExposureTime(OV7670.exposure);
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <OV7670_UpdateSettings+0x48>
 80025d0:	8b3b      	ldrh	r3, [r7, #24]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fc5c 	bl	8001e90 <OV7670_SetExposureTime>
	OV7670_SetAECAlgorithm(OV7670.algorithm);
 80025d8:	7d7b      	ldrb	r3, [r7, #21]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc33 	bl	8001e46 <OV7670_SetAECAlgorithm>

	OV7670_AutoGainMode(OV7670.AGC);
 80025e0:	7b3b      	ldrb	r3, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fc9b 	bl	8001f1e <OV7670_AutoGainMode>
	if(!OV7670.AGC) OV7670_SetGain(OV7670.gain);
 80025e8:	7b3b      	ldrb	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <OV7670_UpdateSettings+0x66>
 80025ee:	7ebb      	ldrb	r3, [r7, #26]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fcb9 	bl	8001f68 <OV7670_SetGain>

	OV7670_AutoWhiteBalanceMode(OV7670.AWB);
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fd3b 	bl	8002074 <OV7670_AutoWhiteBalanceMode>
	if(!OV7670.AWB) OV7670_SetChannelsGain(OV7670.rch_gain, OV7670.gch_gain, OV7670.bch_gain);
 80025fe:	7b7b      	ldrb	r3, [r7, #13]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <OV7670_UpdateSettings+0x86>
 8002604:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002608:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800260c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fd54 	bl	80020be <OV7670_SetChannelsGain>

	OV7670_SetBrightness(OV7670.brightness);
 8002616:	7efb      	ldrb	r3, [r7, #27]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fa6f 	bl	8001afc <OV7670_SetBrightness>
	OV7670_SetContrast(OV7670.contrast);
 800261e:	7f3b      	ldrb	r3, [r7, #28]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fa83 	bl	8001b2c <OV7670_SetContrast>
	OV7670_SetSaturation(OV7670.saturation);
 8002626:	7f7b      	ldrb	r3, [r7, #29]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fa8d 	bl	8001b48 <OV7670_SetSaturation>

	OV7670_AutoSharpness(OV7670.ASC);
 800262e:	7cbb      	ldrb	r3, [r7, #18]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fe00 	bl	8002236 <OV7670_AutoSharpness>
	if(!OV7670.ASC) OV7670_SetSharpness(OV7670.sharpness);
 8002636:	7cbb      	ldrb	r3, [r7, #18]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <OV7670_UpdateSettings+0xb4>
 800263c:	7fbb      	ldrb	r3, [r7, #30]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fe1e 	bl	8002280 <OV7670_SetSharpness>

	OV7670_SetGainCeiling(OV7670.gain_ceiling);
 8002644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fc46 	bl	8001eda <OV7670_SetGainCeiling>

	OV7670_FlipHorizontal(OV7670.h_flip);
 800264e:	7c3b      	ldrb	r3, [r7, #16]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd75 	bl	8002140 <OV7670_FlipHorizontal>
	OV7670_FlipVertical(OV7670.v_flip);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fd96 	bl	800218a <OV7670_FlipVertical>
	OV7670_ShowColorBar(OV7670.cbar);
 800265e:	7bbb      	ldrb	r3, [r7, #14]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fd48 	bl	80020f6 <OV7670_ShowColorBar>
	OV7670_NightMode(OV7670.night_mode, OV7670.night_mode_fps);
 8002666:	7c7b      	ldrb	r3, [r7, #17]
 8002668:	7dba      	ldrb	r2, [r7, #22]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fdb1 	bl	80021d4 <OV7670_NightMode>

	OV7670_AutoDeNoise(OV7670.ADN);
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fe21 	bl	80022bc <OV7670_AutoDeNoise>
	if(!OV7670.ADN)OV7670_SetDeNoiseStrength(OV7670.strength);
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <OV7670_UpdateSettings+0xf8>
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe3f 	bl	8002306 <OV7670_SetDeNoiseStrength>

	OV7670_BandingFilter(OV7670.BDF, OV7670.bd_filter_value);
 8002688:	7d3b      	ldrb	r3, [r7, #20]
 800268a:	7dfa      	ldrb	r2, [r7, #23]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fe47 	bl	8002322 <OV7670_BandingFilter>
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800269c:	b004      	add	sp, #16
 800269e:	4770      	bx	lr

080026a0 <OV7670_SetFrameControl>:

void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	80fb      	strh	r3, [r7, #6]
 80026b2:	4603      	mov	r3, r0
 80026b4:	80bb      	strh	r3, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	803b      	strh	r3, [r7, #0]
	OV7670_WriteSCCB(REG_HSTART, (hstart >> 3) & 0xff);
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	2017      	movs	r0, #23
 80026ca:	f7ff f95b 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HSTOP, (hstop >> 3) & 0xff);
 80026ce:	88bb      	ldrh	r3, [r7, #4]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	2018      	movs	r0, #24
 80026da:	f7ff f953 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e8:	b25a      	sxtb	r2, r3
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	2032      	movs	r0, #50	; 0x32
 80026fe:	f7ff f941 	bl	8001984 <OV7670_WriteSCCB>

	OV7670_WriteSCCB(REG_VSTART, (vstart >> 2) & 0xff);
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	2019      	movs	r0, #25
 800270e:	f7ff f939 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VSTOP, (vstop >> 2) & 0xff);
 8002712:	883b      	ldrh	r3, [r7, #0]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	b29b      	uxth	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	201a      	movs	r0, #26
 800271e:	f7ff f931 	bl	8001984 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	b25a      	sxtb	r2, r3
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	b25b      	sxtb	r3, r3
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	b25b      	sxtb	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	b25b      	sxtb	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	2003      	movs	r0, #3
 8002742:	f7ff f91f 	bl	8001984 <OV7670_WriteSCCB>
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
	...

08002750 <OV7670_getImageInfo>:
	*time_num=(int)(time);
	*time_fract=(int)((time-(*time_num))*10);
}

void OV7670_getImageInfo(uint16_t *width, uint16_t *height, uint8_t *format)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
	*width=img_width;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <OV7670_getImageInfo+0x30>)
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	801a      	strh	r2, [r3, #0]
	*height=img_height;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <OV7670_getImageInfo+0x34>)
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	801a      	strh	r2, [r3, #0]
	*format=img_format;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <OV7670_getImageInfo+0x38>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	24000000 	.word	0x24000000
 8002784:	24000002 	.word	0x24000002
 8002788:	240000dc 	.word	0x240000dc

0800278c <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	if(capture_mode==CONTINUOUS)
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_DCMI_FrameEventCallback+0x44>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <HAL_DCMI_FrameEventCallback+0x3c>
		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3328      	adds	r3, #40	; 0x28
 80027a6:	461c      	mov	r4, r3
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_DCMI_FrameEventCallback+0x48>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_DCMI_FrameEventCallback+0x4c>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_DCMI_FrameEventCallback+0x50>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da00      	bge.n	80027c0 <HAL_DCMI_FrameEventCallback+0x34>
 80027be:	3301      	adds	r3, #1
 80027c0:	105b      	asrs	r3, r3, #1
 80027c2:	4621      	mov	r1, r4
 80027c4:	f007 fa52 	bl	8009c6c <HAL_DMA_Start_IT>

}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	240000d4 	.word	0x240000d4
 80027d4:	240000d8 	.word	0x240000d8
 80027d8:	24000000 	.word	0x24000000
 80027dc:	24000002 	.word	0x24000002

080027e0 <_ZN15GaussianMixtureC1Ev>:
	double* sigma;
	double* beta;
	double* sigma_square;
	double* beta_square;
public:
	GaussianMixture()
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	{
		nChannels = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
		alpha = sigma = beta = sigma_square = beta_square = NULL;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	605a      	str	r2, [r3, #4]
	}
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_ZN15GaussianMixture8allocateEv>:
			GM.beta[i]    = beta[i];
		}
		GM.square();
		return GM;
	}
	void allocate()
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	{
		alpha = new double[nChannels];
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002832:	d201      	bcs.n	8002838 <_ZN15GaussianMixture8allocateEv+0x16>
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	e001      	b.n	800283c <_ZN15GaussianMixture8allocateEv+0x1a>
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	4618      	mov	r0, r3
 800283e:	f011 f8ad 	bl	801399c <_Znaj>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	605a      	str	r2, [r3, #4]
		sigma = new double[nChannels];
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002852:	d201      	bcs.n	8002858 <_ZN15GaussianMixture8allocateEv+0x36>
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	e001      	b.n	800285c <_ZN15GaussianMixture8allocateEv+0x3a>
 8002858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800285c:	4618      	mov	r0, r3
 800285e:	f011 f89d 	bl	801399c <_Znaj>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]
		beta = new double[nChannels];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002872:	d201      	bcs.n	8002878 <_ZN15GaussianMixture8allocateEv+0x56>
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	e001      	b.n	800287c <_ZN15GaussianMixture8allocateEv+0x5a>
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287c:	4618      	mov	r0, r3
 800287e:	f011 f88d 	bl	801399c <_Znaj>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
		sigma_square = new double[nChannels];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002892:	d201      	bcs.n	8002898 <_ZN15GaussianMixture8allocateEv+0x76>
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	e001      	b.n	800289c <_ZN15GaussianMixture8allocateEv+0x7a>
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289c:	4618      	mov	r0, r3
 800289e:	f011 f87d 	bl	801399c <_Znaj>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
		beta_square = new double[nChannels];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b2:	d201      	bcs.n	80028b8 <_ZN15GaussianMixture8allocateEv+0x96>
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	e001      	b.n	80028bc <_ZN15GaussianMixture8allocateEv+0x9a>
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028bc:	4618      	mov	r0, r3
 80028be:	f011 f86d 	bl	801399c <_Znaj>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	615a      	str	r2, [r3, #20]
	}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_ZN15GaussianMixture5clearEv>:
	void clear()
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	{
		if(!alpha)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <_ZN15GaussianMixture5clearEv+0x22>
			delete []alpha;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <_ZN15GaussianMixture5clearEv+0x22>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f011 f83c 	bl	801396c <_ZdaPv>
		if(!sigma)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <_ZN15GaussianMixture5clearEv+0x3c>
			delete []sigma;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <_ZN15GaussianMixture5clearEv+0x3c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4618      	mov	r0, r3
 800290a:	f011 f82f 	bl	801396c <_ZdaPv>
		if(!beta)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <_ZN15GaussianMixture5clearEv+0x56>
			delete []beta;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <_ZN15GaussianMixture5clearEv+0x56>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f011 f822 	bl	801396c <_ZdaPv>
		if(!sigma_square)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <_ZN15GaussianMixture5clearEv+0x70>
			delete []sigma_square;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <_ZN15GaussianMixture5clearEv+0x70>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4618      	mov	r0, r3
 800293e:	f011 f815 	bl	801396c <_ZdaPv>
		if(!beta_square)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <_ZN15GaussianMixture5clearEv+0x8a>
			delete []beta_square;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <_ZN15GaussianMixture5clearEv+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4618      	mov	r0, r3
 8002958:	f011 f808 	bl	801396c <_ZdaPv>
		alpha = sigma = beta = sigma_square = beta_square = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	605a      	str	r2, [r3, #4]
	}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	0000      	movs	r0, r0
 800298c:	0000      	movs	r0, r0
	...

08002990 <_ZN15GaussianMixture5resetEv>:
	void reset()
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	{
		//for(int i = 0;i<nChannels;i++)
		//	alpha[i] = sigma[i] = beta[i] = sigma_square[i] = beta_square[i] = 0;
		for(int i = 0;i<nChannels;i++)
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	da21      	bge.n	80029ea <_ZN15GaussianMixture5resetEv+0x5a>
		{
			alpha[i] = 0.95;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	18d1      	adds	r1, r2, r3
 80029b0:	a312      	add	r3, pc, #72	; (adr r3, 80029fc <_ZN15GaussianMixture5resetEv+0x6c>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	e9c1 2300 	strd	r2, r3, [r1]
			sigma[i] = 0.05;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	18d1      	adds	r1, r2, r3
 80029c4:	a30f      	add	r3, pc, #60	; (adr r3, 8002a04 <_ZN15GaussianMixture5resetEv+0x74>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	e9c1 2300 	strd	r2, r3, [r1]
			beta[i] = 0.5;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	18d1      	adds	r1, r2, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <_ZN15GaussianMixture5resetEv+0x68>)
 80029de:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0;i<nChannels;i++)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e7d8      	b.n	800299c <_ZN15GaussianMixture5resetEv+0xc>
		}
		square();
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f88c 	bl	8002b08 <_ZN15GaussianMixture6squareEv>
	}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	3fe00000 	.word	0x3fe00000
 80029fc:	66666666 	.word	0x66666666
 8002a00:	3fee6666 	.word	0x3fee6666
 8002a04:	9999999a 	.word	0x9999999a
 8002a08:	3fa99999 	.word	0x3fa99999

08002a0c <_ZN15GaussianMixture5resetEi>:
	void reset(int _nChannels)
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	{
		clear();
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff5b 	bl	80028d2 <_ZN15GaussianMixture5clearEv>
		nChannels = _nChannels;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
		allocate();
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fefd 	bl	8002822 <_ZN15GaussianMixture8allocateEv>
		reset();
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ffb1 	bl	8002990 <_ZN15GaussianMixture5resetEv>
	}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <_ZNK15GaussianMixture8GaussianEdii>:
	double Gaussian(double x,int i,int k) const
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6178      	str	r0, [r7, #20]
 8002a40:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a44:	6139      	str	r1, [r7, #16]
 8002a46:	607a      	str	r2, [r7, #4]
	{
		if(i==0)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d122      	bne.n	8002a94 <_ZNK15GaussianMixture8GaussianEdii+0x5c>
			 return exp(-x/(2*sigma_square[k]))/(2*PI*sigma[k]);
 8002a4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a52:	eeb1 6b47 	vneg.f64	d6, d7
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 7b00 	vldr	d7, [r3]
 8002a64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a68:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002a6c:	eeb0 0b45 	vmov.f64	d0, d5
 8002a70:	f011 f84e 	bl	8013b10 <exp>
 8002a74:	eeb0 5b40 	vmov.f64	d5, d0
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	ed93 7b00 	vldr	d7, [r3]
 8002a86:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002ae8 <_ZNK15GaussianMixture8GaussianEdii+0xb0>
 8002a8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a8e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a92:	e021      	b.n	8002ad8 <_ZNK15GaussianMixture8GaussianEdii+0xa0>
		else
			return exp(-x/(2*beta_square[k]))/(2*PI*beta[k]);
 8002a94:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a98:	eeb1 6b47 	vneg.f64	d6, d7
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	ed93 7b00 	vldr	d7, [r3]
 8002aaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002aae:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002ab2:	eeb0 0b45 	vmov.f64	d0, d5
 8002ab6:	f011 f82b 	bl	8013b10 <exp>
 8002aba:	eeb0 5b40 	vmov.f64	d5, d0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	ed93 7b00 	vldr	d7, [r3]
 8002acc:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8002ae8 <_ZNK15GaussianMixture8GaussianEdii+0xb0>
 8002ad0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ad4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	}
 8002ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	5a7ed197 	.word	0x5a7ed197
 8002aec:	401921fb 	.word	0x401921fb

08002af0 <_ZN15GaussianMixtureD1Ev>:
	~GaussianMixture()
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	{
		clear();
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff feea 	bl	80028d2 <_ZN15GaussianMixture5clearEv>
	}
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZN15GaussianMixture6squareEv>:
	void square()
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	{
		for(int i =0;i<nChannels;i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	da31      	bge.n	8002b82 <_ZN15GaussianMixture6squareEv+0x7a>
		{
			sigma_square[i] = sigma[i]*sigma[i];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	ed93 6b00 	vldr	d6, [r3]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	ed93 7b00 	vldr	d7, [r3]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b48:	ed83 7b00 	vstr	d7, [r3]
			beta_square[i] = beta[i]*beta[i];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 6b00 	vldr	d6, [r3]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	ed93 7b00 	vldr	d7, [r3]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b76:	ed83 7b00 	vstr	d7, [r3]
		for(int i =0;i<nChannels;i++)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e7c8      	b.n	8002b14 <_ZN15GaussianMixture6squareEv+0xc>
		}
	}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZNK15GaussianPyramid7nlevelsEv>:
	GaussianPyramid(void);
	~GaussianPyramid(void);
	void ConstructPyramid(const DImage& image,double ratio=0.8,int minWidth=30);
	void ConstructPyramidLevels(const DImage& image,double ratio =0.8,int _nLevels = 2);
	void displayTop(const char* filename);
	inline int nlevels() const {return nLevels;};
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <_ZN15GaussianPyramid5ImageEi>:
	inline DImage& Image(int index) {return ImPyramid[index];};
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	4413      	add	r3, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <_ZN11OpticalFlow6getDxsER5ImageIdES2_S2_RKS1_S4_>:

//--------------------------------------------------------------------------------------------------------
//  function to compute dx, dy and dt for motion estimation
//--------------------------------------------------------------------------------------------------------
void OpticalFlow::getDxs(DImage &imdx, DImage &imdy, DImage &imdt, const DImage &im1, const DImage &im2)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b0a8      	sub	sp, #160	; 0xa0
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
	//double gfilter[5]={0.01,0.09,0.8,0.09,0.01};
	double gfilter[5]={0.02,0.11,0.74,0.11,0.02};
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <_ZN11OpticalFlow6getDxsER5ImageIdES2_S2_RKS1_S4_+0x128>)
 8002bd8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002bdc:	461d      	mov	r5, r3
 8002bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bea:	e884 0003 	stmia.w	r4, {r0, r1}
		//Im.Multiplywith(0.5);
		////foo.imfilter_hv(Im,gfilter,2,gfilter,2);
		//Im.dx(imdx,true);
		//Im.dy(imdy,true);
		//imdt.Subtract(im2,im1);
		DImage Im1,Im2,Im;
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fe84 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8002bf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fe7f 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8002c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fe7a 	bl	8000900 <_ZN5ImageIdEC1Ev>

		im1.imfilter_hv(Im1,gfilter,2,gfilter,2);
 8002c0c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002c10:	f107 0110 	add.w	r1, r7, #16
 8002c14:	2302      	movs	r3, #2
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2302      	movs	r3, #2
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f7fe fc7e 	bl	8001522 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i>
		im2.imfilter_hv(Im2,gfilter,2,gfilter,2);
 8002c26:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002c2a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002c2e:	2302      	movs	r3, #2
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002c3e:	f7fe fc70 	bl	8001522 <_ZNK5ImageIdE11imfilter_hvIdEEvRS_IT_EPKdiS6_i>
		Im.copyData(Im1);
 8002c42:	f107 0210 	add.w	r2, r7, #16
 8002c46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd ff1f 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
		Im.Multiplywith(0.4);
 8002c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c56:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002ce0 <_ZN11OpticalFlow6getDxsER5ImageIdES2_S2_RKS1_S4_+0x118>
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fb0d 	bl	800527a <_ZN5ImageIdE12MultiplywithEd>
		Im.Add(Im2,0.6);
 8002c60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c68:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002ce8 <_ZN11OpticalFlow6getDxsER5ImageIdES2_S2_RKS1_S4_+0x120>
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fb2c 	bl	80052cc <_ZN5ImageIdE3AddIdEEvRKS_IT_Ed>
		//Im.Multiplywith(0.5);
		//Im1.copyData(im1);
		//Im2.copyData(im2);

		Im.dx(imdx,true);
 8002c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c78:	2201      	movs	r2, #1
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fb67 	bl	8005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>
		Im.dy(imdy,true);
 8002c82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c86:	2201      	movs	r2, #1
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fc26 	bl	80054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>
		imdt.Subtract(Im2,Im1);
 8002c90:	f107 0210 	add.w	r2, r7, #16
 8002c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f002 fce0 	bl	8005660 <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E>
		DImage Im1,Im2,Im;
 8002ca0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fe57 	bl	8000958 <_ZN5ImageIdED1Ev>
 8002caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fe52 	bl	8000958 <_ZN5ImageIdED1Ev>
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fe4d 	bl	8000958 <_ZN5ImageIdED1Ev>
		Im2.dy(imdy,true);
		imdt.Subtract(Im2,Im1);
	}


	imdx.setDerivative();
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f002 fd1d 	bl	8005700 <_ZN5ImageIdE13setDerivativeEb>
	imdy.setDerivative();
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	68b8      	ldr	r0, [r7, #8]
 8002cca:	f002 fd19 	bl	8005700 <_ZN5ImageIdE13setDerivativeEb>
	imdt.setDerivative();
 8002cce:	2101      	movs	r1, #1
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f002 fd15 	bl	8005700 <_ZN5ImageIdE13setDerivativeEb>
}
 8002cd6:	bf00      	nop
 8002cd8:	3798      	adds	r7, #152	; 0x98
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	9999999a 	.word	0x9999999a
 8002ce4:	3fd99999 	.word	0x3fd99999
 8002ce8:	33333333 	.word	0x33333333
 8002cec:	3fe33333 	.word	0x3fe33333
 8002cf0:	08014ef0 	.word	0x08014ef0

08002cf4 <_ZN11OpticalFlow6warpFLER5ImageIdERKS1_S4_S4_S4_>:

//--------------------------------------------------------------------------------------------------------
// function to warp image based on the flow field
//--------------------------------------------------------------------------------------------------------
void OpticalFlow::warpFL(DImage &warpIm2, const DImage &Im1, const DImage &Im2, const DImage &vx, const DImage &vy)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	b08d      	sub	sp, #52	; 0x34
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	61f8      	str	r0, [r7, #28]
 8002cfc:	61b9      	str	r1, [r7, #24]
 8002cfe:	617a      	str	r2, [r7, #20]
 8002d00:	613b      	str	r3, [r7, #16]
	if(warpIm2.matchDimension(Im2)==false)
 8002d02:	6979      	ldr	r1, [r7, #20]
 8002d04:	69f8      	ldr	r0, [r7, #28]
 8002d06:	f7fe fc90 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <_ZN11OpticalFlow6warpFLER5ImageIdERKS1_S4_S4_S4_+0x4e>
		warpIm2.allocate(Im2.width(),Im2.height(),Im2.nchannels());
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	681c      	ldr	r4, [r3, #0]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7fe fade 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8002d28:	4605      	mov	r5, r0
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7fe fc59 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8002d30:	4606      	mov	r6, r0
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7fe fc61 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	47a0      	blx	r4
	ImageProcessing::warpImage(warpIm2.data(),Im1.data(),Im2.data(),vx.data(),vy.data(),Im2.width(),Im2.height(),Im2.nchannels());
 8002d42:	69f8      	ldr	r0, [r7, #28]
 8002d44:	f7fe fc65 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	681d      	ldr	r5, [r3, #0]
 8002d4c:	69b8      	ldr	r0, [r7, #24]
 8002d4e:	f002 fa77 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002d52:	4603      	mov	r3, r0
 8002d54:	681e      	ldr	r6, [r3, #0]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f002 fa72 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	6938      	ldr	r0, [r7, #16]
 8002d64:	f002 fa6c 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	6819      	ldr	r1, [r3, #0]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d70:	f002 fa66 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002d74:	4603      	mov	r3, r0
 8002d76:	681c      	ldr	r4, [r3, #0]
 8002d78:	6978      	ldr	r0, [r7, #20]
 8002d7a:	f7fe fab3 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7fe fc2e 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8002d86:	6038      	str	r0, [r7, #0]
 8002d88:	6978      	ldr	r0, [r7, #20]
 8002d8a:	f7fe fc36 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	9303      	str	r3, [sp, #12]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	9001      	str	r0, [sp, #4]
 8002d9a:	9400      	str	r4, [sp, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4631      	mov	r1, r6
 8002da2:	4628      	mov	r0, r5
 8002da4:	f002 fcbb 	bl	800571e <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii>
}
 8002da8:	bf00      	nop
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db0 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i>:

//--------------------------------------------------------------------------------------------------------
// function to generate mask of the pixels that move inside the image boundary
//--------------------------------------------------------------------------------------------------------
void OpticalFlow::genInImageMask(DImage &mask, const DImage &vx, const DImage &vy,int interval)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b091      	sub	sp, #68	; 0x44
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
	int imWidth,imHeight;
	imWidth=vx.width();
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f7fe fa90 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8002dc4:	6378      	str	r0, [r7, #52]	; 0x34
	imHeight=vx.height();
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	f7fe fc0b 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8002dcc:	6338      	str	r0, [r7, #48]	; 0x30
	if(mask.matchDimension(vx)==false)
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7fe fc2a 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x48>
		mask.allocate(imWidth,imHeight);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	681c      	ldr	r4, [r3, #0]
 8002dee:	2301      	movs	r3, #1
 8002df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	47a0      	blx	r4
	const _FlowPrecision *pVx,*pVy;
	_FlowPrecision *pMask;
	pVx=vx.data();
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f002 fa21 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	pVy=vy.data();
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f002 fa1b 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	mask.reset();
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3310      	adds	r3, #16
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	4798      	blx	r3
	pMask=mask.data();
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7fe fbf8 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
	double x,y;
	for(int i=0;i<imHeight;i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	429a      	cmp	r2, r3
 8002e32:	da73      	bge.n	8002f1c <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x16c>
		for(int j=0;j<imWidth;j++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	da69      	bge.n	8002f14 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x164>
		{
			int offset=i*imWidth+j;
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e4a:	4413      	add	r3, r2
 8002e4c:	623b      	str	r3, [r7, #32]
			y=i+pVx[offset];
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5e:	4413      	add	r3, r2
 8002e60:	ed93 7b00 	vldr	d7, [r3]
 8002e64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e68:	ed87 7b06 	vstr	d7, [r7, #24]
			x=j+pVy[offset];
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7c:	4413      	add	r3, r2
 8002e7e:	ed93 7b00 	vldr	d7, [r3]
 8002e82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e86:	ed87 7b04 	vstr	d7, [r7, #16]
			if(x<interval  || x>imWidth-1-interval || y<interval || y>imHeight-1-interval)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e94:	ed97 6b04 	vldr	d6, [r7, #16]
 8002e98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d433      	bmi.n	8002f0a <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x15a>
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eb2:	ed97 6b04 	vldr	d6, [r7, #16]
 8002eb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dc24      	bgt.n	8002f0a <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x15a>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eca:	ed97 6b06 	vldr	d6, [r7, #24]
 8002ece:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d418      	bmi.n	8002f0a <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x15a>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ee8:	ed97 6b06 	vldr	d6, [r7, #24]
 8002eec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	dc09      	bgt.n	8002f0a <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x15a>
				continue;
			pMask[offset]=1;
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	18d1      	adds	r1, r2, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x174>)
 8002f04:	e9c1 2300 	strd	r2, r3, [r1]
 8002f08:	e000      	b.n	8002f0c <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x15c>
				continue;
 8002f0a:	bf00      	nop
		for(int j=0;j<imWidth;j++)
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	3301      	adds	r3, #1
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f12:	e791      	b.n	8002e38 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x88>
	for(int i=0;i<imHeight;i++)
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	3301      	adds	r3, #1
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1a:	e787      	b.n	8002e2c <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i+0x7c>
		}
}
 8002f1c:	bf00      	nop
 8002f1e:	3744      	adds	r7, #68	; 0x44
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd90      	pop	{r4, r7, pc}
 8002f24:	3ff00000 	.word	0x3ff00000

08002f28 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii>:
//	u,v:									the current flow field, NOTICE that they are also output arguments
//
//--------------------------------------------------------------------------------------------------------
void OpticalFlow::SmoothFlowSOR(const DImage &Im1, const DImage &Im2, DImage &warpIm2, DImage &u, DImage &v,
																    double alpha, int nOuterFPIterations, int nInnerFPIterations, int nSORIterations)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	ed2d 8b04 	vpush	{d8-d9}
 8002f2e:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 8002f38:	f2a4 441c 	subw	r4, r4, #1052	; 0x41c
 8002f3c:	6020      	str	r0, [r4, #0]
 8002f3e:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 8002f42:	f5a0 6084 	sub.w	r0, r0, #1056	; 0x420
 8002f46:	6001      	str	r1, [r0, #0]
 8002f48:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8002f4c:	f2a1 4124 	subw	r1, r1, #1060	; 0x424
 8002f50:	600a      	str	r2, [r1, #0]
 8002f52:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8002f56:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	ed83 0b00 	vstr	d0, [r3]
	DImage mask,imdx,imdy,imdt;
 8002f62:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fcca 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8002f6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fcc5 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8002f76:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fcc0 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8002f80:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fcbb 	bl	8000900 <_ZN5ImageIdEC1Ev>
	int imWidth,imHeight,nChannels,nPixels;
	imWidth=Im1.width();
 8002f8a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002f8e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	f7fe f9a6 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8002f98:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
	imHeight=Im1.height();
 8002f9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002fa0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f7fe fb1c 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8002faa:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
	nChannels=Im1.nchannels();
 8002fae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002fb2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f7fe fb1f 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8002fbc:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	nPixels=imWidth*imHeight;
 8002fc0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002fc4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

	DImage du(imWidth,imHeight),dv(imWidth,imHeight);
 8002fd0:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002fda:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8002fde:	f002 fc49 	bl	8005874 <_ZN5ImageIdEC1Eiii>
 8002fe2:	f507 7026 	add.w	r0, r7, #664	; 0x298
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002fec:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8002ff0:	f002 fc40 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	DImage uu(imWidth,imHeight),vv(imWidth,imHeight);
 8002ff4:	f507 701e 	add.w	r0, r7, #632	; 0x278
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002ffe:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003002:	f002 fc37 	bl	8005874 <_ZN5ImageIdEC1Eiii>
 8003006:	f507 7016 	add.w	r0, r7, #600	; 0x258
 800300a:	2301      	movs	r3, #1
 800300c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003010:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003014:	f002 fc2e 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	DImage ux(imWidth,imHeight),uy(imWidth,imHeight);
 8003018:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800301c:	2301      	movs	r3, #1
 800301e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003022:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003026:	f002 fc25 	bl	8005874 <_ZN5ImageIdEC1Eiii>
 800302a:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800302e:	2301      	movs	r3, #1
 8003030:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003034:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003038:	f002 fc1c 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	DImage vx(imWidth,imHeight),vy(imWidth,imHeight);
 800303c:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8003040:	2301      	movs	r3, #1
 8003042:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003046:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800304a:	f002 fc13 	bl	8005874 <_ZN5ImageIdEC1Eiii>
 800304e:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 8003052:	2301      	movs	r3, #1
 8003054:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003058:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800305c:	f002 fc0a 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	DImage Phi_1st(imWidth,imHeight);
 8003060:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8003064:	2301      	movs	r3, #1
 8003066:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800306a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800306e:	f002 fc01 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	DImage Psi_1st(imWidth,imHeight,nChannels);
 8003072:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8003076:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800307a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800307e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003082:	f002 fbf7 	bl	8005874 <_ZN5ImageIdEC1Eiii>

	DImage imdxy,imdx2,imdy2,imdtdx,imdtdy;
 8003086:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fc38 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8003090:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fc33 	bl	8000900 <_ZN5ImageIdEC1Ev>
 800309a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fc2e 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fc29 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fc24 	bl	8000900 <_ZN5ImageIdEC1Ev>
	DImage ImDxy,ImDx2,ImDy2,ImDtDx,ImDtDy;
 80030b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fc1f 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fc1a 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fc15 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fc10 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fc0b 	bl	8000900 <_ZN5ImageIdEC1Ev>
	DImage foo1,foo2;
 80030ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fc06 	bl	8000900 <_ZN5ImageIdEC1Ev>
 80030f4:	f107 0318 	add.w	r3, r7, #24
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fc01 	bl	8000900 <_ZN5ImageIdEC1Ev>

	double prob1,prob2,prob11,prob22;

	double varepsilon_phi=pow(0.001,2);
 80030fe:	f20f 63b4 	addw	r3, pc, #1716	; 0x6b4
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
	double varepsilon_psi=pow(0.001,2);
 800310a:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0

	//--------------------------------------------------------------------------
	// the outer fixed point iteration
	//--------------------------------------------------------------------------
	for(int count=0;count<nOuterFPIterations;count++)
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800311c:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8003120:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003124:	429a      	cmp	r2, r3
 8003126:	f280 878a 	bge.w	800403e <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1116>
	{
		// compute the gradient
		getDxs(imdx,imdy,imdt,Im1,warpIm2);
 800312a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800312e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8003132:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 8003136:	f507 713e 	add.w	r1, r7, #760	; 0x2f8
 800313a:	f507 7046 	add.w	r0, r7, #792	; 0x318
 800313e:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8003142:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	9200      	str	r2, [sp, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4622      	mov	r2, r4
 800314e:	f7ff fd3b 	bl	8002bc8 <_ZN11OpticalFlow6getDxsER5ImageIdES2_S2_RKS1_S4_>

		// generate the mask to set the weight of the pxiels moving outside of the image boundary to be zero
		genInImageMask(mask,u,v);
 8003152:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003156:	f5a3 6185 	sub.w	r1, r3, #1064	; 0x428
 800315a:	f507 704e 	add.w	r0, r7, #824	; 0x338
 800315e:	2300      	movs	r3, #0
 8003160:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003164:	6809      	ldr	r1, [r1, #0]
 8003166:	f7ff fe23 	bl	8002db0 <_ZN11OpticalFlow14genInImageMaskER5ImageIdERKS1_S4_i>

		// set the derivative of the flow field to be zero
		du.reset();
 800316a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fc79 	bl	8000a66 <_ZN5ImageIdE5resetEv>
		dv.reset();
 8003174:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fc74 	bl	8000a66 <_ZN5ImageIdE5resetEv>

		//--------------------------------------------------------------------------
		// the inner fixed point iteration
		//--------------------------------------------------------------------------
		for(int hh=0;hh<nInnerFPIterations;hh++)
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8003184:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8003188:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800318c:	429a      	cmp	r2, r3
 800318e:	f280 86dc 	bge.w	8003f4a <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1022>
		{
			// compute the derivatives of the current flow field
			if(hh==0)
 8003192:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8003196:	2b00      	cmp	r3, #0
 8003198:	d111      	bne.n	80031be <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x296>
			{
				uu.copyData(u);
 800319a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800319e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80031a2:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7fd fc71 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
				vv.copyData(v);
 80031ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80031b2:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fc6a 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
 80031bc:	e013      	b.n	80031e6 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x2be>
			}
			else
			{
				uu.Add(u,du);
 80031be:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80031c2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80031c6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80031ca:	f507 701e 	add.w	r0, r7, #632	; 0x278
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	f002 fb90 	bl	80058f4 <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E>
				vv.Add(v,dv);
 80031d4:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80031d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80031dc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 fb87 	bl	80058f4 <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E>
			}
			uu.dx(ux);
 80031e6:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80031ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80031ee:	2200      	movs	r2, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 f8ad 	bl	8005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>
			uu.dy(uy);
 80031f6:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80031fa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80031fe:	2200      	movs	r2, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f002 f96b 	bl	80054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>
			vv.dx(vx);
 8003206:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800320a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800320e:	2200      	movs	r2, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f002 f89d 	bl	8005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>
			vv.dy(vy);
 8003216:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 800321a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800321e:	2200      	movs	r2, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f002 f95b 	bl	80054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>

			// compute the weight of phi
			Phi_1st.reset();
 8003226:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fc1b 	bl	8000a66 <_ZN5ImageIdE5resetEv>
			_FlowPrecision* phiData=Phi_1st.data();
 8003230:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe f9ec 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800323a:	4603      	mov	r3, r0
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
			double temp;
			const _FlowPrecision *uxData,*uyData,*vxData,*vyData;
			uxData=ux.data();
 8003242:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe f9e3 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800324c:	4603      	mov	r3, r0
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
			uyData=uy.data();
 8003254:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe f9da 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800325e:	4603      	mov	r3, r0
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
			vxData=vx.data();
 8003266:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe f9d1 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003270:	4603      	mov	r3, r0
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
			vyData=vy.data();
 8003278:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe f9c8 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003282:	4603      	mov	r3, r0
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
//			double power_alpha = 0.5;
			for(int i=0;i<nPixels;i++)
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8003290:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003294:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003298:	429a      	cmp	r2, r3
 800329a:	da6d      	bge.n	8003378 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x450>
			{
				temp=uxData[i]*uxData[i]+uyData[i]*uyData[i]+vxData[i]*vxData[i]+vyData[i]*vyData[i];
 800329c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80032a6:	4413      	add	r3, r2
 80032a8:	ed93 6b00 	vldr	d6, [r3]
 80032ac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80032b6:	4413      	add	r3, r2
 80032b8:	ed93 7b00 	vldr	d7, [r3]
 80032bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80032c0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80032ca:	4413      	add	r3, r2
 80032cc:	ed93 5b00 	vldr	d5, [r3]
 80032d0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80032da:	4413      	add	r3, r2
 80032dc:	ed93 7b00 	vldr	d7, [r3]
 80032e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80032e8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80032f2:	4413      	add	r3, r2
 80032f4:	ed93 5b00 	vldr	d5, [r3]
 80032f8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8003302:	4413      	add	r3, r2
 8003304:	ed93 7b00 	vldr	d7, [r3]
 8003308:	ee25 7b07 	vmul.f64	d7, d5, d7
 800330c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003310:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800331a:	4413      	add	r3, r2
 800331c:	ed93 5b00 	vldr	d5, [r3]
 8003320:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800332a:	4413      	add	r3, r2
 800332c:	ed93 7b00 	vldr	d7, [r3]
 8003330:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003334:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003338:	ed87 7bec 	vstr	d7, [r7, #944]	; 0x3b0
				//phiData[i]=power_alpha*pow(temp+varepsilon_phi,power_alpha-1);
				phiData[i] = 0.5/sqrt(temp+varepsilon_phi);
 800333c:	ed97 6bec 	vldr	d6, [r7, #944]	; 0x3b0
 8003340:	ed97 7bf6 	vldr	d7, [r7, #984]	; 0x3d8
 8003344:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003348:	eeb0 0b47 	vmov.f64	d0, d7
 800334c:	f011 f8a4 	bl	8014498 <sqrt>
 8003350:	eeb0 6b40 	vmov.f64	d6, d0
 8003354:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800335e:	4413      	add	r3, r2
 8003360:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003364:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003368:	ed83 7b00 	vstr	d7, [r3]
			for(int i=0;i<nPixels;i++)
 800336c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8003370:	3301      	adds	r3, #1
 8003372:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8003376:	e78b      	b.n	8003290 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x368>
				//phiData[i] = 1/(power_alpha+temp);
			}

			// compute the nonlinear term of psi
			Psi_1st.reset();
 8003378:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fb72 	bl	8000a66 <_ZN5ImageIdE5resetEv>
			_FlowPrecision* psiData=Psi_1st.data();
 8003382:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f943 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800338c:	4603      	mov	r3, r0
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
			const _FlowPrecision *imdxData,*imdyData,*imdtData;
			const _FlowPrecision *duData,*dvData;
			imdxData=imdx.data();
 8003394:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe f93a 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
			imdyData=imdy.data();
 80033a6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe f931 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80033b0:	4603      	mov	r3, r0
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
			imdtData=imdt.data();
 80033b8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe f928 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
			duData=du.data();
 80033ca:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe f91f 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
			dvData=dv.data();
 80033dc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe f916 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398

//			double _a  = 10000, _b = 0.1;
			if(nChannels==1)
 80033ee:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 80d3 	bne.w	800359e <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x676>
				for(int i=0;i<nPixels;i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80033fe:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8003402:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003406:	429a      	cmp	r2, r3
 8003408:	f280 81d8 	bge.w	80037bc <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x894>
				{
					temp=imdtData[i]+imdxData[i]*duData[i]+imdyData[i]*dvData[i];
 800340c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8003416:	4413      	add	r3, r2
 8003418:	ed93 6b00 	vldr	d6, [r3]
 800341c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8003426:	4413      	add	r3, r2
 8003428:	ed93 5b00 	vldr	d5, [r3]
 800342c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8003436:	4413      	add	r3, r2
 8003438:	ed93 7b00 	vldr	d7, [r3]
 800343c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003440:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003444:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800344e:	4413      	add	r3, r2
 8003450:	ed93 5b00 	vldr	d5, [r3]
 8003454:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800345e:	4413      	add	r3, r2
 8003460:	ed93 7b00 	vldr	d7, [r3]
 8003464:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003468:	ee36 7b07 	vadd.f64	d7, d6, d7
 800346c:	ed87 7bec 	vstr	d7, [r7, #944]	; 0x3b0
					//if(temp*temp<0.04)
					// psiData[i]=1/(2*sqrt(temp*temp+varepsilon_psi));
					//psiData[i] = _a*_b/(1+_a*temp*temp);

					// the following code is for log Gaussian mixture probability model
					temp *= temp;
 8003470:	ed97 7bec 	vldr	d7, [r7, #944]	; 0x3b0
 8003474:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003478:	ed87 7bec 	vstr	d7, [r7, #944]	; 0x3b0
					switch(noiseModel)
 800347c:	4bca      	ldr	r3, [pc, #808]	; (80037a8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x880>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x562>
 8003484:	2b01      	cmp	r3, #1
 8003486:	d055      	beq.n	8003534 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x60c>
 8003488:	e083      	b.n	8003592 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x66a>
					{
					case GMixture:
						prob1 = GMPara.Gaussian(temp,0,0)*GMPara.alpha[0];
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 8003492:	48c6      	ldr	r0, [pc, #792]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 8003494:	f7ff fad0 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 8003498:	eeb0 6b40 	vmov.f64	d6, d0
 800349c:	4bc3      	ldr	r3, [pc, #780]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	ed93 7b00 	vldr	d7, [r3]
 80034a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034a8:	ed87 7be2 	vstr	d7, [r7, #904]	; 0x388
						prob2 = GMPara.Gaussian(temp,1,0)*(1-GMPara.alpha[0]);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2101      	movs	r1, #1
 80034b0:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 80034b4:	48bd      	ldr	r0, [pc, #756]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80034b6:	f7ff fabf 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 80034ba:	eeb0 6b40 	vmov.f64	d6, d0
 80034be:	4bbb      	ldr	r3, [pc, #748]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	ed93 7b00 	vldr	d7, [r3]
 80034c6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80034ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80034ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034d2:	ed87 7be0 	vstr	d7, [r7, #896]	; 0x380
						prob11 = prob1/(2*GMPara.sigma_square[0]);
 80034d6:	4bb5      	ldr	r3, [pc, #724]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	ed93 7b00 	vldr	d7, [r3]
 80034de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80034e2:	ed97 5be2 	vldr	d5, [r7, #904]	; 0x388
 80034e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80034ea:	ed87 7bde 	vstr	d7, [r7, #888]	; 0x378
						prob22 = prob2/(2*GMPara.beta_square[0]);
 80034ee:	4baf      	ldr	r3, [pc, #700]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	ed93 7b00 	vldr	d7, [r3]
 80034f6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80034fa:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80034fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003502:	ed87 7bdc 	vstr	d7, [r7, #880]	; 0x370
						psiData[i] = (prob11+prob22)/(prob1+prob2);
 8003506:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800350a:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 800350e:	ee36 5b07 	vadd.f64	d5, d6, d7
 8003512:	ed97 6be2 	vldr	d6, [r7, #904]	; 0x388
 8003516:	ed97 7be0 	vldr	d7, [r7, #896]	; 0x380
 800351a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800351e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8003528:	4413      	add	r3, r2
 800352a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800352e:	ed83 7b00 	vstr	d7, [r3]
						break;
 8003532:	e02e      	b.n	8003592 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x66a>
					case Lap:
						if(LapPara[0]<1E-20)
 8003534:	2100      	movs	r1, #0
 8003536:	489e      	ldr	r0, [pc, #632]	; (80037b0 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x888>)
 8003538:	f002 fa2c 	bl	8005994 <_ZN6VectorIdEixEi>
 800353c:	4603      	mov	r3, r0
 800353e:	ed93 7b00 	vldr	d7, [r3]
 8003542:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80037a0 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x878>
 8003546:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	bf4c      	ite	mi
 8003550:	2301      	movmi	r3, #1
 8003552:	2300      	movpl	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11a      	bne.n	8003590 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x668>
							continue;
						//psiData[i]=1/(2*sqrt(temp+varepsilon_psi)*LapPara[0]);
                        psiData[i]=1/(2*sqrt(temp+varepsilon_psi));
 800355a:	ed97 6bec 	vldr	d6, [r7, #944]	; 0x3b0
 800355e:	ed97 7bf4 	vldr	d7, [r7, #976]	; 0x3d0
 8003562:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003566:	eeb0 0b47 	vmov.f64	d0, d7
 800356a:	f010 ff95 	bl	8014498 <sqrt>
 800356e:	eeb0 7b40 	vmov.f64	d7, d0
 8003572:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003576:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8003580:	4413      	add	r3, r2
 8003582:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003586:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800358a:	ed83 7b00 	vstr	d7, [r3]
						break;
 800358e:	e000      	b.n	8003592 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x66a>
							continue;
 8003590:	bf00      	nop
				for(int i=0;i<nPixels;i++)
 8003592:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003596:	3301      	adds	r3, #1
 8003598:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800359c:	e72f      	b.n	80033fe <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x4d6>
					}
				}
			else
				for(int i=0;i<nPixels;i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80035a4:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80035a8:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f280 8105 	bge.w	80037bc <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x894>
					for(int k=0;k<nChannels;k++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80035b8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80035bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f280 80e7 	bge.w	8003794 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x86c>
					{
						int offset=i*nChannels+k;
 80035c6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80035ca:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80035d6:	4413      	add	r3, r2
 80035d8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
						temp=imdtData[offset]+imdxData[offset]*duData[i]+imdyData[offset]*dvData[i];
 80035dc:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80035e6:	4413      	add	r3, r2
 80035e8:	ed93 6b00 	vldr	d6, [r3]
 80035ec:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80035f6:	4413      	add	r3, r2
 80035f8:	ed93 5b00 	vldr	d5, [r3]
 80035fc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8003606:	4413      	add	r3, r2
 8003608:	ed93 7b00 	vldr	d7, [r3]
 800360c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003610:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003614:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800361e:	4413      	add	r3, r2
 8003620:	ed93 5b00 	vldr	d5, [r3]
 8003624:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800362e:	4413      	add	r3, r2
 8003630:	ed93 7b00 	vldr	d7, [r3]
 8003634:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003638:	ee36 7b07 	vadd.f64	d7, d6, d7
 800363c:	ed87 7bec 	vstr	d7, [r7, #944]	; 0x3b0
						//if(temp*temp<0.04)
						 // psiData[offset]=1/(2*sqrt(temp*temp+varepsilon_psi));
						//psiData[offset] =  _a*_b/(1+_a*temp*temp);
						temp *= temp;
 8003640:	ed97 7bec 	vldr	d7, [r7, #944]	; 0x3b0
 8003644:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003648:	ed87 7bec 	vstr	d7, [r7, #944]	; 0x3b0
						switch(noiseModel)
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x880>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x732>
 8003654:	2b01      	cmp	r3, #1
 8003656:	d067      	beq.n	8003728 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x800>
 8003658:	e096      	b.n	8003788 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x860>
						{
						case GMixture:
							prob1 = GMPara.Gaussian(temp,0,k)*GMPara.alpha[k];
 800365a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800365e:	2100      	movs	r1, #0
 8003660:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 8003664:	4851      	ldr	r0, [pc, #324]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 8003666:	f7ff f9e7 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 800366a:	eeb0 6b40 	vmov.f64	d6, d0
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	ed93 7b00 	vldr	d7, [r3]
 800367e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003682:	ed87 7be2 	vstr	d7, [r7, #904]	; 0x388
							prob2 = GMPara.Gaussian(temp,1,k)*(1-GMPara.alpha[k]);
 8003686:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800368a:	2101      	movs	r1, #1
 800368c:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 8003690:	4846      	ldr	r0, [pc, #280]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 8003692:	f7ff f9d1 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 8003696:	eeb0 6b40 	vmov.f64	d6, d0
 800369a:	4b44      	ldr	r3, [pc, #272]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	ed93 7b00 	vldr	d7, [r3]
 80036aa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80036ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80036b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036b6:	ed87 7be0 	vstr	d7, [r7, #896]	; 0x380
							prob11 = prob1/(2*GMPara.sigma_square[k]);
 80036ba:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	ed93 7b00 	vldr	d7, [r3]
 80036ca:	ee37 6b07 	vadd.f64	d6, d7, d7
 80036ce:	ed97 5be2 	vldr	d5, [r7, #904]	; 0x388
 80036d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036d6:	ed87 7bde 	vstr	d7, [r7, #888]	; 0x378
							prob22 = prob2/(2*GMPara.beta_square[k]);
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x884>)
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	ed93 7b00 	vldr	d7, [r3]
 80036ea:	ee37 6b07 	vadd.f64	d6, d7, d7
 80036ee:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80036f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036f6:	ed87 7bdc 	vstr	d7, [r7, #880]	; 0x370
							psiData[offset] = (prob11+prob22)/(prob1+prob2);
 80036fa:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80036fe:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8003702:	ee36 5b07 	vadd.f64	d5, d6, d7
 8003706:	ed97 6be2 	vldr	d6, [r7, #904]	; 0x388
 800370a:	ed97 7be0 	vldr	d7, [r7, #896]	; 0x380
 800370e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003712:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 800371c:	4413      	add	r3, r2
 800371e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003722:	ed83 7b00 	vstr	d7, [r3]
							break;
 8003726:	e02f      	b.n	8003788 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x860>
						case Lap:
							if(LapPara[k]<1E-20)
 8003728:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 800372c:	4820      	ldr	r0, [pc, #128]	; (80037b0 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x888>)
 800372e:	f002 f931 	bl	8005994 <_ZN6VectorIdEixEi>
 8003732:	4603      	mov	r3, r0
 8003734:	ed93 7b00 	vldr	d7, [r3]
 8003738:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80037a0 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x878>
 800373c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	bf4c      	ite	mi
 8003746:	2301      	movmi	r3, #1
 8003748:	2300      	movpl	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11a      	bne.n	8003786 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x85e>
								continue;
							//psiData[offset]=1/(2*sqrt(temp+varepsilon_psi)*LapPara[k]);
                            psiData[offset]=1/(2*sqrt(temp+varepsilon_psi));
 8003750:	ed97 6bec 	vldr	d6, [r7, #944]	; 0x3b0
 8003754:	ed97 7bf4 	vldr	d7, [r7, #976]	; 0x3d0
 8003758:	ee36 7b07 	vadd.f64	d7, d6, d7
 800375c:	eeb0 0b47 	vmov.f64	d0, d7
 8003760:	f010 fe9a 	bl	8014498 <sqrt>
 8003764:	eeb0 7b40 	vmov.f64	d7, d0
 8003768:	ee37 6b07 	vadd.f64	d6, d7, d7
 800376c:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8003776:	4413      	add	r3, r2
 8003778:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800377c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003780:	ed83 7b00 	vstr	d7, [r3]
							break;
 8003784:	e000      	b.n	8003788 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x860>
								continue;
 8003786:	bf00      	nop
					for(int k=0;k<nChannels;k++)
 8003788:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800378c:	3301      	adds	r3, #1
 800378e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8003792:	e711      	b.n	80035b8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x690>
				for(int i=0;i<nPixels;i++)
 8003794:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8003798:	3301      	adds	r3, #1
 800379a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800379e:	e701      	b.n	80035a4 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x67c>
 80037a0:	0c924223 	.word	0x0c924223
 80037a4:	3bc79ca1 	.word	0x3bc79ca1
 80037a8:	24000012 	.word	0x24000012
 80037ac:	240000e0 	.word	0x240000e0
 80037b0:	240000f8 	.word	0x240000f8
 80037b4:	a0b5ed8d 	.word	0xa0b5ed8d
 80037b8:	3eb0c6f7 	.word	0x3eb0c6f7
						}
					}
			// prepare the components of the large linear system
			ImDxy.Multiply(Psi_1st,imdx,imdy);
 80037bc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80037c0:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80037c4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80037c8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80037cc:	f002 f8f2 	bl	80059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>
			ImDx2.Multiply(Psi_1st,imdx,imdx);
 80037d0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80037d4:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80037d8:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80037dc:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80037e0:	f002 f8e8 	bl	80059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>
			ImDy2.Multiply(Psi_1st,imdy,imdy);
 80037e4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80037e8:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80037ec:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80037f0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80037f4:	f002 f8de 	bl	80059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>
			ImDtDx.Multiply(Psi_1st,imdx,imdt);
 80037f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80037fc:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8003800:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003804:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003808:	f002 f8d4 	bl	80059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>
			ImDtDy.Multiply(Psi_1st,imdy,imdt);
 800380c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003810:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8003814:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003818:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800381c:	f002 f8ca 	bl	80059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>

			if(nChannels>1)
 8003820:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8003824:	2b01      	cmp	r3, #1
 8003826:	dd28      	ble.n	800387a <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x952>
			{
				ImDxy.collapse(imdxy);
 8003828:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800382c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003830:	2200      	movs	r2, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f002 f923 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
				ImDx2.collapse(imdx2);
 8003838:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800383c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f002 f91b 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
				ImDy2.collapse(imdy2);
 8003848:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800384c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003850:	2200      	movs	r2, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f002 f913 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
				ImDtDx.collapse(imdtdx);
 8003858:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800385c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003860:	2200      	movs	r2, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f002 f90b 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
				ImDtDy.collapse(imdtdy);
 8003868:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 800386c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003870:	2200      	movs	r2, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f002 f903 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
 8003878:	e027      	b.n	80038ca <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x9a2>
			}
			else
			{
				imdxy.copyData(ImDxy);
 800387a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800387e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd f903 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
				imdx2.copyData(ImDx2);
 800388a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800388e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd f8fb 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
				imdy2.copyData(ImDy2);
 800389a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800389e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd f8f3 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
				imdtdx.copyData(ImDtDx);
 80038aa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd f8eb 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
				imdtdy.copyData(ImDtDy);
 80038ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80038be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd f8e3 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
			}
			// laplacian filtering of the current flow field
		    Laplacian(foo1,u,Phi_1st);
 80038ca:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80038ce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80038d2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80038d6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	f000 ffc0 	bl	8004860 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_>
			Laplacian(foo2,v,Phi_1st);
 80038e0:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffb7 	bl	8004860 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_>

			for(int i=0;i<nPixels;i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80038f8:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80038fc:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003900:	429a      	cmp	r2, r3
 8003902:	da65      	bge.n	80039d0 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xaa8>
			{
				imdtdx.data()[i] = -imdtdx.data()[i]-alpha*foo1.data()[i];
 8003904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fe82 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800390e:	4603      	mov	r3, r0
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	ed93 7b00 	vldr	d7, [r3]
 800391e:	eeb1 9b47 	vneg.f64	d9, d7
 8003922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fe73 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800392c:	4603      	mov	r3, r0
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	ed93 6b00 	vldr	d6, [r3]
 800393c:	463b      	mov	r3, r7
 800393e:	ed93 7b00 	vldr	d7, [r3]
 8003942:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003946:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fe61 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003950:	4603      	mov	r3, r0
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	ee39 7b48 	vsub.f64	d7, d9, d8
 8003960:	ed83 7b00 	vstr	d7, [r3]
				imdtdy.data()[i] = -imdtdy.data()[i]-alpha*foo2.data()[i];
 8003964:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fe52 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800396e:	4603      	mov	r3, r0
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	ed93 7b00 	vldr	d7, [r3]
 800397e:	eeb1 9b47 	vneg.f64	d9, d7
 8003982:	f107 0318 	add.w	r3, r7, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fe43 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800398c:	4603      	mov	r3, r0
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	ed93 6b00 	vldr	d6, [r3]
 800399c:	463b      	mov	r3, r7
 800399e:	ed93 7b00 	vldr	d7, [r3]
 80039a2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80039a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fe31 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	ee39 7b48 	vsub.f64	d7, d9, d8
 80039c0:	ed83 7b00 	vstr	d7, [r3]
			for(int i=0;i<nPixels;i++)
 80039c4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80039c8:	3301      	adds	r3, #1
 80039ca:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80039ce:	e793      	b.n	80038f8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x9d0>
			}

			// here we start SOR

			// set omega
			double omega = 1.8;
 80039d0:	f20f 739c 	addw	r3, pc, #1948	; 0x79c
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368

			du.reset();
 80039dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f840 	bl	8000a66 <_ZN5ImageIdE5resetEv>
			dv.reset();
 80039e6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f83b 	bl	8000a66 <_ZN5ImageIdE5resetEv>

			for(int k = 0; k<nSORIterations; k++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80039f6:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80039fa:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f280 829c 	bge.w	8003f3c <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1014>
				for(int i = 0; i<imHeight; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8003a0a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8003a0e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f280 828c 	bge.w	8003f30 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1008>
					for(int j = 0; j<imWidth; j++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8003a1e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003a22:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f280 827c 	bge.w	8003f24 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xffc>
					{
						int offset = i * imWidth+j;
 8003a2c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003a30:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
						double sigma1 = 0, sigma2 = 0, coeff = 0;
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8003a4e:	e9c1 2300 	strd	r2, r3, [r1]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
                        double _weight;


						if(j>0)
 8003a6a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	dd4c      	ble.n	8003b0c <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xbe4>
						{
                            _weight = phiData[offset-1];
 8003a72:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003a76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003a82:	4413      	add	r3, r2
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
							sigma1  += _weight*du.data()[offset-1];
 8003a8c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fdbe 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003a9e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003aa2:	440b      	add	r3, r1
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	ed93 6b00 	vldr	d6, [r3]
 8003aac:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003ab0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ab4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003ab8:	ed93 6b00 	vldr	d6, [r3]
 8003abc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ac0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003ac4:	ed83 7b00 	vstr	d7, [r3]
							sigma2  += _weight*dv.data()[offset-1];
 8003ac8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fda0 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003ada:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003ade:	440b      	add	r3, r1
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	ed93 6b00 	vldr	d6, [r3]
 8003ae8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003aec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003af0:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003af4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003af8:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
							coeff   += _weight;
 8003afc:	ed97 6bfc 	vldr	d6, [r7, #1008]	; 0x3f0
 8003b00:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b08:	ed87 7bfc 	vstr	d7, [r7, #1008]	; 0x3f0
						}
						if(j<imWidth-1)
 8003b0c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003b10:	3b01      	subs	r3, #1
 8003b12:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003b16:	429a      	cmp	r2, r3
 8003b18:	da45      	bge.n	8003ba6 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xc7e>
						{
                            _weight = phiData[offset];
 8003b1a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003b24:	4413      	add	r3, r2
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
							sigma1 += _weight*du.data()[offset+1];
 8003b2e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fd6d 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003b40:	3301      	adds	r3, #1
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	ed93 6b00 	vldr	d6, [r3]
 8003b4a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b52:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003b56:	ed93 6b00 	vldr	d6, [r3]
 8003b5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b5e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003b62:	ed83 7b00 	vstr	d7, [r3]
							sigma2 += _weight*dv.data()[offset+1];
 8003b66:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fd51 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003b70:	4603      	mov	r3, r0
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003b78:	3301      	adds	r3, #1
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	ed93 6b00 	vldr	d6, [r3]
 8003b82:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003b86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b8a:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003b8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b92:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
							coeff   += _weight;
 8003b96:	ed97 6bfc 	vldr	d6, [r7, #1008]	; 0x3f0
 8003b9a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003b9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ba2:	ed87 7bfc 	vstr	d7, [r7, #1008]	; 0x3f0
						}
						if(i>0)
 8003ba6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	dd4c      	ble.n	8003c48 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xd20>
						{
                            _weight = phiData[offset-imWidth];
 8003bae:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003bb2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003bbe:	4413      	add	r3, r2
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
							sigma1 += _weight*du.data()[offset-imWidth];
 8003bc8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fd20 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003bda:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003bde:	1acb      	subs	r3, r1, r3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	ed93 6b00 	vldr	d6, [r3]
 8003be8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003bec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003bf0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003bf4:	ed93 6b00 	vldr	d6, [r3]
 8003bf8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bfc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003c00:	ed83 7b00 	vstr	d7, [r3]
							sigma2 += _weight*dv.data()[offset-imWidth];
 8003c04:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd fd02 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003c16:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003c1a:	1acb      	subs	r3, r1, r3
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	ed93 6b00 	vldr	d6, [r3]
 8003c24:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003c28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c2c:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003c30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c34:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
							coeff   += _weight;
 8003c38:	ed97 6bfc 	vldr	d6, [r7, #1008]	; 0x3f0
 8003c3c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003c40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c44:	ed87 7bfc 	vstr	d7, [r7, #1008]	; 0x3f0
						}
						if(i<imHeight-1)
 8003c48:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	da49      	bge.n	8003cea <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xdc2>
						{
                            _weight = phiData[offset];
 8003c56:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003c60:	4413      	add	r3, r2
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
							sigma1  += _weight*du.data()[offset+imWidth];
 8003c6a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fccf 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003c7c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003c80:	440b      	add	r3, r1
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	ed93 6b00 	vldr	d6, [r3]
 8003c8a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003c8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c92:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003c96:	ed93 6b00 	vldr	d6, [r3]
 8003c9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c9e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003ca2:	ed83 7b00 	vstr	d7, [r3]
							sigma2  += _weight*dv.data()[offset+imWidth];
 8003ca6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fcb1 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8003cb8:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003cbc:	440b      	add	r3, r1
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	ed93 6b00 	vldr	d6, [r3]
 8003cc6:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003cca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003cce:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003cd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cd6:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
							coeff   += _weight;
 8003cda:	ed97 6bfc 	vldr	d6, [r7, #1008]	; 0x3f0
 8003cde:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8003ce2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ce6:	ed87 7bfc 	vstr	d7, [r7, #1008]	; 0x3f0
						}
						sigma1 *= -alpha;
 8003cea:	463b      	mov	r3, r7
 8003cec:	ed93 7b00 	vldr	d7, [r3]
 8003cf0:	eeb1 7b47 	vneg.f64	d7, d7
 8003cf4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003cf8:	ed93 6b00 	vldr	d6, [r3]
 8003cfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d00:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003d04:	ed83 7b00 	vstr	d7, [r3]
						sigma2 *= -alpha;
 8003d08:	463b      	mov	r3, r7
 8003d0a:	ed93 7b00 	vldr	d7, [r3]
 8003d0e:	eeb1 7b47 	vneg.f64	d7, d7
 8003d12:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003d16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d1a:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
						coeff *= alpha;
 8003d1e:	463b      	mov	r3, r7
 8003d20:	ed97 6bfc 	vldr	d6, [r7, #1008]	; 0x3f0
 8003d24:	ed93 7b00 	vldr	d7, [r3]
 8003d28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d2c:	ed87 7bfc 	vstr	d7, [r7, #1008]	; 0x3f0
						 // compute du
						sigma1 += imdxy.data()[offset]*dv.data()[offset];
 8003d30:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fd fc6c 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	ed93 8b00 	vldr	d8, [r3]
 8003d4a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fc5f 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003d54:	4603      	mov	r3, r0
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	ed93 7b00 	vldr	d7, [r3]
 8003d64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003d68:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003d6c:	ed93 6b00 	vldr	d6, [r3]
 8003d70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d74:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003d78:	ed83 7b00 	vstr	d7, [r3]
						du.data()[offset] = (1-omega)*du.data()[offset] + omega/(imdx2.data()[offset] + alpha*0.05 + coeff)*(imdtdx.data()[offset] - sigma1);
 8003d7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003d80:	ed97 7bda 	vldr	d7, [r7, #872]	; 0x368
 8003d84:	ee36 8b47 	vsub.f64	d8, d6, d7
 8003d88:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fc40 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	ed93 7b00 	vldr	d7, [r3]
 8003da2:	ee28 9b07 	vmul.f64	d9, d8, d7
 8003da6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fc31 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003db0:	4603      	mov	r3, r0
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	ed93 6b00 	vldr	d6, [r3]
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	ed93 7b00 	vldr	d7, [r3]
 8003dc6:	ed9f 5be2 	vldr	d5, [pc, #904]	; 8004150 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1228>
 8003dca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003dce:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003dd2:	ed97 7bfc 	vldr	d7, [r7, #1008]	; 0x3f0
 8003dd6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dda:	ed97 6bda 	vldr	d6, [r7, #872]	; 0x368
 8003dde:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8003de2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd fc13 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003dec:	4603      	mov	r3, r0
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	ed93 6b00 	vldr	d6, [r3]
 8003dfc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003e00:	ed93 7b00 	vldr	d7, [r3]
 8003e04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003e08:	ee28 8b07 	vmul.f64	d8, d8, d7
 8003e0c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fbfe 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	ee39 7b08 	vadd.f64	d7, d9, d8
 8003e26:	ed83 7b00 	vstr	d7, [r3]
						// compute dv
						sigma2 += imdxy.data()[offset]*du.data()[offset];
 8003e2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd fbef 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003e34:	4603      	mov	r3, r0
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	ed93 8b00 	vldr	d8, [r3]
 8003e44:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fbe2 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	ed93 7b00 	vldr	d7, [r3]
 8003e5e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003e62:	ed97 6bfe 	vldr	d6, [r7, #1016]	; 0x3f8
 8003e66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e6a:	ed87 7bfe 	vstr	d7, [r7, #1016]	; 0x3f8
						dv.data()[offset] = (1-omega)*dv.data()[offset] + omega/(imdy2.data()[offset] + alpha*0.05 + coeff)*(imdtdy.data()[offset] - sigma2);
 8003e6e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003e72:	ed97 7bda 	vldr	d7, [r7, #872]	; 0x368
 8003e76:	ee36 8b47 	vsub.f64	d8, d6, d7
 8003e7a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fbc7 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003e84:	4603      	mov	r3, r0
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	ed93 7b00 	vldr	d7, [r3]
 8003e94:	ee28 9b07 	vmul.f64	d9, d8, d7
 8003e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fbb8 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	ed93 6b00 	vldr	d6, [r3]
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	ed93 7b00 	vldr	d7, [r3]
 8003eb8:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8004150 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1228>
 8003ebc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003ec0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ec4:	ed97 7bfc 	vldr	d7, [r7, #1008]	; 0x3f0
 8003ec8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ecc:	ed97 6bda 	vldr	d6, [r7, #872]	; 0x368
 8003ed0:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8003ed4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fd fb9a 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	ed93 6b00 	vldr	d6, [r3]
 8003eee:	ed97 7bfe 	vldr	d7, [r7, #1016]	; 0x3f8
 8003ef2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ef6:	ee28 8b07 	vmul.f64	d8, d8, d7
 8003efa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd fb87 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8003f04:	4603      	mov	r3, r0
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	ee39 7b08 	vadd.f64	d7, d9, d8
 8003f14:	ed83 7b00 	vstr	d7, [r3]
					for(int j = 0; j<imWidth; j++)
 8003f18:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8003f22:	e57c      	b.n	8003a1e <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xaf6>
				for(int i = 0; i<imHeight; i++)
 8003f24:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8003f2e:	e56c      	b.n	8003a0a <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xae2>
			for(int k = 0; k<nSORIterations; k++)
 8003f30:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8003f34:	3301      	adds	r3, #1
 8003f36:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8003f3a:	e55c      	b.n	80039f6 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0xace>
		for(int hh=0;hh<nInnerFPIterations;hh++)
 8003f3c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8003f46:	f7ff b91d 	b.w	8003184 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x25c>
					}
		}
		u.Add(du);
 8003f4a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8003f4e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003f52:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8003f56:	4611      	mov	r1, r2
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f001 fe8c 	bl	8005c76 <_ZN5ImageIdE3AddIdEEvRKS_IT_E>
		v.Add(dv);
 8003f5e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003f62:	4619      	mov	r1, r3
 8003f64:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8003f68:	f001 fe85 	bl	8005c76 <_ZN5ImageIdE3AddIdEEvRKS_IT_E>
		if(interpolation == Bilinear)
 8003f6c:	4b7c      	ldr	r3, [pc, #496]	; (8004160 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1238>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d119      	bne.n	8003fa8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1080>
			warpFL(warpIm2,Im1,Im2,u,v);
 8003f74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003f78:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8003f7c:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8003f80:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8003f84:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8003f88:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8003f8c:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 8003f90:	f2a0 4024 	subw	r0, r0, #1060	; 0x424
 8003f94:	f8d7 4450 	ldr.w	r4, [r7, #1104]	; 0x450
 8003f98:	9400      	str	r4, [sp, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6809      	ldr	r1, [r1, #0]
 8003fa0:	6800      	ldr	r0, [r0, #0]
 8003fa2:	f7fe fea7 	bl	8002cf4 <_ZN11OpticalFlow6warpFLER5ImageIdERKS1_S4_S4_S4_>
 8003fa6:	e01f      	b.n	8003fe8 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x10c0>
		else
		{
			Im2.warpImageBicubicRef(Im1,warpIm2,u,v);
 8003fa8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003fac:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8003fb0:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8003fb4:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8003fb8:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8003fbc:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8003fc0:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 8003fc4:	f5a0 6084 	sub.w	r0, r0, #1056	; 0x420
 8003fc8:	f8d7 4450 	ldr.w	r4, [r7, #1104]	; 0x450
 8003fcc:	9400      	str	r4, [sp, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	6800      	ldr	r0, [r0, #0]
 8003fd6:	f001 fe89 	bl	8005cec <_ZNK5ImageIdE19warpImageBicubicRefIdEEvRKS0_RS0_RKS_IT_ES8_>
			warpIm2.threshold();
 8003fda:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003fde:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	f001 fee4 	bl	8005db0 <_ZN5ImageIdE9thresholdEv>
		}

		//Im2.warpImageBicubicRef(Im1,warpIm2,BicubicCoeff,u,v);

		// estimate noise level
		switch(noiseModel)
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x123c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x10ce>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d010      	beq.n	8004016 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x10ee>
 8003ff4:	e01c      	b.n	8004030 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1108>
		{
		case GMixture:
			estGaussianMixture(Im1,warpIm2,GMPara);
 8003ff6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003ffa:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8003ffe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004002:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8004006:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8004158 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1230>
 800400a:	4a57      	ldr	r2, [pc, #348]	; (8004168 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1240>)
 800400c:	6809      	ldr	r1, [r1, #0]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	f000 f8b2 	bl	8004178 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured>
			break;
 8004014:	e00c      	b.n	8004030 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1108>
		case Lap:
			estLaplacianNoise(Im1,warpIm2,LapPara);
 8004016:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800401a:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 800401e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004022:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8004026:	4a51      	ldr	r2, [pc, #324]	; (800416c <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1244>)
 8004028:	6809      	ldr	r1, [r1, #0]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	f000 fb20 	bl	8004670 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE>
	for(int count=0;count<nOuterFPIterations;count++)
 8004030:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8004034:	3301      	adds	r3, #1
 8004036:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800403a:	f7ff b86f 	b.w	800311c <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii+0x1f4>
	DImage foo1,foo2;
 800403e:	f107 0318 	add.w	r3, r7, #24
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fc88 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004048:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fc83 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage ImDxy,ImDx2,ImDy2,ImDtDx,ImDtDy;
 8004052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fc7e 	bl	8000958 <_ZN5ImageIdED1Ev>
 800405c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004060:	4618      	mov	r0, r3
 8004062:	f7fc fc79 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004066:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fc74 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004070:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fc6f 	bl	8000958 <_ZN5ImageIdED1Ev>
 800407a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fc6a 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage imdxy,imdx2,imdy2,imdtdx,imdtdy;
 8004084:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fc65 	bl	8000958 <_ZN5ImageIdED1Ev>
 800408e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fc60 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004098:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc fc5b 	bl	8000958 <_ZN5ImageIdED1Ev>
 80040a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fc56 	bl	8000958 <_ZN5ImageIdED1Ev>
 80040ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc fc51 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage Psi_1st(imWidth,imHeight,nChannels);
 80040b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fc4c 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage Phi_1st(imWidth,imHeight);
 80040c0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fc47 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage vx(imWidth,imHeight),vy(imWidth,imHeight);
 80040ca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fc42 	bl	8000958 <_ZN5ImageIdED1Ev>
 80040d4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fc3d 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage ux(imWidth,imHeight),uy(imWidth,imHeight);
 80040de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fc38 	bl	8000958 <_ZN5ImageIdED1Ev>
 80040e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc fc33 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage uu(imWidth,imHeight),vv(imWidth,imHeight);
 80040f2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fc2e 	bl	8000958 <_ZN5ImageIdED1Ev>
 80040fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc fc29 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage du(imWidth,imHeight),dv(imWidth,imHeight);
 8004106:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fc24 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004110:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004114:	4618      	mov	r0, r3
 8004116:	f7fc fc1f 	bl	8000958 <_ZN5ImageIdED1Ev>
	DImage mask,imdx,imdy,imdt;
 800411a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fc1a 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004124:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fc15 	bl	8000958 <_ZN5ImageIdED1Ev>
 800412e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fc10 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004138:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc fc0b 	bl	8000958 <_ZN5ImageIdED1Ev>
		}
	}

}
 8004142:	bf00      	nop
 8004144:	f207 4734 	addw	r7, r7, #1076	; 0x434
 8004148:	46bd      	mov	sp, r7
 800414a:	ecbd 8b04 	vpop	{d8-d9}
 800414e:	bd90      	pop	{r4, r7, pc}
 8004150:	9999999a 	.word	0x9999999a
 8004154:	3fa99999 	.word	0x3fa99999
 8004158:	cccccccd 	.word	0xcccccccd
 800415c:	3feccccc 	.word	0x3feccccc
 8004160:	240000dd 	.word	0x240000dd
 8004164:	24000012 	.word	0x24000012
 8004168:	240000e0 	.word	0x240000e0
 800416c:	240000f8 	.word	0x240000f8
 8004170:	cccccccd 	.word	0xcccccccd
 8004174:	3ffccccc 	.word	0x3ffccccc

08004178 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured>:
	}// end of outer fixed point iteration
	delete rou;
}

void OpticalFlow::estGaussianMixture(const DImage& Im1,const DImage& Im2,GaussianMixture& para,double prior)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	ed2d 8b04 	vpush	{d8-d9}
 800417e:	b0a7      	sub	sp, #156	; 0x9c
 8004180:	af00      	add	r7, sp, #0
 8004182:	6178      	str	r0, [r7, #20]
 8004184:	6139      	str	r1, [r7, #16]
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	ed87 0b00 	vstr	d0, [r7]
	int nIterations = 3, nChannels = Im1.nchannels();
 800418c:	2303      	movs	r3, #3
 800418e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004190:	6978      	ldr	r0, [r7, #20]
 8004192:	f7fd fa32 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004196:	67b8      	str	r0, [r7, #120]	; 0x78
	DImage weight1(Im1),weight2(Im1);
 8004198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fe54 	bl	8005e4c <_ZN5ImageIdEC1ERKS0_>
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 fe4e 	bl	8005e4c <_ZN5ImageIdEC1ERKS0_>
	double *total1,*total2;
	total1 = new double[nChannels];
 80041b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d201      	bcs.n	80041bc <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x44>
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	e001      	b.n	80041c0 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x48>
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c0:	4618      	mov	r0, r3
 80041c2:	f00f fbeb 	bl	801399c <_Znaj>
 80041c6:	4603      	mov	r3, r0
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74
	total2 = new double[nChannels];
 80041ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d0:	d201      	bcs.n	80041d6 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x5e>
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	e001      	b.n	80041da <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x62>
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041da:	4618      	mov	r0, r3
 80041dc:	f00f fbde 	bl	801399c <_Znaj>
 80041e0:	4603      	mov	r3, r0
 80041e2:	673b      	str	r3, [r7, #112]	; 0x70
	for(int count = 0; count<nIterations; count++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041f0:	429a      	cmp	r2, r3
 80041f2:	f280 8224 	bge.w	800463e <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x4c6>
	{
		double temp;
		memset(total1,0,sizeof(double)*nChannels);
 80041f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	461a      	mov	r2, r3
 80041fc:	2100      	movs	r1, #0
 80041fe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004200:	f010 f9bc 	bl	801457c <memset>
		memset(total2,0,sizeof(double)*nChannels);
 8004204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	461a      	mov	r2, r3
 800420a:	2100      	movs	r1, #0
 800420c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800420e:	f010 f9b5 	bl	801457c <memset>

		// E step
		for(int i = 0;i<weight1.npixels();i++)
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f803 	bl	8005228 <_ZNK5ImageIdE7npixelsEv>
 8004222:	4602      	mov	r2, r0
 8004224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004228:	4293      	cmp	r3, r2
 800422a:	bfb4      	ite	lt
 800422c:	2301      	movlt	r3, #1
 800422e:	2300      	movge	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80df 	beq.w	80043f6 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x27e>
			for(int k=0;k<nChannels;k++)
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800423e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	429a      	cmp	r2, r3
 8004246:	f280 80d0 	bge.w	80043ea <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x272>
			{
				int offset = i*weight1.nchannels()+k;
 800424a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd f9d3 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004254:	4602      	mov	r2, r0
 8004256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004262:	4413      	add	r3, r2
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
				temp = Im1[offset]-Im2[offset];
 8004266:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f001 fe15 	bl	8005e98 <_ZNK5ImageIdEixEi>
 800426e:	4603      	mov	r3, r0
 8004270:	ed93 8b00 	vldr	d8, [r3]
 8004274:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004276:	6938      	ldr	r0, [r7, #16]
 8004278:	f001 fe0e 	bl	8005e98 <_ZNK5ImageIdEixEi>
 800427c:	4603      	mov	r3, r0
 800427e:	ed93 7b00 	vldr	d7, [r3]
 8004282:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004286:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
				temp *= temp;
 800428a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800428e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8004292:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
				weight1[offset] = para.Gaussian(temp,0,k)*para.alpha[k];
 8004296:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800429a:	2100      	movs	r1, #0
 800429c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7fe fbc9 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 80042a6:	eeb0 9b40 	vmov.f64	d9, d0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	ed93 8b00 	vldr	d8, [r3]
 80042ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fdf9 	bl	8005eb8 <_ZN5ImageIdEixEi>
 80042c6:	4603      	mov	r3, r0
 80042c8:	ee29 7b08 	vmul.f64	d7, d9, d8
 80042cc:	ed83 7b00 	vstr	d7, [r3]
				weight2[offset] = para.Gaussian(temp,1,k)*(1-para.alpha[k]);
 80042d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042d4:	2101      	movs	r1, #1
 80042d6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7fe fbac 	bl	8002a38 <_ZNK15GaussianMixture8GaussianEdii>
 80042e0:	eeb0 9b40 	vmov.f64	d9, d0
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	ed93 7b00 	vldr	d7, [r3]
 80042f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80042f8:	ee36 8b47 	vsub.f64	d8, d6, d7
 80042fc:	f107 031c 	add.w	r3, r7, #28
 8004300:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fdd8 	bl	8005eb8 <_ZN5ImageIdEixEi>
 8004308:	4603      	mov	r3, r0
 800430a:	ee29 7b08 	vmul.f64	d7, d9, d8
 800430e:	ed83 7b00 	vstr	d7, [r3]
				temp = weight1[offset]+weight2[offset];
 8004312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004316:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fdcd 	bl	8005eb8 <_ZN5ImageIdEixEi>
 800431e:	4603      	mov	r3, r0
 8004320:	ed93 8b00 	vldr	d8, [r3]
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fdc4 	bl	8005eb8 <_ZN5ImageIdEixEi>
 8004330:	4603      	mov	r3, r0
 8004332:	ed93 7b00 	vldr	d7, [r3]
 8004336:	ee38 7b07 	vadd.f64	d7, d8, d7
 800433a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
				weight1[offset]/=temp;
 800433e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004342:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fdb7 	bl	8005eb8 <_ZN5ImageIdEixEi>
 800434a:	4603      	mov	r3, r0
 800434c:	ed93 5b00 	vldr	d5, [r3]
 8004350:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004354:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004358:	ed83 7b00 	vstr	d7, [r3]
				weight2[offset]/=temp;
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fda8 	bl	8005eb8 <_ZN5ImageIdEixEi>
 8004368:	4603      	mov	r3, r0
 800436a:	ed93 5b00 	vldr	d5, [r3]
 800436e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004372:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004376:	ed83 7b00 	vstr	d7, [r3]
				total1[k] += weight1[offset];
 800437a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800437e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fd99 	bl	8005eb8 <_ZN5ImageIdEixEi>
 8004386:	4603      	mov	r3, r0
 8004388:	ed93 6b00 	vldr	d6, [r3]
 800438c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004394:	4413      	add	r3, r2
 8004396:	ed93 7b00 	vldr	d7, [r3]
 800439a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043a2:	4413      	add	r3, r2
 80043a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043a8:	ed83 7b00 	vstr	d7, [r3]
				total2[k] += weight2[offset];
 80043ac:	f107 031c 	add.w	r3, r7, #28
 80043b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 fd80 	bl	8005eb8 <_ZN5ImageIdEixEi>
 80043b8:	4603      	mov	r3, r0
 80043ba:	ed93 6b00 	vldr	d6, [r3]
 80043be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80043c6:	4413      	add	r3, r2
 80043c8:	ed93 7b00 	vldr	d7, [r3]
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80043d4:	4413      	add	r3, r2
 80043d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043da:	ed83 7b00 	vstr	d7, [r3]
			for(int k=0;k<nChannels;k++)
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e2:	3301      	adds	r3, #1
 80043e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043e8:	e729      	b.n	800423e <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0xc6>
		for(int i = 0;i<weight1.npixels();i++)
 80043ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ee:	3301      	adds	r3, #1
 80043f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f4:	e710      	b.n	8004218 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0xa0>
			}

		// M step
		para.reset();
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fe faca 	bl	8002990 <_ZN15GaussianMixture5resetEv>


		for(int i = 0;i<weight1.npixels();i++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004402:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004406:	4618      	mov	r0, r3
 8004408:	f000 ff0e 	bl	8005228 <_ZNK5ImageIdE7npixelsEv>
 800440c:	4602      	mov	r2, r0
 800440e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004412:	4293      	cmp	r3, r2
 8004414:	bfb4      	ite	lt
 8004416:	2301      	movlt	r3, #1
 8004418:	2300      	movge	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d077      	beq.n	8004510 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x398>
			for(int k =0;k<nChannels;k++)
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004426:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800442a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800442c:	429a      	cmp	r2, r3
 800442e:	da69      	bge.n	8004504 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x38c>
			{
				int offset = i*weight1.nchannels()+k;
 8004430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd f8e0 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 800443a:	4602      	mov	r2, r0
 800443c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004448:	4413      	add	r3, r2
 800444a:	66fb      	str	r3, [r7, #108]	; 0x6c
				temp = Im1[offset]-Im2[offset];
 800444c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f001 fd22 	bl	8005e98 <_ZNK5ImageIdEixEi>
 8004454:	4603      	mov	r3, r0
 8004456:	ed93 8b00 	vldr	d8, [r3]
 800445a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800445c:	6938      	ldr	r0, [r7, #16]
 800445e:	f001 fd1b 	bl	8005e98 <_ZNK5ImageIdEixEi>
 8004462:	4603      	mov	r3, r0
 8004464:	ed93 7b00 	vldr	d7, [r3]
 8004468:	ee38 7b47 	vsub.f64	d7, d8, d7
 800446c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
				temp *= temp;
 8004470:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004474:	ee27 7b07 	vmul.f64	d7, d7, d7
 8004478:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
				para.sigma[k]+= weight1[offset]*temp;
 800447c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004480:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fd18 	bl	8005eb8 <_ZN5ImageIdEixEi>
 8004488:	4603      	mov	r3, r0
 800448a:	ed93 6b00 	vldr	d6, [r3]
 800448e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004492:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	ed93 7b00 	vldr	d7, [r3]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044b6:	ed83 7b00 	vstr	d7, [r3]
				para.beta[k] += weight2[offset]*temp;
 80044ba:	f107 031c 	add.w	r3, r7, #28
 80044be:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fcf9 	bl	8005eb8 <_ZN5ImageIdEixEi>
 80044c6:	4603      	mov	r3, r0
 80044c8:	ed93 6b00 	vldr	d6, [r3]
 80044cc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80044d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	ed93 7b00 	vldr	d7, [r3]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044f4:	ed83 7b00 	vstr	d7, [r3]
			for(int k =0;k<nChannels;k++)
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004502:	e790      	b.n	8004426 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x2ae>
		for(int i = 0;i<weight1.npixels();i++)
 8004504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004508:	3301      	adds	r3, #1
 800450a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800450e:	e778      	b.n	8004402 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x28a>
			}

		for(int k =0;k<nChannels;k++)
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800451a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451c:	429a      	cmp	r2, r3
 800451e:	f280 8085 	bge.w	800462c <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x4b4>
		{
			para.alpha[k] = total1[k]/(total1[k]+total2[k])*(1-prior)+0.95*prior; // regularize alpha
 8004522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800452a:	4413      	add	r3, r2
 800452c:	ed93 5b00 	vldr	d5, [r3]
 8004530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004538:	4413      	add	r3, r2
 800453a:	ed93 6b00 	vldr	d6, [r3]
 800453e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004546:	4413      	add	r3, r2
 8004548:	ed93 7b00 	vldr	d7, [r3]
 800454c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004550:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004554:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004558:	ed97 7b00 	vldr	d7, [r7]
 800455c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004560:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004564:	ed97 7b00 	vldr	d7, [r7]
 8004568:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8004660 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x4e8>
 800456c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004580:	ed83 7b00 	vstr	d7, [r3]
			para.sigma[k] = sqrt(para.sigma[k]/total1[k]);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	ed93 6b00 	vldr	d6, [r3]
 8004594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800459c:	4413      	add	r3, r2
 800459e:	ed93 7b00 	vldr	d7, [r3]
 80045a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	18d4      	adds	r4, r2, r3
 80045b2:	eeb0 0b45 	vmov.f64	d0, d5
 80045b6:	f00f ff6f 	bl	8014498 <sqrt>
 80045ba:	eeb0 7b40 	vmov.f64	d7, d0
 80045be:	ed84 7b00 	vstr	d7, [r4]
			para.beta[k]   = sqrt(para.beta[k]/total2[k])*(1-prior)+0.3*prior; // regularize beta
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	ed93 6b00 	vldr	d6, [r3]
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80045da:	4413      	add	r3, r2
 80045dc:	ed93 7b00 	vldr	d7, [r3]
 80045e0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80045e4:	eeb0 0b45 	vmov.f64	d0, d5
 80045e8:	f00f ff56 	bl	8014498 <sqrt>
 80045ec:	eeb0 6b40 	vmov.f64	d6, d0
 80045f0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80045f4:	ed97 7b00 	vldr	d7, [r7]
 80045f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80045fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004600:	ed97 7b00 	vldr	d7, [r7]
 8004604:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8004668 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x4f0>
 8004608:	ee27 7b05 	vmul.f64	d7, d7, d5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800461c:	ed83 7b00 	vstr	d7, [r3]
		for(int k =0;k<nChannels;k++)
 8004620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004624:	3301      	adds	r3, #1
 8004626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800462a:	e774      	b.n	8004516 <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x39e>
		}
		para.square();
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7fe fa6b 	bl	8002b08 <_ZN15GaussianMixture6squareEv>
	for(int count = 0; count<nIterations; count++)
 8004632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004636:	3301      	adds	r3, #1
 8004638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800463c:	e5d5      	b.n	80041ea <_ZN11OpticalFlow18estGaussianMixtureERK5ImageIdES3_R15GaussianMixtured+0x72>
	DImage weight1(Im1),weight2(Im1);
 800463e:	f107 031c 	add.w	r3, r7, #28
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc f988 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004648:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc f983 	bl	8000958 <_ZN5ImageIdED1Ev>
		count = count;
	}
}
 8004652:	bf00      	nop
 8004654:	379c      	adds	r7, #156	; 0x9c
 8004656:	46bd      	mov	sp, r7
 8004658:	ecbd 8b04 	vpop	{d8-d9}
 800465c:	bd90      	pop	{r4, r7, pc}
 800465e:	bf00      	nop
 8004660:	66666666 	.word	0x66666666
 8004664:	3fee6666 	.word	0x3fee6666
 8004668:	33333333 	.word	0x33333333
 800466c:	3fd33333 	.word	0x3fd33333

08004670 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE>:

void OpticalFlow::estLaplacianNoise(const DImage& Im1,const DImage& Im2,Vector<double>& para)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	ed2d 8b02 	vpush	{d8}
 8004676:	b08e      	sub	sp, #56	; 0x38
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	int nChannels = Im1.nchannels();
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7fc ffba 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24
	if(para.dim()!=nChannels)
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fc25 	bl	8005ed8 <_ZNK6VectorIdE3dimEv>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	4293      	cmp	r3, r2
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x3a>
		para.allocate(nChannels);
 80046a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 fc24 	bl	8005ef0 <_ZN6VectorIdE8allocateEi>
 80046a8:	e002      	b.n	80046b0 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x40>
	else
		para.reset();
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fc46 	bl	8005f3c <_ZN6VectorIdE5resetEv>
	double temp;
	Vector<double> total(nChannels);
 80046b0:	f107 0310 	add.w	r3, r7, #16
 80046b4:	2200      	movs	r2, #0
 80046b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fc54 	bl	8005f66 <_ZN6VectorIdEC1EiPKd>
	for(int k = 0;k<nChannels;k++)
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
 80046c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	429a      	cmp	r2, r3
 80046c8:	da10      	bge.n	80046ec <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x7c>
		total[k] = 0;
 80046ca:	f107 0310 	add.w	r3, r7, #16
 80046ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f95f 	bl	8005994 <_ZN6VectorIdEixEi>
 80046d6:	4601      	mov	r1, r0
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9c1 2300 	strd	r2, r3, [r1]
	for(int k = 0;k<nChannels;k++)
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	3301      	adds	r3, #1
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ea:	e7ea      	b.n	80046c2 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x52>

	for(int i =0;i<Im1.npixels();i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fd99 	bl	8005228 <_ZNK5ImageIdE7npixelsEv>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfb4      	ite	lt
 80046fe:	2301      	movlt	r3, #1
 8004700:	2300      	movge	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05a      	beq.n	80047be <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x14e>
		for(int k = 0;k<nChannels;k++)
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	429a      	cmp	r2, r3
 8004712:	da50      	bge.n	80047b6 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x146>
		{
			int offset = i*nChannels+k;
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471e:	4413      	add	r3, r2
 8004720:	623b      	str	r3, [r7, #32]
			temp= fabs(Im1.data()[offset]-Im2.data()[offset]);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fd8c 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8004728:	4603      	mov	r3, r0
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	ed93 8b00 	vldr	d8, [r3]
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f000 fd82 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 800473c:	4603      	mov	r3, r0
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	ed93 7b00 	vldr	d7, [r3]
 800474a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800474e:	eeb0 7bc7 	vabs.f64	d7, d7
 8004752:	ed87 7b06 	vstr	d7, [r7, #24]
			if(temp>0 && temp<1000000)
 8004756:	ed97 7b06 	vldr	d7, [r7, #24]
 800475a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	dd24      	ble.n	80047ae <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x13e>
 8004764:	ed97 7b06 	vldr	d7, [r7, #24]
 8004768:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004850 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x1e0>
 800476c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d51b      	bpl.n	80047ae <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x13e>
			{
				para[k] += temp;
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f001 f90b 	bl	8005994 <_ZN6VectorIdEixEi>
 800477e:	4603      	mov	r3, r0
 8004780:	ed93 6b00 	vldr	d6, [r3]
 8004784:	ed97 7b06 	vldr	d7, [r7, #24]
 8004788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800478c:	ed83 7b00 	vstr	d7, [r3]
				total[k]++;
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f8fc 	bl	8005994 <_ZN6VectorIdEixEi>
 800479c:	4603      	mov	r3, r0
 800479e:	ed93 7b00 	vldr	d7, [r3]
 80047a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80047a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047aa:	ed83 7b00 	vstr	d7, [r3]
		for(int k = 0;k<nChannels;k++)
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	3301      	adds	r3, #1
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	e7aa      	b.n	800470c <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x9c>
	for(int i =0;i<Im1.npixels();i++)
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	3301      	adds	r3, #1
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
 80047bc:	e798      	b.n	80046f0 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x80>
			}
		}
	for(int k = 0;k<nChannels;k++)
 80047be:	2300      	movs	r3, #0
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	429a      	cmp	r2, r3
 80047c8:	da35      	bge.n	8004836 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x1c6>
	{
		if(total[k]==0)
 80047ca:	f107 0310 	add.w	r3, r7, #16
 80047ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f8df 	bl	8005994 <_ZN6VectorIdEixEi>
 80047d6:	4603      	mov	r3, r0
 80047d8:	ed93 7b00 	vldr	d7, [r3]
 80047dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80047e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x196>
		{
			//cout<<"All the pixels are invalid in estimation Laplacian noise!!!"<<endl;
			//cout<<"Something severely wrong happened!!!"<<endl;
			para[k] = 0.001;
 80047f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f001 f8ce 	bl	8005994 <_ZN6VectorIdEixEi>
 80047f8:	4601      	mov	r1, r0
 80047fa:	a317      	add	r3, pc, #92	; (adr r3, 8004858 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x1e8>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	e9c1 2300 	strd	r2, r3, [r1]
 8004804:	e013      	b.n	800482e <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x1be>
		}
		else
			para[k]/=total[k];
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480c:	4618      	mov	r0, r3
 800480e:	f001 f8c1 	bl	8005994 <_ZN6VectorIdEixEi>
 8004812:	4603      	mov	r3, r0
 8004814:	ed93 8b00 	vldr	d8, [r3]
 8004818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f001 f8ba 	bl	8005994 <_ZN6VectorIdEixEi>
 8004820:	4603      	mov	r3, r0
 8004822:	ed93 6b00 	vldr	d6, [r3]
 8004826:	ee86 7b08 	vdiv.f64	d7, d6, d8
 800482a:	ed83 7b00 	vstr	d7, [r3]
	for(int k = 0;k<nChannels;k++)
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	3301      	adds	r3, #1
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
 8004834:	e7c5      	b.n	80047c2 <_ZN11OpticalFlow17estLaplacianNoiseERK5ImageIdES3_R6VectorIdE+0x152>
	Vector<double> total(nChannels);
 8004836:	f107 0310 	add.w	r3, r7, #16
 800483a:	4618      	mov	r0, r3
 800483c:	f001 fbc7 	bl	8005fce <_ZN6VectorIdED1Ev>
	}
}
 8004840:	bf00      	nop
 8004842:	3738      	adds	r7, #56	; 0x38
 8004844:	46bd      	mov	sp, r7
 8004846:	ecbd 8b02 	vpop	{d8}
 800484a:	bd80      	pop	{r7, pc}
 800484c:	f3af 8000 	nop.w
 8004850:	00000000 	.word	0x00000000
 8004854:	412e8480 	.word	0x412e8480
 8004858:	d2f1a9fc 	.word	0xd2f1a9fc
 800485c:	3f50624d 	.word	0x3f50624d

08004860 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_>:

void OpticalFlow::Laplacian(DImage &output, const DImage &input, const DImage& weight)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b09e      	sub	sp, #120	; 0x78
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
	if(output.matchDimension(input)==false)
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fc fedb 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2c>
		output.allocate(input);
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f001 fbad 	bl	8005fe6 <_ZN5ImageIdE8allocateIdEEvRKS_IT_E>
	output.reset();
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3310      	adds	r3, #16
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	4798      	blx	r3

	if(input.matchDimension(weight)==false)
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	68b8      	ldr	r0, [r7, #8]
 800489c:	f7fc fec5 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8142 	bne.w	8004b36 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2d6>
	{
		//cout<<"Error in image dimension matching OpticalFlow::Laplacian()!"<<endl;
		return;
	}

	const _FlowPrecision *inputData=input.data(),*weightData=weight.data();
 80048b2:	68b8      	ldr	r0, [r7, #8]
 80048b4:	f000 fcc4 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80048b8:	4603      	mov	r3, r0
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	657b      	str	r3, [r7, #84]	; 0x54
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fcbe 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80048c4:	4603      	mov	r3, r0
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
	int width=input.width(),height=input.height();
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	f7fc fd0a 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 80048d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80048d2:	68b8      	ldr	r0, [r7, #8]
 80048d4:	f7fc fe85 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 80048d8:	64b8      	str	r0, [r7, #72]	; 0x48
	DImage foo(width,height);
 80048da:	f107 0010 	add.w	r0, r7, #16
 80048de:	2301      	movs	r3, #1
 80048e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80048e4:	f000 ffc6 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	_FlowPrecision *fooData=foo.data(),*outputData=output.data();
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fc fe90 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80048f2:	4603      	mov	r3, r0
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7fc fe8a 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80048fe:	4603      	mov	r3, r0
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	643b      	str	r3, [r7, #64]	; 0x40


	// horizontal filtering
	for(int i=0;i<height;i++)
 8004904:	2300      	movs	r3, #0
 8004906:	677b      	str	r3, [r7, #116]	; 0x74
 8004908:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800490a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490c:	429a      	cmp	r2, r3
 800490e:	da32      	bge.n	8004976 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x116>
		for(int j=0;j<width-1;j++)
 8004910:	2300      	movs	r3, #0
 8004912:	673b      	str	r3, [r7, #112]	; 0x70
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	3b01      	subs	r3, #1
 8004918:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800491a:	429a      	cmp	r2, r3
 800491c:	da27      	bge.n	800496e <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x10e>
		{
			int offset=i*width+j;
 800491e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004928:	4413      	add	r3, r2
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fooData[offset]=(inputData[offset+1]-inputData[offset])*weightData[offset];
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	3301      	adds	r3, #1
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004934:	4413      	add	r3, r2
 8004936:	ed93 6b00 	vldr	d6, [r3]
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004940:	4413      	add	r3, r2
 8004942:	ed93 7b00 	vldr	d7, [r3]
 8004946:	ee36 6b47 	vsub.f64	d6, d6, d7
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004950:	4413      	add	r3, r2
 8004952:	ed93 7b00 	vldr	d7, [r3]
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495c:	4413      	add	r3, r2
 800495e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004962:	ed83 7b00 	vstr	d7, [r3]
		for(int j=0;j<width-1;j++)
 8004966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004968:	3301      	adds	r3, #1
 800496a:	673b      	str	r3, [r7, #112]	; 0x70
 800496c:	e7d2      	b.n	8004914 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0xb4>
	for(int i=0;i<height;i++)
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	3301      	adds	r3, #1
 8004972:	677b      	str	r3, [r7, #116]	; 0x74
 8004974:	e7c8      	b.n	8004908 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0xa8>
		}
	for(int i=0;i<height;i++)
 8004976:	2300      	movs	r3, #0
 8004978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	429a      	cmp	r2, r3
 8004980:	da47      	bge.n	8004a12 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x1b2>
		for(int j=0;j<width;j++)
 8004982:	2300      	movs	r3, #0
 8004984:	66bb      	str	r3, [r7, #104]	; 0x68
 8004986:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	429a      	cmp	r2, r3
 800498c:	da3d      	bge.n	8004a0a <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x1aa>
		{
			int offset=i*width+j;
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004998:	4413      	add	r3, r2
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
			if(j<width-1)
 800499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499e:	3b01      	subs	r3, #1
 80049a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a2:	429a      	cmp	r2, r3
 80049a4:	da13      	bge.n	80049ce <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x16e>
				outputData[offset]-=fooData[offset];
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ac:	4413      	add	r3, r2
 80049ae:	ed93 6b00 	vldr	d6, [r3]
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049b8:	4413      	add	r3, r2
 80049ba:	ed93 7b00 	vldr	d7, [r3]
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c4:	4413      	add	r3, r2
 80049c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049ca:	ed83 7b00 	vstr	d7, [r3]
			if(j>0)
 80049ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dd16      	ble.n	8004a02 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x1a2>
				outputData[offset]+=fooData[offset-1];
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049da:	4413      	add	r3, r2
 80049dc:	ed93 6b00 	vldr	d6, [r3]
 80049e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ec:	4413      	add	r3, r2
 80049ee:	ed93 7b00 	vldr	d7, [r3]
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049f8:	4413      	add	r3, r2
 80049fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049fe:	ed83 7b00 	vstr	d7, [r3]
		for(int j=0;j<width;j++)
 8004a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a04:	3301      	adds	r3, #1
 8004a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a08:	e7bd      	b.n	8004986 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x126>
	for(int i=0;i<height;i++)
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a10:	e7b3      	b.n	800497a <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x11a>
		}
	foo.reset();
 8004a12:	f107 0310 	add.w	r3, r7, #16
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc f825 	bl	8000a66 <_ZN5ImageIdE5resetEv>
	// vertical filtering
	for(int i=0;i<height-1;i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	3b01      	subs	r3, #1
 8004a24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a26:	429a      	cmp	r2, r3
 8004a28:	da32      	bge.n	8004a90 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x230>
		for(int j=0;j<width;j++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	da28      	bge.n	8004a88 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x228>
		{
			int offset=i*width+j;
 8004a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a40:	4413      	add	r3, r2
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
			fooData[offset]=(inputData[offset+width]-inputData[offset])*weightData[offset];
 8004a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a48:	4413      	add	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a4e:	4413      	add	r3, r2
 8004a50:	ed93 6b00 	vldr	d6, [r3]
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a5a:	4413      	add	r3, r2
 8004a5c:	ed93 7b00 	vldr	d7, [r3]
 8004a60:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a6a:	4413      	add	r3, r2
 8004a6c:	ed93 7b00 	vldr	d7, [r3]
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a76:	4413      	add	r3, r2
 8004a78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a7c:	ed83 7b00 	vstr	d7, [r3]
		for(int j=0;j<width;j++)
 8004a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a82:	3301      	adds	r3, #1
 8004a84:	663b      	str	r3, [r7, #96]	; 0x60
 8004a86:	e7d2      	b.n	8004a2e <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x1ce>
	for(int i=0;i<height-1;i++)
 8004a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a8e:	e7c7      	b.n	8004a20 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x1c0>
		}
	for(int i=0;i<height;i++)
 8004a90:	2300      	movs	r3, #0
 8004a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	da46      	bge.n	8004b2a <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2ca>
		for(int j=0;j<width;j++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	da3c      	bge.n	8004b22 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2c2>
		{
			int offset=i*width+j;
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ab2:	4413      	add	r3, r2
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
			if(i<height-1)
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	da13      	bge.n	8004ae8 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x288>
				outputData[offset]-=fooData[offset];
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac6:	4413      	add	r3, r2
 8004ac8:	ed93 6b00 	vldr	d6, [r3]
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad2:	4413      	add	r3, r2
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ade:	4413      	add	r3, r2
 8004ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ae4:	ed83 7b00 	vstr	d7, [r3]
			if(i>0)
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dd15      	ble.n	8004b1a <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2ba>
				outputData[offset]+=fooData[offset-width];
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004af4:	4413      	add	r3, r2
 8004af6:	ed93 6b00 	vldr	d6, [r3]
 8004afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b04:	4413      	add	r3, r2
 8004b06:	ed93 7b00 	vldr	d7, [r3]
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b10:	4413      	add	r3, r2
 8004b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b16:	ed83 7b00 	vstr	d7, [r3]
		for(int j=0;j<width;j++)
 8004b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b20:	e7be      	b.n	8004aa0 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x240>
	for(int i=0;i<height;i++)
 8004b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b24:	3301      	adds	r3, #1
 8004b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b28:	e7b4      	b.n	8004a94 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x234>
	DImage foo(width,height);
 8004b2a:	f107 0310 	add.w	r3, r7, #16
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb ff12 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004b34:	e000      	b.n	8004b38 <_ZN11OpticalFlow9LaplacianER5ImageIdERKS1_S4_+0x2d8>
		return;
 8004b36:	bf00      	nop
		}
}
 8004b38:	3778      	adds	r7, #120	; 0x78
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii>:
//--------------------------------------------------------------------------------------
// function to perfomr coarse to fine optical flow estimation
//--------------------------------------------------------------------------------------
void OpticalFlow::Coarse2FineFlow(DImage &vx, DImage &vy, DImage &warpI2,const DImage &Im1, const DImage &Im2, double alpha, double ratio, int minWidth,
																	 int nOuterFPIterations, int nInnerFPIterations, int nCGIterations)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b0ad      	sub	sp, #180	; 0xb4
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	61f8      	str	r0, [r7, #28]
 8004b48:	61b9      	str	r1, [r7, #24]
 8004b4a:	617a      	str	r2, [r7, #20]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004b52:	ed87 1b00 	vstr	d1, [r7]
	// first build the pyramid of the two images
	GaussianPyramid GPyramid1;
 8004b56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc fa1d 	bl	8000f9a <_ZN15GaussianPyramidC1Ev>
	GaussianPyramid GPyramid2;
 8004b60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fc fa18 	bl	8000f9a <_ZN15GaussianPyramidC1Ev>
//	if(IsDisplay)
//		cout<<"Constructing pyramid...";
	GPyramid1.ConstructPyramid(Im1,ratio,minWidth);
 8004b6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b72:	ed97 0b00 	vldr	d0, [r7]
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fc fa4d 	bl	8001018 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi>
	GPyramid2.ConstructPyramid(Im2,ratio,minWidth);
 8004b7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b86:	ed97 0b00 	vldr	d0, [r7]
 8004b8a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fc fa42 	bl	8001018 <_ZN15GaussianPyramid16ConstructPyramidERK5ImageIdEdi>
//	if(IsDisplay)
//		cout<<"done!"<<endl;

	// now iterate from the top level to the bottom
	DImage Image1,Image2,WarpImage2;
 8004b94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb feb1 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8004b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fb feac 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8004ba8:	f107 0320 	add.w	r3, r7, #32
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fb fea7 	bl	8000900 <_ZN5ImageIdEC1Ev>
	//GaussianMixture GMPara(Im1.nchannels()+2);

	// initialize noise
	switch(noiseModel){
 8004bb2:	4ba1      	ldr	r3, [pc, #644]	; (8004e38 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x2f8>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x80>
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d00a      	beq.n	8004bd4 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x94>
 8004bbe:	e034      	b.n	8004c2a <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0xea>
	case GMixture:
		GMPara.reset(Im1.nchannels()+2);
 8004bc0:	6938      	ldr	r0, [r7, #16]
 8004bc2:	f7fc fd1a 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	3302      	adds	r3, #2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	489b      	ldr	r0, [pc, #620]	; (8004e3c <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x2fc>)
 8004bce:	f7fd ff1d 	bl	8002a0c <_ZN15GaussianMixture5resetEi>
		break;
 8004bd2:	e02a      	b.n	8004c2a <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0xea>
	case Lap:
		LapPara.allocate(Im1.nchannels()+2);
 8004bd4:	6938      	ldr	r0, [r7, #16]
 8004bd6:	f7fc fd10 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	3302      	adds	r3, #2
 8004bde:	4619      	mov	r1, r3
 8004be0:	4897      	ldr	r0, [pc, #604]	; (8004e40 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x300>)
 8004be2:	f001 f985 	bl	8005ef0 <_ZN6VectorIdE8allocateEi>
		for(int i = 0;i<LapPara.dim();i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bec:	4894      	ldr	r0, [pc, #592]	; (8004e40 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x300>)
 8004bee:	f001 f973 	bl	8005ed8 <_ZNK6VectorIdE3dimEv>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bfb4      	ite	lt
 8004bfc:	2301      	movlt	r3, #1
 8004bfe:	2300      	movge	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d010      	beq.n	8004c28 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0xe8>
			LapPara[i] = 0.02;
 8004c06:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8004c0a:	488d      	ldr	r0, [pc, #564]	; (8004e40 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x300>)
 8004c0c:	f000 fec2 	bl	8005994 <_ZN6VectorIdEixEi>
 8004c10:	4601      	mov	r1, r0
 8004c12:	a387      	add	r3, pc, #540	; (adr r3, 8004e30 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x2f0>)
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0;i<LapPara.dim();i++)
 8004c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c26:	e7e1      	b.n	8004bec <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0xac>
		break;
 8004c28:	bf00      	nop
	}

	for(int k=GPyramid1.nlevels()-1;k>=0;k--)
 8004c2a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd ffad 	bl	8002b8e <_ZNK15GaussianPyramid7nlevelsEv>
 8004c34:	4603      	mov	r3, r0
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f2c0 80ca 	blt.w	8004dda <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x29a>
	{
//		if(IsDisplay)
//			cout<<"Pyramid level "<<k;
		int width=GPyramid1.Image(k).width();
 8004c46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c4a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd ffa9 	bl	8002ba6 <_ZN15GaussianPyramid5ImageEi>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fc fb44 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8004c5c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		int height=GPyramid1.Image(k).height();
 8004c60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c64:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd ff9c 	bl	8002ba6 <_ZN15GaussianPyramid5ImageEi>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fc fcb6 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8004c76:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		im2feature(Image1,GPyramid1.Image(k));
 8004c7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c7e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fd ff8f 	bl	8002ba6 <_ZN15GaussianPyramid5ImageEi>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f8d9 	bl	8004e48 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_>
		im2feature(Image2,GPyramid2.Image(k));
 8004c96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004c9a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd ff81 	bl	8002ba6 <_ZN15GaussianPyramid5ImageEi>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 f8cb 	bl	8004e48 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_>

		if(k==GPyramid1.nlevels()-1) // if at the top level
 8004cb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd ff69 	bl	8002b8e <_ZNK15GaussianPyramid7nlevelsEv>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01e      	beq.n	8004d10 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x1d0>
		{
			vx.allocate(width,height);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	681c      	ldr	r4, [r3, #0]
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ce0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004ce4:	69f8      	ldr	r0, [r7, #28]
 8004ce6:	47a0      	blx	r4
			vy.allocate(width,height);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	681c      	ldr	r4, [r3, #0]
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004cf6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004cfa:	69b8      	ldr	r0, [r7, #24]
 8004cfc:	47a0      	blx	r4
			//warpI2.copyData(Image2);
			WarpImage2.copyData(Image2);
 8004cfe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d02:	f107 0320 	add.w	r3, r7, #32
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fb fec1 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
 8004d0e:	e03e      	b.n	8004d8e <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x24e>
		}
		else
		{

			vx.imresize(width,height);
 8004d10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004d14:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d18:	69f8      	ldr	r0, [r7, #28]
 8004d1a:	f001 f98f 	bl	800603c <_ZN5ImageIdE8imresizeEii>
			vx.Multiplywith(1/ratio);
 8004d1e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004d22:	ed97 7b00 	vldr	d7, [r7]
 8004d26:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004d2a:	eeb0 0b46 	vmov.f64	d0, d6
 8004d2e:	69f8      	ldr	r0, [r7, #28]
 8004d30:	f000 faa3 	bl	800527a <_ZN5ImageIdE12MultiplywithEd>
			vy.imresize(width,height);
 8004d34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004d38:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d3c:	69b8      	ldr	r0, [r7, #24]
 8004d3e:	f001 f97d 	bl	800603c <_ZN5ImageIdE8imresizeEii>
			vy.Multiplywith(1/ratio);
 8004d42:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004d46:	ed97 7b00 	vldr	d7, [r7]
 8004d4a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004d4e:	eeb0 0b46 	vmov.f64	d0, d6
 8004d52:	69b8      	ldr	r0, [r7, #24]
 8004d54:	f000 fa91 	bl	800527a <_ZN5ImageIdE12MultiplywithEd>
			//warpFL(warpI2,GPyramid1.Image(k),GPyramid2.Image(k),vx,vy);
			if(interpolation == Bilinear)
 8004d58:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x304>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x238>
				warpFL(WarpImage2,Image1,Image2,vx,vy);
 8004d60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d64:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004d68:	f107 0020 	add.w	r0, r7, #32
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f7fd ffbf 	bl	8002cf4 <_ZN11OpticalFlow6warpFLER5ImageIdERKS1_S4_S4_S4_>
 8004d76:	e00a      	b.n	8004d8e <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0x24e>
			else
				Image2.warpImageBicubicRef(Image1,WarpImage2,vx,vy);
 8004d78:	f107 0220 	add.w	r2, r7, #32
 8004d7c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004d80:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f000 ffaf 	bl	8005cec <_ZNK5ImageIdE19warpImageBicubicRefIdEEvRKS0_RS0_RKS_IT_ES8_>
		}
		//SmoothFlowPDE(GPyramid1.Image(k),GPyramid2.Image(k),warpI2,vx,vy,alpha,nOuterFPIterations,nInnerFPIterations,nCGIterations);
		//SmoothFlowPDE(Image1,Image2,WarpImage2,vx,vy,alpha*pow((1/ratio),k),nOuterFPIterations,nInnerFPIterations,nCGIterations,GMPara);

		//SmoothFlowPDE(Image1,Image2,WarpImage2,vx,vy,alpha,nOuterFPIterations,nInnerFPIterations,nCGIterations);
		SmoothFlowSOR(Image1,Image2,WarpImage2,vx,vy,alpha,nOuterFPIterations+k,nInnerFPIterations,nCGIterations+k*3);
 8004d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d96:	18d1      	adds	r1, r2, r3
 8004d98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004da6:	4413      	add	r3, r2
 8004da8:	f107 0220 	add.w	r2, r7, #32
 8004dac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004db0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004db4:	9303      	str	r3, [sp, #12]
 8004db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dba:	9302      	str	r3, [sp, #8]
 8004dbc:	9101      	str	r1, [sp, #4]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	ed97 0b02 	vldr	d0, [r7, #8]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4621      	mov	r1, r4
 8004dca:	f7fe f8ad 	bl	8002f28 <_ZN11OpticalFlow13SmoothFlowSORERK5ImageIdES3_RS1_S4_S4_diii>
	for(int k=GPyramid1.nlevels()-1;k>=0;k--)
 8004dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dd8:	e730      	b.n	8004c3c <_ZN11OpticalFlow15Coarse2FineFlowER5ImageIdES2_S2_RKS1_S4_ddiiii+0xfc>
		//GMPara.display();
//		if(IsDisplay)
//			cout<<endl;
	}
	//warpFL(warpI2,Im1,Im2,vx,vy);
	Im2.warpImageBicubicRef(Im1,warpI2,vx,vy);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	6939      	ldr	r1, [r7, #16]
 8004de4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004de8:	f000 ff80 	bl	8005cec <_ZNK5ImageIdE19warpImageBicubicRefIdEEvRKS0_RS0_RKS_IT_ES8_>
	warpI2.threshold();
 8004dec:	6978      	ldr	r0, [r7, #20]
 8004dee:	f000 ffdf 	bl	8005db0 <_ZN5ImageIdE9thresholdEv>
	DImage Image1,Image2,WarpImage2;
 8004df2:	f107 0320 	add.w	r3, r7, #32
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fdae 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fda9 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004e06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb fda4 	bl	8000958 <_ZN5ImageIdED1Ev>
	GaussianPyramid GPyramid2;
 8004e10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fc f8ce 	bl	8000fb6 <_ZN15GaussianPyramidD1Ev>
	GaussianPyramid GPyramid1;
 8004e1a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc f8c9 	bl	8000fb6 <_ZN15GaussianPyramidD1Ev>
}
 8004e24:	bf00      	nop
 8004e26:	37a4      	adds	r7, #164	; 0xa4
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	f3af 8000 	nop.w
 8004e30:	47ae147b 	.word	0x47ae147b
 8004e34:	3f947ae1 	.word	0x3f947ae1
 8004e38:	24000012 	.word	0x24000012
 8004e3c:	240000e0 	.word	0x240000e0
 8004e40:	240000f8 	.word	0x240000f8
 8004e44:	240000dd 	.word	0x240000dd

08004e48 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_>:

//---------------------------------------------------------------------------------------
// function to convert image to feature image
//---------------------------------------------------------------------------------------
void OpticalFlow::im2feature(DImage &imfeature, const DImage &im)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	ed2d 8b02 	vpush	{d8}
 8004e4e:	b0a6      	sub	sp, #152	; 0x98
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	int width=im.width();
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f7fc fa44 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8004e5c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int height=im.height();
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f7fc fbbe 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8004e66:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	int nchannels=im.nchannels();
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	f7fc fbc5 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8004e70:	67f8      	str	r0, [r7, #124]	; 0x7c
	if(nchannels==1)
 8004e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 80a1 	bne.w	8004fbc <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x174>
	{
		imfeature.allocate(im.width(),im.height(),3);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	681c      	ldr	r4, [r3, #0]
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f7fc fa2e 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8004e88:	4605      	mov	r5, r0
 8004e8a:	6838      	ldr	r0, [r7, #0]
 8004e8c:	f7fc fba9 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8004e90:	4602      	mov	r2, r0
 8004e92:	2303      	movs	r3, #3
 8004e94:	4629      	mov	r1, r5
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	47a0      	blx	r4
		DImage imdx,imdy;
 8004e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fd2e 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8004ea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb fd29 	bl	8000900 <_ZN5ImageIdEC1Ev>
		im.dx(imdx,true);
 8004eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6838      	ldr	r0, [r7, #0]
 8004eb8:	f000 fa4a 	bl	8005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>
		im.dy(imdy,true);
 8004ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6838      	ldr	r0, [r7, #0]
 8004ec6:	f000 fb09 	bl	80054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>
		_FlowPrecision* data=imfeature.data();
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fba1 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
		for(int i=0;i<height;i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004edc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	da5e      	bge.n	8004fa6 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x15e>
			for(int j=0;j<width;j++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	da4f      	bge.n	8004f9a <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x152>
			{
				int offset=i*width+j;
 8004efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004efe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004f0a:	4413      	add	r3, r2
 8004f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				data[offset*3]=im.data()[offset];
 8004f0e:	6838      	ldr	r0, [r7, #0]
 8004f10:	f000 f996 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8004f14:	4603      	mov	r3, r0
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	18d0      	adds	r0, r2, r3
 8004f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2c:	1899      	adds	r1, r3, r2
 8004f2e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004f32:	e9c1 2300 	strd	r2, r3, [r1]
				data[offset*3+1]=imdx.data()[offset];
 8004f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fc fb69 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8004f40:	4603      	mov	r3, r0
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	18d0      	adds	r0, r2, r3
 8004f4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	3308      	adds	r3, #8
 8004f56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f58:	18d1      	adds	r1, r2, r3
 8004f5a:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004f5e:	e9c1 2300 	strd	r2, r3, [r1]
				data[offset*3+2]=imdy.data()[offset];
 8004f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc fb53 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	18d0      	adds	r0, r2, r3
 8004f76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3310      	adds	r3, #16
 8004f82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f84:	18d1      	adds	r1, r2, r3
 8004f86:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004f8a:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<width;j++)
 8004f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f92:	3301      	adds	r3, #1
 8004f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f98:	e7a9      	b.n	8004eee <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0xa6>
		for(int i=0;i<height;i++)
 8004f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fa4:	e79a      	b.n	8004edc <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x94>
		DImage imdx,imdy;
 8004fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb fcd4 	bl	8000958 <_ZN5ImageIdED1Ev>
 8004fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fb fccf 	bl	8000958 <_ZN5ImageIdED1Ev>
				data[offset*5+4]=im.data()[offset*3+1]-im.data()[offset*3+2];
			}
	}
	else
		imfeature.copyData(im);
}
 8004fba:	e110      	b.n	80051de <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x396>
	else if(nchannels==3)
 8004fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	f040 8106 	bne.w	80051d0 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x388>
		DImage grayImage;
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fb fc99 	bl	8000900 <_ZN5ImageIdEC1Ev>
		im.desaturate(grayImage);
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6838      	ldr	r0, [r7, #0]
 8004fd6:	f001 f86b 	bl	80060b0 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E>
		imfeature.allocate(im.width(),im.height(),5);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	681c      	ldr	r4, [r3, #0]
 8004fe2:	6838      	ldr	r0, [r7, #0]
 8004fe4:	f7fc f97e 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8004fe8:	4605      	mov	r5, r0
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f7fc faf9 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	2305      	movs	r3, #5
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	47a0      	blx	r4
		DImage imdx,imdy;
 8004ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fc7e 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8005004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fc79 	bl	8000900 <_ZN5ImageIdEC1Ev>
		grayImage.dx(imdx,true);
 800500e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	2201      	movs	r2, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f999 	bl	8005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>
		grayImage.dy(imdy,true);
 800501e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	2201      	movs	r2, #1
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa57 	bl	80054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>
		_FlowPrecision* data=imfeature.data();
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc faef 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8005034:	4603      	mov	r3, r0
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	67bb      	str	r3, [r7, #120]	; 0x78
		for(int i=0;i<height;i++)
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005040:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005048:	429a      	cmp	r2, r3
 800504a:	f280 80b1 	bge.w	80051b0 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x368>
			for(int j=0;j<width;j++)
 800504e:	2300      	movs	r3, #0
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005054:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800505c:	429a      	cmp	r2, r3
 800505e:	f280 80a1 	bge.w	80051a4 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x35c>
				int offset=i*width+j;
 8005062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005066:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005072:	4413      	add	r3, r2
 8005074:	677b      	str	r3, [r7, #116]	; 0x74
				data[offset*5]=grayImage.data()[offset];
 8005076:	f107 030c 	add.w	r3, r7, #12
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fac9 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8005080:	4603      	mov	r3, r0
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	18d0      	adds	r0, r2, r3
 800508a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	461a      	mov	r2, r3
 8005096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005098:	1899      	adds	r1, r3, r2
 800509a:	e9d0 2300 	ldrd	r2, r3, [r0]
 800509e:	e9c1 2300 	strd	r2, r3, [r1]
				data[offset*5+1]=imdx.data()[offset];
 80050a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc fab3 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80050ac:	4603      	mov	r3, r0
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	18d0      	adds	r0, r2, r3
 80050b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	3308      	adds	r3, #8
 80050c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050c4:	18d1      	adds	r1, r2, r3
 80050c6:	e9d0 2300 	ldrd	r2, r3, [r0]
 80050ca:	e9c1 2300 	strd	r2, r3, [r1]
				data[offset*5+2]=imdy.data()[offset];
 80050ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc fa9d 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80050d8:	4603      	mov	r3, r0
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	18d0      	adds	r0, r2, r3
 80050e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	3310      	adds	r3, #16
 80050ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050f0:	18d1      	adds	r1, r2, r3
 80050f2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80050f6:	e9c1 2300 	strd	r2, r3, [r1]
				data[offset*5+3]=im.data()[offset*3+1]-im.data()[offset*3];
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f000 f8a0 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005100:	4603      	mov	r3, r0
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	3308      	adds	r3, #8
 8005110:	440b      	add	r3, r1
 8005112:	ed93 8b00 	vldr	d8, [r3]
 8005116:	6838      	ldr	r0, [r7, #0]
 8005118:	f000 f892 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 800511c:	4603      	mov	r3, r0
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005122:	4613      	mov	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	440b      	add	r3, r1
 800512c:	ed93 7b00 	vldr	d7, [r3]
 8005130:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	3318      	adds	r3, #24
 800513c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800513e:	4413      	add	r3, r2
 8005140:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005144:	ed83 7b00 	vstr	d7, [r3]
				data[offset*5+4]=im.data()[offset*3+1]-im.data()[offset*3+2];
 8005148:	6838      	ldr	r0, [r7, #0]
 800514a:	f000 f879 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 800514e:	4603      	mov	r3, r0
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005154:	4613      	mov	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4413      	add	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	3308      	adds	r3, #8
 800515e:	440b      	add	r3, r1
 8005160:	ed93 8b00 	vldr	d8, [r3]
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f000 f86b 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 800516a:	4603      	mov	r3, r0
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	3310      	adds	r3, #16
 800517a:	440b      	add	r3, r1
 800517c:	ed93 7b00 	vldr	d7, [r3]
 8005180:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	3320      	adds	r3, #32
 800518c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800518e:	4413      	add	r3, r2
 8005190:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005194:	ed83 7b00 	vstr	d7, [r3]
			for(int j=0;j<width;j++)
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800519c:	3301      	adds	r3, #1
 800519e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051a2:	e757      	b.n	8005054 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x20c>
		for(int i=0;i<height;i++)
 80051a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051a8:	3301      	adds	r3, #1
 80051aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051ae:	e747      	b.n	8005040 <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x1f8>
		DImage imdx,imdy;
 80051b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fbcf 	bl	8000958 <_ZN5ImageIdED1Ev>
 80051ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fb fbca 	bl	8000958 <_ZN5ImageIdED1Ev>
		DImage grayImage;
 80051c4:	f107 030c 	add.w	r3, r7, #12
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb fbc5 	bl	8000958 <_ZN5ImageIdED1Ev>
}
 80051ce:	e006      	b.n	80051de <_ZN11OpticalFlow10im2featureER5ImageIdERKS1_+0x396>
		imfeature.copyData(im);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
}
 80051de:	bf00      	nop
 80051e0:	3798      	adds	r7, #152	; 0x98
 80051e2:	46bd      	mov	sp, r7
 80051e4:	ecbd 8b02 	vpop	{d8}
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}

080051ea <_ZNK5ImageIdE14matchDimensionEiii>:
bool Image<T>::matchDimension(int width, int height, int nchannels) const
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	603b      	str	r3, [r7, #0]
	if(imWidth==width && imHeight==height && nChannels==nchannels)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d10b      	bne.n	800521a <_ZNK5ImageIdE14matchDimensionEiii+0x30>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d106      	bne.n	800521a <_ZNK5ImageIdE14matchDimensionEiii+0x30>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d101      	bne.n	800521a <_ZNK5ImageIdE14matchDimensionEiii+0x30>
		return true;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <_ZNK5ImageIdE14matchDimensionEiii+0x32>
		return false;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZNK5ImageIdE7npixelsEv>:
	inline int npixels() const {return nPixels;};
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <_ZNK5ImageIdE4dataEv>:
	inline const T*& data() const{return (const T*&)pData;};
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_ZN6VectorIdEC1Ev>:
//		result += vect1[i]*vect2[i];
//	return result;
//}

template <class T>
Vector<T>::Vector(void)
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
{
	nDim=0;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
	pData=NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <_ZN5ImageIdE12MultiplywithEd>:
			pData[i*nChannels+j]*=pData1[i];
}


template <class T>
void Image<T>::Multiplywith(double value)
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	ed87 0b00 	vstr	d0, [r7]
{
	for(int i=0;i<nElements;i++)
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	429a      	cmp	r2, r3
 8005292:	da15      	bge.n	80052c0 <_ZN5ImageIdE12MultiplywithEd+0x46>
		pData[i]*=value;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	ed93 6b00 	vldr	d6, [r3]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	ed97 7b00 	vldr	d7, [r7]
 80052b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052b4:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3301      	adds	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e7e4      	b.n	800528a <_ZN5ImageIdE12MultiplywithEd+0x10>
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <_ZN5ImageIdE3AddIdEEvRKS_IT_Ed>:
		pData[i]=pData1[i]+pData2[i]*ratio;
}

template <class T>
template <class T1>
void Image<T>::Add(const Image<T1>& image1,const double ratio)
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	ed87 0b00 	vstr	d0, [r7]
{
	if(matchDimension(image1)==false)
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fc f9a4 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d129      	bne.n	8005346 <_ZN5ImageIdE3AddIdEEvRKS_IT_Ed+0x7a>
	{
		//cout<<"Error in image dimensions--function Image<T>::Add()!"<<endl;
		return;
	}
	const T1*& pData1=image1.data();
 80052f2:	68b8      	ldr	r0, [r7, #8]
 80052f4:	f7ff ffa4 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80052f8:	6138      	str	r0, [r7, #16]
	for(int i=0;i<nElements;i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	da1f      	bge.n	8005348 <_ZN5ImageIdE3AddIdEEvRKS_IT_Ed+0x7c>
		pData[i]+=pData1[i]*ratio;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	ed93 6b00 	vldr	d6, [r3]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	ed93 5b00 	vldr	d5, [r3]
 8005324:	ed97 7b00 	vldr	d7, [r7]
 8005328:	ee25 7b07 	vmul.f64	d7, d5, d7
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	ee36 7b07 	vadd.f64	d7, d6, d7
 800533a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3301      	adds	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e7db      	b.n	80052fe <_ZN5ImageIdE3AddIdEEvRKS_IT_Ed+0x32>
		return;
 8005346:	bf00      	nop
}
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb>:
void Image<T>::dx(Image<T1>& result,bool IsAdvancedFilter) const
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b098      	sub	sp, #96	; 0x60
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]
	if(matchDimension(result)==false)
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7fc f962 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x3e>
		result.allocate(imWidth,imHeight,nChannels);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	681c      	ldr	r4, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	47a0      	blx	r4
	result.reset();
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3310      	adds	r3, #16
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	4798      	blx	r3
	result.setDerivative();
 800539a:	2101      	movs	r1, #1
 800539c:	68b8      	ldr	r0, [r7, #8]
 800539e:	f000 f9af 	bl	8005700 <_ZN5ImageIdE13setDerivativeEb>
	T1*& data=result.data();
 80053a2:	68b8      	ldr	r0, [r7, #8]
 80053a4:	f7fc f935 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80053a8:	6438      	str	r0, [r7, #64]	; 0x40
	if(IsAdvancedFilter==false)
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d154      	bne.n	800545a <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x10a>
		for(i=0;i<imHeight;i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ba:	429a      	cmp	r2, r3
 80053bc:	f280 8088 	bge.w	80054d0 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x180>
			for(j=0;j<imWidth-1;j++)
 80053c0:	2300      	movs	r3, #0
 80053c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053cc:	429a      	cmp	r2, r3
 80053ce:	da40      	bge.n	8005452 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x102>
				offset=i*imWidth+j;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053dc:	4413      	add	r3, r2
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(k=0;k<nChannels;k++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	647b      	str	r3, [r7, #68]	; 0x44
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ea:	429a      	cmp	r2, r3
 80053ec:	da2d      	bge.n	800544a <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0xfa>
					data[offset*nChannels+k]=(T1)pData[(offset+1)*nChannels+k]-pData[offset*nChannels+k];
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	3301      	adds	r3, #1
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6909      	ldr	r1, [r1, #16]
 80053fa:	fb03 f101 	mul.w	r1, r3, r1
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	440b      	add	r3, r1
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	ed93 6b00 	vldr	d6, [r3]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005414:	fb03 f101 	mul.w	r1, r3, r1
 8005418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541a:	440b      	add	r3, r1
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	ed93 7b00 	vldr	d7, [r3]
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800542e:	fb03 f101 	mul.w	r1, r3, r1
 8005432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005434:	440b      	add	r3, r1
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800543e:	ed83 7b00 	vstr	d7, [r3]
				for(k=0;k<nChannels;k++)
 8005442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005444:	3301      	adds	r3, #1
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	e7cc      	b.n	80053e4 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x94>
			for(j=0;j<imWidth-1;j++)
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	3301      	adds	r3, #1
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005450:	e7b8      	b.n	80053c4 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x74>
		for(i=0;i<imHeight;i++)
 8005452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005454:	3301      	adds	r3, #1
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	e7ac      	b.n	80053b4 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x64>
		double xFilter[5]={1,-8,0,8,-1};
 800545a:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x188>)
 800545c:	f107 0410 	add.w	r4, r7, #16
 8005460:	461d      	mov	r5, r3
 8005462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800546a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800546e:	e884 0003 	stmia.w	r4, {r0, r1}
		for(i=0;i<5;i++)
 8005472:	2300      	movs	r3, #0
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	2b04      	cmp	r3, #4
 800547a:	dc15      	bgt.n	80054a8 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x158>
			xFilter[i]/=12;
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	3350      	adds	r3, #80	; 0x50
 8005482:	443b      	add	r3, r7
 8005484:	3b40      	subs	r3, #64	; 0x40
 8005486:	ed93 6b00 	vldr	d6, [r3]
 800548a:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 800548e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	3350      	adds	r3, #80	; 0x50
 8005498:	443b      	add	r3, r7
 800549a:	3b40      	subs	r3, #64	; 0x40
 800549c:	ed83 7b00 	vstr	d7, [r3]
		for(i=0;i<5;i++)
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	3301      	adds	r3, #1
 80054a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a6:	e7e6      	b.n	8005476 <_ZNK5ImageIdE2dxIdEEvRS_IT_Eb+0x126>
		ImageProcessing::hfiltering(pData,data,imWidth,imHeight,nChannels,xFilter,2);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6858      	ldr	r0, [r3, #4]
 80054ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689c      	ldr	r4, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68dd      	ldr	r5, [r3, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2202      	movs	r2, #2
 80054be:	9202      	str	r2, [sp, #8]
 80054c0:	f107 0210 	add.w	r2, r7, #16
 80054c4:	9201      	str	r2, [sp, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	462b      	mov	r3, r5
 80054ca:	4622      	mov	r2, r4
 80054cc:	f7fc f8d6 	bl	800167c <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi>
}
 80054d0:	bf00      	nop
 80054d2:	3750      	adds	r7, #80	; 0x50
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}
 80054d8:	08014f18 	.word	0x08014f18

080054dc <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb>:
void Image<T>::dy(Image<T1>& result,bool IsAdvancedFilter) const
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b098      	sub	sp, #96	; 0x60
 80054e0:	af04      	add	r7, sp, #16
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
	if(matchDimension(result)==false)
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7fc f89c 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x3e>
		result.allocate(imWidth,imHeight,nChannels);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	681c      	ldr	r4, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	68b8      	ldr	r0, [r7, #8]
 8005518:	47a0      	blx	r4
	result.setDerivative();
 800551a:	2101      	movs	r1, #1
 800551c:	68b8      	ldr	r0, [r7, #8]
 800551e:	f000 f8ef 	bl	8005700 <_ZN5ImageIdE13setDerivativeEb>
	T1*& data=result.data();
 8005522:	68b8      	ldr	r0, [r7, #8]
 8005524:	f7fc f875 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8005528:	6438      	str	r0, [r7, #64]	; 0x40
	if(IsAdvancedFilter==false)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d156      	bne.n	80055de <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x102>
		for(i=0;i<imHeight-1;i++)
 8005530:	2300      	movs	r3, #0
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	3b01      	subs	r3, #1
 800553a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800553c:	429a      	cmp	r2, r3
 800553e:	f280 8089 	bge.w	8005654 <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x178>
			for(j=0;j<imWidth;j++)
 8005542:	2300      	movs	r3, #0
 8005544:	64bb      	str	r3, [r7, #72]	; 0x48
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554c:	429a      	cmp	r2, r3
 800554e:	da42      	bge.n	80055d6 <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0xfa>
				offset=i*imWidth+j;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555c:	4413      	add	r3, r2
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(k=0;k<nChannels;k++)
 8005560:	2300      	movs	r3, #0
 8005562:	647b      	str	r3, [r7, #68]	; 0x44
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556a:	429a      	cmp	r2, r3
 800556c:	da2f      	bge.n	80055ce <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0xf2>
					data[offset*nChannels+k]=(T1)pData[(offset+imWidth)*nChannels+k]-pData[offset*nChannels+k];
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6899      	ldr	r1, [r3, #8]
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	440b      	add	r3, r1
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	6909      	ldr	r1, [r1, #16]
 800557e:	fb03 f101 	mul.w	r1, r3, r1
 8005582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005584:	440b      	add	r3, r1
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	ed93 6b00 	vldr	d6, [r3]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005598:	fb03 f101 	mul.w	r1, r3, r1
 800559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559e:	440b      	add	r3, r1
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	ed93 7b00 	vldr	d7, [r3]
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b2:	fb03 f101 	mul.w	r1, r3, r1
 80055b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b8:	440b      	add	r3, r1
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055c2:	ed83 7b00 	vstr	d7, [r3]
				for(k=0;k<nChannels;k++)
 80055c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c8:	3301      	adds	r3, #1
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
 80055cc:	e7ca      	b.n	8005564 <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x88>
			for(j=0;j<imWidth;j++)
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	3301      	adds	r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d4:	e7b7      	b.n	8005546 <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x6a>
		for(i=0;i<imHeight-1;i++)
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	3301      	adds	r3, #1
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	e7aa      	b.n	8005534 <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x58>
		double yFilter[5]={1,-8,0,8,-1};
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x180>)
 80055e0:	f107 0410 	add.w	r4, r7, #16
 80055e4:	461d      	mov	r5, r3
 80055e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80055f2:	e884 0003 	stmia.w	r4, {r0, r1}
		for(i=0;i<5;i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	dc15      	bgt.n	800562c <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x150>
			yFilter[i]/=12;
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	3350      	adds	r3, #80	; 0x50
 8005606:	443b      	add	r3, r7
 8005608:	3b40      	subs	r3, #64	; 0x40
 800560a:	ed93 6b00 	vldr	d6, [r3]
 800560e:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8005612:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	3350      	adds	r3, #80	; 0x50
 800561c:	443b      	add	r3, r7
 800561e:	3b40      	subs	r3, #64	; 0x40
 8005620:	ed83 7b00 	vstr	d7, [r3]
		for(i=0;i<5;i++)
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	3301      	adds	r3, #1
 8005628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562a:	e7e6      	b.n	80055fa <_ZNK5ImageIdE2dyIdEEvRS_IT_Eb+0x11e>
		ImageProcessing::vfiltering(pData,data,imWidth,imHeight,nChannels,yFilter,2);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6858      	ldr	r0, [r3, #4]
 8005630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689c      	ldr	r4, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68dd      	ldr	r5, [r3, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2202      	movs	r2, #2
 8005642:	9202      	str	r2, [sp, #8]
 8005644:	f107 0210 	add.w	r2, r7, #16
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462b      	mov	r3, r5
 800564e:	4622      	mov	r2, r4
 8005650:	f7fc f89e 	bl	8001790 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi>
}
 8005654:	bf00      	nop
 8005656:	3750      	adds	r7, #80	; 0x50
 8005658:	46bd      	mov	sp, r7
 800565a:	bdb0      	pop	{r4, r5, r7, pc}
 800565c:	08014f18 	.word	0x08014f18

08005660 <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E>:
//------------------------------------------------------------------------------------------
// function to subtract image2 from image1
//------------------------------------------------------------------------------------------
template <class T>
template <class T1,class T2>
void Image<T>::Subtract(const Image<T1> &image1, const Image<T2> &image2)
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
{
	if(image1.matchDimension(image2)==false)
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f7fb ffdb 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d139      	bne.n	80056f8 <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E+0x98>
	{
		//cout<<"Error in image dimensions--function Image<T>::Subtract()!"<<endl;
		return;
	}
	if(matchDimension(image1)==false)
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7fb ffcf 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E+0x44>
		allocate(image1);
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fca1 	bl	8005fe6 <_ZN5ImageIdE8allocateIdEEvRKS_IT_E>

	const T1*& pData1=image1.data();
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f7ff fdcb 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80056aa:	61b8      	str	r0, [r7, #24]
	const T2*& pData2=image2.data();
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fdc7 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80056b2:	6178      	str	r0, [r7, #20]
	for(int i=0;i<nElements;i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	429a      	cmp	r2, r3
 80056c0:	da1b      	bge.n	80056fa <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E+0x9a>
		pData[i]=(T)pData1[i]-pData2[i];
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	ed93 6b00 	vldr	d6, [r3]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	ed93 7b00 	vldr	d7, [r3]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056ec:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e7df      	b.n	80056b8 <_ZN5ImageIdE8SubtractIddEEvRKS_IT_ERKS_IT0_E+0x58>
		return;
 80056f8:	bf00      	nop
}
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_ZN5ImageIdE13setDerivativeEb>:
	inline void setDerivative(bool isDerivativeImage=true){IsDerivativeImage=isDerivativeImage;};
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	771a      	strb	r2, [r3, #28]
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii>:
//------------------------------------------------------------------------------------------------------------
// function to warp an image with respect to flow field
// pWarpIm2 has to be allocated before hands
//------------------------------------------------------------------------------------------------------------
template <class T1,class T2>
void ImageProcessing::warpImage(T1 *pWarpIm2, const T1 *pIm1, const T1 *pIm2, const T2 *pVx, const T2 *pVy, int width, int height, int nChannels)
 800571e:	b580      	push	{r7, lr}
 8005720:	b08e      	sub	sp, #56	; 0x38
 8005722:	af02      	add	r7, sp, #8
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	603b      	str	r3, [r7, #0]
{
	memset(pWarpIm2,0,sizeof(T1)*width*height*nChannels);
 800572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005736:	fb02 f303 	mul.w	r3, r2, r3
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	461a      	mov	r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f00e ff1b 	bl	801457c <memset>
	for(int i=0;i<height;i++)
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	429a      	cmp	r2, r3
 8005750:	f280 808c 	bge.w	800586c <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x14e>
		for(int j=0;j<width;j++)
 8005754:	2300      	movs	r3, #0
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
 8005758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	429a      	cmp	r2, r3
 800575e:	f280 8081 	bge.w	8005864 <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x146>
		{
			int offset=i*width+j;
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576c:	4413      	add	r3, r2
 800576e:	623b      	str	r3, [r7, #32]
			double x,y;
			y=i+pVy[offset];
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005780:	4413      	add	r3, r2
 8005782:	ed93 7b00 	vldr	d7, [r3]
 8005786:	ee36 7b07 	vadd.f64	d7, d6, d7
 800578a:	ed87 7b06 	vstr	d7, [r7, #24]
			x=j+pVx[offset];
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	ed93 7b00 	vldr	d7, [r3]
 80057a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057a8:	ed87 7b04 	vstr	d7, [r7, #16]
			offset*=nChannels;
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	623b      	str	r3, [r7, #32]
			if(x<0 || x>width-1 || y<0 || y>height-1)
 80057b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80057ba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d420      	bmi.n	8005806 <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0xe8>
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	3b01      	subs	r3, #1
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80057d0:	ed97 6b04 	vldr	d6, [r7, #16]
 80057d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057dc:	dc13      	bgt.n	8005806 <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0xe8>
 80057de:	ed97 7b06 	vldr	d7, [r7, #24]
 80057e2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	d40c      	bmi.n	8005806 <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0xe8>
 80057ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ee:	3b01      	subs	r3, #1
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80057f8:	ed97 6b06 	vldr	d6, [r7, #24]
 80057fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	dd19      	ble.n	800583a <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x11c>
			{
				for(int k=0;k<nChannels;k++)
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	429a      	cmp	r2, r3
 8005810:	da23      	bge.n	800585a <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x13c>
					pWarpIm2[offset+k]=pIm1[offset+k];
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4413      	add	r3, r2
 800581e:	6a39      	ldr	r1, [r7, #32]
 8005820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005822:	440a      	add	r2, r1
 8005824:	00d2      	lsls	r2, r2, #3
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	4411      	add	r1, r2
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	e9c1 2300 	strd	r2, r3, [r1]
				for(int k=0;k<nChannels;k++)
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	3301      	adds	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
 8005838:	e7e7      	b.n	800580a <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0xec>
				continue;
			}
			BilinearInterpolate(pIm2,width,height,nChannels,x,y,pWarpIm2+offset);
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	ed97 1b06 	vldr	d1, [r7, #24]
 8005848:	ed97 0b04 	vldr	d0, [r7, #16]
 800584c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fa60 	bl	8000d18 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_>
 8005858:	e000      	b.n	800585c <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x13e>
				continue;
 800585a:	bf00      	nop
		for(int j=0;j<width;j++)
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	3301      	adds	r3, #1
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	e779      	b.n	8005758 <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x3a>
	for(int i=0;i<height;i++)
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	3301      	adds	r3, #1
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586a:	e76e      	b.n	800574a <_ZN15ImageProcessing9warpImageIddEEvPT_PKS1_S4_PKT0_S7_iii+0x2c>
		}
}
 800586c:	bf00      	nop
 800586e:	3730      	adds	r7, #48	; 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <_ZN5ImageIdEC1Eiii>:
Image<T>::Image(int width,int height,int nchannels)
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <_ZN5ImageIdEC1Eiii+0x7c>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]
	imWidth=width;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	609a      	str	r2, [r3, #8]
	imHeight=height;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	60da      	str	r2, [r3, #12]
	nChannels=nchannels;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	611a      	str	r2, [r3, #16]
	computeDimension();
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fb f8b8 	bl	8000a10 <_ZN5ImageIdE16computeDimensionEv>
	pData=NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	605a      	str	r2, [r3, #4]
	pData=new T[nElements];
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ae:	d201      	bcs.n	80058b4 <_ZN5ImageIdEC1Eiii+0x40>
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	e001      	b.n	80058b8 <_ZN5ImageIdEC1Eiii+0x44>
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b8:	4618      	mov	r0, r3
 80058ba:	f00e f86f 	bl	801399c <_Znaj>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]
	if(nElements>0)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dd08      	ble.n	80058e0 <_ZN5ImageIdEC1Eiii+0x6c>
		memset(pData,0,sizeof(T)*nElements);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6858      	ldr	r0, [r3, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	461a      	mov	r2, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	f00e fe4e 	bl	801457c <memset>
	IsDerivativeImage=false;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	771a      	strb	r2, [r3, #28]
}
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08014f68 	.word	0x08014f68

080058f4 <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E>:
void Image<T>::Add(const Image<T1>& image1,const Image<T2>& image2)
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
	if(image1.matchDimension(image2)==false)
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	68b8      	ldr	r0, [r7, #8]
 8005904:	f7fb fe91 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d139      	bne.n	800598c <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E+0x98>
	if(matchDimension(image1)==false)
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fb fe85 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E+0x44>
		allocate(image1);
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fb57 	bl	8005fe6 <_ZN5ImageIdE8allocateIdEEvRKS_IT_E>
	const T1*& pData1=image1.data();
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f7ff fc81 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 800593e:	61b8      	str	r0, [r7, #24]
	const T2*& pData2=image2.data();
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc7d 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005946:	6178      	str	r0, [r7, #20]
	for(int i=0;i<nElements;i++)
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	429a      	cmp	r2, r3
 8005954:	da1b      	bge.n	800598e <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E+0x9a>
		pData[i]=pData1[i]+pData2[i];
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	ed93 6b00 	vldr	d6, [r3]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	ed93 7b00 	vldr	d7, [r3]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	4413      	add	r3, r2
 800597c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005980:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e7df      	b.n	800594c <_ZN5ImageIdE3AddIddEEvRKS_IT_ERKS_IT0_E+0x58>
		return;
 800598c:	bf00      	nop
}
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZN6VectorIdEixEi>:
	inline T& operator[](int index){return *(pData+index);};
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4413      	add	r3, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E>:
void Image<T>::Multiply(const Image<T1>& image1,const Image<T2>& image2,const Image<T3>& image3)
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
	if(image1.matchDimension(image2)==false || image2.matchDimension(image3)==false)
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	68b8      	ldr	r0, [r7, #8]
 80059c6:	f7fb fe30 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0x2a>
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fe29 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0x2e>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0x30>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d146      	bne.n	8005a76 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0xc2>
	if(matchDimension(image1)==false)
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7fb fe1d 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0x54>
		allocate(image1);
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 faef 	bl	8005fe6 <_ZN5ImageIdE8allocateIdEEvRKS_IT_E>
	const T1*& pData1=image1.data();
 8005a08:	68b8      	ldr	r0, [r7, #8]
 8005a0a:	f7ff fc19 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005a0e:	61b8      	str	r0, [r7, #24]
	const T2*& pData2=image2.data();
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff fc15 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005a16:	6178      	str	r0, [r7, #20]
	const T3*& pData3=image3.data();
 8005a18:	6838      	ldr	r0, [r7, #0]
 8005a1a:	f7ff fc11 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005a1e:	6138      	str	r0, [r7, #16]
	for(int i=0;i<nElements;i++)
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	da24      	bge.n	8005a78 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0xc4>
		pData[i]=pData1[i]*pData2[i]*pData3[i];
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	ed93 6b00 	vldr	d6, [r3]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	ed93 7b00 	vldr	d7, [r3]
 8005a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	ed93 7b00 	vldr	d7, [r3]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4413      	add	r3, r2
 8005a66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a6a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e7d6      	b.n	8005a24 <_ZN5ImageIdE8MultiplyIdddEEvRKS_IT_ERKS_IT0_ERKS_IT1_E+0x70>
		return;
 8005a76:	bf00      	nop
}
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>:
void Image<T>::collapse(Image<T1> &image,collapse_type type) const
 8005a7e:	b590      	push	{r4, r7, lr}
 8005a80:	b08d      	sub	sp, #52	; 0x34
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
	if(!(image.width()==imWidth && image.height()==imHeight && image.nChannels==1))
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f7fb fc29 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d10b      	bne.n	8005ab4 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x36>
 8005a9c:	68b8      	ldr	r0, [r7, #8]
 8005a9e:	f7fb fda0 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d103      	bne.n	8005ab4 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x36>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d001      	beq.n	8005ab8 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x3a>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x3c>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x56>
		image.allocate(imWidth,imHeight,1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	681c      	ldr	r4, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6899      	ldr	r1, [r3, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	2301      	movs	r3, #1
 8005ad0:	68b8      	ldr	r0, [r7, #8]
 8005ad2:	47a0      	blx	r4
	image.IsDerivativeImage = IsDerivativeImage;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	7f1a      	ldrb	r2, [r3, #28]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	771a      	strb	r2, [r3, #28]
	if(nChannels == 1)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d104      	bne.n	8005aee <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x70>
		image.copy(*this);
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	68b8      	ldr	r0, [r7, #8]
 8005ae8:	f000 fb9a 	bl	8006220 <_ZN5ImageIdE4copyIdEEvRKS_IT_E>
		return;
 8005aec:	e0c0      	b.n	8005c70 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1f2>
	T1* data=image.data();
 8005aee:	68b8      	ldr	r0, [r7, #8]
 8005af0:	f7fb fd8f 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8005af4:	4603      	mov	r3, r0
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	617b      	str	r3, [r7, #20]
	for(int i=0;i<nPixels;i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f280 80b3 	bge.w	8005c70 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1f2>
		offset=i*nChannels;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
 8005b14:	613b      	str	r3, [r7, #16]
		switch(type){
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d06d      	beq.n	8005bf8 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x17a>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f300 80a3 	bgt.w	8005c68 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1ea>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0xae>
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d031      	beq.n	8005b8e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x110>
 8005b2a:	e09d      	b.n	8005c68 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1ea>
				temp=0;
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				for(int j=0;j<nChannels;j++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	da12      	bge.n	8005b6c <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0xee>
					temp+=pData[offset+j];
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	6939      	ldr	r1, [r7, #16]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	440b      	add	r3, r1
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4413      	add	r3, r2
 8005b54:	ed93 7b00 	vldr	d7, [r3]
 8005b58:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8005b5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b60:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
				for(int j=0;j<nChannels;j++)
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	3301      	adds	r3, #1
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e7e7      	b.n	8005b3c <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0xbe>
				data[i]=temp/nChannels;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
 8005b84:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b88:	ed83 7b00 	vstr	d7, [r3]
				break;
 8005b8c:	e06c      	b.n	8005c68 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1ea>
				data[i] = pData[offset];
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	00d2      	lsls	r2, r2, #3
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	4411      	add	r1, r2
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	e9c1 2300 	strd	r2, r3, [r1]
				for(int j=1;j<nChannels;j++)
 8005ba8:	2301      	movs	r3, #1
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	da55      	bge.n	8005c62 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1e4>
					data[i] = __max(data[i],pData[offset+j]);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	ed93 7b00 	vldr	d7, [r3]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	6939      	ldr	r1, [r7, #16]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	440b      	add	r3, r1
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	ed93 6b00 	vldr	d6, [r3]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	18d4      	adds	r4, r2, r3
 8005bdc:	eeb0 1b46 	vmov.f64	d1, d6
 8005be0:	eeb0 0b47 	vmov.f64	d0, d7
 8005be4:	f000 fb81 	bl	80062ea <_Z5__maxIddET_S0_T0_>
 8005be8:	eeb0 7b40 	vmov.f64	d7, d0
 8005bec:	ed84 7b00 	vstr	d7, [r4]
				for(int j=1;j<nChannels;j++)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e7d9      	b.n	8005bac <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x12e>
				data[i] = pData[offset];
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	00d2      	lsls	r2, r2, #3
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4411      	add	r1, r2
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	e9c1 2300 	strd	r2, r3, [r1]
				for(int j = 1;j<nChannels;j++)
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	da22      	bge.n	8005c66 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1e8>
					data[i]=__min(data[i],pData[offset+j]);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	6939      	ldr	r1, [r7, #16]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	440b      	add	r3, r1
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	ed93 6b00 	vldr	d6, [r3]
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	18d4      	adds	r4, r2, r3
 8005c46:	eeb0 1b46 	vmov.f64	d1, d6
 8005c4a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c4e:	f000 fb6a 	bl	8006326 <_Z5__minIddET_S0_T0_>
 8005c52:	eeb0 7b40 	vmov.f64	d7, d0
 8005c56:	ed84 7b00 	vstr	d7, [r4]
				for(int j = 1;j<nChannels;j++)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e7d9      	b.n	8005c16 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x198>
				break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x1ea>
				break;
 8005c66:	bf00      	nop
	for(int i=0;i<nPixels;i++)
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	e746      	b.n	8005afe <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type+0x80>
}
 8005c70:	3734      	adds	r7, #52	; 0x34
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}

08005c76 <_ZN5ImageIdE3AddIdEEvRKS_IT_E>:
void Image<T>::Add(const Image<T1>& image1)
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
	if(matchDimension(image1)==false)
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fcd1 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d125      	bne.n	8005ce4 <_ZN5ImageIdE3AddIdEEvRKS_IT_E+0x6e>
	const T1*& pData1=image1.data();
 8005c98:	6838      	ldr	r0, [r7, #0]
 8005c9a:	f7ff fad1 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8005c9e:	60b8      	str	r0, [r7, #8]
	for(int i=0;i<nElements;i++)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	da1b      	bge.n	8005ce6 <_ZN5ImageIdE3AddIdEEvRKS_IT_E+0x70>
		pData[i]+=pData1[i];
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	ed93 6b00 	vldr	d6, [r3]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	ed93 7b00 	vldr	d7, [r3]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cd8:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nElements;i++)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e7df      	b.n	8005ca4 <_ZN5ImageIdE3AddIdEEvRKS_IT_E+0x2e>
		return;
 8005ce4:	bf00      	nop
}
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_ZNK5ImageIdE19warpImageBicubicRefIdEEvRKS0_RS0_RKS_IT_ES8_>:
		}
}

template <class T>
template <class T1>
void Image<T>::warpImageBicubicRef(const Image<T>& ref,Image<T>& output,const Image<T1>& vx,const Image<T1>& vy) const
 8005cec:	b5b0      	push	{r4, r5, r7, lr}
 8005cee:	b0a6      	sub	sp, #152	; 0x98
 8005cf0:	af04      	add	r7, sp, #16
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
{
	double dfilter[3] = {-0.5,0,0.5};
 8005cfa:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <_ZNK5ImageIdE19warpImageBicubicRefIdEEvRKS0_RS0_RKS_IT_ES8_+0xc0>)
 8005cfc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005d00:	461d      	mov	r5, r3
 8005d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005d0a:	e884 0003 	stmia.w	r4, {r0, r1}
	DImage imdx,imdy,imdxdy;
 8005d0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fa fdf4 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8005d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fdef 	bl	8000900 <_ZN5ImageIdEC1Ev>
 8005d22:	f107 0310 	add.w	r3, r7, #16
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fa fdea 	bl	8000900 <_ZN5ImageIdEC1Ev>
	imfilter_h(imdx,dfilter,1);
 8005d2c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005d34:	2301      	movs	r3, #1
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fb13 	bl	8006362 <_ZNK5ImageIdE10imfilter_hIdEEvRS_IT_EPdi>
	imfilter_v(imdy,dfilter,1);
 8005d3c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005d44:	2301      	movs	r3, #1
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fb45 	bl	80063d6 <_ZNK5ImageIdE10imfilter_vIdEEvRS_IT_EPdi>
	imdx.imfilter_v(imdxdy,dfilter,1);
 8005d4c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d50:	f107 0110 	add.w	r1, r7, #16
 8005d54:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f000 fb3c 	bl	80063d6 <_ZNK5ImageIdE10imfilter_vIdEEvRS_IT_EPdi>
	warpImageBicubicRef(ref,output,imdx,imdy,imdxdy,vx,vy);
 8005d5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	9302      	str	r3, [sp, #8]
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fb63 	bl	800644a <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_>
	DImage imdx,imdy,imdxdy;
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fa fde5 	bl	8000958 <_ZN5ImageIdED1Ev>
 8005d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fde0 	bl	8000958 <_ZN5ImageIdED1Ev>
 8005d98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fa fddb 	bl	8000958 <_ZN5ImageIdED1Ev>
}
 8005da2:	bf00      	nop
 8005da4:	3788      	adds	r7, #136	; 0x88
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bdb0      	pop	{r4, r5, r7, pc}
 8005daa:	bf00      	nop
 8005dac:	08014f40 	.word	0x08014f40

08005db0 <_ZN5ImageIdE9thresholdEv>:
void Image<T>::threshold()
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	if(IsFloat())
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 feb3 	bl	8006b24 <_ZNK5ImageIdE7IsFloatEv>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <_ZN5ImageIdE9thresholdEv+0x20>
		ImgMax = 1;
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <_ZN5ImageIdE9thresholdEv+0x98>)
 8005dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005dce:	e004      	b.n	8005dda <_ZN5ImageIdE9thresholdEv+0x2a>
		ImgMax = 255;
 8005dd0:	a31b      	add	r3, pc, #108	; (adr r3, 8005e40 <_ZN5ImageIdE9thresholdEv+0x90>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0;i<nPixels*nChannels;i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6912      	ldr	r2, [r2, #16]
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	da20      	bge.n	8005e32 <_ZN5ImageIdE9thresholdEv+0x82>
		pData[i] = __min(__max(pData[i],0),ImgMax);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	ed93 7b00 	vldr	d7, [r3]
 8005dfe:	2000      	movs	r0, #0
 8005e00:	eeb0 0b47 	vmov.f64	d0, d7
 8005e04:	f7fb f86c 	bl	8000ee0 <_Z5__maxIdiET_S0_T0_>
 8005e08:	eeb0 7b40 	vmov.f64	d7, d0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	18d4      	adds	r4, r2, r3
 8005e16:	ed97 1b04 	vldr	d1, [r7, #16]
 8005e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8005e1e:	f000 fa82 	bl	8006326 <_Z5__minIddET_S0_T0_>
 8005e22:	eeb0 7b40 	vmov.f64	d7, d0
 8005e26:	ed84 7b00 	vstr	d7, [r4]
	for(int i = 0;i<nPixels*nChannels;i++)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e7d5      	b.n	8005dde <_ZN5ImageIdE9thresholdEv+0x2e>
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd90      	pop	{r4, r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	00000000 	.word	0x00000000
 8005e44:	406fe000 	.word	0x406fe000
 8005e48:	3ff00000 	.word	0x3ff00000

08005e4c <_ZN5ImageIdEC1ERKS0_>:
Image<T>::Image(const Image<T>& other)
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <_ZN5ImageIdEC1ERKS0_+0x48>)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	imWidth=imHeight=nChannels=nElements=0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	619a      	str	r2, [r3, #24]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]
	pData=NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	605a      	str	r2, [r3, #4]
	copyData(other);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fa fe04 	bl	8000a90 <_ZN5ImageIdE8copyDataERKS0_>
}
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08014f68 	.word	0x08014f68

08005e98 <_ZNK5ImageIdEixEi>:
	inline const T& operator [] (int index) const {return pData[index];};
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <_ZN5ImageIdEixEi>:
	inline T& operator[](int index) {return pData[index];};
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <_ZNK6VectorIdE3dimEv>:
	int dim() const {return nDim;};
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <_ZN6VectorIdE8allocateEi>:
	pData=NULL;
	nDim=0;
}

template <class T>
void Vector<T>::allocate(int ndim)
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
{
	releaseData();
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fe3e 	bl	8006b7c <_ZN6VectorIdE11releaseDataEv>
	nDim=ndim;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	601a      	str	r2, [r3, #0]
	if(nDim>0)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd12      	ble.n	8005f34 <_ZN6VectorIdE8allocateEi+0x44>
	{
		pData=new T[nDim];
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f16:	d201      	bcs.n	8005f1c <_ZN6VectorIdE8allocateEi+0x2c>
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	e001      	b.n	8005f20 <_ZN6VectorIdE8allocateEi+0x30>
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f20:	4618      	mov	r0, r3
 8005f22:	f00d fd3b 	bl	801399c <_Znaj>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	605a      	str	r2, [r3, #4]
		reset();
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f804 	bl	8005f3c <_ZN6VectorIdE5resetEv>
	}
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <_ZN6VectorIdE5resetEv>:
//	if(nDim!=vect.nDim)
//		cout<<"The dimensions of the vectors don't match!"<<endl;
//}

template <class T>
void Vector<T>::reset()
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
{
	if(pData!=NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <_ZN6VectorIdE5resetEv+0x22>
		memset(pData,0,sizeof(T)*nDim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6858      	ldr	r0, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	461a      	mov	r2, r3
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f00e fb0f 	bl	801457c <memset>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <_ZN6VectorIdEC1EiPKd>:
Vector<T>::Vector(int ndim, const T *data)
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
	nDim=ndim;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	601a      	str	r2, [r3, #0]
	pData=new T[nDim];
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f80:	d201      	bcs.n	8005f86 <_ZN6VectorIdEC1EiPKd+0x20>
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	e001      	b.n	8005f8a <_ZN6VectorIdEC1EiPKd+0x24>
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f00d fd06 	bl	801399c <_Znaj>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	605a      	str	r2, [r3, #4]
	if(data!=NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <_ZN6VectorIdEC1EiPKd+0x4c>
		memcpy(pData,data,sizeof(T)*nDim);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6858      	ldr	r0, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	f00e fad8 	bl	8014560 <memcpy>
 8005fb0:	e008      	b.n	8005fc4 <_ZN6VectorIdEC1EiPKd+0x5e>
		memset(pData,0,sizeof(T)*nDim);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6858      	ldr	r0, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f00e fadc 	bl	801457c <memset>
}
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <_ZN6VectorIdED1Ev>:
Vector<T>::~Vector(void)
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
	releaseData();
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fdd0 	bl	8006b7c <_ZN6VectorIdE11releaseDataEv>
}
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_ZN5ImageIdE8allocateIdEEvRKS_IT_E>:
void Image<T>::allocate(const Image<T1> &other)
 8005fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
	allocate(other.width(),other.height(),other.nchannels());
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	681c      	ldr	r4, [r3, #0]
 8005ff8:	6838      	ldr	r0, [r7, #0]
 8005ffa:	f7fb f973 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 8005ffe:	4605      	mov	r5, r0
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7fb faee 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8006006:	4606      	mov	r6, r0
 8006008:	6838      	ldr	r0, [r7, #0]
 800600a:	f7fb faf6 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 800600e:	4603      	mov	r3, r0
 8006010:	4632      	mov	r2, r6
 8006012:	4629      	mov	r1, r5
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	47a0      	blx	r4
	IsDerivativeImage = other.isDerivativeImage();
 8006018:	6838      	ldr	r0, [r7, #0]
 800601a:	f000 fdca 	bl	8006bb2 <_ZNK5ImageIdE17isDerivativeImageEv>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	771a      	strb	r2, [r3, #28]
	colorType = other.colortype();
 8006026:	6838      	ldr	r0, [r7, #0]
 8006028:	f000 fdcf 	bl	8006bca <_ZNK5ImageIdE9colortypeEv>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	775a      	strb	r2, [r3, #29]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800603c <_ZN5ImageIdE8imresizeEii>:
void Image<T>::imresize(int dstWidth,int dstHeight)
 800603c:	b5b0      	push	{r4, r5, r7, lr}
 800603e:	b090      	sub	sp, #64	; 0x40
 8006040:	af04      	add	r7, sp, #16
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
	DImage foo(dstWidth,dstHeight,nChannels);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f107 0010 	add.w	r0, r7, #16
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	f7ff fc0e 	bl	8005874 <_ZN5ImageIdEC1Eiii>
	ImageProcessing::ResizeImage(pData,foo.data(),imWidth,imHeight,nChannels,dstWidth,dstHeight);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685c      	ldr	r4, [r3, #4]
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	4618      	mov	r0, r3
 8006062:	f7fb fad6 	bl	8001612 <_ZN5ImageIdE4dataEv>
 8006066:	4603      	mov	r3, r0
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6898      	ldr	r0, [r3, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68dd      	ldr	r5, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	9202      	str	r2, [sp, #8]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	9201      	str	r2, [sp, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	462b      	mov	r3, r5
 8006082:	4602      	mov	r2, r0
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fdac 	bl	8006be2 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii>
	copyData(foo);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f107 0210 	add.w	r2, r7, #16
 8006096:	4611      	mov	r1, r2
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	4798      	blx	r3
	DImage foo(dstWidth,dstHeight,nChannels);
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fa fc59 	bl	8000958 <_ZN5ImageIdED1Ev>
}
 80060a6:	bf00      	nop
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080060b0 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E>:
void Image<T>::desaturate(Image<T1> &image) const
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	if(nChannels!=3)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d005      	beq.n	80060ce <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x1e>
		collapse(image);
 80060c2:	2200      	movs	r2, #0
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fcd9 	bl	8005a7e <_ZNK5ImageIdE8collapseIdEEvRS_IT_E13collapse_type>
		return;
 80060cc:	e098      	b.n	8006200 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x150>
	if(!(image.width()==imWidth && image.height()==imHeight && image.nChannels==1))
 80060ce:	6838      	ldr	r0, [r7, #0]
 80060d0:	f7fb f908 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 80060d4:	4602      	mov	r2, r0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d10b      	bne.n	80060f6 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x46>
 80060de:	6838      	ldr	r0, [r7, #0]
 80060e0:	f7fb fa7f 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d103      	bne.n	80060f6 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x46>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d001      	beq.n	80060fa <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x4a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x4c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x66>
		image.allocate(imWidth,imHeight,1);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	681c      	ldr	r4, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6899      	ldr	r1, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	2301      	movs	r3, #1
 8006112:	6838      	ldr	r0, [r7, #0]
 8006114:	47a0      	blx	r4
	T1* data=image.data();
 8006116:	6838      	ldr	r0, [r7, #0]
 8006118:	f7fb fa7b 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800611c:	4603      	mov	r3, r0
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	613b      	str	r3, [r7, #16]
	for(int i=0;i<nPixels;i++)
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	429a      	cmp	r2, r3
 800612e:	da67      	bge.n	8006200 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x150>
		offset=i*3;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4613      	mov	r3, r2
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	4413      	add	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
		if(colorType == RGB)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7f5b      	ldrb	r3, [r3, #29]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d12d      	bne.n	800619e <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0xee>
			data[i]=(double)pData[offset]*.299+pData[offset+1]*.587+pData[offset+2]*.114;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	ed93 7b00 	vldr	d7, [r3]
 8006150:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8006208 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x158>
 8006154:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	ed93 7b00 	vldr	d7, [r3]
 8006168:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8006210 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x160>
 800616c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006170:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3302      	adds	r3, #2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	ed93 7b00 	vldr	d7, [r3]
 8006184:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8006218 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x168>
 8006188:	ee27 7b05 	vmul.f64	d7, d7, d5
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006198:	ed83 7b00 	vstr	d7, [r3]
 800619c:	e02c      	b.n	80061f8 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x148>
			data[i]=(double)pData[offset]*.114+pData[offset+1]*.587+pData[offset+2]*.299;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4413      	add	r3, r2
 80061a8:	ed93 7b00 	vldr	d7, [r3]
 80061ac:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8006218 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x168>
 80061b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	ed93 7b00 	vldr	d7, [r3]
 80061c4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8006210 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x160>
 80061c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80061cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3302      	adds	r3, #2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	ed93 7b00 	vldr	d7, [r3]
 80061e0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8006208 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x158>
 80061e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061f4:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0;i<nPixels;i++)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	3301      	adds	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e792      	b.n	8006126 <_ZNK5ImageIdE10desaturateIdEEvRS_IT_E+0x76>
}
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	e5604189 	.word	0xe5604189
 800620c:	3fd322d0 	.word	0x3fd322d0
 8006210:	39581062 	.word	0x39581062
 8006214:	3fe2c8b4 	.word	0x3fe2c8b4
 8006218:	9fbe76c9 	.word	0x9fbe76c9
 800621c:	3fbd2f1a 	.word	0x3fbd2f1a

08006220 <_ZN5ImageIdE4copyIdEEvRKS_IT_E>:
void Image<T>::copy(const Image<T1>& other)
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	clear();
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
	imWidth=other.width();
 8006236:	6838      	ldr	r0, [r7, #0]
 8006238:	f7fb f854 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 800623c:	4602      	mov	r2, r0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	609a      	str	r2, [r3, #8]
	imHeight=other.height();
 8006242:	6838      	ldr	r0, [r7, #0]
 8006244:	f7fb f9cd 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]
	nChannels=other.nchannels();
 800624e:	6838      	ldr	r0, [r7, #0]
 8006250:	f7fb f9d3 	bl	80015fa <_ZNK5ImageIdE9nchannelsEv>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]
	computeDimension();
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3304      	adds	r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
	IsDerivativeImage=other.isDerivativeImage();
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	f000 fca3 	bl	8006bb2 <_ZNK5ImageIdE17isDerivativeImageEv>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	771a      	strb	r2, [r3, #28]
	colorType = other.colortype();
 8006274:	6838      	ldr	r0, [r7, #0]
 8006276:	f000 fca8 	bl	8006bca <_ZNK5ImageIdE9colortypeEv>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	775a      	strb	r2, [r3, #29]
	pData=NULL;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]
	pData=new T[nElements];
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006290:	d201      	bcs.n	8006296 <_ZN5ImageIdE4copyIdEEvRKS_IT_E+0x76>
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	e001      	b.n	800629a <_ZN5ImageIdE4copyIdEEvRKS_IT_E+0x7a>
 8006296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800629a:	4618      	mov	r0, r3
 800629c:	f00d fb7e 	bl	801399c <_Znaj>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
	const T1*& srcData=other.data();
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f7fe ffc9 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80062ae:	60b8      	str	r0, [r7, #8]
	for(int i=0;i<nElements;i++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	da11      	bge.n	80062e2 <_ZN5ImageIdE4copyIdEEvRKS_IT_E+0xc2>
		pData[i]=srcData[i];
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6851      	ldr	r1, [r2, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	00d2      	lsls	r2, r2, #3
 80062d0:	4411      	add	r1, r2
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0;i<nElements;i++)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e7e8      	b.n	80062b4 <_ZN5ImageIdE4copyIdEEvRKS_IT_E+0x94>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <_Z5__maxIddET_S0_T0_>:
T1 __max(T1 a, T2 b)
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80062f4:	ed87 1b00 	vstr	d1, [r7]
  return (a<b)?b:a;
 80062f8:	ed97 6b02 	vldr	d6, [r7, #8]
 80062fc:	ed97 7b00 	vldr	d7, [r7]
 8006300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006308:	d502      	bpl.n	8006310 <_Z5__maxIddET_S0_T0_+0x26>
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	e001      	b.n	8006314 <_Z5__maxIddET_S0_T0_+0x2a>
 8006310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006314:	ec43 2b17 	vmov	d7, r2, r3
}
 8006318:	eeb0 0b47 	vmov.f64	d0, d7
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <_Z5__minIddET_S0_T0_>:
T1 __min(T1 a, T2 b)
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	ed87 0b02 	vstr	d0, [r7, #8]
 8006330:	ed87 1b00 	vstr	d1, [r7]
  return (a>b)?b:a;
 8006334:	ed97 6b02 	vldr	d6, [r7, #8]
 8006338:	ed97 7b00 	vldr	d7, [r7]
 800633c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006344:	dd02      	ble.n	800634c <_Z5__minIddET_S0_T0_+0x26>
 8006346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634a:	e001      	b.n	8006350 <_Z5__minIddET_S0_T0_+0x2a>
 800634c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006350:	ec43 2b17 	vmov	d7, r2, r3
}
 8006354:	eeb0 0b47 	vmov.f64	d0, d7
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <_ZNK5ImageIdE10imfilter_hIdEEvRS_IT_EPdi>:
void Image<T>::imfilter_h(Image<T1>& image,double* filter,int fsize) const
 8006362:	b5b0      	push	{r4, r5, r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af04      	add	r7, sp, #16
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
	if(matchDimension(image)==false)
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7fb f959 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <_ZNK5ImageIdE10imfilter_hIdEEvRS_IT_EPdi+0x3e>
		image.allocate(imWidth,imHeight,nChannels);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	681c      	ldr	r4, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6899      	ldr	r1, [r3, #8]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	68b8      	ldr	r0, [r7, #8]
 800639e:	47a0      	blx	r4
	ImageProcessing::hfiltering(pData,image.data(),imWidth,imHeight,nChannels,filter,fsize);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685c      	ldr	r4, [r3, #4]
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f7fb f934 	bl	8001612 <_ZN5ImageIdE4dataEv>
 80063aa:	4603      	mov	r3, r0
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6898      	ldr	r0, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68dd      	ldr	r5, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	9202      	str	r2, [sp, #8]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	9201      	str	r2, [sp, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	462b      	mov	r3, r5
 80063c6:	4602      	mov	r2, r0
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7fb f957 	bl	800167c <_ZN15ImageProcessing10hfilteringIddEEvPKT_PT0_iiiPKdi>
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bdb0      	pop	{r4, r5, r7, pc}

080063d6 <_ZNK5ImageIdE10imfilter_vIdEEvRS_IT_EPdi>:
void Image<T>::imfilter_v(Image<T1>& image,double* filter,int fsize) const
 80063d6:	b5b0      	push	{r4, r5, r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af04      	add	r7, sp, #16
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
	if(matchDimension(image)==false)
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7fb f91f 	bl	800162a <_ZNK5ImageIdE14matchDimensionIdEEbRKS_IT_E>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf0c      	ite	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	2300      	movne	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <_ZNK5ImageIdE10imfilter_vIdEEvRS_IT_EPdi+0x3e>
		image.allocate(imWidth,imHeight,nChannels);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	681c      	ldr	r4, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	68b8      	ldr	r0, [r7, #8]
 8006412:	47a0      	blx	r4
	ImageProcessing::vfiltering(pData,image.data(),imWidth,imHeight,nChannels,filter,fsize);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685c      	ldr	r4, [r3, #4]
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f7fb f8fa 	bl	8001612 <_ZN5ImageIdE4dataEv>
 800641e:	4603      	mov	r3, r0
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6898      	ldr	r0, [r3, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68dd      	ldr	r5, [r3, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	9202      	str	r2, [sp, #8]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	9201      	str	r2, [sp, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	462b      	mov	r3, r5
 800643a:	4602      	mov	r2, r0
 800643c:	4620      	mov	r0, r4
 800643e:	f7fb f9a7 	bl	8001790 <_ZN15ImageProcessing10vfilteringIddEEvPKT_PT0_iiiPKdi>
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bdb0      	pop	{r4, r5, r7, pc}

0800644a <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_>:
	}
}

template <class T>
template <class T1,class T2>
void Image<T>::warpImageBicubicRef(const Image<T>& ref,Image<T>& output,const Image<T1>& imdx,const Image<T1>& imdy,const Image<T1>& imdxdy,
 800644a:	b590      	push	{r4, r7, lr}
 800644c:	b0cd      	sub	sp, #308	; 0x134
 800644e:	af04      	add	r7, sp, #16
 8006450:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8006454:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8006458:	6020      	str	r0, [r4, #0]
 800645a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800645e:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8006462:	6001      	str	r1, [r0, #0]
 8006464:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006468:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800646c:	600a      	str	r2, [r1, #0]
 800646e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006472:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006476:	6013      	str	r3, [r2, #0]
																		const Image<T2>& vx,const Image<T2>& vy) const
{
	T* pIm = pData;
 8006478:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800647c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	const T1* pImDx = imdx.data();
 8006488:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800648c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f7fe fed5 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 8006496:	4603      	mov	r3, r0
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	const T1* pImDy = imdy.data();
 800649e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80064a2:	f7fe fecd 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80064a6:	4603      	mov	r3, r0
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	const T1* pImDxDy = imdxdy.data();
 80064ae:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80064b2:	f7fe fec5 	bl	8005240 <_ZNK5ImageIdE4dataEv>
 80064b6:	4603      	mov	r3, r0
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int width = vx.width();
 80064be:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80064c2:	f7fa ff0f 	bl	80012e4 <_ZNK5ImageIdE5widthEv>
 80064c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	int height = vx.height();
 80064ca:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80064ce:	f7fb f888 	bl	80015e2 <_ZNK5ImageIdE6heightEv>
 80064d2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	if(!output.matchDimension(width,height,nChannels))
 80064d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80064da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80064e6:	f5a2 708e 	sub.w	r0, r2, #284	; 0x11c
 80064ea:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80064ee:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	f7fe fe79 	bl	80051ea <_ZNK5ImageIdE14matchDimensionEiii>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0xea>
		output.allocate(width,height,nChannels);
 8006504:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006508:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	681c      	ldr	r4, [r3, #0]
 8006514:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006518:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006524:	f5a2 708e 	sub.w	r0, r2, #284	; 0x11c
 8006528:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800652c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	47a0      	blx	r4
//	if(IsFloat())
//		ImgMax = 1;
//	else
//		ImgMax = 255;

	for(int i  = 0; i<height; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800653a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800653e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006542:	429a      	cmp	r2, r3
 8006544:	f280 82e9 	bge.w	8006b1a <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x6d0>
		for(int j = 0;j<width;j++)
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800654e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006556:	429a      	cmp	r2, r3
 8006558:	f280 82d9 	bge.w	8006b0e <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x6c4>
		{
			int offset = i*width+j;
 800655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006560:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8006564:	fb02 f303 	mul.w	r3, r2, r3
 8006568:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			double x = j + vx.pData[offset];
 8006572:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800657e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	4413      	add	r3, r2
 800658c:	ed93 7b00 	vldr	d7, [r3]
 8006590:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006594:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
			double y = i + vy.pData[offset];
 8006598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80065a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	ed93 7b00 	vldr	d7, [r3]
 80065b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065ba:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
			if(x<0 || x>imWidth-1 || y<0 || y>imHeight-1)
 80065be:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 80065c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	d42a      	bmi.n	8006622 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x1d8>
 80065cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80065d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	3b01      	subs	r3, #1
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065e2:	ed97 6b3a 	vldr	d6, [r7, #232]	; 0xe8
 80065e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ee:	dc18      	bgt.n	8006622 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x1d8>
 80065f0:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80065f4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80065f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fc:	d411      	bmi.n	8006622 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x1d8>
 80065fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	3b01      	subs	r3, #1
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006614:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8006618:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	dd41      	ble.n	80066a6 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x25c>
			{
				for(int k = 0; k<nChannels;k++)
 8006622:	2300      	movs	r3, #0
 8006624:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006628:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800662c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006638:	429a      	cmp	r2, r3
 800663a:	f280 8261 	bge.w	8006b00 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x6b6>
					output.pData[offset*nChannels+k] = ref.pData[offset*nChannels+k];
 800663e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006642:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800664e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800665a:	fb03 f101 	mul.w	r1, r3, r1
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	440b      	add	r3, r1
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800666c:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	6851      	ldr	r1, [r2, #4]
 8006674:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006678:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	6912      	ldr	r2, [r2, #16]
 8006680:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8006684:	fb02 f000 	mul.w	r0, r2, r0
 8006688:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800668c:	4402      	add	r2, r0
 800668e:	00d2      	lsls	r2, r2, #3
 8006690:	4411      	add	r1, r2
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	e9c1 2300 	strd	r2, r3, [r1]
				for(int k = 0; k<nChannels;k++)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669e:	3301      	adds	r3, #1
 80066a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066a4:	e7c0      	b.n	8006628 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x1de>
				continue;
			}
			int x0 = x;
 80066a6:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 80066aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80066ae:	ee17 3a90 	vmov	r3, s15
 80066b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			int y0 = y;
 80066b6:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80066ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80066be:	ee17 3a90 	vmov	r3, s15
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			int x1 = x0+1;
 80066c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ca:	3301      	adds	r3, #1
 80066cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			int y1 = y0+1;
 80066d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d4:	3301      	adds	r3, #1
 80066d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			x0 = __min(__max(x0,0),imWidth-1);
 80066da:	2100      	movs	r1, #0
 80066dc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80066e0:	f7fa fc37 	bl	8000f52 <_Z5__maxIiiET_S0_T0_>
 80066e4:	4602      	mov	r2, r0
 80066e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80066ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7fa fc3d 	bl	8000f76 <_Z5__minIiiET_S0_T0_>
 80066fc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			x1 = __min(__max(x1,0),imWidth-1);
 8006700:	2100      	movs	r1, #0
 8006702:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006706:	f7fa fc24 	bl	8000f52 <_Z5__maxIiiET_S0_T0_>
 800670a:	4602      	mov	r2, r0
 800670c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006710:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	3b01      	subs	r3, #1
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fa fc2a 	bl	8000f76 <_Z5__minIiiET_S0_T0_>
 8006722:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
			y0 = __min(__max(y0,0),imHeight-1);
 8006726:	2100      	movs	r1, #0
 8006728:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800672c:	f7fa fc11 	bl	8000f52 <_Z5__maxIiiET_S0_T0_>
 8006730:	4602      	mov	r2, r0
 8006732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	3b01      	subs	r3, #1
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fa fc17 	bl	8000f76 <_Z5__minIiiET_S0_T0_>
 8006748:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			y1 = __min(__max(y1,0),imHeight-1);
 800674c:	2100      	movs	r1, #0
 800674e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006752:	f7fa fbfe 	bl	8000f52 <_Z5__maxIiiET_S0_T0_>
 8006756:	4602      	mov	r2, r0
 8006758:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800675c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	3b01      	subs	r3, #1
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f7fa fc04 	bl	8000f76 <_Z5__minIiiET_S0_T0_>
 800676e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

			double dx = x - x0;
 8006772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800677e:	ed97 6b3a 	vldr	d6, [r7, #232]	; 0xe8
 8006782:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006786:	ed87 7b32 	vstr	d7, [r7, #200]	; 0xc8
			double dy = y- y0;
 800678a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006796:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 800679a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800679e:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
			double dx2 = dx*dx;
 80067a2:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 80067a6:	ee27 7b07 	vmul.f64	d7, d7, d7
 80067aa:	ed87 7b2e 	vstr	d7, [r7, #184]	; 0xb8
			double dy2 = dy*dy;
 80067ae:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80067b2:	ee27 7b07 	vmul.f64	d7, d7, d7
 80067b6:	ed87 7b2c 	vstr	d7, [r7, #176]	; 0xb0
			double dx3 = dx*dx2;
 80067ba:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 80067be:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80067c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067c6:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
			double dy3 = dy*dy2;
 80067ca:	ed97 6b30 	vldr	d6, [r7, #192]	; 0xc0
 80067ce:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80067d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067d6:	ed87 7b28 	vstr	d7, [r7, #160]	; 0xa0


			for(int k = 0;k<nChannels;k++)
 80067da:	2300      	movs	r3, #0
 80067dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80067e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80067f0:	429a      	cmp	r2, r3
 80067f2:	f280 8186 	bge.w	8006b02 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x6b8>
			{
				offsets[0][0] = (y0*imWidth+x0)*nChannels + k;
 80067f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80067fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006806:	fb03 f202 	mul.w	r2, r3, r2
 800680a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680e:	4413      	add	r3, r2
 8006810:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006814:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	6912      	ldr	r2, [r2, #16]
 800681c:	fb03 f202 	mul.w	r2, r3, r2
 8006820:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006824:	441a      	add	r2, r3
 8006826:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800682a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800682e:	601a      	str	r2, [r3, #0]
				offsets[1][0] = (y0*imWidth+x1)*nChannels + k;
 8006830:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006834:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006840:	fb03 f202 	mul.w	r2, r3, r2
 8006844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006848:	4413      	add	r3, r2
 800684a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800684e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	6912      	ldr	r2, [r2, #16]
 8006856:	fb03 f202 	mul.w	r2, r3, r2
 800685a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800685e:	441a      	add	r2, r3
 8006860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006868:	609a      	str	r2, [r3, #8]
				offsets[0][1] = (y1*imWidth+x0)*nChannels + k;
 800686a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800686e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800687a:	fb03 f202 	mul.w	r2, r3, r2
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006882:	4413      	add	r3, r2
 8006884:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006888:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	6912      	ldr	r2, [r2, #16]
 8006890:	fb03 f202 	mul.w	r2, r3, r2
 8006894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006898:	441a      	add	r2, r3
 800689a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800689e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068a2:	605a      	str	r2, [r3, #4]
				offsets[1][1] = (y1*imWidth+x1)*nChannels + k;
 80068a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80068a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068b4:	fb03 f202 	mul.w	r2, r3, r2
 80068b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068bc:	4413      	add	r3, r2
 80068be:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80068c2:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	6912      	ldr	r2, [r2, #16]
 80068ca:	fb03 f202 	mul.w	r2, r3, r2
 80068ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068d2:	441a      	add	r2, r3
 80068d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80068d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068dc:	60da      	str	r2, [r3, #12]

				// set the sampling coefficients
				BicubicCoeff(a,pIm,pImDx,pImDy,pImDxDy,offsets);
 80068de:	f107 0120 	add.w	r1, r7, #32
 80068e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80068e6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80068ea:	f107 0310 	add.w	r3, r7, #16
 80068ee:	9302      	str	r3, [sp, #8]
 80068f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006900:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006904:	6800      	ldr	r0, [r0, #0]
 8006906:	f000 f9de 	bl	8006cc6 <_ZNK5ImageIdE12BicubicCoeffIdEEvPA4_dPKdPKT_S8_S8_PA2_Ki>

				// now use the coefficients for interpolation
				output.pData[offset*nChannels+k] = a[0][0] +          a[0][1]*dy +          a[0][2]*dy2 +           a[0][3]*dy3+
 800690a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800690e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006912:	ed93 6b00 	vldr	d6, [r3]
 8006916:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800691a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800691e:	ed93 5b02 	vldr	d5, [r3, #8]
 8006922:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8006926:	ee25 7b07 	vmul.f64	d7, d5, d7
 800692a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800692e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006932:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006936:	ed93 5b04 	vldr	d5, [r3, #16]
 800693a:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 800693e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006942:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006946:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800694a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800694e:	ed93 5b06 	vldr	d5, [r3, #24]
 8006952:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8006956:	ee25 7b07 	vmul.f64	d7, d5, d7
 800695a:	ee36 6b07 	vadd.f64	d6, d6, d7
					                                                                    a[1][0]*dx +   a[1][1]*dx*dy   + a[1][2]*dx*dy2   + a[1][3]*dx*dy3 +
 800695e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006962:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006966:	ed93 5b08 	vldr	d5, [r3, #32]
 800696a:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 800696e:	ee25 7b07 	vmul.f64	d7, d5, d7
				output.pData[offset*nChannels+k] = a[0][0] +          a[0][1]*dy +          a[0][2]*dy2 +           a[0][3]*dy3+
 8006972:	ee36 6b07 	vadd.f64	d6, d6, d7
					                                                                    a[1][0]*dx +   a[1][1]*dx*dy   + a[1][2]*dx*dy2   + a[1][3]*dx*dy3 +
 8006976:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800697a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800697e:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8006982:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8006986:	ee25 5b07 	vmul.f64	d5, d5, d7
 800698a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800698e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006992:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006996:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800699a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800699e:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 80069a2:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 80069a6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80069aa:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80069ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80069b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80069b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80069ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069be:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80069c2:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 80069c6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80069ca:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80069ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80069d2:	ee36 6b07 	vadd.f64	d6, d6, d7
																						a[2][0]*dx2 + a[2][1]*dx2*dy + a[2][2]*dx2*dy2 + a[2][3]*dx2*dy3+
 80069d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80069da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069de:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80069e2:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80069e6:	ee25 7b07 	vmul.f64	d7, d5, d7
					                                                                    a[1][0]*dx +   a[1][1]*dx*dy   + a[1][2]*dx*dy2   + a[1][3]*dx*dy3 +
 80069ea:	ee36 6b07 	vadd.f64	d6, d6, d7
																						a[2][0]*dx2 + a[2][1]*dx2*dy + a[2][2]*dx2*dy2 + a[2][3]*dx2*dy3+
 80069ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80069f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069f6:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
 80069fa:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80069fe:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006a02:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8006a06:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006a0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006a12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a16:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8006a1a:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8006a1e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006a22:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8006a26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006a2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006a32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a36:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8006a3a:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8006a3e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006a42:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8006a46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006a4a:	ee36 6b07 	vadd.f64	d6, d6, d7
																						a[3][0]*dx3 + a[3][1]*dx3*dy + a[3][2]*dx3*dy2 + a[3][3]*dx3*dy3;
 8006a4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006a52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a56:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8006a5a:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8006a5e:	ee25 7b07 	vmul.f64	d7, d5, d7
																						a[2][0]*dx2 + a[2][1]*dx2*dy + a[2][2]*dx2*dy2 + a[2][3]*dx2*dy3+
 8006a62:	ee36 6b07 	vadd.f64	d6, d6, d7
																						a[3][0]*dx3 + a[3][1]*dx3*dy + a[3][2]*dx3*dy2 + a[3][3]*dx3*dy3;
 8006a66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006a6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a6e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8006a72:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8006a76:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006a7a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8006a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006a82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006a8a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a8e:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8006a92:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8006a96:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006a9a:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8006a9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006aa2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006aa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006aaa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006aae:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8006ab2:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8006ab6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006aba:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8006abe:	ee25 7b07 	vmul.f64	d7, d5, d7
				output.pData[offset*nChannels+k] = a[0][0] +          a[0][1]*dy +          a[0][2]*dy2 +           a[0][3]*dy3+
 8006ac2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006ac6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006ad2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8006ade:	fb03 f101 	mul.w	r1, r3, r1
 8006ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ae6:	440b      	add	r3, r1
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
																						a[3][0]*dx3 + a[3][1]*dx3*dy + a[3][2]*dx3*dy2 + a[3][3]*dx3*dy3;
 8006aec:	ee36 7b07 	vadd.f64	d7, d6, d7
				output.pData[offset*nChannels+k] = a[0][0] +          a[0][1]*dy +          a[0][2]*dy2 +           a[0][3]*dy3+
 8006af0:	ed83 7b00 	vstr	d7, [r3]
			for(int k = 0;k<nChannels;k++)
 8006af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006af8:	3301      	adds	r3, #1
 8006afa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006afe:	e66f      	b.n	80067e0 <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x396>
				continue;
 8006b00:	bf00      	nop
		for(int j = 0;j<width;j++)
 8006b02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b06:	3301      	adds	r3, #1
 8006b08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b0c:	e51f      	b.n	800654e <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0x104>
	for(int i  = 0; i<height; i++)
 8006b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b12:	3301      	adds	r3, #1
 8006b14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b18:	e50f      	b.n	800653a <_ZNK5ImageIdE19warpImageBicubicRefIddEEvRKS0_RS0_RKS_IT_ES8_S8_RKS_IT0_ESC_+0xf0>
				//if(!(output.pData[offset*nChannels+k]<100000 && output.pData[offset*nChannels+k]>-100000)) // bound the values
				//	output.pData[offset*nChannels+k] = ref.pData[offset*nChannels+k];

			}
		}
}
 8006b1a:	bf00      	nop
 8006b1c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}

08006b24 <_ZNK5ImageIdE7IsFloatEv>:
bool Image<T>::IsFloat() const
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	if(typeid(T)==typeid(float) || typeid(T)==typeid(double) || typeid(T)==typeid(long double))
 8006b2c:	4910      	ldr	r1, [pc, #64]	; (8006b70 <_ZNK5ImageIdE7IsFloatEv+0x4c>)
 8006b2e:	4811      	ldr	r0, [pc, #68]	; (8006b74 <_ZNK5ImageIdE7IsFloatEv+0x50>)
 8006b30:	f00c ffba 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <_ZNK5ImageIdE7IsFloatEv+0x32>
 8006b3a:	490e      	ldr	r1, [pc, #56]	; (8006b74 <_ZNK5ImageIdE7IsFloatEv+0x50>)
 8006b3c:	480d      	ldr	r0, [pc, #52]	; (8006b74 <_ZNK5ImageIdE7IsFloatEv+0x50>)
 8006b3e:	f00c ffb3 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <_ZNK5ImageIdE7IsFloatEv+0x32>
 8006b48:	490b      	ldr	r1, [pc, #44]	; (8006b78 <_ZNK5ImageIdE7IsFloatEv+0x54>)
 8006b4a:	480a      	ldr	r0, [pc, #40]	; (8006b74 <_ZNK5ImageIdE7IsFloatEv+0x50>)
 8006b4c:	f00c ffac 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_ZNK5ImageIdE7IsFloatEv+0x36>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <_ZNK5ImageIdE7IsFloatEv+0x38>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <_ZNK5ImageIdE7IsFloatEv+0x40>
		return true;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <_ZNK5ImageIdE7IsFloatEv+0x42>
		return false;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	080150d0 	.word	0x080150d0
 8006b74:	080150c8 	.word	0x080150c8
 8006b78:	080150c0 	.word	0x080150c0

08006b7c <_ZN6VectorIdE11releaseDataEv>:
void Vector<T>::releaseData()
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	if(pData!=NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <_ZN6VectorIdE11releaseDataEv+0x22>
		delete[] pData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <_ZN6VectorIdE11releaseDataEv+0x22>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f00c fee7 	bl	801396c <_ZdaPv>
	pData=NULL;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
	nDim=0;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <_ZNK5ImageIdE17isDerivativeImageEv>:
	inline bool isDerivativeImage() const {return IsDerivativeImage;};
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7f1b      	ldrb	r3, [r3, #28]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <_ZNK5ImageIdE9colortypeEv>:
	inline color_type colortype() const{return colorType;};
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7f5b      	ldrb	r3, [r3, #29]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii>:
void ImageProcessing::ResizeImage(const T1 *pSrcImage, T2 *pDstImage, int SrcWidth, int SrcHeight, int nChannels, int DstWidth, int DstHeight)
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b090      	sub	sp, #64	; 0x40
 8006be6:	af02      	add	r7, sp, #8
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	603b      	str	r3, [r7, #0]
	double xRatio=(double)DstWidth/SrcWidth;
 8006bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006c04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c08:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double yRatio=(double)DstHeight/SrcHeight;
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006c20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c24:	ed87 7b08 	vstr	d7, [r7, #32]
	for(int i=0;i<DstHeight;i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c30:	429a      	cmp	r2, r3
 8006c32:	da44      	bge.n	8006cbe <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii+0xdc>
		for(int j=0;j<DstWidth;j++)
 8006c34:	2300      	movs	r3, #0
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	da3a      	bge.n	8006cb6 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii+0xd4>
			x=(double)(j+1)/xRatio-1;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	3301      	adds	r3, #1
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006c4c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8006c50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c5c:	ed87 7b06 	vstr	d7, [r7, #24]
			y=(double)(i+1)/yRatio-1;
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	3301      	adds	r3, #1
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006c6c:	ed97 6b08 	vldr	d6, [r7, #32]
 8006c70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006c74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c7c:	ed87 7b04 	vstr	d7, [r7, #16]
			BilinearInterpolate(pSrcImage,SrcWidth,SrcHeight,nChannels,x,y,pDstImage+(i*DstWidth+j)*nChannels);
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c84:	fb03 f202 	mul.w	r2, r3, r2
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	4413      	add	r3, r2
 8006c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	4413      	add	r3, r2
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	ed97 1b04 	vldr	d1, [r7, #16]
 8006c9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8006ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fa f835 	bl	8000d18 <_ZN15ImageProcessing19BilinearInterpolateIddEEvPKT_iiiddPT0_>
		for(int j=0;j<DstWidth;j++)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb4:	e7c0      	b.n	8006c38 <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii+0x56>
	for(int i=0;i<DstHeight;i++)
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	3301      	adds	r3, #1
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	e7b6      	b.n	8006c2c <_ZN15ImageProcessing11ResizeImageIddEEvPKT_PT0_iiiii+0x4a>
}
 8006cbe:	bf00      	nop
 8006cc0:	3738      	adds	r7, #56	; 0x38
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <_ZNK5ImageIdE12BicubicCoeffIdEEvPA4_dPKdPKT_S8_S8_PA2_Ki>:
void Image<T>::BicubicCoeff(double a[][4],const T* pIm,const T1* pImDx,const T1* pImDy,const T1* pImDxDy,const int offsets[][2]) const
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
		a[0][0] = pIm[offsets[0][0]];
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	e9c1 2300 	strd	r2, r3, [r1]
		a[1][0] = pImDx[offsets[0][0]];
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	f102 0120 	add.w	r1, r2, #32
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e9c1 2300 	strd	r2, r3, [r1]
		a[2][0] = -3*pIm[offsets[0][0]] + 3*pIm[offsets[1][0]] -2*pImDx[offsets[0][0]] - pImDx[offsets[1][0]];
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	ed93 7b00 	vldr	d7, [r3]
 8006d0e:	eeb8 6b08 	vmov.f64	d6, #136	; 0xc0400000 -3.0
 8006d12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	ed93 7b00 	vldr	d7, [r3]
 8006d26:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8006d2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006d2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	ed93 7b00 	vldr	d7, [r3]
 8006d40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006d44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	ed93 7b00 	vldr	d7, [r3]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3340      	adds	r3, #64	; 0x40
 8006d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d60:	ed83 7b00 	vstr	d7, [r3]
		a[3][0] =   2*pIm[offsets[0][0]] -  2*pIm[offsets[1][0]] +   pImDx[offsets[0][0]] +pImDx[offsets[1][0]];
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	ed93 7b00 	vldr	d7, [r3]
 8006d72:	ee37 6b07 	vadd.f64	d6, d7, d7
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	ed93 7b00 	vldr	d7, [r3]
 8006d86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006d8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	4413      	add	r3, r2
 8006d98:	ed93 7b00 	vldr	d7, [r3]
 8006d9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	3308      	adds	r3, #8
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	4413      	add	r3, r2
 8006dac:	ed93 7b00 	vldr	d7, [r3]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3360      	adds	r3, #96	; 0x60
 8006db4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006db8:	ed83 7b00 	vstr	d7, [r3]
		a[0][1] = pImDy[offsets[0][0]];
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		a[1][1] = pImDxDy[offsets[0][0]];
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	f102 0120 	add.w	r1, r2, #32
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		a[2][1] = -3*pImDy[offsets[0][0]] + 3*pImDy[offsets[1][0]] - 2*pImDxDy[offsets[0][0]] - pImDxDy[offsets[1][0]];
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4413      	add	r3, r2
 8006df2:	ed93 7b00 	vldr	d7, [r3]
 8006df6:	eeb8 6b08 	vmov.f64	d6, #136	; 0xc0400000 -3.0
 8006dfa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	3308      	adds	r3, #8
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	4413      	add	r3, r2
 8006e0a:	ed93 7b00 	vldr	d7, [r3]
 8006e0e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8006e12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	ed93 7b00 	vldr	d7, [r3]
 8006e28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006e2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	3308      	adds	r3, #8
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	ed93 7b00 	vldr	d7, [r3]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	3340      	adds	r3, #64	; 0x40
 8006e44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e48:	ed83 7b02 	vstr	d7, [r3, #8]
		a[3][1] = 2*pImDy[offsets[0][0]] - 2*pImDy[offsets[1][0]] + pImDxDy[offsets[0][0]] + pImDxDy[offsets[1][0]];
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4413      	add	r3, r2
 8006e56:	ed93 7b00 	vldr	d7, [r3]
 8006e5a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	3308      	adds	r3, #8
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4413      	add	r3, r2
 8006e6a:	ed93 7b00 	vldr	d7, [r3]
 8006e6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006e72:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	ed93 7b00 	vldr	d7, [r3]
 8006e84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	ed93 7b00 	vldr	d7, [r3]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	3360      	adds	r3, #96	; 0x60
 8006e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ea0:	ed83 7b02 	vstr	d7, [r3, #8]
		a[0][2] =      -3*pIm[offsets[0][0]]      + 3*pIm[offsets[0][1]]       -2*pImDy[offsets[0][0]]        - pImDy[offsets[0][1]];
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	ed93 7b00 	vldr	d7, [r3]
 8006eb2:	eeb8 6b08 	vmov.f64	d6, #136	; 0xc0400000 -3.0
 8006eb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	ed93 7b00 	vldr	d7, [r3]
 8006ec8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8006ecc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ed0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4413      	add	r3, r2
 8006ede:	ed93 7b00 	vldr	d7, [r3]
 8006ee2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006ee6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	ed93 7b00 	vldr	d7, [r3]
 8006ef8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	ed83 7b04 	vstr	d7, [r3, #16]
		a[1][2] = -3*pImDx[offsets[0][0]] + 3*pImDx[offsets[0][1]] -2*pImDxDy[offsets[0][0]] - pImDxDy[offsets[0][1]];
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	ed93 7b00 	vldr	d7, [r3]
 8006f10:	eeb8 6b08 	vmov.f64	d6, #136	; 0xc0400000 -3.0
 8006f14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	ed93 7b00 	vldr	d7, [r3]
 8006f26:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8006f2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	ed93 7b00 	vldr	d7, [r3]
 8006f40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	ed93 7b00 	vldr	d7, [r3]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	3320      	adds	r3, #32
 8006f5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f5e:	ed83 7b04 	vstr	d7, [r3, #16]
		a[2][2] =		     9*pIm[offsets[0][0]]      -        9*pIm[offsets[1][0]]     -        9*pIm[offsets[0][1]]     +    9*pIm[offsets[1][1]] +
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	ed93 7b00 	vldr	d7, [r3]
 8006f70:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8006f74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4413      	add	r3, r2
 8006f84:	ed93 7b00 	vldr	d7, [r3]
 8006f88:	eeb2 5b02 	vmov.f64	d5, #34	; 0x41100000  9.0
 8006f8c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f90:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	ed93 7b00 	vldr	d7, [r3]
 8006fa2:	eeb2 5b02 	vmov.f64	d5, #34	; 0x41100000  9.0
 8006fa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006faa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	ed93 7b00 	vldr	d7, [r3]
 8006fbe:	eeb2 5b02 	vmov.f64	d5, #34	; 0x41100000  9.0
 8006fc2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006fc6:	ee36 6b07 	vadd.f64	d6, d6, d7
								6*pImDx[offsets[0][0]]   +    3*pImDx[offsets[1][0]]   -     6*pImDx[offsets[0][1]] -    3*pImDx[offsets[1][1]] +
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	ed93 7b00 	vldr	d7, [r3]
 8006fd8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8006fdc:	ee27 7b05 	vmul.f64	d7, d7, d5
		a[2][2] =		     9*pIm[offsets[0][0]]      -        9*pIm[offsets[1][0]]     -        9*pIm[offsets[0][1]]     +    9*pIm[offsets[1][1]] +
 8006fe0:	ee36 6b07 	vadd.f64	d6, d6, d7
								6*pImDx[offsets[0][0]]   +    3*pImDx[offsets[1][0]]   -     6*pImDx[offsets[0][1]] -    3*pImDx[offsets[1][1]] +
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	4413      	add	r3, r2
 8006ff0:	ed93 7b00 	vldr	d7, [r3]
 8006ff4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8006ff8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ffc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4413      	add	r3, r2
 800700a:	ed93 7b00 	vldr	d7, [r3]
 800700e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007012:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007016:	ee36 6b47 	vsub.f64	d6, d6, d7
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	3308      	adds	r3, #8
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	4413      	add	r3, r2
 8007026:	ed93 7b00 	vldr	d7, [r3]
 800702a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800702e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007032:	ee36 6b47 	vsub.f64	d6, d6, d7
								6*pImDy[offsets[0][0]]   -     6*pImDy[offsets[1][0]] +      3*pImDy[offsets[0][1]] -    3*pImDy[offsets[1][1]] +
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	4413      	add	r3, r2
 8007040:	ed93 7b00 	vldr	d7, [r3]
 8007044:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007048:	ee27 7b05 	vmul.f64	d7, d7, d5
								6*pImDx[offsets[0][0]]   +    3*pImDx[offsets[1][0]]   -     6*pImDx[offsets[0][1]] -    3*pImDx[offsets[1][1]] +
 800704c:	ee36 6b07 	vadd.f64	d6, d6, d7
								6*pImDy[offsets[0][0]]   -     6*pImDy[offsets[1][0]] +      3*pImDy[offsets[0][1]] -    3*pImDy[offsets[1][1]] +
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	3308      	adds	r3, #8
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4413      	add	r3, r2
 800705c:	ed93 7b00 	vldr	d7, [r3]
 8007060:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007064:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007068:	ee36 6b47 	vsub.f64	d6, d6, d7
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4413      	add	r3, r2
 8007076:	ed93 7b00 	vldr	d7, [r3]
 800707a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800707e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007082:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	3308      	adds	r3, #8
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4413      	add	r3, r2
 8007092:	ed93 7b00 	vldr	d7, [r3]
 8007096:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800709a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800709e:	ee36 6b47 	vsub.f64	d6, d6, d7
							4*pImDxDy[offsets[0][0]] + 2*pImDxDy[offsets[1][0]] + 2*pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	ed93 7b00 	vldr	d7, [r3]
 80070b0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80070b4:	ee27 7b05 	vmul.f64	d7, d7, d5
								6*pImDy[offsets[0][0]]   -     6*pImDy[offsets[1][0]] +      3*pImDy[offsets[0][1]] -    3*pImDy[offsets[1][1]] +
 80070b8:	ee36 6b07 	vadd.f64	d6, d6, d7
							4*pImDxDy[offsets[0][0]] + 2*pImDxDy[offsets[1][0]] + 2*pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	3308      	adds	r3, #8
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	ed93 7b00 	vldr	d7, [r3]
 80070cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80070d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	ed93 7b00 	vldr	d7, [r3]
 80070e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80070e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	3308      	adds	r3, #8
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	ed93 7b00 	vldr	d7, [r3]
		a[2][2] =		     9*pIm[offsets[0][0]]      -        9*pIm[offsets[1][0]]     -        9*pIm[offsets[0][1]]     +    9*pIm[offsets[1][1]] +
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	3340      	adds	r3, #64	; 0x40
							4*pImDxDy[offsets[0][0]] + 2*pImDxDy[offsets[1][0]] + 2*pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 80070fe:	ee36 7b07 	vadd.f64	d7, d6, d7
		a[2][2] =		     9*pIm[offsets[0][0]]      -        9*pIm[offsets[1][0]]     -        9*pIm[offsets[0][1]]     +    9*pIm[offsets[1][1]] +
 8007102:	ed83 7b04 	vstr	d7, [r3, #16]
		a[3][2] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	ed93 7b00 	vldr	d7, [r3]
 8007114:	eeb9 6b08 	vmov.f64	d6, #152	; 0xc0c00000 -6.0
 8007118:	ee27 6b06 	vmul.f64	d6, d7, d6
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3308      	adds	r3, #8
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	ed93 7b00 	vldr	d7, [r3]
 800712c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007130:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007134:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	ed93 7b00 	vldr	d7, [r3]
 8007146:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800714a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800714e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	3308      	adds	r3, #8
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	ed93 7b00 	vldr	d7, [r3]
 8007162:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007166:	ee27 7b05 	vmul.f64	d7, d7, d5
 800716a:	ee36 6b47 	vsub.f64	d6, d6, d7
							(-3)*pImDx[offsets[0][0]]   -     3*pImDx[offsets[1][0]]   +    3*pImDx[offsets[0][1]] +   3*pImDx[offsets[1][1]] +
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	4413      	add	r3, r2
 8007178:	ed93 7b00 	vldr	d7, [r3]
 800717c:	eeb8 5b08 	vmov.f64	d5, #136	; 0xc0400000 -3.0
 8007180:	ee27 7b05 	vmul.f64	d7, d7, d5
		a[3][2] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 8007184:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-3)*pImDx[offsets[0][0]]   -     3*pImDx[offsets[1][0]]   +    3*pImDx[offsets[0][1]] +   3*pImDx[offsets[1][1]] +
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	3308      	adds	r3, #8
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	4413      	add	r3, r2
 8007194:	ed93 7b00 	vldr	d7, [r3]
 8007198:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800719c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4413      	add	r3, r2
 80071ae:	ed93 7b00 	vldr	d7, [r3]
 80071b2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80071b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	3308      	adds	r3, #8
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	ed93 7b00 	vldr	d7, [r3]
 80071ce:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80071d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071d6:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-4)*pImDy[offsets[0][0]]   +    4*pImDy[offsets[1][0]]    -    2*pImDy[offsets[0][1]] +   2*pImDy[offsets[1][1]] +
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	ed93 7b00 	vldr	d7, [r3]
 80071e8:	eeb9 5b00 	vmov.f64	d5, #144	; 0xc0800000 -4.0
 80071ec:	ee27 7b05 	vmul.f64	d7, d7, d5
							(-3)*pImDx[offsets[0][0]]   -     3*pImDx[offsets[1][0]]   +    3*pImDx[offsets[0][1]] +   3*pImDx[offsets[1][1]] +
 80071f0:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-4)*pImDy[offsets[0][0]]   +    4*pImDy[offsets[1][0]]    -    2*pImDy[offsets[0][1]] +   2*pImDy[offsets[1][1]] +
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	3308      	adds	r3, #8
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	4413      	add	r3, r2
 8007200:	ed93 7b00 	vldr	d7, [r3]
 8007204:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8007208:	ee27 7b05 	vmul.f64	d7, d7, d5
 800720c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	4413      	add	r3, r2
 800721a:	ed93 7b00 	vldr	d7, [r3]
 800721e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007222:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	3308      	adds	r3, #8
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	4413      	add	r3, r2
 8007232:	ed93 7b00 	vldr	d7, [r3]
 8007236:	ee37 7b07 	vadd.f64	d7, d7, d7
 800723a:	ee36 6b07 	vadd.f64	d6, d6, d7
						(-2)*pImDxDy[offsets[0][0]]  - 2*pImDxDy[offsets[1][0]]   -    pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	ed93 7b00 	vldr	d7, [r3]
 800724c:	eeb8 5b00 	vmov.f64	d5, #128	; 0xc0000000 -2.0
 8007250:	ee27 7b05 	vmul.f64	d7, d7, d5
							(-4)*pImDy[offsets[0][0]]   +    4*pImDy[offsets[1][0]]    -    2*pImDy[offsets[0][1]] +   2*pImDy[offsets[1][1]] +
 8007254:	ee36 6b07 	vadd.f64	d6, d6, d7
						(-2)*pImDxDy[offsets[0][0]]  - 2*pImDxDy[offsets[1][0]]   -    pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	3308      	adds	r3, #8
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	ed93 7b00 	vldr	d7, [r3]
 8007268:	ee37 7b07 	vadd.f64	d7, d7, d7
 800726c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	ed93 7b00 	vldr	d7, [r3]
 800727e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	3308      	adds	r3, #8
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	ed93 7b00 	vldr	d7, [r3]
		a[3][2] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3360      	adds	r3, #96	; 0x60
						(-2)*pImDxDy[offsets[0][0]]  - 2*pImDxDy[offsets[1][0]]   -    pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 8007296:	ee36 7b47 	vsub.f64	d7, d6, d7
		a[3][2] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 800729a:	ed83 7b04 	vstr	d7, [r3, #16]
		a[0][3] =      2*pIm[offsets[0][0]]        - 2*pIm[offsets[0][1]]       + pImDy[offsets[0][0]]        + pImDy[offsets[0][1]];
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	ed93 7b00 	vldr	d7, [r3]
 80072ac:	ee37 6b07 	vadd.f64	d6, d7, d7
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4413      	add	r3, r2
 80072ba:	ed93 7b00 	vldr	d7, [r3]
 80072be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80072c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	ed93 7b00 	vldr	d7, [r3]
 80072d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4413      	add	r3, r2
 80072e2:	ed93 7b00 	vldr	d7, [r3]
 80072e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	ed83 7b06 	vstr	d7, [r3, #24]
		a[1][3] = 2*pImDx[offsets[0][0]]  - 2*pImDx[offsets[0][1]]  + pImDxDy[offsets[0][0]] + pImDxDy[offsets[0][1]];
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4413      	add	r3, r2
 80072fa:	ed93 7b00 	vldr	d7, [r3]
 80072fe:	ee37 6b07 	vadd.f64	d6, d7, d7
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	4413      	add	r3, r2
 800730c:	ed93 7b00 	vldr	d7, [r3]
 8007310:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007314:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	ed93 7b00 	vldr	d7, [r3]
 8007326:	ee36 6b07 	vadd.f64	d6, d6, d7
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	ed93 7b00 	vldr	d7, [r3]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	3320      	adds	r3, #32
 800733c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007340:	ed83 7b06 	vstr	d7, [r3, #24]
		a[2][3] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	ed93 7b00 	vldr	d7, [r3]
 8007352:	eeb9 6b08 	vmov.f64	d6, #152	; 0xc0c00000 -6.0
 8007356:	ee27 6b06 	vmul.f64	d6, d7, d6
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	3308      	adds	r3, #8
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	ed93 7b00 	vldr	d7, [r3]
 800736a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800736e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007372:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	4413      	add	r3, r2
 8007380:	ed93 7b00 	vldr	d7, [r3]
 8007384:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8007388:	ee27 7b05 	vmul.f64	d7, d7, d5
 800738c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	3308      	adds	r3, #8
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	ed93 7b00 	vldr	d7, [r3]
 80073a0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80073a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80073a8:	ee36 6b47 	vsub.f64	d6, d6, d7
							(-4)*pImDx[offsets[0][0]]   -     2*pImDx[offsets[1][0]]   +    4*pImDx[offsets[0][1]] +   2*pImDx[offsets[1][1]] +
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	ed93 7b00 	vldr	d7, [r3]
 80073ba:	eeb9 5b00 	vmov.f64	d5, #144	; 0xc0800000 -4.0
 80073be:	ee27 7b05 	vmul.f64	d7, d7, d5
		a[2][3] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 80073c2:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-4)*pImDx[offsets[0][0]]   -     2*pImDx[offsets[1][0]]   +    4*pImDx[offsets[0][1]] +   2*pImDx[offsets[1][1]] +
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	3308      	adds	r3, #8
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	ed93 7b00 	vldr	d7, [r3]
 80073d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80073da:	ee36 6b47 	vsub.f64	d6, d6, d7
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	ed93 7b00 	vldr	d7, [r3]
 80073ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80073f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80073f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	3308      	adds	r3, #8
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4413      	add	r3, r2
 8007404:	ed93 7b00 	vldr	d7, [r3]
 8007408:	ee37 7b07 	vadd.f64	d7, d7, d7
 800740c:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-3)*pImDy[offsets[0][0]]   +    3*pImDy[offsets[1][0]]    -    3*pImDy[offsets[0][1]] +   3*pImDy[offsets[1][1]] +
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	4413      	add	r3, r2
 800741a:	ed93 7b00 	vldr	d7, [r3]
 800741e:	eeb8 5b08 	vmov.f64	d5, #136	; 0xc0400000 -3.0
 8007422:	ee27 7b05 	vmul.f64	d7, d7, d5
							(-4)*pImDx[offsets[0][0]]   -     2*pImDx[offsets[1][0]]   +    4*pImDx[offsets[0][1]] +   2*pImDx[offsets[1][1]] +
 8007426:	ee36 6b07 	vadd.f64	d6, d6, d7
							(-3)*pImDy[offsets[0][0]]   +    3*pImDy[offsets[1][0]]    -    3*pImDy[offsets[0][1]] +   3*pImDy[offsets[1][1]] +
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	3308      	adds	r3, #8
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	4413      	add	r3, r2
 8007436:	ed93 7b00 	vldr	d7, [r3]
 800743a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800743e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007442:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4413      	add	r3, r2
 8007450:	ed93 7b00 	vldr	d7, [r3]
 8007454:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8007458:	ee27 7b05 	vmul.f64	d7, d7, d5
 800745c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	3308      	adds	r3, #8
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4413      	add	r3, r2
 800746c:	ed93 7b00 	vldr	d7, [r3]
 8007470:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8007474:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007478:	ee36 6b07 	vadd.f64	d6, d6, d7
						(-2)*pImDxDy[offsets[0][0]]  -     pImDxDy[offsets[1][0]] -  2*pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	ed93 7b00 	vldr	d7, [r3]
 800748a:	eeb8 5b00 	vmov.f64	d5, #128	; 0xc0000000 -2.0
 800748e:	ee27 7b05 	vmul.f64	d7, d7, d5
							(-3)*pImDy[offsets[0][0]]   +    3*pImDy[offsets[1][0]]    -    3*pImDy[offsets[0][1]] +   3*pImDy[offsets[1][1]] +
 8007492:	ee36 6b07 	vadd.f64	d6, d6, d7
						(-2)*pImDxDy[offsets[0][0]]  -     pImDxDy[offsets[1][0]] -  2*pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	3308      	adds	r3, #8
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	ed93 7b00 	vldr	d7, [r3]
 80074a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	4413      	add	r3, r2
 80074b4:	ed93 7b00 	vldr	d7, [r3]
 80074b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80074bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	3308      	adds	r3, #8
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	ed93 7b00 	vldr	d7, [r3]
		a[2][3] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	3340      	adds	r3, #64	; 0x40
						(-2)*pImDxDy[offsets[0][0]]  -     pImDxDy[offsets[1][0]] -  2*pImDxDy[offsets[0][1]]   -  pImDxDy[offsets[1][1]];
 80074d4:	ee36 7b47 	vsub.f64	d7, d6, d7
		a[2][3] =		    -6*pIm[offsets[0][0]]      +      6*pIm[offsets[1][0]]     +       6*pIm[offsets[0][1]]     -     6*pIm[offsets[1][1]] +
 80074d8:	ed83 7b06 	vstr	d7, [r3, #24]
		a[3][3] =		     4*pIm[offsets[0][0]]      -        4*pIm[offsets[1][0]]     -        4*pIm[offsets[0][1]]     +    4*pIm[offsets[1][1]] +
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	ed93 7b00 	vldr	d7, [r3]
 80074ea:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80074ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	3308      	adds	r3, #8
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	ed93 7b00 	vldr	d7, [r3]
 8007502:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8007506:	ee27 7b05 	vmul.f64	d7, d7, d5
 800750a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4413      	add	r3, r2
 8007518:	ed93 7b00 	vldr	d7, [r3]
 800751c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8007520:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007524:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	3308      	adds	r3, #8
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	4413      	add	r3, r2
 8007534:	ed93 7b00 	vldr	d7, [r3]
 8007538:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800753c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007540:	ee36 6b07 	vadd.f64	d6, d6, d7
								2*pImDx[offsets[0][0]]   +    2*pImDx[offsets[1][0]]   -     2*pImDx[offsets[0][1]] -    2*pImDx[offsets[1][1]] +
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4413      	add	r3, r2
 800754e:	ed93 7b00 	vldr	d7, [r3]
 8007552:	ee37 7b07 	vadd.f64	d7, d7, d7
		a[3][3] =		     4*pIm[offsets[0][0]]      -        4*pIm[offsets[1][0]]     -        4*pIm[offsets[0][1]]     +    4*pIm[offsets[1][1]] +
 8007556:	ee36 6b07 	vadd.f64	d6, d6, d7
								2*pImDx[offsets[0][0]]   +    2*pImDx[offsets[1][0]]   -     2*pImDx[offsets[0][1]] -    2*pImDx[offsets[1][1]] +
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	3308      	adds	r3, #8
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4413      	add	r3, r2
 8007566:	ed93 7b00 	vldr	d7, [r3]
 800756a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800756e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	4413      	add	r3, r2
 800757c:	ed93 7b00 	vldr	d7, [r3]
 8007580:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007584:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	3308      	adds	r3, #8
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	4413      	add	r3, r2
 8007594:	ed93 7b00 	vldr	d7, [r3]
 8007598:	ee37 7b07 	vadd.f64	d7, d7, d7
 800759c:	ee36 6b47 	vsub.f64	d6, d6, d7
								2*pImDy[offsets[0][0]]   -     2*pImDy[offsets[1][0]] +      2*pImDy[offsets[0][1]] -    2*pImDy[offsets[1][1]] +
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	4413      	add	r3, r2
 80075aa:	ed93 7b00 	vldr	d7, [r3]
 80075ae:	ee37 7b07 	vadd.f64	d7, d7, d7
								2*pImDx[offsets[0][0]]   +    2*pImDx[offsets[1][0]]   -     2*pImDx[offsets[0][1]] -    2*pImDx[offsets[1][1]] +
 80075b2:	ee36 6b07 	vadd.f64	d6, d6, d7
								2*pImDy[offsets[0][0]]   -     2*pImDy[offsets[1][0]] +      2*pImDy[offsets[0][1]] -    2*pImDy[offsets[1][1]] +
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	3308      	adds	r3, #8
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4413      	add	r3, r2
 80075c2:	ed93 7b00 	vldr	d7, [r3]
 80075c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80075ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4413      	add	r3, r2
 80075d8:	ed93 7b00 	vldr	d7, [r3]
 80075dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80075e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	3308      	adds	r3, #8
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4413      	add	r3, r2
 80075f0:	ed93 7b00 	vldr	d7, [r3]
 80075f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80075f8:	ee36 6b47 	vsub.f64	d6, d6, d7
								pImDxDy[offsets[0][0]] +     pImDxDy[offsets[1][0]] +      pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	4413      	add	r3, r2
 8007606:	ed93 7b00 	vldr	d7, [r3]
								2*pImDy[offsets[0][0]]   -     2*pImDy[offsets[1][0]] +      2*pImDy[offsets[0][1]] -    2*pImDy[offsets[1][1]] +
 800760a:	ee36 6b07 	vadd.f64	d6, d6, d7
								pImDxDy[offsets[0][0]] +     pImDxDy[offsets[1][0]] +      pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	3308      	adds	r3, #8
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	ed93 7b00 	vldr	d7, [r3]
 800761e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	ed93 7b00 	vldr	d7, [r3]
 8007630:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	3308      	adds	r3, #8
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	ed93 7b00 	vldr	d7, [r3]
		a[3][3] =		     4*pIm[offsets[0][0]]      -        4*pIm[offsets[1][0]]     -        4*pIm[offsets[0][1]]     +    4*pIm[offsets[1][1]] +
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3360      	adds	r3, #96	; 0x60
								pImDxDy[offsets[0][0]] +     pImDxDy[offsets[1][0]] +      pImDxDy[offsets[0][1]] + pImDxDy[offsets[1][1]];
 8007648:	ee36 7b07 	vadd.f64	d7, d6, d7
		a[3][3] =		     4*pIm[offsets[0][0]]      -        4*pIm[offsets[1][0]]     -        4*pIm[offsets[0][1]]     +    4*pIm[offsets[1][1]] +
 800764c:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <_Z41__static_initialization_and_destruction_0ii>:
	for(int i = 0;i<flow.npixels(); i++)
		foo[i] = (flow[i]-Min)/(Max-Min)*255;
  // opencv support disabled. Can no longer write images.
	// foo.imwrite(filename);
  return false;
}
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10a      	bne.n	8007682 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007672:	4293      	cmp	r3, r2
 8007674:	d105      	bne.n	8007682 <_Z41__static_initialization_and_destruction_0ii+0x26>
GaussianMixture OpticalFlow::GMPara;
 8007676:	480c      	ldr	r0, [pc, #48]	; (80076a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007678:	f7fb f8b2 	bl	80027e0 <_ZN15GaussianMixtureC1Ev>
Vector<double> OpticalFlow::LapPara;
 800767c:	480b      	ldr	r0, [pc, #44]	; (80076ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800767e:	f7fd fdeb 	bl	8005258 <_ZN6VectorIdEC1Ev>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800768e:	4293      	cmp	r3, r2
 8007690:	d105      	bne.n	800769e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007692:	4806      	ldr	r0, [pc, #24]	; (80076ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007694:	f7fe fc9b 	bl	8005fce <_ZN6VectorIdED1Ev>
GaussianMixture OpticalFlow::GMPara;
 8007698:	4803      	ldr	r0, [pc, #12]	; (80076a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800769a:	f7fb fa29 	bl	8002af0 <_ZN15GaussianMixtureD1Ev>
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	240000e0 	.word	0x240000e0
 80076ac:	240000f8 	.word	0x240000f8

080076b0 <_GLOBAL__sub_I__ZN11OpticalFlow9IsDisplayE>:
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7ff ffcf 	bl	800765c <_Z41__static_initialization_and_destruction_0ii>
 80076be:	bd80      	pop	{r7, pc}

080076c0 <_GLOBAL__sub_D__ZN11OpticalFlow9IsDisplayE>:
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076c8:	2000      	movs	r0, #0
 80076ca:	f7ff ffc7 	bl	800765c <_Z41__static_initialization_and_destruction_0ii>
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <YUVtoRGB888>:
#include "color_conversion.h"

#define LIMIT(x) (x > 255 ? 255 : (x < 0 ? 0 : x))

uint32_t YUVtoRGB888(int16_t Y, int16_t U, int16_t V)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	80fb      	strh	r3, [r7, #6]
 80076da:	460b      	mov	r3, r1
 80076dc:	80bb      	strh	r3, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	807b      	strh	r3, [r7, #2]
	uint8_t R=0, G=0, B=0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	2300      	movs	r3, #0
 80076e8:	73bb      	strb	r3, [r7, #14]
 80076ea:	2300      	movs	r3, #0
 80076ec:	737b      	strb	r3, [r7, #13]
	R = LIMIT(Y + V + ((V * 103) >> 8));					//RED
 80076ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076f6:	441a      	add	r2, r3
 80076f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076fc:	2167      	movs	r1, #103	; 0x67
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	121b      	asrs	r3, r3, #8
 8007704:	4413      	add	r3, r2
 8007706:	2bff      	cmp	r3, #255	; 0xff
 8007708:	dc0f      	bgt.n	800772a <YUVtoRGB888+0x5a>
 800770a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800770e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007712:	441a      	add	r2, r3
 8007714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007718:	2167      	movs	r1, #103	; 0x67
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	121b      	asrs	r3, r3, #8
 8007720:	4413      	add	r3, r2
 8007722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e000      	b.n	800772c <YUVtoRGB888+0x5c>
 800772a:	23ff      	movs	r3, #255	; 0xff
 800772c:	73fb      	strb	r3, [r7, #15]
	G = LIMIT(Y - ((U * 88) >> 8) - ((V * 183) >> 8));		//GREEN
 800772e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007736:	2158      	movs	r1, #88	; 0x58
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	121b      	asrs	r3, r3, #8
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007744:	21b7      	movs	r1, #183	; 0xb7
 8007746:	fb01 f303 	mul.w	r3, r1, r3
 800774a:	121b      	asrs	r3, r3, #8
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2bff      	cmp	r3, #255	; 0xff
 8007750:	dc13      	bgt.n	800777a <YUVtoRGB888+0xaa>
 8007752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007756:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800775a:	2158      	movs	r1, #88	; 0x58
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	121b      	asrs	r3, r3, #8
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007768:	21b7      	movs	r1, #183	; 0xb7
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	121b      	asrs	r3, r3, #8
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e000      	b.n	800777c <YUVtoRGB888+0xac>
 800777a:	23ff      	movs	r3, #255	; 0xff
 800777c:	73bb      	strb	r3, [r7, #14]
	B = LIMIT(Y + U + ((U * 198) >> 8));					//BLUE
 800777e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007786:	441a      	add	r2, r3
 8007788:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800778c:	21c6      	movs	r1, #198	; 0xc6
 800778e:	fb01 f303 	mul.w	r3, r1, r3
 8007792:	121b      	asrs	r3, r3, #8
 8007794:	4413      	add	r3, r2
 8007796:	2bff      	cmp	r3, #255	; 0xff
 8007798:	dc0f      	bgt.n	80077ba <YUVtoRGB888+0xea>
 800779a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800779e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80077a2:	441a      	add	r2, r3
 80077a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80077a8:	21c6      	movs	r1, #198	; 0xc6
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	121b      	asrs	r3, r3, #8
 80077b0:	4413      	add	r3, r2
 80077b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	e000      	b.n	80077bc <YUVtoRGB888+0xec>
 80077ba:	23ff      	movs	r3, #255	; 0xff
 80077bc:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	041a      	lsls	r2, r3, #16
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	431a      	orrs	r2, r3
 80077c8:	7b7b      	ldrb	r3, [r7, #13]
 80077ca:	4313      	orrs	r3, r2
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <RGB565toRGB888>:

    return (uint16_t)RGB;
}

uint32_t RGB565toRGB888(uint16_t RGB)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	80fb      	strh	r3, [r7, #6]
	uint8_t R=0, G=0, B=0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
 80077e6:	2300      	movs	r3, #0
 80077e8:	73bb      	strb	r3, [r7, #14]
 80077ea:	2300      	movs	r3, #0
 80077ec:	737b      	strb	r3, [r7, #13]

	R = ((RGB >> 11) << 3);
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	0adb      	lsrs	r3, r3, #11
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	73fb      	strb	r3, [r7, #15]
	G = ((RGB >> 5) << 2);
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	b29b      	uxth	r3, r3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	73bb      	strb	r3, [r7, #14]
	B = ((RGB & 0x1F)<<3);
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	041a      	lsls	r2, r3, #16
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	431a      	orrs	r2, r3
 8007816:	7b7b      	ldrb	r3, [r7, #13]
 8007818:	4313      	orrs	r3, r2
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e010      	b.n	800785a <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8007838:	2102      	movs	r1, #2
 800783a:	480d      	ldr	r0, [pc, #52]	; (8007870 <flash+0x48>)
 800783c:	f005 fb6f 	bl	800cf1e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8007840:	2032      	movs	r0, #50	; 0x32
 8007842:	f001 fa6f 	bl	8008d24 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8007846:	2102      	movs	r1, #2
 8007848:	4809      	ldr	r0, [pc, #36]	; (8007870 <flash+0x48>)
 800784a:	f005 fb68 	bl	800cf1e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800784e:	2032      	movs	r0, #50	; 0x32
 8007850:	f001 fa68 	bl	8008d24 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	429a      	cmp	r2, r3
 8007860:	dbea      	blt.n	8007838 <flash+0x10>
  }

  HAL_Delay(100);
 8007862:	2064      	movs	r0, #100	; 0x64
 8007864:	f001 fa5e 	bl	8008d24 <HAL_Delay>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	58020000 	.word	0x58020000

08007874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b085      	sub	sp, #20
 8007878:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800787a:	f000 faf1 	bl	8007e60 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800787e:	f001 f9bf 	bl	8008c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007882:	f000 f851 	bl	8007928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007886:	f000 fa53 	bl	8007d30 <MX_GPIO_Init>
  MX_DMA_Init();
 800788a:	f000 fa31 	bl	8007cf0 <MX_DMA_Init>
  MX_DCMI_Init();
 800788e:	f000 f8d5 	bl	8007a3c <MX_DCMI_Init>
  MX_I2C1_Init();
 8007892:	f000 f907 	bl	8007aa4 <MX_I2C1_Init>
  MX_TIM6_Init();
 8007896:	f000 f96f 	bl	8007b78 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800789a:	f000 f9dd 	bl	8007c58 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 800789e:	f000 f93f 	bl	8007b20 <MX_LPTIM1_Init>
  MX_TIM7_Init();
 80078a2:	f000 f9a1 	bl	8007be8 <MX_TIM7_Init>
//  static double g_v2[144];
//  static double g_warpI2[144];
//  Coarse2FineFlowWrapper(g_v1, g_v2, g_warpI2, g_img0, g_img1,
//    0.0012, 1.0, 4, 1, 1, 1, 1, 64, 64, 1);

  flash(5);
 80078a6:	2005      	movs	r0, #5
 80078a8:	f7ff ffbe 	bl	8007828 <flash>

  OV7670_Power(DISABLE);
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7fa f817 	bl	80018e0 <OV7670_Power>
  OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1, &hlptim1);
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <main+0x94>)
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <main+0x98>)
 80078b6:	4916      	ldr	r1, [pc, #88]	; (8007910 <main+0x9c>)
 80078b8:	4816      	ldr	r0, [pc, #88]	; (8007914 <main+0xa0>)
 80078ba:	f7f9 ffef 	bl	800189c <OV7670_Init>
  OV7670_PowerUp();
 80078be:	f7fa fe59 	bl	8002574 <OV7670_PowerUp>
  OV7670_UpdateSettings(OV7670_settings);
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <main+0xa4>)
 80078c4:	466c      	mov	r4, sp
 80078c6:	f103 0210 	add.w	r2, r3, #16
 80078ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80078cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078d2:	f7fa fe5d 	bl	8002590 <OV7670_UpdateSettings>
  OV7670_SetFrameRate(XCLK_DIV(1), PLL_x4);
 80078d6:	2140      	movs	r1, #64	; 0x40
 80078d8:	2000      	movs	r0, #0
 80078da:	f7fa fe29 	bl	8002530 <OV7670_SetFrameRate>
  HAL_Delay(10);
 80078de:	200a      	movs	r0, #10
 80078e0:	f001 fa20 	bl	8008d24 <HAL_Delay>
  OV7670_Start(CONTINUOUS, g_image_data);
 80078e4:	490d      	ldr	r1, [pc, #52]	; (800791c <main+0xa8>)
 80078e6:	2000      	movs	r0, #0
 80078e8:	f7fa f88a 	bl	8001a00 <OV7670_Start>
  HAL_Delay(100);
 80078ec:	2064      	movs	r0, #100	; 0x64
 80078ee:	f001 fa19 	bl	8008d24 <HAL_Delay>

  // 50hz timer
  HAL_TIM_Base_Start_IT(&htim6);
 80078f2:	480b      	ldr	r0, [pc, #44]	; (8007920 <main+0xac>)
 80078f4:	f008 ff98 	bl	8010828 <HAL_TIM_Base_Start_IT>

  // 5hz timer
  HAL_TIM_Base_Start_IT(&htim7);
 80078f8:	480a      	ldr	r0, [pc, #40]	; (8007924 <main+0xb0>)
 80078fa:	f008 ff95 	bl	8010828 <HAL_TIM_Base_Start_IT>

  flash(5);
 80078fe:	2005      	movs	r0, #5
 8007900:	f7ff ff92 	bl	8007828 <flash>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007904:	e7fe      	b.n	8007904 <main+0x90>
 8007906:	bf00      	nop
 8007908:	24000214 	.word	0x24000214
 800790c:	240001c8 	.word	0x240001c8
 8007910:	24000150 	.word	0x24000150
 8007914:	24000100 	.word	0x24000100
 8007918:	24000014 	.word	0x24000014
 800791c:	24000374 	.word	0x24000374
 8007920:	2400024c 	.word	0x2400024c
 8007924:	24000298 	.word	0x24000298

08007928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b09c      	sub	sp, #112	; 0x70
 800792c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800792e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007932:	224c      	movs	r2, #76	; 0x4c
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f00c fe20 	bl	801457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800793c:	1d3b      	adds	r3, r7, #4
 800793e:	2220      	movs	r2, #32
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f00c fe1a 	bl	801457c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007948:	2002      	movs	r0, #2
 800794a:	f006 fbb9 	bl	800e0c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800794e:	2300      	movs	r3, #0
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	4b37      	ldr	r3, [pc, #220]	; (8007a30 <SystemClock_Config+0x108>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a36      	ldr	r2, [pc, #216]	; (8007a30 <SystemClock_Config+0x108>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800795e:	4b34      	ldr	r3, [pc, #208]	; (8007a30 <SystemClock_Config+0x108>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4b32      	ldr	r3, [pc, #200]	; (8007a34 <SystemClock_Config+0x10c>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007970:	4a30      	ldr	r2, [pc, #192]	; (8007a34 <SystemClock_Config+0x10c>)
 8007972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007976:	6193      	str	r3, [r2, #24]
 8007978:	4b2e      	ldr	r3, [pc, #184]	; (8007a34 <SystemClock_Config+0x10c>)
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007984:	bf00      	nop
 8007986:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <SystemClock_Config+0x10c>)
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007992:	d1f8      	bne.n	8007986 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007994:	4b28      	ldr	r3, [pc, #160]	; (8007a38 <SystemClock_Config+0x110>)
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f023 0303 	bic.w	r3, r3, #3
 800799c:	4a26      	ldr	r2, [pc, #152]	; (8007a38 <SystemClock_Config+0x110>)
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80079a4:	2311      	movs	r3, #17
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80079b2:	2320      	movs	r3, #32
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079b6:	2302      	movs	r3, #2
 80079b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80079ba:	2302      	movs	r3, #2
 80079bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80079be:	2310      	movs	r3, #16
 80079c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 128;
 80079c2:	2380      	movs	r3, #128	; 0x80
 80079c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80079c6:	2302      	movs	r3, #2
 80079c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80079ca:	2302      	movs	r3, #2
 80079cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80079ce:	2302      	movs	r3, #2
 80079d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80079de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f006 fba6 	bl	800e134 <HAL_RCC_OscConfig>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80079ee:	f000 fa63 	bl	8007eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079f2:	233f      	movs	r3, #63	; 0x3f
 80079f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079f6:	2303      	movs	r3, #3
 80079f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	2102      	movs	r1, #2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f006 ffba 	bl	800e990 <HAL_RCC_ClockConfig>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007a22:	f000 fa49 	bl	8007eb8 <Error_Handler>
  }
}
 8007a26:	bf00      	nop
 8007a28:	3770      	adds	r7, #112	; 0x70
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	58000400 	.word	0x58000400
 8007a34:	58024800 	.word	0x58024800
 8007a38:	58024400 	.word	0x58024400

08007a3c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a42:	4a17      	ldr	r2, [pc, #92]	; (8007aa0 <MX_DCMI_Init+0x64>)
 8007a44:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8007a4c:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a4e:	2220      	movs	r2, #32
 8007a50:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8007a58:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <MX_DCMI_Init+0x60>)
 8007a8a:	f001 fb07 	bl	800909c <HAL_DCMI_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8007a94:	f000 fa10 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8007a98:	bf00      	nop
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	24000100 	.word	0x24000100
 8007aa0:	48020000 	.word	0x48020000

08007aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <MX_I2C1_Init+0x78>)
 8007aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ab0:	f640 6214 	movw	r2, #3604	; 0xe14
 8007ab4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007ac8:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ad4:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007ae0:	480d      	ldr	r0, [pc, #52]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007ae2:	f005 fa37 	bl	800cf54 <HAL_I2C_Init>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007aec:	f000 f9e4 	bl	8007eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007af0:	2100      	movs	r1, #0
 8007af2:	4809      	ldr	r0, [pc, #36]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007af4:	f005 ff20 	bl	800d938 <HAL_I2CEx_ConfigAnalogFilter>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8007afe:	f000 f9db 	bl	8007eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b02:	2100      	movs	r1, #0
 8007b04:	4804      	ldr	r0, [pc, #16]	; (8007b18 <MX_I2C1_Init+0x74>)
 8007b06:	f005 ff62 	bl	800d9ce <HAL_I2CEx_ConfigDigitalFilter>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8007b10:	f000 f9d2 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b14:	bf00      	nop
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	240001c8 	.word	0x240001c8
 8007b1c:	40005400 	.word	0x40005400

08007b20 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b26:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <MX_LPTIM1_Init+0x54>)
 8007b28:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8007b36:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b3c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8007b3e:	4b0c      	ldr	r3, [pc, #48]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8007b4a:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <MX_LPTIM1_Init+0x50>)
 8007b5e:	f005 ff83 	bl	800da68 <HAL_LPTIM_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8007b68:	f000 f9a6 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	24000214 	.word	0x24000214
 8007b74:	40002400 	.word	0x40002400

08007b78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <MX_TIM6_Init+0x6c>)
 8007b8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007b90:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b96:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8007b9c:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007b9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007baa:	480d      	ldr	r0, [pc, #52]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007bac:	f008 fde4 	bl	8010778 <HAL_TIM_Base_Init>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8007bb6:	f000 f97f 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4806      	ldr	r0, [pc, #24]	; (8007be0 <MX_TIM6_Init+0x68>)
 8007bc8:	f009 f892 	bl	8010cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8007bd2:	f000 f971 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007bd6:	bf00      	nop
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	2400024c 	.word	0x2400024c
 8007be4:	40001000 	.word	0x40001000

08007be8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bee:	1d3b      	adds	r3, r7, #4
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	605a      	str	r2, [r3, #4]
 8007bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007bfa:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <MX_TIM7_Init+0x6c>)
 8007bfc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000;
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c00:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c06:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007c12:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007c1a:	480d      	ldr	r0, [pc, #52]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c1c:	f008 fdac 	bl	8010778 <HAL_TIM_Base_Init>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8007c26:	f000 f947 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007c32:	1d3b      	adds	r3, r7, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4806      	ldr	r0, [pc, #24]	; (8007c50 <MX_TIM7_Init+0x68>)
 8007c38:	f009 f85a 	bl	8010cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8007c42:	f000 f939 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	24000298 	.word	0x24000298
 8007c54:	40001400 	.word	0x40001400

08007c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c5c:	4b22      	ldr	r3, [pc, #136]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c5e:	4a23      	ldr	r2, [pc, #140]	; (8007cec <MX_USART1_UART_Init+0x94>)
 8007c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007c62:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c70:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c7e:	220c      	movs	r2, #12
 8007c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c82:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c88:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c8e:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007c94:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c9a:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007ca0:	4811      	ldr	r0, [pc, #68]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007ca2:	f009 f8d1 	bl	8010e48 <HAL_UART_Init>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007cac:	f000 f904 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	480d      	ldr	r0, [pc, #52]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007cb4:	f00b fd19 	bl	80136ea <HAL_UARTEx_SetTxFifoThreshold>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007cbe:	f000 f8fb 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4808      	ldr	r0, [pc, #32]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007cc6:	f00b fd4e 	bl	8013766 <HAL_UARTEx_SetRxFifoThreshold>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007cd0:	f000 f8f2 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007cd4:	4804      	ldr	r0, [pc, #16]	; (8007ce8 <MX_USART1_UART_Init+0x90>)
 8007cd6:	f00b fccf 	bl	8013678 <HAL_UARTEx_DisableFifoMode>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007ce0:	f000 f8ea 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007ce4:	bf00      	nop
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	240002e4 	.word	0x240002e4
 8007cec:	40011000 	.word	0x40011000

08007cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <MX_DMA_Init+0x3c>)
 8007cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cfc:	4a0b      	ldr	r2, [pc, #44]	; (8007d2c <MX_DMA_Init+0x3c>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <MX_DMA_Init+0x3c>)
 8007d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	607b      	str	r3, [r7, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	200b      	movs	r0, #11
 8007d1a:	f001 f90e 	bl	8008f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007d1e:	200b      	movs	r0, #11
 8007d20:	f001 f925 	bl	8008f6e <HAL_NVIC_EnableIRQ>

}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	58024400 	.word	0x58024400

08007d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08c      	sub	sp, #48	; 0x30
 8007d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d36:	f107 031c 	add.w	r3, r7, #28
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	605a      	str	r2, [r3, #4]
 8007d40:	609a      	str	r2, [r3, #8]
 8007d42:	60da      	str	r2, [r3, #12]
 8007d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d46:	4b43      	ldr	r3, [pc, #268]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d4c:	4a41      	ldr	r2, [pc, #260]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d4e:	f043 0310 	orr.w	r3, r3, #16
 8007d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d64:	4b3b      	ldr	r3, [pc, #236]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d6a:	4a3a      	ldr	r2, [pc, #232]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d74:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d82:	4b34      	ldr	r3, [pc, #208]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d88:	4a32      	ldr	r2, [pc, #200]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d92:	4b30      	ldr	r3, [pc, #192]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007da0:	4b2c      	ldr	r3, [pc, #176]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da6:	4a2b      	ldr	r2, [pc, #172]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dbe:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dc4:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007dc6:	f043 0308 	orr.w	r3, r3, #8
 8007dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dce:	4b21      	ldr	r3, [pc, #132]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	60bb      	str	r3, [r7, #8]
 8007dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de2:	4a1c      	ldr	r2, [pc, #112]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007de4:	f043 0304 	orr.w	r3, r3, #4
 8007de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dec:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <MX_GPIO_Init+0x124>)
 8007dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4816      	ldr	r0, [pc, #88]	; (8007e58 <MX_GPIO_Init+0x128>)
 8007e00:	f005 f874 	bl	800ceec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8007e04:	2200      	movs	r2, #0
 8007e06:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8007e0a:	4814      	ldr	r0, [pc, #80]	; (8007e5c <MX_GPIO_Init+0x12c>)
 8007e0c:	f005 f86e 	bl	800ceec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007e10:	2302      	movs	r3, #2
 8007e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e14:	2301      	movs	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e20:	f107 031c 	add.w	r3, r7, #28
 8007e24:	4619      	mov	r1, r3
 8007e26:	480c      	ldr	r0, [pc, #48]	; (8007e58 <MX_GPIO_Init+0x128>)
 8007e28:	f004 feb0 	bl	800cb8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007e2c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e32:	2301      	movs	r3, #1
 8007e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e3e:	f107 031c 	add.w	r3, r7, #28
 8007e42:	4619      	mov	r1, r3
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <MX_GPIO_Init+0x12c>)
 8007e46:	f004 fea1 	bl	800cb8c <HAL_GPIO_Init>

}
 8007e4a:	bf00      	nop
 8007e4c:	3730      	adds	r7, #48	; 0x30
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	58024400 	.word	0x58024400
 8007e58:	58020000 	.word	0x58020000
 8007e5c:	58020c00 	.word	0x58020c00

08007e60 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e66:	463b      	mov	r3, r7
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e72:	f001 f897 	bl	8008fa4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e76:	2301      	movs	r3, #1
 8007e78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e82:	231f      	movs	r3, #31
 8007e84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e86:	2387      	movs	r3, #135	; 0x87
 8007e88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f8b5 	bl	8009014 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007eaa:	2004      	movs	r0, #4
 8007eac:	f001 f892 	bl	8008fd4 <HAL_MPU_Enable>

}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007ebc:	b672      	cpsid	i
}
 8007ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ec0:	e7fe      	b.n	8007ec0 <Error_Handler+0x8>
	...

08007ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <HAL_MspInit+0x30>)
 8007ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ed0:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <HAL_MspInit+0x30>)
 8007ed2:	f043 0302 	orr.w	r3, r3, #2
 8007ed6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <HAL_MspInit+0x30>)
 8007edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	58024400 	.word	0x58024400

08007ef8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08e      	sub	sp, #56	; 0x38
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a74      	ldr	r2, [pc, #464]	; (80080e8 <HAL_DCMI_MspInit+0x1f0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	f040 80e2 	bne.w	80080e0 <HAL_DCMI_MspInit+0x1e8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8007f1c:	4b73      	ldr	r3, [pc, #460]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f22:	4a72      	ldr	r2, [pc, #456]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f24:	f043 0301 	orr.w	r3, r3, #1
 8007f28:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8007f2c:	4b6f      	ldr	r3, [pc, #444]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	623b      	str	r3, [r7, #32]
 8007f38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007f3a:	4b6c      	ldr	r3, [pc, #432]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f40:	4a6a      	ldr	r2, [pc, #424]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f42:	f043 0310 	orr.w	r3, r3, #16
 8007f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f4a:	4b68      	ldr	r3, [pc, #416]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f58:	4b64      	ldr	r3, [pc, #400]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f5e:	4a63      	ldr	r2, [pc, #396]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f68:	4b60      	ldr	r3, [pc, #384]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f76:	4b5d      	ldr	r3, [pc, #372]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f7c:	4a5b      	ldr	r2, [pc, #364]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f7e:	f043 0304 	orr.w	r3, r3, #4
 8007f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f86:	4b59      	ldr	r3, [pc, #356]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f94:	4b55      	ldr	r3, [pc, #340]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f9a:	4a54      	ldr	r2, [pc, #336]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007f9c:	f043 0308 	orr.w	r3, r3, #8
 8007fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fa4:	4b51      	ldr	r3, [pc, #324]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fb2:	4b4e      	ldr	r3, [pc, #312]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fb8:	4a4c      	ldr	r2, [pc, #304]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007fba:	f043 0302 	orr.w	r3, r3, #2
 8007fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fc2:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <HAL_DCMI_MspInit+0x1f4>)
 8007fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007fd0:	2370      	movs	r3, #112	; 0x70
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4841      	ldr	r0, [pc, #260]	; (80080f0 <HAL_DCMI_MspInit+0x1f8>)
 8007fec:	f004 fdce 	bl	800cb8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8007ff0:	2350      	movs	r3, #80	; 0x50
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008000:	230d      	movs	r3, #13
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008008:	4619      	mov	r1, r3
 800800a:	483a      	ldr	r0, [pc, #232]	; (80080f4 <HAL_DCMI_MspInit+0x1fc>)
 800800c:	f004 fdbe 	bl	800cb8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008010:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008016:	2302      	movs	r3, #2
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800801a:	2302      	movs	r3, #2
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800801e:	2303      	movs	r3, #3
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008022:	230d      	movs	r3, #13
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802a:	4619      	mov	r1, r3
 800802c:	4832      	ldr	r0, [pc, #200]	; (80080f8 <HAL_DCMI_MspInit+0x200>)
 800802e:	f004 fdad 	bl	800cb8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008032:	2308      	movs	r3, #8
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008036:	2302      	movs	r3, #2
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800803a:	2302      	movs	r3, #2
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800803e:	2303      	movs	r3, #3
 8008040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008042:	230d      	movs	r3, #13
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804a:	4619      	mov	r1, r3
 800804c:	482b      	ldr	r0, [pc, #172]	; (80080fc <HAL_DCMI_MspInit+0x204>)
 800804e:	f004 fd9d 	bl	800cb8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008056:	2302      	movs	r3, #2
 8008058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800805a:	2302      	movs	r3, #2
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805e:	2303      	movs	r3, #3
 8008060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008062:	230d      	movs	r3, #13
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806a:	4619      	mov	r1, r3
 800806c:	4824      	ldr	r0, [pc, #144]	; (8008100 <HAL_DCMI_MspInit+0x208>)
 800806e:	f004 fd8d 	bl	800cb8c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 8008074:	4a24      	ldr	r2, [pc, #144]	; (8008108 <HAL_DCMI_MspInit+0x210>)
 8008076:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8008078:	4b22      	ldr	r3, [pc, #136]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 800807a:	224b      	movs	r2, #75	; 0x4b
 800807c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800807e:	4b21      	ldr	r3, [pc, #132]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 8008080:	2200      	movs	r2, #0
 8008082:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8008084:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 8008086:	2200      	movs	r2, #0
 8008088:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800808a:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 800808c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008090:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 8008094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008098:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800809a:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 800809c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080a0:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80080a2:	4b18      	ldr	r3, [pc, #96]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80080a8:	4b16      	ldr	r3, [pc, #88]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80080b4:	4813      	ldr	r0, [pc, #76]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080b6:	f001 fa7d 	bl	80095b4 <HAL_DMA_Init>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <HAL_DCMI_MspInit+0x1cc>
    {
      Error_Handler();
 80080c0:	f7ff fefa 	bl	8007eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a0f      	ldr	r2, [pc, #60]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080c8:	649a      	str	r2, [r3, #72]	; 0x48
 80080ca:	4a0e      	ldr	r2, [pc, #56]	; (8008104 <HAL_DCMI_MspInit+0x20c>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80080d0:	2200      	movs	r2, #0
 80080d2:	2100      	movs	r1, #0
 80080d4:	204e      	movs	r0, #78	; 0x4e
 80080d6:	f000 ff30 	bl	8008f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80080da:	204e      	movs	r0, #78	; 0x4e
 80080dc:	f000 ff47 	bl	8008f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80080e0:	bf00      	nop
 80080e2:	3738      	adds	r7, #56	; 0x38
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	48020000 	.word	0x48020000
 80080ec:	58024400 	.word	0x58024400
 80080f0:	58021000 	.word	0x58021000
 80080f4:	58020000 	.word	0x58020000
 80080f8:	58020800 	.word	0x58020800
 80080fc:	58020c00 	.word	0x58020c00
 8008100:	58020400 	.word	0x58020400
 8008104:	24000150 	.word	0x24000150
 8008108:	40020010 	.word	0x40020010

0800810c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b0b8      	sub	sp, #224	; 0xe0
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	60da      	str	r2, [r3, #12]
 8008122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	22bc      	movs	r2, #188	; 0xbc
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f00c fa25 	bl	801457c <memset>
  if(hi2c->Instance==I2C1)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a25      	ldr	r2, [pc, #148]	; (80081cc <HAL_I2C_MspInit+0xc0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d143      	bne.n	80081c4 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800813c:	2308      	movs	r3, #8
 800813e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_CSI;
 8008140:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008148:	f107 0310 	add.w	r3, r7, #16
 800814c:	4618      	mov	r0, r3
 800814e:	f006 ffab 	bl	800f0a8 <HAL_RCCEx_PeriphCLKConfig>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8008158:	f7ff feae 	bl	8007eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 800815e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008162:	4a1b      	ldr	r2, [pc, #108]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800816c:	4b18      	ldr	r3, [pc, #96]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 800816e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800817a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800817e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008182:	2312      	movs	r3, #18
 8008184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008188:	2301      	movs	r3, #1
 800818a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800818e:	2303      	movs	r3, #3
 8008190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008194:	2304      	movs	r3, #4
 8008196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800819a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800819e:	4619      	mov	r1, r3
 80081a0:	480c      	ldr	r0, [pc, #48]	; (80081d4 <HAL_I2C_MspInit+0xc8>)
 80081a2:	f004 fcf3 	bl	800cb8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 80081a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081ac:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 80081ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_I2C_MspInit+0xc4>)
 80081b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081c4:	bf00      	nop
 80081c6:	37e0      	adds	r7, #224	; 0xe0
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40005400 	.word	0x40005400
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58020400 	.word	0x58020400

080081d8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b0b8      	sub	sp, #224	; 0xe0
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	60da      	str	r2, [r3, #12]
 80081ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081f0:	f107 0310 	add.w	r3, r7, #16
 80081f4:	22bc      	movs	r2, #188	; 0xbc
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f00c f9bf 	bl	801457c <memset>
  if(hlptim->Instance==LPTIM1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <HAL_LPTIM_MspInit+0xe0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d153      	bne.n	80082b0 <HAL_LPTIM_MspInit+0xd8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8008208:	2320      	movs	r3, #32
 800820a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 800820c:	2310      	movs	r3, #16
 800820e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 8008210:	2380      	movs	r3, #128	; 0x80
 8008212:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8008214:	2304      	movs	r3, #4
 8008216:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008218:	2302      	movs	r3, #2
 800821a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800821c:	2302      	movs	r3, #2
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8008220:	2300      	movs	r3, #0
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008224:	2300      	movs	r3, #0
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PLL2;
 800822c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	4618      	mov	r0, r3
 800823a:	f006 ff35 	bl	800f0a8 <HAL_RCCEx_PeriphCLKConfig>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <HAL_LPTIM_MspInit+0x70>
    {
      Error_Handler();
 8008244:	f7ff fe38 	bl	8007eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8008248:	4b1c      	ldr	r3, [pc, #112]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 800824a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800824e:	4a1b      	ldr	r2, [pc, #108]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 8008250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008254:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008258:	4b18      	ldr	r3, [pc, #96]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 800825a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800825e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008266:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 8008268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 800826e:	f043 0308 	orr.w	r3, r3, #8
 8008272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_LPTIM_MspInit+0xe4>)
 8008278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828c:	2302      	movs	r3, #2
 800828e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008292:	2300      	movs	r3, #0
 8008294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008298:	2303      	movs	r3, #3
 800829a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800829e:	2301      	movs	r3, #1
 80082a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80082a8:	4619      	mov	r1, r3
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <HAL_LPTIM_MspInit+0xe8>)
 80082ac:	f004 fc6e 	bl	800cb8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80082b0:	bf00      	nop
 80082b2:	37e0      	adds	r7, #224	; 0xe0
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40002400 	.word	0x40002400
 80082bc:	58024400 	.word	0x58024400
 80082c0:	58020c00 	.word	0x58020c00

080082c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <HAL_TIM_Base_MspInit+0x84>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d117      	bne.n	8008306 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80082d6:	4b1d      	ldr	r3, [pc, #116]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 80082d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082dc:	4a1b      	ldr	r2, [pc, #108]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 80082de:	f043 0310 	orr.w	r3, r3, #16
 80082e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80082e6:	4b19      	ldr	r3, [pc, #100]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 80082e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80082f4:	2200      	movs	r2, #0
 80082f6:	2101      	movs	r1, #1
 80082f8:	2036      	movs	r0, #54	; 0x36
 80082fa:	f000 fe1e 	bl	8008f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80082fe:	2036      	movs	r0, #54	; 0x36
 8008300:	f000 fe35 	bl	8008f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8008304:	e01b      	b.n	800833e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a11      	ldr	r2, [pc, #68]	; (8008350 <HAL_TIM_Base_MspInit+0x8c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d116      	bne.n	800833e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008310:	4b0e      	ldr	r3, [pc, #56]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 8008312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008316:	4a0d      	ldr	r2, [pc, #52]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 8008318:	f043 0320 	orr.w	r3, r3, #32
 800831c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <HAL_TIM_Base_MspInit+0x88>)
 8008322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800832e:	2200      	movs	r2, #0
 8008330:	2101      	movs	r1, #1
 8008332:	2037      	movs	r0, #55	; 0x37
 8008334:	f000 fe01 	bl	8008f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008338:	2037      	movs	r0, #55	; 0x37
 800833a:	f000 fe18 	bl	8008f6e <HAL_NVIC_EnableIRQ>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40001000 	.word	0x40001000
 800834c:	58024400 	.word	0x58024400
 8008350:	40001400 	.word	0x40001400

08008354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b0b8      	sub	sp, #224	; 0xe0
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800835c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	605a      	str	r2, [r3, #4]
 8008366:	609a      	str	r2, [r3, #8]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	22bc      	movs	r2, #188	; 0xbc
 8008372:	2100      	movs	r1, #0
 8008374:	4618      	mov	r0, r3
 8008376:	f00c f901 	bl	801457c <memset>
  if(huart->Instance==USART1)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a29      	ldr	r2, [pc, #164]	; (8008424 <HAL_UART_MspInit+0xd0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d14a      	bne.n	800841a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008384:	2301      	movs	r3, #1
 8008386:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_CSI;
 8008388:	2320      	movs	r3, #32
 800838a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800838e:	f107 0310 	add.w	r3, r7, #16
 8008392:	4618      	mov	r0, r3
 8008394:	f006 fe88 	bl	800f0a8 <HAL_RCCEx_PeriphCLKConfig>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800839e:	f7ff fd8b 	bl	8007eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083a2:	4b21      	ldr	r3, [pc, #132]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083aa:	f043 0310 	orr.w	r3, r3, #16
 80083ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083b2:	4b1d      	ldr	r3, [pc, #116]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083c0:	4b19      	ldr	r3, [pc, #100]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083c6:	4a18      	ldr	r2, [pc, #96]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083c8:	f043 0302 	orr.w	r3, r3, #2
 80083cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083d0:	4b15      	ldr	r3, [pc, #84]	; (8008428 <HAL_UART_MspInit+0xd4>)
 80083d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80083de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80083e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e6:	2302      	movs	r3, #2
 80083e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083f2:	2303      	movs	r3, #3
 80083f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80083f8:	2304      	movs	r3, #4
 80083fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008402:	4619      	mov	r1, r3
 8008404:	4809      	ldr	r0, [pc, #36]	; (800842c <HAL_UART_MspInit+0xd8>)
 8008406:	f004 fbc1 	bl	800cb8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	2025      	movs	r0, #37	; 0x25
 8008410:	f000 fd93 	bl	8008f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008414:	2025      	movs	r0, #37	; 0x25
 8008416:	f000 fdaa 	bl	8008f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800841a:	bf00      	nop
 800841c:	37e0      	adds	r7, #224	; 0xe0
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40011000 	.word	0x40011000
 8008428:	58024400 	.word	0x58024400
 800842c:	58020400 	.word	0x58020400

08008430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008434:	e7fe      	b.n	8008434 <NMI_Handler+0x4>

08008436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008436:	b480      	push	{r7}
 8008438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800843a:	e7fe      	b.n	800843a <HardFault_Handler+0x4>

0800843c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008440:	e7fe      	b.n	8008440 <MemManage_Handler+0x4>

08008442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008442:	b480      	push	{r7}
 8008444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008446:	e7fe      	b.n	8008446 <BusFault_Handler+0x4>

08008448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800844c:	e7fe      	b.n	800844c <UsageFault_Handler+0x4>

0800844e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800844e:	b480      	push	{r7}
 8008450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008452:	bf00      	nop
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800846a:	b480      	push	{r7}
 800846c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800847c:	f000 fc32 	bl	8008ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}

08008484 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8008488:	4802      	ldr	r0, [pc, #8]	; (8008494 <DMA1_Stream0_IRQHandler+0x10>)
 800848a:	f002 fbbd 	bl	800ac08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	24000150 	.word	0x24000150

08008498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800849c:	4802      	ldr	r0, [pc, #8]	; (80084a8 <USART1_IRQHandler+0x10>)
 800849e:	f008 fe21 	bl	80110e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	240002e4 	.word	0x240002e4

080084ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_1hz();
 80084b0:	f000 f84a 	bl	8008548 <schedule_1hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80084b4:	4802      	ldr	r0, [pc, #8]	; (80084c0 <TIM6_DAC_IRQHandler+0x14>)
 80084b6:	f008 fa2f 	bl	8010918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2400024c 	.word	0x2400024c

080084c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_5hz();
 80084c8:	f000 f826 	bl	8008518 <schedule_5hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80084cc:	4802      	ldr	r0, [pc, #8]	; (80084d8 <TIM7_IRQHandler+0x14>)
 80084ce:	f008 fa23 	bl	8010918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80084d2:	bf00      	nop
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	24000298 	.word	0x24000298

080084dc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80084e0:	4802      	ldr	r0, [pc, #8]	; (80084ec <DCMI_IRQHandler+0x10>)
 80084e2:	f000 ff17 	bl	8009314 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80084e6:	bf00      	nop
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	24000100 	.word	0x24000100

080084f0 <log_string>:

/* USER CODE BEGIN 1 */

void log_string(const char *str) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f7 fefb 	bl	80002f4 <strlen>
 80084fe:	4603      	mov	r3, r0
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4803      	ldr	r0, [pc, #12]	; (8008514 <log_string+0x24>)
 8008508:	f008 fcee 	bl	8010ee8 <HAL_UART_Transmit_IT>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	240002e4 	.word	0x240002e4

08008518 <schedule_5hz>:

void log_data(const uint8_t *data, uint16_t size) {
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)data, (uint16_t)size);
}

void schedule_5hz(void) {
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  update_image();
 800851c:	f000 f81c 	bl	8008558 <update_image>
  update_flow();
 8008520:	f000 f996 	bl	8008850 <update_flow>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8008524:	2102      	movs	r1, #2
 8008526:	4805      	ldr	r0, [pc, #20]	; (800853c <schedule_5hz+0x24>)
 8008528:	f004 fcf9 	bl	800cf1e <HAL_GPIO_TogglePin>
  HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 800852c:	2201      	movs	r2, #1
 800852e:	4904      	ldr	r1, [pc, #16]	; (8008540 <schedule_5hz+0x28>)
 8008530:	4804      	ldr	r0, [pc, #16]	; (8008544 <schedule_5hz+0x2c>)
 8008532:	f008 fd81 	bl	8011038 <HAL_UART_Receive_IT>
}
 8008536:	bf00      	nop
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	58020000 	.word	0x58020000
 8008540:	24031b74 	.word	0x24031b74
 8008544:	240002e4 	.word	0x240002e4

08008548 <schedule_1hz>:

void schedule_1hz(void) {
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0

}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <update_image>:

void update_image(void) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b096      	sub	sp, #88	; 0x58
 800855c:	af00      	add	r7, sp, #0
  static uint8_t format;
  OV7670_getImageInfo(&g_width, &g_height, &format);
 800855e:	4a88      	ldr	r2, [pc, #544]	; (8008780 <update_image+0x228>)
 8008560:	4988      	ldr	r1, [pc, #544]	; (8008784 <update_image+0x22c>)
 8008562:	4889      	ldr	r0, [pc, #548]	; (8008788 <update_image+0x230>)
 8008564:	f7fa f8f4 	bl	8002750 <OV7670_getImageInfo>

  // Full image
  double *img_ptr = g_prev_img == 0 ? g_img1 : g_img0;
 8008568:	4b88      	ldr	r3, [pc, #544]	; (800878c <update_image+0x234>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <update_image+0x1c>
 8008570:	4b87      	ldr	r3, [pc, #540]	; (8008790 <update_image+0x238>)
 8008572:	e000      	b.n	8008576 <update_image+0x1e>
 8008574:	4b87      	ldr	r3, [pc, #540]	; (8008794 <update_image+0x23c>)
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
  for (int i = 0; i < g_height; i += 1) {
 8008578:	2300      	movs	r3, #0
 800857a:	657b      	str	r3, [r7, #84]	; 0x54
 800857c:	e0de      	b.n	800873c <update_image+0x1e4>
    for (int j = 0; j < (int)g_width/2; j += 1) {
 800857e:	2300      	movs	r3, #0
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
 8008582:	e0cf      	b.n	8008724 <update_image+0x1cc>
      int idx = i*(g_width/2) + j;
 8008584:	4b80      	ldr	r3, [pc, #512]	; (8008788 <update_image+0x230>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	085b      	lsrs	r3, r3, #1
 800858a:	b29b      	uxth	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008590:	fb02 f303 	mul.w	r3, r2, r3
 8008594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008596:	4413      	add	r3, r2
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t temp = g_image_data[idx];
 800859a:	4a7f      	ldr	r2, [pc, #508]	; (8008798 <update_image+0x240>)
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if (format == YUV422) {
 80085a4:	4b76      	ldr	r3, [pc, #472]	; (8008780 <update_image+0x228>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d168      	bne.n	800867e <update_image+0x126>
        int16_t Y2 = (temp >> 24) & 0x00FF;
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	0e1b      	lsrs	r3, r3, #24
 80085b0:	82fb      	strh	r3, [r7, #22]
        int16_t U = ((temp >> 16) & 0x00FF) - 128;
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b80      	subs	r3, #128	; 0x80
 80085be:	b29b      	uxth	r3, r3
 80085c0:	82bb      	strh	r3, [r7, #20]
        int16_t Y1 = (temp >> 8) & 0x00FF;
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	b21b      	sxth	r3, r3
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	827b      	strh	r3, [r7, #18]
        int16_t V = (temp & 0x00FF) - 128;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b80      	subs	r3, #128	; 0x80
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	823b      	strh	r3, [r7, #16]
        uint32_t pix = YUVtoRGB888(Y1, U, V);
 80085da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80085de:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80085e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff f872 	bl	80076d0 <YUVtoRGB888>
 80085ec:	60f8      	str	r0, [r7, #12]
        uint32_t next_pix = YUVtoRGB888(Y2, U, V);
 80085ee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80085f2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80085f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff f868 	bl	80076d0 <YUVtoRGB888>
 8008600:	60b8      	str	r0, [r7, #8]

        uint8_t r = (pix >> (0)) & 0xff;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	71fb      	strb	r3, [r7, #7]
        uint8_t g = (pix >> (8)) & 0xff;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	0a1b      	lsrs	r3, r3, #8
 800860a:	71bb      	strb	r3, [r7, #6]
        uint8_t b = (pix >> (16)) & 0xff;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	717b      	strb	r3, [r7, #5]
        uint8_t rgb = ((r + g + b)/3);
 8008612:	79fa      	ldrb	r2, [r7, #7]
 8008614:	79bb      	ldrb	r3, [r7, #6]
 8008616:	441a      	add	r2, r3
 8008618:	797b      	ldrb	r3, [r7, #5]
 800861a:	4413      	add	r3, r2
 800861c:	4a5f      	ldr	r2, [pc, #380]	; (800879c <update_image+0x244>)
 800861e:	fb82 1203 	smull	r1, r2, r2, r3
 8008622:	17db      	asrs	r3, r3, #31
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	713b      	strb	r3, [r7, #4]
        img_ptr[2*idx] = rgb;
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800862e:	4413      	add	r3, r2
 8008630:	793a      	ldrb	r2, [r7, #4]
 8008632:	ee07 2a90 	vmov	s15, r2
 8008636:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800863a:	ed83 7b00 	vstr	d7, [r3]

        r = (next_pix >> (0)) & 0xff;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	71fb      	strb	r3, [r7, #7]
        g = (next_pix >> (8)) & 0xff;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	0a1b      	lsrs	r3, r3, #8
 8008646:	71bb      	strb	r3, [r7, #6]
        b = (next_pix >> (16)) & 0xff;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	717b      	strb	r3, [r7, #5]
        rgb = ((r + g + b)/3);
 800864e:	79fa      	ldrb	r2, [r7, #7]
 8008650:	79bb      	ldrb	r3, [r7, #6]
 8008652:	441a      	add	r2, r3
 8008654:	797b      	ldrb	r3, [r7, #5]
 8008656:	4413      	add	r3, r2
 8008658:	4a50      	ldr	r2, [pc, #320]	; (800879c <update_image+0x244>)
 800865a:	fb82 1203 	smull	r1, r2, r2, r3
 800865e:	17db      	asrs	r3, r3, #31
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	713b      	strb	r3, [r7, #4]
        img_ptr[2*idx + 1] = rgb;
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	3308      	adds	r3, #8
 800866a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866c:	4413      	add	r3, r2
 800866e:	793a      	ldrb	r2, [r7, #4]
 8008670:	ee07 2a90 	vmov	s15, r2
 8008674:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008678:	ed83 7b00 	vstr	d7, [r3]
 800867c:	e04f      	b.n	800871e <update_image+0x1c6>
      }
      else {
        uint16_t rbg1 = (temp >> 0) & 0x00FF;
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	b29b      	uxth	r3, r3
 8008682:	b2db      	uxtb	r3, r3
 8008684:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint16_t rbg2 = (temp >> 16) & 0x00FF;
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	b29b      	uxth	r3, r3
 800868c:	b2db      	uxtb	r3, r3
 800868e:	84bb      	strh	r3, [r7, #36]	; 0x24
        uint32_t pix = RGB565toRGB888(rbg1);
 8008690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff f8a0 	bl	80077d8 <RGB565toRGB888>
 8008698:	6238      	str	r0, [r7, #32]
        uint32_t next_pix = RGB565toRGB888(rbg2);
 800869a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff f89b 	bl	80077d8 <RGB565toRGB888>
 80086a2:	61f8      	str	r0, [r7, #28]

        uint8_t r = (pix >> (0)) & 0xff;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	76fb      	strb	r3, [r7, #27]
        uint8_t g = (pix >> (8)) & 0xff;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	76bb      	strb	r3, [r7, #26]
        uint8_t b = (pix >> (16)) & 0xff;
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	767b      	strb	r3, [r7, #25]
        uint8_t rgb = ((r + g + b)/3);
 80086b4:	7efa      	ldrb	r2, [r7, #27]
 80086b6:	7ebb      	ldrb	r3, [r7, #26]
 80086b8:	441a      	add	r2, r3
 80086ba:	7e7b      	ldrb	r3, [r7, #25]
 80086bc:	4413      	add	r3, r2
 80086be:	4a37      	ldr	r2, [pc, #220]	; (800879c <update_image+0x244>)
 80086c0:	fb82 1203 	smull	r1, r2, r2, r3
 80086c4:	17db      	asrs	r3, r3, #31
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	763b      	strb	r3, [r7, #24]
        img_ptr[2*idx] = rgb;
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d0:	4413      	add	r3, r2
 80086d2:	7e3a      	ldrb	r2, [r7, #24]
 80086d4:	ee07 2a90 	vmov	s15, r2
 80086d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80086dc:	ed83 7b00 	vstr	d7, [r3]

        r = (next_pix >> (0)) & 0xff;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	76fb      	strb	r3, [r7, #27]
        g = (next_pix >> (8)) & 0xff;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	76bb      	strb	r3, [r7, #26]
        b = (next_pix >> (16)) & 0xff;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	0c1b      	lsrs	r3, r3, #16
 80086ee:	767b      	strb	r3, [r7, #25]
        rgb = ((r + g + b)/3);
 80086f0:	7efa      	ldrb	r2, [r7, #27]
 80086f2:	7ebb      	ldrb	r3, [r7, #26]
 80086f4:	441a      	add	r2, r3
 80086f6:	7e7b      	ldrb	r3, [r7, #25]
 80086f8:	4413      	add	r3, r2
 80086fa:	4a28      	ldr	r2, [pc, #160]	; (800879c <update_image+0x244>)
 80086fc:	fb82 1203 	smull	r1, r2, r2, r3
 8008700:	17db      	asrs	r3, r3, #31
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	763b      	strb	r3, [r7, #24]
        img_ptr[2*idx + 1] = rgb;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	3308      	adds	r3, #8
 800870c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870e:	4413      	add	r3, r2
 8008710:	7e3a      	ldrb	r2, [r7, #24]
 8008712:	ee07 2a90 	vmov	s15, r2
 8008716:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800871a:	ed83 7b00 	vstr	d7, [r3]
    for (int j = 0; j < (int)g_width/2; j += 1) {
 800871e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008720:	3301      	adds	r3, #1
 8008722:	653b      	str	r3, [r7, #80]	; 0x50
 8008724:	4b18      	ldr	r3, [pc, #96]	; (8008788 <update_image+0x230>)
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	b29b      	uxth	r3, r3
 800872c:	461a      	mov	r2, r3
 800872e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008730:	4293      	cmp	r3, r2
 8008732:	f6ff af27 	blt.w	8008584 <update_image+0x2c>
  for (int i = 0; i < g_height; i += 1) {
 8008736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008738:	3301      	adds	r3, #1
 800873a:	657b      	str	r3, [r7, #84]	; 0x54
 800873c:	4b11      	ldr	r3, [pc, #68]	; (8008784 <update_image+0x22c>)
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008744:	4293      	cmp	r3, r2
 8008746:	f6ff af1a 	blt.w	800857e <update_image+0x26>
      }
    }
  }

  // Cropped image
  double *crop_img_ptr = g_prev_img == 0 ? g_crop_img1 : g_crop_img0;
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <update_image+0x234>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <update_image+0x1fe>
 8008752:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <update_image+0x248>)
 8008754:	e000      	b.n	8008758 <update_image+0x200>
 8008756:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <update_image+0x24c>)
 8008758:	633b      	str	r3, [r7, #48]	; 0x30
  for (int i = 0; i < CROP_HEIGHT; i +=1) {
 800875a:	2300      	movs	r3, #0
 800875c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800875e:	e068      	b.n	8008832 <update_image+0x2da>
    for (int j = 0; j < CROP_WIDTH; j += 1) {
 8008760:	2300      	movs	r3, #0
 8008762:	64bb      	str	r3, [r7, #72]	; 0x48
 8008764:	e05f      	b.n	8008826 <update_image+0x2ce>
      double sum = 0;
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (int k1 = 0; k1 < 5; k1 += 1)
 8008772:	2300      	movs	r3, #0
 8008774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008776:	e03d      	b.n	80087f4 <update_image+0x29c>
        for (int k2 = 0; k2 < 5; k2 += 1)
 8008778:	2300      	movs	r3, #0
 800877a:	63bb      	str	r3, [r7, #56]	; 0x38
 800877c:	e034      	b.n	80087e8 <update_image+0x290>
 800877e:	bf00      	nop
 8008780:	240465a0 	.word	0x240465a0
 8008784:	24031b76 	.word	0x24031b76
 8008788:	24031b78 	.word	0x24031b78
 800878c:	24031b75 	.word	0x24031b75
 8008790:	2403b180 	.word	0x2403b180
 8008794:	24031b80 	.word	0x24031b80
 8008798:	24000374 	.word	0x24000374
 800879c:	55555556 	.word	0x55555556
 80087a0:	24044d80 	.word	0x24044d80
 80087a4:	24044780 	.word	0x24044780
          sum += img_ptr[(5*i+k1)*WIDTH+5*j+k2];
 80087a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	441a      	add	r2, r3
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	441a      	add	r2, r3
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	18ca      	adds	r2, r1, r3
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	4413      	add	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d0:	4413      	add	r3, r2
 80087d2:	ed93 7b00 	vldr	d7, [r3]
 80087d6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80087da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087de:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
        for (int k2 = 0; k2 < 5; k2 += 1)
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	3301      	adds	r3, #1
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	dddc      	ble.n	80087a8 <update_image+0x250>
      for (int k1 = 0; k1 < 5; k1 += 1)
 80087ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f0:	3301      	adds	r3, #1
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	ddbe      	ble.n	8008778 <update_image+0x220>

      crop_img_ptr[i*CROP_WIDTH+j] = (sum/25/255);
 80087fa:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80087fe:	eeb3 5b09 	vmov.f64	d5, #57	; 0x41c80000  25.0
 8008802:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8008806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008808:	011a      	lsls	r2, r3, #4
 800880a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880c:	4413      	add	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008812:	4413      	add	r3, r2
 8008814:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8008848 <update_image+0x2f0>
 8008818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800881c:	ed83 7b00 	vstr	d7, [r3]
    for (int j = 0; j < CROP_WIDTH; j += 1) {
 8008820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008822:	3301      	adds	r3, #1
 8008824:	64bb      	str	r3, [r7, #72]	; 0x48
 8008826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008828:	2b0f      	cmp	r3, #15
 800882a:	dd9c      	ble.n	8008766 <update_image+0x20e>
  for (int i = 0; i < CROP_HEIGHT; i +=1) {
 800882c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882e:	3301      	adds	r3, #1
 8008830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008834:	2b0b      	cmp	r3, #11
 8008836:	dd93      	ble.n	8008760 <update_image+0x208>
    }
  }
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	3758      	adds	r7, #88	; 0x58
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	00000000 	.word	0x00000000
 800884c:	406fe000 	.word	0x406fe000

08008850 <update_flow>:

void update_flow(void) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b090      	sub	sp, #64	; 0x40
 8008854:	af0a      	add	r7, sp, #40	; 0x28
  // Switch image pointer
  g_prev_img = g_prev_img == 0 ? 1 : 0;
 8008856:	4b4a      	ldr	r3, [pc, #296]	; (8008980 <update_flow+0x130>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	4b46      	ldr	r3, [pc, #280]	; (8008980 <update_flow+0x130>)
 8008868:	701a      	strb	r2, [r3, #0]

  Coarse2FineFlowWrapper(g_vx, g_vy, g_warpI2,
 800886a:	2301      	movs	r3, #1
 800886c:	9308      	str	r3, [sp, #32]
 800886e:	2310      	movs	r3, #16
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	230c      	movs	r3, #12
 8008874:	9306      	str	r3, [sp, #24]
 8008876:	2301      	movs	r3, #1
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	2301      	movs	r3, #1
 800887c:	9304      	str	r3, [sp, #16]
 800887e:	2301      	movs	r3, #1
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	2301      	movs	r3, #1
 8008884:	9302      	str	r3, [sp, #8]
 8008886:	2304      	movs	r3, #4
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	4b3e      	ldr	r3, [pc, #248]	; (8008984 <update_flow+0x134>)
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	eeb6 1b08 	vmov.f64	d1, #104	; 0x3f400000  0.750
 8008892:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8008978 <update_flow+0x128>
 8008896:	4b3c      	ldr	r3, [pc, #240]	; (8008988 <update_flow+0x138>)
 8008898:	4a3c      	ldr	r2, [pc, #240]	; (800898c <update_flow+0x13c>)
 800889a:	493d      	ldr	r1, [pc, #244]	; (8008990 <update_flow+0x140>)
 800889c:	483d      	ldr	r0, [pc, #244]	; (8008994 <update_flow+0x144>)
 800889e:	f7f7 ff09 	bl	80006b4 <Coarse2FineFlowWrapper>
      g_crop_img0, g_crop_img1,
      0.0012, 0.75, 4, 1, 1, 1, 1, CROP_HEIGHT, CROP_WIDTH, 1);
  double sy = 0;
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double sx = 0;
 80088ae:	f04f 0200 	mov.w	r2, #0
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (int i = 0; i < CROP_HEIGHT*CROP_WIDTH; i += 1) {
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	e01a      	b.n	80088f6 <update_flow+0xa6>
    sy += g_vy[i];
 80088c0:	4a33      	ldr	r2, [pc, #204]	; (8008990 <update_flow+0x140>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	ed93 7b00 	vldr	d7, [r3]
 80088cc:	ed97 6b04 	vldr	d6, [r7, #16]
 80088d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80088d4:	ed87 7b04 	vstr	d7, [r7, #16]
    sx += g_vx[i];
 80088d8:	4a2e      	ldr	r2, [pc, #184]	; (8008994 <update_flow+0x144>)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	ed93 7b00 	vldr	d7, [r3]
 80088e4:	ed97 6b02 	vldr	d6, [r7, #8]
 80088e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80088ec:	ed87 7b02 	vstr	d7, [r7, #8]
  for (int i = 0; i < CROP_HEIGHT*CROP_WIDTH; i += 1) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2bbf      	cmp	r3, #191	; 0xbf
 80088fa:	dde1      	ble.n	80088c0 <update_flow+0x70>
  }

  sy = sy / CROP_HEIGHT;
 80088fc:	ed97 6b04 	vldr	d6, [r7, #16]
 8008900:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8008904:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008908:	ed87 7b04 	vstr	d7, [r7, #16]
  sx = sx / CROP_WIDTH;
 800890c:	ed97 6b02 	vldr	d6, [r7, #8]
 8008910:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8008914:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008918:	ed87 7b02 	vstr	d7, [r7, #8]
  g_sy += sy;
 800891c:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <update_flow+0x148>)
 800891e:	ed93 6b00 	vldr	d6, [r3]
 8008922:	ed97 7b04 	vldr	d7, [r7, #16]
 8008926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <update_flow+0x148>)
 800892c:	ed83 7b00 	vstr	d7, [r3]
  g_sx += sx;
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <update_flow+0x14c>)
 8008932:	ed93 6b00 	vldr	d6, [r3]
 8008936:	ed97 7b02 	vldr	d7, [r7, #8]
 800893a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <update_flow+0x14c>)
 8008940:	ed83 7b00 	vstr	d7, [r3]
//      img[i*CROP_WIDTH+j] = (uint8_t)(255*img_ptr[i*CROP_WIDTH+j]);
//    }
//  }
//  log_data(img, CROP_HEIGHT*CROP_WIDTH);

  sprintf(uart_msg, "%d,%d\n", (int)(g_sy), (int)(g_sx));
 8008944:	4b14      	ldr	r3, [pc, #80]	; (8008998 <update_flow+0x148>)
 8008946:	ed93 7b00 	vldr	d7, [r3]
 800894a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <update_flow+0x14c>)
 8008950:	ed93 7b00 	vldr	d7, [r3]
 8008954:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008958:	ee17 3a90 	vmov	r3, s15
 800895c:	ee16 2a90 	vmov	r2, s13
 8008960:	490f      	ldr	r1, [pc, #60]	; (80089a0 <update_flow+0x150>)
 8008962:	4810      	ldr	r0, [pc, #64]	; (80089a4 <update_flow+0x154>)
 8008964:	f00b ff46 	bl	80147f4 <siprintf>
  log_string(uart_msg);
 8008968:	480e      	ldr	r0, [pc, #56]	; (80089a4 <update_flow+0x154>)
 800896a:	f7ff fdc1 	bl	80084f0 <log_string>
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	30553261 	.word	0x30553261
 800897c:	3f53a92a 	.word	0x3f53a92a
 8008980:	24031b75 	.word	0x24031b75
 8008984:	24044d80 	.word	0x24044d80
 8008988:	24044780 	.word	0x24044780
 800898c:	24045f80 	.word	0x24045f80
 8008990:	24045380 	.word	0x24045380
 8008994:	24045980 	.word	0x24045980
 8008998:	24046580 	.word	0x24046580
 800899c:	24046588 	.word	0x24046588
 80089a0:	08014f58 	.word	0x08014f58
 80089a4:	24046590 	.word	0x24046590

080089a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  if (g_uart_rx_buffer[0] == 0x02) {
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <HAL_UART_RxCpltCallback+0x38>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d10d      	bne.n	80089d4 <HAL_UART_RxCpltCallback+0x2c>
    g_sy = 0;
 80089b8:	490a      	ldr	r1, [pc, #40]	; (80089e4 <HAL_UART_RxCpltCallback+0x3c>)
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9c1 2300 	strd	r2, r3, [r1]
    g_sx = 0;
 80089c6:	4908      	ldr	r1, [pc, #32]	; (80089e8 <HAL_UART_RxCpltCallback+0x40>)
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	24031b74 	.word	0x24031b74
 80089e4:	24046580 	.word	0x24046580
 80089e8:	24046588 	.word	0x24046588

080089ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
	return 1;
 80089f0:	2301      	movs	r3, #1
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_kill>:

int _kill(int pid, int sig)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008a06:	f00b fd71 	bl	80144ec <__errno>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2216      	movs	r2, #22
 8008a0e:	601a      	str	r2, [r3, #0]
	return -1;
 8008a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_exit>:

void _exit (int status)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff ffe7 	bl	80089fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8008a2e:	e7fe      	b.n	8008a2e <_exit+0x12>

08008a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a38:	4a14      	ldr	r2, [pc, #80]	; (8008a8c <_sbrk+0x5c>)
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <_sbrk+0x60>)
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <_sbrk+0x64>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a4c:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <_sbrk+0x64>)
 8008a4e:	4a12      	ldr	r2, [pc, #72]	; (8008a98 <_sbrk+0x68>)
 8008a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a52:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <_sbrk+0x64>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4413      	add	r3, r2
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d207      	bcs.n	8008a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a60:	f00b fd44 	bl	80144ec <__errno>
 8008a64:	4603      	mov	r3, r0
 8008a66:	220c      	movs	r2, #12
 8008a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a6e:	e009      	b.n	8008a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a70:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <_sbrk+0x64>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a76:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <_sbrk+0x64>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <_sbrk+0x64>)
 8008a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	24080000 	.word	0x24080000
 8008a90:	00000400 	.word	0x00000400
 8008a94:	240465a4 	.word	0x240465a4
 8008a98:	240465c0 	.word	0x240465c0

08008a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008aa0:	4b37      	ldr	r3, [pc, #220]	; (8008b80 <SystemInit+0xe4>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa6:	4a36      	ldr	r2, [pc, #216]	; (8008b80 <SystemInit+0xe4>)
 8008aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ab0:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <SystemInit+0xe8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	2b06      	cmp	r3, #6
 8008aba:	d807      	bhi.n	8008acc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <SystemInit+0xe8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f023 030f 	bic.w	r3, r3, #15
 8008ac4:	4a2f      	ldr	r2, [pc, #188]	; (8008b84 <SystemInit+0xe8>)
 8008ac6:	f043 0307 	orr.w	r3, r3, #7
 8008aca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008acc:	4b2e      	ldr	r3, [pc, #184]	; (8008b88 <SystemInit+0xec>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a2d      	ldr	r2, [pc, #180]	; (8008b88 <SystemInit+0xec>)
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ad8:	4b2b      	ldr	r3, [pc, #172]	; (8008b88 <SystemInit+0xec>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008ade:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <SystemInit+0xec>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4929      	ldr	r1, [pc, #164]	; (8008b88 <SystemInit+0xec>)
 8008ae4:	4b29      	ldr	r3, [pc, #164]	; (8008b8c <SystemInit+0xf0>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008aea:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <SystemInit+0xe8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <SystemInit+0xe8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f023 030f 	bic.w	r3, r3, #15
 8008afe:	4a21      	ldr	r2, [pc, #132]	; (8008b84 <SystemInit+0xe8>)
 8008b00:	f043 0307 	orr.w	r3, r3, #7
 8008b04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b06:	4b20      	ldr	r3, [pc, #128]	; (8008b88 <SystemInit+0xec>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008b0c:	4b1e      	ldr	r3, [pc, #120]	; (8008b88 <SystemInit+0xec>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <SystemInit+0xec>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008b18:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <SystemInit+0xec>)
 8008b1a:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <SystemInit+0xf4>)
 8008b1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <SystemInit+0xec>)
 8008b20:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <SystemInit+0xf8>)
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008b24:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <SystemInit+0xec>)
 8008b26:	4a1c      	ldr	r2, [pc, #112]	; (8008b98 <SystemInit+0xfc>)
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b2a:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <SystemInit+0xec>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008b30:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <SystemInit+0xec>)
 8008b32:	4a19      	ldr	r2, [pc, #100]	; (8008b98 <SystemInit+0xfc>)
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <SystemInit+0xec>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b3c:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <SystemInit+0xec>)
 8008b3e:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <SystemInit+0xfc>)
 8008b40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <SystemInit+0xec>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b48:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <SystemInit+0xec>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a0e      	ldr	r2, [pc, #56]	; (8008b88 <SystemInit+0xec>)
 8008b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <SystemInit+0xec>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <SystemInit+0x100>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <SystemInit+0x104>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b66:	d202      	bcs.n	8008b6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <SystemInit+0x108>)
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <SystemInit+0x10c>)
 8008b70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	52002000 	.word	0x52002000
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008b90:	02020200 	.word	0x02020200
 8008b94:	01ff0000 	.word	0x01ff0000
 8008b98:	01010280 	.word	0x01010280
 8008b9c:	5c001000 	.word	0x5c001000
 8008ba0:	ffff0000 	.word	0xffff0000
 8008ba4:	51008108 	.word	0x51008108
 8008ba8:	52004000 	.word	0x52004000

08008bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008bb0:	f7ff ff74 	bl	8008a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008bb4:	480c      	ldr	r0, [pc, #48]	; (8008be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008bb6:	490d      	ldr	r1, [pc, #52]	; (8008bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008bb8:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008bbc:	e002      	b.n	8008bc4 <LoopCopyDataInit>

08008bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008bc2:	3304      	adds	r3, #4

08008bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008bc8:	d3f9      	bcc.n	8008bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008bca:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008bcc:	4c0a      	ldr	r4, [pc, #40]	; (8008bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008bd0:	e001      	b.n	8008bd6 <LoopFillZerobss>

08008bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008bd4:	3204      	adds	r2, #4

08008bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008bd8:	d3fb      	bcc.n	8008bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008bda:	f00b fc8d 	bl	80144f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008bde:	f7fe fe49 	bl	8007874 <main>
  bx  lr
 8008be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008be4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8008be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008bec:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 8008bf0:	0801739c 	.word	0x0801739c
  ldr r2, =_sbss
 8008bf4:	240000a8 	.word	0x240000a8
  ldr r4, =_ebss
 8008bf8:	240465c0 	.word	0x240465c0

08008bfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008bfc:	e7fe      	b.n	8008bfc <ADC3_IRQHandler>
	...

08008c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c06:	2003      	movs	r0, #3
 8008c08:	f000 f98c 	bl	8008f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c0c:	f006 f876 	bl	800ecfc <HAL_RCC_GetSysClockFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <HAL_Init+0x68>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	4913      	ldr	r1, [pc, #76]	; (8008c6c <HAL_Init+0x6c>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <HAL_Init+0x68>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <HAL_Init+0x6c>)
 8008c34:	5cd3      	ldrb	r3, [r2, r3]
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <HAL_Init+0x70>)
 8008c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c44:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <HAL_Init+0x74>)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008c4a:	200f      	movs	r0, #15
 8008c4c:	f000 f814 	bl	8008c78 <HAL_InitTick>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e002      	b.n	8008c60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008c5a:	f7ff f933 	bl	8007ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	58024400 	.word	0x58024400
 8008c6c:	0801501c 	.word	0x0801501c
 8008c70:	24000034 	.word	0x24000034
 8008c74:	24000030 	.word	0x24000030

08008c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008c80:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <HAL_InitTick+0x60>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e021      	b.n	8008cd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008c8c:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <HAL_InitTick+0x64>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <HAL_InitTick+0x60>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	4619      	mov	r1, r3
 8008c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f971 	bl	8008f8a <HAL_SYSTICK_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e00e      	b.n	8008cd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b0f      	cmp	r3, #15
 8008cb6:	d80a      	bhi.n	8008cce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008cb8:	2200      	movs	r2, #0
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc0:	f000 f93b 	bl	8008f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008cc4:	4a06      	ldr	r2, [pc, #24]	; (8008ce0 <HAL_InitTick+0x68>)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e000      	b.n	8008cd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	2400003c 	.word	0x2400003c
 8008cdc:	24000030 	.word	0x24000030
 8008ce0:	24000038 	.word	0x24000038

08008ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <HAL_IncTick+0x20>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <HAL_IncTick+0x24>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	4a04      	ldr	r2, [pc, #16]	; (8008d08 <HAL_IncTick+0x24>)
 8008cf6:	6013      	str	r3, [r2, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2400003c 	.word	0x2400003c
 8008d08:	240465a8 	.word	0x240465a8

08008d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008d10:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <HAL_GetTick+0x14>)
 8008d12:	681b      	ldr	r3, [r3, #0]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	240465a8 	.word	0x240465a8

08008d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d2c:	f7ff ffee 	bl	8008d0c <HAL_GetTick>
 8008d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3c:	d005      	beq.n	8008d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <HAL_Delay+0x44>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d4a:	bf00      	nop
 8008d4c:	f7ff ffde 	bl	8008d0c <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d8f7      	bhi.n	8008d4c <HAL_Delay+0x28>
  {
  }
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	2400003c 	.word	0x2400003c

08008d6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <HAL_GetREVID+0x14>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	0c1b      	lsrs	r3, r3, #16
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	5c001000 	.word	0x5c001000

08008d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008da0:	4013      	ands	r3, r2
 8008da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008db2:	4a04      	ldr	r2, [pc, #16]	; (8008dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	60d3      	str	r3, [r2, #12]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	e000ed00 	.word	0xe000ed00
 8008dc8:	05fa0000 	.word	0x05fa0000

08008dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <__NVIC_GetPriorityGrouping+0x18>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	0a1b      	lsrs	r3, r3, #8
 8008dd6:	f003 0307 	and.w	r3, r3, #7
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	e000ed00 	.word	0xe000ed00

08008de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db0b      	blt.n	8008e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	f003 021f 	and.w	r2, r3, #31
 8008e00:	4907      	ldr	r1, [pc, #28]	; (8008e20 <__NVIC_EnableIRQ+0x38>)
 8008e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	2001      	movs	r0, #1
 8008e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	e000e100 	.word	0xe000e100

08008e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	db0a      	blt.n	8008e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	490c      	ldr	r1, [pc, #48]	; (8008e70 <__NVIC_SetPriority+0x4c>)
 8008e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e42:	0112      	lsls	r2, r2, #4
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	440b      	add	r3, r1
 8008e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e4c:	e00a      	b.n	8008e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	4908      	ldr	r1, [pc, #32]	; (8008e74 <__NVIC_SetPriority+0x50>)
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	3b04      	subs	r3, #4
 8008e5c:	0112      	lsls	r2, r2, #4
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	440b      	add	r3, r1
 8008e62:	761a      	strb	r2, [r3, #24]
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	e000e100 	.word	0xe000e100
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b089      	sub	sp, #36	; 0x24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f1c3 0307 	rsb	r3, r3, #7
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	bf28      	it	cs
 8008e96:	2304      	movcs	r3, #4
 8008e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	2b06      	cmp	r3, #6
 8008ea0:	d902      	bls.n	8008ea8 <NVIC_EncodePriority+0x30>
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	3b03      	subs	r3, #3
 8008ea6:	e000      	b.n	8008eaa <NVIC_EncodePriority+0x32>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb6:	43da      	mvns	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	401a      	ands	r2, r3
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eca:	43d9      	mvns	r1, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ed0:	4313      	orrs	r3, r2
         );
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3724      	adds	r7, #36	; 0x24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ef0:	d301      	bcc.n	8008ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e00f      	b.n	8008f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ef6:	4a0a      	ldr	r2, [pc, #40]	; (8008f20 <SysTick_Config+0x40>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008efe:	210f      	movs	r1, #15
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f04:	f7ff ff8e 	bl	8008e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <SysTick_Config+0x40>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f0e:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <SysTick_Config+0x40>)
 8008f10:	2207      	movs	r2, #7
 8008f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	e000e010 	.word	0xe000e010

08008f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff29 	bl	8008d84 <__NVIC_SetPriorityGrouping>
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	4603      	mov	r3, r0
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008f48:	f7ff ff40 	bl	8008dcc <__NVIC_GetPriorityGrouping>
 8008f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	6978      	ldr	r0, [r7, #20]
 8008f54:	f7ff ff90 	bl	8008e78 <NVIC_EncodePriority>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ff5f 	bl	8008e24 <__NVIC_SetPriority>
}
 8008f66:	bf00      	nop
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	4603      	mov	r3, r0
 8008f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff ff33 	bl	8008de8 <__NVIC_EnableIRQ>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ffa4 	bl	8008ee0 <SysTick_Config>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008fa8:	f3bf 8f5f 	dmb	sy
}
 8008fac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <HAL_MPU_Disable+0x28>)
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	4a06      	ldr	r2, [pc, #24]	; (8008fcc <HAL_MPU_Disable+0x28>)
 8008fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_MPU_Disable+0x2c>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	605a      	str	r2, [r3, #4]
}
 8008fc0:	bf00      	nop
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	e000ed00 	.word	0xe000ed00
 8008fd0:	e000ed90 	.word	0xe000ed90

08008fd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008fdc:	4a0b      	ldr	r2, [pc, #44]	; (800900c <HAL_MPU_Enable+0x38>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f043 0301 	orr.w	r3, r3, #1
 8008fe4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <HAL_MPU_Enable+0x3c>)
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <HAL_MPU_Enable+0x3c>)
 8008fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008ff2:	f3bf 8f4f 	dsb	sy
}
 8008ff6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008ff8:	f3bf 8f6f 	isb	sy
}
 8008ffc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	e000ed90 	.word	0xe000ed90
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	785a      	ldrb	r2, [r3, #1]
 8009020:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <HAL_MPU_ConfigRegion+0x84>)
 8009022:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d029      	beq.n	8009080 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800902c:	4a1a      	ldr	r2, [pc, #104]	; (8009098 <HAL_MPU_ConfigRegion+0x84>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7b1b      	ldrb	r3, [r3, #12]
 8009038:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7adb      	ldrb	r3, [r3, #11]
 800903e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009040:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7a9b      	ldrb	r3, [r3, #10]
 8009046:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009048:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7b5b      	ldrb	r3, [r3, #13]
 800904e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009050:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7b9b      	ldrb	r3, [r3, #14]
 8009056:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009058:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7bdb      	ldrb	r3, [r3, #15]
 800905e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009060:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009068:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7a1b      	ldrb	r3, [r3, #8]
 800906e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009070:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009078:	4a07      	ldr	r2, [pc, #28]	; (8009098 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800907a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800907c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800907e:	e005      	b.n	800908c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <HAL_MPU_ConfigRegion+0x84>)
 8009082:	2200      	movs	r2, #0
 8009084:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <HAL_MPU_ConfigRegion+0x84>)
 8009088:	2200      	movs	r2, #0
 800908a:	611a      	str	r2, [r3, #16]
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	e000ed90 	.word	0xe000ed90

0800909c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e069      	b.n	8009182 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7fe ff1c 	bl	8007ef8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6819      	ldr	r1, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b2a      	ldr	r3, [pc, #168]	; (800918c <HAL_DCMI_Init+0xf0>)
 80090e2:	400b      	ands	r3, r1
 80090e4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6819      	ldr	r1, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80090fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8009106:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009112:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800911e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800912a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2b10      	cmp	r3, #16
 800913a:	d112      	bne.n	8009162 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7f1b      	ldrb	r3, [r3, #28]
 8009140:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7f5b      	ldrb	r3, [r3, #29]
 8009146:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8009148:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7f9b      	ldrb	r3, [r3, #30]
 800914e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8009150:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7fdb      	ldrb	r3, [r3, #31]
 8009158:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800915e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8009160:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 021e 	orr.w	r2, r2, #30
 8009170:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	ffe0f007 	.word	0xffe0f007

08009190 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_DCMI_Start_DMA+0x1c>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e0ab      	b.n	8009304 <HAL_DCMI_Start_DMA+0x174>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091ca:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 0202 	bic.w	r2, r2, #2
 80091da:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f0:	4a46      	ldr	r2, [pc, #280]	; (800930c <HAL_DCMI_Start_DMA+0x17c>)
 80091f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f8:	4a45      	ldr	r2, [pc, #276]	; (8009310 <HAL_DCMI_Start_DMA+0x180>)
 80091fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009200:	2200      	movs	r2, #0
 8009202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009222:	d219      	bcs.n	8009258 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3328      	adds	r3, #40	; 0x28
 800922e:	4619      	mov	r1, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	f000 fd1a 	bl	8009c6c <HAL_DMA_Start_IT>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d055      	beq.n	80092ea <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2240      	movs	r2, #64	; 0x40
 8009242:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e055      	b.n	8009304 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800925c:	4a2b      	ldr	r2, [pc, #172]	; (800930c <HAL_DCMI_Start_DMA+0x17c>)
 800925e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8009272:	e009      	b.n	8009288 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	085a      	lsrs	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	005a      	lsls	r2, r3, #1
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009290:	d2f0      	bcs.n	8009274 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	1e9a      	subs	r2, r3, #2
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4413      	add	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3328      	adds	r3, #40	; 0x28
 80092ba:	4619      	mov	r1, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	f002 ffb1 	bl	800c22c <HAL_DMAEx_MultiBufferStart_IT>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00c      	beq.n	80092ea <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2240      	movs	r2, #64	; 0x40
 80092d4:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e00c      	b.n	8009304 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	08009455 	.word	0x08009455
 8009310:	0800957b 	.word	0x0800957b

08009314 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d016      	beq.n	800935c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2204      	movs	r2, #4
 8009334:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	f043 0202 	orr.w	r2, r3, #2
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934e:	4a31      	ldr	r2, [pc, #196]	; (8009414 <HAL_DCMI_IRQHandler+0x100>)
 8009350:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fa10 	bl	800a77c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d016      	beq.n	8009394 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2202      	movs	r2, #2
 800936c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009372:	f043 0201 	orr.w	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2204      	movs	r2, #4
 800937e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009386:	4a23      	ldr	r2, [pc, #140]	; (8009414 <HAL_DCMI_IRQHandler+0x100>)
 8009388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f9f4 	bl	800a77c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b00      	cmp	r3, #0
 800939c:	d006      	beq.n	80093ac <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2210      	movs	r2, #16
 80093a4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f840 	bl	800942c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f003 0308 	and.w	r3, r3, #8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2208      	movs	r2, #8
 80093bc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f83e 	bl	8009440 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01d      	beq.n	800940a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d107      	bne.n	80093ec <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 021e 	bic.w	r2, r2, #30
 80093ea:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0201 	bic.w	r2, r2, #1
 80093fa:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2201      	movs	r2, #1
 8009402:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7f9 f9c1 	bl	800278c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	0800957b 	.word	0x0800957b

08009418 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009460:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d043      	beq.n	80094f2 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009476:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d118      	bne.n	80094b6 <DCMI_DMAXferCplt+0x62>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d015      	beq.n	80094b6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949c:	00da      	lsls	r2, r3, #3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	4619      	mov	r1, r3
 80094a6:	f003 fa1f 	bl	800c8e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	1e5a      	subs	r2, r3, #1
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38
 80094b4:	e044      	b.n	8009540 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d13c      	bne.n	8009540 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	00da      	lsls	r2, r3, #3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	2201      	movs	r2, #1
 80094e0:	4619      	mov	r1, r3
 80094e2:	f003 fa01 	bl	800c8e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	1e5a      	subs	r2, r3, #1
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
 80094f0:	e026      	b.n	8009540 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d006      	beq.n	8009510 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	e017      	b.n	8009540 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10f      	bne.n	8009540 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009524:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	0099      	lsls	r1, r3, #2
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	440a      	add	r2, r1
 8009536:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	429a      	cmp	r2, r3
 800954a:	d112      	bne.n	8009572 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f042 0201 	orr.w	r2, r2, #1
 800955a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b02      	cmp	r3, #2
 8009568:	d103      	bne.n	8009572 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958e:	2b02      	cmp	r3, #2
 8009590:	d009      	beq.n	80095a6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff ff36 	bl	8009418 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80095bc:	f7ff fba6 	bl	8008d0c <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e316      	b.n	8009bfa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a66      	ldr	r2, [pc, #408]	; (800976c <HAL_DMA_Init+0x1b8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d04a      	beq.n	800966c <HAL_DMA_Init+0xb8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a65      	ldr	r2, [pc, #404]	; (8009770 <HAL_DMA_Init+0x1bc>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d045      	beq.n	800966c <HAL_DMA_Init+0xb8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a63      	ldr	r2, [pc, #396]	; (8009774 <HAL_DMA_Init+0x1c0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d040      	beq.n	800966c <HAL_DMA_Init+0xb8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a62      	ldr	r2, [pc, #392]	; (8009778 <HAL_DMA_Init+0x1c4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d03b      	beq.n	800966c <HAL_DMA_Init+0xb8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a60      	ldr	r2, [pc, #384]	; (800977c <HAL_DMA_Init+0x1c8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d036      	beq.n	800966c <HAL_DMA_Init+0xb8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a5f      	ldr	r2, [pc, #380]	; (8009780 <HAL_DMA_Init+0x1cc>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d031      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a5d      	ldr	r2, [pc, #372]	; (8009784 <HAL_DMA_Init+0x1d0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d02c      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a5c      	ldr	r2, [pc, #368]	; (8009788 <HAL_DMA_Init+0x1d4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d027      	beq.n	800966c <HAL_DMA_Init+0xb8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a5a      	ldr	r2, [pc, #360]	; (800978c <HAL_DMA_Init+0x1d8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d022      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a59      	ldr	r2, [pc, #356]	; (8009790 <HAL_DMA_Init+0x1dc>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d01d      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a57      	ldr	r2, [pc, #348]	; (8009794 <HAL_DMA_Init+0x1e0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d018      	beq.n	800966c <HAL_DMA_Init+0xb8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a56      	ldr	r2, [pc, #344]	; (8009798 <HAL_DMA_Init+0x1e4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a54      	ldr	r2, [pc, #336]	; (800979c <HAL_DMA_Init+0x1e8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00e      	beq.n	800966c <HAL_DMA_Init+0xb8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a53      	ldr	r2, [pc, #332]	; (80097a0 <HAL_DMA_Init+0x1ec>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d009      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a51      	ldr	r2, [pc, #324]	; (80097a4 <HAL_DMA_Init+0x1f0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d004      	beq.n	800966c <HAL_DMA_Init+0xb8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a50      	ldr	r2, [pc, #320]	; (80097a8 <HAL_DMA_Init+0x1f4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d101      	bne.n	8009670 <HAL_DMA_Init+0xbc>
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <HAL_DMA_Init+0xbe>
 8009670:	2300      	movs	r3, #0
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 813b 	beq.w	80098ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a37      	ldr	r2, [pc, #220]	; (800976c <HAL_DMA_Init+0x1b8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d04a      	beq.n	8009728 <HAL_DMA_Init+0x174>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a36      	ldr	r2, [pc, #216]	; (8009770 <HAL_DMA_Init+0x1bc>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d045      	beq.n	8009728 <HAL_DMA_Init+0x174>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a34      	ldr	r2, [pc, #208]	; (8009774 <HAL_DMA_Init+0x1c0>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d040      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a33      	ldr	r2, [pc, #204]	; (8009778 <HAL_DMA_Init+0x1c4>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d03b      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a31      	ldr	r2, [pc, #196]	; (800977c <HAL_DMA_Init+0x1c8>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d036      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a30      	ldr	r2, [pc, #192]	; (8009780 <HAL_DMA_Init+0x1cc>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d031      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a2e      	ldr	r2, [pc, #184]	; (8009784 <HAL_DMA_Init+0x1d0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d02c      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a2d      	ldr	r2, [pc, #180]	; (8009788 <HAL_DMA_Init+0x1d4>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d027      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a2b      	ldr	r2, [pc, #172]	; (800978c <HAL_DMA_Init+0x1d8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d022      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a2a      	ldr	r2, [pc, #168]	; (8009790 <HAL_DMA_Init+0x1dc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d01d      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a28      	ldr	r2, [pc, #160]	; (8009794 <HAL_DMA_Init+0x1e0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d018      	beq.n	8009728 <HAL_DMA_Init+0x174>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a27      	ldr	r2, [pc, #156]	; (8009798 <HAL_DMA_Init+0x1e4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <HAL_DMA_Init+0x174>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a25      	ldr	r2, [pc, #148]	; (800979c <HAL_DMA_Init+0x1e8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00e      	beq.n	8009728 <HAL_DMA_Init+0x174>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a24      	ldr	r2, [pc, #144]	; (80097a0 <HAL_DMA_Init+0x1ec>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d009      	beq.n	8009728 <HAL_DMA_Init+0x174>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <HAL_DMA_Init+0x1f0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d004      	beq.n	8009728 <HAL_DMA_Init+0x174>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <HAL_DMA_Init+0x1f4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d108      	bne.n	800973a <HAL_DMA_Init+0x186>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0201 	bic.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	e007      	b.n	800974a <HAL_DMA_Init+0x196>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800974a:	e02f      	b.n	80097ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800974c:	f7ff fade 	bl	8008d0c <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	2b05      	cmp	r3, #5
 8009758:	d928      	bls.n	80097ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2203      	movs	r2, #3
 8009764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e246      	b.n	8009bfa <HAL_DMA_Init+0x646>
 800976c:	40020010 	.word	0x40020010
 8009770:	40020028 	.word	0x40020028
 8009774:	40020040 	.word	0x40020040
 8009778:	40020058 	.word	0x40020058
 800977c:	40020070 	.word	0x40020070
 8009780:	40020088 	.word	0x40020088
 8009784:	400200a0 	.word	0x400200a0
 8009788:	400200b8 	.word	0x400200b8
 800978c:	40020410 	.word	0x40020410
 8009790:	40020428 	.word	0x40020428
 8009794:	40020440 	.word	0x40020440
 8009798:	40020458 	.word	0x40020458
 800979c:	40020470 	.word	0x40020470
 80097a0:	40020488 	.word	0x40020488
 80097a4:	400204a0 	.word	0x400204a0
 80097a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1c8      	bne.n	800974c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4b83      	ldr	r3, [pc, #524]	; (80099d4 <HAL_DMA_Init+0x420>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80097d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d107      	bne.n	8009810 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	4313      	orrs	r3, r2
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009810:	4b71      	ldr	r3, [pc, #452]	; (80099d8 <HAL_DMA_Init+0x424>)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	4b71      	ldr	r3, [pc, #452]	; (80099dc <HAL_DMA_Init+0x428>)
 8009816:	4013      	ands	r3, r2
 8009818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981c:	d328      	bcc.n	8009870 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2b28      	cmp	r3, #40	; 0x28
 8009824:	d903      	bls.n	800982e <HAL_DMA_Init+0x27a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	2b2e      	cmp	r3, #46	; 0x2e
 800982c:	d917      	bls.n	800985e <HAL_DMA_Init+0x2aa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b3e      	cmp	r3, #62	; 0x3e
 8009834:	d903      	bls.n	800983e <HAL_DMA_Init+0x28a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b42      	cmp	r3, #66	; 0x42
 800983c:	d90f      	bls.n	800985e <HAL_DMA_Init+0x2aa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b46      	cmp	r3, #70	; 0x46
 8009844:	d903      	bls.n	800984e <HAL_DMA_Init+0x29a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b48      	cmp	r3, #72	; 0x48
 800984c:	d907      	bls.n	800985e <HAL_DMA_Init+0x2aa>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2b4e      	cmp	r3, #78	; 0x4e
 8009854:	d905      	bls.n	8009862 <HAL_DMA_Init+0x2ae>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b52      	cmp	r3, #82	; 0x52
 800985c:	d801      	bhi.n	8009862 <HAL_DMA_Init+0x2ae>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <HAL_DMA_Init+0x2b0>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800986e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0307 	bic.w	r3, r3, #7
 8009886:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	2b04      	cmp	r3, #4
 8009898:	d117      	bne.n	80098ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f002 fb33 	bl	800bf18 <DMA_CheckFifoParam>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2240      	movs	r2, #64	; 0x40
 80098bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e197      	b.n	8009bfa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f002 fa6e 	bl	800bdb4 <DMA_CalcBaseAndBitshift>
 80098d8:	4603      	mov	r3, r0
 80098da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	223f      	movs	r2, #63	; 0x3f
 80098e6:	409a      	lsls	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	e0cd      	b.n	8009a8a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a3b      	ldr	r2, [pc, #236]	; (80099e0 <HAL_DMA_Init+0x42c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d022      	beq.n	800993e <HAL_DMA_Init+0x38a>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a39      	ldr	r2, [pc, #228]	; (80099e4 <HAL_DMA_Init+0x430>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01d      	beq.n	800993e <HAL_DMA_Init+0x38a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a38      	ldr	r2, [pc, #224]	; (80099e8 <HAL_DMA_Init+0x434>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d018      	beq.n	800993e <HAL_DMA_Init+0x38a>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a36      	ldr	r2, [pc, #216]	; (80099ec <HAL_DMA_Init+0x438>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d013      	beq.n	800993e <HAL_DMA_Init+0x38a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a35      	ldr	r2, [pc, #212]	; (80099f0 <HAL_DMA_Init+0x43c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00e      	beq.n	800993e <HAL_DMA_Init+0x38a>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a33      	ldr	r2, [pc, #204]	; (80099f4 <HAL_DMA_Init+0x440>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d009      	beq.n	800993e <HAL_DMA_Init+0x38a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a32      	ldr	r2, [pc, #200]	; (80099f8 <HAL_DMA_Init+0x444>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d004      	beq.n	800993e <HAL_DMA_Init+0x38a>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a30      	ldr	r2, [pc, #192]	; (80099fc <HAL_DMA_Init+0x448>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d101      	bne.n	8009942 <HAL_DMA_Init+0x38e>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <HAL_DMA_Init+0x390>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8097 	beq.w	8009a78 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a24      	ldr	r2, [pc, #144]	; (80099e0 <HAL_DMA_Init+0x42c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d021      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <HAL_DMA_Init+0x430>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d01c      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a21      	ldr	r2, [pc, #132]	; (80099e8 <HAL_DMA_Init+0x434>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d017      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <HAL_DMA_Init+0x438>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d012      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1e      	ldr	r2, [pc, #120]	; (80099f0 <HAL_DMA_Init+0x43c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00d      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a1c      	ldr	r2, [pc, #112]	; (80099f4 <HAL_DMA_Init+0x440>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d008      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a1b      	ldr	r2, [pc, #108]	; (80099f8 <HAL_DMA_Init+0x444>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d003      	beq.n	8009998 <HAL_DMA_Init+0x3e4>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_DMA_Init+0x448>)
 8009996:	4293      	cmp	r3, r2
 8009998:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <HAL_DMA_Init+0x44c>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	d020      	beq.n	8009a04 <HAL_DMA_Init+0x450>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d102      	bne.n	80099d0 <HAL_DMA_Init+0x41c>
 80099ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099ce:	e01a      	b.n	8009a06 <HAL_DMA_Init+0x452>
 80099d0:	2300      	movs	r3, #0
 80099d2:	e018      	b.n	8009a06 <HAL_DMA_Init+0x452>
 80099d4:	fe10803f 	.word	0xfe10803f
 80099d8:	5c001000 	.word	0x5c001000
 80099dc:	ffff0000 	.word	0xffff0000
 80099e0:	58025408 	.word	0x58025408
 80099e4:	5802541c 	.word	0x5802541c
 80099e8:	58025430 	.word	0x58025430
 80099ec:	58025444 	.word	0x58025444
 80099f0:	58025458 	.word	0x58025458
 80099f4:	5802546c 	.word	0x5802546c
 80099f8:	58025480 	.word	0x58025480
 80099fc:	58025494 	.word	0x58025494
 8009a00:	fffe000f 	.word	0xfffe000f
 8009a04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	68d2      	ldr	r2, [r2, #12]
 8009a0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4b6e      	ldr	r3, [pc, #440]	; (8009c04 <HAL_DMA_Init+0x650>)
 8009a4c:	4413      	add	r3, r2
 8009a4e:	4a6e      	ldr	r2, [pc, #440]	; (8009c08 <HAL_DMA_Init+0x654>)
 8009a50:	fba2 2303 	umull	r2, r3, r2, r3
 8009a54:	091b      	lsrs	r3, r3, #4
 8009a56:	009a      	lsls	r2, r3, #2
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f002 f9a9 	bl	800bdb4 <DMA_CalcBaseAndBitshift>
 8009a62:	4603      	mov	r3, r0
 8009a64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	2201      	movs	r2, #1
 8009a70:	409a      	lsls	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	605a      	str	r2, [r3, #4]
 8009a76:	e008      	b.n	8009a8a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2240      	movs	r2, #64	; 0x40
 8009a7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2203      	movs	r2, #3
 8009a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e0b7      	b.n	8009bfa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a5f      	ldr	r2, [pc, #380]	; (8009c0c <HAL_DMA_Init+0x658>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d072      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a5d      	ldr	r2, [pc, #372]	; (8009c10 <HAL_DMA_Init+0x65c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d06d      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a5c      	ldr	r2, [pc, #368]	; (8009c14 <HAL_DMA_Init+0x660>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d068      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a5a      	ldr	r2, [pc, #360]	; (8009c18 <HAL_DMA_Init+0x664>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d063      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a59      	ldr	r2, [pc, #356]	; (8009c1c <HAL_DMA_Init+0x668>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d05e      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a57      	ldr	r2, [pc, #348]	; (8009c20 <HAL_DMA_Init+0x66c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d059      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a56      	ldr	r2, [pc, #344]	; (8009c24 <HAL_DMA_Init+0x670>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d054      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a54      	ldr	r2, [pc, #336]	; (8009c28 <HAL_DMA_Init+0x674>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d04f      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a53      	ldr	r2, [pc, #332]	; (8009c2c <HAL_DMA_Init+0x678>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d04a      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a51      	ldr	r2, [pc, #324]	; (8009c30 <HAL_DMA_Init+0x67c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d045      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a50      	ldr	r2, [pc, #320]	; (8009c34 <HAL_DMA_Init+0x680>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d040      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a4e      	ldr	r2, [pc, #312]	; (8009c38 <HAL_DMA_Init+0x684>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d03b      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a4d      	ldr	r2, [pc, #308]	; (8009c3c <HAL_DMA_Init+0x688>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d036      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a4b      	ldr	r2, [pc, #300]	; (8009c40 <HAL_DMA_Init+0x68c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d031      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a4a      	ldr	r2, [pc, #296]	; (8009c44 <HAL_DMA_Init+0x690>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d02c      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a48      	ldr	r2, [pc, #288]	; (8009c48 <HAL_DMA_Init+0x694>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d027      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a47      	ldr	r2, [pc, #284]	; (8009c4c <HAL_DMA_Init+0x698>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d022      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a45      	ldr	r2, [pc, #276]	; (8009c50 <HAL_DMA_Init+0x69c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d01d      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a44      	ldr	r2, [pc, #272]	; (8009c54 <HAL_DMA_Init+0x6a0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d018      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a42      	ldr	r2, [pc, #264]	; (8009c58 <HAL_DMA_Init+0x6a4>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d013      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a41      	ldr	r2, [pc, #260]	; (8009c5c <HAL_DMA_Init+0x6a8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00e      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a3f      	ldr	r2, [pc, #252]	; (8009c60 <HAL_DMA_Init+0x6ac>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d009      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a3e      	ldr	r2, [pc, #248]	; (8009c64 <HAL_DMA_Init+0x6b0>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d004      	beq.n	8009b7a <HAL_DMA_Init+0x5c6>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a3c      	ldr	r2, [pc, #240]	; (8009c68 <HAL_DMA_Init+0x6b4>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d101      	bne.n	8009b7e <HAL_DMA_Init+0x5ca>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <HAL_DMA_Init+0x5cc>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d032      	beq.n	8009bea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 fa43 	bl	800c010 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b80      	cmp	r3, #128	; 0x80
 8009b90:	d102      	bne.n	8009b98 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009bac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d010      	beq.n	8009bd8 <HAL_DMA_Init+0x624>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d80c      	bhi.n	8009bd8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f002 fac0 	bl	800c144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	e008      	b.n	8009bea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	a7fdabf8 	.word	0xa7fdabf8
 8009c08:	cccccccd 	.word	0xcccccccd
 8009c0c:	40020010 	.word	0x40020010
 8009c10:	40020028 	.word	0x40020028
 8009c14:	40020040 	.word	0x40020040
 8009c18:	40020058 	.word	0x40020058
 8009c1c:	40020070 	.word	0x40020070
 8009c20:	40020088 	.word	0x40020088
 8009c24:	400200a0 	.word	0x400200a0
 8009c28:	400200b8 	.word	0x400200b8
 8009c2c:	40020410 	.word	0x40020410
 8009c30:	40020428 	.word	0x40020428
 8009c34:	40020440 	.word	0x40020440
 8009c38:	40020458 	.word	0x40020458
 8009c3c:	40020470 	.word	0x40020470
 8009c40:	40020488 	.word	0x40020488
 8009c44:	400204a0 	.word	0x400204a0
 8009c48:	400204b8 	.word	0x400204b8
 8009c4c:	58025408 	.word	0x58025408
 8009c50:	5802541c 	.word	0x5802541c
 8009c54:	58025430 	.word	0x58025430
 8009c58:	58025444 	.word	0x58025444
 8009c5c:	58025458 	.word	0x58025458
 8009c60:	5802546c 	.word	0x5802546c
 8009c64:	58025480 	.word	0x58025480
 8009c68:	58025494 	.word	0x58025494

08009c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e226      	b.n	800a0d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <HAL_DMA_Start_IT+0x2a>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e21f      	b.n	800a0d6 <HAL_DMA_Start_IT+0x46a>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	f040 820a 	bne.w	800a0c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a68      	ldr	r2, [pc, #416]	; (8009e60 <HAL_DMA_Start_IT+0x1f4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d04a      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a66      	ldr	r2, [pc, #408]	; (8009e64 <HAL_DMA_Start_IT+0x1f8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d045      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a65      	ldr	r2, [pc, #404]	; (8009e68 <HAL_DMA_Start_IT+0x1fc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d040      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a63      	ldr	r2, [pc, #396]	; (8009e6c <HAL_DMA_Start_IT+0x200>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d03b      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a62      	ldr	r2, [pc, #392]	; (8009e70 <HAL_DMA_Start_IT+0x204>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d036      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a60      	ldr	r2, [pc, #384]	; (8009e74 <HAL_DMA_Start_IT+0x208>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d031      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a5f      	ldr	r2, [pc, #380]	; (8009e78 <HAL_DMA_Start_IT+0x20c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d02c      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a5d      	ldr	r2, [pc, #372]	; (8009e7c <HAL_DMA_Start_IT+0x210>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d027      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a5c      	ldr	r2, [pc, #368]	; (8009e80 <HAL_DMA_Start_IT+0x214>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d022      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a5a      	ldr	r2, [pc, #360]	; (8009e84 <HAL_DMA_Start_IT+0x218>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01d      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a59      	ldr	r2, [pc, #356]	; (8009e88 <HAL_DMA_Start_IT+0x21c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d018      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a57      	ldr	r2, [pc, #348]	; (8009e8c <HAL_DMA_Start_IT+0x220>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d013      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a56      	ldr	r2, [pc, #344]	; (8009e90 <HAL_DMA_Start_IT+0x224>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00e      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a54      	ldr	r2, [pc, #336]	; (8009e94 <HAL_DMA_Start_IT+0x228>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d009      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a53      	ldr	r2, [pc, #332]	; (8009e98 <HAL_DMA_Start_IT+0x22c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d004      	beq.n	8009d5a <HAL_DMA_Start_IT+0xee>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a51      	ldr	r2, [pc, #324]	; (8009e9c <HAL_DMA_Start_IT+0x230>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d108      	bne.n	8009d6c <HAL_DMA_Start_IT+0x100>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f022 0201 	bic.w	r2, r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	e007      	b.n	8009d7c <HAL_DMA_Start_IT+0x110>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f001 fe6a 	bl	800ba5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a34      	ldr	r2, [pc, #208]	; (8009e60 <HAL_DMA_Start_IT+0x1f4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d04a      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a33      	ldr	r2, [pc, #204]	; (8009e64 <HAL_DMA_Start_IT+0x1f8>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d045      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a31      	ldr	r2, [pc, #196]	; (8009e68 <HAL_DMA_Start_IT+0x1fc>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d040      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a30      	ldr	r2, [pc, #192]	; (8009e6c <HAL_DMA_Start_IT+0x200>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d03b      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a2e      	ldr	r2, [pc, #184]	; (8009e70 <HAL_DMA_Start_IT+0x204>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d036      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a2d      	ldr	r2, [pc, #180]	; (8009e74 <HAL_DMA_Start_IT+0x208>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d031      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a2b      	ldr	r2, [pc, #172]	; (8009e78 <HAL_DMA_Start_IT+0x20c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d02c      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a2a      	ldr	r2, [pc, #168]	; (8009e7c <HAL_DMA_Start_IT+0x210>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d027      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a28      	ldr	r2, [pc, #160]	; (8009e80 <HAL_DMA_Start_IT+0x214>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d022      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a27      	ldr	r2, [pc, #156]	; (8009e84 <HAL_DMA_Start_IT+0x218>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d01d      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a25      	ldr	r2, [pc, #148]	; (8009e88 <HAL_DMA_Start_IT+0x21c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d018      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a24      	ldr	r2, [pc, #144]	; (8009e8c <HAL_DMA_Start_IT+0x220>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d013      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a22      	ldr	r2, [pc, #136]	; (8009e90 <HAL_DMA_Start_IT+0x224>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00e      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a21      	ldr	r2, [pc, #132]	; (8009e94 <HAL_DMA_Start_IT+0x228>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d009      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1f      	ldr	r2, [pc, #124]	; (8009e98 <HAL_DMA_Start_IT+0x22c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d004      	beq.n	8009e28 <HAL_DMA_Start_IT+0x1bc>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1e      	ldr	r2, [pc, #120]	; (8009e9c <HAL_DMA_Start_IT+0x230>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d101      	bne.n	8009e2c <HAL_DMA_Start_IT+0x1c0>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <HAL_DMA_Start_IT+0x1c2>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d036      	beq.n	8009ea0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f023 021e 	bic.w	r2, r3, #30
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0216 	orr.w	r2, r2, #22
 8009e44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d03e      	beq.n	8009ecc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0208 	orr.w	r2, r2, #8
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e035      	b.n	8009ecc <HAL_DMA_Start_IT+0x260>
 8009e60:	40020010 	.word	0x40020010
 8009e64:	40020028 	.word	0x40020028
 8009e68:	40020040 	.word	0x40020040
 8009e6c:	40020058 	.word	0x40020058
 8009e70:	40020070 	.word	0x40020070
 8009e74:	40020088 	.word	0x40020088
 8009e78:	400200a0 	.word	0x400200a0
 8009e7c:	400200b8 	.word	0x400200b8
 8009e80:	40020410 	.word	0x40020410
 8009e84:	40020428 	.word	0x40020428
 8009e88:	40020440 	.word	0x40020440
 8009e8c:	40020458 	.word	0x40020458
 8009e90:	40020470 	.word	0x40020470
 8009e94:	40020488 	.word	0x40020488
 8009e98:	400204a0 	.word	0x400204a0
 8009e9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f023 020e 	bic.w	r2, r3, #14
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 020a 	orr.w	r2, r2, #10
 8009eb2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0204 	orr.w	r2, r2, #4
 8009eca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a83      	ldr	r2, [pc, #524]	; (800a0e0 <HAL_DMA_Start_IT+0x474>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d072      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a82      	ldr	r2, [pc, #520]	; (800a0e4 <HAL_DMA_Start_IT+0x478>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d06d      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a80      	ldr	r2, [pc, #512]	; (800a0e8 <HAL_DMA_Start_IT+0x47c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d068      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a7f      	ldr	r2, [pc, #508]	; (800a0ec <HAL_DMA_Start_IT+0x480>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d063      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a7d      	ldr	r2, [pc, #500]	; (800a0f0 <HAL_DMA_Start_IT+0x484>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d05e      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a7c      	ldr	r2, [pc, #496]	; (800a0f4 <HAL_DMA_Start_IT+0x488>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d059      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a7a      	ldr	r2, [pc, #488]	; (800a0f8 <HAL_DMA_Start_IT+0x48c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d054      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a79      	ldr	r2, [pc, #484]	; (800a0fc <HAL_DMA_Start_IT+0x490>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d04f      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a77      	ldr	r2, [pc, #476]	; (800a100 <HAL_DMA_Start_IT+0x494>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d04a      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a76      	ldr	r2, [pc, #472]	; (800a104 <HAL_DMA_Start_IT+0x498>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d045      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a74      	ldr	r2, [pc, #464]	; (800a108 <HAL_DMA_Start_IT+0x49c>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d040      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a73      	ldr	r2, [pc, #460]	; (800a10c <HAL_DMA_Start_IT+0x4a0>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d03b      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a71      	ldr	r2, [pc, #452]	; (800a110 <HAL_DMA_Start_IT+0x4a4>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d036      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a70      	ldr	r2, [pc, #448]	; (800a114 <HAL_DMA_Start_IT+0x4a8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d031      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a6e      	ldr	r2, [pc, #440]	; (800a118 <HAL_DMA_Start_IT+0x4ac>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d02c      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a6d      	ldr	r2, [pc, #436]	; (800a11c <HAL_DMA_Start_IT+0x4b0>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d027      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a6b      	ldr	r2, [pc, #428]	; (800a120 <HAL_DMA_Start_IT+0x4b4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d022      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a6a      	ldr	r2, [pc, #424]	; (800a124 <HAL_DMA_Start_IT+0x4b8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d01d      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a68      	ldr	r2, [pc, #416]	; (800a128 <HAL_DMA_Start_IT+0x4bc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d018      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a67      	ldr	r2, [pc, #412]	; (800a12c <HAL_DMA_Start_IT+0x4c0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d013      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a65      	ldr	r2, [pc, #404]	; (800a130 <HAL_DMA_Start_IT+0x4c4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a64      	ldr	r2, [pc, #400]	; (800a134 <HAL_DMA_Start_IT+0x4c8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d009      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a62      	ldr	r2, [pc, #392]	; (800a138 <HAL_DMA_Start_IT+0x4cc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <HAL_DMA_Start_IT+0x350>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a61      	ldr	r2, [pc, #388]	; (800a13c <HAL_DMA_Start_IT+0x4d0>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d101      	bne.n	8009fc0 <HAL_DMA_Start_IT+0x354>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <HAL_DMA_Start_IT+0x356>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d01a      	beq.n	8009ffc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d007      	beq.n	8009fe4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ffa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a37      	ldr	r2, [pc, #220]	; (800a0e0 <HAL_DMA_Start_IT+0x474>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d04a      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a36      	ldr	r2, [pc, #216]	; (800a0e4 <HAL_DMA_Start_IT+0x478>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d045      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a34      	ldr	r2, [pc, #208]	; (800a0e8 <HAL_DMA_Start_IT+0x47c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d040      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a33      	ldr	r2, [pc, #204]	; (800a0ec <HAL_DMA_Start_IT+0x480>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d03b      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a31      	ldr	r2, [pc, #196]	; (800a0f0 <HAL_DMA_Start_IT+0x484>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d036      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a30      	ldr	r2, [pc, #192]	; (800a0f4 <HAL_DMA_Start_IT+0x488>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d031      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a2e      	ldr	r2, [pc, #184]	; (800a0f8 <HAL_DMA_Start_IT+0x48c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d02c      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a2d      	ldr	r2, [pc, #180]	; (800a0fc <HAL_DMA_Start_IT+0x490>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d027      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a2b      	ldr	r2, [pc, #172]	; (800a100 <HAL_DMA_Start_IT+0x494>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d022      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <HAL_DMA_Start_IT+0x498>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d01d      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a28      	ldr	r2, [pc, #160]	; (800a108 <HAL_DMA_Start_IT+0x49c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d018      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a27      	ldr	r2, [pc, #156]	; (800a10c <HAL_DMA_Start_IT+0x4a0>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d013      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a25      	ldr	r2, [pc, #148]	; (800a110 <HAL_DMA_Start_IT+0x4a4>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00e      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a24      	ldr	r2, [pc, #144]	; (800a114 <HAL_DMA_Start_IT+0x4a8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d009      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a22      	ldr	r2, [pc, #136]	; (800a118 <HAL_DMA_Start_IT+0x4ac>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <HAL_DMA_Start_IT+0x430>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a21      	ldr	r2, [pc, #132]	; (800a11c <HAL_DMA_Start_IT+0x4b0>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d108      	bne.n	800a0ae <HAL_DMA_Start_IT+0x442>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0201 	orr.w	r2, r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	e012      	b.n	800a0d4 <HAL_DMA_Start_IT+0x468>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f042 0201 	orr.w	r2, r2, #1
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	e009      	b.n	800a0d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	40020010 	.word	0x40020010
 800a0e4:	40020028 	.word	0x40020028
 800a0e8:	40020040 	.word	0x40020040
 800a0ec:	40020058 	.word	0x40020058
 800a0f0:	40020070 	.word	0x40020070
 800a0f4:	40020088 	.word	0x40020088
 800a0f8:	400200a0 	.word	0x400200a0
 800a0fc:	400200b8 	.word	0x400200b8
 800a100:	40020410 	.word	0x40020410
 800a104:	40020428 	.word	0x40020428
 800a108:	40020440 	.word	0x40020440
 800a10c:	40020458 	.word	0x40020458
 800a110:	40020470 	.word	0x40020470
 800a114:	40020488 	.word	0x40020488
 800a118:	400204a0 	.word	0x400204a0
 800a11c:	400204b8 	.word	0x400204b8
 800a120:	58025408 	.word	0x58025408
 800a124:	5802541c 	.word	0x5802541c
 800a128:	58025430 	.word	0x58025430
 800a12c:	58025444 	.word	0x58025444
 800a130:	58025458 	.word	0x58025458
 800a134:	5802546c 	.word	0x5802546c
 800a138:	58025480 	.word	0x58025480
 800a13c:	58025494 	.word	0x58025494

0800a140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a148:	f7fe fde0 	bl	8008d0c <HAL_GetTick>
 800a14c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e2dc      	b.n	800a712 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d008      	beq.n	800a176 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2280      	movs	r2, #128	; 0x80
 800a168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e2cd      	b.n	800a712 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a76      	ldr	r2, [pc, #472]	; (800a354 <HAL_DMA_Abort+0x214>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d04a      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a74      	ldr	r2, [pc, #464]	; (800a358 <HAL_DMA_Abort+0x218>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d045      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a73      	ldr	r2, [pc, #460]	; (800a35c <HAL_DMA_Abort+0x21c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d040      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a71      	ldr	r2, [pc, #452]	; (800a360 <HAL_DMA_Abort+0x220>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d03b      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a70      	ldr	r2, [pc, #448]	; (800a364 <HAL_DMA_Abort+0x224>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d036      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a6e      	ldr	r2, [pc, #440]	; (800a368 <HAL_DMA_Abort+0x228>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d031      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a6d      	ldr	r2, [pc, #436]	; (800a36c <HAL_DMA_Abort+0x22c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d02c      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a6b      	ldr	r2, [pc, #428]	; (800a370 <HAL_DMA_Abort+0x230>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d027      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a6a      	ldr	r2, [pc, #424]	; (800a374 <HAL_DMA_Abort+0x234>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d022      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a68      	ldr	r2, [pc, #416]	; (800a378 <HAL_DMA_Abort+0x238>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d01d      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a67      	ldr	r2, [pc, #412]	; (800a37c <HAL_DMA_Abort+0x23c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d018      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a65      	ldr	r2, [pc, #404]	; (800a380 <HAL_DMA_Abort+0x240>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a64      	ldr	r2, [pc, #400]	; (800a384 <HAL_DMA_Abort+0x244>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00e      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a62      	ldr	r2, [pc, #392]	; (800a388 <HAL_DMA_Abort+0x248>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d009      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a61      	ldr	r2, [pc, #388]	; (800a38c <HAL_DMA_Abort+0x24c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d004      	beq.n	800a216 <HAL_DMA_Abort+0xd6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a5f      	ldr	r2, [pc, #380]	; (800a390 <HAL_DMA_Abort+0x250>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d101      	bne.n	800a21a <HAL_DMA_Abort+0xda>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <HAL_DMA_Abort+0xdc>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d013      	beq.n	800a248 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 021e 	bic.w	r2, r2, #30
 800a22e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	695a      	ldr	r2, [r3, #20]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a23e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e00a      	b.n	800a25e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 020e 	bic.w	r2, r2, #14
 800a256:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a3c      	ldr	r2, [pc, #240]	; (800a354 <HAL_DMA_Abort+0x214>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d072      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a3a      	ldr	r2, [pc, #232]	; (800a358 <HAL_DMA_Abort+0x218>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d06d      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a39      	ldr	r2, [pc, #228]	; (800a35c <HAL_DMA_Abort+0x21c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d068      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a37      	ldr	r2, [pc, #220]	; (800a360 <HAL_DMA_Abort+0x220>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d063      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a36      	ldr	r2, [pc, #216]	; (800a364 <HAL_DMA_Abort+0x224>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d05e      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a34      	ldr	r2, [pc, #208]	; (800a368 <HAL_DMA_Abort+0x228>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d059      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a33      	ldr	r2, [pc, #204]	; (800a36c <HAL_DMA_Abort+0x22c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d054      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a31      	ldr	r2, [pc, #196]	; (800a370 <HAL_DMA_Abort+0x230>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d04f      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a30      	ldr	r2, [pc, #192]	; (800a374 <HAL_DMA_Abort+0x234>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d04a      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a2e      	ldr	r2, [pc, #184]	; (800a378 <HAL_DMA_Abort+0x238>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d045      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a2d      	ldr	r2, [pc, #180]	; (800a37c <HAL_DMA_Abort+0x23c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d040      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a2b      	ldr	r2, [pc, #172]	; (800a380 <HAL_DMA_Abort+0x240>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d03b      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a2a      	ldr	r2, [pc, #168]	; (800a384 <HAL_DMA_Abort+0x244>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d036      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a28      	ldr	r2, [pc, #160]	; (800a388 <HAL_DMA_Abort+0x248>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d031      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a27      	ldr	r2, [pc, #156]	; (800a38c <HAL_DMA_Abort+0x24c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d02c      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a25      	ldr	r2, [pc, #148]	; (800a390 <HAL_DMA_Abort+0x250>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d027      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a24      	ldr	r2, [pc, #144]	; (800a394 <HAL_DMA_Abort+0x254>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d022      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a22      	ldr	r2, [pc, #136]	; (800a398 <HAL_DMA_Abort+0x258>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01d      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a21      	ldr	r2, [pc, #132]	; (800a39c <HAL_DMA_Abort+0x25c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d018      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <HAL_DMA_Abort+0x260>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d013      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a1e      	ldr	r2, [pc, #120]	; (800a3a4 <HAL_DMA_Abort+0x264>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d00e      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1c      	ldr	r2, [pc, #112]	; (800a3a8 <HAL_DMA_Abort+0x268>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d009      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1b      	ldr	r2, [pc, #108]	; (800a3ac <HAL_DMA_Abort+0x26c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d004      	beq.n	800a34e <HAL_DMA_Abort+0x20e>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a19      	ldr	r2, [pc, #100]	; (800a3b0 <HAL_DMA_Abort+0x270>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d132      	bne.n	800a3b4 <HAL_DMA_Abort+0x274>
 800a34e:	2301      	movs	r3, #1
 800a350:	e031      	b.n	800a3b6 <HAL_DMA_Abort+0x276>
 800a352:	bf00      	nop
 800a354:	40020010 	.word	0x40020010
 800a358:	40020028 	.word	0x40020028
 800a35c:	40020040 	.word	0x40020040
 800a360:	40020058 	.word	0x40020058
 800a364:	40020070 	.word	0x40020070
 800a368:	40020088 	.word	0x40020088
 800a36c:	400200a0 	.word	0x400200a0
 800a370:	400200b8 	.word	0x400200b8
 800a374:	40020410 	.word	0x40020410
 800a378:	40020428 	.word	0x40020428
 800a37c:	40020440 	.word	0x40020440
 800a380:	40020458 	.word	0x40020458
 800a384:	40020470 	.word	0x40020470
 800a388:	40020488 	.word	0x40020488
 800a38c:	400204a0 	.word	0x400204a0
 800a390:	400204b8 	.word	0x400204b8
 800a394:	58025408 	.word	0x58025408
 800a398:	5802541c 	.word	0x5802541c
 800a39c:	58025430 	.word	0x58025430
 800a3a0:	58025444 	.word	0x58025444
 800a3a4:	58025458 	.word	0x58025458
 800a3a8:	5802546c 	.word	0x5802546c
 800a3ac:	58025480 	.word	0x58025480
 800a3b0:	58025494 	.word	0x58025494
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d007      	beq.n	800a3ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a6d      	ldr	r2, [pc, #436]	; (800a584 <HAL_DMA_Abort+0x444>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d04a      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a6b      	ldr	r2, [pc, #428]	; (800a588 <HAL_DMA_Abort+0x448>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d045      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a6a      	ldr	r2, [pc, #424]	; (800a58c <HAL_DMA_Abort+0x44c>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d040      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a68      	ldr	r2, [pc, #416]	; (800a590 <HAL_DMA_Abort+0x450>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d03b      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a67      	ldr	r2, [pc, #412]	; (800a594 <HAL_DMA_Abort+0x454>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d036      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a65      	ldr	r2, [pc, #404]	; (800a598 <HAL_DMA_Abort+0x458>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d031      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a64      	ldr	r2, [pc, #400]	; (800a59c <HAL_DMA_Abort+0x45c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d02c      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a62      	ldr	r2, [pc, #392]	; (800a5a0 <HAL_DMA_Abort+0x460>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d027      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a61      	ldr	r2, [pc, #388]	; (800a5a4 <HAL_DMA_Abort+0x464>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d022      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a5f      	ldr	r2, [pc, #380]	; (800a5a8 <HAL_DMA_Abort+0x468>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d01d      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a5e      	ldr	r2, [pc, #376]	; (800a5ac <HAL_DMA_Abort+0x46c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d018      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a5c      	ldr	r2, [pc, #368]	; (800a5b0 <HAL_DMA_Abort+0x470>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d013      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a5b      	ldr	r2, [pc, #364]	; (800a5b4 <HAL_DMA_Abort+0x474>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00e      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a59      	ldr	r2, [pc, #356]	; (800a5b8 <HAL_DMA_Abort+0x478>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d009      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a58      	ldr	r2, [pc, #352]	; (800a5bc <HAL_DMA_Abort+0x47c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d004      	beq.n	800a46a <HAL_DMA_Abort+0x32a>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a56      	ldr	r2, [pc, #344]	; (800a5c0 <HAL_DMA_Abort+0x480>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d108      	bne.n	800a47c <HAL_DMA_Abort+0x33c>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f022 0201 	bic.w	r2, r2, #1
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	e007      	b.n	800a48c <HAL_DMA_Abort+0x34c>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f022 0201 	bic.w	r2, r2, #1
 800a48a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a48c:	e013      	b.n	800a4b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a48e:	f7fe fc3d 	bl	8008d0c <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b05      	cmp	r3, #5
 800a49a:	d90c      	bls.n	800a4b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e12d      	b.n	800a712 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a2f      	ldr	r2, [pc, #188]	; (800a584 <HAL_DMA_Abort+0x444>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d04a      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a2d      	ldr	r2, [pc, #180]	; (800a588 <HAL_DMA_Abort+0x448>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d045      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a2c      	ldr	r2, [pc, #176]	; (800a58c <HAL_DMA_Abort+0x44c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d040      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a2a      	ldr	r2, [pc, #168]	; (800a590 <HAL_DMA_Abort+0x450>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d03b      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a29      	ldr	r2, [pc, #164]	; (800a594 <HAL_DMA_Abort+0x454>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d036      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a27      	ldr	r2, [pc, #156]	; (800a598 <HAL_DMA_Abort+0x458>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d031      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a26      	ldr	r2, [pc, #152]	; (800a59c <HAL_DMA_Abort+0x45c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d02c      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a24      	ldr	r2, [pc, #144]	; (800a5a0 <HAL_DMA_Abort+0x460>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d027      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <HAL_DMA_Abort+0x464>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d022      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a21      	ldr	r2, [pc, #132]	; (800a5a8 <HAL_DMA_Abort+0x468>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d01d      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a20      	ldr	r2, [pc, #128]	; (800a5ac <HAL_DMA_Abort+0x46c>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d018      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1e      	ldr	r2, [pc, #120]	; (800a5b0 <HAL_DMA_Abort+0x470>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <HAL_DMA_Abort+0x474>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00e      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1b      	ldr	r2, [pc, #108]	; (800a5b8 <HAL_DMA_Abort+0x478>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d009      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a1a      	ldr	r2, [pc, #104]	; (800a5bc <HAL_DMA_Abort+0x47c>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d004      	beq.n	800a562 <HAL_DMA_Abort+0x422>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a18      	ldr	r2, [pc, #96]	; (800a5c0 <HAL_DMA_Abort+0x480>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d101      	bne.n	800a566 <HAL_DMA_Abort+0x426>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <HAL_DMA_Abort+0x428>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d02b      	beq.n	800a5c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a570:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	f003 031f 	and.w	r3, r3, #31
 800a57a:	223f      	movs	r2, #63	; 0x3f
 800a57c:	409a      	lsls	r2, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	609a      	str	r2, [r3, #8]
 800a582:	e02a      	b.n	800a5da <HAL_DMA_Abort+0x49a>
 800a584:	40020010 	.word	0x40020010
 800a588:	40020028 	.word	0x40020028
 800a58c:	40020040 	.word	0x40020040
 800a590:	40020058 	.word	0x40020058
 800a594:	40020070 	.word	0x40020070
 800a598:	40020088 	.word	0x40020088
 800a59c:	400200a0 	.word	0x400200a0
 800a5a0:	400200b8 	.word	0x400200b8
 800a5a4:	40020410 	.word	0x40020410
 800a5a8:	40020428 	.word	0x40020428
 800a5ac:	40020440 	.word	0x40020440
 800a5b0:	40020458 	.word	0x40020458
 800a5b4:	40020470 	.word	0x40020470
 800a5b8:	40020488 	.word	0x40020488
 800a5bc:	400204a0 	.word	0x400204a0
 800a5c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a4f      	ldr	r2, [pc, #316]	; (800a71c <HAL_DMA_Abort+0x5dc>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d072      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a4d      	ldr	r2, [pc, #308]	; (800a720 <HAL_DMA_Abort+0x5e0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d06d      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a4c      	ldr	r2, [pc, #304]	; (800a724 <HAL_DMA_Abort+0x5e4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d068      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a4a      	ldr	r2, [pc, #296]	; (800a728 <HAL_DMA_Abort+0x5e8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d063      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a49      	ldr	r2, [pc, #292]	; (800a72c <HAL_DMA_Abort+0x5ec>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d05e      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a47      	ldr	r2, [pc, #284]	; (800a730 <HAL_DMA_Abort+0x5f0>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d059      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a46      	ldr	r2, [pc, #280]	; (800a734 <HAL_DMA_Abort+0x5f4>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d054      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a44      	ldr	r2, [pc, #272]	; (800a738 <HAL_DMA_Abort+0x5f8>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d04f      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a43      	ldr	r2, [pc, #268]	; (800a73c <HAL_DMA_Abort+0x5fc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d04a      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a41      	ldr	r2, [pc, #260]	; (800a740 <HAL_DMA_Abort+0x600>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d045      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a40      	ldr	r2, [pc, #256]	; (800a744 <HAL_DMA_Abort+0x604>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d040      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a3e      	ldr	r2, [pc, #248]	; (800a748 <HAL_DMA_Abort+0x608>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d03b      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a3d      	ldr	r2, [pc, #244]	; (800a74c <HAL_DMA_Abort+0x60c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d036      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a3b      	ldr	r2, [pc, #236]	; (800a750 <HAL_DMA_Abort+0x610>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d031      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3a      	ldr	r2, [pc, #232]	; (800a754 <HAL_DMA_Abort+0x614>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d02c      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a38      	ldr	r2, [pc, #224]	; (800a758 <HAL_DMA_Abort+0x618>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d027      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a37      	ldr	r2, [pc, #220]	; (800a75c <HAL_DMA_Abort+0x61c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d022      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a35      	ldr	r2, [pc, #212]	; (800a760 <HAL_DMA_Abort+0x620>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d01d      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a34      	ldr	r2, [pc, #208]	; (800a764 <HAL_DMA_Abort+0x624>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d018      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a32      	ldr	r2, [pc, #200]	; (800a768 <HAL_DMA_Abort+0x628>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d013      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a31      	ldr	r2, [pc, #196]	; (800a76c <HAL_DMA_Abort+0x62c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00e      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a2f      	ldr	r2, [pc, #188]	; (800a770 <HAL_DMA_Abort+0x630>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d009      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a2e      	ldr	r2, [pc, #184]	; (800a774 <HAL_DMA_Abort+0x634>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d004      	beq.n	800a6ca <HAL_DMA_Abort+0x58a>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a2c      	ldr	r2, [pc, #176]	; (800a778 <HAL_DMA_Abort+0x638>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d101      	bne.n	800a6ce <HAL_DMA_Abort+0x58e>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <HAL_DMA_Abort+0x590>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d015      	beq.n	800a700 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a6dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00c      	beq.n	800a700 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a6fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40020010 	.word	0x40020010
 800a720:	40020028 	.word	0x40020028
 800a724:	40020040 	.word	0x40020040
 800a728:	40020058 	.word	0x40020058
 800a72c:	40020070 	.word	0x40020070
 800a730:	40020088 	.word	0x40020088
 800a734:	400200a0 	.word	0x400200a0
 800a738:	400200b8 	.word	0x400200b8
 800a73c:	40020410 	.word	0x40020410
 800a740:	40020428 	.word	0x40020428
 800a744:	40020440 	.word	0x40020440
 800a748:	40020458 	.word	0x40020458
 800a74c:	40020470 	.word	0x40020470
 800a750:	40020488 	.word	0x40020488
 800a754:	400204a0 	.word	0x400204a0
 800a758:	400204b8 	.word	0x400204b8
 800a75c:	58025408 	.word	0x58025408
 800a760:	5802541c 	.word	0x5802541c
 800a764:	58025430 	.word	0x58025430
 800a768:	58025444 	.word	0x58025444
 800a76c:	58025458 	.word	0x58025458
 800a770:	5802546c 	.word	0x5802546c
 800a774:	58025480 	.word	0x58025480
 800a778:	58025494 	.word	0x58025494

0800a77c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e237      	b.n	800abfe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d004      	beq.n	800a7a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2280      	movs	r2, #128	; 0x80
 800a79e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e22c      	b.n	800abfe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a5c      	ldr	r2, [pc, #368]	; (800a91c <HAL_DMA_Abort_IT+0x1a0>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d04a      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a5b      	ldr	r2, [pc, #364]	; (800a920 <HAL_DMA_Abort_IT+0x1a4>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d045      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a59      	ldr	r2, [pc, #356]	; (800a924 <HAL_DMA_Abort_IT+0x1a8>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d040      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a58      	ldr	r2, [pc, #352]	; (800a928 <HAL_DMA_Abort_IT+0x1ac>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d03b      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a56      	ldr	r2, [pc, #344]	; (800a92c <HAL_DMA_Abort_IT+0x1b0>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d036      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a55      	ldr	r2, [pc, #340]	; (800a930 <HAL_DMA_Abort_IT+0x1b4>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d031      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a53      	ldr	r2, [pc, #332]	; (800a934 <HAL_DMA_Abort_IT+0x1b8>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d02c      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a52      	ldr	r2, [pc, #328]	; (800a938 <HAL_DMA_Abort_IT+0x1bc>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d027      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a50      	ldr	r2, [pc, #320]	; (800a93c <HAL_DMA_Abort_IT+0x1c0>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d022      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a4f      	ldr	r2, [pc, #316]	; (800a940 <HAL_DMA_Abort_IT+0x1c4>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d01d      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a4d      	ldr	r2, [pc, #308]	; (800a944 <HAL_DMA_Abort_IT+0x1c8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d018      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a4c      	ldr	r2, [pc, #304]	; (800a948 <HAL_DMA_Abort_IT+0x1cc>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d013      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a4a      	ldr	r2, [pc, #296]	; (800a94c <HAL_DMA_Abort_IT+0x1d0>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d00e      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a49      	ldr	r2, [pc, #292]	; (800a950 <HAL_DMA_Abort_IT+0x1d4>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d009      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a47      	ldr	r2, [pc, #284]	; (800a954 <HAL_DMA_Abort_IT+0x1d8>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d004      	beq.n	800a844 <HAL_DMA_Abort_IT+0xc8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a46      	ldr	r2, [pc, #280]	; (800a958 <HAL_DMA_Abort_IT+0x1dc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d101      	bne.n	800a848 <HAL_DMA_Abort_IT+0xcc>
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <HAL_DMA_Abort_IT+0xce>
 800a848:	2300      	movs	r3, #0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 8086 	beq.w	800a95c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2204      	movs	r2, #4
 800a854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a2f      	ldr	r2, [pc, #188]	; (800a91c <HAL_DMA_Abort_IT+0x1a0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d04a      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a2e      	ldr	r2, [pc, #184]	; (800a920 <HAL_DMA_Abort_IT+0x1a4>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d045      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a2c      	ldr	r2, [pc, #176]	; (800a924 <HAL_DMA_Abort_IT+0x1a8>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d040      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a2b      	ldr	r2, [pc, #172]	; (800a928 <HAL_DMA_Abort_IT+0x1ac>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d03b      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a29      	ldr	r2, [pc, #164]	; (800a92c <HAL_DMA_Abort_IT+0x1b0>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d036      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a28      	ldr	r2, [pc, #160]	; (800a930 <HAL_DMA_Abort_IT+0x1b4>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d031      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a26      	ldr	r2, [pc, #152]	; (800a934 <HAL_DMA_Abort_IT+0x1b8>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d02c      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a25      	ldr	r2, [pc, #148]	; (800a938 <HAL_DMA_Abort_IT+0x1bc>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d027      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a23      	ldr	r2, [pc, #140]	; (800a93c <HAL_DMA_Abort_IT+0x1c0>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a22      	ldr	r2, [pc, #136]	; (800a940 <HAL_DMA_Abort_IT+0x1c4>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a20      	ldr	r2, [pc, #128]	; (800a944 <HAL_DMA_Abort_IT+0x1c8>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1f      	ldr	r2, [pc, #124]	; (800a948 <HAL_DMA_Abort_IT+0x1cc>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1d      	ldr	r2, [pc, #116]	; (800a94c <HAL_DMA_Abort_IT+0x1d0>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a1c      	ldr	r2, [pc, #112]	; (800a950 <HAL_DMA_Abort_IT+0x1d4>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <HAL_DMA_Abort_IT+0x1d8>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_DMA_Abort_IT+0x17c>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a19      	ldr	r2, [pc, #100]	; (800a958 <HAL_DMA_Abort_IT+0x1dc>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d108      	bne.n	800a90a <HAL_DMA_Abort_IT+0x18e>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e178      	b.n	800abfc <HAL_DMA_Abort_IT+0x480>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e16f      	b.n	800abfc <HAL_DMA_Abort_IT+0x480>
 800a91c:	40020010 	.word	0x40020010
 800a920:	40020028 	.word	0x40020028
 800a924:	40020040 	.word	0x40020040
 800a928:	40020058 	.word	0x40020058
 800a92c:	40020070 	.word	0x40020070
 800a930:	40020088 	.word	0x40020088
 800a934:	400200a0 	.word	0x400200a0
 800a938:	400200b8 	.word	0x400200b8
 800a93c:	40020410 	.word	0x40020410
 800a940:	40020428 	.word	0x40020428
 800a944:	40020440 	.word	0x40020440
 800a948:	40020458 	.word	0x40020458
 800a94c:	40020470 	.word	0x40020470
 800a950:	40020488 	.word	0x40020488
 800a954:	400204a0 	.word	0x400204a0
 800a958:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 020e 	bic.w	r2, r2, #14
 800a96a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a6c      	ldr	r2, [pc, #432]	; (800ab24 <HAL_DMA_Abort_IT+0x3a8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d04a      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a6b      	ldr	r2, [pc, #428]	; (800ab28 <HAL_DMA_Abort_IT+0x3ac>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d045      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a69      	ldr	r2, [pc, #420]	; (800ab2c <HAL_DMA_Abort_IT+0x3b0>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d040      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a68      	ldr	r2, [pc, #416]	; (800ab30 <HAL_DMA_Abort_IT+0x3b4>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d03b      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a66      	ldr	r2, [pc, #408]	; (800ab34 <HAL_DMA_Abort_IT+0x3b8>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d036      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a65      	ldr	r2, [pc, #404]	; (800ab38 <HAL_DMA_Abort_IT+0x3bc>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d031      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a63      	ldr	r2, [pc, #396]	; (800ab3c <HAL_DMA_Abort_IT+0x3c0>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d02c      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a62      	ldr	r2, [pc, #392]	; (800ab40 <HAL_DMA_Abort_IT+0x3c4>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d027      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a60      	ldr	r2, [pc, #384]	; (800ab44 <HAL_DMA_Abort_IT+0x3c8>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d022      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a5f      	ldr	r2, [pc, #380]	; (800ab48 <HAL_DMA_Abort_IT+0x3cc>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d01d      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a5d      	ldr	r2, [pc, #372]	; (800ab4c <HAL_DMA_Abort_IT+0x3d0>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d018      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a5c      	ldr	r2, [pc, #368]	; (800ab50 <HAL_DMA_Abort_IT+0x3d4>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d013      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a5a      	ldr	r2, [pc, #360]	; (800ab54 <HAL_DMA_Abort_IT+0x3d8>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00e      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a59      	ldr	r2, [pc, #356]	; (800ab58 <HAL_DMA_Abort_IT+0x3dc>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d009      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a57      	ldr	r2, [pc, #348]	; (800ab5c <HAL_DMA_Abort_IT+0x3e0>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_DMA_Abort_IT+0x290>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a56      	ldr	r2, [pc, #344]	; (800ab60 <HAL_DMA_Abort_IT+0x3e4>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d108      	bne.n	800aa1e <HAL_DMA_Abort_IT+0x2a2>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	e007      	b.n	800aa2e <HAL_DMA_Abort_IT+0x2b2>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0201 	bic.w	r2, r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a3c      	ldr	r2, [pc, #240]	; (800ab24 <HAL_DMA_Abort_IT+0x3a8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d072      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a3a      	ldr	r2, [pc, #232]	; (800ab28 <HAL_DMA_Abort_IT+0x3ac>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d06d      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a39      	ldr	r2, [pc, #228]	; (800ab2c <HAL_DMA_Abort_IT+0x3b0>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d068      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a37      	ldr	r2, [pc, #220]	; (800ab30 <HAL_DMA_Abort_IT+0x3b4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d063      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a36      	ldr	r2, [pc, #216]	; (800ab34 <HAL_DMA_Abort_IT+0x3b8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d05e      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a34      	ldr	r2, [pc, #208]	; (800ab38 <HAL_DMA_Abort_IT+0x3bc>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d059      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a33      	ldr	r2, [pc, #204]	; (800ab3c <HAL_DMA_Abort_IT+0x3c0>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d054      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a31      	ldr	r2, [pc, #196]	; (800ab40 <HAL_DMA_Abort_IT+0x3c4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d04f      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a30      	ldr	r2, [pc, #192]	; (800ab44 <HAL_DMA_Abort_IT+0x3c8>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d04a      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a2e      	ldr	r2, [pc, #184]	; (800ab48 <HAL_DMA_Abort_IT+0x3cc>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d045      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a2d      	ldr	r2, [pc, #180]	; (800ab4c <HAL_DMA_Abort_IT+0x3d0>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d040      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a2b      	ldr	r2, [pc, #172]	; (800ab50 <HAL_DMA_Abort_IT+0x3d4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d03b      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	; (800ab54 <HAL_DMA_Abort_IT+0x3d8>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d036      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a28      	ldr	r2, [pc, #160]	; (800ab58 <HAL_DMA_Abort_IT+0x3dc>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d031      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a27      	ldr	r2, [pc, #156]	; (800ab5c <HAL_DMA_Abort_IT+0x3e0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d02c      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a25      	ldr	r2, [pc, #148]	; (800ab60 <HAL_DMA_Abort_IT+0x3e4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d027      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a24      	ldr	r2, [pc, #144]	; (800ab64 <HAL_DMA_Abort_IT+0x3e8>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d022      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a22      	ldr	r2, [pc, #136]	; (800ab68 <HAL_DMA_Abort_IT+0x3ec>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01d      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a21      	ldr	r2, [pc, #132]	; (800ab6c <HAL_DMA_Abort_IT+0x3f0>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d018      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1f      	ldr	r2, [pc, #124]	; (800ab70 <HAL_DMA_Abort_IT+0x3f4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d013      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <HAL_DMA_Abort_IT+0x3f8>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00e      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1c      	ldr	r2, [pc, #112]	; (800ab78 <HAL_DMA_Abort_IT+0x3fc>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d009      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1b      	ldr	r2, [pc, #108]	; (800ab7c <HAL_DMA_Abort_IT+0x400>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d004      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x3a2>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a19      	ldr	r2, [pc, #100]	; (800ab80 <HAL_DMA_Abort_IT+0x404>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d132      	bne.n	800ab84 <HAL_DMA_Abort_IT+0x408>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e031      	b.n	800ab86 <HAL_DMA_Abort_IT+0x40a>
 800ab22:	bf00      	nop
 800ab24:	40020010 	.word	0x40020010
 800ab28:	40020028 	.word	0x40020028
 800ab2c:	40020040 	.word	0x40020040
 800ab30:	40020058 	.word	0x40020058
 800ab34:	40020070 	.word	0x40020070
 800ab38:	40020088 	.word	0x40020088
 800ab3c:	400200a0 	.word	0x400200a0
 800ab40:	400200b8 	.word	0x400200b8
 800ab44:	40020410 	.word	0x40020410
 800ab48:	40020428 	.word	0x40020428
 800ab4c:	40020440 	.word	0x40020440
 800ab50:	40020458 	.word	0x40020458
 800ab54:	40020470 	.word	0x40020470
 800ab58:	40020488 	.word	0x40020488
 800ab5c:	400204a0 	.word	0x400204a0
 800ab60:	400204b8 	.word	0x400204b8
 800ab64:	58025408 	.word	0x58025408
 800ab68:	5802541c 	.word	0x5802541c
 800ab6c:	58025430 	.word	0x58025430
 800ab70:	58025444 	.word	0x58025444
 800ab74:	58025458 	.word	0x58025458
 800ab78:	5802546c 	.word	0x5802546c
 800ab7c:	58025480 	.word	0x58025480
 800ab80:	58025494 	.word	0x58025494
 800ab84:	2300      	movs	r3, #0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d028      	beq.n	800abdc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	2201      	movs	r2, #1
 800abaa:	409a      	lsls	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800abb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00c      	beq.n	800abdc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800abda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop

0800ac08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac14:	4b67      	ldr	r3, [pc, #412]	; (800adb4 <HAL_DMA_IRQHandler+0x1ac>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a67      	ldr	r2, [pc, #412]	; (800adb8 <HAL_DMA_IRQHandler+0x1b0>)
 800ac1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac1e:	0a9b      	lsrs	r3, r3, #10
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a5f      	ldr	r2, [pc, #380]	; (800adbc <HAL_DMA_IRQHandler+0x1b4>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d04a      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a5d      	ldr	r2, [pc, #372]	; (800adc0 <HAL_DMA_IRQHandler+0x1b8>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d045      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a5c      	ldr	r2, [pc, #368]	; (800adc4 <HAL_DMA_IRQHandler+0x1bc>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d040      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a5a      	ldr	r2, [pc, #360]	; (800adc8 <HAL_DMA_IRQHandler+0x1c0>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d03b      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a59      	ldr	r2, [pc, #356]	; (800adcc <HAL_DMA_IRQHandler+0x1c4>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d036      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a57      	ldr	r2, [pc, #348]	; (800add0 <HAL_DMA_IRQHandler+0x1c8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d031      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a56      	ldr	r2, [pc, #344]	; (800add4 <HAL_DMA_IRQHandler+0x1cc>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d02c      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a54      	ldr	r2, [pc, #336]	; (800add8 <HAL_DMA_IRQHandler+0x1d0>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d027      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a53      	ldr	r2, [pc, #332]	; (800addc <HAL_DMA_IRQHandler+0x1d4>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d022      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a51      	ldr	r2, [pc, #324]	; (800ade0 <HAL_DMA_IRQHandler+0x1d8>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d01d      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a50      	ldr	r2, [pc, #320]	; (800ade4 <HAL_DMA_IRQHandler+0x1dc>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d018      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a4e      	ldr	r2, [pc, #312]	; (800ade8 <HAL_DMA_IRQHandler+0x1e0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d013      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a4d      	ldr	r2, [pc, #308]	; (800adec <HAL_DMA_IRQHandler+0x1e4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d00e      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a4b      	ldr	r2, [pc, #300]	; (800adf0 <HAL_DMA_IRQHandler+0x1e8>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d009      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a4a      	ldr	r2, [pc, #296]	; (800adf4 <HAL_DMA_IRQHandler+0x1ec>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d004      	beq.n	800acda <HAL_DMA_IRQHandler+0xd2>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a48      	ldr	r2, [pc, #288]	; (800adf8 <HAL_DMA_IRQHandler+0x1f0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d101      	bne.n	800acde <HAL_DMA_IRQHandler+0xd6>
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <HAL_DMA_IRQHandler+0xd8>
 800acde:	2300      	movs	r3, #0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 842b 	beq.w	800b53c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2208      	movs	r2, #8
 800acf0:	409a      	lsls	r2, r3
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80a2 	beq.w	800ae40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a2e      	ldr	r2, [pc, #184]	; (800adbc <HAL_DMA_IRQHandler+0x1b4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d04a      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a2d      	ldr	r2, [pc, #180]	; (800adc0 <HAL_DMA_IRQHandler+0x1b8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d045      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a2b      	ldr	r2, [pc, #172]	; (800adc4 <HAL_DMA_IRQHandler+0x1bc>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d040      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a2a      	ldr	r2, [pc, #168]	; (800adc8 <HAL_DMA_IRQHandler+0x1c0>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d03b      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a28      	ldr	r2, [pc, #160]	; (800adcc <HAL_DMA_IRQHandler+0x1c4>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d036      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a27      	ldr	r2, [pc, #156]	; (800add0 <HAL_DMA_IRQHandler+0x1c8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d031      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a25      	ldr	r2, [pc, #148]	; (800add4 <HAL_DMA_IRQHandler+0x1cc>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d02c      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a24      	ldr	r2, [pc, #144]	; (800add8 <HAL_DMA_IRQHandler+0x1d0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d027      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a22      	ldr	r2, [pc, #136]	; (800addc <HAL_DMA_IRQHandler+0x1d4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d022      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a21      	ldr	r2, [pc, #132]	; (800ade0 <HAL_DMA_IRQHandler+0x1d8>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01d      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a1f      	ldr	r2, [pc, #124]	; (800ade4 <HAL_DMA_IRQHandler+0x1dc>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d018      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <HAL_DMA_IRQHandler+0x1e0>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d013      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1c      	ldr	r2, [pc, #112]	; (800adec <HAL_DMA_IRQHandler+0x1e4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00e      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1b      	ldr	r2, [pc, #108]	; (800adf0 <HAL_DMA_IRQHandler+0x1e8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d009      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a19      	ldr	r2, [pc, #100]	; (800adf4 <HAL_DMA_IRQHandler+0x1ec>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d004      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x194>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a18      	ldr	r2, [pc, #96]	; (800adf8 <HAL_DMA_IRQHandler+0x1f0>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d12f      	bne.n	800adfc <HAL_DMA_IRQHandler+0x1f4>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bf14      	ite	ne
 800adaa:	2301      	movne	r3, #1
 800adac:	2300      	moveq	r3, #0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	e02e      	b.n	800ae10 <HAL_DMA_IRQHandler+0x208>
 800adb2:	bf00      	nop
 800adb4:	24000030 	.word	0x24000030
 800adb8:	1b4e81b5 	.word	0x1b4e81b5
 800adbc:	40020010 	.word	0x40020010
 800adc0:	40020028 	.word	0x40020028
 800adc4:	40020040 	.word	0x40020040
 800adc8:	40020058 	.word	0x40020058
 800adcc:	40020070 	.word	0x40020070
 800add0:	40020088 	.word	0x40020088
 800add4:	400200a0 	.word	0x400200a0
 800add8:	400200b8 	.word	0x400200b8
 800addc:	40020410 	.word	0x40020410
 800ade0:	40020428 	.word	0x40020428
 800ade4:	40020440 	.word	0x40020440
 800ade8:	40020458 	.word	0x40020458
 800adec:	40020470 	.word	0x40020470
 800adf0:	40020488 	.word	0x40020488
 800adf4:	400204a0 	.word	0x400204a0
 800adf8:	400204b8 	.word	0x400204b8
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bf14      	ite	ne
 800ae0a:	2301      	movne	r3, #1
 800ae0c:	2300      	moveq	r3, #0
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d015      	beq.n	800ae40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0204 	bic.w	r2, r2, #4
 800ae22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae28:	f003 031f 	and.w	r3, r3, #31
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	409a      	lsls	r2, r3
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae38:	f043 0201 	orr.w	r2, r3, #1
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae44:	f003 031f 	and.w	r3, r3, #31
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d06e      	beq.n	800af34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a69      	ldr	r2, [pc, #420]	; (800b000 <HAL_DMA_IRQHandler+0x3f8>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d04a      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a67      	ldr	r2, [pc, #412]	; (800b004 <HAL_DMA_IRQHandler+0x3fc>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d045      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a66      	ldr	r2, [pc, #408]	; (800b008 <HAL_DMA_IRQHandler+0x400>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d040      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a64      	ldr	r2, [pc, #400]	; (800b00c <HAL_DMA_IRQHandler+0x404>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d03b      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a63      	ldr	r2, [pc, #396]	; (800b010 <HAL_DMA_IRQHandler+0x408>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d036      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a61      	ldr	r2, [pc, #388]	; (800b014 <HAL_DMA_IRQHandler+0x40c>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d031      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a60      	ldr	r2, [pc, #384]	; (800b018 <HAL_DMA_IRQHandler+0x410>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d02c      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a5e      	ldr	r2, [pc, #376]	; (800b01c <HAL_DMA_IRQHandler+0x414>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d027      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a5d      	ldr	r2, [pc, #372]	; (800b020 <HAL_DMA_IRQHandler+0x418>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d022      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a5b      	ldr	r2, [pc, #364]	; (800b024 <HAL_DMA_IRQHandler+0x41c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d01d      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a5a      	ldr	r2, [pc, #360]	; (800b028 <HAL_DMA_IRQHandler+0x420>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d018      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a58      	ldr	r2, [pc, #352]	; (800b02c <HAL_DMA_IRQHandler+0x424>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d013      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a57      	ldr	r2, [pc, #348]	; (800b030 <HAL_DMA_IRQHandler+0x428>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d00e      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a55      	ldr	r2, [pc, #340]	; (800b034 <HAL_DMA_IRQHandler+0x42c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d009      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a54      	ldr	r2, [pc, #336]	; (800b038 <HAL_DMA_IRQHandler+0x430>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d004      	beq.n	800aef6 <HAL_DMA_IRQHandler+0x2ee>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a52      	ldr	r2, [pc, #328]	; (800b03c <HAL_DMA_IRQHandler+0x434>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d10a      	bne.n	800af0c <HAL_DMA_IRQHandler+0x304>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af00:	2b00      	cmp	r3, #0
 800af02:	bf14      	ite	ne
 800af04:	2301      	movne	r3, #1
 800af06:	2300      	moveq	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e003      	b.n	800af14 <HAL_DMA_IRQHandler+0x30c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2300      	movs	r3, #0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00d      	beq.n	800af34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1c:	f003 031f 	and.w	r3, r3, #31
 800af20:	2201      	movs	r2, #1
 800af22:	409a      	lsls	r2, r3
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2c:	f043 0202 	orr.w	r2, r3, #2
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af38:	f003 031f 	and.w	r3, r3, #31
 800af3c:	2204      	movs	r2, #4
 800af3e:	409a      	lsls	r2, r3
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	4013      	ands	r3, r2
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 808f 	beq.w	800b068 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a2c      	ldr	r2, [pc, #176]	; (800b000 <HAL_DMA_IRQHandler+0x3f8>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d04a      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a2a      	ldr	r2, [pc, #168]	; (800b004 <HAL_DMA_IRQHandler+0x3fc>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d045      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a29      	ldr	r2, [pc, #164]	; (800b008 <HAL_DMA_IRQHandler+0x400>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d040      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a27      	ldr	r2, [pc, #156]	; (800b00c <HAL_DMA_IRQHandler+0x404>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d03b      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a26      	ldr	r2, [pc, #152]	; (800b010 <HAL_DMA_IRQHandler+0x408>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d036      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a24      	ldr	r2, [pc, #144]	; (800b014 <HAL_DMA_IRQHandler+0x40c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d031      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a23      	ldr	r2, [pc, #140]	; (800b018 <HAL_DMA_IRQHandler+0x410>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d02c      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a21      	ldr	r2, [pc, #132]	; (800b01c <HAL_DMA_IRQHandler+0x414>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d027      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a20      	ldr	r2, [pc, #128]	; (800b020 <HAL_DMA_IRQHandler+0x418>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d022      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a1e      	ldr	r2, [pc, #120]	; (800b024 <HAL_DMA_IRQHandler+0x41c>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d01d      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a1d      	ldr	r2, [pc, #116]	; (800b028 <HAL_DMA_IRQHandler+0x420>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d018      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a1b      	ldr	r2, [pc, #108]	; (800b02c <HAL_DMA_IRQHandler+0x424>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d013      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1a      	ldr	r2, [pc, #104]	; (800b030 <HAL_DMA_IRQHandler+0x428>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00e      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a18      	ldr	r2, [pc, #96]	; (800b034 <HAL_DMA_IRQHandler+0x42c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d009      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a17      	ldr	r2, [pc, #92]	; (800b038 <HAL_DMA_IRQHandler+0x430>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d004      	beq.n	800afea <HAL_DMA_IRQHandler+0x3e2>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a15      	ldr	r2, [pc, #84]	; (800b03c <HAL_DMA_IRQHandler+0x434>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d12a      	bne.n	800b040 <HAL_DMA_IRQHandler+0x438>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0302 	and.w	r3, r3, #2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	bf14      	ite	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	2300      	moveq	r3, #0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	e023      	b.n	800b048 <HAL_DMA_IRQHandler+0x440>
 800b000:	40020010 	.word	0x40020010
 800b004:	40020028 	.word	0x40020028
 800b008:	40020040 	.word	0x40020040
 800b00c:	40020058 	.word	0x40020058
 800b010:	40020070 	.word	0x40020070
 800b014:	40020088 	.word	0x40020088
 800b018:	400200a0 	.word	0x400200a0
 800b01c:	400200b8 	.word	0x400200b8
 800b020:	40020410 	.word	0x40020410
 800b024:	40020428 	.word	0x40020428
 800b028:	40020440 	.word	0x40020440
 800b02c:	40020458 	.word	0x40020458
 800b030:	40020470 	.word	0x40020470
 800b034:	40020488 	.word	0x40020488
 800b038:	400204a0 	.word	0x400204a0
 800b03c:	400204b8 	.word	0x400204b8
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2300      	movs	r3, #0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00d      	beq.n	800b068 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b050:	f003 031f 	and.w	r3, r3, #31
 800b054:	2204      	movs	r2, #4
 800b056:	409a      	lsls	r2, r3
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b060:	f043 0204 	orr.w	r2, r3, #4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06c:	f003 031f 	and.w	r3, r3, #31
 800b070:	2210      	movs	r2, #16
 800b072:	409a      	lsls	r2, r3
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	4013      	ands	r3, r2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 80a6 	beq.w	800b1ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a85      	ldr	r2, [pc, #532]	; (800b298 <HAL_DMA_IRQHandler+0x690>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d04a      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a83      	ldr	r2, [pc, #524]	; (800b29c <HAL_DMA_IRQHandler+0x694>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d045      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a82      	ldr	r2, [pc, #520]	; (800b2a0 <HAL_DMA_IRQHandler+0x698>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d040      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a80      	ldr	r2, [pc, #512]	; (800b2a4 <HAL_DMA_IRQHandler+0x69c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d03b      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a7f      	ldr	r2, [pc, #508]	; (800b2a8 <HAL_DMA_IRQHandler+0x6a0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d036      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a7d      	ldr	r2, [pc, #500]	; (800b2ac <HAL_DMA_IRQHandler+0x6a4>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d031      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a7c      	ldr	r2, [pc, #496]	; (800b2b0 <HAL_DMA_IRQHandler+0x6a8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d02c      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a7a      	ldr	r2, [pc, #488]	; (800b2b4 <HAL_DMA_IRQHandler+0x6ac>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d027      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a79      	ldr	r2, [pc, #484]	; (800b2b8 <HAL_DMA_IRQHandler+0x6b0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d022      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a77      	ldr	r2, [pc, #476]	; (800b2bc <HAL_DMA_IRQHandler+0x6b4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d01d      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a76      	ldr	r2, [pc, #472]	; (800b2c0 <HAL_DMA_IRQHandler+0x6b8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d018      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a74      	ldr	r2, [pc, #464]	; (800b2c4 <HAL_DMA_IRQHandler+0x6bc>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d013      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a73      	ldr	r2, [pc, #460]	; (800b2c8 <HAL_DMA_IRQHandler+0x6c0>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d00e      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a71      	ldr	r2, [pc, #452]	; (800b2cc <HAL_DMA_IRQHandler+0x6c4>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d009      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a70      	ldr	r2, [pc, #448]	; (800b2d0 <HAL_DMA_IRQHandler+0x6c8>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d004      	beq.n	800b11e <HAL_DMA_IRQHandler+0x516>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a6e      	ldr	r2, [pc, #440]	; (800b2d4 <HAL_DMA_IRQHandler+0x6cc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d10a      	bne.n	800b134 <HAL_DMA_IRQHandler+0x52c>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0308 	and.w	r3, r3, #8
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf14      	ite	ne
 800b12c:	2301      	movne	r3, #1
 800b12e:	2300      	moveq	r3, #0
 800b130:	b2db      	uxtb	r3, r3
 800b132:	e009      	b.n	800b148 <HAL_DMA_IRQHandler+0x540>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0304 	and.w	r3, r3, #4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bf14      	ite	ne
 800b142:	2301      	movne	r3, #1
 800b144:	2300      	moveq	r3, #0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d03e      	beq.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	2210      	movs	r2, #16
 800b156:	409a      	lsls	r2, r3
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b166:	2b00      	cmp	r3, #0
 800b168:	d018      	beq.n	800b19c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d108      	bne.n	800b18a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d024      	beq.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
 800b188:	e01f      	b.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01b      	beq.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4798      	blx	r3
 800b19a:	e016      	b.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d107      	bne.n	800b1ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0208 	bic.w	r2, r2, #8
 800b1b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ce:	f003 031f 	and.w	r3, r3, #31
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	409a      	lsls	r2, r3
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 8110 	beq.w	800b400 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a2c      	ldr	r2, [pc, #176]	; (800b298 <HAL_DMA_IRQHandler+0x690>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d04a      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a2b      	ldr	r2, [pc, #172]	; (800b29c <HAL_DMA_IRQHandler+0x694>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d045      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a29      	ldr	r2, [pc, #164]	; (800b2a0 <HAL_DMA_IRQHandler+0x698>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d040      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a28      	ldr	r2, [pc, #160]	; (800b2a4 <HAL_DMA_IRQHandler+0x69c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d03b      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a26      	ldr	r2, [pc, #152]	; (800b2a8 <HAL_DMA_IRQHandler+0x6a0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d036      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a25      	ldr	r2, [pc, #148]	; (800b2ac <HAL_DMA_IRQHandler+0x6a4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d031      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a23      	ldr	r2, [pc, #140]	; (800b2b0 <HAL_DMA_IRQHandler+0x6a8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d02c      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a22      	ldr	r2, [pc, #136]	; (800b2b4 <HAL_DMA_IRQHandler+0x6ac>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d027      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a20      	ldr	r2, [pc, #128]	; (800b2b8 <HAL_DMA_IRQHandler+0x6b0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d022      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1f      	ldr	r2, [pc, #124]	; (800b2bc <HAL_DMA_IRQHandler+0x6b4>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d01d      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a1d      	ldr	r2, [pc, #116]	; (800b2c0 <HAL_DMA_IRQHandler+0x6b8>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d018      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1c      	ldr	r2, [pc, #112]	; (800b2c4 <HAL_DMA_IRQHandler+0x6bc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d013      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1a      	ldr	r2, [pc, #104]	; (800b2c8 <HAL_DMA_IRQHandler+0x6c0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00e      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a19      	ldr	r2, [pc, #100]	; (800b2cc <HAL_DMA_IRQHandler+0x6c4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d009      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <HAL_DMA_IRQHandler+0x6c8>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d004      	beq.n	800b280 <HAL_DMA_IRQHandler+0x678>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a16      	ldr	r2, [pc, #88]	; (800b2d4 <HAL_DMA_IRQHandler+0x6cc>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d12b      	bne.n	800b2d8 <HAL_DMA_IRQHandler+0x6d0>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0310 	and.w	r3, r3, #16
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf14      	ite	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	2300      	moveq	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	e02a      	b.n	800b2ec <HAL_DMA_IRQHandler+0x6e4>
 800b296:	bf00      	nop
 800b298:	40020010 	.word	0x40020010
 800b29c:	40020028 	.word	0x40020028
 800b2a0:	40020040 	.word	0x40020040
 800b2a4:	40020058 	.word	0x40020058
 800b2a8:	40020070 	.word	0x40020070
 800b2ac:	40020088 	.word	0x40020088
 800b2b0:	400200a0 	.word	0x400200a0
 800b2b4:	400200b8 	.word	0x400200b8
 800b2b8:	40020410 	.word	0x40020410
 800b2bc:	40020428 	.word	0x40020428
 800b2c0:	40020440 	.word	0x40020440
 800b2c4:	40020458 	.word	0x40020458
 800b2c8:	40020470 	.word	0x40020470
 800b2cc:	40020488 	.word	0x40020488
 800b2d0:	400204a0 	.word	0x400204a0
 800b2d4:	400204b8 	.word	0x400204b8
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bf14      	ite	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	2300      	moveq	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 8087 	beq.w	800b400 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f6:	f003 031f 	and.w	r3, r3, #31
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	409a      	lsls	r2, r3
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	d139      	bne.n	800b382 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0216 	bic.w	r2, r2, #22
 800b31c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	695a      	ldr	r2, [r3, #20]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b32c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <HAL_DMA_IRQHandler+0x736>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d007      	beq.n	800b34e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0208 	bic.w	r2, r2, #8
 800b34c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b352:	f003 031f 	and.w	r3, r3, #31
 800b356:	223f      	movs	r2, #63	; 0x3f
 800b358:	409a      	lsls	r2, r3
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 834a 	beq.w	800ba0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	4798      	blx	r3
          }
          return;
 800b380:	e344      	b.n	800ba0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d018      	beq.n	800b3c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d108      	bne.n	800b3b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d02c      	beq.n	800b400 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
 800b3ae:	e027      	b.n	800b400 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d023      	beq.n	800b400 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	4798      	blx	r3
 800b3c0:	e01e      	b.n	800b400 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10f      	bne.n	800b3f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f022 0210 	bic.w	r2, r2, #16
 800b3de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d003      	beq.n	800b400 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8306 	beq.w	800ba16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 8088 	beq.w	800b528 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2204      	movs	r2, #4
 800b41c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a7a      	ldr	r2, [pc, #488]	; (800b610 <HAL_DMA_IRQHandler+0xa08>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d04a      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a79      	ldr	r2, [pc, #484]	; (800b614 <HAL_DMA_IRQHandler+0xa0c>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d045      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a77      	ldr	r2, [pc, #476]	; (800b618 <HAL_DMA_IRQHandler+0xa10>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d040      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a76      	ldr	r2, [pc, #472]	; (800b61c <HAL_DMA_IRQHandler+0xa14>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d03b      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a74      	ldr	r2, [pc, #464]	; (800b620 <HAL_DMA_IRQHandler+0xa18>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d036      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a73      	ldr	r2, [pc, #460]	; (800b624 <HAL_DMA_IRQHandler+0xa1c>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d031      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a71      	ldr	r2, [pc, #452]	; (800b628 <HAL_DMA_IRQHandler+0xa20>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d02c      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a70      	ldr	r2, [pc, #448]	; (800b62c <HAL_DMA_IRQHandler+0xa24>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d027      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a6e      	ldr	r2, [pc, #440]	; (800b630 <HAL_DMA_IRQHandler+0xa28>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d022      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a6d      	ldr	r2, [pc, #436]	; (800b634 <HAL_DMA_IRQHandler+0xa2c>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d01d      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a6b      	ldr	r2, [pc, #428]	; (800b638 <HAL_DMA_IRQHandler+0xa30>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d018      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a6a      	ldr	r2, [pc, #424]	; (800b63c <HAL_DMA_IRQHandler+0xa34>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d013      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a68      	ldr	r2, [pc, #416]	; (800b640 <HAL_DMA_IRQHandler+0xa38>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00e      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a67      	ldr	r2, [pc, #412]	; (800b644 <HAL_DMA_IRQHandler+0xa3c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d009      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a65      	ldr	r2, [pc, #404]	; (800b648 <HAL_DMA_IRQHandler+0xa40>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d004      	beq.n	800b4c0 <HAL_DMA_IRQHandler+0x8b8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a64      	ldr	r2, [pc, #400]	; (800b64c <HAL_DMA_IRQHandler+0xa44>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d108      	bne.n	800b4d2 <HAL_DMA_IRQHandler+0x8ca>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0201 	bic.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e007      	b.n	800b4e2 <HAL_DMA_IRQHandler+0x8da>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0201 	bic.w	r2, r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d307      	bcc.n	800b4fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1f2      	bne.n	800b4e2 <HAL_DMA_IRQHandler+0x8da>
 800b4fc:	e000      	b.n	800b500 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b4fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d004      	beq.n	800b518 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2203      	movs	r2, #3
 800b512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b516:	e003      	b.n	800b520 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8272 	beq.w	800ba16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
 800b53a:	e26c      	b.n	800ba16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a43      	ldr	r2, [pc, #268]	; (800b650 <HAL_DMA_IRQHandler+0xa48>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d022      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a42      	ldr	r2, [pc, #264]	; (800b654 <HAL_DMA_IRQHandler+0xa4c>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d01d      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a40      	ldr	r2, [pc, #256]	; (800b658 <HAL_DMA_IRQHandler+0xa50>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d018      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a3f      	ldr	r2, [pc, #252]	; (800b65c <HAL_DMA_IRQHandler+0xa54>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d013      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a3d      	ldr	r2, [pc, #244]	; (800b660 <HAL_DMA_IRQHandler+0xa58>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d00e      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a3c      	ldr	r2, [pc, #240]	; (800b664 <HAL_DMA_IRQHandler+0xa5c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d009      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a3a      	ldr	r2, [pc, #232]	; (800b668 <HAL_DMA_IRQHandler+0xa60>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d004      	beq.n	800b58c <HAL_DMA_IRQHandler+0x984>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a39      	ldr	r2, [pc, #228]	; (800b66c <HAL_DMA_IRQHandler+0xa64>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d101      	bne.n	800b590 <HAL_DMA_IRQHandler+0x988>
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <HAL_DMA_IRQHandler+0x98a>
 800b590:	2300      	movs	r3, #0
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 823f 	beq.w	800ba16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a4:	f003 031f 	and.w	r3, r3, #31
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	409a      	lsls	r2, r3
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80cd 	beq.w	800b750 <HAL_DMA_IRQHandler+0xb48>
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80c7 	beq.w	800b750 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c6:	f003 031f 	and.w	r3, r3, #31
 800b5ca:	2204      	movs	r2, #4
 800b5cc:	409a      	lsls	r2, r3
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d049      	beq.n	800b670 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 8210 	beq.w	800ba10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5f8:	e20a      	b.n	800ba10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 8206 	beq.w	800ba10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b60c:	e200      	b.n	800ba10 <HAL_DMA_IRQHandler+0xe08>
 800b60e:	bf00      	nop
 800b610:	40020010 	.word	0x40020010
 800b614:	40020028 	.word	0x40020028
 800b618:	40020040 	.word	0x40020040
 800b61c:	40020058 	.word	0x40020058
 800b620:	40020070 	.word	0x40020070
 800b624:	40020088 	.word	0x40020088
 800b628:	400200a0 	.word	0x400200a0
 800b62c:	400200b8 	.word	0x400200b8
 800b630:	40020410 	.word	0x40020410
 800b634:	40020428 	.word	0x40020428
 800b638:	40020440 	.word	0x40020440
 800b63c:	40020458 	.word	0x40020458
 800b640:	40020470 	.word	0x40020470
 800b644:	40020488 	.word	0x40020488
 800b648:	400204a0 	.word	0x400204a0
 800b64c:	400204b8 	.word	0x400204b8
 800b650:	58025408 	.word	0x58025408
 800b654:	5802541c 	.word	0x5802541c
 800b658:	58025430 	.word	0x58025430
 800b65c:	58025444 	.word	0x58025444
 800b660:	58025458 	.word	0x58025458
 800b664:	5802546c 	.word	0x5802546c
 800b668:	58025480 	.word	0x58025480
 800b66c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f003 0320 	and.w	r3, r3, #32
 800b676:	2b00      	cmp	r3, #0
 800b678:	d160      	bne.n	800b73c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a7f      	ldr	r2, [pc, #508]	; (800b87c <HAL_DMA_IRQHandler+0xc74>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d04a      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a7d      	ldr	r2, [pc, #500]	; (800b880 <HAL_DMA_IRQHandler+0xc78>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d045      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a7c      	ldr	r2, [pc, #496]	; (800b884 <HAL_DMA_IRQHandler+0xc7c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d040      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a7a      	ldr	r2, [pc, #488]	; (800b888 <HAL_DMA_IRQHandler+0xc80>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d03b      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a79      	ldr	r2, [pc, #484]	; (800b88c <HAL_DMA_IRQHandler+0xc84>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d036      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a77      	ldr	r2, [pc, #476]	; (800b890 <HAL_DMA_IRQHandler+0xc88>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d031      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a76      	ldr	r2, [pc, #472]	; (800b894 <HAL_DMA_IRQHandler+0xc8c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d02c      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a74      	ldr	r2, [pc, #464]	; (800b898 <HAL_DMA_IRQHandler+0xc90>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d027      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a73      	ldr	r2, [pc, #460]	; (800b89c <HAL_DMA_IRQHandler+0xc94>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d022      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a71      	ldr	r2, [pc, #452]	; (800b8a0 <HAL_DMA_IRQHandler+0xc98>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d01d      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a70      	ldr	r2, [pc, #448]	; (800b8a4 <HAL_DMA_IRQHandler+0xc9c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d018      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a6e      	ldr	r2, [pc, #440]	; (800b8a8 <HAL_DMA_IRQHandler+0xca0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d013      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a6d      	ldr	r2, [pc, #436]	; (800b8ac <HAL_DMA_IRQHandler+0xca4>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d00e      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a6b      	ldr	r2, [pc, #428]	; (800b8b0 <HAL_DMA_IRQHandler+0xca8>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d009      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a6a      	ldr	r2, [pc, #424]	; (800b8b4 <HAL_DMA_IRQHandler+0xcac>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d004      	beq.n	800b71a <HAL_DMA_IRQHandler+0xb12>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a68      	ldr	r2, [pc, #416]	; (800b8b8 <HAL_DMA_IRQHandler+0xcb0>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d108      	bne.n	800b72c <HAL_DMA_IRQHandler+0xb24>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0208 	bic.w	r2, r2, #8
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e007      	b.n	800b73c <HAL_DMA_IRQHandler+0xb34>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0204 	bic.w	r2, r2, #4
 800b73a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8165 	beq.w	800ba10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b74e:	e15f      	b.n	800ba10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b754:	f003 031f 	and.w	r3, r3, #31
 800b758:	2202      	movs	r2, #2
 800b75a:	409a      	lsls	r2, r3
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	4013      	ands	r3, r2
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80c5 	beq.w	800b8f0 <HAL_DMA_IRQHandler+0xce8>
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80bf 	beq.w	800b8f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b776:	f003 031f 	and.w	r3, r3, #31
 800b77a:	2202      	movs	r2, #2
 800b77c:	409a      	lsls	r2, r3
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d018      	beq.n	800b7be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 813a 	beq.w	800ba14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b7a8:	e134      	b.n	800ba14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8130 	beq.w	800ba14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b7bc:	e12a      	b.n	800ba14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	f003 0320 	and.w	r3, r3, #32
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f040 8089 	bne.w	800b8dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a2b      	ldr	r2, [pc, #172]	; (800b87c <HAL_DMA_IRQHandler+0xc74>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d04a      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a29      	ldr	r2, [pc, #164]	; (800b880 <HAL_DMA_IRQHandler+0xc78>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d045      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a28      	ldr	r2, [pc, #160]	; (800b884 <HAL_DMA_IRQHandler+0xc7c>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d040      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a26      	ldr	r2, [pc, #152]	; (800b888 <HAL_DMA_IRQHandler+0xc80>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d03b      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a25      	ldr	r2, [pc, #148]	; (800b88c <HAL_DMA_IRQHandler+0xc84>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d036      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a23      	ldr	r2, [pc, #140]	; (800b890 <HAL_DMA_IRQHandler+0xc88>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d031      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a22      	ldr	r2, [pc, #136]	; (800b894 <HAL_DMA_IRQHandler+0xc8c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d02c      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <HAL_DMA_IRQHandler+0xc90>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d027      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a1f      	ldr	r2, [pc, #124]	; (800b89c <HAL_DMA_IRQHandler+0xc94>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d022      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a1d      	ldr	r2, [pc, #116]	; (800b8a0 <HAL_DMA_IRQHandler+0xc98>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d01d      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <HAL_DMA_IRQHandler+0xc9c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d018      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a1a      	ldr	r2, [pc, #104]	; (800b8a8 <HAL_DMA_IRQHandler+0xca0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d013      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a19      	ldr	r2, [pc, #100]	; (800b8ac <HAL_DMA_IRQHandler+0xca4>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00e      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a17      	ldr	r2, [pc, #92]	; (800b8b0 <HAL_DMA_IRQHandler+0xca8>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d009      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a16      	ldr	r2, [pc, #88]	; (800b8b4 <HAL_DMA_IRQHandler+0xcac>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d004      	beq.n	800b86a <HAL_DMA_IRQHandler+0xc62>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a14      	ldr	r2, [pc, #80]	; (800b8b8 <HAL_DMA_IRQHandler+0xcb0>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d128      	bne.n	800b8bc <HAL_DMA_IRQHandler+0xcb4>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0214 	bic.w	r2, r2, #20
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	e027      	b.n	800b8cc <HAL_DMA_IRQHandler+0xcc4>
 800b87c:	40020010 	.word	0x40020010
 800b880:	40020028 	.word	0x40020028
 800b884:	40020040 	.word	0x40020040
 800b888:	40020058 	.word	0x40020058
 800b88c:	40020070 	.word	0x40020070
 800b890:	40020088 	.word	0x40020088
 800b894:	400200a0 	.word	0x400200a0
 800b898:	400200b8 	.word	0x400200b8
 800b89c:	40020410 	.word	0x40020410
 800b8a0:	40020428 	.word	0x40020428
 800b8a4:	40020440 	.word	0x40020440
 800b8a8:	40020458 	.word	0x40020458
 800b8ac:	40020470 	.word	0x40020470
 800b8b0:	40020488 	.word	0x40020488
 800b8b4:	400204a0 	.word	0x400204a0
 800b8b8:	400204b8 	.word	0x400204b8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 020a 	bic.w	r2, r2, #10
 800b8ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8097 	beq.w	800ba14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b8ee:	e091      	b.n	800ba14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f4:	f003 031f 	and.w	r3, r3, #31
 800b8f8:	2208      	movs	r2, #8
 800b8fa:	409a      	lsls	r2, r3
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	4013      	ands	r3, r2
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 8088 	beq.w	800ba16 <HAL_DMA_IRQHandler+0xe0e>
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f003 0308 	and.w	r3, r3, #8
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8082 	beq.w	800ba16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a41      	ldr	r2, [pc, #260]	; (800ba1c <HAL_DMA_IRQHandler+0xe14>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d04a      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a3f      	ldr	r2, [pc, #252]	; (800ba20 <HAL_DMA_IRQHandler+0xe18>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d045      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a3e      	ldr	r2, [pc, #248]	; (800ba24 <HAL_DMA_IRQHandler+0xe1c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d040      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a3c      	ldr	r2, [pc, #240]	; (800ba28 <HAL_DMA_IRQHandler+0xe20>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d03b      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a3b      	ldr	r2, [pc, #236]	; (800ba2c <HAL_DMA_IRQHandler+0xe24>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d036      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a39      	ldr	r2, [pc, #228]	; (800ba30 <HAL_DMA_IRQHandler+0xe28>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d031      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a38      	ldr	r2, [pc, #224]	; (800ba34 <HAL_DMA_IRQHandler+0xe2c>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d02c      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a36      	ldr	r2, [pc, #216]	; (800ba38 <HAL_DMA_IRQHandler+0xe30>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d027      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a35      	ldr	r2, [pc, #212]	; (800ba3c <HAL_DMA_IRQHandler+0xe34>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d022      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a33      	ldr	r2, [pc, #204]	; (800ba40 <HAL_DMA_IRQHandler+0xe38>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d01d      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a32      	ldr	r2, [pc, #200]	; (800ba44 <HAL_DMA_IRQHandler+0xe3c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d018      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a30      	ldr	r2, [pc, #192]	; (800ba48 <HAL_DMA_IRQHandler+0xe40>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d013      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a2f      	ldr	r2, [pc, #188]	; (800ba4c <HAL_DMA_IRQHandler+0xe44>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00e      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a2d      	ldr	r2, [pc, #180]	; (800ba50 <HAL_DMA_IRQHandler+0xe48>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d009      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a2c      	ldr	r2, [pc, #176]	; (800ba54 <HAL_DMA_IRQHandler+0xe4c>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d004      	beq.n	800b9b2 <HAL_DMA_IRQHandler+0xdaa>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a2a      	ldr	r2, [pc, #168]	; (800ba58 <HAL_DMA_IRQHandler+0xe50>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d108      	bne.n	800b9c4 <HAL_DMA_IRQHandler+0xdbc>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 021c 	bic.w	r2, r2, #28
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	e007      	b.n	800b9d4 <HAL_DMA_IRQHandler+0xdcc>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f022 020e 	bic.w	r2, r2, #14
 800b9d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d8:	f003 031f 	and.w	r3, r3, #31
 800b9dc:	2201      	movs	r2, #1
 800b9de:	409a      	lsls	r2, r3
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	4798      	blx	r3
 800ba0a:	e004      	b.n	800ba16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ba0c:	bf00      	nop
 800ba0e:	e002      	b.n	800ba16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba10:	bf00      	nop
 800ba12:	e000      	b.n	800ba16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ba16:	3728      	adds	r7, #40	; 0x28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	40020010 	.word	0x40020010
 800ba20:	40020028 	.word	0x40020028
 800ba24:	40020040 	.word	0x40020040
 800ba28:	40020058 	.word	0x40020058
 800ba2c:	40020070 	.word	0x40020070
 800ba30:	40020088 	.word	0x40020088
 800ba34:	400200a0 	.word	0x400200a0
 800ba38:	400200b8 	.word	0x400200b8
 800ba3c:	40020410 	.word	0x40020410
 800ba40:	40020428 	.word	0x40020428
 800ba44:	40020440 	.word	0x40020440
 800ba48:	40020458 	.word	0x40020458
 800ba4c:	40020470 	.word	0x40020470
 800ba50:	40020488 	.word	0x40020488
 800ba54:	400204a0 	.word	0x400204a0
 800ba58:	400204b8 	.word	0x400204b8

0800ba5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a7f      	ldr	r2, [pc, #508]	; (800bc78 <DMA_SetConfig+0x21c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d072      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a7d      	ldr	r2, [pc, #500]	; (800bc7c <DMA_SetConfig+0x220>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d06d      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a7c      	ldr	r2, [pc, #496]	; (800bc80 <DMA_SetConfig+0x224>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d068      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a7a      	ldr	r2, [pc, #488]	; (800bc84 <DMA_SetConfig+0x228>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d063      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a79      	ldr	r2, [pc, #484]	; (800bc88 <DMA_SetConfig+0x22c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d05e      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a77      	ldr	r2, [pc, #476]	; (800bc8c <DMA_SetConfig+0x230>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d059      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a76      	ldr	r2, [pc, #472]	; (800bc90 <DMA_SetConfig+0x234>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d054      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a74      	ldr	r2, [pc, #464]	; (800bc94 <DMA_SetConfig+0x238>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d04f      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a73      	ldr	r2, [pc, #460]	; (800bc98 <DMA_SetConfig+0x23c>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d04a      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a71      	ldr	r2, [pc, #452]	; (800bc9c <DMA_SetConfig+0x240>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d045      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a70      	ldr	r2, [pc, #448]	; (800bca0 <DMA_SetConfig+0x244>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d040      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a6e      	ldr	r2, [pc, #440]	; (800bca4 <DMA_SetConfig+0x248>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d03b      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a6d      	ldr	r2, [pc, #436]	; (800bca8 <DMA_SetConfig+0x24c>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d036      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a6b      	ldr	r2, [pc, #428]	; (800bcac <DMA_SetConfig+0x250>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d031      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a6a      	ldr	r2, [pc, #424]	; (800bcb0 <DMA_SetConfig+0x254>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d02c      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a68      	ldr	r2, [pc, #416]	; (800bcb4 <DMA_SetConfig+0x258>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d027      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a67      	ldr	r2, [pc, #412]	; (800bcb8 <DMA_SetConfig+0x25c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d022      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a65      	ldr	r2, [pc, #404]	; (800bcbc <DMA_SetConfig+0x260>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d01d      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a64      	ldr	r2, [pc, #400]	; (800bcc0 <DMA_SetConfig+0x264>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d018      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a62      	ldr	r2, [pc, #392]	; (800bcc4 <DMA_SetConfig+0x268>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d013      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a61      	ldr	r2, [pc, #388]	; (800bcc8 <DMA_SetConfig+0x26c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00e      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a5f      	ldr	r2, [pc, #380]	; (800bccc <DMA_SetConfig+0x270>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d009      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a5e      	ldr	r2, [pc, #376]	; (800bcd0 <DMA_SetConfig+0x274>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <DMA_SetConfig+0x10a>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a5c      	ldr	r2, [pc, #368]	; (800bcd4 <DMA_SetConfig+0x278>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d101      	bne.n	800bb6a <DMA_SetConfig+0x10e>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e000      	b.n	800bb6c <DMA_SetConfig+0x110>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00d      	beq.n	800bb8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bb78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d004      	beq.n	800bb8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800bb8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a39      	ldr	r2, [pc, #228]	; (800bc78 <DMA_SetConfig+0x21c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d04a      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a38      	ldr	r2, [pc, #224]	; (800bc7c <DMA_SetConfig+0x220>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d045      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a36      	ldr	r2, [pc, #216]	; (800bc80 <DMA_SetConfig+0x224>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d040      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a35      	ldr	r2, [pc, #212]	; (800bc84 <DMA_SetConfig+0x228>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d03b      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a33      	ldr	r2, [pc, #204]	; (800bc88 <DMA_SetConfig+0x22c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d036      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a32      	ldr	r2, [pc, #200]	; (800bc8c <DMA_SetConfig+0x230>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d031      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a30      	ldr	r2, [pc, #192]	; (800bc90 <DMA_SetConfig+0x234>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d02c      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a2f      	ldr	r2, [pc, #188]	; (800bc94 <DMA_SetConfig+0x238>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d027      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a2d      	ldr	r2, [pc, #180]	; (800bc98 <DMA_SetConfig+0x23c>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d022      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a2c      	ldr	r2, [pc, #176]	; (800bc9c <DMA_SetConfig+0x240>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d01d      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a2a      	ldr	r2, [pc, #168]	; (800bca0 <DMA_SetConfig+0x244>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d018      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a29      	ldr	r2, [pc, #164]	; (800bca4 <DMA_SetConfig+0x248>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d013      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a27      	ldr	r2, [pc, #156]	; (800bca8 <DMA_SetConfig+0x24c>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00e      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a26      	ldr	r2, [pc, #152]	; (800bcac <DMA_SetConfig+0x250>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d009      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a24      	ldr	r2, [pc, #144]	; (800bcb0 <DMA_SetConfig+0x254>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d004      	beq.n	800bc2c <DMA_SetConfig+0x1d0>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a23      	ldr	r2, [pc, #140]	; (800bcb4 <DMA_SetConfig+0x258>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d101      	bne.n	800bc30 <DMA_SetConfig+0x1d4>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <DMA_SetConfig+0x1d6>
 800bc30:	2300      	movs	r3, #0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d059      	beq.n	800bcea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc3a:	f003 031f 	and.w	r3, r3, #31
 800bc3e:	223f      	movs	r2, #63	; 0x3f
 800bc40:	409a      	lsls	r2, r3
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d138      	bne.n	800bcd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800bc76:	e086      	b.n	800bd86 <DMA_SetConfig+0x32a>
 800bc78:	40020010 	.word	0x40020010
 800bc7c:	40020028 	.word	0x40020028
 800bc80:	40020040 	.word	0x40020040
 800bc84:	40020058 	.word	0x40020058
 800bc88:	40020070 	.word	0x40020070
 800bc8c:	40020088 	.word	0x40020088
 800bc90:	400200a0 	.word	0x400200a0
 800bc94:	400200b8 	.word	0x400200b8
 800bc98:	40020410 	.word	0x40020410
 800bc9c:	40020428 	.word	0x40020428
 800bca0:	40020440 	.word	0x40020440
 800bca4:	40020458 	.word	0x40020458
 800bca8:	40020470 	.word	0x40020470
 800bcac:	40020488 	.word	0x40020488
 800bcb0:	400204a0 	.word	0x400204a0
 800bcb4:	400204b8 	.word	0x400204b8
 800bcb8:	58025408 	.word	0x58025408
 800bcbc:	5802541c 	.word	0x5802541c
 800bcc0:	58025430 	.word	0x58025430
 800bcc4:	58025444 	.word	0x58025444
 800bcc8:	58025458 	.word	0x58025458
 800bccc:	5802546c 	.word	0x5802546c
 800bcd0:	58025480 	.word	0x58025480
 800bcd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	60da      	str	r2, [r3, #12]
}
 800bce8:	e04d      	b.n	800bd86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a29      	ldr	r2, [pc, #164]	; (800bd94 <DMA_SetConfig+0x338>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d022      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a27      	ldr	r2, [pc, #156]	; (800bd98 <DMA_SetConfig+0x33c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01d      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a26      	ldr	r2, [pc, #152]	; (800bd9c <DMA_SetConfig+0x340>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d018      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a24      	ldr	r2, [pc, #144]	; (800bda0 <DMA_SetConfig+0x344>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d013      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a23      	ldr	r2, [pc, #140]	; (800bda4 <DMA_SetConfig+0x348>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00e      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a21      	ldr	r2, [pc, #132]	; (800bda8 <DMA_SetConfig+0x34c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d009      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a20      	ldr	r2, [pc, #128]	; (800bdac <DMA_SetConfig+0x350>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d004      	beq.n	800bd3a <DMA_SetConfig+0x2de>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a1e      	ldr	r2, [pc, #120]	; (800bdb0 <DMA_SetConfig+0x354>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d101      	bne.n	800bd3e <DMA_SetConfig+0x2e2>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e000      	b.n	800bd40 <DMA_SetConfig+0x2e4>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d020      	beq.n	800bd86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd48:	f003 031f 	and.w	r3, r3, #31
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	409a      	lsls	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	d108      	bne.n	800bd76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	60da      	str	r2, [r3, #12]
}
 800bd74:	e007      	b.n	800bd86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	60da      	str	r2, [r3, #12]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	58025408 	.word	0x58025408
 800bd98:	5802541c 	.word	0x5802541c
 800bd9c:	58025430 	.word	0x58025430
 800bda0:	58025444 	.word	0x58025444
 800bda4:	58025458 	.word	0x58025458
 800bda8:	5802546c 	.word	0x5802546c
 800bdac:	58025480 	.word	0x58025480
 800bdb0:	58025494 	.word	0x58025494

0800bdb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a42      	ldr	r2, [pc, #264]	; (800becc <DMA_CalcBaseAndBitshift+0x118>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d04a      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a41      	ldr	r2, [pc, #260]	; (800bed0 <DMA_CalcBaseAndBitshift+0x11c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d045      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a3f      	ldr	r2, [pc, #252]	; (800bed4 <DMA_CalcBaseAndBitshift+0x120>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d040      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a3e      	ldr	r2, [pc, #248]	; (800bed8 <DMA_CalcBaseAndBitshift+0x124>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d03b      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a3c      	ldr	r2, [pc, #240]	; (800bedc <DMA_CalcBaseAndBitshift+0x128>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d036      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a3b      	ldr	r2, [pc, #236]	; (800bee0 <DMA_CalcBaseAndBitshift+0x12c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d031      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a39      	ldr	r2, [pc, #228]	; (800bee4 <DMA_CalcBaseAndBitshift+0x130>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d02c      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a38      	ldr	r2, [pc, #224]	; (800bee8 <DMA_CalcBaseAndBitshift+0x134>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d027      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a36      	ldr	r2, [pc, #216]	; (800beec <DMA_CalcBaseAndBitshift+0x138>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d022      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a35      	ldr	r2, [pc, #212]	; (800bef0 <DMA_CalcBaseAndBitshift+0x13c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d01d      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a33      	ldr	r2, [pc, #204]	; (800bef4 <DMA_CalcBaseAndBitshift+0x140>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d018      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a32      	ldr	r2, [pc, #200]	; (800bef8 <DMA_CalcBaseAndBitshift+0x144>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d013      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a30      	ldr	r2, [pc, #192]	; (800befc <DMA_CalcBaseAndBitshift+0x148>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d00e      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a2f      	ldr	r2, [pc, #188]	; (800bf00 <DMA_CalcBaseAndBitshift+0x14c>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d009      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a2d      	ldr	r2, [pc, #180]	; (800bf04 <DMA_CalcBaseAndBitshift+0x150>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d004      	beq.n	800be5c <DMA_CalcBaseAndBitshift+0xa8>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a2c      	ldr	r2, [pc, #176]	; (800bf08 <DMA_CalcBaseAndBitshift+0x154>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d101      	bne.n	800be60 <DMA_CalcBaseAndBitshift+0xac>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e000      	b.n	800be62 <DMA_CalcBaseAndBitshift+0xae>
 800be60:	2300      	movs	r3, #0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d024      	beq.n	800beb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	3b10      	subs	r3, #16
 800be6e:	4a27      	ldr	r2, [pc, #156]	; (800bf0c <DMA_CalcBaseAndBitshift+0x158>)
 800be70:	fba2 2303 	umull	r2, r3, r2, r3
 800be74:	091b      	lsrs	r3, r3, #4
 800be76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f003 0307 	and.w	r3, r3, #7
 800be7e:	4a24      	ldr	r2, [pc, #144]	; (800bf10 <DMA_CalcBaseAndBitshift+0x15c>)
 800be80:	5cd3      	ldrb	r3, [r2, r3]
 800be82:	461a      	mov	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d908      	bls.n	800bea0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	4b1f      	ldr	r3, [pc, #124]	; (800bf14 <DMA_CalcBaseAndBitshift+0x160>)
 800be96:	4013      	ands	r3, r2
 800be98:	1d1a      	adds	r2, r3, #4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	659a      	str	r2, [r3, #88]	; 0x58
 800be9e:	e00d      	b.n	800bebc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	461a      	mov	r2, r3
 800bea6:	4b1b      	ldr	r3, [pc, #108]	; (800bf14 <DMA_CalcBaseAndBitshift+0x160>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6593      	str	r3, [r2, #88]	; 0x58
 800beae:	e005      	b.n	800bebc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	40020010 	.word	0x40020010
 800bed0:	40020028 	.word	0x40020028
 800bed4:	40020040 	.word	0x40020040
 800bed8:	40020058 	.word	0x40020058
 800bedc:	40020070 	.word	0x40020070
 800bee0:	40020088 	.word	0x40020088
 800bee4:	400200a0 	.word	0x400200a0
 800bee8:	400200b8 	.word	0x400200b8
 800beec:	40020410 	.word	0x40020410
 800bef0:	40020428 	.word	0x40020428
 800bef4:	40020440 	.word	0x40020440
 800bef8:	40020458 	.word	0x40020458
 800befc:	40020470 	.word	0x40020470
 800bf00:	40020488 	.word	0x40020488
 800bf04:	400204a0 	.word	0x400204a0
 800bf08:	400204b8 	.word	0x400204b8
 800bf0c:	aaaaaaab 	.word	0xaaaaaaab
 800bf10:	0801502c 	.word	0x0801502c
 800bf14:	fffffc00 	.word	0xfffffc00

0800bf18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d120      	bne.n	800bf6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d858      	bhi.n	800bfe6 <DMA_CheckFifoParam+0xce>
 800bf34:	a201      	add	r2, pc, #4	; (adr r2, 800bf3c <DMA_CheckFifoParam+0x24>)
 800bf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3a:	bf00      	nop
 800bf3c:	0800bf4d 	.word	0x0800bf4d
 800bf40:	0800bf5f 	.word	0x0800bf5f
 800bf44:	0800bf4d 	.word	0x0800bf4d
 800bf48:	0800bfe7 	.word	0x0800bfe7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d048      	beq.n	800bfea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf5c:	e045      	b.n	800bfea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bf66:	d142      	bne.n	800bfee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf6c:	e03f      	b.n	800bfee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf76:	d123      	bne.n	800bfc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d838      	bhi.n	800bff2 <DMA_CheckFifoParam+0xda>
 800bf80:	a201      	add	r2, pc, #4	; (adr r2, 800bf88 <DMA_CheckFifoParam+0x70>)
 800bf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf86:	bf00      	nop
 800bf88:	0800bf99 	.word	0x0800bf99
 800bf8c:	0800bf9f 	.word	0x0800bf9f
 800bf90:	0800bf99 	.word	0x0800bf99
 800bf94:	0800bfb1 	.word	0x0800bfb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]
        break;
 800bf9c:	e030      	b.n	800c000 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d025      	beq.n	800bff6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bfae:	e022      	b.n	800bff6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfb8:	d11f      	bne.n	800bffa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bfbe:	e01c      	b.n	800bffa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d902      	bls.n	800bfce <DMA_CheckFifoParam+0xb6>
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	d003      	beq.n	800bfd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bfcc:	e018      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	73fb      	strb	r3, [r7, #15]
        break;
 800bfd2:	e015      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00e      	beq.n	800bffe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe4:	e00b      	b.n	800bffe <DMA_CheckFifoParam+0xe6>
        break;
 800bfe6:	bf00      	nop
 800bfe8:	e00a      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        break;
 800bfea:	bf00      	nop
 800bfec:	e008      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        break;
 800bfee:	bf00      	nop
 800bff0:	e006      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        break;
 800bff2:	bf00      	nop
 800bff4:	e004      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        break;
 800bff6:	bf00      	nop
 800bff8:	e002      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
        break;
 800bffa:	bf00      	nop
 800bffc:	e000      	b.n	800c000 <DMA_CheckFifoParam+0xe8>
    break;
 800bffe:	bf00      	nop
    }
  }

  return status;
 800c000:	7bfb      	ldrb	r3, [r7, #15]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop

0800c010 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a38      	ldr	r2, [pc, #224]	; (800c104 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d022      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a36      	ldr	r2, [pc, #216]	; (800c108 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d01d      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a35      	ldr	r2, [pc, #212]	; (800c10c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d018      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a33      	ldr	r2, [pc, #204]	; (800c110 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d013      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a32      	ldr	r2, [pc, #200]	; (800c114 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d00e      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a30      	ldr	r2, [pc, #192]	; (800c118 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d009      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a2f      	ldr	r2, [pc, #188]	; (800c11c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d004      	beq.n	800c06e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a2d      	ldr	r2, [pc, #180]	; (800c120 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d101      	bne.n	800c072 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01a      	beq.n	800c0ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	3b08      	subs	r3, #8
 800c080:	4a28      	ldr	r2, [pc, #160]	; (800c124 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c082:	fba2 2303 	umull	r2, r3, r2, r3
 800c086:	091b      	lsrs	r3, r3, #4
 800c088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	4b26      	ldr	r3, [pc, #152]	; (800c128 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c08e:	4413      	add	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	461a      	mov	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a24      	ldr	r2, [pc, #144]	; (800c12c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c09c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f003 031f 	and.w	r3, r3, #31
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	409a      	lsls	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c0ac:	e024      	b.n	800c0f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	3b10      	subs	r3, #16
 800c0b6:	4a1e      	ldr	r2, [pc, #120]	; (800c130 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0bc:	091b      	lsrs	r3, r3, #4
 800c0be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	4a1c      	ldr	r2, [pc, #112]	; (800c134 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d806      	bhi.n	800c0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	4a1b      	ldr	r2, [pc, #108]	; (800c138 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d902      	bls.n	800c0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4b18      	ldr	r3, [pc, #96]	; (800c13c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	461a      	mov	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a16      	ldr	r2, [pc, #88]	; (800c140 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c0e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f003 031f 	and.w	r3, r3, #31
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	409a      	lsls	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c0f8:	bf00      	nop
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	58025408 	.word	0x58025408
 800c108:	5802541c 	.word	0x5802541c
 800c10c:	58025430 	.word	0x58025430
 800c110:	58025444 	.word	0x58025444
 800c114:	58025458 	.word	0x58025458
 800c118:	5802546c 	.word	0x5802546c
 800c11c:	58025480 	.word	0x58025480
 800c120:	58025494 	.word	0x58025494
 800c124:	cccccccd 	.word	0xcccccccd
 800c128:	16009600 	.word	0x16009600
 800c12c:	58025880 	.word	0x58025880
 800c130:	aaaaaaab 	.word	0xaaaaaaab
 800c134:	400204b8 	.word	0x400204b8
 800c138:	4002040f 	.word	0x4002040f
 800c13c:	10008200 	.word	0x10008200
 800c140:	40020880 	.word	0x40020880

0800c144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	b2db      	uxtb	r3, r3
 800c152:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d04a      	beq.n	800c1f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	d847      	bhi.n	800c1f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a25      	ldr	r2, [pc, #148]	; (800c1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d022      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a24      	ldr	r2, [pc, #144]	; (800c200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d01d      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a22      	ldr	r2, [pc, #136]	; (800c204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d018      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a21      	ldr	r2, [pc, #132]	; (800c208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d013      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a1f      	ldr	r2, [pc, #124]	; (800c20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00e      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a1e      	ldr	r2, [pc, #120]	; (800c210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d009      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a1c      	ldr	r2, [pc, #112]	; (800c214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d004      	beq.n	800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a1b      	ldr	r2, [pc, #108]	; (800c218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d101      	bne.n	800c1b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	4b17      	ldr	r3, [pc, #92]	; (800c21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a15      	ldr	r2, [pc, #84]	; (800c220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800c1cc:	671a      	str	r2, [r3, #112]	; 0x70
 800c1ce:	e009      	b.n	800c1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4b14      	ldr	r3, [pc, #80]	; (800c224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a11      	ldr	r2, [pc, #68]	; (800c228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800c1e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	409a      	lsls	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800c1f0:	bf00      	nop
 800c1f2:	3714      	adds	r7, #20
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	58025408 	.word	0x58025408
 800c200:	5802541c 	.word	0x5802541c
 800c204:	58025430 	.word	0x58025430
 800c208:	58025444 	.word	0x58025444
 800c20c:	58025458 	.word	0x58025458
 800c210:	5802546c 	.word	0x5802546c
 800c214:	58025480 	.word	0x58025480
 800c218:	58025494 	.word	0x58025494
 800c21c:	1600963f 	.word	0x1600963f
 800c220:	58025940 	.word	0x58025940
 800c224:	1000823f 	.word	0x1000823f
 800c228:	40020940 	.word	0x40020940

0800c22c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	2b80      	cmp	r3, #128	; 0x80
 800c244:	d105      	bne.n	800c252 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c24c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e315      	b.n	800c87e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d101      	bne.n	800c260 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800c25c:	2302      	movs	r3, #2
 800c25e:	e30e      	b.n	800c87e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	f040 82fd 	bne.w	800c870 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2202      	movs	r2, #2
 800c27a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a82      	ldr	r2, [pc, #520]	; (800c494 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d04a      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a81      	ldr	r2, [pc, #516]	; (800c498 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d045      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a7f      	ldr	r2, [pc, #508]	; (800c49c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d040      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a7e      	ldr	r2, [pc, #504]	; (800c4a0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d03b      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a7c      	ldr	r2, [pc, #496]	; (800c4a4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d036      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a7b      	ldr	r2, [pc, #492]	; (800c4a8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d031      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a79      	ldr	r2, [pc, #484]	; (800c4ac <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d02c      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a78      	ldr	r2, [pc, #480]	; (800c4b0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d027      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a76      	ldr	r2, [pc, #472]	; (800c4b4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d022      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a75      	ldr	r2, [pc, #468]	; (800c4b8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d01d      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a73      	ldr	r2, [pc, #460]	; (800c4bc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d018      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a72      	ldr	r2, [pc, #456]	; (800c4c0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d013      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a70      	ldr	r2, [pc, #448]	; (800c4c4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00e      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a6f      	ldr	r2, [pc, #444]	; (800c4c8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d009      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a6d      	ldr	r2, [pc, #436]	; (800c4cc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d004      	beq.n	800c324 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a6c      	ldr	r2, [pc, #432]	; (800c4d0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d101      	bne.n	800c328 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800c324:	2301      	movs	r3, #1
 800c326:	e000      	b.n	800c32a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800c328:	2300      	movs	r3, #0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d018      	beq.n	800c360 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c33c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	3308      	adds	r3, #8
 800c34c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c352:	f003 031f 	and.w	r3, r3, #31
 800c356:	223f      	movs	r2, #63	; 0x3f
 800c358:	409a      	lsls	r2, r3
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e018      	b.n	800c392 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6819      	ldr	r1, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	f248 0320 	movw	r3, #32800	; 0x8020
 800c36e:	430b      	orrs	r3, r1
 800c370:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c37e:	3304      	adds	r3, #4
 800c380:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c386:	f003 031f 	and.w	r3, r3, #31
 800c38a:	2201      	movs	r2, #1
 800c38c:	409a      	lsls	r2, r3
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 fb41 	bl	800ca20 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a3c      	ldr	r2, [pc, #240]	; (800c494 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d072      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a3a      	ldr	r2, [pc, #232]	; (800c498 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d06d      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a39      	ldr	r2, [pc, #228]	; (800c49c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d068      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a37      	ldr	r2, [pc, #220]	; (800c4a0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d063      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a36      	ldr	r2, [pc, #216]	; (800c4a4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d05e      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a34      	ldr	r2, [pc, #208]	; (800c4a8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d059      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a33      	ldr	r2, [pc, #204]	; (800c4ac <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d054      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a31      	ldr	r2, [pc, #196]	; (800c4b0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d04f      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a30      	ldr	r2, [pc, #192]	; (800c4b4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d04a      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a2e      	ldr	r2, [pc, #184]	; (800c4b8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d045      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a2d      	ldr	r2, [pc, #180]	; (800c4bc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d040      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a2b      	ldr	r2, [pc, #172]	; (800c4c0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d03b      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a2a      	ldr	r2, [pc, #168]	; (800c4c4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d036      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a28      	ldr	r2, [pc, #160]	; (800c4c8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d031      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a27      	ldr	r2, [pc, #156]	; (800c4cc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d02c      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a25      	ldr	r2, [pc, #148]	; (800c4d0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d027      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a24      	ldr	r2, [pc, #144]	; (800c4d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d022      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a22      	ldr	r2, [pc, #136]	; (800c4d8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d01d      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a21      	ldr	r2, [pc, #132]	; (800c4dc <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d018      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1f      	ldr	r2, [pc, #124]	; (800c4e0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d013      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a1e      	ldr	r2, [pc, #120]	; (800c4e4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d00e      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a1c      	ldr	r2, [pc, #112]	; (800c4e8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d009      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a1b      	ldr	r2, [pc, #108]	; (800c4ec <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d004      	beq.n	800c48e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a19      	ldr	r2, [pc, #100]	; (800c4f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d132      	bne.n	800c4f4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800c48e:	2301      	movs	r3, #1
 800c490:	e031      	b.n	800c4f6 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800c492:	bf00      	nop
 800c494:	40020010 	.word	0x40020010
 800c498:	40020028 	.word	0x40020028
 800c49c:	40020040 	.word	0x40020040
 800c4a0:	40020058 	.word	0x40020058
 800c4a4:	40020070 	.word	0x40020070
 800c4a8:	40020088 	.word	0x40020088
 800c4ac:	400200a0 	.word	0x400200a0
 800c4b0:	400200b8 	.word	0x400200b8
 800c4b4:	40020410 	.word	0x40020410
 800c4b8:	40020428 	.word	0x40020428
 800c4bc:	40020440 	.word	0x40020440
 800c4c0:	40020458 	.word	0x40020458
 800c4c4:	40020470 	.word	0x40020470
 800c4c8:	40020488 	.word	0x40020488
 800c4cc:	400204a0 	.word	0x400204a0
 800c4d0:	400204b8 	.word	0x400204b8
 800c4d4:	58025408 	.word	0x58025408
 800c4d8:	5802541c 	.word	0x5802541c
 800c4dc:	58025430 	.word	0x58025430
 800c4e0:	58025444 	.word	0x58025444
 800c4e4:	58025458 	.word	0x58025458
 800c4e8:	5802546c 	.word	0x5802546c
 800c4ec:	58025480 	.word	0x58025480
 800c4f0:	58025494 	.word	0x58025494
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00d      	beq.n	800c516 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c502:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c514:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a3b      	ldr	r2, [pc, #236]	; (800c608 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d04a      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a39      	ldr	r2, [pc, #228]	; (800c60c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d045      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a38      	ldr	r2, [pc, #224]	; (800c610 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d040      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a36      	ldr	r2, [pc, #216]	; (800c614 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d03b      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a35      	ldr	r2, [pc, #212]	; (800c618 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d036      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a33      	ldr	r2, [pc, #204]	; (800c61c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d031      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a32      	ldr	r2, [pc, #200]	; (800c620 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d02c      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a30      	ldr	r2, [pc, #192]	; (800c624 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d027      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a2f      	ldr	r2, [pc, #188]	; (800c628 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d022      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a2d      	ldr	r2, [pc, #180]	; (800c62c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d01d      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a2c      	ldr	r2, [pc, #176]	; (800c630 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d018      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a2a      	ldr	r2, [pc, #168]	; (800c634 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d013      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a29      	ldr	r2, [pc, #164]	; (800c638 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00e      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a27      	ldr	r2, [pc, #156]	; (800c63c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a26      	ldr	r2, [pc, #152]	; (800c640 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d004      	beq.n	800c5b6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a24      	ldr	r2, [pc, #144]	; (800c644 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d101      	bne.n	800c5ba <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d043      	beq.n	800c648 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f023 021e 	bic.w	r2, r3, #30
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0216 	orr.w	r2, r2, #22
 800c5d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	695a      	ldr	r2, [r3, #20]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5e2:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d103      	bne.n	800c5f4 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d043      	beq.n	800c67c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f042 0208 	orr.w	r2, r2, #8
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	e03a      	b.n	800c67c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800c606:	bf00      	nop
 800c608:	40020010 	.word	0x40020010
 800c60c:	40020028 	.word	0x40020028
 800c610:	40020040 	.word	0x40020040
 800c614:	40020058 	.word	0x40020058
 800c618:	40020070 	.word	0x40020070
 800c61c:	40020088 	.word	0x40020088
 800c620:	400200a0 	.word	0x400200a0
 800c624:	400200b8 	.word	0x400200b8
 800c628:	40020410 	.word	0x40020410
 800c62c:	40020428 	.word	0x40020428
 800c630:	40020440 	.word	0x40020440
 800c634:	40020458 	.word	0x40020458
 800c638:	40020470 	.word	0x40020470
 800c63c:	40020488 	.word	0x40020488
 800c640:	400204a0 	.word	0x400204a0
 800c644:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f023 020e 	bic.w	r2, r3, #14
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 020a 	orr.w	r2, r2, #10
 800c65a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c660:	2b00      	cmp	r3, #0
 800c662:	d103      	bne.n	800c66c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f042 0204 	orr.w	r2, r2, #4
 800c67a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a81      	ldr	r2, [pc, #516]	; (800c888 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d072      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a80      	ldr	r2, [pc, #512]	; (800c88c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d06d      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a7e      	ldr	r2, [pc, #504]	; (800c890 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d068      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a7d      	ldr	r2, [pc, #500]	; (800c894 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d063      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a7b      	ldr	r2, [pc, #492]	; (800c898 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d05e      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a7a      	ldr	r2, [pc, #488]	; (800c89c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d059      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a78      	ldr	r2, [pc, #480]	; (800c8a0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d054      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a77      	ldr	r2, [pc, #476]	; (800c8a4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d04f      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a75      	ldr	r2, [pc, #468]	; (800c8a8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d04a      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a74      	ldr	r2, [pc, #464]	; (800c8ac <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d045      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a72      	ldr	r2, [pc, #456]	; (800c8b0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d040      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a71      	ldr	r2, [pc, #452]	; (800c8b4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d03b      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a6f      	ldr	r2, [pc, #444]	; (800c8b8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d036      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a6e      	ldr	r2, [pc, #440]	; (800c8bc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d031      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a6c      	ldr	r2, [pc, #432]	; (800c8c0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d02c      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a6b      	ldr	r2, [pc, #428]	; (800c8c4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d027      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a69      	ldr	r2, [pc, #420]	; (800c8c8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d022      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a68      	ldr	r2, [pc, #416]	; (800c8cc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d01d      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a66      	ldr	r2, [pc, #408]	; (800c8d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d018      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a65      	ldr	r2, [pc, #404]	; (800c8d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d013      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a63      	ldr	r2, [pc, #396]	; (800c8d8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d00e      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a62      	ldr	r2, [pc, #392]	; (800c8dc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d009      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a60      	ldr	r2, [pc, #384]	; (800c8e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d004      	beq.n	800c76c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a5f      	ldr	r2, [pc, #380]	; (800c8e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d101      	bne.n	800c770 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800c770:	2300      	movs	r3, #0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d01a      	beq.n	800c7ac <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d007      	beq.n	800c794 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c78e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c792:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a35      	ldr	r2, [pc, #212]	; (800c888 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d04a      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a34      	ldr	r2, [pc, #208]	; (800c88c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d045      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a32      	ldr	r2, [pc, #200]	; (800c890 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d040      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a31      	ldr	r2, [pc, #196]	; (800c894 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d03b      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a2f      	ldr	r2, [pc, #188]	; (800c898 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d036      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a2e      	ldr	r2, [pc, #184]	; (800c89c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d031      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a2c      	ldr	r2, [pc, #176]	; (800c8a0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d02c      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a2b      	ldr	r2, [pc, #172]	; (800c8a4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d027      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a29      	ldr	r2, [pc, #164]	; (800c8a8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d022      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a28      	ldr	r2, [pc, #160]	; (800c8ac <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d01d      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a26      	ldr	r2, [pc, #152]	; (800c8b0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d018      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a25      	ldr	r2, [pc, #148]	; (800c8b4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d013      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a23      	ldr	r2, [pc, #140]	; (800c8b8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d00e      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a22      	ldr	r2, [pc, #136]	; (800c8bc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d009      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a20      	ldr	r2, [pc, #128]	; (800c8c0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d004      	beq.n	800c84c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a1f      	ldr	r2, [pc, #124]	; (800c8c4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d108      	bne.n	800c85e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0201 	orr.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	e00e      	b.n	800c87c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0201 	orr.w	r2, r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e005      	b.n	800c87c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c876:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	40020010 	.word	0x40020010
 800c88c:	40020028 	.word	0x40020028
 800c890:	40020040 	.word	0x40020040
 800c894:	40020058 	.word	0x40020058
 800c898:	40020070 	.word	0x40020070
 800c89c:	40020088 	.word	0x40020088
 800c8a0:	400200a0 	.word	0x400200a0
 800c8a4:	400200b8 	.word	0x400200b8
 800c8a8:	40020410 	.word	0x40020410
 800c8ac:	40020428 	.word	0x40020428
 800c8b0:	40020440 	.word	0x40020440
 800c8b4:	40020458 	.word	0x40020458
 800c8b8:	40020470 	.word	0x40020470
 800c8bc:	40020488 	.word	0x40020488
 800c8c0:	400204a0 	.word	0x400204a0
 800c8c4:	400204b8 	.word	0x400204b8
 800c8c8:	58025408 	.word	0x58025408
 800c8cc:	5802541c 	.word	0x5802541c
 800c8d0:	58025430 	.word	0x58025430
 800c8d4:	58025444 	.word	0x58025444
 800c8d8:	58025458 	.word	0x58025458
 800c8dc:	5802546c 	.word	0x5802546c
 800c8e0:	58025480 	.word	0x58025480
 800c8e4:	58025494 	.word	0x58025494

0800c8e8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a39      	ldr	r2, [pc, #228]	; (800c9e0 <HAL_DMAEx_ChangeMemory+0xf8>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d04a      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a37      	ldr	r2, [pc, #220]	; (800c9e4 <HAL_DMAEx_ChangeMemory+0xfc>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d045      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a36      	ldr	r2, [pc, #216]	; (800c9e8 <HAL_DMAEx_ChangeMemory+0x100>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d040      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a34      	ldr	r2, [pc, #208]	; (800c9ec <HAL_DMAEx_ChangeMemory+0x104>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d03b      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a33      	ldr	r2, [pc, #204]	; (800c9f0 <HAL_DMAEx_ChangeMemory+0x108>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d036      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a31      	ldr	r2, [pc, #196]	; (800c9f4 <HAL_DMAEx_ChangeMemory+0x10c>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d031      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a30      	ldr	r2, [pc, #192]	; (800c9f8 <HAL_DMAEx_ChangeMemory+0x110>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d02c      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a2e      	ldr	r2, [pc, #184]	; (800c9fc <HAL_DMAEx_ChangeMemory+0x114>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d027      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a2d      	ldr	r2, [pc, #180]	; (800ca00 <HAL_DMAEx_ChangeMemory+0x118>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d022      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a2b      	ldr	r2, [pc, #172]	; (800ca04 <HAL_DMAEx_ChangeMemory+0x11c>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d01d      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a2a      	ldr	r2, [pc, #168]	; (800ca08 <HAL_DMAEx_ChangeMemory+0x120>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d018      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a28      	ldr	r2, [pc, #160]	; (800ca0c <HAL_DMAEx_ChangeMemory+0x124>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d013      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a27      	ldr	r2, [pc, #156]	; (800ca10 <HAL_DMAEx_ChangeMemory+0x128>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d00e      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a25      	ldr	r2, [pc, #148]	; (800ca14 <HAL_DMAEx_ChangeMemory+0x12c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d009      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a24      	ldr	r2, [pc, #144]	; (800ca18 <HAL_DMAEx_ChangeMemory+0x130>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d004      	beq.n	800c996 <HAL_DMAEx_ChangeMemory+0xae>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a22      	ldr	r2, [pc, #136]	; (800ca1c <HAL_DMAEx_ChangeMemory+0x134>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d101      	bne.n	800c99a <HAL_DMAEx_ChangeMemory+0xb2>
 800c996:	2301      	movs	r3, #1
 800c998:	e000      	b.n	800c99c <HAL_DMAEx_ChangeMemory+0xb4>
 800c99a:	2300      	movs	r3, #0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d104      	bne.n	800c9b0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	60da      	str	r2, [r3, #12]
 800c9ae:	e010      	b.n	800c9d2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	611a      	str	r2, [r3, #16]
 800c9b8:	e00b      	b.n	800c9d2 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d104      	bne.n	800c9ca <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	60da      	str	r2, [r3, #12]
 800c9c8:	e003      	b.n	800c9d2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	40020010 	.word	0x40020010
 800c9e4:	40020028 	.word	0x40020028
 800c9e8:	40020040 	.word	0x40020040
 800c9ec:	40020058 	.word	0x40020058
 800c9f0:	40020070 	.word	0x40020070
 800c9f4:	40020088 	.word	0x40020088
 800c9f8:	400200a0 	.word	0x400200a0
 800c9fc:	400200b8 	.word	0x400200b8
 800ca00:	40020410 	.word	0x40020410
 800ca04:	40020428 	.word	0x40020428
 800ca08:	40020440 	.word	0x40020440
 800ca0c:	40020458 	.word	0x40020458
 800ca10:	40020470 	.word	0x40020470
 800ca14:	40020488 	.word	0x40020488
 800ca18:	400204a0 	.word	0x400204a0
 800ca1c:	400204b8 	.word	0x400204b8

0800ca20 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a46      	ldr	r2, [pc, #280]	; (800cb4c <DMA_MultiBufferSetConfig+0x12c>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d04a      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a44      	ldr	r2, [pc, #272]	; (800cb50 <DMA_MultiBufferSetConfig+0x130>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d045      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a43      	ldr	r2, [pc, #268]	; (800cb54 <DMA_MultiBufferSetConfig+0x134>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d040      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a41      	ldr	r2, [pc, #260]	; (800cb58 <DMA_MultiBufferSetConfig+0x138>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d03b      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a40      	ldr	r2, [pc, #256]	; (800cb5c <DMA_MultiBufferSetConfig+0x13c>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d036      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a3e      	ldr	r2, [pc, #248]	; (800cb60 <DMA_MultiBufferSetConfig+0x140>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d031      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a3d      	ldr	r2, [pc, #244]	; (800cb64 <DMA_MultiBufferSetConfig+0x144>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d02c      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a3b      	ldr	r2, [pc, #236]	; (800cb68 <DMA_MultiBufferSetConfig+0x148>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d027      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a3a      	ldr	r2, [pc, #232]	; (800cb6c <DMA_MultiBufferSetConfig+0x14c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d022      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a38      	ldr	r2, [pc, #224]	; (800cb70 <DMA_MultiBufferSetConfig+0x150>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d01d      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a37      	ldr	r2, [pc, #220]	; (800cb74 <DMA_MultiBufferSetConfig+0x154>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d018      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a35      	ldr	r2, [pc, #212]	; (800cb78 <DMA_MultiBufferSetConfig+0x158>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d013      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a34      	ldr	r2, [pc, #208]	; (800cb7c <DMA_MultiBufferSetConfig+0x15c>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d00e      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a32      	ldr	r2, [pc, #200]	; (800cb80 <DMA_MultiBufferSetConfig+0x160>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d009      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a31      	ldr	r2, [pc, #196]	; (800cb84 <DMA_MultiBufferSetConfig+0x164>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d004      	beq.n	800cace <DMA_MultiBufferSetConfig+0xae>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a2f      	ldr	r2, [pc, #188]	; (800cb88 <DMA_MultiBufferSetConfig+0x168>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d101      	bne.n	800cad2 <DMA_MultiBufferSetConfig+0xb2>
 800cace:	2301      	movs	r3, #1
 800cad0:	e000      	b.n	800cad4 <DMA_MultiBufferSetConfig+0xb4>
 800cad2:	2300      	movs	r3, #0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d019      	beq.n	800cb0c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	2b40      	cmp	r3, #64	; 0x40
 800cae6:	d108      	bne.n	800cafa <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800caf8:	e021      	b.n	800cb3e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	60da      	str	r2, [r3, #12]
}
 800cb0a:	e018      	b.n	800cb3e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	2b40      	cmp	r3, #64	; 0x40
 800cb1a:	d108      	bne.n	800cb2e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	60da      	str	r2, [r3, #12]
}
 800cb2c:	e007      	b.n	800cb3e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	60da      	str	r2, [r3, #12]
}
 800cb3e:	bf00      	nop
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	40020010 	.word	0x40020010
 800cb50:	40020028 	.word	0x40020028
 800cb54:	40020040 	.word	0x40020040
 800cb58:	40020058 	.word	0x40020058
 800cb5c:	40020070 	.word	0x40020070
 800cb60:	40020088 	.word	0x40020088
 800cb64:	400200a0 	.word	0x400200a0
 800cb68:	400200b8 	.word	0x400200b8
 800cb6c:	40020410 	.word	0x40020410
 800cb70:	40020428 	.word	0x40020428
 800cb74:	40020440 	.word	0x40020440
 800cb78:	40020458 	.word	0x40020458
 800cb7c:	40020470 	.word	0x40020470
 800cb80:	40020488 	.word	0x40020488
 800cb84:	400204a0 	.word	0x400204a0
 800cb88:	400204b8 	.word	0x400204b8

0800cb8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b089      	sub	sp, #36	; 0x24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cb9a:	4b89      	ldr	r3, [pc, #548]	; (800cdc0 <HAL_GPIO_Init+0x234>)
 800cb9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cb9e:	e194      	b.n	800ceca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	2101      	movs	r1, #1
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	fa01 f303 	lsl.w	r3, r1, r3
 800cbac:	4013      	ands	r3, r2
 800cbae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f000 8186 	beq.w	800cec4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d005      	beq.n	800cbd0 <HAL_GPIO_Init+0x44>
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	f003 0303 	and.w	r3, r3, #3
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d130      	bne.n	800cc32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	2203      	movs	r2, #3
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	43db      	mvns	r3, r3
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	68da      	ldr	r2, [r3, #12]
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cc06:	2201      	movs	r2, #1
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0e:	43db      	mvns	r3, r3
 800cc10:	69ba      	ldr	r2, [r7, #24]
 800cc12:	4013      	ands	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	091b      	lsrs	r3, r3, #4
 800cc1c:	f003 0201 	and.w	r2, r3, #1
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	fa02 f303 	lsl.w	r3, r2, r3
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	69ba      	ldr	r2, [r7, #24]
 800cc30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f003 0303 	and.w	r3, r3, #3
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d017      	beq.n	800cc6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	2203      	movs	r2, #3
 800cc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4e:	43db      	mvns	r3, r3
 800cc50:	69ba      	ldr	r2, [r7, #24]
 800cc52:	4013      	ands	r3, r2
 800cc54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	689a      	ldr	r2, [r3, #8]
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f003 0303 	and.w	r3, r3, #3
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d123      	bne.n	800ccc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	08da      	lsrs	r2, r3, #3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3208      	adds	r2, #8
 800cc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	f003 0307 	and.w	r3, r3, #7
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	220f      	movs	r2, #15
 800cc92:	fa02 f303 	lsl.w	r3, r2, r3
 800cc96:	43db      	mvns	r3, r3
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	691a      	ldr	r2, [r3, #16]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	f003 0307 	and.w	r3, r3, #7
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	fa02 f303 	lsl.w	r3, r2, r3
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	08da      	lsrs	r2, r3, #3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3208      	adds	r2, #8
 800ccbc:	69b9      	ldr	r1, [r7, #24]
 800ccbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	2203      	movs	r2, #3
 800ccce:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd2:	43db      	mvns	r3, r3
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f003 0203 	and.w	r2, r3, #3
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	69ba      	ldr	r2, [r7, #24]
 800ccf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 80e0 	beq.w	800cec4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd04:	4b2f      	ldr	r3, [pc, #188]	; (800cdc4 <HAL_GPIO_Init+0x238>)
 800cd06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd0a:	4a2e      	ldr	r2, [pc, #184]	; (800cdc4 <HAL_GPIO_Init+0x238>)
 800cd0c:	f043 0302 	orr.w	r3, r3, #2
 800cd10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cd14:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <HAL_GPIO_Init+0x238>)
 800cd16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd1a:	f003 0302 	and.w	r3, r3, #2
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cd22:	4a29      	ldr	r2, [pc, #164]	; (800cdc8 <HAL_GPIO_Init+0x23c>)
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	089b      	lsrs	r3, r3, #2
 800cd28:	3302      	adds	r3, #2
 800cd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	220f      	movs	r2, #15
 800cd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd3e:	43db      	mvns	r3, r3
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	4013      	ands	r3, r2
 800cd44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a20      	ldr	r2, [pc, #128]	; (800cdcc <HAL_GPIO_Init+0x240>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d052      	beq.n	800cdf4 <HAL_GPIO_Init+0x268>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1f      	ldr	r2, [pc, #124]	; (800cdd0 <HAL_GPIO_Init+0x244>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d031      	beq.n	800cdba <HAL_GPIO_Init+0x22e>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a1e      	ldr	r2, [pc, #120]	; (800cdd4 <HAL_GPIO_Init+0x248>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d02b      	beq.n	800cdb6 <HAL_GPIO_Init+0x22a>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a1d      	ldr	r2, [pc, #116]	; (800cdd8 <HAL_GPIO_Init+0x24c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d025      	beq.n	800cdb2 <HAL_GPIO_Init+0x226>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a1c      	ldr	r2, [pc, #112]	; (800cddc <HAL_GPIO_Init+0x250>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d01f      	beq.n	800cdae <HAL_GPIO_Init+0x222>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a1b      	ldr	r2, [pc, #108]	; (800cde0 <HAL_GPIO_Init+0x254>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d019      	beq.n	800cdaa <HAL_GPIO_Init+0x21e>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a1a      	ldr	r2, [pc, #104]	; (800cde4 <HAL_GPIO_Init+0x258>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d013      	beq.n	800cda6 <HAL_GPIO_Init+0x21a>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a19      	ldr	r2, [pc, #100]	; (800cde8 <HAL_GPIO_Init+0x25c>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d00d      	beq.n	800cda2 <HAL_GPIO_Init+0x216>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a18      	ldr	r2, [pc, #96]	; (800cdec <HAL_GPIO_Init+0x260>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d007      	beq.n	800cd9e <HAL_GPIO_Init+0x212>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a17      	ldr	r2, [pc, #92]	; (800cdf0 <HAL_GPIO_Init+0x264>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d101      	bne.n	800cd9a <HAL_GPIO_Init+0x20e>
 800cd96:	2309      	movs	r3, #9
 800cd98:	e02d      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cd9a:	230a      	movs	r3, #10
 800cd9c:	e02b      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cd9e:	2308      	movs	r3, #8
 800cda0:	e029      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cda2:	2307      	movs	r3, #7
 800cda4:	e027      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cda6:	2306      	movs	r3, #6
 800cda8:	e025      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdaa:	2305      	movs	r3, #5
 800cdac:	e023      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdae:	2304      	movs	r3, #4
 800cdb0:	e021      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e01f      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e01d      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e01b      	b.n	800cdf6 <HAL_GPIO_Init+0x26a>
 800cdbe:	bf00      	nop
 800cdc0:	58000080 	.word	0x58000080
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	58000400 	.word	0x58000400
 800cdcc:	58020000 	.word	0x58020000
 800cdd0:	58020400 	.word	0x58020400
 800cdd4:	58020800 	.word	0x58020800
 800cdd8:	58020c00 	.word	0x58020c00
 800cddc:	58021000 	.word	0x58021000
 800cde0:	58021400 	.word	0x58021400
 800cde4:	58021800 	.word	0x58021800
 800cde8:	58021c00 	.word	0x58021c00
 800cdec:	58022000 	.word	0x58022000
 800cdf0:	58022400 	.word	0x58022400
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	69fa      	ldr	r2, [r7, #28]
 800cdf8:	f002 0203 	and.w	r2, r2, #3
 800cdfc:	0092      	lsls	r2, r2, #2
 800cdfe:	4093      	lsls	r3, r2
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ce06:	4938      	ldr	r1, [pc, #224]	; (800cee8 <HAL_GPIO_Init+0x35c>)
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	089b      	lsrs	r3, r3, #2
 800ce0c:	3302      	adds	r3, #2
 800ce0e:	69ba      	ldr	r2, [r7, #24]
 800ce10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ce14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	43db      	mvns	r3, r3
 800ce20:	69ba      	ldr	r2, [r7, #24]
 800ce22:	4013      	ands	r3, r2
 800ce24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ce3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ce42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	69ba      	ldr	r2, [r7, #24]
 800ce50:	4013      	ands	r3, r2
 800ce52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ce60:	69ba      	ldr	r2, [r7, #24]
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ce68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	43db      	mvns	r3, r3
 800ce7a:	69ba      	ldr	r2, [r7, #24]
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ce8c:	69ba      	ldr	r2, [r7, #24]
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	43db      	mvns	r3, r3
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	4013      	ands	r3, r2
 800cea8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ceb6:	69ba      	ldr	r2, [r7, #24]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	69ba      	ldr	r2, [r7, #24]
 800cec2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	3301      	adds	r3, #1
 800cec8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	fa22 f303 	lsr.w	r3, r2, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f47f ae63 	bne.w	800cba0 <HAL_GPIO_Init+0x14>
  }
}
 800ceda:	bf00      	nop
 800cedc:	bf00      	nop
 800cede:	3724      	adds	r7, #36	; 0x24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	58000400 	.word	0x58000400

0800ceec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	807b      	strh	r3, [r7, #2]
 800cef8:	4613      	mov	r3, r2
 800cefa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cefc:	787b      	ldrb	r3, [r7, #1]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf02:	887a      	ldrh	r2, [r7, #2]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cf08:	e003      	b.n	800cf12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cf0a:	887b      	ldrh	r3, [r7, #2]
 800cf0c:	041a      	lsls	r2, r3, #16
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	619a      	str	r2, [r3, #24]
}
 800cf12:	bf00      	nop
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cf1e:	b480      	push	{r7}
 800cf20:	b085      	sub	sp, #20
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	460b      	mov	r3, r1
 800cf28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf30:	887a      	ldrh	r2, [r7, #2]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4013      	ands	r3, r2
 800cf36:	041a      	lsls	r2, r3, #16
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	43d9      	mvns	r1, r3
 800cf3c:	887b      	ldrh	r3, [r7, #2]
 800cf3e:	400b      	ands	r3, r1
 800cf40:	431a      	orrs	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	619a      	str	r2, [r3, #24]
}
 800cf46:	bf00      	nop
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
	...

0800cf54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e07f      	b.n	800d066 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7fb f8c6 	bl	800810c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2224      	movs	r2, #36	; 0x24
 800cf84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f022 0201 	bic.w	r2, r2, #1
 800cf96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cfa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689a      	ldr	r2, [r3, #8]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d107      	bne.n	800cfce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	689a      	ldr	r2, [r3, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfca:	609a      	str	r2, [r3, #8]
 800cfcc:	e006      	b.n	800cfdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	689a      	ldr	r2, [r3, #8]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cfda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d104      	bne.n	800cfee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6859      	ldr	r1, [r3, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b1d      	ldr	r3, [pc, #116]	; (800d070 <HAL_I2C_Init+0x11c>)
 800cffa:	430b      	orrs	r3, r1
 800cffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68da      	ldr	r2, [r3, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d00c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691a      	ldr	r2, [r3, #16]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	430a      	orrs	r2, r1
 800d026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	69d9      	ldr	r1, [r3, #28]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a1a      	ldr	r2, [r3, #32]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	430a      	orrs	r2, r1
 800d036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0201 	orr.w	r2, r2, #1
 800d046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2220      	movs	r2, #32
 800d052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	02008000 	.word	0x02008000

0800d074 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	461a      	mov	r2, r3
 800d080:	460b      	mov	r3, r1
 800d082:	817b      	strh	r3, [r7, #10]
 800d084:	4613      	mov	r3, r2
 800d086:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b20      	cmp	r3, #32
 800d092:	f040 80da 	bne.w	800d24a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d101      	bne.n	800d0a4 <HAL_I2C_Master_Transmit+0x30>
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	e0d3      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d0ac:	f7fb fe2e 	bl	8008d0c <HAL_GetTick>
 800d0b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	2319      	movs	r3, #25
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f9e6 	bl	800d490 <I2C_WaitOnFlagUntilTimeout>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e0be      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2221      	movs	r2, #33	; 0x21
 800d0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2210      	movs	r2, #16
 800d0da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	893a      	ldrh	r2, [r7, #8]
 800d0ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	2bff      	cmp	r3, #255	; 0xff
 800d0fe:	d90e      	bls.n	800d11e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	22ff      	movs	r2, #255	; 0xff
 800d104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	8979      	ldrh	r1, [r7, #10]
 800d10e:	4b51      	ldr	r3, [pc, #324]	; (800d254 <HAL_I2C_Master_Transmit+0x1e0>)
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 fbdc 	bl	800d8d4 <I2C_TransferConfig>
 800d11c:	e06c      	b.n	800d1f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d122:	b29a      	uxth	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	8979      	ldrh	r1, [r7, #10]
 800d130:	4b48      	ldr	r3, [pc, #288]	; (800d254 <HAL_I2C_Master_Transmit+0x1e0>)
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f000 fbcb 	bl	800d8d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d13e:	e05b      	b.n	800d1f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	6a39      	ldr	r1, [r7, #32]
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 f9e3 	bl	800d510 <I2C_WaitOnTXISFlagUntilTimeout>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e07b      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d16e:	b29b      	uxth	r3, r3
 800d170:	3b01      	subs	r3, #1
 800d172:	b29a      	uxth	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d17c:	3b01      	subs	r3, #1
 800d17e:	b29a      	uxth	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d034      	beq.n	800d1f8 <HAL_I2C_Master_Transmit+0x184>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d192:	2b00      	cmp	r3, #0
 800d194:	d130      	bne.n	800d1f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	2200      	movs	r2, #0
 800d19e:	2180      	movs	r1, #128	; 0x80
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 f975 	bl	800d490 <I2C_WaitOnFlagUntilTimeout>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e04d      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2bff      	cmp	r3, #255	; 0xff
 800d1b8:	d90e      	bls.n	800d1d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	22ff      	movs	r2, #255	; 0xff
 800d1be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	8979      	ldrh	r1, [r7, #10]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 fb7f 	bl	800d8d4 <I2C_TransferConfig>
 800d1d6:	e00f      	b.n	800d1f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	8979      	ldrh	r1, [r7, #10]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 fb6e 	bl	800d8d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d19e      	bne.n	800d140 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	6a39      	ldr	r1, [r7, #32]
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 f9c2 	bl	800d590 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e01a      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2220      	movs	r2, #32
 800d21c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6859      	ldr	r1, [r3, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <HAL_I2C_Master_Transmit+0x1e4>)
 800d22a:	400b      	ands	r3, r1
 800d22c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2220      	movs	r2, #32
 800d232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	e000      	b.n	800d24c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d24a:	2302      	movs	r3, #2
  }
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	80002000 	.word	0x80002000
 800d258:	fe00e800 	.word	0xfe00e800

0800d25c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af02      	add	r7, sp, #8
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	461a      	mov	r2, r3
 800d268:	460b      	mov	r3, r1
 800d26a:	817b      	strh	r3, [r7, #10]
 800d26c:	4613      	mov	r3, r2
 800d26e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b20      	cmp	r3, #32
 800d27a:	f040 80db 	bne.w	800d434 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d284:	2b01      	cmp	r3, #1
 800d286:	d101      	bne.n	800d28c <HAL_I2C_Master_Receive+0x30>
 800d288:	2302      	movs	r3, #2
 800d28a:	e0d4      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d294:	f7fb fd3a 	bl	8008d0c <HAL_GetTick>
 800d298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	2319      	movs	r3, #25
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 f8f2 	bl	800d490 <I2C_WaitOnFlagUntilTimeout>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e0bf      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2222      	movs	r2, #34	; 0x22
 800d2ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2210      	movs	r2, #16
 800d2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	893a      	ldrh	r2, [r7, #8]
 800d2d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2bff      	cmp	r3, #255	; 0xff
 800d2e6:	d90e      	bls.n	800d306 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	22ff      	movs	r2, #255	; 0xff
 800d2ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	8979      	ldrh	r1, [r7, #10]
 800d2f6:	4b52      	ldr	r3, [pc, #328]	; (800d440 <HAL_I2C_Master_Receive+0x1e4>)
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 fae8 	bl	800d8d4 <I2C_TransferConfig>
 800d304:	e06d      	b.n	800d3e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d314:	b2da      	uxtb	r2, r3
 800d316:	8979      	ldrh	r1, [r7, #10]
 800d318:	4b49      	ldr	r3, [pc, #292]	; (800d440 <HAL_I2C_Master_Receive+0x1e4>)
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f000 fad7 	bl	800d8d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d326:	e05c      	b.n	800d3e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	6a39      	ldr	r1, [r7, #32]
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f000 f96b 	bl	800d608 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d001      	beq.n	800d33c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e07c      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d358:	3b01      	subs	r3, #1
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d364:	b29b      	uxth	r3, r3
 800d366:	3b01      	subs	r3, #1
 800d368:	b29a      	uxth	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d372:	b29b      	uxth	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d034      	beq.n	800d3e2 <HAL_I2C_Master_Receive+0x186>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d130      	bne.n	800d3e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	2200      	movs	r2, #0
 800d388:	2180      	movs	r1, #128	; 0x80
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f880 	bl	800d490 <I2C_WaitOnFlagUntilTimeout>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e04d      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	2bff      	cmp	r3, #255	; 0xff
 800d3a2:	d90e      	bls.n	800d3c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	22ff      	movs	r2, #255	; 0xff
 800d3a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	8979      	ldrh	r1, [r7, #10]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 fa8a 	bl	800d8d4 <I2C_TransferConfig>
 800d3c0:	e00f      	b.n	800d3e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	8979      	ldrh	r1, [r7, #10]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 fa79 	bl	800d8d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d19d      	bne.n	800d328 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	6a39      	ldr	r1, [r7, #32]
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f000 f8cd 	bl	800d590 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e01a      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2220      	movs	r2, #32
 800d406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6859      	ldr	r1, [r3, #4]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <HAL_I2C_Master_Receive+0x1e8>)
 800d414:	400b      	ands	r3, r1
 800d416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2220      	movs	r2, #32
 800d41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	e000      	b.n	800d436 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d434:	2302      	movs	r3, #2
  }
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	80002400 	.word	0x80002400
 800d444:	fe00e800 	.word	0xfe00e800

0800d448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d103      	bne.n	800d466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b01      	cmp	r3, #1
 800d472:	d007      	beq.n	800d484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	699a      	ldr	r2, [r3, #24]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f042 0201 	orr.w	r2, r2, #1
 800d482:	619a      	str	r2, [r3, #24]
  }
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	4613      	mov	r3, r2
 800d49e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4a0:	e022      	b.n	800d4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4a8:	d01e      	beq.n	800d4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4aa:	f7fb fc2f 	bl	8008d0c <HAL_GetTick>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d302      	bcc.n	800d4c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d113      	bne.n	800d4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4c4:	f043 0220 	orr.w	r2, r3, #32
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2220      	movs	r2, #32
 800d4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e00f      	b.n	800d508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	699a      	ldr	r2, [r3, #24]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	bf0c      	ite	eq
 800d4f8:	2301      	moveq	r3, #1
 800d4fa:	2300      	movne	r3, #0
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	461a      	mov	r2, r3
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	429a      	cmp	r2, r3
 800d504:	d0cd      	beq.n	800d4a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d51c:	e02c      	b.n	800d578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f000 f8ea 	bl	800d6fc <I2C_IsErrorOccurred>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e02a      	b.n	800d588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d538:	d01e      	beq.n	800d578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d53a:	f7fb fbe7 	bl	8008d0c <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	429a      	cmp	r2, r3
 800d548:	d302      	bcc.n	800d550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d113      	bne.n	800d578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d554:	f043 0220 	orr.w	r2, r3, #32
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2220      	movs	r2, #32
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e007      	b.n	800d588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	2b02      	cmp	r3, #2
 800d584:	d1cb      	bne.n	800d51e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d59c:	e028      	b.n	800d5f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	68b9      	ldr	r1, [r7, #8]
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 f8aa 	bl	800d6fc <I2C_IsErrorOccurred>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e026      	b.n	800d600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5b2:	f7fb fbab 	bl	8008d0c <HAL_GetTick>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d302      	bcc.n	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d113      	bne.n	800d5f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5cc:	f043 0220 	orr.w	r2, r3, #32
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2220      	movs	r2, #32
 800d5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e007      	b.n	800d600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	f003 0320 	and.w	r3, r3, #32
 800d5fa:	2b20      	cmp	r3, #32
 800d5fc:	d1cf      	bne.n	800d59e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d614:	e064      	b.n	800d6e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	68b9      	ldr	r1, [r7, #8]
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 f86e 	bl	800d6fc <I2C_IsErrorOccurred>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e062      	b.n	800d6f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	f003 0320 	and.w	r3, r3, #32
 800d634:	2b20      	cmp	r3, #32
 800d636:	d138      	bne.n	800d6aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	f003 0304 	and.w	r3, r3, #4
 800d642:	2b04      	cmp	r3, #4
 800d644:	d105      	bne.n	800d652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	e04e      	b.n	800d6f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b10      	cmp	r3, #16
 800d65e:	d107      	bne.n	800d670 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2210      	movs	r2, #16
 800d666:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2204      	movs	r2, #4
 800d66c:	645a      	str	r2, [r3, #68]	; 0x44
 800d66e:	e002      	b.n	800d676 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2220      	movs	r2, #32
 800d67c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6859      	ldr	r1, [r3, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	4b1b      	ldr	r3, [pc, #108]	; (800d6f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800d68a:	400b      	ands	r3, r1
 800d68c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2220      	movs	r2, #32
 800d692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e022      	b.n	800d6f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6aa:	f7fb fb2f 	bl	8008d0c <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d302      	bcc.n	800d6c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10f      	bne.n	800d6e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6c4:	f043 0220 	orr.w	r2, r3, #32
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e007      	b.n	800d6f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	f003 0304 	and.w	r3, r3, #4
 800d6ea:	2b04      	cmp	r3, #4
 800d6ec:	d193      	bne.n	800d616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	fe00e800 	.word	0xfe00e800

0800d6fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	; 0x28
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d716:	2300      	movs	r3, #0
 800d718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	f003 0310 	and.w	r3, r3, #16
 800d724:	2b00      	cmp	r3, #0
 800d726:	d075      	beq.n	800d814 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2210      	movs	r2, #16
 800d72e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d730:	e056      	b.n	800d7e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d738:	d052      	beq.n	800d7e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d73a:	f7fb fae7 	bl	8008d0c <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	429a      	cmp	r2, r3
 800d748:	d302      	bcc.n	800d750 <I2C_IsErrorOccurred+0x54>
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d147      	bne.n	800d7e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d75a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d772:	d12e      	bne.n	800d7d2 <I2C_IsErrorOccurred+0xd6>
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d77a:	d02a      	beq.n	800d7d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d77c:	7cfb      	ldrb	r3, [r7, #19]
 800d77e:	2b20      	cmp	r3, #32
 800d780:	d027      	beq.n	800d7d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d790:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d792:	f7fb fabb 	bl	8008d0c <HAL_GetTick>
 800d796:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d798:	e01b      	b.n	800d7d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d79a:	f7fb fab7 	bl	8008d0c <HAL_GetTick>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b19      	cmp	r3, #25
 800d7a6:	d914      	bls.n	800d7d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ac:	f043 0220 	orr.w	r2, r3, #32
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	d1dc      	bne.n	800d79a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	d003      	beq.n	800d7f6 <I2C_IsErrorOccurred+0xfa>
 800d7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d09d      	beq.n	800d732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d7f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d103      	bne.n	800d806 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2220      	movs	r2, #32
 800d804:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	f043 0304 	orr.w	r3, r3, #4
 800d80c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	f043 0301 	orr.w	r3, r3, #1
 800d82c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00b      	beq.n	800d860 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	f043 0308 	orr.w	r3, r3, #8
 800d84e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00b      	beq.n	800d882 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	f043 0302 	orr.w	r3, r3, #2
 800d870:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d87a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d886:	2b00      	cmp	r3, #0
 800d888:	d01c      	beq.n	800d8c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f7ff fddc 	bl	800d448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6859      	ldr	r1, [r3, #4]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	4b0d      	ldr	r3, [pc, #52]	; (800d8d0 <I2C_IsErrorOccurred+0x1d4>)
 800d89c:	400b      	ands	r3, r1
 800d89e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2220      	movs	r2, #32
 800d8b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3728      	adds	r7, #40	; 0x28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	fe00e800 	.word	0xfe00e800

0800d8d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	607b      	str	r3, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	817b      	strh	r3, [r7, #10]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d8e6:	897b      	ldrh	r3, [r7, #10]
 800d8e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d8ec:	7a7b      	ldrb	r3, [r7, #9]
 800d8ee:	041b      	lsls	r3, r3, #16
 800d8f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d8f4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d902:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	0d5b      	lsrs	r3, r3, #21
 800d90e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d912:	4b08      	ldr	r3, [pc, #32]	; (800d934 <I2C_TransferConfig+0x60>)
 800d914:	430b      	orrs	r3, r1
 800d916:	43db      	mvns	r3, r3
 800d918:	ea02 0103 	and.w	r1, r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	430a      	orrs	r2, r1
 800d924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d926:	bf00      	nop
 800d928:	371c      	adds	r7, #28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	03ff63ff 	.word	0x03ff63ff

0800d938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b20      	cmp	r3, #32
 800d94c:	d138      	bne.n	800d9c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d954:	2b01      	cmp	r3, #1
 800d956:	d101      	bne.n	800d95c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d958:	2302      	movs	r3, #2
 800d95a:	e032      	b.n	800d9c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2224      	movs	r2, #36	; 0x24
 800d968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f022 0201 	bic.w	r2, r2, #1
 800d97a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d98a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	6819      	ldr	r1, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	430a      	orrs	r2, r1
 800d99a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2220      	movs	r2, #32
 800d9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	e000      	b.n	800d9c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d9c0:	2302      	movs	r3, #2
  }
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b20      	cmp	r3, #32
 800d9e2:	d139      	bne.n	800da58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d101      	bne.n	800d9f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d9ee:	2302      	movs	r3, #2
 800d9f0:	e033      	b.n	800da5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2224      	movs	r2, #36	; 0x24
 800d9fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f022 0201 	bic.w	r2, r2, #1
 800da10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800da20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	021b      	lsls	r3, r3, #8
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	4313      	orrs	r3, r2
 800da2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f042 0201 	orr.w	r2, r2, #1
 800da42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2220      	movs	r2, #32
 800da48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	e000      	b.n	800da5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800da58:	2302      	movs	r3, #2
  }
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
	...

0800da68 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d101      	bne.n	800da7a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	e097      	b.n	800dbaa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d106      	bne.n	800da9a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7fa fb9f 	bl	80081d8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2202      	movs	r2, #2
 800da9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d004      	beq.n	800dabc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800daba:	d103      	bne.n	800dac4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f023 031e 	bic.w	r3, r3, #30
 800dac2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dacc:	4293      	cmp	r3, r2
 800dace:	d003      	beq.n	800dad8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4b38      	ldr	r3, [pc, #224]	; (800dbb4 <HAL_LPTIM_Init+0x14c>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4b37      	ldr	r3, [pc, #220]	; (800dbb8 <HAL_LPTIM_Init+0x150>)
 800dadc:	4013      	ands	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800dae8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800daee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800daf4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800dafa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	4313      	orrs	r3, r2
 800db00:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d107      	bne.n	800db1a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800db12:	4313      	orrs	r3, r2
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4313      	orrs	r3, r2
 800db18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d004      	beq.n	800db2c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db2a:	d107      	bne.n	800db3c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800db34:	4313      	orrs	r3, r2
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	4313      	orrs	r3, r2
 800db3a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db44:	4293      	cmp	r3, r2
 800db46:	d00a      	beq.n	800db5e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800db50:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800db56:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a14      	ldr	r2, [pc, #80]	; (800dbbc <HAL_LPTIM_Init+0x154>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d004      	beq.n	800db7a <HAL_LPTIM_Init+0x112>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a12      	ldr	r2, [pc, #72]	; (800dbc0 <HAL_LPTIM_Init+0x158>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d108      	bne.n	800db8c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	430a      	orrs	r2, r1
 800db88:	625a      	str	r2, [r3, #36]	; 0x24
 800db8a:	e009      	b.n	800dba0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a0c      	ldr	r2, [pc, #48]	; (800dbc4 <HAL_LPTIM_Init+0x15c>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d104      	bne.n	800dba0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800db9e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	ffff1f3f 	.word	0xffff1f3f
 800dbb8:	ff19f1fe 	.word	0xff19f1fe
 800dbbc:	40002400 	.word	0x40002400
 800dbc0:	58002400 	.word	0x58002400
 800dbc4:	58002800 	.word	0x58002800

0800dbc8 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68da      	ldr	r2, [r3, #12]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dbea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	691a      	ldr	r2, [r3, #16]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0201 	orr.w	r2, r2, #1
 800dbfa:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2210      	movs	r2, #16
 800dc02:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800dc0c:	2110      	movs	r1, #16
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f000 f852 	bl	800dcb8 <LPTIM_WaitForFlag>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d101      	bne.n	800dc1e <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	e01d      	b.n	800dc5a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2208      	movs	r2, #8
 800dc24:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800dc2e:	2108      	movs	r1, #8
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 f841 	bl	800dcb8 <LPTIM_WaitForFlag>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d101      	bne.n	800dc40 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	e00c      	b.n	800dc5a <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	691a      	ldr	r2, [r3, #16]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f042 0204 	orr.w	r2, r2, #4
 800dc4e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <HAL_LPTIM_PWM_Stop>:
  * @brief  Stop the LPTIM PWM generation.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f850 	bl	800dd18 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f80e 	bl	800dc9a <HAL_LPTIM_GetState>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d101      	bne.n	800dc88 <HAL_LPTIM_PWM_Stop+0x26>
  {
    return HAL_TIMEOUT;
 800dc84:	2303      	movs	r3, #3
 800dc86:	e004      	b.n	800dc92 <HAL_LPTIM_PWM_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b083      	sub	sp, #12
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dca8:	b2db      	uxtb	r3, r3
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800dcc6:	4b12      	ldr	r3, [pc, #72]	; (800dd10 <LPTIM_WaitForFlag+0x58>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a12      	ldr	r2, [pc, #72]	; (800dd14 <LPTIM_WaitForFlag+0x5c>)
 800dccc:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd0:	0b9b      	lsrs	r3, r3, #14
 800dcd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcd6:	fb02 f303 	mul.w	r3, r2, r3
 800dcda:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3b01      	subs	r3, #1
 800dce0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800dce8:	2303      	movs	r3, #3
 800dcea:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	683a      	ldr	r2, [r7, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d002      	beq.n	800dd02 <LPTIM_WaitForFlag+0x4a>
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1ec      	bne.n	800dcdc <LPTIM_WaitForFlag+0x24>

  return result;
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	24000030 	.word	0x24000030
 800dd14:	d1b71759 	.word	0xd1b71759

0800dd18 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b08c      	sub	sp, #48	; 0x30
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd24:	f3ef 8310 	mrs	r3, PRIMASK
 800dd28:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800dd2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd2e:	2301      	movs	r3, #1
 800dd30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	f383 8810 	msr	PRIMASK, r3
}
 800dd38:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a81      	ldr	r2, [pc, #516]	; (800df44 <LPTIM_Disable+0x22c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d02d      	beq.n	800dda0 <LPTIM_Disable+0x88>
 800dd44:	4a7f      	ldr	r2, [pc, #508]	; (800df44 <LPTIM_Disable+0x22c>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d830      	bhi.n	800ddac <LPTIM_Disable+0x94>
 800dd4a:	4a7f      	ldr	r2, [pc, #508]	; (800df48 <LPTIM_Disable+0x230>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d021      	beq.n	800dd94 <LPTIM_Disable+0x7c>
 800dd50:	4a7d      	ldr	r2, [pc, #500]	; (800df48 <LPTIM_Disable+0x230>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d82a      	bhi.n	800ddac <LPTIM_Disable+0x94>
 800dd56:	4a7d      	ldr	r2, [pc, #500]	; (800df4c <LPTIM_Disable+0x234>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d015      	beq.n	800dd88 <LPTIM_Disable+0x70>
 800dd5c:	4a7b      	ldr	r2, [pc, #492]	; (800df4c <LPTIM_Disable+0x234>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d824      	bhi.n	800ddac <LPTIM_Disable+0x94>
 800dd62:	4a7b      	ldr	r2, [pc, #492]	; (800df50 <LPTIM_Disable+0x238>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d003      	beq.n	800dd70 <LPTIM_Disable+0x58>
 800dd68:	4a7a      	ldr	r2, [pc, #488]	; (800df54 <LPTIM_Disable+0x23c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d006      	beq.n	800dd7c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800dd6e:	e01d      	b.n	800ddac <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800dd70:	4b79      	ldr	r3, [pc, #484]	; (800df58 <LPTIM_Disable+0x240>)
 800dd72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd74:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800dd78:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800dd7a:	e018      	b.n	800ddae <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800dd7c:	4b76      	ldr	r3, [pc, #472]	; (800df58 <LPTIM_Disable+0x240>)
 800dd7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd80:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800dd84:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800dd86:	e012      	b.n	800ddae <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800dd88:	4b73      	ldr	r3, [pc, #460]	; (800df58 <LPTIM_Disable+0x240>)
 800dd8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd90:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800dd92:	e00c      	b.n	800ddae <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800dd94:	4b70      	ldr	r3, [pc, #448]	; (800df58 <LPTIM_Disable+0x240>)
 800dd96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800dd9e:	e006      	b.n	800ddae <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 800dda0:	4b6d      	ldr	r3, [pc, #436]	; (800df58 <LPTIM_Disable+0x240>)
 800dda2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dda4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dda8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800ddaa:	e000      	b.n	800ddae <LPTIM_Disable+0x96>
      break;
 800ddac:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	695b      	ldr	r3, [r3, #20]
 800ddc4:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a5a      	ldr	r2, [pc, #360]	; (800df44 <LPTIM_Disable+0x22c>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d059      	beq.n	800de94 <LPTIM_Disable+0x17c>
 800dde0:	4a58      	ldr	r2, [pc, #352]	; (800df44 <LPTIM_Disable+0x22c>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d867      	bhi.n	800deb6 <LPTIM_Disable+0x19e>
 800dde6:	4a58      	ldr	r2, [pc, #352]	; (800df48 <LPTIM_Disable+0x230>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d042      	beq.n	800de72 <LPTIM_Disable+0x15a>
 800ddec:	4a56      	ldr	r2, [pc, #344]	; (800df48 <LPTIM_Disable+0x230>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d861      	bhi.n	800deb6 <LPTIM_Disable+0x19e>
 800ddf2:	4a56      	ldr	r2, [pc, #344]	; (800df4c <LPTIM_Disable+0x234>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d02b      	beq.n	800de50 <LPTIM_Disable+0x138>
 800ddf8:	4a54      	ldr	r2, [pc, #336]	; (800df4c <LPTIM_Disable+0x234>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d85b      	bhi.n	800deb6 <LPTIM_Disable+0x19e>
 800ddfe:	4a54      	ldr	r2, [pc, #336]	; (800df50 <LPTIM_Disable+0x238>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <LPTIM_Disable+0xf4>
 800de04:	4a53      	ldr	r2, [pc, #332]	; (800df54 <LPTIM_Disable+0x23c>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d011      	beq.n	800de2e <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800de0a:	e054      	b.n	800deb6 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800de0c:	4b52      	ldr	r3, [pc, #328]	; (800df58 <LPTIM_Disable+0x240>)
 800de0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de12:	4a51      	ldr	r2, [pc, #324]	; (800df58 <LPTIM_Disable+0x240>)
 800de14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800de1c:	4b4e      	ldr	r3, [pc, #312]	; (800df58 <LPTIM_Disable+0x240>)
 800de1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de22:	4a4d      	ldr	r2, [pc, #308]	; (800df58 <LPTIM_Disable+0x240>)
 800de24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 800de2c:	e044      	b.n	800deb8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800de2e:	4b4a      	ldr	r3, [pc, #296]	; (800df58 <LPTIM_Disable+0x240>)
 800de30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de34:	4a48      	ldr	r2, [pc, #288]	; (800df58 <LPTIM_Disable+0x240>)
 800de36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800de3e:	4b46      	ldr	r3, [pc, #280]	; (800df58 <LPTIM_Disable+0x240>)
 800de40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de44:	4a44      	ldr	r2, [pc, #272]	; (800df58 <LPTIM_Disable+0x240>)
 800de46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800de4e:	e033      	b.n	800deb8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800de50:	4b41      	ldr	r3, [pc, #260]	; (800df58 <LPTIM_Disable+0x240>)
 800de52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de56:	4a40      	ldr	r2, [pc, #256]	; (800df58 <LPTIM_Disable+0x240>)
 800de58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800de5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800de60:	4b3d      	ldr	r3, [pc, #244]	; (800df58 <LPTIM_Disable+0x240>)
 800de62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de66:	4a3c      	ldr	r2, [pc, #240]	; (800df58 <LPTIM_Disable+0x240>)
 800de68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800de70:	e022      	b.n	800deb8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800de72:	4b39      	ldr	r3, [pc, #228]	; (800df58 <LPTIM_Disable+0x240>)
 800de74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de78:	4a37      	ldr	r2, [pc, #220]	; (800df58 <LPTIM_Disable+0x240>)
 800de7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800de82:	4b35      	ldr	r3, [pc, #212]	; (800df58 <LPTIM_Disable+0x240>)
 800de84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de88:	4a33      	ldr	r2, [pc, #204]	; (800df58 <LPTIM_Disable+0x240>)
 800de8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800de92:	e011      	b.n	800deb8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800de94:	4b30      	ldr	r3, [pc, #192]	; (800df58 <LPTIM_Disable+0x240>)
 800de96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de9a:	4a2f      	ldr	r2, [pc, #188]	; (800df58 <LPTIM_Disable+0x240>)
 800de9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dea0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800dea4:	4b2c      	ldr	r3, [pc, #176]	; (800df58 <LPTIM_Disable+0x240>)
 800dea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800deaa:	4a2b      	ldr	r2, [pc, #172]	; (800df58 <LPTIM_Disable+0x240>)
 800deac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800deb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800deb4:	e000      	b.n	800deb8 <LPTIM_Disable+0x1a0>
      break;
 800deb6:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d103      	bne.n	800dec6 <LPTIM_Disable+0x1ae>
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 80d0 	beq.w	800e066 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a1e      	ldr	r2, [pc, #120]	; (800df44 <LPTIM_Disable+0x22c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d031      	beq.n	800df34 <LPTIM_Disable+0x21c>
 800ded0:	4a1c      	ldr	r2, [pc, #112]	; (800df44 <LPTIM_Disable+0x22c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d842      	bhi.n	800df5c <LPTIM_Disable+0x244>
 800ded6:	4a1c      	ldr	r2, [pc, #112]	; (800df48 <LPTIM_Disable+0x230>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d024      	beq.n	800df26 <LPTIM_Disable+0x20e>
 800dedc:	4a1a      	ldr	r2, [pc, #104]	; (800df48 <LPTIM_Disable+0x230>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d83c      	bhi.n	800df5c <LPTIM_Disable+0x244>
 800dee2:	4a1a      	ldr	r2, [pc, #104]	; (800df4c <LPTIM_Disable+0x234>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d017      	beq.n	800df18 <LPTIM_Disable+0x200>
 800dee8:	4a18      	ldr	r2, [pc, #96]	; (800df4c <LPTIM_Disable+0x234>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d836      	bhi.n	800df5c <LPTIM_Disable+0x244>
 800deee:	4a18      	ldr	r2, [pc, #96]	; (800df50 <LPTIM_Disable+0x238>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <LPTIM_Disable+0x1e4>
 800def4:	4a17      	ldr	r2, [pc, #92]	; (800df54 <LPTIM_Disable+0x23c>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d007      	beq.n	800df0a <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 800defa:	e02f      	b.n	800df5c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 800defc:	4b16      	ldr	r3, [pc, #88]	; (800df58 <LPTIM_Disable+0x240>)
 800defe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df00:	4a15      	ldr	r2, [pc, #84]	; (800df58 <LPTIM_Disable+0x240>)
 800df02:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800df06:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 800df08:	e029      	b.n	800df5e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 800df0a:	4b13      	ldr	r3, [pc, #76]	; (800df58 <LPTIM_Disable+0x240>)
 800df0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df0e:	4a12      	ldr	r2, [pc, #72]	; (800df58 <LPTIM_Disable+0x240>)
 800df10:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800df14:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800df16:	e022      	b.n	800df5e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 800df18:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <LPTIM_Disable+0x240>)
 800df1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df1c:	4a0e      	ldr	r2, [pc, #56]	; (800df58 <LPTIM_Disable+0x240>)
 800df1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800df22:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800df24:	e01b      	b.n	800df5e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <LPTIM_Disable+0x240>)
 800df28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df2a:	4a0b      	ldr	r2, [pc, #44]	; (800df58 <LPTIM_Disable+0x240>)
 800df2c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800df30:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800df32:	e014      	b.n	800df5e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800df34:	4b08      	ldr	r3, [pc, #32]	; (800df58 <LPTIM_Disable+0x240>)
 800df36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df38:	4a07      	ldr	r2, [pc, #28]	; (800df58 <LPTIM_Disable+0x240>)
 800df3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800df3e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800df40:	e00d      	b.n	800df5e <LPTIM_Disable+0x246>
 800df42:	bf00      	nop
 800df44:	58003000 	.word	0x58003000
 800df48:	58002c00 	.word	0x58002c00
 800df4c:	58002800 	.word	0x58002800
 800df50:	40002400 	.word	0x40002400
 800df54:	58002400 	.word	0x58002400
 800df58:	58024400 	.word	0x58024400
        break;
 800df5c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01a      	beq.n	800df9a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	691a      	ldr	r2, [r3, #16]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0201 	orr.w	r2, r2, #1
 800df72:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800df7c:	2108      	movs	r1, #8
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff fe9a 	bl	800dcb8 <LPTIM_WaitForFlag>
 800df84:	4603      	mov	r3, r0
 800df86:	2b03      	cmp	r3, #3
 800df88:	d103      	bne.n	800df92 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2203      	movs	r2, #3
 800df8e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2208      	movs	r2, #8
 800df98:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d01a      	beq.n	800dfd6 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	691a      	ldr	r2, [r3, #16]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f042 0201 	orr.w	r2, r2, #1
 800dfae:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	69ba      	ldr	r2, [r7, #24]
 800dfb6:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800dfb8:	2110      	movs	r1, #16
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff fe7c 	bl	800dcb8 <LPTIM_WaitForFlag>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d103      	bne.n	800dfce <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2203      	movs	r2, #3
 800dfca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2210      	movs	r2, #16
 800dfd4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a33      	ldr	r2, [pc, #204]	; (800e0a8 <LPTIM_Disable+0x390>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d039      	beq.n	800e054 <LPTIM_Disable+0x33c>
 800dfe0:	4a31      	ldr	r2, [pc, #196]	; (800e0a8 <LPTIM_Disable+0x390>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d841      	bhi.n	800e06a <LPTIM_Disable+0x352>
 800dfe6:	4a31      	ldr	r2, [pc, #196]	; (800e0ac <LPTIM_Disable+0x394>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d02a      	beq.n	800e042 <LPTIM_Disable+0x32a>
 800dfec:	4a2f      	ldr	r2, [pc, #188]	; (800e0ac <LPTIM_Disable+0x394>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d83b      	bhi.n	800e06a <LPTIM_Disable+0x352>
 800dff2:	4a2f      	ldr	r2, [pc, #188]	; (800e0b0 <LPTIM_Disable+0x398>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d01b      	beq.n	800e030 <LPTIM_Disable+0x318>
 800dff8:	4a2d      	ldr	r2, [pc, #180]	; (800e0b0 <LPTIM_Disable+0x398>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d835      	bhi.n	800e06a <LPTIM_Disable+0x352>
 800dffe:	4a2d      	ldr	r2, [pc, #180]	; (800e0b4 <LPTIM_Disable+0x39c>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d003      	beq.n	800e00c <LPTIM_Disable+0x2f4>
 800e004:	4a2c      	ldr	r2, [pc, #176]	; (800e0b8 <LPTIM_Disable+0x3a0>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d009      	beq.n	800e01e <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 800e00a:	e02e      	b.n	800e06a <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800e00c:	4b2b      	ldr	r3, [pc, #172]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e010:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e014:	4929      	ldr	r1, [pc, #164]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	4313      	orrs	r3, r2
 800e01a:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 800e01c:	e026      	b.n	800e06c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800e01e:	4b27      	ldr	r3, [pc, #156]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e022:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e026:	4925      	ldr	r1, [pc, #148]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	4313      	orrs	r3, r2
 800e02c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800e02e:	e01d      	b.n	800e06c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800e030:	4b22      	ldr	r3, [pc, #136]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e038:	4920      	ldr	r1, [pc, #128]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	4313      	orrs	r3, r2
 800e03e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800e040:	e014      	b.n	800e06c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800e042:	4b1e      	ldr	r3, [pc, #120]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e04a:	491c      	ldr	r1, [pc, #112]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	4313      	orrs	r3, r2
 800e050:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800e052:	e00b      	b.n	800e06c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800e054:	4b19      	ldr	r3, [pc, #100]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e058:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e05c:	4917      	ldr	r1, [pc, #92]	; (800e0bc <LPTIM_Disable+0x3a4>)
 800e05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e060:	4313      	orrs	r3, r2
 800e062:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800e064:	e002      	b.n	800e06c <LPTIM_Disable+0x354>
    }
  }
 800e066:	bf00      	nop
 800e068:	e000      	b.n	800e06c <LPTIM_Disable+0x354>
        break;
 800e06a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	691a      	ldr	r2, [r3, #16]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f022 0201 	bic.w	r2, r2, #1
 800e07a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e082:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6a3a      	ldr	r2, [r7, #32]
 800e08a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	697a      	ldr	r2, [r7, #20]
 800e092:	625a      	str	r2, [r3, #36]	; 0x24
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f383 8810 	msr	PRIMASK, r3
}
 800e09e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800e0a0:	bf00      	nop
 800e0a2:	3730      	adds	r7, #48	; 0x30
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	58003000 	.word	0x58003000
 800e0ac:	58002c00 	.word	0x58002c00
 800e0b0:	58002800 	.word	0x58002800
 800e0b4:	40002400 	.word	0x40002400
 800e0b8:	58002400 	.word	0x58002400
 800e0bc:	58024400 	.word	0x58024400

0800e0c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e0c8:	4b19      	ldr	r3, [pc, #100]	; (800e130 <HAL_PWREx_ConfigSupply+0x70>)
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b04      	cmp	r3, #4
 800e0d2:	d00a      	beq.n	800e0ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e0d4:	4b16      	ldr	r3, [pc, #88]	; (800e130 <HAL_PWREx_ConfigSupply+0x70>)
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	f003 0307 	and.w	r3, r3, #7
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d001      	beq.n	800e0e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e01f      	b.n	800e126 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e01d      	b.n	800e126 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e0ea:	4b11      	ldr	r3, [pc, #68]	; (800e130 <HAL_PWREx_ConfigSupply+0x70>)
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f023 0207 	bic.w	r2, r3, #7
 800e0f2:	490f      	ldr	r1, [pc, #60]	; (800e130 <HAL_PWREx_ConfigSupply+0x70>)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e0fa:	f7fa fe07 	bl	8008d0c <HAL_GetTick>
 800e0fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e100:	e009      	b.n	800e116 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e102:	f7fa fe03 	bl	8008d0c <HAL_GetTick>
 800e106:	4602      	mov	r2, r0
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e110:	d901      	bls.n	800e116 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e007      	b.n	800e126 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e116:	4b06      	ldr	r3, [pc, #24]	; (800e130 <HAL_PWREx_ConfigSupply+0x70>)
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e122:	d1ee      	bne.n	800e102 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	58024800 	.word	0x58024800

0800e134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b08c      	sub	sp, #48	; 0x30
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	f000 bc1d 	b.w	800e982 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 8087 	beq.w	800e264 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e156:	4b99      	ldr	r3, [pc, #612]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e15e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e160:	4b96      	ldr	r3, [pc, #600]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	2b10      	cmp	r3, #16
 800e16a:	d007      	beq.n	800e17c <HAL_RCC_OscConfig+0x48>
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	2b18      	cmp	r3, #24
 800e170:	d110      	bne.n	800e194 <HAL_RCC_OscConfig+0x60>
 800e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e174:	f003 0303 	and.w	r3, r3, #3
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d10b      	bne.n	800e194 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e17c:	4b8f      	ldr	r3, [pc, #572]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e184:	2b00      	cmp	r3, #0
 800e186:	d06c      	beq.n	800e262 <HAL_RCC_OscConfig+0x12e>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d168      	bne.n	800e262 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e3f6      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e19c:	d106      	bne.n	800e1ac <HAL_RCC_OscConfig+0x78>
 800e19e:	4b87      	ldr	r3, [pc, #540]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a86      	ldr	r2, [pc, #536]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	e02e      	b.n	800e20a <HAL_RCC_OscConfig+0xd6>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10c      	bne.n	800e1ce <HAL_RCC_OscConfig+0x9a>
 800e1b4:	4b81      	ldr	r3, [pc, #516]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a80      	ldr	r2, [pc, #512]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	4b7e      	ldr	r3, [pc, #504]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a7d      	ldr	r2, [pc, #500]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	e01d      	b.n	800e20a <HAL_RCC_OscConfig+0xd6>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e1d6:	d10c      	bne.n	800e1f2 <HAL_RCC_OscConfig+0xbe>
 800e1d8:	4b78      	ldr	r3, [pc, #480]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a77      	ldr	r2, [pc, #476]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e1e2:	6013      	str	r3, [r2, #0]
 800e1e4:	4b75      	ldr	r3, [pc, #468]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a74      	ldr	r2, [pc, #464]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1ee:	6013      	str	r3, [r2, #0]
 800e1f0:	e00b      	b.n	800e20a <HAL_RCC_OscConfig+0xd6>
 800e1f2:	4b72      	ldr	r3, [pc, #456]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a71      	ldr	r2, [pc, #452]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e1f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	4b6f      	ldr	r3, [pc, #444]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a6e      	ldr	r2, [pc, #440]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e208:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d013      	beq.n	800e23a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e212:	f7fa fd7b 	bl	8008d0c <HAL_GetTick>
 800e216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e218:	e008      	b.n	800e22c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e21a:	f7fa fd77 	bl	8008d0c <HAL_GetTick>
 800e21e:	4602      	mov	r2, r0
 800e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	2b64      	cmp	r3, #100	; 0x64
 800e226:	d901      	bls.n	800e22c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800e228:	2303      	movs	r3, #3
 800e22a:	e3aa      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e22c:	4b63      	ldr	r3, [pc, #396]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d0f0      	beq.n	800e21a <HAL_RCC_OscConfig+0xe6>
 800e238:	e014      	b.n	800e264 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e23a:	f7fa fd67 	bl	8008d0c <HAL_GetTick>
 800e23e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e240:	e008      	b.n	800e254 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e242:	f7fa fd63 	bl	8008d0c <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	2b64      	cmp	r3, #100	; 0x64
 800e24e:	d901      	bls.n	800e254 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800e250:	2303      	movs	r3, #3
 800e252:	e396      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e254:	4b59      	ldr	r3, [pc, #356]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1f0      	bne.n	800e242 <HAL_RCC_OscConfig+0x10e>
 800e260:	e000      	b.n	800e264 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e262:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 80cb 	beq.w	800e408 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e272:	4b52      	ldr	r3, [pc, #328]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e27a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e27c:	4b4f      	ldr	r3, [pc, #316]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e280:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d007      	beq.n	800e298 <HAL_RCC_OscConfig+0x164>
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	2b18      	cmp	r3, #24
 800e28c:	d156      	bne.n	800e33c <HAL_RCC_OscConfig+0x208>
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	f003 0303 	and.w	r3, r3, #3
 800e294:	2b00      	cmp	r3, #0
 800e296:	d151      	bne.n	800e33c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e298:	4b48      	ldr	r3, [pc, #288]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 0304 	and.w	r3, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d005      	beq.n	800e2b0 <HAL_RCC_OscConfig+0x17c>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e368      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e2b0:	4b42      	ldr	r3, [pc, #264]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f023 0219 	bic.w	r2, r3, #25
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	493f      	ldr	r1, [pc, #252]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e2c2:	f7fa fd23 	bl	8008d0c <HAL_GetTick>
 800e2c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e2c8:	e008      	b.n	800e2dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e2ca:	f7fa fd1f 	bl	8008d0c <HAL_GetTick>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d901      	bls.n	800e2dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e352      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e2dc:	4b37      	ldr	r3, [pc, #220]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f003 0304 	and.w	r3, r3, #4
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d0f0      	beq.n	800e2ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e2e8:	f7fa fd40 	bl	8008d6c <HAL_GetREVID>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d817      	bhi.n	800e326 <HAL_RCC_OscConfig+0x1f2>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	2b40      	cmp	r3, #64	; 0x40
 800e2fc:	d108      	bne.n	800e310 <HAL_RCC_OscConfig+0x1dc>
 800e2fe:	4b2f      	ldr	r3, [pc, #188]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e306:	4a2d      	ldr	r2, [pc, #180]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e30c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e30e:	e07b      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e310:	4b2a      	ldr	r3, [pc, #168]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	031b      	lsls	r3, r3, #12
 800e31e:	4927      	ldr	r1, [pc, #156]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e320:	4313      	orrs	r3, r2
 800e322:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e324:	e070      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e326:	4b25      	ldr	r3, [pc, #148]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	061b      	lsls	r3, r3, #24
 800e334:	4921      	ldr	r1, [pc, #132]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e336:	4313      	orrs	r3, r2
 800e338:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e33a:	e065      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d048      	beq.n	800e3d6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e344:	4b1d      	ldr	r3, [pc, #116]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f023 0219 	bic.w	r2, r3, #25
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	491a      	ldr	r1, [pc, #104]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e352:	4313      	orrs	r3, r2
 800e354:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e356:	f7fa fcd9 	bl	8008d0c <HAL_GetTick>
 800e35a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e35c:	e008      	b.n	800e370 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e35e:	f7fa fcd5 	bl	8008d0c <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d901      	bls.n	800e370 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800e36c:	2303      	movs	r3, #3
 800e36e:	e308      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e370:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f003 0304 	and.w	r3, r3, #4
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d0f0      	beq.n	800e35e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e37c:	f7fa fcf6 	bl	8008d6c <HAL_GetREVID>
 800e380:	4603      	mov	r3, r0
 800e382:	f241 0203 	movw	r2, #4099	; 0x1003
 800e386:	4293      	cmp	r3, r2
 800e388:	d81a      	bhi.n	800e3c0 <HAL_RCC_OscConfig+0x28c>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	2b40      	cmp	r3, #64	; 0x40
 800e390:	d108      	bne.n	800e3a4 <HAL_RCC_OscConfig+0x270>
 800e392:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e39a:	4a08      	ldr	r2, [pc, #32]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e39c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3a0:	6053      	str	r3, [r2, #4]
 800e3a2:	e031      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
 800e3a4:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	031b      	lsls	r3, r3, #12
 800e3b2:	4902      	ldr	r1, [pc, #8]	; (800e3bc <HAL_RCC_OscConfig+0x288>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	604b      	str	r3, [r1, #4]
 800e3b8:	e026      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
 800e3ba:	bf00      	nop
 800e3bc:	58024400 	.word	0x58024400
 800e3c0:	4b9a      	ldr	r3, [pc, #616]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	061b      	lsls	r3, r3, #24
 800e3ce:	4997      	ldr	r1, [pc, #604]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	604b      	str	r3, [r1, #4]
 800e3d4:	e018      	b.n	800e408 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e3d6:	4b95      	ldr	r3, [pc, #596]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a94      	ldr	r2, [pc, #592]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e3dc:	f023 0301 	bic.w	r3, r3, #1
 800e3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3e2:	f7fa fc93 	bl	8008d0c <HAL_GetTick>
 800e3e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e3e8:	e008      	b.n	800e3fc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e3ea:	f7fa fc8f 	bl	8008d0c <HAL_GetTick>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d901      	bls.n	800e3fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e2c2      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e3fc:	4b8b      	ldr	r3, [pc, #556]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f0      	bne.n	800e3ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f003 0310 	and.w	r3, r3, #16
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 80a9 	beq.w	800e568 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e416:	4b85      	ldr	r3, [pc, #532]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e41e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e420:	4b82      	ldr	r3, [pc, #520]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e424:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	2b08      	cmp	r3, #8
 800e42a:	d007      	beq.n	800e43c <HAL_RCC_OscConfig+0x308>
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	2b18      	cmp	r3, #24
 800e430:	d13a      	bne.n	800e4a8 <HAL_RCC_OscConfig+0x374>
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f003 0303 	and.w	r3, r3, #3
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d135      	bne.n	800e4a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e43c:	4b7b      	ldr	r3, [pc, #492]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <HAL_RCC_OscConfig+0x320>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	69db      	ldr	r3, [r3, #28]
 800e44c:	2b80      	cmp	r3, #128	; 0x80
 800e44e:	d001      	beq.n	800e454 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e296      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e454:	f7fa fc8a 	bl	8008d6c <HAL_GetREVID>
 800e458:	4603      	mov	r3, r0
 800e45a:	f241 0203 	movw	r2, #4099	; 0x1003
 800e45e:	4293      	cmp	r3, r2
 800e460:	d817      	bhi.n	800e492 <HAL_RCC_OscConfig+0x35e>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	2b20      	cmp	r3, #32
 800e468:	d108      	bne.n	800e47c <HAL_RCC_OscConfig+0x348>
 800e46a:	4b70      	ldr	r3, [pc, #448]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e472:	4a6e      	ldr	r2, [pc, #440]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e478:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e47a:	e075      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e47c:	4b6b      	ldr	r3, [pc, #428]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a1b      	ldr	r3, [r3, #32]
 800e488:	069b      	lsls	r3, r3, #26
 800e48a:	4968      	ldr	r1, [pc, #416]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e48c:	4313      	orrs	r3, r2
 800e48e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e490:	e06a      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e492:	4b66      	ldr	r3, [pc, #408]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	061b      	lsls	r3, r3, #24
 800e4a0:	4962      	ldr	r1, [pc, #392]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e4a6:	e05f      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d042      	beq.n	800e536 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e4b0:	4b5e      	ldr	r3, [pc, #376]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a5d      	ldr	r2, [pc, #372]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4bc:	f7fa fc26 	bl	8008d0c <HAL_GetTick>
 800e4c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e4c2:	e008      	b.n	800e4d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e4c4:	f7fa fc22 	bl	8008d0c <HAL_GetTick>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d901      	bls.n	800e4d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	e255      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e4d6:	4b55      	ldr	r3, [pc, #340]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d0f0      	beq.n	800e4c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e4e2:	f7fa fc43 	bl	8008d6c <HAL_GetREVID>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	f241 0203 	movw	r2, #4099	; 0x1003
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d817      	bhi.n	800e520 <HAL_RCC_OscConfig+0x3ec>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a1b      	ldr	r3, [r3, #32]
 800e4f4:	2b20      	cmp	r3, #32
 800e4f6:	d108      	bne.n	800e50a <HAL_RCC_OscConfig+0x3d6>
 800e4f8:	4b4c      	ldr	r3, [pc, #304]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e500:	4a4a      	ldr	r2, [pc, #296]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e506:	6053      	str	r3, [r2, #4]
 800e508:	e02e      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
 800e50a:	4b48      	ldr	r3, [pc, #288]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	069b      	lsls	r3, r3, #26
 800e518:	4944      	ldr	r1, [pc, #272]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e51a:	4313      	orrs	r3, r2
 800e51c:	604b      	str	r3, [r1, #4]
 800e51e:	e023      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
 800e520:	4b42      	ldr	r3, [pc, #264]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a1b      	ldr	r3, [r3, #32]
 800e52c:	061b      	lsls	r3, r3, #24
 800e52e:	493f      	ldr	r1, [pc, #252]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e530:	4313      	orrs	r3, r2
 800e532:	60cb      	str	r3, [r1, #12]
 800e534:	e018      	b.n	800e568 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e536:	4b3d      	ldr	r3, [pc, #244]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a3c      	ldr	r2, [pc, #240]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e53c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e542:	f7fa fbe3 	bl	8008d0c <HAL_GetTick>
 800e546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e548:	e008      	b.n	800e55c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e54a:	f7fa fbdf 	bl	8008d0c <HAL_GetTick>
 800e54e:	4602      	mov	r2, r0
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	2b02      	cmp	r3, #2
 800e556:	d901      	bls.n	800e55c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e558:	2303      	movs	r3, #3
 800e55a:	e212      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e55c:	4b33      	ldr	r3, [pc, #204]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1f0      	bne.n	800e54a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 0308 	and.w	r3, r3, #8
 800e570:	2b00      	cmp	r3, #0
 800e572:	d036      	beq.n	800e5e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d019      	beq.n	800e5b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e57c:	4b2b      	ldr	r3, [pc, #172]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e580:	4a2a      	ldr	r2, [pc, #168]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e588:	f7fa fbc0 	bl	8008d0c <HAL_GetTick>
 800e58c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e58e:	e008      	b.n	800e5a2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e590:	f7fa fbbc 	bl	8008d0c <HAL_GetTick>
 800e594:	4602      	mov	r2, r0
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d901      	bls.n	800e5a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e59e:	2303      	movs	r3, #3
 800e5a0:	e1ef      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e5a2:	4b22      	ldr	r3, [pc, #136]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5a6:	f003 0302 	and.w	r3, r3, #2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0f0      	beq.n	800e590 <HAL_RCC_OscConfig+0x45c>
 800e5ae:	e018      	b.n	800e5e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e5b0:	4b1e      	ldr	r3, [pc, #120]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5b6:	f023 0301 	bic.w	r3, r3, #1
 800e5ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5bc:	f7fa fba6 	bl	8008d0c <HAL_GetTick>
 800e5c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e5c2:	e008      	b.n	800e5d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e5c4:	f7fa fba2 	bl	8008d0c <HAL_GetTick>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d901      	bls.n	800e5d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	e1d5      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e5d6:	4b15      	ldr	r3, [pc, #84]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5da:	f003 0302 	and.w	r3, r3, #2
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1f0      	bne.n	800e5c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f003 0320 	and.w	r3, r3, #32
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d039      	beq.n	800e662 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d01c      	beq.n	800e630 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a0c      	ldr	r2, [pc, #48]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e5fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e600:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e602:	f7fa fb83 	bl	8008d0c <HAL_GetTick>
 800e606:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e608:	e008      	b.n	800e61c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e60a:	f7fa fb7f 	bl	8008d0c <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	2b02      	cmp	r3, #2
 800e616:	d901      	bls.n	800e61c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e618:	2303      	movs	r3, #3
 800e61a:	e1b2      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e61c:	4b03      	ldr	r3, [pc, #12]	; (800e62c <HAL_RCC_OscConfig+0x4f8>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d0f0      	beq.n	800e60a <HAL_RCC_OscConfig+0x4d6>
 800e628:	e01b      	b.n	800e662 <HAL_RCC_OscConfig+0x52e>
 800e62a:	bf00      	nop
 800e62c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e630:	4b9b      	ldr	r3, [pc, #620]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a9a      	ldr	r2, [pc, #616]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e63a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e63c:	f7fa fb66 	bl	8008d0c <HAL_GetTick>
 800e640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e642:	e008      	b.n	800e656 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e644:	f7fa fb62 	bl	8008d0c <HAL_GetTick>
 800e648:	4602      	mov	r2, r0
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d901      	bls.n	800e656 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e652:	2303      	movs	r3, #3
 800e654:	e195      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e656:	4b92      	ldr	r3, [pc, #584]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1f0      	bne.n	800e644 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 0304 	and.w	r3, r3, #4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 8081 	beq.w	800e772 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e670:	4b8c      	ldr	r3, [pc, #560]	; (800e8a4 <HAL_RCC_OscConfig+0x770>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a8b      	ldr	r2, [pc, #556]	; (800e8a4 <HAL_RCC_OscConfig+0x770>)
 800e676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e67a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e67c:	f7fa fb46 	bl	8008d0c <HAL_GetTick>
 800e680:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e682:	e008      	b.n	800e696 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e684:	f7fa fb42 	bl	8008d0c <HAL_GetTick>
 800e688:	4602      	mov	r2, r0
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	2b64      	cmp	r3, #100	; 0x64
 800e690:	d901      	bls.n	800e696 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e692:	2303      	movs	r3, #3
 800e694:	e175      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e696:	4b83      	ldr	r3, [pc, #524]	; (800e8a4 <HAL_RCC_OscConfig+0x770>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0f0      	beq.n	800e684 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d106      	bne.n	800e6b8 <HAL_RCC_OscConfig+0x584>
 800e6aa:	4b7d      	ldr	r3, [pc, #500]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ae:	4a7c      	ldr	r2, [pc, #496]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6b0:	f043 0301 	orr.w	r3, r3, #1
 800e6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800e6b6:	e02d      	b.n	800e714 <HAL_RCC_OscConfig+0x5e0>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d10c      	bne.n	800e6da <HAL_RCC_OscConfig+0x5a6>
 800e6c0:	4b77      	ldr	r3, [pc, #476]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c4:	4a76      	ldr	r2, [pc, #472]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6c6:	f023 0301 	bic.w	r3, r3, #1
 800e6ca:	6713      	str	r3, [r2, #112]	; 0x70
 800e6cc:	4b74      	ldr	r3, [pc, #464]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6d0:	4a73      	ldr	r2, [pc, #460]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6d2:	f023 0304 	bic.w	r3, r3, #4
 800e6d6:	6713      	str	r3, [r2, #112]	; 0x70
 800e6d8:	e01c      	b.n	800e714 <HAL_RCC_OscConfig+0x5e0>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	2b05      	cmp	r3, #5
 800e6e0:	d10c      	bne.n	800e6fc <HAL_RCC_OscConfig+0x5c8>
 800e6e2:	4b6f      	ldr	r3, [pc, #444]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6e6:	4a6e      	ldr	r2, [pc, #440]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6e8:	f043 0304 	orr.w	r3, r3, #4
 800e6ec:	6713      	str	r3, [r2, #112]	; 0x70
 800e6ee:	4b6c      	ldr	r3, [pc, #432]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f2:	4a6b      	ldr	r2, [pc, #428]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6f4:	f043 0301 	orr.w	r3, r3, #1
 800e6f8:	6713      	str	r3, [r2, #112]	; 0x70
 800e6fa:	e00b      	b.n	800e714 <HAL_RCC_OscConfig+0x5e0>
 800e6fc:	4b68      	ldr	r3, [pc, #416]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e700:	4a67      	ldr	r2, [pc, #412]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e702:	f023 0301 	bic.w	r3, r3, #1
 800e706:	6713      	str	r3, [r2, #112]	; 0x70
 800e708:	4b65      	ldr	r3, [pc, #404]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e70c:	4a64      	ldr	r2, [pc, #400]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e70e:	f023 0304 	bic.w	r3, r3, #4
 800e712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d015      	beq.n	800e748 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e71c:	f7fa faf6 	bl	8008d0c <HAL_GetTick>
 800e720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e722:	e00a      	b.n	800e73a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e724:	f7fa faf2 	bl	8008d0c <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e732:	4293      	cmp	r3, r2
 800e734:	d901      	bls.n	800e73a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	e123      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e73a:	4b59      	ldr	r3, [pc, #356]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e73e:	f003 0302 	and.w	r3, r3, #2
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0ee      	beq.n	800e724 <HAL_RCC_OscConfig+0x5f0>
 800e746:	e014      	b.n	800e772 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e748:	f7fa fae0 	bl	8008d0c <HAL_GetTick>
 800e74c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e74e:	e00a      	b.n	800e766 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e750:	f7fa fadc 	bl	8008d0c <HAL_GetTick>
 800e754:	4602      	mov	r2, r0
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	1ad3      	subs	r3, r2, r3
 800e75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e75e:	4293      	cmp	r3, r2
 800e760:	d901      	bls.n	800e766 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	e10d      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e766:	4b4e      	ldr	r3, [pc, #312]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e76a:	f003 0302 	and.w	r3, r3, #2
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1ee      	bne.n	800e750 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 8102 	beq.w	800e980 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e77c:	4b48      	ldr	r3, [pc, #288]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e784:	2b18      	cmp	r3, #24
 800e786:	f000 80bd 	beq.w	800e904 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	2b02      	cmp	r3, #2
 800e790:	f040 809e 	bne.w	800e8d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e794:	4b42      	ldr	r3, [pc, #264]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a41      	ldr	r2, [pc, #260]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e79a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e79e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7a0:	f7fa fab4 	bl	8008d0c <HAL_GetTick>
 800e7a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7a6:	e008      	b.n	800e7ba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e7a8:	f7fa fab0 	bl	8008d0c <HAL_GetTick>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d901      	bls.n	800e7ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e0e3      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7ba:	4b39      	ldr	r3, [pc, #228]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1f0      	bne.n	800e7a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e7c6:	4b36      	ldr	r3, [pc, #216]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7ca:	4b37      	ldr	r3, [pc, #220]	; (800e8a8 <HAL_RCC_OscConfig+0x774>)
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e7d6:	0112      	lsls	r2, r2, #4
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	4931      	ldr	r1, [pc, #196]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	628b      	str	r3, [r1, #40]	; 0x28
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	025b      	lsls	r3, r3, #9
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	041b      	lsls	r3, r3, #16
 800e7fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e802:	431a      	orrs	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e808:	3b01      	subs	r3, #1
 800e80a:	061b      	lsls	r3, r3, #24
 800e80c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e810:	4923      	ldr	r1, [pc, #140]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e812:	4313      	orrs	r3, r2
 800e814:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800e816:	4b22      	ldr	r3, [pc, #136]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81a:	4a21      	ldr	r2, [pc, #132]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e81c:	f023 0301 	bic.w	r3, r3, #1
 800e820:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e822:	4b1f      	ldr	r3, [pc, #124]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e826:	4b21      	ldr	r3, [pc, #132]	; (800e8ac <HAL_RCC_OscConfig+0x778>)
 800e828:	4013      	ands	r3, r2
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e82e:	00d2      	lsls	r2, r2, #3
 800e830:	491b      	ldr	r1, [pc, #108]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e832:	4313      	orrs	r3, r2
 800e834:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e836:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83a:	f023 020c 	bic.w	r2, r3, #12
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	4917      	ldr	r1, [pc, #92]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e844:	4313      	orrs	r3, r2
 800e846:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e848:	4b15      	ldr	r3, [pc, #84]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	f023 0202 	bic.w	r2, r3, #2
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e854:	4912      	ldr	r1, [pc, #72]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e856:	4313      	orrs	r3, r2
 800e858:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e85a:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85e:	4a10      	ldr	r2, [pc, #64]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e866:	4b0e      	ldr	r3, [pc, #56]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86a:	4a0d      	ldr	r2, [pc, #52]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e86c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e872:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e876:	4a0a      	ldr	r2, [pc, #40]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e87c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800e87e:	4b08      	ldr	r3, [pc, #32]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e882:	4a07      	ldr	r2, [pc, #28]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e884:	f043 0301 	orr.w	r3, r3, #1
 800e888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e88a:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a04      	ldr	r2, [pc, #16]	; (800e8a0 <HAL_RCC_OscConfig+0x76c>)
 800e890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e896:	f7fa fa39 	bl	8008d0c <HAL_GetTick>
 800e89a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e89c:	e011      	b.n	800e8c2 <HAL_RCC_OscConfig+0x78e>
 800e89e:	bf00      	nop
 800e8a0:	58024400 	.word	0x58024400
 800e8a4:	58024800 	.word	0x58024800
 800e8a8:	fffffc0c 	.word	0xfffffc0c
 800e8ac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e8b0:	f7fa fa2c 	bl	8008d0c <HAL_GetTick>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d901      	bls.n	800e8c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	e05f      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e8c2:	4b32      	ldr	r3, [pc, #200]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0f0      	beq.n	800e8b0 <HAL_RCC_OscConfig+0x77c>
 800e8ce:	e057      	b.n	800e980 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8d0:	4b2e      	ldr	r3, [pc, #184]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a2d      	ldr	r2, [pc, #180]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e8d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e8da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8dc:	f7fa fa16 	bl	8008d0c <HAL_GetTick>
 800e8e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e8e2:	e008      	b.n	800e8f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e8e4:	f7fa fa12 	bl	8008d0c <HAL_GetTick>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	2b02      	cmp	r3, #2
 800e8f0:	d901      	bls.n	800e8f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e045      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e8f6:	4b25      	ldr	r3, [pc, #148]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f0      	bne.n	800e8e4 <HAL_RCC_OscConfig+0x7b0>
 800e902:	e03d      	b.n	800e980 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e904:	4b21      	ldr	r3, [pc, #132]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e908:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e90a:	4b20      	ldr	r3, [pc, #128]	; (800e98c <HAL_RCC_OscConfig+0x858>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e914:	2b01      	cmp	r3, #1
 800e916:	d031      	beq.n	800e97c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	f003 0203 	and.w	r2, r3, #3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e922:	429a      	cmp	r2, r3
 800e924:	d12a      	bne.n	800e97c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	091b      	lsrs	r3, r3, #4
 800e92a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e932:	429a      	cmp	r2, r3
 800e934:	d122      	bne.n	800e97c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e940:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e942:	429a      	cmp	r2, r3
 800e944:	d11a      	bne.n	800e97c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	0a5b      	lsrs	r3, r3, #9
 800e94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e952:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e954:	429a      	cmp	r2, r3
 800e956:	d111      	bne.n	800e97c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	0c1b      	lsrs	r3, r3, #16
 800e95c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e964:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e966:	429a      	cmp	r2, r3
 800e968:	d108      	bne.n	800e97c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	0e1b      	lsrs	r3, r3, #24
 800e96e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e976:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e978:	429a      	cmp	r2, r3
 800e97a:	d001      	beq.n	800e980 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3730      	adds	r7, #48	; 0x30
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	58024400 	.word	0x58024400

0800e990 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e19c      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e9a4:	4b8a      	ldr	r3, [pc, #552]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f003 030f 	and.w	r3, r3, #15
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d910      	bls.n	800e9d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9b2:	4b87      	ldr	r3, [pc, #540]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f023 020f 	bic.w	r2, r3, #15
 800e9ba:	4985      	ldr	r1, [pc, #532]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9c2:	4b83      	ldr	r3, [pc, #524]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f003 030f 	and.w	r3, r3, #15
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d001      	beq.n	800e9d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e184      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f003 0304 	and.w	r3, r3, #4
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d010      	beq.n	800ea02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	691a      	ldr	r2, [r3, #16]
 800e9e4:	4b7b      	ldr	r3, [pc, #492]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800e9e6:	699b      	ldr	r3, [r3, #24]
 800e9e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d908      	bls.n	800ea02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e9f0:	4b78      	ldr	r3, [pc, #480]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800e9f2:	699b      	ldr	r3, [r3, #24]
 800e9f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	4975      	ldr	r1, [pc, #468]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 0308 	and.w	r3, r3, #8
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d010      	beq.n	800ea30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	695a      	ldr	r2, [r3, #20]
 800ea12:	4b70      	ldr	r3, [pc, #448]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d908      	bls.n	800ea30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ea1e:	4b6d      	ldr	r3, [pc, #436]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea20:	69db      	ldr	r3, [r3, #28]
 800ea22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	496a      	ldr	r1, [pc, #424]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f003 0310 	and.w	r3, r3, #16
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d010      	beq.n	800ea5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	699a      	ldr	r2, [r3, #24]
 800ea40:	4b64      	ldr	r3, [pc, #400]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d908      	bls.n	800ea5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ea4c:	4b61      	ldr	r3, [pc, #388]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea4e:	69db      	ldr	r3, [r3, #28]
 800ea50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	495e      	ldr	r1, [pc, #376]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f003 0320 	and.w	r3, r3, #32
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d010      	beq.n	800ea8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	69da      	ldr	r2, [r3, #28]
 800ea6e:	4b59      	ldr	r3, [pc, #356]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d908      	bls.n	800ea8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ea7a:	4b56      	ldr	r3, [pc, #344]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	4953      	ldr	r1, [pc, #332]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 0302 	and.w	r3, r3, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d010      	beq.n	800eaba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68da      	ldr	r2, [r3, #12]
 800ea9c:	4b4d      	ldr	r3, [pc, #308]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ea9e:	699b      	ldr	r3, [r3, #24]
 800eaa0:	f003 030f 	and.w	r3, r3, #15
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d908      	bls.n	800eaba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eaa8:	4b4a      	ldr	r3, [pc, #296]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	f023 020f 	bic.w	r2, r3, #15
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	4947      	ldr	r1, [pc, #284]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eab6:	4313      	orrs	r3, r2
 800eab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d055      	beq.n	800eb72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800eac6:	4b43      	ldr	r3, [pc, #268]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	4940      	ldr	r1, [pc, #256]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800ead4:	4313      	orrs	r3, r2
 800ead6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d107      	bne.n	800eaf0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eae0:	4b3c      	ldr	r3, [pc, #240]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d121      	bne.n	800eb30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e0f6      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d107      	bne.n	800eb08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eaf8:	4b36      	ldr	r3, [pc, #216]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d115      	bne.n	800eb30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e0ea      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d107      	bne.n	800eb20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb10:	4b30      	ldr	r3, [pc, #192]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d109      	bne.n	800eb30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	e0de      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb20:	4b2c      	ldr	r3, [pc, #176]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 0304 	and.w	r3, r3, #4
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e0d6      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800eb30:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	f023 0207 	bic.w	r2, r3, #7
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	4925      	ldr	r1, [pc, #148]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb42:	f7fa f8e3 	bl	8008d0c <HAL_GetTick>
 800eb46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb48:	e00a      	b.n	800eb60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb4a:	f7fa f8df 	bl	8008d0c <HAL_GetTick>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d901      	bls.n	800eb60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	e0be      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb60:	4b1c      	ldr	r3, [pc, #112]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d1eb      	bne.n	800eb4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f003 0302 	and.w	r3, r3, #2
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d010      	beq.n	800eba0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68da      	ldr	r2, [r3, #12]
 800eb82:	4b14      	ldr	r3, [pc, #80]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	f003 030f 	and.w	r3, r3, #15
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d208      	bcs.n	800eba0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb8e:	4b11      	ldr	r3, [pc, #68]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f023 020f 	bic.w	r2, r3, #15
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	490e      	ldr	r1, [pc, #56]	; (800ebd4 <HAL_RCC_ClockConfig+0x244>)
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eba0:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 030f 	and.w	r3, r3, #15
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d214      	bcs.n	800ebd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebae:	4b08      	ldr	r3, [pc, #32]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f023 020f 	bic.w	r2, r3, #15
 800ebb6:	4906      	ldr	r1, [pc, #24]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebbe:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <HAL_RCC_ClockConfig+0x240>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f003 030f 	and.w	r3, r3, #15
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d005      	beq.n	800ebd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e086      	b.n	800ecde <HAL_RCC_ClockConfig+0x34e>
 800ebd0:	52002000 	.word	0x52002000
 800ebd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 0304 	and.w	r3, r3, #4
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d010      	beq.n	800ec06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	691a      	ldr	r2, [r3, #16]
 800ebe8:	4b3f      	ldr	r3, [pc, #252]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ebea:	699b      	ldr	r3, [r3, #24]
 800ebec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d208      	bcs.n	800ec06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ebf4:	4b3c      	ldr	r3, [pc, #240]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	4939      	ldr	r1, [pc, #228]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec02:	4313      	orrs	r3, r2
 800ec04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f003 0308 	and.w	r3, r3, #8
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d010      	beq.n	800ec34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	695a      	ldr	r2, [r3, #20]
 800ec16:	4b34      	ldr	r3, [pc, #208]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d208      	bcs.n	800ec34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ec22:	4b31      	ldr	r3, [pc, #196]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	492e      	ldr	r1, [pc, #184]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec30:	4313      	orrs	r3, r2
 800ec32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 0310 	and.w	r3, r3, #16
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d010      	beq.n	800ec62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	699a      	ldr	r2, [r3, #24]
 800ec44:	4b28      	ldr	r3, [pc, #160]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec46:	69db      	ldr	r3, [r3, #28]
 800ec48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d208      	bcs.n	800ec62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ec50:	4b25      	ldr	r3, [pc, #148]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	699b      	ldr	r3, [r3, #24]
 800ec5c:	4922      	ldr	r1, [pc, #136]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f003 0320 	and.w	r3, r3, #32
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d010      	beq.n	800ec90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	69da      	ldr	r2, [r3, #28]
 800ec72:	4b1d      	ldr	r3, [pc, #116]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d208      	bcs.n	800ec90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ec7e:	4b1a      	ldr	r3, [pc, #104]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	4917      	ldr	r1, [pc, #92]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ec90:	f000 f834 	bl	800ecfc <HAL_RCC_GetSysClockFreq>
 800ec94:	4602      	mov	r2, r0
 800ec96:	4b14      	ldr	r3, [pc, #80]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ec98:	699b      	ldr	r3, [r3, #24]
 800ec9a:	0a1b      	lsrs	r3, r3, #8
 800ec9c:	f003 030f 	and.w	r3, r3, #15
 800eca0:	4912      	ldr	r1, [pc, #72]	; (800ecec <HAL_RCC_ClockConfig+0x35c>)
 800eca2:	5ccb      	ldrb	r3, [r1, r3]
 800eca4:	f003 031f 	and.w	r3, r3, #31
 800eca8:	fa22 f303 	lsr.w	r3, r2, r3
 800ecac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecae:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <HAL_RCC_ClockConfig+0x358>)
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	f003 030f 	and.w	r3, r3, #15
 800ecb6:	4a0d      	ldr	r2, [pc, #52]	; (800ecec <HAL_RCC_ClockConfig+0x35c>)
 800ecb8:	5cd3      	ldrb	r3, [r2, r3]
 800ecba:	f003 031f 	and.w	r3, r3, #31
 800ecbe:	693a      	ldr	r2, [r7, #16]
 800ecc0:	fa22 f303 	lsr.w	r3, r2, r3
 800ecc4:	4a0a      	ldr	r2, [pc, #40]	; (800ecf0 <HAL_RCC_ClockConfig+0x360>)
 800ecc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ecc8:	4a0a      	ldr	r2, [pc, #40]	; (800ecf4 <HAL_RCC_ClockConfig+0x364>)
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ecce:	4b0a      	ldr	r3, [pc, #40]	; (800ecf8 <HAL_RCC_ClockConfig+0x368>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7f9 ffd0 	bl	8008c78 <HAL_InitTick>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	58024400 	.word	0x58024400
 800ecec:	0801501c 	.word	0x0801501c
 800ecf0:	24000034 	.word	0x24000034
 800ecf4:	24000030 	.word	0x24000030
 800ecf8:	24000038 	.word	0x24000038

0800ecfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b089      	sub	sp, #36	; 0x24
 800ed00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed02:	4bb3      	ldr	r3, [pc, #716]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed0a:	2b18      	cmp	r3, #24
 800ed0c:	f200 8155 	bhi.w	800efba <HAL_RCC_GetSysClockFreq+0x2be>
 800ed10:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ed12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed16:	bf00      	nop
 800ed18:	0800ed7d 	.word	0x0800ed7d
 800ed1c:	0800efbb 	.word	0x0800efbb
 800ed20:	0800efbb 	.word	0x0800efbb
 800ed24:	0800efbb 	.word	0x0800efbb
 800ed28:	0800efbb 	.word	0x0800efbb
 800ed2c:	0800efbb 	.word	0x0800efbb
 800ed30:	0800efbb 	.word	0x0800efbb
 800ed34:	0800efbb 	.word	0x0800efbb
 800ed38:	0800eda3 	.word	0x0800eda3
 800ed3c:	0800efbb 	.word	0x0800efbb
 800ed40:	0800efbb 	.word	0x0800efbb
 800ed44:	0800efbb 	.word	0x0800efbb
 800ed48:	0800efbb 	.word	0x0800efbb
 800ed4c:	0800efbb 	.word	0x0800efbb
 800ed50:	0800efbb 	.word	0x0800efbb
 800ed54:	0800efbb 	.word	0x0800efbb
 800ed58:	0800eda9 	.word	0x0800eda9
 800ed5c:	0800efbb 	.word	0x0800efbb
 800ed60:	0800efbb 	.word	0x0800efbb
 800ed64:	0800efbb 	.word	0x0800efbb
 800ed68:	0800efbb 	.word	0x0800efbb
 800ed6c:	0800efbb 	.word	0x0800efbb
 800ed70:	0800efbb 	.word	0x0800efbb
 800ed74:	0800efbb 	.word	0x0800efbb
 800ed78:	0800edaf 	.word	0x0800edaf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed7c:	4b94      	ldr	r3, [pc, #592]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 0320 	and.w	r3, r3, #32
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d009      	beq.n	800ed9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed88:	4b91      	ldr	r3, [pc, #580]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	08db      	lsrs	r3, r3, #3
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	4a90      	ldr	r2, [pc, #576]	; (800efd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ed94:	fa22 f303 	lsr.w	r3, r2, r3
 800ed98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ed9a:	e111      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ed9c:	4b8d      	ldr	r3, [pc, #564]	; (800efd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ed9e:	61bb      	str	r3, [r7, #24]
    break;
 800eda0:	e10e      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800eda2:	4b8d      	ldr	r3, [pc, #564]	; (800efd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eda4:	61bb      	str	r3, [r7, #24]
    break;
 800eda6:	e10b      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800eda8:	4b8c      	ldr	r3, [pc, #560]	; (800efdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800edaa:	61bb      	str	r3, [r7, #24]
    break;
 800edac:	e108      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800edae:	4b88      	ldr	r3, [pc, #544]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb2:	f003 0303 	and.w	r3, r3, #3
 800edb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800edb8:	4b85      	ldr	r3, [pc, #532]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edbc:	091b      	lsrs	r3, r3, #4
 800edbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800edc4:	4b82      	ldr	r3, [pc, #520]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800edce:	4b80      	ldr	r3, [pc, #512]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd2:	08db      	lsrs	r3, r3, #3
 800edd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	fb02 f303 	mul.w	r3, r2, r3
 800edde:	ee07 3a90 	vmov	s15, r3
 800ede2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ede6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 80e1 	beq.w	800efb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	f000 8083 	beq.w	800ef00 <HAL_RCC_GetSysClockFreq+0x204>
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	f200 80a1 	bhi.w	800ef44 <HAL_RCC_GetSysClockFreq+0x248>
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d003      	beq.n	800ee10 <HAL_RCC_GetSysClockFreq+0x114>
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d056      	beq.n	800eebc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ee0e:	e099      	b.n	800ef44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee10:	4b6f      	ldr	r3, [pc, #444]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f003 0320 	and.w	r3, r3, #32
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d02d      	beq.n	800ee78 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ee1c:	4b6c      	ldr	r3, [pc, #432]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	08db      	lsrs	r3, r3, #3
 800ee22:	f003 0303 	and.w	r3, r3, #3
 800ee26:	4a6b      	ldr	r2, [pc, #428]	; (800efd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ee28:	fa22 f303 	lsr.w	r3, r2, r3
 800ee2c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	ee07 3a90 	vmov	s15, r3
 800ee34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	ee07 3a90 	vmov	s15, r3
 800ee3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee46:	4b62      	ldr	r3, [pc, #392]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee4e:	ee07 3a90 	vmov	s15, r3
 800ee52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800efe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ee76:	e087      	b.n	800ef88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	ee07 3a90 	vmov	s15, r3
 800ee7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee82:	eddf 6a58 	vldr	s13, [pc, #352]	; 800efe4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ee86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee8a:	4b51      	ldr	r3, [pc, #324]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee92:	ee07 3a90 	vmov	s15, r3
 800ee96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800efe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eeae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eeba:	e065      	b.n	800ef88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	ee07 3a90 	vmov	s15, r3
 800eec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eec6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800efe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800eeca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eece:	4b40      	ldr	r3, [pc, #256]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eed6:	ee07 3a90 	vmov	s15, r3
 800eeda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eede:	ed97 6a02 	vldr	s12, [r7, #8]
 800eee2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800efe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eefe:	e043      	b.n	800ef88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	ee07 3a90 	vmov	s15, r3
 800ef06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800efec <HAL_RCC_GetSysClockFreq+0x2f0>
 800ef0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef12:	4b2f      	ldr	r3, [pc, #188]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ef14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef1a:	ee07 3a90 	vmov	s15, r3
 800ef1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800efe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ef2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef42:	e021      	b.n	800ef88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	ee07 3a90 	vmov	s15, r3
 800ef4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800efe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ef52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef56:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ef58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef5e:	ee07 3a90 	vmov	s15, r3
 800ef62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800efe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ef6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ef88:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ef8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef8c:	0a5b      	lsrs	r3, r3, #9
 800ef8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef92:	3301      	adds	r3, #1
 800ef94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	ee07 3a90 	vmov	s15, r3
 800ef9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800efa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800efa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efac:	ee17 3a90 	vmov	r3, s15
 800efb0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800efb2:	e005      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	61bb      	str	r3, [r7, #24]
    break;
 800efb8:	e002      	b.n	800efc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800efba:	4b07      	ldr	r3, [pc, #28]	; (800efd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800efbc:	61bb      	str	r3, [r7, #24]
    break;
 800efbe:	bf00      	nop
  }

  return sysclockfreq;
 800efc0:	69bb      	ldr	r3, [r7, #24]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3724      	adds	r7, #36	; 0x24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	58024400 	.word	0x58024400
 800efd4:	03d09000 	.word	0x03d09000
 800efd8:	003d0900 	.word	0x003d0900
 800efdc:	017d7840 	.word	0x017d7840
 800efe0:	46000000 	.word	0x46000000
 800efe4:	4c742400 	.word	0x4c742400
 800efe8:	4a742400 	.word	0x4a742400
 800efec:	4bbebc20 	.word	0x4bbebc20

0800eff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800eff6:	f7ff fe81 	bl	800ecfc <HAL_RCC_GetSysClockFreq>
 800effa:	4602      	mov	r2, r0
 800effc:	4b10      	ldr	r3, [pc, #64]	; (800f040 <HAL_RCC_GetHCLKFreq+0x50>)
 800effe:	699b      	ldr	r3, [r3, #24]
 800f000:	0a1b      	lsrs	r3, r3, #8
 800f002:	f003 030f 	and.w	r3, r3, #15
 800f006:	490f      	ldr	r1, [pc, #60]	; (800f044 <HAL_RCC_GetHCLKFreq+0x54>)
 800f008:	5ccb      	ldrb	r3, [r1, r3]
 800f00a:	f003 031f 	and.w	r3, r3, #31
 800f00e:	fa22 f303 	lsr.w	r3, r2, r3
 800f012:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f014:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <HAL_RCC_GetHCLKFreq+0x50>)
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f003 030f 	and.w	r3, r3, #15
 800f01c:	4a09      	ldr	r2, [pc, #36]	; (800f044 <HAL_RCC_GetHCLKFreq+0x54>)
 800f01e:	5cd3      	ldrb	r3, [r2, r3]
 800f020:	f003 031f 	and.w	r3, r3, #31
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	fa22 f303 	lsr.w	r3, r2, r3
 800f02a:	4a07      	ldr	r2, [pc, #28]	; (800f048 <HAL_RCC_GetHCLKFreq+0x58>)
 800f02c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f02e:	4a07      	ldr	r2, [pc, #28]	; (800f04c <HAL_RCC_GetHCLKFreq+0x5c>)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f034:	4b04      	ldr	r3, [pc, #16]	; (800f048 <HAL_RCC_GetHCLKFreq+0x58>)
 800f036:	681b      	ldr	r3, [r3, #0]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	58024400 	.word	0x58024400
 800f044:	0801501c 	.word	0x0801501c
 800f048:	24000034 	.word	0x24000034
 800f04c:	24000030 	.word	0x24000030

0800f050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f054:	f7ff ffcc 	bl	800eff0 <HAL_RCC_GetHCLKFreq>
 800f058:	4602      	mov	r2, r0
 800f05a:	4b06      	ldr	r3, [pc, #24]	; (800f074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	091b      	lsrs	r3, r3, #4
 800f060:	f003 0307 	and.w	r3, r3, #7
 800f064:	4904      	ldr	r1, [pc, #16]	; (800f078 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f066:	5ccb      	ldrb	r3, [r1, r3]
 800f068:	f003 031f 	and.w	r3, r3, #31
 800f06c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f070:	4618      	mov	r0, r3
 800f072:	bd80      	pop	{r7, pc}
 800f074:	58024400 	.word	0x58024400
 800f078:	0801501c 	.word	0x0801501c

0800f07c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f080:	f7ff ffb6 	bl	800eff0 <HAL_RCC_GetHCLKFreq>
 800f084:	4602      	mov	r2, r0
 800f086:	4b06      	ldr	r3, [pc, #24]	; (800f0a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	f003 0307 	and.w	r3, r3, #7
 800f090:	4904      	ldr	r1, [pc, #16]	; (800f0a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f092:	5ccb      	ldrb	r3, [r1, r3]
 800f094:	f003 031f 	and.w	r3, r3, #31
 800f098:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	58024400 	.word	0x58024400
 800f0a4:	0801501c 	.word	0x0801501c

0800f0a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d03f      	beq.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0cc:	d02a      	beq.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f0ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0d2:	d824      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f0d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0d8:	d018      	beq.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f0da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0de:	d81e      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d003      	beq.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f0e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0e8:	d007      	beq.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f0ea:	e018      	b.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0ec:	4ba3      	ldr	r3, [pc, #652]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	4aa2      	ldr	r2, [pc, #648]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f0f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f0f8:	e015      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	2102      	movs	r1, #2
 800f100:	4618      	mov	r0, r3
 800f102:	f001 f9d5 	bl	80104b0 <RCCEx_PLL2_Config>
 800f106:	4603      	mov	r3, r0
 800f108:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f10a:	e00c      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3324      	adds	r3, #36	; 0x24
 800f110:	2102      	movs	r1, #2
 800f112:	4618      	mov	r0, r3
 800f114:	f001 fa7e 	bl	8010614 <RCCEx_PLL3_Config>
 800f118:	4603      	mov	r3, r0
 800f11a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f11c:	e003      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	75fb      	strb	r3, [r7, #23]
      break;
 800f122:	e000      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f124:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f126:	7dfb      	ldrb	r3, [r7, #23]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f12c:	4b93      	ldr	r3, [pc, #588]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f138:	4990      	ldr	r1, [pc, #576]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f13a:	4313      	orrs	r3, r2
 800f13c:	650b      	str	r3, [r1, #80]	; 0x50
 800f13e:	e001      	b.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d03d      	beq.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f154:	2b04      	cmp	r3, #4
 800f156:	d826      	bhi.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f158:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800f15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15e:	bf00      	nop
 800f160:	0800f175 	.word	0x0800f175
 800f164:	0800f183 	.word	0x0800f183
 800f168:	0800f195 	.word	0x0800f195
 800f16c:	0800f1ad 	.word	0x0800f1ad
 800f170:	0800f1ad 	.word	0x0800f1ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f174:	4b81      	ldr	r3, [pc, #516]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f178:	4a80      	ldr	r2, [pc, #512]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f17a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f17e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f180:	e015      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	3304      	adds	r3, #4
 800f186:	2100      	movs	r1, #0
 800f188:	4618      	mov	r0, r3
 800f18a:	f001 f991 	bl	80104b0 <RCCEx_PLL2_Config>
 800f18e:	4603      	mov	r3, r0
 800f190:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f192:	e00c      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3324      	adds	r3, #36	; 0x24
 800f198:	2100      	movs	r1, #0
 800f19a:	4618      	mov	r0, r3
 800f19c:	f001 fa3a 	bl	8010614 <RCCEx_PLL3_Config>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f1a4:	e003      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800f1aa:	e000      	b.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f1b4:	4b71      	ldr	r3, [pc, #452]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b8:	f023 0207 	bic.w	r2, r3, #7
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1c0:	496e      	ldr	r1, [pc, #440]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	650b      	str	r3, [r1, #80]	; 0x50
 800f1c6:	e001      	b.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1c8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d042      	beq.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1e0:	d02b      	beq.n	800f23a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800f1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1e6:	d825      	bhi.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f1e8:	2bc0      	cmp	r3, #192	; 0xc0
 800f1ea:	d028      	beq.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800f1ec:	2bc0      	cmp	r3, #192	; 0xc0
 800f1ee:	d821      	bhi.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f1f0:	2b80      	cmp	r3, #128	; 0x80
 800f1f2:	d016      	beq.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800f1f4:	2b80      	cmp	r3, #128	; 0x80
 800f1f6:	d81d      	bhi.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800f1fc:	2b40      	cmp	r3, #64	; 0x40
 800f1fe:	d007      	beq.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800f200:	e018      	b.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f202:	4b5e      	ldr	r3, [pc, #376]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f206:	4a5d      	ldr	r2, [pc, #372]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f20c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f20e:	e017      	b.n	800f240 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3304      	adds	r3, #4
 800f214:	2100      	movs	r1, #0
 800f216:	4618      	mov	r0, r3
 800f218:	f001 f94a 	bl	80104b0 <RCCEx_PLL2_Config>
 800f21c:	4603      	mov	r3, r0
 800f21e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f220:	e00e      	b.n	800f240 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3324      	adds	r3, #36	; 0x24
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f001 f9f3 	bl	8010614 <RCCEx_PLL3_Config>
 800f22e:	4603      	mov	r3, r0
 800f230:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f232:	e005      	b.n	800f240 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	75fb      	strb	r3, [r7, #23]
      break;
 800f238:	e002      	b.n	800f240 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800f23a:	bf00      	nop
 800f23c:	e000      	b.n	800f240 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800f23e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f240:	7dfb      	ldrb	r3, [r7, #23]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d109      	bne.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f246:	4b4d      	ldr	r3, [pc, #308]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f24a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f252:	494a      	ldr	r1, [pc, #296]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f254:	4313      	orrs	r3, r2
 800f256:	650b      	str	r3, [r1, #80]	; 0x50
 800f258:	e001      	b.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f266:	2b00      	cmp	r3, #0
 800f268:	d049      	beq.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f274:	d030      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800f276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f27a:	d82a      	bhi.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f27c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f280:	d02c      	beq.n	800f2dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800f282:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f286:	d824      	bhi.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f28c:	d018      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800f28e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f292:	d81e      	bhi.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f294:	2b00      	cmp	r3, #0
 800f296:	d003      	beq.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800f298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f29c:	d007      	beq.n	800f2ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800f29e:	e018      	b.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2a0:	4b36      	ldr	r3, [pc, #216]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a4:	4a35      	ldr	r2, [pc, #212]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f2a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f2ac:	e017      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3304      	adds	r3, #4
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f001 f8fb 	bl	80104b0 <RCCEx_PLL2_Config>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f2be:	e00e      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3324      	adds	r3, #36	; 0x24
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f001 f9a4 	bl	8010614 <RCCEx_PLL3_Config>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f2d0:	e005      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800f2d6:	e002      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800f2d8:	bf00      	nop
 800f2da:	e000      	b.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800f2dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10a      	bne.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f2e4:	4b25      	ldr	r3, [pc, #148]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f2f2:	4922      	ldr	r1, [pc, #136]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	658b      	str	r3, [r1, #88]	; 0x58
 800f2f8:	e001      	b.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2fa:	7dfb      	ldrb	r3, [r7, #23]
 800f2fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f306:	2b00      	cmp	r3, #0
 800f308:	d04b      	beq.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f314:	d030      	beq.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800f316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f31a:	d82a      	bhi.n	800f372 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f31c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f320:	d02e      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800f322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f326:	d824      	bhi.n	800f372 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f32c:	d018      	beq.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800f32e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f332:	d81e      	bhi.n	800f372 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f334:	2b00      	cmp	r3, #0
 800f336:	d003      	beq.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800f338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f33c:	d007      	beq.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800f33e:	e018      	b.n	800f372 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f340:	4b0e      	ldr	r3, [pc, #56]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f344:	4a0d      	ldr	r2, [pc, #52]	; (800f37c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f34a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f34c:	e019      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	3304      	adds	r3, #4
 800f352:	2100      	movs	r1, #0
 800f354:	4618      	mov	r0, r3
 800f356:	f001 f8ab 	bl	80104b0 <RCCEx_PLL2_Config>
 800f35a:	4603      	mov	r3, r0
 800f35c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f35e:	e010      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	3324      	adds	r3, #36	; 0x24
 800f364:	2100      	movs	r1, #0
 800f366:	4618      	mov	r0, r3
 800f368:	f001 f954 	bl	8010614 <RCCEx_PLL3_Config>
 800f36c:	4603      	mov	r3, r0
 800f36e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f370:	e007      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f372:	2301      	movs	r3, #1
 800f374:	75fb      	strb	r3, [r7, #23]
      break;
 800f376:	e004      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800f378:	bf00      	nop
 800f37a:	e002      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800f37c:	58024400 	.word	0x58024400
      break;
 800f380:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f382:	7dfb      	ldrb	r3, [r7, #23]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f388:	4b99      	ldr	r3, [pc, #612]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f38c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f396:	4996      	ldr	r1, [pc, #600]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f398:	4313      	orrs	r3, r2
 800f39a:	658b      	str	r3, [r1, #88]	; 0x58
 800f39c:	e001      	b.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d032      	beq.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3b2:	2b30      	cmp	r3, #48	; 0x30
 800f3b4:	d01c      	beq.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800f3b6:	2b30      	cmp	r3, #48	; 0x30
 800f3b8:	d817      	bhi.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f3ba:	2b20      	cmp	r3, #32
 800f3bc:	d00c      	beq.n	800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800f3be:	2b20      	cmp	r3, #32
 800f3c0:	d813      	bhi.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d016      	beq.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800f3c6:	2b10      	cmp	r3, #16
 800f3c8:	d10f      	bne.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3ca:	4b89      	ldr	r3, [pc, #548]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ce:	4a88      	ldr	r2, [pc, #544]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f3d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800f3d6:	e00e      	b.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	2102      	movs	r1, #2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f001 f866 	bl	80104b0 <RCCEx_PLL2_Config>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800f3e8:	e005      	b.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800f3ee:	e002      	b.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e000      	b.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800f3f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f3f6:	7dfb      	ldrb	r3, [r7, #23]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d109      	bne.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f3fc:	4b7c      	ldr	r3, [pc, #496]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f400:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f408:	4979      	ldr	r1, [pc, #484]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f40a:	4313      	orrs	r3, r2
 800f40c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f40e:	e001      	b.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d047      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f428:	d030      	beq.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800f42a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f42e:	d82a      	bhi.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f430:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f434:	d02c      	beq.n	800f490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800f436:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f43a:	d824      	bhi.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f440:	d018      	beq.n	800f474 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800f442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f446:	d81e      	bhi.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800f44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f450:	d007      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800f452:	e018      	b.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f454:	4b66      	ldr	r3, [pc, #408]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f458:	4a65      	ldr	r2, [pc, #404]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f45a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f45e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f460:	e017      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	3304      	adds	r3, #4
 800f466:	2100      	movs	r1, #0
 800f468:	4618      	mov	r0, r3
 800f46a:	f001 f821 	bl	80104b0 <RCCEx_PLL2_Config>
 800f46e:	4603      	mov	r3, r0
 800f470:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f472:	e00e      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3324      	adds	r3, #36	; 0x24
 800f478:	2100      	movs	r1, #0
 800f47a:	4618      	mov	r0, r3
 800f47c:	f001 f8ca 	bl	8010614 <RCCEx_PLL3_Config>
 800f480:	4603      	mov	r3, r0
 800f482:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f484:	e005      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	75fb      	strb	r3, [r7, #23]
      break;
 800f48a:	e002      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800f48c:	bf00      	nop
 800f48e:	e000      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800f490:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d109      	bne.n	800f4ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f498:	4b55      	ldr	r3, [pc, #340]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f49c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4a4:	4952      	ldr	r1, [pc, #328]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	650b      	str	r3, [r1, #80]	; 0x50
 800f4aa:	e001      	b.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4ac:	7dfb      	ldrb	r3, [r7, #23]
 800f4ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d049      	beq.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f4c4:	d02e      	beq.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800f4c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f4ca:	d828      	bhi.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f4cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f4d0:	d02a      	beq.n	800f528 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800f4d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f4d6:	d822      	bhi.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f4d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f4dc:	d026      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800f4de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f4e2:	d81c      	bhi.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4e8:	d010      	beq.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800f4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4ee:	d816      	bhi.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d01d      	beq.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800f4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4f8:	d111      	bne.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	2101      	movs	r1, #1
 800f500:	4618      	mov	r0, r3
 800f502:	f000 ffd5 	bl	80104b0 <RCCEx_PLL2_Config>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f50a:	e012      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	3324      	adds	r3, #36	; 0x24
 800f510:	2101      	movs	r1, #1
 800f512:	4618      	mov	r0, r3
 800f514:	f001 f87e 	bl	8010614 <RCCEx_PLL3_Config>
 800f518:	4603      	mov	r3, r0
 800f51a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f51c:	e009      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	75fb      	strb	r3, [r7, #23]
      break;
 800f522:	e006      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f524:	bf00      	nop
 800f526:	e004      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f528:	bf00      	nop
 800f52a:	e002      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f52c:	bf00      	nop
 800f52e:	e000      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f530:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f532:	7dfb      	ldrb	r3, [r7, #23]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d109      	bne.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f538:	4b2d      	ldr	r3, [pc, #180]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f53c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f544:	492a      	ldr	r1, [pc, #168]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f546:	4313      	orrs	r3, r2
 800f548:	650b      	str	r3, [r1, #80]	; 0x50
 800f54a:	e001      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
 800f54e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d04d      	beq.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f566:	d02e      	beq.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800f568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f56c:	d828      	bhi.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f572:	d02a      	beq.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 800f574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f578:	d822      	bhi.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f57a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f57e:	d026      	beq.n	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 800f580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f584:	d81c      	bhi.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f58a:	d010      	beq.n	800f5ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800f58c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f590:	d816      	bhi.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f592:	2b00      	cmp	r3, #0
 800f594:	d01d      	beq.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800f596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f59a:	d111      	bne.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f000 ff84 	bl	80104b0 <RCCEx_PLL2_Config>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f5ac:	e012      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3324      	adds	r3, #36	; 0x24
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f001 f82d 	bl	8010614 <RCCEx_PLL3_Config>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f5be:	e009      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800f5c4:	e006      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f5c6:	bf00      	nop
 800f5c8:	e004      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f5ca:	bf00      	nop
 800f5cc:	e002      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f5ce:	bf00      	nop
 800f5d0:	e000      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f5d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10c      	bne.n	800f5f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f5da:	4b05      	ldr	r3, [pc, #20]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f5e8:	4901      	ldr	r1, [pc, #4]	; (800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	658b      	str	r3, [r1, #88]	; 0x58
 800f5ee:	e003      	b.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800f5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f600:	2b00      	cmp	r3, #0
 800f602:	d02f      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f60c:	d00e      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800f60e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f612:	d814      	bhi.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800f614:	2b00      	cmp	r3, #0
 800f616:	d015      	beq.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800f618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f61c:	d10f      	bne.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f61e:	4baf      	ldr	r3, [pc, #700]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f622:	4aae      	ldr	r2, [pc, #696]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f62a:	e00c      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3304      	adds	r3, #4
 800f630:	2101      	movs	r1, #1
 800f632:	4618      	mov	r0, r3
 800f634:	f000 ff3c 	bl	80104b0 <RCCEx_PLL2_Config>
 800f638:	4603      	mov	r3, r0
 800f63a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f63c:	e003      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	75fb      	strb	r3, [r7, #23]
      break;
 800f642:	e000      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800f644:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d109      	bne.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f64c:	4ba3      	ldr	r3, [pc, #652]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f650:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f658:	49a0      	ldr	r1, [pc, #640]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f65a:	4313      	orrs	r3, r2
 800f65c:	650b      	str	r3, [r1, #80]	; 0x50
 800f65e:	e001      	b.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f660:	7dfb      	ldrb	r3, [r7, #23]
 800f662:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d032      	beq.n	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f674:	2b03      	cmp	r3, #3
 800f676:	d81b      	bhi.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800f678:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800f67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67e:	bf00      	nop
 800f680:	0800f6b7 	.word	0x0800f6b7
 800f684:	0800f691 	.word	0x0800f691
 800f688:	0800f69f 	.word	0x0800f69f
 800f68c:	0800f6b7 	.word	0x0800f6b7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f690:	4b92      	ldr	r3, [pc, #584]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f694:	4a91      	ldr	r2, [pc, #580]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f69a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f69c:	e00c      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	2102      	movs	r1, #2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f000 ff03 	bl	80104b0 <RCCEx_PLL2_Config>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f6ae:	e003      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	75fb      	strb	r3, [r7, #23]
      break;
 800f6b4:	e000      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800f6b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f6b8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d109      	bne.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f6be:	4b87      	ldr	r3, [pc, #540]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6c2:	f023 0203 	bic.w	r2, r3, #3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ca:	4984      	ldr	r1, [pc, #528]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f6d0:	e001      	b.n	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6d2:	7dfb      	ldrb	r3, [r7, #23]
 800f6d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f000 8086 	beq.w	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f6e4:	4b7e      	ldr	r3, [pc, #504]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a7d      	ldr	r2, [pc, #500]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f6ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f6f0:	f7f9 fb0c 	bl	8008d0c <HAL_GetTick>
 800f6f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f6f6:	e009      	b.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f6f8:	f7f9 fb08 	bl	8008d0c <HAL_GetTick>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	2b64      	cmp	r3, #100	; 0x64
 800f704:	d902      	bls.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800f706:	2303      	movs	r3, #3
 800f708:	75fb      	strb	r3, [r7, #23]
        break;
 800f70a:	e005      	b.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f70c:	4b74      	ldr	r3, [pc, #464]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f714:	2b00      	cmp	r3, #0
 800f716:	d0ef      	beq.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800f718:	7dfb      	ldrb	r3, [r7, #23]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d166      	bne.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f71e:	4b6f      	ldr	r3, [pc, #444]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f728:	4053      	eors	r3, r2
 800f72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d013      	beq.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f732:	4b6a      	ldr	r3, [pc, #424]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f73a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f73c:	4b67      	ldr	r3, [pc, #412]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f740:	4a66      	ldr	r2, [pc, #408]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f746:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f748:	4b64      	ldr	r3, [pc, #400]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f74c:	4a63      	ldr	r2, [pc, #396]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f752:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f754:	4a61      	ldr	r2, [pc, #388]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f764:	d115      	bne.n	800f792 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f766:	f7f9 fad1 	bl	8008d0c <HAL_GetTick>
 800f76a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f76c:	e00b      	b.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f76e:	f7f9 facd 	bl	8008d0c <HAL_GetTick>
 800f772:	4602      	mov	r2, r0
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	f241 3288 	movw	r2, #5000	; 0x1388
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d902      	bls.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800f780:	2303      	movs	r3, #3
 800f782:	75fb      	strb	r3, [r7, #23]
            break;
 800f784:	e005      	b.n	800f792 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f786:	4b55      	ldr	r3, [pc, #340]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78a:	f003 0302 	and.w	r3, r3, #2
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d0ed      	beq.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800f792:	7dfb      	ldrb	r3, [r7, #23]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d126      	bne.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f79e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7a6:	d10d      	bne.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800f7a8:	4b4c      	ldr	r3, [pc, #304]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7aa:	691b      	ldr	r3, [r3, #16]
 800f7ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f7b6:	0919      	lsrs	r1, r3, #4
 800f7b8:	4b4a      	ldr	r3, [pc, #296]	; (800f8e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800f7ba:	400b      	ands	r3, r1
 800f7bc:	4947      	ldr	r1, [pc, #284]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	610b      	str	r3, [r1, #16]
 800f7c2:	e005      	b.n	800f7d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800f7c4:	4b45      	ldr	r3, [pc, #276]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	4a44      	ldr	r2, [pc, #272]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7ce:	6113      	str	r3, [r2, #16]
 800f7d0:	4b42      	ldr	r3, [pc, #264]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f7da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7de:	493f      	ldr	r1, [pc, #252]	; (800f8dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	670b      	str	r3, [r1, #112]	; 0x70
 800f7e4:	e004      	b.n	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	75bb      	strb	r3, [r7, #22]
 800f7ea:	e001      	b.n	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
 800f7ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 0301 	and.w	r3, r3, #1
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 8085 	beq.w	800f908 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f802:	2b28      	cmp	r3, #40	; 0x28
 800f804:	d866      	bhi.n	800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800f806:	a201      	add	r2, pc, #4	; (adr r2, 800f80c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800f808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80c:	0800f8e9 	.word	0x0800f8e9
 800f810:	0800f8d5 	.word	0x0800f8d5
 800f814:	0800f8d5 	.word	0x0800f8d5
 800f818:	0800f8d5 	.word	0x0800f8d5
 800f81c:	0800f8d5 	.word	0x0800f8d5
 800f820:	0800f8d5 	.word	0x0800f8d5
 800f824:	0800f8d5 	.word	0x0800f8d5
 800f828:	0800f8d5 	.word	0x0800f8d5
 800f82c:	0800f8b1 	.word	0x0800f8b1
 800f830:	0800f8d5 	.word	0x0800f8d5
 800f834:	0800f8d5 	.word	0x0800f8d5
 800f838:	0800f8d5 	.word	0x0800f8d5
 800f83c:	0800f8d5 	.word	0x0800f8d5
 800f840:	0800f8d5 	.word	0x0800f8d5
 800f844:	0800f8d5 	.word	0x0800f8d5
 800f848:	0800f8d5 	.word	0x0800f8d5
 800f84c:	0800f8c3 	.word	0x0800f8c3
 800f850:	0800f8d5 	.word	0x0800f8d5
 800f854:	0800f8d5 	.word	0x0800f8d5
 800f858:	0800f8d5 	.word	0x0800f8d5
 800f85c:	0800f8d5 	.word	0x0800f8d5
 800f860:	0800f8d5 	.word	0x0800f8d5
 800f864:	0800f8d5 	.word	0x0800f8d5
 800f868:	0800f8d5 	.word	0x0800f8d5
 800f86c:	0800f8e9 	.word	0x0800f8e9
 800f870:	0800f8d5 	.word	0x0800f8d5
 800f874:	0800f8d5 	.word	0x0800f8d5
 800f878:	0800f8d5 	.word	0x0800f8d5
 800f87c:	0800f8d5 	.word	0x0800f8d5
 800f880:	0800f8d5 	.word	0x0800f8d5
 800f884:	0800f8d5 	.word	0x0800f8d5
 800f888:	0800f8d5 	.word	0x0800f8d5
 800f88c:	0800f8e9 	.word	0x0800f8e9
 800f890:	0800f8d5 	.word	0x0800f8d5
 800f894:	0800f8d5 	.word	0x0800f8d5
 800f898:	0800f8d5 	.word	0x0800f8d5
 800f89c:	0800f8d5 	.word	0x0800f8d5
 800f8a0:	0800f8d5 	.word	0x0800f8d5
 800f8a4:	0800f8d5 	.word	0x0800f8d5
 800f8a8:	0800f8d5 	.word	0x0800f8d5
 800f8ac:	0800f8e9 	.word	0x0800f8e9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 fdfa 	bl	80104b0 <RCCEx_PLL2_Config>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f8c0:	e013      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3324      	adds	r3, #36	; 0x24
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f000 fea3 	bl	8010614 <RCCEx_PLL3_Config>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f8d2:	e00a      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800f8d8:	e007      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 800f8da:	bf00      	nop
 800f8dc:	58024400 	.word	0x58024400
 800f8e0:	58024800 	.word	0x58024800
 800f8e4:	00ffffcf 	.word	0x00ffffcf
      break;
 800f8e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d109      	bne.n	800f904 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f8f0:	4b96      	ldr	r3, [pc, #600]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8fc:	4993      	ldr	r1, [pc, #588]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f8fe:	4313      	orrs	r3, r2
 800f900:	654b      	str	r3, [r1, #84]	; 0x54
 800f902:	e001      	b.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f904:	7dfb      	ldrb	r3, [r7, #23]
 800f906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 0302 	and.w	r3, r3, #2
 800f910:	2b00      	cmp	r3, #0
 800f912:	d038      	beq.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f918:	2b05      	cmp	r3, #5
 800f91a:	d821      	bhi.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800f91c:	a201      	add	r2, pc, #4	; (adr r2, 800f924 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800f91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f922:	bf00      	nop
 800f924:	0800f967 	.word	0x0800f967
 800f928:	0800f93d 	.word	0x0800f93d
 800f92c:	0800f94f 	.word	0x0800f94f
 800f930:	0800f967 	.word	0x0800f967
 800f934:	0800f967 	.word	0x0800f967
 800f938:	0800f967 	.word	0x0800f967
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3304      	adds	r3, #4
 800f940:	2101      	movs	r1, #1
 800f942:	4618      	mov	r0, r3
 800f944:	f000 fdb4 	bl	80104b0 <RCCEx_PLL2_Config>
 800f948:	4603      	mov	r3, r0
 800f94a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f94c:	e00c      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	3324      	adds	r3, #36	; 0x24
 800f952:	2101      	movs	r1, #1
 800f954:	4618      	mov	r0, r3
 800f956:	f000 fe5d 	bl	8010614 <RCCEx_PLL3_Config>
 800f95a:	4603      	mov	r3, r0
 800f95c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f95e:	e003      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f960:	2301      	movs	r3, #1
 800f962:	75fb      	strb	r3, [r7, #23]
      break;
 800f964:	e000      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800f966:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d109      	bne.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f96e:	4b77      	ldr	r3, [pc, #476]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f972:	f023 0207 	bic.w	r2, r3, #7
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f97a:	4974      	ldr	r1, [pc, #464]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f97c:	4313      	orrs	r3, r2
 800f97e:	654b      	str	r3, [r1, #84]	; 0x54
 800f980:	e001      	b.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f003 0304 	and.w	r3, r3, #4
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d03a      	beq.n	800fa08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f998:	2b05      	cmp	r3, #5
 800f99a:	d821      	bhi.n	800f9e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9e7 	.word	0x0800f9e7
 800f9a8:	0800f9bd 	.word	0x0800f9bd
 800f9ac:	0800f9cf 	.word	0x0800f9cf
 800f9b0:	0800f9e7 	.word	0x0800f9e7
 800f9b4:	0800f9e7 	.word	0x0800f9e7
 800f9b8:	0800f9e7 	.word	0x0800f9e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	2101      	movs	r1, #1
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f000 fd74 	bl	80104b0 <RCCEx_PLL2_Config>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f9cc:	e00c      	b.n	800f9e8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	3324      	adds	r3, #36	; 0x24
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 fe1d 	bl	8010614 <RCCEx_PLL3_Config>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f9de:	e003      	b.n	800f9e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800f9e4:	e000      	b.n	800f9e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800f9e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10a      	bne.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f9ee:	4b57      	ldr	r3, [pc, #348]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9f2:	f023 0207 	bic.w	r2, r3, #7
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9fc:	4953      	ldr	r1, [pc, #332]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	658b      	str	r3, [r1, #88]	; 0x58
 800fa02:	e001      	b.n	800fa08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa04:	7dfb      	ldrb	r3, [r7, #23]
 800fa06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 0320 	and.w	r3, r3, #32
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d04b      	beq.n	800faac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa1e:	d02e      	beq.n	800fa7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800fa20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa24:	d828      	bhi.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800fa26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa2a:	d02a      	beq.n	800fa82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800fa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa30:	d822      	bhi.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800fa32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fa36:	d026      	beq.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800fa38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fa3c:	d81c      	bhi.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800fa3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa42:	d010      	beq.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800fa44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa48:	d816      	bhi.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d01d      	beq.n	800fa8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800fa4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa52:	d111      	bne.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3304      	adds	r3, #4
 800fa58:	2100      	movs	r1, #0
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 fd28 	bl	80104b0 <RCCEx_PLL2_Config>
 800fa60:	4603      	mov	r3, r0
 800fa62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fa64:	e012      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3324      	adds	r3, #36	; 0x24
 800fa6a:	2102      	movs	r1, #2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 fdd1 	bl	8010614 <RCCEx_PLL3_Config>
 800fa72:	4603      	mov	r3, r0
 800fa74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fa76:	e009      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	75fb      	strb	r3, [r7, #23]
      break;
 800fa7c:	e006      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800fa7e:	bf00      	nop
 800fa80:	e004      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800fa82:	bf00      	nop
 800fa84:	e002      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800fa86:	bf00      	nop
 800fa88:	e000      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800fa8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10a      	bne.n	800faa8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fa92:	4b2e      	ldr	r3, [pc, #184]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800fa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faa0:	492a      	ldr	r1, [pc, #168]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800faa2:	4313      	orrs	r3, r2
 800faa4:	654b      	str	r3, [r1, #84]	; 0x54
 800faa6:	e001      	b.n	800faac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d04d      	beq.n	800fb54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fabe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fac2:	d02e      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800fac4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fac8:	d828      	bhi.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800faca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800face:	d02a      	beq.n	800fb26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800fad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fad4:	d822      	bhi.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800fad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fada:	d026      	beq.n	800fb2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800fadc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fae0:	d81c      	bhi.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800fae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fae6:	d010      	beq.n	800fb0a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800fae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800faec:	d816      	bhi.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d01d      	beq.n	800fb2e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800faf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faf6:	d111      	bne.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3304      	adds	r3, #4
 800fafc:	2100      	movs	r1, #0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f000 fcd6 	bl	80104b0 <RCCEx_PLL2_Config>
 800fb04:	4603      	mov	r3, r0
 800fb06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800fb08:	e012      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3324      	adds	r3, #36	; 0x24
 800fb0e:	2102      	movs	r1, #2
 800fb10:	4618      	mov	r0, r3
 800fb12:	f000 fd7f 	bl	8010614 <RCCEx_PLL3_Config>
 800fb16:	4603      	mov	r3, r0
 800fb18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800fb1a:	e009      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	75fb      	strb	r3, [r7, #23]
      break;
 800fb20:	e006      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800fb22:	bf00      	nop
 800fb24:	e004      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800fb26:	bf00      	nop
 800fb28:	e002      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800fb2a:	bf00      	nop
 800fb2c:	e000      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800fb2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10c      	bne.n	800fb50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fb36:	4b05      	ldr	r3, [pc, #20]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800fb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb44:	4901      	ldr	r1, [pc, #4]	; (800fb4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800fb46:	4313      	orrs	r3, r2
 800fb48:	658b      	str	r3, [r1, #88]	; 0x58
 800fb4a:	e003      	b.n	800fb54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800fb4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d04b      	beq.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fb6a:	d02e      	beq.n	800fbca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800fb6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fb70:	d828      	bhi.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fb72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb76:	d02a      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800fb78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb7c:	d822      	bhi.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fb7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fb82:	d026      	beq.n	800fbd2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800fb84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fb88:	d81c      	bhi.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fb8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fb8e:	d010      	beq.n	800fbb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800fb90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fb94:	d816      	bhi.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d01d      	beq.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800fb9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb9e:	d111      	bne.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3304      	adds	r3, #4
 800fba4:	2100      	movs	r1, #0
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 fc82 	bl	80104b0 <RCCEx_PLL2_Config>
 800fbac:	4603      	mov	r3, r0
 800fbae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fbb0:	e012      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3324      	adds	r3, #36	; 0x24
 800fbb6:	2102      	movs	r1, #2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f000 fd2b 	bl	8010614 <RCCEx_PLL3_Config>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fbc2:	e009      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	75fb      	strb	r3, [r7, #23]
      break;
 800fbc8:	e006      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fbca:	bf00      	nop
 800fbcc:	e004      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fbce:	bf00      	nop
 800fbd0:	e002      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fbd2:	bf00      	nop
 800fbd4:	e000      	b.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fbd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d10a      	bne.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fbde:	4b9d      	ldr	r3, [pc, #628]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fbec:	4999      	ldr	r1, [pc, #612]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	658b      	str	r3, [r1, #88]	; 0x58
 800fbf2:	e001      	b.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf4:	7dfb      	ldrb	r3, [r7, #23]
 800fbf6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f003 0308 	and.w	r3, r3, #8
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d01a      	beq.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc0e:	d10a      	bne.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3324      	adds	r3, #36	; 0x24
 800fc14:	2102      	movs	r1, #2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 fcfc 	bl	8010614 <RCCEx_PLL3_Config>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fc26:	4b8b      	ldr	r3, [pc, #556]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc34:	4987      	ldr	r1, [pc, #540]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc36:	4313      	orrs	r3, r2
 800fc38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f003 0310 	and.w	r3, r3, #16
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d01a      	beq.n	800fc7c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc50:	d10a      	bne.n	800fc68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	3324      	adds	r3, #36	; 0x24
 800fc56:	2102      	movs	r1, #2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f000 fcdb 	bl	8010614 <RCCEx_PLL3_Config>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800fc64:	2301      	movs	r3, #1
 800fc66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fc68:	4b7a      	ldr	r3, [pc, #488]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc76:	4977      	ldr	r1, [pc, #476]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d034      	beq.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fc8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc92:	d01d      	beq.n	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800fc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc98:	d817      	bhi.n	800fcca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d003      	beq.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800fc9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca2:	d009      	beq.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800fca4:	e011      	b.n	800fcca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	2100      	movs	r1, #0
 800fcac:	4618      	mov	r0, r3
 800fcae:	f000 fbff 	bl	80104b0 <RCCEx_PLL2_Config>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800fcb6:	e00c      	b.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3324      	adds	r3, #36	; 0x24
 800fcbc:	2102      	movs	r1, #2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fca8 	bl	8010614 <RCCEx_PLL3_Config>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800fcc8:	e003      	b.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	75fb      	strb	r3, [r7, #23]
      break;
 800fcce:	e000      	b.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800fcd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10a      	bne.n	800fcee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fcd8:	4b5e      	ldr	r3, [pc, #376]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fcda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fce6:	495b      	ldr	r1, [pc, #364]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fce8:	4313      	orrs	r3, r2
 800fcea:	658b      	str	r3, [r1, #88]	; 0x58
 800fcec:	e001      	b.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcee:	7dfb      	ldrb	r3, [r7, #23]
 800fcf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d033      	beq.n	800fd66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fd08:	d01c      	beq.n	800fd44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800fd0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fd0e:	d816      	bhi.n	800fd3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800fd10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd14:	d003      	beq.n	800fd1e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800fd16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd1a:	d007      	beq.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800fd1c:	e00f      	b.n	800fd3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd1e:	4b4d      	ldr	r3, [pc, #308]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd22:	4a4c      	ldr	r2, [pc, #304]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fd28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800fd2a:	e00c      	b.n	800fd46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	3324      	adds	r3, #36	; 0x24
 800fd30:	2101      	movs	r1, #1
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 fc6e 	bl	8010614 <RCCEx_PLL3_Config>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800fd3c:	e003      	b.n	800fd46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	75fb      	strb	r3, [r7, #23]
      break;
 800fd42:	e000      	b.n	800fd46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800fd44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fd4c:	4b41      	ldr	r3, [pc, #260]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd5a:	493e      	ldr	r1, [pc, #248]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	654b      	str	r3, [r1, #84]	; 0x54
 800fd60:	e001      	b.n	800fd66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d029      	beq.n	800fdc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d003      	beq.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800fd7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd7e:	d007      	beq.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800fd80:	e00f      	b.n	800fda2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd82:	4b34      	ldr	r3, [pc, #208]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd86:	4a33      	ldr	r2, [pc, #204]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fd88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fd8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fd8e:	e00b      	b.n	800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	3304      	adds	r3, #4
 800fd94:	2102      	movs	r1, #2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f000 fb8a 	bl	80104b0 <RCCEx_PLL2_Config>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fda0:	e002      	b.n	800fda8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800fda2:	2301      	movs	r3, #1
 800fda4:	75fb      	strb	r3, [r7, #23]
      break;
 800fda6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fda8:	7dfb      	ldrb	r3, [r7, #23]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d109      	bne.n	800fdc2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fdae:	4b29      	ldr	r3, [pc, #164]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdba:	4926      	ldr	r1, [pc, #152]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800fdc0:	e001      	b.n	800fdc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdc2:	7dfb      	ldrb	r3, [r7, #23]
 800fdc4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00a      	beq.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3324      	adds	r3, #36	; 0x24
 800fdd6:	2102      	movs	r1, #2
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f000 fc1b 	bl	8010614 <RCCEx_PLL3_Config>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800fde4:	2301      	movs	r3, #1
 800fde6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d033      	beq.n	800fe5c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdfc:	d017      	beq.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800fdfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe02:	d811      	bhi.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800fe04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe08:	d013      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800fe0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe0e:	d80b      	bhi.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d010      	beq.n	800fe36 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800fe14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe18:	d106      	bne.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe1a:	4b0e      	ldr	r3, [pc, #56]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fe1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1e:	4a0d      	ldr	r2, [pc, #52]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fe20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800fe26:	e007      	b.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe2c:	e004      	b.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fe2e:	bf00      	nop
 800fe30:	e002      	b.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fe32:	bf00      	nop
 800fe34:	e000      	b.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fe36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fe38:	7dfb      	ldrb	r3, [r7, #23]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d10c      	bne.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fe3e:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fe40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe4a:	4902      	ldr	r1, [pc, #8]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	654b      	str	r3, [r1, #84]	; 0x54
 800fe50:	e004      	b.n	800fe5c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800fe52:	bf00      	nop
 800fe54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe58:	7dfb      	ldrb	r3, [r7, #23]
 800fe5a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d008      	beq.n	800fe7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fe68:	4b31      	ldr	r3, [pc, #196]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe74:	492e      	ldr	r1, [pc, #184]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fe76:	4313      	orrs	r3, r2
 800fe78:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d009      	beq.n	800fe9a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fe86:	4b2a      	ldr	r3, [pc, #168]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fe88:	691b      	ldr	r3, [r3, #16]
 800fe8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fe94:	4926      	ldr	r1, [pc, #152]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fe96:	4313      	orrs	r3, r2
 800fe98:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d008      	beq.n	800feb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fea6:	4b22      	ldr	r3, [pc, #136]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feaa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800feb2:	491f      	ldr	r1, [pc, #124]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800feb4:	4313      	orrs	r3, r2
 800feb6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00d      	beq.n	800fee0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fec4:	4b1a      	ldr	r3, [pc, #104]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	4a19      	ldr	r2, [pc, #100]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800feca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fece:	6113      	str	r3, [r2, #16]
 800fed0:	4b17      	ldr	r3, [pc, #92]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fed2:	691a      	ldr	r2, [r3, #16]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800feda:	4915      	ldr	r1, [pc, #84]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fedc:	4313      	orrs	r3, r2
 800fede:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	da08      	bge.n	800fefa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fee8:	4b11      	ldr	r3, [pc, #68]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800feea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fef4:	490e      	ldr	r1, [pc, #56]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fef6:	4313      	orrs	r3, r2
 800fef8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ff06:	4b0a      	ldr	r3, [pc, #40]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ff08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff14:	4906      	ldr	r1, [pc, #24]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ff16:	4313      	orrs	r3, r2
 800ff18:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ff1a:	7dbb      	ldrb	r3, [r7, #22]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d101      	bne.n	800ff24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	e000      	b.n	800ff26 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ff24:	2301      	movs	r3, #1
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	58024400 	.word	0x58024400

0800ff34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ff38:	f7ff f85a 	bl	800eff0 <HAL_RCC_GetHCLKFreq>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	091b      	lsrs	r3, r3, #4
 800ff44:	f003 0307 	and.w	r3, r3, #7
 800ff48:	4904      	ldr	r1, [pc, #16]	; (800ff5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ff4a:	5ccb      	ldrb	r3, [r1, r3]
 800ff4c:	f003 031f 	and.w	r3, r3, #31
 800ff50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	58024400 	.word	0x58024400
 800ff5c:	0801501c 	.word	0x0801501c

0800ff60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b089      	sub	sp, #36	; 0x24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff68:	4ba1      	ldr	r3, [pc, #644]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6c:	f003 0303 	and.w	r3, r3, #3
 800ff70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ff72:	4b9f      	ldr	r3, [pc, #636]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff76:	0b1b      	lsrs	r3, r3, #12
 800ff78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ff7e:	4b9c      	ldr	r3, [pc, #624]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff82:	091b      	lsrs	r3, r3, #4
 800ff84:	f003 0301 	and.w	r3, r3, #1
 800ff88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ff8a:	4b99      	ldr	r3, [pc, #612]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff8e:	08db      	lsrs	r3, r3, #3
 800ff90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff94:	693a      	ldr	r2, [r7, #16]
 800ff96:	fb02 f303 	mul.w	r3, r2, r3
 800ff9a:	ee07 3a90 	vmov	s15, r3
 800ff9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 8111 	beq.w	80101d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	f000 8083 	beq.w	80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	f200 80a1 	bhi.w	8010100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d056      	beq.n	8010078 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ffca:	e099      	b.n	8010100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffcc:	4b88      	ldr	r3, [pc, #544]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f003 0320 	and.w	r3, r3, #32
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d02d      	beq.n	8010034 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ffd8:	4b85      	ldr	r3, [pc, #532]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	08db      	lsrs	r3, r3, #3
 800ffde:	f003 0303 	and.w	r3, r3, #3
 800ffe2:	4a84      	ldr	r2, [pc, #528]	; (80101f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ffe4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffe8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	ee07 3a90 	vmov	s15, r3
 800fff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	ee07 3a90 	vmov	s15, r3
 800fffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010002:	4b7b      	ldr	r3, [pc, #492]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801000a:	ee07 3a90 	vmov	s15, r3
 801000e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010012:	ed97 6a03 	vldr	s12, [r7, #12]
 8010016:	eddf 5a78 	vldr	s11, [pc, #480]	; 80101f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801001a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801001e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801002a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801002e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010032:	e087      	b.n	8010144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	ee07 3a90 	vmov	s15, r3
 801003a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801003e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80101fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010046:	4b6a      	ldr	r3, [pc, #424]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801004a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801004e:	ee07 3a90 	vmov	s15, r3
 8010052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010056:	ed97 6a03 	vldr	s12, [r7, #12]
 801005a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80101f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801005e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801006a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801006e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010076:	e065      	b.n	8010144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	ee07 3a90 	vmov	s15, r3
 801007e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010082:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801008a:	4b59      	ldr	r3, [pc, #356]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801008c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801008e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010092:	ee07 3a90 	vmov	s15, r3
 8010096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801009a:	ed97 6a03 	vldr	s12, [r7, #12]
 801009e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80101f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80100a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80100ba:	e043      	b.n	8010144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	ee07 3a90 	vmov	s15, r3
 80100c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80100ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100ce:	4b48      	ldr	r3, [pc, #288]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100d6:	ee07 3a90 	vmov	s15, r3
 80100da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100de:	ed97 6a03 	vldr	s12, [r7, #12]
 80100e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80101f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80100e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80100fe:	e021      	b.n	8010144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	ee07 3a90 	vmov	s15, r3
 8010106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801010a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801010e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010112:	4b37      	ldr	r3, [pc, #220]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801011a:	ee07 3a90 	vmov	s15, r3
 801011e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010122:	ed97 6a03 	vldr	s12, [r7, #12]
 8010126:	eddf 5a34 	vldr	s11, [pc, #208]	; 80101f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801012a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801012e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801013a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801013e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010142:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010144:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010148:	0a5b      	lsrs	r3, r3, #9
 801014a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801014e:	ee07 3a90 	vmov	s15, r3
 8010152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801015a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801015e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801016a:	ee17 2a90 	vmov	r2, s15
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010172:	4b1f      	ldr	r3, [pc, #124]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010176:	0c1b      	lsrs	r3, r3, #16
 8010178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801017c:	ee07 3a90 	vmov	s15, r3
 8010180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010188:	ee37 7a87 	vadd.f32	s14, s15, s14
 801018c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010198:	ee17 2a90 	vmov	r2, s15
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80101a0:	4b13      	ldr	r3, [pc, #76]	; (80101f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80101a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a4:	0e1b      	lsrs	r3, r3, #24
 80101a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101aa:	ee07 3a90 	vmov	s15, r3
 80101ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80101be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101c6:	ee17 2a90 	vmov	r2, s15
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80101ce:	e008      	b.n	80101e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	609a      	str	r2, [r3, #8]
}
 80101e2:	bf00      	nop
 80101e4:	3724      	adds	r7, #36	; 0x24
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop
 80101f0:	58024400 	.word	0x58024400
 80101f4:	03d09000 	.word	0x03d09000
 80101f8:	46000000 	.word	0x46000000
 80101fc:	4c742400 	.word	0x4c742400
 8010200:	4a742400 	.word	0x4a742400
 8010204:	4bbebc20 	.word	0x4bbebc20

08010208 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8010208:	b480      	push	{r7}
 801020a:	b089      	sub	sp, #36	; 0x24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010210:	4ba1      	ldr	r3, [pc, #644]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010214:	f003 0303 	and.w	r3, r3, #3
 8010218:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801021a:	4b9f      	ldr	r3, [pc, #636]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801021c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021e:	0d1b      	lsrs	r3, r3, #20
 8010220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010224:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010226:	4b9c      	ldr	r3, [pc, #624]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022a:	0a1b      	lsrs	r3, r3, #8
 801022c:	f003 0301 	and.w	r3, r3, #1
 8010230:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010232:	4b99      	ldr	r3, [pc, #612]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010236:	08db      	lsrs	r3, r3, #3
 8010238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801023c:	693a      	ldr	r2, [r7, #16]
 801023e:	fb02 f303 	mul.w	r3, r2, r3
 8010242:	ee07 3a90 	vmov	s15, r3
 8010246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801024a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 8111 	beq.w	8010478 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	2b02      	cmp	r3, #2
 801025a:	f000 8083 	beq.w	8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	2b02      	cmp	r3, #2
 8010262:	f200 80a1 	bhi.w	80103a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d003      	beq.n	8010274 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d056      	beq.n	8010320 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010272:	e099      	b.n	80103a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010274:	4b88      	ldr	r3, [pc, #544]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f003 0320 	and.w	r3, r3, #32
 801027c:	2b00      	cmp	r3, #0
 801027e:	d02d      	beq.n	80102dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010280:	4b85      	ldr	r3, [pc, #532]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	08db      	lsrs	r3, r3, #3
 8010286:	f003 0303 	and.w	r3, r3, #3
 801028a:	4a84      	ldr	r2, [pc, #528]	; (801049c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801028c:	fa22 f303 	lsr.w	r3, r2, r3
 8010290:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	ee07 3a90 	vmov	s15, r3
 8010298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	ee07 3a90 	vmov	s15, r3
 80102a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102aa:	4b7b      	ldr	r3, [pc, #492]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102b2:	ee07 3a90 	vmov	s15, r3
 80102b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80102be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80104a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80102c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80102da:	e087      	b.n	80103ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	ee07 3a90 	vmov	s15, r3
 80102e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80104a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80102ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102ee:	4b6a      	ldr	r3, [pc, #424]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102f6:	ee07 3a90 	vmov	s15, r3
 80102fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010302:	eddf 5a67 	vldr	s11, [pc, #412]	; 80104a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801030a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801030e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801031a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801031e:	e065      	b.n	80103ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	ee07 3a90 	vmov	s15, r3
 8010326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801032a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80104a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801032e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010332:	4b59      	ldr	r3, [pc, #356]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801033a:	ee07 3a90 	vmov	s15, r3
 801033e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010342:	ed97 6a03 	vldr	s12, [r7, #12]
 8010346:	eddf 5a56 	vldr	s11, [pc, #344]	; 80104a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801034a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801034e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801035a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801035e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010362:	e043      	b.n	80103ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	ee07 3a90 	vmov	s15, r3
 801036a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801036e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80104ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010376:	4b48      	ldr	r3, [pc, #288]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801037a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801037e:	ee07 3a90 	vmov	s15, r3
 8010382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010386:	ed97 6a03 	vldr	s12, [r7, #12]
 801038a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80104a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801038e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801039a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801039e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80103a6:	e021      	b.n	80103ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	ee07 3a90 	vmov	s15, r3
 80103ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80104a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80103b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103ba:	4b37      	ldr	r3, [pc, #220]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80103bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103c2:	ee07 3a90 	vmov	s15, r3
 80103c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80103ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80104a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80103d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80103de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80103ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80103ec:	4b2a      	ldr	r3, [pc, #168]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80103ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f0:	0a5b      	lsrs	r3, r3, #9
 80103f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103f6:	ee07 3a90 	vmov	s15, r3
 80103fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010406:	edd7 6a07 	vldr	s13, [r7, #28]
 801040a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801040e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010412:	ee17 2a90 	vmov	r2, s15
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801041a:	4b1f      	ldr	r3, [pc, #124]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801041c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801041e:	0c1b      	lsrs	r3, r3, #16
 8010420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010424:	ee07 3a90 	vmov	s15, r3
 8010428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801042c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010434:	edd7 6a07 	vldr	s13, [r7, #28]
 8010438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801043c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010440:	ee17 2a90 	vmov	r2, s15
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8010448:	4b13      	ldr	r3, [pc, #76]	; (8010498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801044a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801044c:	0e1b      	lsrs	r3, r3, #24
 801044e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010452:	ee07 3a90 	vmov	s15, r3
 8010456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801045a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801045e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010462:	edd7 6a07 	vldr	s13, [r7, #28]
 8010466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801046a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801046e:	ee17 2a90 	vmov	r2, s15
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010476:	e008      	b.n	801048a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	609a      	str	r2, [r3, #8]
}
 801048a:	bf00      	nop
 801048c:	3724      	adds	r7, #36	; 0x24
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	58024400 	.word	0x58024400
 801049c:	03d09000 	.word	0x03d09000
 80104a0:	46000000 	.word	0x46000000
 80104a4:	4c742400 	.word	0x4c742400
 80104a8:	4a742400 	.word	0x4a742400
 80104ac:	4bbebc20 	.word	0x4bbebc20

080104b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80104ba:	2300      	movs	r3, #0
 80104bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80104be:	4b53      	ldr	r3, [pc, #332]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80104c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c2:	f003 0303 	and.w	r3, r3, #3
 80104c6:	2b03      	cmp	r3, #3
 80104c8:	d101      	bne.n	80104ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80104ca:	2301      	movs	r3, #1
 80104cc:	e099      	b.n	8010602 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80104ce:	4b4f      	ldr	r3, [pc, #316]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4a4e      	ldr	r2, [pc, #312]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80104d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80104d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104da:	f7f8 fc17 	bl	8008d0c <HAL_GetTick>
 80104de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80104e0:	e008      	b.n	80104f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80104e2:	f7f8 fc13 	bl	8008d0c <HAL_GetTick>
 80104e6:	4602      	mov	r2, r0
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	2b02      	cmp	r3, #2
 80104ee:	d901      	bls.n	80104f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80104f0:	2303      	movs	r3, #3
 80104f2:	e086      	b.n	8010602 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80104f4:	4b45      	ldr	r3, [pc, #276]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1f0      	bne.n	80104e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010500:	4b42      	ldr	r3, [pc, #264]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010504:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	031b      	lsls	r3, r3, #12
 801050e:	493f      	ldr	r1, [pc, #252]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010510:	4313      	orrs	r3, r2
 8010512:	628b      	str	r3, [r1, #40]	; 0x28
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	3b01      	subs	r3, #1
 801051a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	3b01      	subs	r3, #1
 8010524:	025b      	lsls	r3, r3, #9
 8010526:	b29b      	uxth	r3, r3
 8010528:	431a      	orrs	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	3b01      	subs	r3, #1
 8010530:	041b      	lsls	r3, r3, #16
 8010532:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010536:	431a      	orrs	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	3b01      	subs	r3, #1
 801053e:	061b      	lsls	r3, r3, #24
 8010540:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010544:	4931      	ldr	r1, [pc, #196]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010546:	4313      	orrs	r3, r2
 8010548:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801054a:	4b30      	ldr	r3, [pc, #192]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	695b      	ldr	r3, [r3, #20]
 8010556:	492d      	ldr	r1, [pc, #180]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010558:	4313      	orrs	r3, r2
 801055a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801055c:	4b2b      	ldr	r3, [pc, #172]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 801055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010560:	f023 0220 	bic.w	r2, r3, #32
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	699b      	ldr	r3, [r3, #24]
 8010568:	4928      	ldr	r1, [pc, #160]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 801056a:	4313      	orrs	r3, r2
 801056c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801056e:	4b27      	ldr	r3, [pc, #156]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010572:	4a26      	ldr	r2, [pc, #152]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010574:	f023 0310 	bic.w	r3, r3, #16
 8010578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801057a:	4b24      	ldr	r3, [pc, #144]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 801057c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801057e:	4b24      	ldr	r3, [pc, #144]	; (8010610 <RCCEx_PLL2_Config+0x160>)
 8010580:	4013      	ands	r3, r2
 8010582:	687a      	ldr	r2, [r7, #4]
 8010584:	69d2      	ldr	r2, [r2, #28]
 8010586:	00d2      	lsls	r2, r2, #3
 8010588:	4920      	ldr	r1, [pc, #128]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 801058a:	4313      	orrs	r3, r2
 801058c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801058e:	4b1f      	ldr	r3, [pc, #124]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010592:	4a1e      	ldr	r2, [pc, #120]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 8010594:	f043 0310 	orr.w	r3, r3, #16
 8010598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d106      	bne.n	80105ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80105a0:	4b1a      	ldr	r3, [pc, #104]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a4:	4a19      	ldr	r2, [pc, #100]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80105aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80105ac:	e00f      	b.n	80105ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d106      	bne.n	80105c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80105b4:	4b15      	ldr	r3, [pc, #84]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b8:	4a14      	ldr	r2, [pc, #80]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80105c0:	e005      	b.n	80105ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80105c2:	4b12      	ldr	r3, [pc, #72]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c6:	4a11      	ldr	r2, [pc, #68]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80105cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80105ce:	4b0f      	ldr	r3, [pc, #60]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4a0e      	ldr	r2, [pc, #56]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80105d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105da:	f7f8 fb97 	bl	8008d0c <HAL_GetTick>
 80105de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80105e0:	e008      	b.n	80105f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80105e2:	f7f8 fb93 	bl	8008d0c <HAL_GetTick>
 80105e6:	4602      	mov	r2, r0
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d901      	bls.n	80105f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80105f0:	2303      	movs	r3, #3
 80105f2:	e006      	b.n	8010602 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80105f4:	4b05      	ldr	r3, [pc, #20]	; (801060c <RCCEx_PLL2_Config+0x15c>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d0f0      	beq.n	80105e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010600:	7bfb      	ldrb	r3, [r7, #15]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	58024400 	.word	0x58024400
 8010610:	ffff0007 	.word	0xffff0007

08010614 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010622:	4b53      	ldr	r3, [pc, #332]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010626:	f003 0303 	and.w	r3, r3, #3
 801062a:	2b03      	cmp	r3, #3
 801062c:	d101      	bne.n	8010632 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	e099      	b.n	8010766 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010632:	4b4f      	ldr	r3, [pc, #316]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a4e      	ldr	r2, [pc, #312]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801063c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801063e:	f7f8 fb65 	bl	8008d0c <HAL_GetTick>
 8010642:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010644:	e008      	b.n	8010658 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010646:	f7f8 fb61 	bl	8008d0c <HAL_GetTick>
 801064a:	4602      	mov	r2, r0
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	2b02      	cmp	r3, #2
 8010652:	d901      	bls.n	8010658 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010654:	2303      	movs	r3, #3
 8010656:	e086      	b.n	8010766 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010658:	4b45      	ldr	r3, [pc, #276]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f0      	bne.n	8010646 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010664:	4b42      	ldr	r3, [pc, #264]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010668:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	051b      	lsls	r3, r3, #20
 8010672:	493f      	ldr	r1, [pc, #252]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010674:	4313      	orrs	r3, r2
 8010676:	628b      	str	r3, [r1, #40]	; 0x28
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	3b01      	subs	r3, #1
 801067e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	3b01      	subs	r3, #1
 8010688:	025b      	lsls	r3, r3, #9
 801068a:	b29b      	uxth	r3, r3
 801068c:	431a      	orrs	r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	3b01      	subs	r3, #1
 8010694:	041b      	lsls	r3, r3, #16
 8010696:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801069a:	431a      	orrs	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	691b      	ldr	r3, [r3, #16]
 80106a0:	3b01      	subs	r3, #1
 80106a2:	061b      	lsls	r3, r3, #24
 80106a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80106a8:	4931      	ldr	r1, [pc, #196]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106aa:	4313      	orrs	r3, r2
 80106ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80106ae:	4b30      	ldr	r3, [pc, #192]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	695b      	ldr	r3, [r3, #20]
 80106ba:	492d      	ldr	r1, [pc, #180]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106bc:	4313      	orrs	r3, r2
 80106be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80106c0:	4b2b      	ldr	r3, [pc, #172]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	4928      	ldr	r1, [pc, #160]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106ce:	4313      	orrs	r3, r2
 80106d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80106d2:	4b27      	ldr	r3, [pc, #156]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106d6:	4a26      	ldr	r2, [pc, #152]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80106de:	4b24      	ldr	r3, [pc, #144]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106e2:	4b24      	ldr	r3, [pc, #144]	; (8010774 <RCCEx_PLL3_Config+0x160>)
 80106e4:	4013      	ands	r3, r2
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	69d2      	ldr	r2, [r2, #28]
 80106ea:	00d2      	lsls	r2, r2, #3
 80106ec:	4920      	ldr	r1, [pc, #128]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106ee:	4313      	orrs	r3, r2
 80106f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80106f2:	4b1f      	ldr	r3, [pc, #124]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f6:	4a1e      	ldr	r2, [pc, #120]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 80106f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d106      	bne.n	8010712 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010704:	4b1a      	ldr	r3, [pc, #104]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010708:	4a19      	ldr	r2, [pc, #100]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801070a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801070e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010710:	e00f      	b.n	8010732 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d106      	bne.n	8010726 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010718:	4b15      	ldr	r3, [pc, #84]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801071a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071c:	4a14      	ldr	r2, [pc, #80]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801071e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010724:	e005      	b.n	8010732 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010726:	4b12      	ldr	r3, [pc, #72]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801072a:	4a11      	ldr	r2, [pc, #68]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801072c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010730:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010732:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a0e      	ldr	r2, [pc, #56]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 8010738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801073c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801073e:	f7f8 fae5 	bl	8008d0c <HAL_GetTick>
 8010742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010744:	e008      	b.n	8010758 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010746:	f7f8 fae1 	bl	8008d0c <HAL_GetTick>
 801074a:	4602      	mov	r2, r0
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	2b02      	cmp	r3, #2
 8010752:	d901      	bls.n	8010758 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010754:	2303      	movs	r3, #3
 8010756:	e006      	b.n	8010766 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010758:	4b05      	ldr	r3, [pc, #20]	; (8010770 <RCCEx_PLL3_Config+0x15c>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0f0      	beq.n	8010746 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010764:	7bfb      	ldrb	r3, [r7, #15]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	58024400 	.word	0x58024400
 8010774:	ffff0007 	.word	0xffff0007

08010778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d101      	bne.n	801078a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010786:	2301      	movs	r3, #1
 8010788:	e049      	b.n	801081e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7f7 fd90 	bl	80082c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2202      	movs	r2, #2
 80107a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3304      	adds	r3, #4
 80107b4:	4619      	mov	r1, r3
 80107b6:	4610      	mov	r0, r2
 80107b8:	f000 fa00 	bl	8010bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2201      	movs	r2, #1
 80107d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2201      	movs	r2, #1
 80107e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2201      	movs	r2, #1
 80107e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2201      	movs	r2, #1
 80107f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2201      	movs	r2, #1
 80107f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2201      	movs	r2, #1
 8010800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2201      	movs	r2, #1
 8010808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2201      	movs	r2, #1
 8010810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2201      	movs	r2, #1
 8010818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
	...

08010828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010836:	b2db      	uxtb	r3, r3
 8010838:	2b01      	cmp	r3, #1
 801083a:	d001      	beq.n	8010840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e054      	b.n	80108ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2202      	movs	r2, #2
 8010844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f042 0201 	orr.w	r2, r2, #1
 8010856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a26      	ldr	r2, [pc, #152]	; (80108f8 <HAL_TIM_Base_Start_IT+0xd0>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d022      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801086a:	d01d      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a22      	ldr	r2, [pc, #136]	; (80108fc <HAL_TIM_Base_Start_IT+0xd4>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d018      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4a21      	ldr	r2, [pc, #132]	; (8010900 <HAL_TIM_Base_Start_IT+0xd8>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d013      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a1f      	ldr	r2, [pc, #124]	; (8010904 <HAL_TIM_Base_Start_IT+0xdc>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d00e      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a1e      	ldr	r2, [pc, #120]	; (8010908 <HAL_TIM_Base_Start_IT+0xe0>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d009      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a1c      	ldr	r2, [pc, #112]	; (801090c <HAL_TIM_Base_Start_IT+0xe4>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d004      	beq.n	80108a8 <HAL_TIM_Base_Start_IT+0x80>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a1b      	ldr	r2, [pc, #108]	; (8010910 <HAL_TIM_Base_Start_IT+0xe8>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d115      	bne.n	80108d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	689a      	ldr	r2, [r3, #8]
 80108ae:	4b19      	ldr	r3, [pc, #100]	; (8010914 <HAL_TIM_Base_Start_IT+0xec>)
 80108b0:	4013      	ands	r3, r2
 80108b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b06      	cmp	r3, #6
 80108b8:	d015      	beq.n	80108e6 <HAL_TIM_Base_Start_IT+0xbe>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108c0:	d011      	beq.n	80108e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f042 0201 	orr.w	r2, r2, #1
 80108d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108d2:	e008      	b.n	80108e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f042 0201 	orr.w	r2, r2, #1
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	e000      	b.n	80108e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop
 80108f8:	40010000 	.word	0x40010000
 80108fc:	40000400 	.word	0x40000400
 8010900:	40000800 	.word	0x40000800
 8010904:	40000c00 	.word	0x40000c00
 8010908:	40010400 	.word	0x40010400
 801090c:	40001800 	.word	0x40001800
 8010910:	40014000 	.word	0x40014000
 8010914:	00010007 	.word	0x00010007

08010918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	691b      	ldr	r3, [r3, #16]
 8010926:	f003 0302 	and.w	r3, r3, #2
 801092a:	2b02      	cmp	r3, #2
 801092c:	d122      	bne.n	8010974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	f003 0302 	and.w	r3, r3, #2
 8010938:	2b02      	cmp	r3, #2
 801093a:	d11b      	bne.n	8010974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f06f 0202 	mvn.w	r2, #2
 8010944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	f003 0303 	and.w	r3, r3, #3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d003      	beq.n	8010962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f90f 	bl	8010b7e <HAL_TIM_IC_CaptureCallback>
 8010960:	e005      	b.n	801096e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 f901 	bl	8010b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 f912 	bl	8010b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	f003 0304 	and.w	r3, r3, #4
 801097e:	2b04      	cmp	r3, #4
 8010980:	d122      	bne.n	80109c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	f003 0304 	and.w	r3, r3, #4
 801098c:	2b04      	cmp	r3, #4
 801098e:	d11b      	bne.n	80109c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f06f 0204 	mvn.w	r2, #4
 8010998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2202      	movs	r2, #2
 801099e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d003      	beq.n	80109b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f8e5 	bl	8010b7e <HAL_TIM_IC_CaptureCallback>
 80109b4:	e005      	b.n	80109c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 f8d7 	bl	8010b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 f8e8 	bl	8010b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	f003 0308 	and.w	r3, r3, #8
 80109d2:	2b08      	cmp	r3, #8
 80109d4:	d122      	bne.n	8010a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	f003 0308 	and.w	r3, r3, #8
 80109e0:	2b08      	cmp	r3, #8
 80109e2:	d11b      	bne.n	8010a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f06f 0208 	mvn.w	r2, #8
 80109ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2204      	movs	r2, #4
 80109f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	69db      	ldr	r3, [r3, #28]
 80109fa:	f003 0303 	and.w	r3, r3, #3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d003      	beq.n	8010a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f8bb 	bl	8010b7e <HAL_TIM_IC_CaptureCallback>
 8010a08:	e005      	b.n	8010a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f8ad 	bl	8010b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 f8be 	bl	8010b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	f003 0310 	and.w	r3, r3, #16
 8010a26:	2b10      	cmp	r3, #16
 8010a28:	d122      	bne.n	8010a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	f003 0310 	and.w	r3, r3, #16
 8010a34:	2b10      	cmp	r3, #16
 8010a36:	d11b      	bne.n	8010a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f06f 0210 	mvn.w	r2, #16
 8010a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2208      	movs	r2, #8
 8010a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	69db      	ldr	r3, [r3, #28]
 8010a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d003      	beq.n	8010a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 f891 	bl	8010b7e <HAL_TIM_IC_CaptureCallback>
 8010a5c:	e005      	b.n	8010a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f883 	bl	8010b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 f894 	bl	8010b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	f003 0301 	and.w	r3, r3, #1
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d10e      	bne.n	8010a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d107      	bne.n	8010a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f06f 0201 	mvn.w	r2, #1
 8010a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 f85d 	bl	8010b56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aa6:	2b80      	cmp	r3, #128	; 0x80
 8010aa8:	d10e      	bne.n	8010ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ab4:	2b80      	cmp	r3, #128	; 0x80
 8010ab6:	d107      	bne.n	8010ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f9ac 	bl	8010e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ad6:	d10e      	bne.n	8010af6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae2:	2b80      	cmp	r3, #128	; 0x80
 8010ae4:	d107      	bne.n	8010af6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f99f 	bl	8010e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b00:	2b40      	cmp	r3, #64	; 0x40
 8010b02:	d10e      	bne.n	8010b22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b0e:	2b40      	cmp	r3, #64	; 0x40
 8010b10:	d107      	bne.n	8010b22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 f842 	bl	8010ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	f003 0320 	and.w	r3, r3, #32
 8010b2c:	2b20      	cmp	r3, #32
 8010b2e:	d10e      	bne.n	8010b4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	f003 0320 	and.w	r3, r3, #32
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d107      	bne.n	8010b4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f06f 0220 	mvn.w	r2, #32
 8010b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 f95f 	bl	8010e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b4e:	bf00      	nop
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b56:	b480      	push	{r7}
 8010b58:	b083      	sub	sp, #12
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010b5e:	bf00      	nop
 8010b60:	370c      	adds	r7, #12
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr

08010b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b6a:	b480      	push	{r7}
 8010b6c:	b083      	sub	sp, #12
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b72:	bf00      	nop
 8010b74:	370c      	adds	r7, #12
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b083      	sub	sp, #12
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b86:	bf00      	nop
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b92:	b480      	push	{r7}
 8010b94:	b083      	sub	sp, #12
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b9a:	bf00      	nop
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ba6:	b480      	push	{r7}
 8010ba8:	b083      	sub	sp, #12
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010bae:	bf00      	nop
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
	...

08010bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b085      	sub	sp, #20
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4a40      	ldr	r2, [pc, #256]	; (8010cd0 <TIM_Base_SetConfig+0x114>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d013      	beq.n	8010bfc <TIM_Base_SetConfig+0x40>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bda:	d00f      	beq.n	8010bfc <TIM_Base_SetConfig+0x40>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	4a3d      	ldr	r2, [pc, #244]	; (8010cd4 <TIM_Base_SetConfig+0x118>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d00b      	beq.n	8010bfc <TIM_Base_SetConfig+0x40>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4a3c      	ldr	r2, [pc, #240]	; (8010cd8 <TIM_Base_SetConfig+0x11c>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d007      	beq.n	8010bfc <TIM_Base_SetConfig+0x40>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	4a3b      	ldr	r2, [pc, #236]	; (8010cdc <TIM_Base_SetConfig+0x120>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d003      	beq.n	8010bfc <TIM_Base_SetConfig+0x40>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	4a3a      	ldr	r2, [pc, #232]	; (8010ce0 <TIM_Base_SetConfig+0x124>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d108      	bne.n	8010c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4a2f      	ldr	r2, [pc, #188]	; (8010cd0 <TIM_Base_SetConfig+0x114>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d01f      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c1c:	d01b      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4a2c      	ldr	r2, [pc, #176]	; (8010cd4 <TIM_Base_SetConfig+0x118>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d017      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4a2b      	ldr	r2, [pc, #172]	; (8010cd8 <TIM_Base_SetConfig+0x11c>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d013      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4a2a      	ldr	r2, [pc, #168]	; (8010cdc <TIM_Base_SetConfig+0x120>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d00f      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4a29      	ldr	r2, [pc, #164]	; (8010ce0 <TIM_Base_SetConfig+0x124>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d00b      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	4a28      	ldr	r2, [pc, #160]	; (8010ce4 <TIM_Base_SetConfig+0x128>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d007      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4a27      	ldr	r2, [pc, #156]	; (8010ce8 <TIM_Base_SetConfig+0x12c>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d003      	beq.n	8010c56 <TIM_Base_SetConfig+0x9a>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4a26      	ldr	r2, [pc, #152]	; (8010cec <TIM_Base_SetConfig+0x130>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d108      	bne.n	8010c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	4313      	orrs	r3, r2
 8010c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	689a      	ldr	r2, [r3, #8]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	4a10      	ldr	r2, [pc, #64]	; (8010cd0 <TIM_Base_SetConfig+0x114>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d00f      	beq.n	8010cb4 <TIM_Base_SetConfig+0xf8>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4a12      	ldr	r2, [pc, #72]	; (8010ce0 <TIM_Base_SetConfig+0x124>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d00b      	beq.n	8010cb4 <TIM_Base_SetConfig+0xf8>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4a11      	ldr	r2, [pc, #68]	; (8010ce4 <TIM_Base_SetConfig+0x128>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d007      	beq.n	8010cb4 <TIM_Base_SetConfig+0xf8>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4a10      	ldr	r2, [pc, #64]	; (8010ce8 <TIM_Base_SetConfig+0x12c>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d003      	beq.n	8010cb4 <TIM_Base_SetConfig+0xf8>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	4a0f      	ldr	r2, [pc, #60]	; (8010cec <TIM_Base_SetConfig+0x130>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d103      	bne.n	8010cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	691a      	ldr	r2, [r3, #16]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	615a      	str	r2, [r3, #20]
}
 8010cc2:	bf00      	nop
 8010cc4:	3714      	adds	r7, #20
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	40010000 	.word	0x40010000
 8010cd4:	40000400 	.word	0x40000400
 8010cd8:	40000800 	.word	0x40000800
 8010cdc:	40000c00 	.word	0x40000c00
 8010ce0:	40010400 	.word	0x40010400
 8010ce4:	40014000 	.word	0x40014000
 8010ce8:	40014400 	.word	0x40014400
 8010cec:	40014800 	.word	0x40014800

08010cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d101      	bne.n	8010d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d04:	2302      	movs	r3, #2
 8010d06:	e06d      	b.n	8010de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2202      	movs	r2, #2
 8010d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a30      	ldr	r2, [pc, #192]	; (8010df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d004      	beq.n	8010d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4a2f      	ldr	r2, [pc, #188]	; (8010df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d108      	bne.n	8010d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a20      	ldr	r2, [pc, #128]	; (8010df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d022      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d7a:	d01d      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a1d      	ldr	r2, [pc, #116]	; (8010df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d018      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a1c      	ldr	r2, [pc, #112]	; (8010dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d013      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a1a      	ldr	r2, [pc, #104]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d00e      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4a15      	ldr	r2, [pc, #84]	; (8010df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d009      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a16      	ldr	r2, [pc, #88]	; (8010e04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d004      	beq.n	8010db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4a15      	ldr	r2, [pc, #84]	; (8010e08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d10c      	bne.n	8010dd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	68ba      	ldr	r2, [r7, #8]
 8010dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3714      	adds	r7, #20
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	40010000 	.word	0x40010000
 8010df4:	40010400 	.word	0x40010400
 8010df8:	40000400 	.word	0x40000400
 8010dfc:	40000800 	.word	0x40000800
 8010e00:	40000c00 	.word	0x40000c00
 8010e04:	40001800 	.word	0x40001800
 8010e08:	40014000 	.word	0x40014000

08010e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	e042      	b.n	8010ee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d106      	bne.n	8010e72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7f7 fa71 	bl	8008354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2224      	movs	r2, #36	; 0x24
 8010e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f022 0201 	bic.w	r2, r2, #1
 8010e88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fce8 	bl	8011860 <UART_SetConfig>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d101      	bne.n	8010e9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	e022      	b.n	8010ee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d002      	beq.n	8010ea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f001 fa44 	bl	8012330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	685a      	ldr	r2, [r3, #4]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	689a      	ldr	r2, [r3, #8]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f042 0201 	orr.w	r2, r2, #1
 8010ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f001 facb 	bl	8012474 <UART_CheckIdleState>
 8010ede:	4603      	mov	r3, r0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b091      	sub	sp, #68	; 0x44
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010efc:	2b20      	cmp	r3, #32
 8010efe:	f040 808c 	bne.w	801101a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <HAL_UART_Transmit_IT+0x26>
 8010f08:	88fb      	ldrh	r3, [r7, #6]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e084      	b.n	801101c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d101      	bne.n	8010f20 <HAL_UART_Transmit_IT+0x38>
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	e07d      	b.n	801101c <HAL_UART_Transmit_IT+0x134>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2201      	movs	r2, #1
 8010f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	88fa      	ldrh	r2, [r7, #6]
 8010f32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	88fa      	ldrh	r2, [r7, #6]
 8010f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2200      	movs	r2, #0
 8010f42:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2221      	movs	r2, #33	; 0x21
 8010f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f5c:	d12e      	bne.n	8010fbc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f66:	d107      	bne.n	8010f78 <HAL_UART_Transmit_IT+0x90>
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d103      	bne.n	8010f78 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	4a2d      	ldr	r2, [pc, #180]	; (8011028 <HAL_UART_Transmit_IT+0x140>)
 8010f74:	675a      	str	r2, [r3, #116]	; 0x74
 8010f76:	e002      	b.n	8010f7e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	4a2c      	ldr	r2, [pc, #176]	; (801102c <HAL_UART_Transmit_IT+0x144>)
 8010f7c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	3308      	adds	r3, #8
 8010f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f90:	e853 3f00 	ldrex	r3, [r3]
 8010f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	3308      	adds	r3, #8
 8010fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fa6:	637a      	str	r2, [r7, #52]	; 0x34
 8010fa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010faa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fae:	e841 2300 	strex	r3, r2, [r1]
 8010fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1e5      	bne.n	8010f86 <HAL_UART_Transmit_IT+0x9e>
 8010fba:	e02c      	b.n	8011016 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc4:	d107      	bne.n	8010fd6 <HAL_UART_Transmit_IT+0xee>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d103      	bne.n	8010fd6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	4a17      	ldr	r2, [pc, #92]	; (8011030 <HAL_UART_Transmit_IT+0x148>)
 8010fd2:	675a      	str	r2, [r3, #116]	; 0x74
 8010fd4:	e002      	b.n	8010fdc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	4a16      	ldr	r2, [pc, #88]	; (8011034 <HAL_UART_Transmit_IT+0x14c>)
 8010fda:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	e853 3f00 	ldrex	r3, [r3]
 8010ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011002:	623b      	str	r3, [r7, #32]
 8011004:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011006:	69f9      	ldr	r1, [r7, #28]
 8011008:	6a3a      	ldr	r2, [r7, #32]
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e6      	bne.n	8010fe4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011016:	2300      	movs	r3, #0
 8011018:	e000      	b.n	801101c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801101a:	2302      	movs	r3, #2
  }
}
 801101c:	4618      	mov	r0, r3
 801101e:	3744      	adds	r7, #68	; 0x44
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	08012c43 	.word	0x08012c43
 801102c:	08012b63 	.word	0x08012b63
 8011030:	08012aa1 	.word	0x08012aa1
 8011034:	080129e9 	.word	0x080129e9

08011038 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08a      	sub	sp, #40	; 0x28
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	4613      	mov	r3, r2
 8011044:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801104c:	2b20      	cmp	r3, #32
 801104e:	d142      	bne.n	80110d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d002      	beq.n	801105c <HAL_UART_Receive_IT+0x24>
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d101      	bne.n	8011060 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801105c:	2301      	movs	r3, #1
 801105e:	e03b      	b.n	80110d8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <HAL_UART_Receive_IT+0x36>
 801106a:	2302      	movs	r3, #2
 801106c:	e034      	b.n	80110d8 <HAL_UART_Receive_IT+0xa0>
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2200      	movs	r2, #0
 801107a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4a17      	ldr	r2, [pc, #92]	; (80110e0 <HAL_UART_Receive_IT+0xa8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d01f      	beq.n	80110c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d018      	beq.n	80110c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	e853 3f00 	ldrex	r3, [r3]
 80110a0:	613b      	str	r3, [r7, #16]
   return(result);
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80110a8:	627b      	str	r3, [r7, #36]	; 0x24
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b2:	623b      	str	r3, [r7, #32]
 80110b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110b6:	69f9      	ldr	r1, [r7, #28]
 80110b8:	6a3a      	ldr	r2, [r7, #32]
 80110ba:	e841 2300 	strex	r3, r2, [r1]
 80110be:	61bb      	str	r3, [r7, #24]
   return(result);
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d1e6      	bne.n	8011094 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80110c6:	88fb      	ldrh	r3, [r7, #6]
 80110c8:	461a      	mov	r2, r3
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f001 fae5 	bl	801269c <UART_Start_Receive_IT>
 80110d2:	4603      	mov	r3, r0
 80110d4:	e000      	b.n	80110d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80110d6:	2302      	movs	r3, #2
  }
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3728      	adds	r7, #40	; 0x28
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	58000c00 	.word	0x58000c00

080110e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b0ba      	sub	sp, #232	; 0xe8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	69db      	ldr	r3, [r3, #28]
 80110f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801110a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801110e:	f640 030f 	movw	r3, #2063	; 0x80f
 8011112:	4013      	ands	r3, r2
 8011114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801111c:	2b00      	cmp	r3, #0
 801111e:	d11b      	bne.n	8011158 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011124:	f003 0320 	and.w	r3, r3, #32
 8011128:	2b00      	cmp	r3, #0
 801112a:	d015      	beq.n	8011158 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801112c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011130:	f003 0320 	and.w	r3, r3, #32
 8011134:	2b00      	cmp	r3, #0
 8011136:	d105      	bne.n	8011144 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011140:	2b00      	cmp	r3, #0
 8011142:	d009      	beq.n	8011158 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 835a 	beq.w	8011802 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	4798      	blx	r3
      }
      return;
 8011156:	e354      	b.n	8011802 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 811f 	beq.w	80113a0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011162:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011166:	4b8b      	ldr	r3, [pc, #556]	; (8011394 <HAL_UART_IRQHandler+0x2b0>)
 8011168:	4013      	ands	r3, r2
 801116a:	2b00      	cmp	r3, #0
 801116c:	d106      	bne.n	801117c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801116e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011172:	4b89      	ldr	r3, [pc, #548]	; (8011398 <HAL_UART_IRQHandler+0x2b4>)
 8011174:	4013      	ands	r3, r2
 8011176:	2b00      	cmp	r3, #0
 8011178:	f000 8112 	beq.w	80113a0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801117c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	d011      	beq.n	80111ac <HAL_UART_IRQHandler+0xc8>
 8011188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00b      	beq.n	80111ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2201      	movs	r2, #1
 801119a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111a2:	f043 0201 	orr.w	r2, r3, #1
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80111ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111b0:	f003 0302 	and.w	r3, r3, #2
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d011      	beq.n	80111dc <HAL_UART_IRQHandler+0xf8>
 80111b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111bc:	f003 0301 	and.w	r3, r3, #1
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00b      	beq.n	80111dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2202      	movs	r2, #2
 80111ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111d2:	f043 0204 	orr.w	r2, r3, #4
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80111dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111e0:	f003 0304 	and.w	r3, r3, #4
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d011      	beq.n	801120c <HAL_UART_IRQHandler+0x128>
 80111e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111ec:	f003 0301 	and.w	r3, r3, #1
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00b      	beq.n	801120c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2204      	movs	r2, #4
 80111fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011202:	f043 0202 	orr.w	r2, r3, #2
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801120c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011210:	f003 0308 	and.w	r3, r3, #8
 8011214:	2b00      	cmp	r3, #0
 8011216:	d017      	beq.n	8011248 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801121c:	f003 0320 	and.w	r3, r3, #32
 8011220:	2b00      	cmp	r3, #0
 8011222:	d105      	bne.n	8011230 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011224:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011228:	4b5a      	ldr	r3, [pc, #360]	; (8011394 <HAL_UART_IRQHandler+0x2b0>)
 801122a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00b      	beq.n	8011248 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2208      	movs	r2, #8
 8011236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801123e:	f043 0208 	orr.w	r2, r3, #8
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801124c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011250:	2b00      	cmp	r3, #0
 8011252:	d012      	beq.n	801127a <HAL_UART_IRQHandler+0x196>
 8011254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00c      	beq.n	801127a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011270:	f043 0220 	orr.w	r2, r3, #32
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 82c0 	beq.w	8011806 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801128a:	f003 0320 	and.w	r3, r3, #32
 801128e:	2b00      	cmp	r3, #0
 8011290:	d013      	beq.n	80112ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011296:	f003 0320 	and.w	r3, r3, #32
 801129a:	2b00      	cmp	r3, #0
 801129c:	d105      	bne.n	80112aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801129e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80112a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d007      	beq.n	80112ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d003      	beq.n	80112ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ce:	2b40      	cmp	r3, #64	; 0x40
 80112d0:	d005      	beq.n	80112de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80112d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80112d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d04f      	beq.n	801137e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f001 fb06 	bl	80128f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ee:	2b40      	cmp	r3, #64	; 0x40
 80112f0:	d141      	bne.n	8011376 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3308      	adds	r3, #8
 80112f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011300:	e853 3f00 	ldrex	r3, [r3]
 8011304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801130c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	3308      	adds	r3, #8
 801131a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801131e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801132a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801132e:	e841 2300 	strex	r3, r2, [r1]
 8011332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1d9      	bne.n	80112f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011342:	2b00      	cmp	r3, #0
 8011344:	d013      	beq.n	801136e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801134a:	4a14      	ldr	r2, [pc, #80]	; (801139c <HAL_UART_IRQHandler+0x2b8>)
 801134c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011352:	4618      	mov	r0, r3
 8011354:	f7f9 fa12 	bl	800a77c <HAL_DMA_Abort_IT>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d017      	beq.n	801138e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011368:	4610      	mov	r0, r2
 801136a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801136c:	e00f      	b.n	801138e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 fa60 	bl	8011834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011374:	e00b      	b.n	801138e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fa5c 	bl	8011834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801137c:	e007      	b.n	801138e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 fa58 	bl	8011834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 801138c:	e23b      	b.n	8011806 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801138e:	bf00      	nop
    return;
 8011390:	e239      	b.n	8011806 <HAL_UART_IRQHandler+0x722>
 8011392:	bf00      	nop
 8011394:	10000001 	.word	0x10000001
 8011398:	04000120 	.word	0x04000120
 801139c:	080129bd 	.word	0x080129bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	f040 81ce 	bne.w	8011746 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80113aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113ae:	f003 0310 	and.w	r3, r3, #16
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	f000 81c7 	beq.w	8011746 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80113b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113bc:	f003 0310 	and.w	r3, r3, #16
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 81c0 	beq.w	8011746 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2210      	movs	r2, #16
 80113cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113d8:	2b40      	cmp	r3, #64	; 0x40
 80113da:	f040 813b 	bne.w	8011654 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a8b      	ldr	r2, [pc, #556]	; (8011614 <HAL_UART_IRQHandler+0x530>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d059      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a89      	ldr	r2, [pc, #548]	; (8011618 <HAL_UART_IRQHandler+0x534>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d053      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a87      	ldr	r2, [pc, #540]	; (801161c <HAL_UART_IRQHandler+0x538>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d04d      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4a85      	ldr	r2, [pc, #532]	; (8011620 <HAL_UART_IRQHandler+0x53c>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d047      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4a83      	ldr	r2, [pc, #524]	; (8011624 <HAL_UART_IRQHandler+0x540>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d041      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a81      	ldr	r2, [pc, #516]	; (8011628 <HAL_UART_IRQHandler+0x544>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d03b      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4a7f      	ldr	r2, [pc, #508]	; (801162c <HAL_UART_IRQHandler+0x548>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d035      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a7d      	ldr	r2, [pc, #500]	; (8011630 <HAL_UART_IRQHandler+0x54c>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d02f      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a7b      	ldr	r2, [pc, #492]	; (8011634 <HAL_UART_IRQHandler+0x550>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d029      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a79      	ldr	r2, [pc, #484]	; (8011638 <HAL_UART_IRQHandler+0x554>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d023      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4a77      	ldr	r2, [pc, #476]	; (801163c <HAL_UART_IRQHandler+0x558>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d01d      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a75      	ldr	r2, [pc, #468]	; (8011640 <HAL_UART_IRQHandler+0x55c>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d017      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a73      	ldr	r2, [pc, #460]	; (8011644 <HAL_UART_IRQHandler+0x560>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d011      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a71      	ldr	r2, [pc, #452]	; (8011648 <HAL_UART_IRQHandler+0x564>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d00b      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a6f      	ldr	r2, [pc, #444]	; (801164c <HAL_UART_IRQHandler+0x568>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d005      	beq.n	801149e <HAL_UART_IRQHandler+0x3ba>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4a6d      	ldr	r2, [pc, #436]	; (8011650 <HAL_UART_IRQHandler+0x56c>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d105      	bne.n	80114aa <HAL_UART_IRQHandler+0x3c6>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	e004      	b.n	80114b4 <HAL_UART_IRQHandler+0x3d0>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80114b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 81a4 	beq.w	801180a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80114c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80114cc:	429a      	cmp	r2, r3
 80114ce:	f080 819c 	bcs.w	801180a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80114d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114e0:	69db      	ldr	r3, [r3, #28]
 80114e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114e6:	f000 8086 	beq.w	80115f6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80114f6:	e853 3f00 	ldrex	r3, [r3]
 80114fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80114fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	461a      	mov	r2, r3
 8011510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011518:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011520:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801152c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1da      	bne.n	80114ea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	3308      	adds	r3, #8
 801153a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801153e:	e853 3f00 	ldrex	r3, [r3]
 8011542:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011546:	f023 0301 	bic.w	r3, r3, #1
 801154a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3308      	adds	r3, #8
 8011554:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011558:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801155c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011560:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011564:	e841 2300 	strex	r3, r2, [r1]
 8011568:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801156a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1e1      	bne.n	8011534 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	3308      	adds	r3, #8
 8011576:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801157a:	e853 3f00 	ldrex	r3, [r3]
 801157e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	3308      	adds	r3, #8
 8011590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011594:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011596:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011598:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801159a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801159c:	e841 2300 	strex	r3, r2, [r1]
 80115a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80115a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d1e3      	bne.n	8011570 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2220      	movs	r2, #32
 80115ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2200      	movs	r2, #0
 80115b4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115be:	e853 3f00 	ldrex	r3, [r3]
 80115c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80115c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c6:	f023 0310 	bic.w	r3, r3, #16
 80115ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80115d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80115da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80115de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80115e0:	e841 2300 	strex	r3, r2, [r1]
 80115e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80115e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1e4      	bne.n	80115b6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7f8 fda5 	bl	800a140 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011602:	b29b      	uxth	r3, r3
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	b29b      	uxth	r3, r3
 8011608:	4619      	mov	r1, r3
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 f91c 	bl	8011848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011610:	e0fb      	b.n	801180a <HAL_UART_IRQHandler+0x726>
 8011612:	bf00      	nop
 8011614:	40020010 	.word	0x40020010
 8011618:	40020028 	.word	0x40020028
 801161c:	40020040 	.word	0x40020040
 8011620:	40020058 	.word	0x40020058
 8011624:	40020070 	.word	0x40020070
 8011628:	40020088 	.word	0x40020088
 801162c:	400200a0 	.word	0x400200a0
 8011630:	400200b8 	.word	0x400200b8
 8011634:	40020410 	.word	0x40020410
 8011638:	40020428 	.word	0x40020428
 801163c:	40020440 	.word	0x40020440
 8011640:	40020458 	.word	0x40020458
 8011644:	40020470 	.word	0x40020470
 8011648:	40020488 	.word	0x40020488
 801164c:	400204a0 	.word	0x400204a0
 8011650:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011660:	b29b      	uxth	r3, r3
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801166e:	b29b      	uxth	r3, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	f000 80cc 	beq.w	801180e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8011676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801167a:	2b00      	cmp	r3, #0
 801167c:	f000 80c7 	beq.w	801180e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011688:	e853 3f00 	ldrex	r3, [r3]
 801168c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	461a      	mov	r2, r3
 801169e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80116a2:	647b      	str	r3, [r7, #68]	; 0x44
 80116a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116aa:	e841 2300 	strex	r3, r2, [r1]
 80116ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e4      	bne.n	8011680 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3308      	adds	r3, #8
 80116bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	623b      	str	r3, [r7, #32]
   return(result);
 80116c6:	6a3a      	ldr	r2, [r7, #32]
 80116c8:	4b54      	ldr	r3, [pc, #336]	; (801181c <HAL_UART_IRQHandler+0x738>)
 80116ca:	4013      	ands	r3, r2
 80116cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3308      	adds	r3, #8
 80116d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80116da:	633a      	str	r2, [r7, #48]	; 0x30
 80116dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e3      	bne.n	80116b6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2220      	movs	r2, #32
 80116f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	e853 3f00 	ldrex	r3, [r3]
 801170e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f023 0310 	bic.w	r3, r3, #16
 8011716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	461a      	mov	r2, r3
 8011720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011724:	61fb      	str	r3, [r7, #28]
 8011726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011728:	69b9      	ldr	r1, [r7, #24]
 801172a:	69fa      	ldr	r2, [r7, #28]
 801172c:	e841 2300 	strex	r3, r2, [r1]
 8011730:	617b      	str	r3, [r7, #20]
   return(result);
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d1e4      	bne.n	8011702 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 f882 	bl	8011848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011744:	e063      	b.n	801180e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00e      	beq.n	8011770 <HAL_UART_IRQHandler+0x68c>
 8011752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801175a:	2b00      	cmp	r3, #0
 801175c:	d008      	beq.n	8011770 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f001 ff67 	bl	801363c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801176e:	e051      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011778:	2b00      	cmp	r3, #0
 801177a:	d014      	beq.n	80117a6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801177c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011784:	2b00      	cmp	r3, #0
 8011786:	d105      	bne.n	8011794 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801178c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011790:	2b00      	cmp	r3, #0
 8011792:	d008      	beq.n	80117a6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011798:	2b00      	cmp	r3, #0
 801179a:	d03a      	beq.n	8011812 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	4798      	blx	r3
    }
    return;
 80117a4:	e035      	b.n	8011812 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80117a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d009      	beq.n	80117c6 <HAL_UART_IRQHandler+0x6e2>
 80117b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d003      	beq.n	80117c6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f001 fab4 	bl	8012d2c <UART_EndTransmit_IT>
    return;
 80117c4:	e026      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80117c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d009      	beq.n	80117e6 <HAL_UART_IRQHandler+0x702>
 80117d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d003      	beq.n	80117e6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f001 ff40 	bl	8013664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80117e4:	e016      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80117e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d010      	beq.n	8011814 <HAL_UART_IRQHandler+0x730>
 80117f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	da0c      	bge.n	8011814 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f001 ff28 	bl	8013650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011800:	e008      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
      return;
 8011802:	bf00      	nop
 8011804:	e006      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
    return;
 8011806:	bf00      	nop
 8011808:	e004      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
      return;
 801180a:	bf00      	nop
 801180c:	e002      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
      return;
 801180e:	bf00      	nop
 8011810:	e000      	b.n	8011814 <HAL_UART_IRQHandler+0x730>
    return;
 8011812:	bf00      	nop
  }
}
 8011814:	37e8      	adds	r7, #232	; 0xe8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	effffffe 	.word	0xeffffffe

08011820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011828:	bf00      	nop
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	460b      	mov	r3, r1
 8011852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011854:	bf00      	nop
 8011856:	370c      	adds	r7, #12
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr

08011860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011864:	b092      	sub	sp, #72	; 0x48
 8011866:	af00      	add	r7, sp, #0
 8011868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	689a      	ldr	r2, [r3, #8]
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	431a      	orrs	r2, r3
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	431a      	orrs	r2, r3
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	69db      	ldr	r3, [r3, #28]
 8011884:	4313      	orrs	r3, r2
 8011886:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	4bbe      	ldr	r3, [pc, #760]	; (8011b88 <UART_SetConfig+0x328>)
 8011890:	4013      	ands	r3, r2
 8011892:	697a      	ldr	r2, [r7, #20]
 8011894:	6812      	ldr	r2, [r2, #0]
 8011896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011898:	430b      	orrs	r3, r1
 801189a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	68da      	ldr	r2, [r3, #12]
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	430a      	orrs	r2, r1
 80118b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	699b      	ldr	r3, [r3, #24]
 80118b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	4ab3      	ldr	r2, [pc, #716]	; (8011b8c <UART_SetConfig+0x32c>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d004      	beq.n	80118cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	6a1b      	ldr	r3, [r3, #32]
 80118c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118c8:	4313      	orrs	r3, r2
 80118ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	689a      	ldr	r2, [r3, #8]
 80118d2:	4baf      	ldr	r3, [pc, #700]	; (8011b90 <UART_SetConfig+0x330>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80118dc:	430b      	orrs	r3, r1
 80118de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e6:	f023 010f 	bic.w	r1, r3, #15
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	430a      	orrs	r2, r1
 80118f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4aa6      	ldr	r2, [pc, #664]	; (8011b94 <UART_SetConfig+0x334>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d177      	bne.n	80119f0 <UART_SetConfig+0x190>
 8011900:	4ba5      	ldr	r3, [pc, #660]	; (8011b98 <UART_SetConfig+0x338>)
 8011902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011908:	2b28      	cmp	r3, #40	; 0x28
 801190a:	d86d      	bhi.n	80119e8 <UART_SetConfig+0x188>
 801190c:	a201      	add	r2, pc, #4	; (adr r2, 8011914 <UART_SetConfig+0xb4>)
 801190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011912:	bf00      	nop
 8011914:	080119b9 	.word	0x080119b9
 8011918:	080119e9 	.word	0x080119e9
 801191c:	080119e9 	.word	0x080119e9
 8011920:	080119e9 	.word	0x080119e9
 8011924:	080119e9 	.word	0x080119e9
 8011928:	080119e9 	.word	0x080119e9
 801192c:	080119e9 	.word	0x080119e9
 8011930:	080119e9 	.word	0x080119e9
 8011934:	080119c1 	.word	0x080119c1
 8011938:	080119e9 	.word	0x080119e9
 801193c:	080119e9 	.word	0x080119e9
 8011940:	080119e9 	.word	0x080119e9
 8011944:	080119e9 	.word	0x080119e9
 8011948:	080119e9 	.word	0x080119e9
 801194c:	080119e9 	.word	0x080119e9
 8011950:	080119e9 	.word	0x080119e9
 8011954:	080119c9 	.word	0x080119c9
 8011958:	080119e9 	.word	0x080119e9
 801195c:	080119e9 	.word	0x080119e9
 8011960:	080119e9 	.word	0x080119e9
 8011964:	080119e9 	.word	0x080119e9
 8011968:	080119e9 	.word	0x080119e9
 801196c:	080119e9 	.word	0x080119e9
 8011970:	080119e9 	.word	0x080119e9
 8011974:	080119d1 	.word	0x080119d1
 8011978:	080119e9 	.word	0x080119e9
 801197c:	080119e9 	.word	0x080119e9
 8011980:	080119e9 	.word	0x080119e9
 8011984:	080119e9 	.word	0x080119e9
 8011988:	080119e9 	.word	0x080119e9
 801198c:	080119e9 	.word	0x080119e9
 8011990:	080119e9 	.word	0x080119e9
 8011994:	080119d9 	.word	0x080119d9
 8011998:	080119e9 	.word	0x080119e9
 801199c:	080119e9 	.word	0x080119e9
 80119a0:	080119e9 	.word	0x080119e9
 80119a4:	080119e9 	.word	0x080119e9
 80119a8:	080119e9 	.word	0x080119e9
 80119ac:	080119e9 	.word	0x080119e9
 80119b0:	080119e9 	.word	0x080119e9
 80119b4:	080119e1 	.word	0x080119e1
 80119b8:	2301      	movs	r3, #1
 80119ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119be:	e222      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119c0:	2304      	movs	r3, #4
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119c6:	e21e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119c8:	2308      	movs	r3, #8
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ce:	e21a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119d0:	2310      	movs	r3, #16
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119d6:	e216      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119d8:	2320      	movs	r3, #32
 80119da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119de:	e212      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119e0:	2340      	movs	r3, #64	; 0x40
 80119e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119e6:	e20e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119e8:	2380      	movs	r3, #128	; 0x80
 80119ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ee:	e20a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4a69      	ldr	r2, [pc, #420]	; (8011b9c <UART_SetConfig+0x33c>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d130      	bne.n	8011a5c <UART_SetConfig+0x1fc>
 80119fa:	4b67      	ldr	r3, [pc, #412]	; (8011b98 <UART_SetConfig+0x338>)
 80119fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119fe:	f003 0307 	and.w	r3, r3, #7
 8011a02:	2b05      	cmp	r3, #5
 8011a04:	d826      	bhi.n	8011a54 <UART_SetConfig+0x1f4>
 8011a06:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <UART_SetConfig+0x1ac>)
 8011a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0c:	08011a25 	.word	0x08011a25
 8011a10:	08011a2d 	.word	0x08011a2d
 8011a14:	08011a35 	.word	0x08011a35
 8011a18:	08011a3d 	.word	0x08011a3d
 8011a1c:	08011a45 	.word	0x08011a45
 8011a20:	08011a4d 	.word	0x08011a4d
 8011a24:	2300      	movs	r3, #0
 8011a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a2a:	e1ec      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a2c:	2304      	movs	r3, #4
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a32:	e1e8      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a34:	2308      	movs	r3, #8
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a3a:	e1e4      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a3c:	2310      	movs	r3, #16
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a42:	e1e0      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a44:	2320      	movs	r3, #32
 8011a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a4a:	e1dc      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a4c:	2340      	movs	r3, #64	; 0x40
 8011a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a52:	e1d8      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a54:	2380      	movs	r3, #128	; 0x80
 8011a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a5a:	e1d4      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a4f      	ldr	r2, [pc, #316]	; (8011ba0 <UART_SetConfig+0x340>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d130      	bne.n	8011ac8 <UART_SetConfig+0x268>
 8011a66:	4b4c      	ldr	r3, [pc, #304]	; (8011b98 <UART_SetConfig+0x338>)
 8011a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a6a:	f003 0307 	and.w	r3, r3, #7
 8011a6e:	2b05      	cmp	r3, #5
 8011a70:	d826      	bhi.n	8011ac0 <UART_SetConfig+0x260>
 8011a72:	a201      	add	r2, pc, #4	; (adr r2, 8011a78 <UART_SetConfig+0x218>)
 8011a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a78:	08011a91 	.word	0x08011a91
 8011a7c:	08011a99 	.word	0x08011a99
 8011a80:	08011aa1 	.word	0x08011aa1
 8011a84:	08011aa9 	.word	0x08011aa9
 8011a88:	08011ab1 	.word	0x08011ab1
 8011a8c:	08011ab9 	.word	0x08011ab9
 8011a90:	2300      	movs	r3, #0
 8011a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a96:	e1b6      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011a98:	2304      	movs	r3, #4
 8011a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a9e:	e1b2      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aa6:	e1ae      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011aa8:	2310      	movs	r3, #16
 8011aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aae:	e1aa      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ab6:	e1a6      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011ab8:	2340      	movs	r3, #64	; 0x40
 8011aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011abe:	e1a2      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011ac0:	2380      	movs	r3, #128	; 0x80
 8011ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ac6:	e19e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a35      	ldr	r2, [pc, #212]	; (8011ba4 <UART_SetConfig+0x344>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d130      	bne.n	8011b34 <UART_SetConfig+0x2d4>
 8011ad2:	4b31      	ldr	r3, [pc, #196]	; (8011b98 <UART_SetConfig+0x338>)
 8011ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad6:	f003 0307 	and.w	r3, r3, #7
 8011ada:	2b05      	cmp	r3, #5
 8011adc:	d826      	bhi.n	8011b2c <UART_SetConfig+0x2cc>
 8011ade:	a201      	add	r2, pc, #4	; (adr r2, 8011ae4 <UART_SetConfig+0x284>)
 8011ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae4:	08011afd 	.word	0x08011afd
 8011ae8:	08011b05 	.word	0x08011b05
 8011aec:	08011b0d 	.word	0x08011b0d
 8011af0:	08011b15 	.word	0x08011b15
 8011af4:	08011b1d 	.word	0x08011b1d
 8011af8:	08011b25 	.word	0x08011b25
 8011afc:	2300      	movs	r3, #0
 8011afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b02:	e180      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b04:	2304      	movs	r3, #4
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b0a:	e17c      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b0c:	2308      	movs	r3, #8
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b12:	e178      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b14:	2310      	movs	r3, #16
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b1a:	e174      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b1c:	2320      	movs	r3, #32
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b22:	e170      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b24:	2340      	movs	r3, #64	; 0x40
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b2a:	e16c      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b2c:	2380      	movs	r3, #128	; 0x80
 8011b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b32:	e168      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a1b      	ldr	r2, [pc, #108]	; (8011ba8 <UART_SetConfig+0x348>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d142      	bne.n	8011bc4 <UART_SetConfig+0x364>
 8011b3e:	4b16      	ldr	r3, [pc, #88]	; (8011b98 <UART_SetConfig+0x338>)
 8011b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b42:	f003 0307 	and.w	r3, r3, #7
 8011b46:	2b05      	cmp	r3, #5
 8011b48:	d838      	bhi.n	8011bbc <UART_SetConfig+0x35c>
 8011b4a:	a201      	add	r2, pc, #4	; (adr r2, 8011b50 <UART_SetConfig+0x2f0>)
 8011b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b50:	08011b69 	.word	0x08011b69
 8011b54:	08011b71 	.word	0x08011b71
 8011b58:	08011b79 	.word	0x08011b79
 8011b5c:	08011b81 	.word	0x08011b81
 8011b60:	08011bad 	.word	0x08011bad
 8011b64:	08011bb5 	.word	0x08011bb5
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b6e:	e14a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b70:	2304      	movs	r3, #4
 8011b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b76:	e146      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b78:	2308      	movs	r3, #8
 8011b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7e:	e142      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b80:	2310      	movs	r3, #16
 8011b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b86:	e13e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011b88:	cfff69f3 	.word	0xcfff69f3
 8011b8c:	58000c00 	.word	0x58000c00
 8011b90:	11fff4ff 	.word	0x11fff4ff
 8011b94:	40011000 	.word	0x40011000
 8011b98:	58024400 	.word	0x58024400
 8011b9c:	40004400 	.word	0x40004400
 8011ba0:	40004800 	.word	0x40004800
 8011ba4:	40004c00 	.word	0x40004c00
 8011ba8:	40005000 	.word	0x40005000
 8011bac:	2320      	movs	r3, #32
 8011bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb2:	e128      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011bb4:	2340      	movs	r3, #64	; 0x40
 8011bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bba:	e124      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011bbc:	2380      	movs	r3, #128	; 0x80
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e120      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4acb      	ldr	r2, [pc, #812]	; (8011ef8 <UART_SetConfig+0x698>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d176      	bne.n	8011cbc <UART_SetConfig+0x45c>
 8011bce:	4bcb      	ldr	r3, [pc, #812]	; (8011efc <UART_SetConfig+0x69c>)
 8011bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bd6:	2b28      	cmp	r3, #40	; 0x28
 8011bd8:	d86c      	bhi.n	8011cb4 <UART_SetConfig+0x454>
 8011bda:	a201      	add	r2, pc, #4	; (adr r2, 8011be0 <UART_SetConfig+0x380>)
 8011bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be0:	08011c85 	.word	0x08011c85
 8011be4:	08011cb5 	.word	0x08011cb5
 8011be8:	08011cb5 	.word	0x08011cb5
 8011bec:	08011cb5 	.word	0x08011cb5
 8011bf0:	08011cb5 	.word	0x08011cb5
 8011bf4:	08011cb5 	.word	0x08011cb5
 8011bf8:	08011cb5 	.word	0x08011cb5
 8011bfc:	08011cb5 	.word	0x08011cb5
 8011c00:	08011c8d 	.word	0x08011c8d
 8011c04:	08011cb5 	.word	0x08011cb5
 8011c08:	08011cb5 	.word	0x08011cb5
 8011c0c:	08011cb5 	.word	0x08011cb5
 8011c10:	08011cb5 	.word	0x08011cb5
 8011c14:	08011cb5 	.word	0x08011cb5
 8011c18:	08011cb5 	.word	0x08011cb5
 8011c1c:	08011cb5 	.word	0x08011cb5
 8011c20:	08011c95 	.word	0x08011c95
 8011c24:	08011cb5 	.word	0x08011cb5
 8011c28:	08011cb5 	.word	0x08011cb5
 8011c2c:	08011cb5 	.word	0x08011cb5
 8011c30:	08011cb5 	.word	0x08011cb5
 8011c34:	08011cb5 	.word	0x08011cb5
 8011c38:	08011cb5 	.word	0x08011cb5
 8011c3c:	08011cb5 	.word	0x08011cb5
 8011c40:	08011c9d 	.word	0x08011c9d
 8011c44:	08011cb5 	.word	0x08011cb5
 8011c48:	08011cb5 	.word	0x08011cb5
 8011c4c:	08011cb5 	.word	0x08011cb5
 8011c50:	08011cb5 	.word	0x08011cb5
 8011c54:	08011cb5 	.word	0x08011cb5
 8011c58:	08011cb5 	.word	0x08011cb5
 8011c5c:	08011cb5 	.word	0x08011cb5
 8011c60:	08011ca5 	.word	0x08011ca5
 8011c64:	08011cb5 	.word	0x08011cb5
 8011c68:	08011cb5 	.word	0x08011cb5
 8011c6c:	08011cb5 	.word	0x08011cb5
 8011c70:	08011cb5 	.word	0x08011cb5
 8011c74:	08011cb5 	.word	0x08011cb5
 8011c78:	08011cb5 	.word	0x08011cb5
 8011c7c:	08011cb5 	.word	0x08011cb5
 8011c80:	08011cad 	.word	0x08011cad
 8011c84:	2301      	movs	r3, #1
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e0bc      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011c8c:	2304      	movs	r3, #4
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e0b8      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011c94:	2308      	movs	r3, #8
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e0b4      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011c9c:	2310      	movs	r3, #16
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e0b0      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011ca4:	2320      	movs	r3, #32
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011caa:	e0ac      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011cac:	2340      	movs	r3, #64	; 0x40
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb2:	e0a8      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011cb4:	2380      	movs	r3, #128	; 0x80
 8011cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cba:	e0a4      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	4a8f      	ldr	r2, [pc, #572]	; (8011f00 <UART_SetConfig+0x6a0>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d130      	bne.n	8011d28 <UART_SetConfig+0x4c8>
 8011cc6:	4b8d      	ldr	r3, [pc, #564]	; (8011efc <UART_SetConfig+0x69c>)
 8011cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cca:	f003 0307 	and.w	r3, r3, #7
 8011cce:	2b05      	cmp	r3, #5
 8011cd0:	d826      	bhi.n	8011d20 <UART_SetConfig+0x4c0>
 8011cd2:	a201      	add	r2, pc, #4	; (adr r2, 8011cd8 <UART_SetConfig+0x478>)
 8011cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd8:	08011cf1 	.word	0x08011cf1
 8011cdc:	08011cf9 	.word	0x08011cf9
 8011ce0:	08011d01 	.word	0x08011d01
 8011ce4:	08011d09 	.word	0x08011d09
 8011ce8:	08011d11 	.word	0x08011d11
 8011cec:	08011d19 	.word	0x08011d19
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e086      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e082      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d00:	2308      	movs	r3, #8
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e07e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d08:	2310      	movs	r3, #16
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0e:	e07a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d10:	2320      	movs	r3, #32
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d16:	e076      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d18:	2340      	movs	r3, #64	; 0x40
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d1e:	e072      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d20:	2380      	movs	r3, #128	; 0x80
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d26:	e06e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a75      	ldr	r2, [pc, #468]	; (8011f04 <UART_SetConfig+0x6a4>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d130      	bne.n	8011d94 <UART_SetConfig+0x534>
 8011d32:	4b72      	ldr	r3, [pc, #456]	; (8011efc <UART_SetConfig+0x69c>)
 8011d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d36:	f003 0307 	and.w	r3, r3, #7
 8011d3a:	2b05      	cmp	r3, #5
 8011d3c:	d826      	bhi.n	8011d8c <UART_SetConfig+0x52c>
 8011d3e:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <UART_SetConfig+0x4e4>)
 8011d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d44:	08011d5d 	.word	0x08011d5d
 8011d48:	08011d65 	.word	0x08011d65
 8011d4c:	08011d6d 	.word	0x08011d6d
 8011d50:	08011d75 	.word	0x08011d75
 8011d54:	08011d7d 	.word	0x08011d7d
 8011d58:	08011d85 	.word	0x08011d85
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d62:	e050      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d64:	2304      	movs	r3, #4
 8011d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d6a:	e04c      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d6c:	2308      	movs	r3, #8
 8011d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d72:	e048      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d74:	2310      	movs	r3, #16
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7a:	e044      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d7c:	2320      	movs	r3, #32
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d82:	e040      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d84:	2340      	movs	r3, #64	; 0x40
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8a:	e03c      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d8c:	2380      	movs	r3, #128	; 0x80
 8011d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d92:	e038      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	4a5b      	ldr	r2, [pc, #364]	; (8011f08 <UART_SetConfig+0x6a8>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d130      	bne.n	8011e00 <UART_SetConfig+0x5a0>
 8011d9e:	4b57      	ldr	r3, [pc, #348]	; (8011efc <UART_SetConfig+0x69c>)
 8011da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011da2:	f003 0307 	and.w	r3, r3, #7
 8011da6:	2b05      	cmp	r3, #5
 8011da8:	d826      	bhi.n	8011df8 <UART_SetConfig+0x598>
 8011daa:	a201      	add	r2, pc, #4	; (adr r2, 8011db0 <UART_SetConfig+0x550>)
 8011dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db0:	08011dc9 	.word	0x08011dc9
 8011db4:	08011dd1 	.word	0x08011dd1
 8011db8:	08011dd9 	.word	0x08011dd9
 8011dbc:	08011de1 	.word	0x08011de1
 8011dc0:	08011de9 	.word	0x08011de9
 8011dc4:	08011df1 	.word	0x08011df1
 8011dc8:	2302      	movs	r3, #2
 8011dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dce:	e01a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011dd0:	2304      	movs	r3, #4
 8011dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dd6:	e016      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011dd8:	2308      	movs	r3, #8
 8011dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dde:	e012      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011de0:	2310      	movs	r3, #16
 8011de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011de6:	e00e      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011de8:	2320      	movs	r3, #32
 8011dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dee:	e00a      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011df0:	2340      	movs	r3, #64	; 0x40
 8011df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011df6:	e006      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011df8:	2380      	movs	r3, #128	; 0x80
 8011dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfe:	e002      	b.n	8011e06 <UART_SetConfig+0x5a6>
 8011e00:	2380      	movs	r3, #128	; 0x80
 8011e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a3f      	ldr	r2, [pc, #252]	; (8011f08 <UART_SetConfig+0x6a8>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	f040 80f8 	bne.w	8012002 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e16:	2b20      	cmp	r3, #32
 8011e18:	dc46      	bgt.n	8011ea8 <UART_SetConfig+0x648>
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	f2c0 8082 	blt.w	8011f24 <UART_SetConfig+0x6c4>
 8011e20:	3b02      	subs	r3, #2
 8011e22:	2b1e      	cmp	r3, #30
 8011e24:	d87e      	bhi.n	8011f24 <UART_SetConfig+0x6c4>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <UART_SetConfig+0x5cc>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011eaf 	.word	0x08011eaf
 8011e30:	08011f25 	.word	0x08011f25
 8011e34:	08011eb7 	.word	0x08011eb7
 8011e38:	08011f25 	.word	0x08011f25
 8011e3c:	08011f25 	.word	0x08011f25
 8011e40:	08011f25 	.word	0x08011f25
 8011e44:	08011ec7 	.word	0x08011ec7
 8011e48:	08011f25 	.word	0x08011f25
 8011e4c:	08011f25 	.word	0x08011f25
 8011e50:	08011f25 	.word	0x08011f25
 8011e54:	08011f25 	.word	0x08011f25
 8011e58:	08011f25 	.word	0x08011f25
 8011e5c:	08011f25 	.word	0x08011f25
 8011e60:	08011f25 	.word	0x08011f25
 8011e64:	08011ed7 	.word	0x08011ed7
 8011e68:	08011f25 	.word	0x08011f25
 8011e6c:	08011f25 	.word	0x08011f25
 8011e70:	08011f25 	.word	0x08011f25
 8011e74:	08011f25 	.word	0x08011f25
 8011e78:	08011f25 	.word	0x08011f25
 8011e7c:	08011f25 	.word	0x08011f25
 8011e80:	08011f25 	.word	0x08011f25
 8011e84:	08011f25 	.word	0x08011f25
 8011e88:	08011f25 	.word	0x08011f25
 8011e8c:	08011f25 	.word	0x08011f25
 8011e90:	08011f25 	.word	0x08011f25
 8011e94:	08011f25 	.word	0x08011f25
 8011e98:	08011f25 	.word	0x08011f25
 8011e9c:	08011f25 	.word	0x08011f25
 8011ea0:	08011f25 	.word	0x08011f25
 8011ea4:	08011f17 	.word	0x08011f17
 8011ea8:	2b40      	cmp	r3, #64	; 0x40
 8011eaa:	d037      	beq.n	8011f1c <UART_SetConfig+0x6bc>
 8011eac:	e03a      	b.n	8011f24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011eae:	f7fe f841 	bl	800ff34 <HAL_RCCEx_GetD3PCLK1Freq>
 8011eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011eb4:	e03c      	b.n	8011f30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe f850 	bl	800ff60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ec4:	e034      	b.n	8011f30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ec6:	f107 0318 	add.w	r3, r7, #24
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fe f99c 	bl	8010208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ed4:	e02c      	b.n	8011f30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ed6:	4b09      	ldr	r3, [pc, #36]	; (8011efc <UART_SetConfig+0x69c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f003 0320 	and.w	r3, r3, #32
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d016      	beq.n	8011f10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ee2:	4b06      	ldr	r3, [pc, #24]	; (8011efc <UART_SetConfig+0x69c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	08db      	lsrs	r3, r3, #3
 8011ee8:	f003 0303 	and.w	r3, r3, #3
 8011eec:	4a07      	ldr	r2, [pc, #28]	; (8011f0c <UART_SetConfig+0x6ac>)
 8011eee:	fa22 f303 	lsr.w	r3, r2, r3
 8011ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ef4:	e01c      	b.n	8011f30 <UART_SetConfig+0x6d0>
 8011ef6:	bf00      	nop
 8011ef8:	40011400 	.word	0x40011400
 8011efc:	58024400 	.word	0x58024400
 8011f00:	40007800 	.word	0x40007800
 8011f04:	40007c00 	.word	0x40007c00
 8011f08:	58000c00 	.word	0x58000c00
 8011f0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011f10:	4b9d      	ldr	r3, [pc, #628]	; (8012188 <UART_SetConfig+0x928>)
 8011f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f14:	e00c      	b.n	8011f30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f16:	4b9d      	ldr	r3, [pc, #628]	; (801218c <UART_SetConfig+0x92c>)
 8011f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f1a:	e009      	b.n	8011f30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f22:	e005      	b.n	8011f30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011f24:	2300      	movs	r3, #0
 8011f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011f2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f000 81de 	beq.w	80122f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3c:	4a94      	ldr	r2, [pc, #592]	; (8012190 <UART_SetConfig+0x930>)
 8011f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f42:	461a      	mov	r2, r3
 8011f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f4a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	685a      	ldr	r2, [r3, #4]
 8011f50:	4613      	mov	r3, r2
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	4413      	add	r3, r2
 8011f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d305      	bcc.n	8011f68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d903      	bls.n	8011f70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011f6e:	e1c1      	b.n	80122f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f72:	2200      	movs	r2, #0
 8011f74:	60bb      	str	r3, [r7, #8]
 8011f76:	60fa      	str	r2, [r7, #12]
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7c:	4a84      	ldr	r2, [pc, #528]	; (8012190 <UART_SetConfig+0x930>)
 8011f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	2200      	movs	r2, #0
 8011f86:	603b      	str	r3, [r7, #0]
 8011f88:	607a      	str	r2, [r7, #4]
 8011f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011f92:	f7ee fa0d 	bl	80003b0 <__aeabi_uldivmod>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	4610      	mov	r0, r2
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	f04f 0200 	mov.w	r2, #0
 8011fa2:	f04f 0300 	mov.w	r3, #0
 8011fa6:	020b      	lsls	r3, r1, #8
 8011fa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011fac:	0202      	lsls	r2, r0, #8
 8011fae:	6979      	ldr	r1, [r7, #20]
 8011fb0:	6849      	ldr	r1, [r1, #4]
 8011fb2:	0849      	lsrs	r1, r1, #1
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	4605      	mov	r5, r0
 8011fba:	eb12 0804 	adds.w	r8, r2, r4
 8011fbe:	eb43 0905 	adc.w	r9, r3, r5
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	469a      	mov	sl, r3
 8011fca:	4693      	mov	fp, r2
 8011fcc:	4652      	mov	r2, sl
 8011fce:	465b      	mov	r3, fp
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	f7ee f9ec 	bl	80003b0 <__aeabi_uldivmod>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4613      	mov	r3, r2
 8011fde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011fe6:	d308      	bcc.n	8011ffa <UART_SetConfig+0x79a>
 8011fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fee:	d204      	bcs.n	8011ffa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ff6:	60da      	str	r2, [r3, #12]
 8011ff8:	e17c      	b.n	80122f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012000:	e178      	b.n	80122f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	69db      	ldr	r3, [r3, #28]
 8012006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801200a:	f040 80c5 	bne.w	8012198 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801200e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012012:	2b20      	cmp	r3, #32
 8012014:	dc48      	bgt.n	80120a8 <UART_SetConfig+0x848>
 8012016:	2b00      	cmp	r3, #0
 8012018:	db7b      	blt.n	8012112 <UART_SetConfig+0x8b2>
 801201a:	2b20      	cmp	r3, #32
 801201c:	d879      	bhi.n	8012112 <UART_SetConfig+0x8b2>
 801201e:	a201      	add	r2, pc, #4	; (adr r2, 8012024 <UART_SetConfig+0x7c4>)
 8012020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012024:	080120af 	.word	0x080120af
 8012028:	080120b7 	.word	0x080120b7
 801202c:	08012113 	.word	0x08012113
 8012030:	08012113 	.word	0x08012113
 8012034:	080120bf 	.word	0x080120bf
 8012038:	08012113 	.word	0x08012113
 801203c:	08012113 	.word	0x08012113
 8012040:	08012113 	.word	0x08012113
 8012044:	080120cf 	.word	0x080120cf
 8012048:	08012113 	.word	0x08012113
 801204c:	08012113 	.word	0x08012113
 8012050:	08012113 	.word	0x08012113
 8012054:	08012113 	.word	0x08012113
 8012058:	08012113 	.word	0x08012113
 801205c:	08012113 	.word	0x08012113
 8012060:	08012113 	.word	0x08012113
 8012064:	080120df 	.word	0x080120df
 8012068:	08012113 	.word	0x08012113
 801206c:	08012113 	.word	0x08012113
 8012070:	08012113 	.word	0x08012113
 8012074:	08012113 	.word	0x08012113
 8012078:	08012113 	.word	0x08012113
 801207c:	08012113 	.word	0x08012113
 8012080:	08012113 	.word	0x08012113
 8012084:	08012113 	.word	0x08012113
 8012088:	08012113 	.word	0x08012113
 801208c:	08012113 	.word	0x08012113
 8012090:	08012113 	.word	0x08012113
 8012094:	08012113 	.word	0x08012113
 8012098:	08012113 	.word	0x08012113
 801209c:	08012113 	.word	0x08012113
 80120a0:	08012113 	.word	0x08012113
 80120a4:	08012105 	.word	0x08012105
 80120a8:	2b40      	cmp	r3, #64	; 0x40
 80120aa:	d02e      	beq.n	801210a <UART_SetConfig+0x8aa>
 80120ac:	e031      	b.n	8012112 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120ae:	f7fc ffcf 	bl	800f050 <HAL_RCC_GetPCLK1Freq>
 80120b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120b4:	e033      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120b6:	f7fc ffe1 	bl	800f07c <HAL_RCC_GetPCLK2Freq>
 80120ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120bc:	e02f      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fd ff4c 	bl	800ff60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80120c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120cc:	e027      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120ce:	f107 0318 	add.w	r3, r7, #24
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe f898 	bl	8010208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120dc:	e01f      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120de:	4b2d      	ldr	r3, [pc, #180]	; (8012194 <UART_SetConfig+0x934>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f003 0320 	and.w	r3, r3, #32
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d009      	beq.n	80120fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80120ea:	4b2a      	ldr	r3, [pc, #168]	; (8012194 <UART_SetConfig+0x934>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	08db      	lsrs	r3, r3, #3
 80120f0:	f003 0303 	and.w	r3, r3, #3
 80120f4:	4a24      	ldr	r2, [pc, #144]	; (8012188 <UART_SetConfig+0x928>)
 80120f6:	fa22 f303 	lsr.w	r3, r2, r3
 80120fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80120fc:	e00f      	b.n	801211e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80120fe:	4b22      	ldr	r3, [pc, #136]	; (8012188 <UART_SetConfig+0x928>)
 8012100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012102:	e00c      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012104:	4b21      	ldr	r3, [pc, #132]	; (801218c <UART_SetConfig+0x92c>)
 8012106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012108:	e009      	b.n	801211e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801210e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012110:	e005      	b.n	801211e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012112:	2300      	movs	r3, #0
 8012114:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012116:	2301      	movs	r3, #1
 8012118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801211c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 80e7 	beq.w	80122f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212a:	4a19      	ldr	r2, [pc, #100]	; (8012190 <UART_SetConfig+0x930>)
 801212c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012130:	461a      	mov	r2, r3
 8012132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012134:	fbb3 f3f2 	udiv	r3, r3, r2
 8012138:	005a      	lsls	r2, r3, #1
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	085b      	lsrs	r3, r3, #1
 8012140:	441a      	add	r2, r3
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	fbb2 f3f3 	udiv	r3, r2, r3
 801214a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	2b0f      	cmp	r3, #15
 8012150:	d916      	bls.n	8012180 <UART_SetConfig+0x920>
 8012152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012158:	d212      	bcs.n	8012180 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	b29b      	uxth	r3, r3
 801215e:	f023 030f 	bic.w	r3, r3, #15
 8012162:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	085b      	lsrs	r3, r3, #1
 8012168:	b29b      	uxth	r3, r3
 801216a:	f003 0307 	and.w	r3, r3, #7
 801216e:	b29a      	uxth	r2, r3
 8012170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012172:	4313      	orrs	r3, r2
 8012174:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801217c:	60da      	str	r2, [r3, #12]
 801217e:	e0b9      	b.n	80122f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012186:	e0b5      	b.n	80122f4 <UART_SetConfig+0xa94>
 8012188:	03d09000 	.word	0x03d09000
 801218c:	003d0900 	.word	0x003d0900
 8012190:	08015034 	.word	0x08015034
 8012194:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012198:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801219c:	2b20      	cmp	r3, #32
 801219e:	dc49      	bgt.n	8012234 <UART_SetConfig+0x9d4>
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	db7c      	blt.n	801229e <UART_SetConfig+0xa3e>
 80121a4:	2b20      	cmp	r3, #32
 80121a6:	d87a      	bhi.n	801229e <UART_SetConfig+0xa3e>
 80121a8:	a201      	add	r2, pc, #4	; (adr r2, 80121b0 <UART_SetConfig+0x950>)
 80121aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ae:	bf00      	nop
 80121b0:	0801223b 	.word	0x0801223b
 80121b4:	08012243 	.word	0x08012243
 80121b8:	0801229f 	.word	0x0801229f
 80121bc:	0801229f 	.word	0x0801229f
 80121c0:	0801224b 	.word	0x0801224b
 80121c4:	0801229f 	.word	0x0801229f
 80121c8:	0801229f 	.word	0x0801229f
 80121cc:	0801229f 	.word	0x0801229f
 80121d0:	0801225b 	.word	0x0801225b
 80121d4:	0801229f 	.word	0x0801229f
 80121d8:	0801229f 	.word	0x0801229f
 80121dc:	0801229f 	.word	0x0801229f
 80121e0:	0801229f 	.word	0x0801229f
 80121e4:	0801229f 	.word	0x0801229f
 80121e8:	0801229f 	.word	0x0801229f
 80121ec:	0801229f 	.word	0x0801229f
 80121f0:	0801226b 	.word	0x0801226b
 80121f4:	0801229f 	.word	0x0801229f
 80121f8:	0801229f 	.word	0x0801229f
 80121fc:	0801229f 	.word	0x0801229f
 8012200:	0801229f 	.word	0x0801229f
 8012204:	0801229f 	.word	0x0801229f
 8012208:	0801229f 	.word	0x0801229f
 801220c:	0801229f 	.word	0x0801229f
 8012210:	0801229f 	.word	0x0801229f
 8012214:	0801229f 	.word	0x0801229f
 8012218:	0801229f 	.word	0x0801229f
 801221c:	0801229f 	.word	0x0801229f
 8012220:	0801229f 	.word	0x0801229f
 8012224:	0801229f 	.word	0x0801229f
 8012228:	0801229f 	.word	0x0801229f
 801222c:	0801229f 	.word	0x0801229f
 8012230:	08012291 	.word	0x08012291
 8012234:	2b40      	cmp	r3, #64	; 0x40
 8012236:	d02e      	beq.n	8012296 <UART_SetConfig+0xa36>
 8012238:	e031      	b.n	801229e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801223a:	f7fc ff09 	bl	800f050 <HAL_RCC_GetPCLK1Freq>
 801223e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012240:	e033      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012242:	f7fc ff1b 	bl	800f07c <HAL_RCC_GetPCLK2Freq>
 8012246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012248:	e02f      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801224e:	4618      	mov	r0, r3
 8012250:	f7fd fe86 	bl	800ff60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012258:	e027      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801225a:	f107 0318 	add.w	r3, r7, #24
 801225e:	4618      	mov	r0, r3
 8012260:	f7fd ffd2 	bl	8010208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012268:	e01f      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801226a:	4b2d      	ldr	r3, [pc, #180]	; (8012320 <UART_SetConfig+0xac0>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f003 0320 	and.w	r3, r3, #32
 8012272:	2b00      	cmp	r3, #0
 8012274:	d009      	beq.n	801228a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012276:	4b2a      	ldr	r3, [pc, #168]	; (8012320 <UART_SetConfig+0xac0>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	08db      	lsrs	r3, r3, #3
 801227c:	f003 0303 	and.w	r3, r3, #3
 8012280:	4a28      	ldr	r2, [pc, #160]	; (8012324 <UART_SetConfig+0xac4>)
 8012282:	fa22 f303 	lsr.w	r3, r2, r3
 8012286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012288:	e00f      	b.n	80122aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801228a:	4b26      	ldr	r3, [pc, #152]	; (8012324 <UART_SetConfig+0xac4>)
 801228c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801228e:	e00c      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012290:	4b25      	ldr	r3, [pc, #148]	; (8012328 <UART_SetConfig+0xac8>)
 8012292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012294:	e009      	b.n	80122aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801229a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801229c:	e005      	b.n	80122aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801229e:	2300      	movs	r3, #0
 80122a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80122a2:	2301      	movs	r3, #1
 80122a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80122a8:	bf00      	nop
    }

    if (pclk != 0U)
 80122aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d021      	beq.n	80122f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b4:	4a1d      	ldr	r2, [pc, #116]	; (801232c <UART_SetConfig+0xacc>)
 80122b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122ba:	461a      	mov	r2, r3
 80122bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122be:	fbb3 f2f2 	udiv	r2, r3, r2
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	085b      	lsrs	r3, r3, #1
 80122c8:	441a      	add	r2, r3
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80122d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d6:	2b0f      	cmp	r3, #15
 80122d8:	d909      	bls.n	80122ee <UART_SetConfig+0xa8e>
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122e0:	d205      	bcs.n	80122ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80122e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	60da      	str	r2, [r3, #12]
 80122ec:	e002      	b.n	80122f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80122ee:	2301      	movs	r3, #1
 80122f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	2201      	movs	r2, #1
 8012300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	2200      	movs	r2, #0
 8012308:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	2200      	movs	r2, #0
 801230e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012310:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012314:	4618      	mov	r0, r3
 8012316:	3748      	adds	r7, #72	; 0x48
 8012318:	46bd      	mov	sp, r7
 801231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801231e:	bf00      	nop
 8012320:	58024400 	.word	0x58024400
 8012324:	03d09000 	.word	0x03d09000
 8012328:	003d0900 	.word	0x003d0900
 801232c:	08015034 	.word	0x08015034

08012330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00a      	beq.n	801235a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	430a      	orrs	r2, r1
 8012358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801235e:	f003 0302 	and.w	r3, r3, #2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00a      	beq.n	801237c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	430a      	orrs	r2, r1
 801237a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012380:	f003 0304 	and.w	r3, r3, #4
 8012384:	2b00      	cmp	r3, #0
 8012386:	d00a      	beq.n	801239e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	430a      	orrs	r2, r1
 801239c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123a2:	f003 0308 	and.w	r3, r3, #8
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00a      	beq.n	80123c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	430a      	orrs	r2, r1
 80123be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c4:	f003 0310 	and.w	r3, r3, #16
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00a      	beq.n	80123e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	430a      	orrs	r2, r1
 80123e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123e6:	f003 0320 	and.w	r3, r3, #32
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00a      	beq.n	8012404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	430a      	orrs	r2, r1
 8012402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801240c:	2b00      	cmp	r3, #0
 801240e:	d01a      	beq.n	8012446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	430a      	orrs	r2, r1
 8012424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801242a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801242e:	d10a      	bne.n	8012446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	430a      	orrs	r2, r1
 8012444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00a      	beq.n	8012468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	430a      	orrs	r2, r1
 8012466:	605a      	str	r2, [r3, #4]
  }
}
 8012468:	bf00      	nop
 801246a:	370c      	adds	r7, #12
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr

08012474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af02      	add	r7, sp, #8
 801247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012484:	f7f6 fc42 	bl	8008d0c <HAL_GetTick>
 8012488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f003 0308 	and.w	r3, r3, #8
 8012494:	2b08      	cmp	r3, #8
 8012496:	d10e      	bne.n	80124b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2200      	movs	r2, #0
 80124a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f000 f82f 	bl	801250a <UART_WaitOnFlagUntilTimeout>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124b2:	2303      	movs	r3, #3
 80124b4:	e025      	b.n	8012502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f003 0304 	and.w	r3, r3, #4
 80124c0:	2b04      	cmp	r3, #4
 80124c2:	d10e      	bne.n	80124e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f000 f819 	bl	801250a <UART_WaitOnFlagUntilTimeout>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124de:	2303      	movs	r3, #3
 80124e0:	e00f      	b.n	8012502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2220      	movs	r2, #32
 80124e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2220      	movs	r2, #32
 80124ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012500:	2300      	movs	r3, #0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b09c      	sub	sp, #112	; 0x70
 801250e:	af00      	add	r7, sp, #0
 8012510:	60f8      	str	r0, [r7, #12]
 8012512:	60b9      	str	r1, [r7, #8]
 8012514:	603b      	str	r3, [r7, #0]
 8012516:	4613      	mov	r3, r2
 8012518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801251a:	e0a9      	b.n	8012670 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801251c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012522:	f000 80a5 	beq.w	8012670 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012526:	f7f6 fbf1 	bl	8008d0c <HAL_GetTick>
 801252a:	4602      	mov	r2, r0
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012532:	429a      	cmp	r2, r3
 8012534:	d302      	bcc.n	801253c <UART_WaitOnFlagUntilTimeout+0x32>
 8012536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012538:	2b00      	cmp	r3, #0
 801253a:	d140      	bne.n	80125be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012544:	e853 3f00 	ldrex	r3, [r3]
 8012548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801254c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012550:	667b      	str	r3, [r7, #100]	; 0x64
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801255a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801255c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012562:	e841 2300 	strex	r3, r2, [r1]
 8012566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1e6      	bne.n	801253c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	3308      	adds	r3, #8
 8012574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012578:	e853 3f00 	ldrex	r3, [r3]
 801257c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012580:	f023 0301 	bic.w	r3, r3, #1
 8012584:	663b      	str	r3, [r7, #96]	; 0x60
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	3308      	adds	r3, #8
 801258c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801258e:	64ba      	str	r2, [r7, #72]	; 0x48
 8012590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012596:	e841 2300 	strex	r3, r2, [r1]
 801259a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1e5      	bne.n	801256e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2220      	movs	r2, #32
 80125a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2220      	movs	r2, #32
 80125ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80125ba:	2303      	movs	r3, #3
 80125bc:	e069      	b.n	8012692 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f003 0304 	and.w	r3, r3, #4
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d051      	beq.n	8012670 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	69db      	ldr	r3, [r3, #28]
 80125d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80125da:	d149      	bne.n	8012670 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80125e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ee:	e853 3f00 	ldrex	r3, [r3]
 80125f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80125f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80125fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	461a      	mov	r2, r3
 8012602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012604:	637b      	str	r3, [r7, #52]	; 0x34
 8012606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801260a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801260c:	e841 2300 	strex	r3, r2, [r1]
 8012610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1e6      	bne.n	80125e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	3308      	adds	r3, #8
 801261e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	e853 3f00 	ldrex	r3, [r3]
 8012626:	613b      	str	r3, [r7, #16]
   return(result);
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	f023 0301 	bic.w	r3, r3, #1
 801262e:	66bb      	str	r3, [r7, #104]	; 0x68
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	3308      	adds	r3, #8
 8012636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012638:	623a      	str	r2, [r7, #32]
 801263a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263c:	69f9      	ldr	r1, [r7, #28]
 801263e:	6a3a      	ldr	r2, [r7, #32]
 8012640:	e841 2300 	strex	r3, r2, [r1]
 8012644:	61bb      	str	r3, [r7, #24]
   return(result);
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1e5      	bne.n	8012618 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2220      	movs	r2, #32
 8012650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2220      	movs	r2, #32
 8012658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2220      	movs	r2, #32
 8012660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2200      	movs	r2, #0
 8012668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801266c:	2303      	movs	r3, #3
 801266e:	e010      	b.n	8012692 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	69da      	ldr	r2, [r3, #28]
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	4013      	ands	r3, r2
 801267a:	68ba      	ldr	r2, [r7, #8]
 801267c:	429a      	cmp	r2, r3
 801267e:	bf0c      	ite	eq
 8012680:	2301      	moveq	r3, #1
 8012682:	2300      	movne	r3, #0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	461a      	mov	r2, r3
 8012688:	79fb      	ldrb	r3, [r7, #7]
 801268a:	429a      	cmp	r2, r3
 801268c:	f43f af46 	beq.w	801251c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3770      	adds	r7, #112	; 0x70
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801269c:	b480      	push	{r7}
 801269e:	b0a3      	sub	sp, #140	; 0x8c
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	4613      	mov	r3, r2
 80126a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	68ba      	ldr	r2, [r7, #8]
 80126ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	88fa      	ldrh	r2, [r7, #6]
 80126b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	88fa      	ldrh	r2, [r7, #6]
 80126bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2200      	movs	r2, #0
 80126c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126ce:	d10e      	bne.n	80126ee <UART_Start_Receive_IT+0x52>
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d105      	bne.n	80126e4 <UART_Start_Receive_IT+0x48>
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80126de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80126e2:	e02d      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	22ff      	movs	r2, #255	; 0xff
 80126e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80126ec:	e028      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	689b      	ldr	r3, [r3, #8]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d10d      	bne.n	8012712 <UART_Start_Receive_IT+0x76>
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	691b      	ldr	r3, [r3, #16]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d104      	bne.n	8012708 <UART_Start_Receive_IT+0x6c>
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	22ff      	movs	r2, #255	; 0xff
 8012702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012706:	e01b      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	227f      	movs	r2, #127	; 0x7f
 801270c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012710:	e016      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801271a:	d10d      	bne.n	8012738 <UART_Start_Receive_IT+0x9c>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d104      	bne.n	801272e <UART_Start_Receive_IT+0x92>
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	227f      	movs	r2, #127	; 0x7f
 8012728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801272c:	e008      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	223f      	movs	r2, #63	; 0x3f
 8012732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012736:	e003      	b.n	8012740 <UART_Start_Receive_IT+0xa4>
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2200      	movs	r2, #0
 801273c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2200      	movs	r2, #0
 8012744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2222      	movs	r2, #34	; 0x22
 801274c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	3308      	adds	r3, #8
 8012756:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801275a:	e853 3f00 	ldrex	r3, [r3]
 801275e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012762:	f043 0301 	orr.w	r3, r3, #1
 8012766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	3308      	adds	r3, #8
 8012770:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012774:	673a      	str	r2, [r7, #112]	; 0x70
 8012776:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012778:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801277a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801277c:	e841 2300 	strex	r3, r2, [r1]
 8012780:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1e3      	bne.n	8012750 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801278c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012790:	d153      	bne.n	801283a <UART_Start_Receive_IT+0x19e>
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012798:	88fa      	ldrh	r2, [r7, #6]
 801279a:	429a      	cmp	r2, r3
 801279c:	d34d      	bcc.n	801283a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80127a6:	d107      	bne.n	80127b8 <UART_Start_Receive_IT+0x11c>
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	691b      	ldr	r3, [r3, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d103      	bne.n	80127b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	4a4b      	ldr	r2, [pc, #300]	; (80128e0 <UART_Start_Receive_IT+0x244>)
 80127b4:	671a      	str	r2, [r3, #112]	; 0x70
 80127b6:	e002      	b.n	80127be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	4a4a      	ldr	r2, [pc, #296]	; (80128e4 <UART_Start_Receive_IT+0x248>)
 80127bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2200      	movs	r2, #0
 80127c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d01a      	beq.n	8012804 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d6:	e853 3f00 	ldrex	r3, [r3]
 80127da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80127dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	461a      	mov	r2, r3
 80127ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80127f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80127f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80127f8:	e841 2300 	strex	r3, r2, [r1]
 80127fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80127fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1e4      	bne.n	80127ce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3308      	adds	r3, #8
 801280a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801280e:	e853 3f00 	ldrex	r3, [r3]
 8012812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801281a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	3308      	adds	r3, #8
 8012822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012824:	64ba      	str	r2, [r7, #72]	; 0x48
 8012826:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012828:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801282a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801282c:	e841 2300 	strex	r3, r2, [r1]
 8012830:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1e5      	bne.n	8012804 <UART_Start_Receive_IT+0x168>
 8012838:	e04a      	b.n	80128d0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012842:	d107      	bne.n	8012854 <UART_Start_Receive_IT+0x1b8>
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d103      	bne.n	8012854 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	4a26      	ldr	r2, [pc, #152]	; (80128e8 <UART_Start_Receive_IT+0x24c>)
 8012850:	671a      	str	r2, [r3, #112]	; 0x70
 8012852:	e002      	b.n	801285a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	4a25      	ldr	r2, [pc, #148]	; (80128ec <UART_Start_Receive_IT+0x250>)
 8012858:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2200      	movs	r2, #0
 801285e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	691b      	ldr	r3, [r3, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d019      	beq.n	801289e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012872:	e853 3f00 	ldrex	r3, [r3]
 8012876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801287e:	677b      	str	r3, [r7, #116]	; 0x74
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	461a      	mov	r2, r3
 8012886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012888:	637b      	str	r3, [r7, #52]	; 0x34
 801288a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801288c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801288e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012890:	e841 2300 	strex	r3, r2, [r1]
 8012894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012898:	2b00      	cmp	r3, #0
 801289a:	d1e6      	bne.n	801286a <UART_Start_Receive_IT+0x1ce>
 801289c:	e018      	b.n	80128d0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	e853 3f00 	ldrex	r3, [r3]
 80128aa:	613b      	str	r3, [r7, #16]
   return(result);
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	f043 0320 	orr.w	r3, r3, #32
 80128b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	461a      	mov	r2, r3
 80128ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128bc:	623b      	str	r3, [r7, #32]
 80128be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c0:	69f9      	ldr	r1, [r7, #28]
 80128c2:	6a3a      	ldr	r2, [r7, #32]
 80128c4:	e841 2300 	strex	r3, r2, [r1]
 80128c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1e6      	bne.n	801289e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80128d0:	2300      	movs	r3, #0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	378c      	adds	r7, #140	; 0x8c
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	0801333d 	.word	0x0801333d
 80128e4:	08013045 	.word	0x08013045
 80128e8:	08012ee3 	.word	0x08012ee3
 80128ec:	08012d83 	.word	0x08012d83

080128f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b095      	sub	sp, #84	; 0x54
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012900:	e853 3f00 	ldrex	r3, [r3]
 8012904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801290c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	461a      	mov	r2, r3
 8012914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012916:	643b      	str	r3, [r7, #64]	; 0x40
 8012918:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801291a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801291c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801291e:	e841 2300 	strex	r3, r2, [r1]
 8012922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012926:	2b00      	cmp	r3, #0
 8012928:	d1e6      	bne.n	80128f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	3308      	adds	r3, #8
 8012930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	6a3b      	ldr	r3, [r7, #32]
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	61fb      	str	r3, [r7, #28]
   return(result);
 801293a:	69fa      	ldr	r2, [r7, #28]
 801293c:	4b1e      	ldr	r3, [pc, #120]	; (80129b8 <UART_EndRxTransfer+0xc8>)
 801293e:	4013      	ands	r3, r2
 8012940:	64bb      	str	r3, [r7, #72]	; 0x48
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3308      	adds	r3, #8
 8012948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801294a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801294c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012952:	e841 2300 	strex	r3, r2, [r1]
 8012956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1e5      	bne.n	801292a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012962:	2b01      	cmp	r3, #1
 8012964:	d118      	bne.n	8012998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	e853 3f00 	ldrex	r3, [r3]
 8012972:	60bb      	str	r3, [r7, #8]
   return(result);
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	f023 0310 	bic.w	r3, r3, #16
 801297a:	647b      	str	r3, [r7, #68]	; 0x44
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	461a      	mov	r2, r3
 8012982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012984:	61bb      	str	r3, [r7, #24]
 8012986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012988:	6979      	ldr	r1, [r7, #20]
 801298a:	69ba      	ldr	r2, [r7, #24]
 801298c:	e841 2300 	strex	r3, r2, [r1]
 8012990:	613b      	str	r3, [r7, #16]
   return(result);
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d1e6      	bne.n	8012966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2220      	movs	r2, #32
 801299c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2200      	movs	r2, #0
 80129a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80129ac:	bf00      	nop
 80129ae:	3754      	adds	r7, #84	; 0x54
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	effffffe 	.word	0xeffffffe

080129bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f7fe ff2a 	bl	8011834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129e0:	bf00      	nop
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b08f      	sub	sp, #60	; 0x3c
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129f6:	2b21      	cmp	r3, #33	; 0x21
 80129f8:	d14c      	bne.n	8012a94 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d132      	bne.n	8012a6c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a0c:	6a3b      	ldr	r3, [r7, #32]
 8012a0e:	e853 3f00 	ldrex	r3, [r3]
 8012a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	461a      	mov	r2, r3
 8012a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a2c:	e841 2300 	strex	r3, r2, [r1]
 8012a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1e6      	bne.n	8012a06 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	e853 3f00 	ldrex	r3, [r3]
 8012a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	461a      	mov	r2, r3
 8012a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a56:	61bb      	str	r3, [r7, #24]
 8012a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a5a:	6979      	ldr	r1, [r7, #20]
 8012a5c:	69ba      	ldr	r2, [r7, #24]
 8012a5e:	e841 2300 	strex	r3, r2, [r1]
 8012a62:	613b      	str	r3, [r7, #16]
   return(result);
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1e6      	bne.n	8012a38 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012a6a:	e013      	b.n	8012a94 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a70:	781a      	ldrb	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a7c:	1c5a      	adds	r2, r3, #1
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	3b01      	subs	r3, #1
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8012a94:	bf00      	nop
 8012a96:	373c      	adds	r7, #60	; 0x3c
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b091      	sub	sp, #68	; 0x44
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aae:	2b21      	cmp	r3, #33	; 0x21
 8012ab0:	d151      	bne.n	8012b56 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d132      	bne.n	8012b24 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	e853 3f00 	ldrex	r3, [r3]
 8012aca:	623b      	str	r3, [r7, #32]
   return(result);
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	461a      	mov	r2, r3
 8012ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012adc:	633b      	str	r3, [r7, #48]	; 0x30
 8012ade:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ae4:	e841 2300 	strex	r3, r2, [r1]
 8012ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d1e6      	bne.n	8012abe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	e853 3f00 	ldrex	r3, [r3]
 8012afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b04:	637b      	str	r3, [r7, #52]	; 0x34
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0e:	61fb      	str	r3, [r7, #28]
 8012b10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b12:	69b9      	ldr	r1, [r7, #24]
 8012b14:	69fa      	ldr	r2, [r7, #28]
 8012b16:	e841 2300 	strex	r3, r2, [r1]
 8012b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1e6      	bne.n	8012af0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012b22:	e018      	b.n	8012b56 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b28:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b38:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b3e:	1c9a      	adds	r2, r3, #2
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8012b56:	bf00      	nop
 8012b58:	3744      	adds	r7, #68	; 0x44
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012b62:	b480      	push	{r7}
 8012b64:	b091      	sub	sp, #68	; 0x44
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b70:	2b21      	cmp	r3, #33	; 0x21
 8012b72:	d160      	bne.n	8012c36 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012b7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012b7c:	e057      	b.n	8012c2e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d133      	bne.n	8012bf2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	3308      	adds	r3, #8
 8012b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b94:	e853 3f00 	ldrex	r3, [r3]
 8012b98:	623b      	str	r3, [r7, #32]
   return(result);
 8012b9a:	6a3b      	ldr	r3, [r7, #32]
 8012b9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	3308      	adds	r3, #8
 8012ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012baa:	633a      	str	r2, [r7, #48]	; 0x30
 8012bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bb2:	e841 2300 	strex	r3, r2, [r1]
 8012bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1e5      	bne.n	8012b8a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	e853 3f00 	ldrex	r3, [r3]
 8012bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bdc:	61fb      	str	r3, [r7, #28]
 8012bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be0:	69b9      	ldr	r1, [r7, #24]
 8012be2:	69fa      	ldr	r2, [r7, #28]
 8012be4:	e841 2300 	strex	r3, r2, [r1]
 8012be8:	617b      	str	r3, [r7, #20]
   return(result);
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d1e6      	bne.n	8012bbe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012bf0:	e021      	b.n	8012c36 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	69db      	ldr	r3, [r3, #28]
 8012bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d013      	beq.n	8012c28 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c10:	1c5a      	adds	r2, r3, #1
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012c28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1a4      	bne.n	8012b7e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012c34:	e7ff      	b.n	8012c36 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8012c36:	bf00      	nop
 8012c38:	3744      	adds	r7, #68	; 0x44
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr

08012c42 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012c42:	b480      	push	{r7}
 8012c44:	b091      	sub	sp, #68	; 0x44
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c50:	2b21      	cmp	r3, #33	; 0x21
 8012c52:	d165      	bne.n	8012d20 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012c5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012c5c:	e05c      	b.n	8012d18 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d133      	bne.n	8012cd2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3308      	adds	r3, #8
 8012c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c72:	6a3b      	ldr	r3, [r7, #32]
 8012c74:	e853 3f00 	ldrex	r3, [r3]
 8012c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012c80:	637b      	str	r3, [r7, #52]	; 0x34
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3308      	adds	r3, #8
 8012c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c92:	e841 2300 	strex	r3, r2, [r1]
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d1e5      	bne.n	8012c6a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	e853 3f00 	ldrex	r3, [r3]
 8012caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	461a      	mov	r2, r3
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	61bb      	str	r3, [r7, #24]
 8012cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cc0:	6979      	ldr	r1, [r7, #20]
 8012cc2:	69ba      	ldr	r2, [r7, #24]
 8012cc4:	e841 2300 	strex	r3, r2, [r1]
 8012cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1e6      	bne.n	8012c9e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012cd0:	e026      	b.n	8012d20 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	69db      	ldr	r3, [r3, #28]
 8012cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d018      	beq.n	8012d12 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ce4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce8:	881b      	ldrh	r3, [r3, #0]
 8012cea:	461a      	mov	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012cf4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cfa:	1c9a      	adds	r2, r3, #2
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012d12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d14:	3b01      	subs	r3, #1
 8012d16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d19f      	bne.n	8012c5e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012d1e:	e7ff      	b.n	8012d20 <UART_TxISR_16BIT_FIFOEN+0xde>
 8012d20:	bf00      	nop
 8012d22:	3744      	adds	r7, #68	; 0x44
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b088      	sub	sp, #32
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	e853 3f00 	ldrex	r3, [r3]
 8012d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d48:	61fb      	str	r3, [r7, #28]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	461a      	mov	r2, r3
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	61bb      	str	r3, [r7, #24]
 8012d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d56:	6979      	ldr	r1, [r7, #20]
 8012d58:	69ba      	ldr	r2, [r7, #24]
 8012d5a:	e841 2300 	strex	r3, r2, [r1]
 8012d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d1e6      	bne.n	8012d34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2220      	movs	r2, #32
 8012d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2200      	movs	r2, #0
 8012d72:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7fe fd53 	bl	8011820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012d7a:	bf00      	nop
 8012d7c:	3720      	adds	r7, #32
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}

08012d82 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b096      	sub	sp, #88	; 0x58
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d9a:	2b22      	cmp	r3, #34	; 0x22
 8012d9c:	f040 8095 	bne.w	8012eca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012daa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012dae:	b2d9      	uxtb	r1, r3
 8012db0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012db4:	b2da      	uxtb	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dba:	400a      	ands	r2, r1
 8012dbc:	b2d2      	uxtb	r2, r2
 8012dbe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	3b01      	subs	r3, #1
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d178      	bne.n	8012eda <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df0:	e853 3f00 	ldrex	r3, [r3]
 8012df4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	461a      	mov	r2, r3
 8012e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e06:	647b      	str	r3, [r7, #68]	; 0x44
 8012e08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e0e:	e841 2300 	strex	r3, r2, [r1]
 8012e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d1e6      	bne.n	8012de8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	3308      	adds	r3, #8
 8012e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	e853 3f00 	ldrex	r3, [r3]
 8012e28:	623b      	str	r3, [r7, #32]
   return(result);
 8012e2a:	6a3b      	ldr	r3, [r7, #32]
 8012e2c:	f023 0301 	bic.w	r3, r3, #1
 8012e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	3308      	adds	r3, #8
 8012e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e3a:	633a      	str	r2, [r7, #48]	; 0x30
 8012e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e42:	e841 2300 	strex	r3, r2, [r1]
 8012e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1e5      	bne.n	8012e1a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2220      	movs	r2, #32
 8012e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d12e      	bne.n	8012ec2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	e853 3f00 	ldrex	r3, [r3]
 8012e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f023 0310 	bic.w	r3, r3, #16
 8012e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	461a      	mov	r2, r3
 8012e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e88:	61fb      	str	r3, [r7, #28]
 8012e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e8c:	69b9      	ldr	r1, [r7, #24]
 8012e8e:	69fa      	ldr	r2, [r7, #28]
 8012e90:	e841 2300 	strex	r3, r2, [r1]
 8012e94:	617b      	str	r3, [r7, #20]
   return(result);
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1e6      	bne.n	8012e6a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	69db      	ldr	r3, [r3, #28]
 8012ea2:	f003 0310 	and.w	r3, r3, #16
 8012ea6:	2b10      	cmp	r3, #16
 8012ea8:	d103      	bne.n	8012eb2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	2210      	movs	r2, #16
 8012eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012eb8:	4619      	mov	r1, r3
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7fe fcc4 	bl	8011848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ec0:	e00b      	b.n	8012eda <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7f5 fd70 	bl	80089a8 <HAL_UART_RxCpltCallback>
}
 8012ec8:	e007      	b.n	8012eda <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	699a      	ldr	r2, [r3, #24]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	f042 0208 	orr.w	r2, r2, #8
 8012ed8:	619a      	str	r2, [r3, #24]
}
 8012eda:	bf00      	nop
 8012edc:	3758      	adds	r7, #88	; 0x58
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b096      	sub	sp, #88	; 0x58
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ef0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012efa:	2b22      	cmp	r3, #34	; 0x22
 8012efc:	f040 8095 	bne.w	801302a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f06:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f0e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8012f10:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012f14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012f18:	4013      	ands	r3, r2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f24:	1c9a      	adds	r2, r3, #2
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	3b01      	subs	r3, #1
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d178      	bne.n	801303a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f50:	e853 3f00 	ldrex	r3, [r3]
 8012f54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	461a      	mov	r2, r3
 8012f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f66:	643b      	str	r3, [r7, #64]	; 0x40
 8012f68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f6e:	e841 2300 	strex	r3, r2, [r1]
 8012f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d1e6      	bne.n	8012f48 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	3308      	adds	r3, #8
 8012f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f82:	6a3b      	ldr	r3, [r7, #32]
 8012f84:	e853 3f00 	ldrex	r3, [r3]
 8012f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	f023 0301 	bic.w	r3, r3, #1
 8012f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	3308      	adds	r3, #8
 8012f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fa2:	e841 2300 	strex	r3, r2, [r1]
 8012fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1e5      	bne.n	8012f7a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2220      	movs	r2, #32
 8012fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d12e      	bne.n	8013022 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	e853 3f00 	ldrex	r3, [r3]
 8012fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	f023 0310 	bic.w	r3, r3, #16
 8012fde:	647b      	str	r3, [r7, #68]	; 0x44
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe8:	61bb      	str	r3, [r7, #24]
 8012fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fec:	6979      	ldr	r1, [r7, #20]
 8012fee:	69ba      	ldr	r2, [r7, #24]
 8012ff0:	e841 2300 	strex	r3, r2, [r1]
 8012ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1e6      	bne.n	8012fca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	69db      	ldr	r3, [r3, #28]
 8013002:	f003 0310 	and.w	r3, r3, #16
 8013006:	2b10      	cmp	r3, #16
 8013008:	d103      	bne.n	8013012 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2210      	movs	r2, #16
 8013010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013018:	4619      	mov	r1, r3
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f7fe fc14 	bl	8011848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013020:	e00b      	b.n	801303a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7f5 fcc0 	bl	80089a8 <HAL_UART_RxCpltCallback>
}
 8013028:	e007      	b.n	801303a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	699a      	ldr	r2, [r3, #24]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f042 0208 	orr.w	r2, r2, #8
 8013038:	619a      	str	r2, [r3, #24]
}
 801303a:	bf00      	nop
 801303c:	3758      	adds	r7, #88	; 0x58
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
	...

08013044 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b0a6      	sub	sp, #152	; 0x98
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013052:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	69db      	ldr	r3, [r3, #28]
 801305c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	689b      	ldr	r3, [r3, #8]
 8013070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801307a:	2b22      	cmp	r3, #34	; 0x22
 801307c:	f040 814d 	bne.w	801331a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013086:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801308a:	e0f4      	b.n	8013276 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013092:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013096:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801309a:	b2d9      	uxtb	r1, r3
 801309c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80130a0:	b2da      	uxtb	r2, r3
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130a6:	400a      	ands	r2, r1
 80130a8:	b2d2      	uxtb	r2, r2
 80130aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130b0:	1c5a      	adds	r2, r3, #1
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80130bc:	b29b      	uxth	r3, r3
 80130be:	3b01      	subs	r3, #1
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	69db      	ldr	r3, [r3, #28]
 80130ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80130d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130d6:	f003 0307 	and.w	r3, r3, #7
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d053      	beq.n	8013186 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80130de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d011      	beq.n	801310e <UART_RxISR_8BIT_FIFOEN+0xca>
 80130ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80130ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00b      	beq.n	801310e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2201      	movs	r2, #1
 80130fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013104:	f043 0201 	orr.w	r2, r3, #1
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801310e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d011      	beq.n	801313e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801311a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801311e:	f003 0301 	and.w	r3, r3, #1
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00b      	beq.n	801313e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2202      	movs	r2, #2
 801312c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013134:	f043 0204 	orr.w	r2, r3, #4
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801313e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013142:	f003 0304 	and.w	r3, r3, #4
 8013146:	2b00      	cmp	r3, #0
 8013148:	d011      	beq.n	801316e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801314a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801314e:	f003 0301 	and.w	r3, r3, #1
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00b      	beq.n	801316e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2204      	movs	r2, #4
 801315c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013164:	f043 0202 	orr.w	r2, r3, #2
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013174:	2b00      	cmp	r3, #0
 8013176:	d006      	beq.n	8013186 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7fe fb5b 	bl	8011834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2200      	movs	r2, #0
 8013182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801318c:	b29b      	uxth	r3, r3
 801318e:	2b00      	cmp	r3, #0
 8013190:	d171      	bne.n	8013276 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801319a:	e853 3f00 	ldrex	r3, [r3]
 801319e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80131a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80131a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	461a      	mov	r2, r3
 80131b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80131b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80131b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80131ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80131bc:	e841 2300 	strex	r3, r2, [r1]
 80131c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80131c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d1e4      	bne.n	8013192 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	3308      	adds	r3, #8
 80131ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131d2:	e853 3f00 	ldrex	r3, [r3]
 80131d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80131d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80131da:	4b56      	ldr	r3, [pc, #344]	; (8013334 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80131dc:	4013      	ands	r3, r2
 80131de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	3308      	adds	r3, #8
 80131e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80131e8:	657a      	str	r2, [r7, #84]	; 0x54
 80131ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131f0:	e841 2300 	strex	r3, r2, [r1]
 80131f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80131f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d1e5      	bne.n	80131c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2220      	movs	r2, #32
 8013200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801320e:	2b01      	cmp	r3, #1
 8013210:	d12e      	bne.n	8013270 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013220:	e853 3f00 	ldrex	r3, [r3]
 8013224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013228:	f023 0310 	bic.w	r3, r3, #16
 801322c:	67bb      	str	r3, [r7, #120]	; 0x78
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	461a      	mov	r2, r3
 8013234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013236:	643b      	str	r3, [r7, #64]	; 0x40
 8013238:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801323a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801323c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801323e:	e841 2300 	strex	r3, r2, [r1]
 8013242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013246:	2b00      	cmp	r3, #0
 8013248:	d1e6      	bne.n	8013218 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	69db      	ldr	r3, [r3, #28]
 8013250:	f003 0310 	and.w	r3, r3, #16
 8013254:	2b10      	cmp	r3, #16
 8013256:	d103      	bne.n	8013260 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2210      	movs	r2, #16
 801325e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013266:	4619      	mov	r1, r3
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7fe faed 	bl	8011848 <HAL_UARTEx_RxEventCallback>
 801326e:	e002      	b.n	8013276 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7f5 fb99 	bl	80089a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013276:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <UART_RxISR_8BIT_FIFOEN+0x248>
 801327e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013282:	f003 0320 	and.w	r3, r3, #32
 8013286:	2b00      	cmp	r3, #0
 8013288:	f47f af00 	bne.w	801308c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013292:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013296:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801329a:	2b00      	cmp	r3, #0
 801329c:	d045      	beq.n	801332a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80132a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d23e      	bcs.n	801332a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3308      	adds	r3, #8
 80132b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132b4:	6a3b      	ldr	r3, [r7, #32]
 80132b6:	e853 3f00 	ldrex	r3, [r3]
 80132ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80132c2:	673b      	str	r3, [r7, #112]	; 0x70
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	3308      	adds	r3, #8
 80132ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80132ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80132d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132d4:	e841 2300 	strex	r3, r2, [r1]
 80132d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80132da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1e5      	bne.n	80132ac <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4a15      	ldr	r2, [pc, #84]	; (8013338 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80132e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	e853 3f00 	ldrex	r3, [r3]
 80132f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f043 0320 	orr.w	r3, r3, #32
 80132fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	461a      	mov	r2, r3
 8013302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013304:	61bb      	str	r3, [r7, #24]
 8013306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013308:	6979      	ldr	r1, [r7, #20]
 801330a:	69ba      	ldr	r2, [r7, #24]
 801330c:	e841 2300 	strex	r3, r2, [r1]
 8013310:	613b      	str	r3, [r7, #16]
   return(result);
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1e6      	bne.n	80132e6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013318:	e007      	b.n	801332a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	699a      	ldr	r2, [r3, #24]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f042 0208 	orr.w	r2, r2, #8
 8013328:	619a      	str	r2, [r3, #24]
}
 801332a:	bf00      	nop
 801332c:	3798      	adds	r7, #152	; 0x98
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	effffffe 	.word	0xeffffffe
 8013338:	08012d83 	.word	0x08012d83

0801333c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b0a8      	sub	sp, #160	; 0xa0
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801334a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	69db      	ldr	r3, [r3, #28]
 8013354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013372:	2b22      	cmp	r3, #34	; 0x22
 8013374:	f040 8151 	bne.w	801361a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801337e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013382:	e0f8      	b.n	8013576 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8013396:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801339a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801339e:	4013      	ands	r3, r2
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80133a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133ac:	1c9a      	adds	r2, r3, #2
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	3b01      	subs	r3, #1
 80133bc:	b29a      	uxth	r2, r3
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	69db      	ldr	r3, [r3, #28]
 80133ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80133ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80133d2:	f003 0307 	and.w	r3, r3, #7
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d053      	beq.n	8013482 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80133da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80133de:	f003 0301 	and.w	r3, r3, #1
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d011      	beq.n	801340a <UART_RxISR_16BIT_FIFOEN+0xce>
 80133e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80133ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00b      	beq.n	801340a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2201      	movs	r2, #1
 80133f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013400:	f043 0201 	orr.w	r2, r3, #1
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801340a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801340e:	f003 0302 	and.w	r3, r3, #2
 8013412:	2b00      	cmp	r3, #0
 8013414:	d011      	beq.n	801343a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8013416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801341a:	f003 0301 	and.w	r3, r3, #1
 801341e:	2b00      	cmp	r3, #0
 8013420:	d00b      	beq.n	801343a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2202      	movs	r2, #2
 8013428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013430:	f043 0204 	orr.w	r2, r3, #4
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801343a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801343e:	f003 0304 	and.w	r3, r3, #4
 8013442:	2b00      	cmp	r3, #0
 8013444:	d011      	beq.n	801346a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8013446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801344a:	f003 0301 	and.w	r3, r3, #1
 801344e:	2b00      	cmp	r3, #0
 8013450:	d00b      	beq.n	801346a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2204      	movs	r2, #4
 8013458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013460:	f043 0202 	orr.w	r2, r3, #2
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013470:	2b00      	cmp	r3, #0
 8013472:	d006      	beq.n	8013482 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7fe f9dd 	bl	8011834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2200      	movs	r2, #0
 801347e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013488:	b29b      	uxth	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d173      	bne.n	8013576 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013496:	e853 3f00 	ldrex	r3, [r3]
 801349a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801349c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801349e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80134a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80134b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80134b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80134b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134b8:	e841 2300 	strex	r3, r2, [r1]
 80134bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80134be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1e4      	bne.n	801348e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	3308      	adds	r3, #8
 80134ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134ce:	e853 3f00 	ldrex	r3, [r3]
 80134d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80134d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134d6:	4b57      	ldr	r3, [pc, #348]	; (8013634 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80134d8:	4013      	ands	r3, r2
 80134da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	3308      	adds	r3, #8
 80134e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80134e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80134ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80134ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80134f0:	e841 2300 	strex	r3, r2, [r1]
 80134f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80134f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d1e3      	bne.n	80134c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2220      	movs	r2, #32
 8013500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350e:	2b01      	cmp	r3, #1
 8013510:	d12e      	bne.n	8013570 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013520:	e853 3f00 	ldrex	r3, [r3]
 8013524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013528:	f023 0310 	bic.w	r3, r3, #16
 801352c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	461a      	mov	r2, r3
 8013534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013536:	647b      	str	r3, [r7, #68]	; 0x44
 8013538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801353a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801353c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801353e:	e841 2300 	strex	r3, r2, [r1]
 8013542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1e6      	bne.n	8013518 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	69db      	ldr	r3, [r3, #28]
 8013550:	f003 0310 	and.w	r3, r3, #16
 8013554:	2b10      	cmp	r3, #16
 8013556:	d103      	bne.n	8013560 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	2210      	movs	r2, #16
 801355e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013566:	4619      	mov	r1, r3
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7fe f96d 	bl	8011848 <HAL_UARTEx_RxEventCallback>
 801356e:	e002      	b.n	8013576 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7f5 fa19 	bl	80089a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013576:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801357a:	2b00      	cmp	r3, #0
 801357c:	d006      	beq.n	801358c <UART_RxISR_16BIT_FIFOEN+0x250>
 801357e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013582:	f003 0320 	and.w	r3, r3, #32
 8013586:	2b00      	cmp	r3, #0
 8013588:	f47f aefc 	bne.w	8013384 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013592:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013596:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801359a:	2b00      	cmp	r3, #0
 801359c:	d045      	beq.n	801362a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80135a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d23e      	bcs.n	801362a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	3308      	adds	r3, #8
 80135b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b6:	e853 3f00 	ldrex	r3, [r3]
 80135ba:	623b      	str	r3, [r7, #32]
   return(result);
 80135bc:	6a3b      	ldr	r3, [r7, #32]
 80135be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80135c2:	677b      	str	r3, [r7, #116]	; 0x74
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	3308      	adds	r3, #8
 80135ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80135cc:	633a      	str	r2, [r7, #48]	; 0x30
 80135ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135d4:	e841 2300 	strex	r3, r2, [r1]
 80135d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80135da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1e5      	bne.n	80135ac <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	4a15      	ldr	r2, [pc, #84]	; (8013638 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80135e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	e853 3f00 	ldrex	r3, [r3]
 80135f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f043 0320 	orr.w	r3, r3, #32
 80135fa:	673b      	str	r3, [r7, #112]	; 0x70
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	461a      	mov	r2, r3
 8013602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013604:	61fb      	str	r3, [r7, #28]
 8013606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013608:	69b9      	ldr	r1, [r7, #24]
 801360a:	69fa      	ldr	r2, [r7, #28]
 801360c:	e841 2300 	strex	r3, r2, [r1]
 8013610:	617b      	str	r3, [r7, #20]
   return(result);
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1e6      	bne.n	80135e6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013618:	e007      	b.n	801362a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	699a      	ldr	r2, [r3, #24]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f042 0208 	orr.w	r2, r2, #8
 8013628:	619a      	str	r2, [r3, #24]
}
 801362a:	bf00      	nop
 801362c:	37a0      	adds	r7, #160	; 0xa0
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	effffffe 	.word	0xeffffffe
 8013638:	08012ee3 	.word	0x08012ee3

0801363c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013644:	bf00      	nop
 8013646:	370c      	adds	r7, #12
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr

08013650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013658:	bf00      	nop
 801365a:	370c      	adds	r7, #12
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801366c:	bf00      	nop
 801366e:	370c      	adds	r7, #12
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr

08013678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013678:	b480      	push	{r7}
 801367a:	b085      	sub	sp, #20
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013686:	2b01      	cmp	r3, #1
 8013688:	d101      	bne.n	801368e <HAL_UARTEx_DisableFifoMode+0x16>
 801368a:	2302      	movs	r3, #2
 801368c:	e027      	b.n	80136de <HAL_UARTEx_DisableFifoMode+0x66>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2201      	movs	r2, #1
 8013692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2224      	movs	r2, #36	; 0x24
 801369a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	f022 0201 	bic.w	r2, r2, #1
 80136b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80136bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2200      	movs	r2, #0
 80136c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	68fa      	ldr	r2, [r7, #12]
 80136ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2220      	movs	r2, #32
 80136d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3714      	adds	r7, #20
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b084      	sub	sp, #16
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
 80136f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d101      	bne.n	8013702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80136fe:	2302      	movs	r3, #2
 8013700:	e02d      	b.n	801375e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2201      	movs	r2, #1
 8013706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2224      	movs	r2, #36	; 0x24
 801370e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f022 0201 	bic.w	r2, r2, #1
 8013728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	689b      	ldr	r3, [r3, #8]
 8013730:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	683a      	ldr	r2, [r7, #0]
 801373a:	430a      	orrs	r2, r1
 801373c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f000 f850 	bl	80137e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	68fa      	ldr	r2, [r7, #12]
 801374a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2220      	movs	r2, #32
 8013750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013766:	b580      	push	{r7, lr}
 8013768:	b084      	sub	sp, #16
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
 801376e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013776:	2b01      	cmp	r3, #1
 8013778:	d101      	bne.n	801377e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801377a:	2302      	movs	r3, #2
 801377c:	e02d      	b.n	80137da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2224      	movs	r2, #36	; 0x24
 801378a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	f022 0201 	bic.w	r2, r2, #1
 80137a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	683a      	ldr	r2, [r7, #0]
 80137b6:	430a      	orrs	r2, r1
 80137b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f000 f812 	bl	80137e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2220      	movs	r2, #32
 80137cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2200      	movs	r2, #0
 80137d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
	...

080137e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d108      	bne.n	8013806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2201      	movs	r2, #1
 80137f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2201      	movs	r2, #1
 8013800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013804:	e031      	b.n	801386a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013806:	2310      	movs	r3, #16
 8013808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801380a:	2310      	movs	r3, #16
 801380c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	689b      	ldr	r3, [r3, #8]
 8013814:	0e5b      	lsrs	r3, r3, #25
 8013816:	b2db      	uxtb	r3, r3
 8013818:	f003 0307 	and.w	r3, r3, #7
 801381c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	0f5b      	lsrs	r3, r3, #29
 8013826:	b2db      	uxtb	r3, r3
 8013828:	f003 0307 	and.w	r3, r3, #7
 801382c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801382e:	7bbb      	ldrb	r3, [r7, #14]
 8013830:	7b3a      	ldrb	r2, [r7, #12]
 8013832:	4911      	ldr	r1, [pc, #68]	; (8013878 <UARTEx_SetNbDataToProcess+0x94>)
 8013834:	5c8a      	ldrb	r2, [r1, r2]
 8013836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801383a:	7b3a      	ldrb	r2, [r7, #12]
 801383c:	490f      	ldr	r1, [pc, #60]	; (801387c <UARTEx_SetNbDataToProcess+0x98>)
 801383e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013840:	fb93 f3f2 	sdiv	r3, r3, r2
 8013844:	b29a      	uxth	r2, r3
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801384c:	7bfb      	ldrb	r3, [r7, #15]
 801384e:	7b7a      	ldrb	r2, [r7, #13]
 8013850:	4909      	ldr	r1, [pc, #36]	; (8013878 <UARTEx_SetNbDataToProcess+0x94>)
 8013852:	5c8a      	ldrb	r2, [r1, r2]
 8013854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013858:	7b7a      	ldrb	r2, [r7, #13]
 801385a:	4908      	ldr	r1, [pc, #32]	; (801387c <UARTEx_SetNbDataToProcess+0x98>)
 801385c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801385e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801386a:	bf00      	nop
 801386c:	3714      	adds	r7, #20
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	0801504c 	.word	0x0801504c
 801387c:	08015054 	.word	0x08015054

08013880 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8013880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013882:	2400      	movs	r4, #0
 8013884:	2310      	movs	r3, #16
 8013886:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801388a:	6803      	ldr	r3, [r0, #0]
 801388c:	4615      	mov	r5, r2
 801388e:	699e      	ldr	r6, [r3, #24]
 8013890:	6812      	ldr	r2, [r2, #0]
 8013892:	466b      	mov	r3, sp
 8013894:	e9cd 4400 	strd	r4, r4, [sp]
 8013898:	47b0      	blx	r6
 801389a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801389e:	f003 0306 	and.w	r3, r3, #6
 80138a2:	2b06      	cmp	r3, #6
 80138a4:	bf03      	ittte	eq
 80138a6:	9b00      	ldreq	r3, [sp, #0]
 80138a8:	602b      	streq	r3, [r5, #0]
 80138aa:	2001      	moveq	r0, #1
 80138ac:	4620      	movne	r0, r4
 80138ae:	b004      	add	sp, #16
 80138b0:	bd70      	pop	{r4, r5, r6, pc}

080138b2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80138b2:	9800      	ldr	r0, [sp, #0]
 80138b4:	4290      	cmp	r0, r2
 80138b6:	bf14      	ite	ne
 80138b8:	2001      	movne	r0, #1
 80138ba:	2006      	moveq	r0, #6
 80138bc:	4770      	bx	lr
	...

080138c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80138c0:	b510      	push	{r4, lr}
 80138c2:	4b03      	ldr	r3, [pc, #12]	; (80138d0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80138c4:	6003      	str	r3, [r0, #0]
 80138c6:	4604      	mov	r4, r0
 80138c8:	f000 f8e9 	bl	8013a9e <_ZNSt9type_infoD1Ev>
 80138cc:	4620      	mov	r0, r4
 80138ce:	bd10      	pop	{r4, pc}
 80138d0:	08015094 	.word	0x08015094

080138d4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80138d4:	b510      	push	{r4, lr}
 80138d6:	4604      	mov	r4, r0
 80138d8:	f7ff fff2 	bl	80138c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80138dc:	4620      	mov	r0, r4
 80138de:	2108      	movs	r1, #8
 80138e0:	f000 f842 	bl	8013968 <_ZdlPvj>
 80138e4:	4620      	mov	r0, r4
 80138e6:	bd10      	pop	{r4, pc}

080138e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80138e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ec:	461f      	mov	r7, r3
 80138ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80138f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80138f6:	4598      	cmp	r8, r3
 80138f8:	4606      	mov	r6, r0
 80138fa:	4615      	mov	r5, r2
 80138fc:	d107      	bne.n	801390e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80138fe:	9907      	ldr	r1, [sp, #28]
 8013900:	f000 f8d2 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8013904:	b118      	cbz	r0, 801390e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8013906:	7165      	strb	r5, [r4, #5]
 8013908:	2000      	movs	r0, #0
 801390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801390e:	4639      	mov	r1, r7
 8013910:	4630      	mov	r0, r6
 8013912:	f000 f8c9 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8013916:	2800      	cmp	r0, #0
 8013918:	d0f6      	beq.n	8013908 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801391a:	2301      	movs	r3, #1
 801391c:	f8c4 8000 	str.w	r8, [r4]
 8013920:	7125      	strb	r5, [r4, #4]
 8013922:	71a3      	strb	r3, [r4, #6]
 8013924:	e7f0      	b.n	8013908 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08013926 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8013926:	b538      	push	{r3, r4, r5, lr}
 8013928:	4615      	mov	r5, r2
 801392a:	461c      	mov	r4, r3
 801392c:	f000 f8bc 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8013930:	b120      	cbz	r0, 801393c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8013932:	2308      	movs	r3, #8
 8013934:	60e3      	str	r3, [r4, #12]
 8013936:	2306      	movs	r3, #6
 8013938:	6025      	str	r5, [r4, #0]
 801393a:	7123      	strb	r3, [r4, #4]
 801393c:	bd38      	pop	{r3, r4, r5, pc}

0801393e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801393e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013940:	4605      	mov	r5, r0
 8013942:	460c      	mov	r4, r1
 8013944:	9201      	str	r2, [sp, #4]
 8013946:	461e      	mov	r6, r3
 8013948:	f000 f8ae 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 801394c:	b950      	cbnz	r0, 8013964 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801394e:	2e03      	cmp	r6, #3
 8013950:	d808      	bhi.n	8013964 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	9a01      	ldr	r2, [sp, #4]
 8013956:	695b      	ldr	r3, [r3, #20]
 8013958:	4629      	mov	r1, r5
 801395a:	4620      	mov	r0, r4
 801395c:	b002      	add	sp, #8
 801395e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013962:	4718      	bx	r3
 8013964:	b002      	add	sp, #8
 8013966:	bd70      	pop	{r4, r5, r6, pc}

08013968 <_ZdlPvj>:
 8013968:	f000 b8b6 	b.w	8013ad8 <_ZdlPv>

0801396c <_ZdaPv>:
 801396c:	f000 b8b4 	b.w	8013ad8 <_ZdlPv>

08013970 <_ZdaPvj>:
 8013970:	f7ff bffc 	b.w	801396c <_ZdaPv>

08013974 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8013974:	b510      	push	{r4, lr}
 8013976:	4b03      	ldr	r3, [pc, #12]	; (8013984 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8013978:	6003      	str	r3, [r0, #0]
 801397a:	4604      	mov	r4, r0
 801397c:	f000 f88f 	bl	8013a9e <_ZNSt9type_infoD1Ev>
 8013980:	4620      	mov	r0, r4
 8013982:	bd10      	pop	{r4, pc}
 8013984:	08015114 	.word	0x08015114

08013988 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8013988:	b510      	push	{r4, lr}
 801398a:	4604      	mov	r4, r0
 801398c:	f7ff fff2 	bl	8013974 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 8013990:	4620      	mov	r0, r4
 8013992:	2108      	movs	r1, #8
 8013994:	f7ff ffe8 	bl	8013968 <_ZdlPvj>
 8013998:	4620      	mov	r0, r4
 801399a:	bd10      	pop	{r4, pc}

0801399c <_Znaj>:
 801399c:	f000 b89e 	b.w	8013adc <_Znwj>

080139a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80139a0:	b510      	push	{r4, lr}
 80139a2:	4b03      	ldr	r3, [pc, #12]	; (80139b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80139a4:	6003      	str	r3, [r0, #0]
 80139a6:	4604      	mov	r4, r0
 80139a8:	f7ff ff8a 	bl	80138c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80139ac:	4620      	mov	r0, r4
 80139ae:	bd10      	pop	{r4, pc}
 80139b0:	08015168 	.word	0x08015168

080139b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80139b4:	b510      	push	{r4, lr}
 80139b6:	4604      	mov	r4, r0
 80139b8:	f7ff fff2 	bl	80139a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80139bc:	4620      	mov	r0, r4
 80139be:	210c      	movs	r1, #12
 80139c0:	f7ff ffd2 	bl	8013968 <_ZdlPvj>
 80139c4:	4620      	mov	r0, r4
 80139c6:	bd10      	pop	{r4, pc}

080139c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80139c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139ca:	9f08      	ldr	r7, [sp, #32]
 80139cc:	4297      	cmp	r7, r2
 80139ce:	4605      	mov	r5, r0
 80139d0:	460e      	mov	r6, r1
 80139d2:	4614      	mov	r4, r2
 80139d4:	d00a      	beq.n	80139ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 80139d6:	68a8      	ldr	r0, [r5, #8]
 80139d8:	6802      	ldr	r2, [r0, #0]
 80139da:	9708      	str	r7, [sp, #32]
 80139dc:	6a15      	ldr	r5, [r2, #32]
 80139de:	4631      	mov	r1, r6
 80139e0:	4622      	mov	r2, r4
 80139e2:	46ac      	mov	ip, r5
 80139e4:	b003      	add	sp, #12
 80139e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139ea:	4760      	bx	ip
 80139ec:	4619      	mov	r1, r3
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	f000 f85a 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 80139f4:	9b01      	ldr	r3, [sp, #4]
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d0ed      	beq.n	80139d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80139fa:	2006      	movs	r0, #6
 80139fc:	b003      	add	sp, #12
 80139fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8013a00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a04:	460d      	mov	r5, r1
 8013a06:	4619      	mov	r1, r3
 8013a08:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8013a0c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8013a10:	4681      	mov	r9, r0
 8013a12:	4617      	mov	r7, r2
 8013a14:	4698      	mov	r8, r3
 8013a16:	f000 f847 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8013a1a:	b190      	cbz	r0, 8013a42 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8013a1c:	2d00      	cmp	r5, #0
 8013a1e:	6034      	str	r4, [r6, #0]
 8013a20:	7137      	strb	r7, [r6, #4]
 8013a22:	db09      	blt.n	8013a38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8013a24:	1961      	adds	r1, r4, r5
 8013a26:	458a      	cmp	sl, r1
 8013a28:	bf0c      	ite	eq
 8013a2a:	2106      	moveq	r1, #6
 8013a2c:	2101      	movne	r1, #1
 8013a2e:	71b1      	strb	r1, [r6, #6]
 8013a30:	2000      	movs	r0, #0
 8013a32:	b001      	add	sp, #4
 8013a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a38:	3502      	adds	r5, #2
 8013a3a:	d1f9      	bne.n	8013a30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	71b3      	strb	r3, [r6, #6]
 8013a40:	e7f6      	b.n	8013a30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013a42:	4554      	cmp	r4, sl
 8013a44:	d106      	bne.n	8013a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013a46:	4659      	mov	r1, fp
 8013a48:	4648      	mov	r0, r9
 8013a4a:	f000 f82d 	bl	8013aa8 <_ZNKSt9type_infoeqERKS_>
 8013a4e:	b108      	cbz	r0, 8013a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013a50:	7177      	strb	r7, [r6, #5]
 8013a52:	e7ed      	b.n	8013a30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013a54:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8013a58:	6803      	ldr	r3, [r0, #0]
 8013a5a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8013a5e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8013a62:	69dc      	ldr	r4, [r3, #28]
 8013a64:	463a      	mov	r2, r7
 8013a66:	4643      	mov	r3, r8
 8013a68:	4629      	mov	r1, r5
 8013a6a:	46a4      	mov	ip, r4
 8013a6c:	b001      	add	sp, #4
 8013a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a72:	4760      	bx	ip

08013a74 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a78:	4607      	mov	r7, r0
 8013a7a:	460c      	mov	r4, r1
 8013a7c:	4615      	mov	r5, r2
 8013a7e:	461e      	mov	r6, r3
 8013a80:	f7ff ff51 	bl	8013926 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8013a84:	b948      	cbnz	r0, 8013a9a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8013a86:	68b8      	ldr	r0, [r7, #8]
 8013a88:	6803      	ldr	r3, [r0, #0]
 8013a8a:	699f      	ldr	r7, [r3, #24]
 8013a8c:	462a      	mov	r2, r5
 8013a8e:	4633      	mov	r3, r6
 8013a90:	4621      	mov	r1, r4
 8013a92:	46bc      	mov	ip, r7
 8013a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a98:	4760      	bx	ip
 8013a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a9e <_ZNSt9type_infoD1Ev>:
 8013a9e:	4770      	bx	lr

08013aa0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	4770      	bx	lr

08013aa4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	4770      	bx	lr

08013aa8 <_ZNKSt9type_infoeqERKS_>:
 8013aa8:	4281      	cmp	r1, r0
 8013aaa:	b508      	push	{r3, lr}
 8013aac:	d00e      	beq.n	8013acc <_ZNKSt9type_infoeqERKS_+0x24>
 8013aae:	6840      	ldr	r0, [r0, #4]
 8013ab0:	7803      	ldrb	r3, [r0, #0]
 8013ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ab4:	d00c      	beq.n	8013ad0 <_ZNKSt9type_infoeqERKS_+0x28>
 8013ab6:	6849      	ldr	r1, [r1, #4]
 8013ab8:	780b      	ldrb	r3, [r1, #0]
 8013aba:	2b2a      	cmp	r3, #42	; 0x2a
 8013abc:	bf08      	it	eq
 8013abe:	3101      	addeq	r1, #1
 8013ac0:	f7ec fc0e 	bl	80002e0 <strcmp>
 8013ac4:	fab0 f080 	clz	r0, r0
 8013ac8:	0940      	lsrs	r0, r0, #5
 8013aca:	bd08      	pop	{r3, pc}
 8013acc:	2001      	movs	r0, #1
 8013ace:	e7fc      	b.n	8013aca <_ZNKSt9type_infoeqERKS_+0x22>
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	e7fa      	b.n	8013aca <_ZNKSt9type_infoeqERKS_+0x22>

08013ad4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8013ad4:	f7ff bfe8 	b.w	8013aa8 <_ZNKSt9type_infoeqERKS_>

08013ad8 <_ZdlPv>:
 8013ad8:	f000 bd3a 	b.w	8014550 <free>

08013adc <_Znwj>:
 8013adc:	2801      	cmp	r0, #1
 8013ade:	bf38      	it	cc
 8013ae0:	2001      	movcc	r0, #1
 8013ae2:	b510      	push	{r4, lr}
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f000 fd2a 	bl	8014540 <malloc>
 8013aec:	b930      	cbnz	r0, 8013afc <_Znwj+0x20>
 8013aee:	f000 f807 	bl	8013b00 <_ZSt15get_new_handlerv>
 8013af2:	b908      	cbnz	r0, 8013af8 <_Znwj+0x1c>
 8013af4:	f000 fcf3 	bl	80144de <abort>
 8013af8:	4780      	blx	r0
 8013afa:	e7f4      	b.n	8013ae6 <_Znwj+0xa>
 8013afc:	bd10      	pop	{r4, pc}
	...

08013b00 <_ZSt15get_new_handlerv>:
 8013b00:	4b02      	ldr	r3, [pc, #8]	; (8013b0c <_ZSt15get_new_handlerv+0xc>)
 8013b02:	6818      	ldr	r0, [r3, #0]
 8013b04:	f3bf 8f5b 	dmb	ish
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop
 8013b0c:	240465ac 	.word	0x240465ac

08013b10 <exp>:
 8013b10:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8013b12:	ee10 3a90 	vmov	r3, s1
 8013b16:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8013b1a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8013b1e:	18a2      	adds	r2, r4, r2
 8013b20:	2a3e      	cmp	r2, #62	; 0x3e
 8013b22:	ee10 1a10 	vmov	r1, s0
 8013b26:	d922      	bls.n	8013b6e <exp+0x5e>
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	da06      	bge.n	8013b3a <exp+0x2a>
 8013b2c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013b30:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b34:	b004      	add	sp, #16
 8013b36:	bcf0      	pop	{r4, r5, r6, r7}
 8013b38:	4770      	bx	lr
 8013b3a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8013b3e:	f04f 0000 	mov.w	r0, #0
 8013b42:	d913      	bls.n	8013b6c <exp+0x5c>
 8013b44:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8013b48:	bf08      	it	eq
 8013b4a:	4281      	cmpeq	r1, r0
 8013b4c:	f000 80a0 	beq.w	8013c90 <exp+0x180>
 8013b50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013b54:	4294      	cmp	r4, r2
 8013b56:	d0e9      	beq.n	8013b2c <exp+0x1c>
 8013b58:	4283      	cmp	r3, r0
 8013b5a:	da03      	bge.n	8013b64 <exp+0x54>
 8013b5c:	b004      	add	sp, #16
 8013b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8013b60:	f000 b9be 	b.w	8013ee0 <__math_uflow>
 8013b64:	b004      	add	sp, #16
 8013b66:	bcf0      	pop	{r4, r5, r6, r7}
 8013b68:	f000 b9c2 	b.w	8013ef0 <__math_oflow>
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	4950      	ldr	r1, [pc, #320]	; (8013cb0 <exp+0x1a0>)
 8013b70:	ed91 6b02 	vldr	d6, [r1, #8]
 8013b74:	ed91 5b00 	vldr	d5, [r1]
 8013b78:	eeb0 7b46 	vmov.f64	d7, d6
 8013b7c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013b80:	ee17 5a10 	vmov	r5, s14
 8013b84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013b88:	ed91 6b04 	vldr	d6, [r1, #16]
 8013b8c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013b90:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013b94:	ed91 6b06 	vldr	d6, [r1, #24]
 8013b98:	18d8      	adds	r0, r3, r3
 8013b9a:	f100 030f 	add.w	r3, r0, #15
 8013b9e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013ba2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013ba6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8013baa:	ee20 7b00 	vmul.f64	d7, d0, d0
 8013bae:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8013bb2:	ed91 5b08 	vldr	d5, [r1, #32]
 8013bb6:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013bba:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013bbe:	eea4 5b00 	vfma.f64	d5, d4, d0
 8013bc2:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8013bc6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013bca:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013bce:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8013bd2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8013bd6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8013bda:	eea4 5b00 	vfma.f64	d5, d4, d0
 8013bde:	2600      	movs	r6, #0
 8013be0:	19f2      	adds	r2, r6, r7
 8013be2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8013be6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013bea:	2c00      	cmp	r4, #0
 8013bec:	d14b      	bne.n	8013c86 <exp+0x176>
 8013bee:	42b5      	cmp	r5, r6
 8013bf0:	db10      	blt.n	8013c14 <exp+0x104>
 8013bf2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8013bf6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013c98 <exp+0x188>
 8013bfa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8013bfe:	4610      	mov	r0, r2
 8013c00:	ec41 0b10 	vmov	d0, r0, r1
 8013c04:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013c08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c0c:	b004      	add	sp, #16
 8013c0e:	bcf0      	pop	{r4, r5, r6, r7}
 8013c10:	f000 b9a6 	b.w	8013f60 <__math_check_oflow>
 8013c14:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013c18:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8013c1c:	4610      	mov	r0, r2
 8013c1e:	ec41 0b17 	vmov	d7, r0, r1
 8013c22:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013c26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013c2a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013c2e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013ca0 <exp+0x190>
 8013c3a:	d51e      	bpl.n	8013c7a <exp+0x16a>
 8013c3c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8013c40:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013c44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013c48:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013c4c:	ee36 5b05 	vadd.f64	d5, d6, d5
 8013c50:	ee35 5b07 	vadd.f64	d5, d5, d7
 8013c54:	ee35 5b03 	vadd.f64	d5, d5, d3
 8013c58:	ee35 5b44 	vsub.f64	d5, d5, d4
 8013c5c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8013c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c64:	d101      	bne.n	8013c6a <exp+0x15a>
 8013c66:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8013ca8 <exp+0x198>
 8013c6a:	ed8d 0b00 	vstr	d0, [sp]
 8013c6e:	ed9d 7b00 	vldr	d7, [sp]
 8013c72:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013c76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013c7a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8013c7e:	b004      	add	sp, #16
 8013c80:	bcf0      	pop	{r4, r5, r6, r7}
 8013c82:	f000 b964 	b.w	8013f4e <__math_check_uflow>
 8013c86:	ec43 2b10 	vmov	d0, r2, r3
 8013c8a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013c8e:	e751      	b.n	8013b34 <exp+0x24>
 8013c90:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013ca8 <exp+0x198>
 8013c94:	e74e      	b.n	8013b34 <exp+0x24>
 8013c96:	bf00      	nop
 8013c98:	00000000 	.word	0x00000000
 8013c9c:	7f000000 	.word	0x7f000000
 8013ca0:	00000000 	.word	0x00000000
 8013ca4:	00100000 	.word	0x00100000
	...
 8013cb0:	080151a8 	.word	0x080151a8
 8013cb4:	00000000 	.word	0x00000000

08013cb8 <log>:
 8013cb8:	b470      	push	{r4, r5, r6}
 8013cba:	ee10 1a90 	vmov	r1, s1
 8013cbe:	ee10 2a10 	vmov	r2, s0
 8013cc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013cc6:	4294      	cmp	r4, r2
 8013cc8:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8013ccc:	4c72      	ldr	r4, [pc, #456]	; (8013e98 <log+0x1e0>)
 8013cce:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8013cd2:	eb74 0000 	sbcs.w	r0, r4, r0
 8013cd6:	ed2d 8b02 	vpush	{d8}
 8013cda:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8013cde:	d35c      	bcc.n	8013d9a <log+0xe2>
 8013ce0:	4b6e      	ldr	r3, [pc, #440]	; (8013e9c <log+0x1e4>)
 8013ce2:	4299      	cmp	r1, r3
 8013ce4:	bf08      	it	eq
 8013ce6:	2a00      	cmpeq	r2, #0
 8013ce8:	f000 80c6 	beq.w	8013e78 <log+0x1c0>
 8013cec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013cf0:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013cf4:	4b6a      	ldr	r3, [pc, #424]	; (8013ea0 <log+0x1e8>)
 8013cf6:	ee20 2b00 	vmul.f64	d2, d0, d0
 8013cfa:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8013cfe:	ee20 4b02 	vmul.f64	d4, d0, d2
 8013d02:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8013d06:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013d0a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8013d0e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8013d12:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013d16:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8013d1a:	eea5 6b00 	vfma.f64	d6, d5, d0
 8013d1e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8013d22:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8013d26:	eea5 6b02 	vfma.f64	d6, d5, d2
 8013d2a:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8013d2e:	eea3 5b00 	vfma.f64	d5, d3, d0
 8013d32:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8013d36:	eea3 5b02 	vfma.f64	d5, d3, d2
 8013d3a:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8013d3e:	eeb0 2b40 	vmov.f64	d2, d0
 8013d42:	eea3 5b04 	vfma.f64	d5, d3, d4
 8013d46:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8013d4a:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013d4e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013d52:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8013e80 <log+0x1c8>
 8013d56:	eeb0 1b47 	vmov.f64	d1, d7
 8013d5a:	eeb0 5b40 	vmov.f64	d5, d0
 8013d5e:	eea0 5b06 	vfma.f64	d5, d0, d6
 8013d62:	eea0 5b46 	vfms.f64	d5, d0, d6
 8013d66:	ee30 8b45 	vsub.f64	d8, d0, d5
 8013d6a:	ee25 7b05 	vmul.f64	d7, d5, d5
 8013d6e:	ee30 5b05 	vadd.f64	d5, d0, d5
 8013d72:	eea7 2b03 	vfma.f64	d2, d7, d3
 8013d76:	ee30 6b42 	vsub.f64	d6, d0, d2
 8013d7a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013d7e:	ee23 3b08 	vmul.f64	d3, d3, d8
 8013d82:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013d86:	eeb0 0b46 	vmov.f64	d0, d6
 8013d8a:	eea1 0b04 	vfma.f64	d0, d1, d4
 8013d8e:	ee32 0b00 	vadd.f64	d0, d2, d0
 8013d92:	ecbd 8b02 	vpop	{d8}
 8013d96:	bc70      	pop	{r4, r5, r6}
 8013d98:	4770      	bx	lr
 8013d9a:	f1a3 0410 	sub.w	r4, r3, #16
 8013d9e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8013da2:	4284      	cmp	r4, r0
 8013da4:	d923      	bls.n	8013dee <log+0x136>
 8013da6:	1894      	adds	r4, r2, r2
 8013da8:	eb41 0001 	adc.w	r0, r1, r1
 8013dac:	4320      	orrs	r0, r4
 8013dae:	d105      	bne.n	8013dbc <log+0x104>
 8013db0:	ecbd 8b02 	vpop	{d8}
 8013db4:	2001      	movs	r0, #1
 8013db6:	bc70      	pop	{r4, r5, r6}
 8013db8:	f000 b8a2 	b.w	8013f00 <__math_divzero>
 8013dbc:	4839      	ldr	r0, [pc, #228]	; (8013ea4 <log+0x1ec>)
 8013dbe:	4281      	cmp	r1, r0
 8013dc0:	bf08      	it	eq
 8013dc2:	2a00      	cmpeq	r2, #0
 8013dc4:	d0e5      	beq.n	8013d92 <log+0xda>
 8013dc6:	041a      	lsls	r2, r3, #16
 8013dc8:	d404      	bmi.n	8013dd4 <log+0x11c>
 8013dca:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8013dce:	ea32 0303 	bics.w	r3, r2, r3
 8013dd2:	d104      	bne.n	8013dde <log+0x126>
 8013dd4:	ecbd 8b02 	vpop	{d8}
 8013dd8:	bc70      	pop	{r4, r5, r6}
 8013dda:	f000 b8a9 	b.w	8013f30 <__math_invalid>
 8013dde:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8013e88 <log+0x1d0>
 8013de2:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013de6:	ec53 2b17 	vmov	r2, r3, d7
 8013dea:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8013dee:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8013df2:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8013df6:	0d1e      	lsrs	r6, r3, #20
 8013df8:	1e14      	subs	r4, r2, #0
 8013dfa:	4a29      	ldr	r2, [pc, #164]	; (8013ea0 <log+0x1e8>)
 8013dfc:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8013e00:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8013e04:	0536      	lsls	r6, r6, #20
 8013e06:	1b8d      	subs	r5, r1, r6
 8013e08:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8013e0c:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8013e10:	ec45 4b16 	vmov	d6, r4, r5
 8013e14:	151b      	asrs	r3, r3, #20
 8013e16:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013e1a:	ee07 3a90 	vmov	s15, r3
 8013e1e:	ee25 2b05 	vmul.f64	d2, d5, d5
 8013e22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8013e26:	ed92 4b00 	vldr	d4, [r2]
 8013e2a:	ee25 1b02 	vmul.f64	d1, d5, d2
 8013e2e:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8013e32:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013e36:	ee35 4b07 	vadd.f64	d4, d5, d7
 8013e3a:	ee37 0b44 	vsub.f64	d0, d7, d4
 8013e3e:	ed92 7b02 	vldr	d7, [r2, #8]
 8013e42:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013e46:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013e4a:	ed92 7b04 	vldr	d7, [r2, #16]
 8013e4e:	ed92 6b08 	vldr	d6, [r2, #32]
 8013e52:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013e56:	ed92 7b06 	vldr	d7, [r2, #24]
 8013e5a:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8013e5e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013e62:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8013e66:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013e6a:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013e6e:	eea1 0b07 	vfma.f64	d0, d1, d7
 8013e72:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013e76:	e78c      	b.n	8013d92 <log+0xda>
 8013e78:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013e90 <log+0x1d8>
 8013e7c:	e789      	b.n	8013d92 <log+0xda>
 8013e7e:	bf00      	nop
 8013e80:	00000000 	.word	0x00000000
 8013e84:	41a00000 	.word	0x41a00000
 8013e88:	00000000 	.word	0x00000000
 8013e8c:	43300000 	.word	0x43300000
	...
 8013e98:	000308ff 	.word	0x000308ff
 8013e9c:	3ff00000 	.word	0x3ff00000
 8013ea0:	08015a18 	.word	0x08015a18
 8013ea4:	7ff00000 	.word	0x7ff00000

08013ea8 <with_errno>:
 8013ea8:	b513      	push	{r0, r1, r4, lr}
 8013eaa:	4604      	mov	r4, r0
 8013eac:	ed8d 0b00 	vstr	d0, [sp]
 8013eb0:	f000 fb1c 	bl	80144ec <__errno>
 8013eb4:	ed9d 0b00 	vldr	d0, [sp]
 8013eb8:	6004      	str	r4, [r0, #0]
 8013eba:	b002      	add	sp, #8
 8013ebc:	bd10      	pop	{r4, pc}

08013ebe <xflow>:
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	b158      	cbz	r0, 8013eda <xflow+0x1c>
 8013ec2:	eeb1 7b40 	vneg.f64	d7, d0
 8013ec6:	ed8d 7b00 	vstr	d7, [sp]
 8013eca:	ed9d 7b00 	vldr	d7, [sp]
 8013ece:	2022      	movs	r0, #34	; 0x22
 8013ed0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013ed4:	b002      	add	sp, #8
 8013ed6:	f7ff bfe7 	b.w	8013ea8 <with_errno>
 8013eda:	eeb0 7b40 	vmov.f64	d7, d0
 8013ede:	e7f2      	b.n	8013ec6 <xflow+0x8>

08013ee0 <__math_uflow>:
 8013ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ee8 <__math_uflow+0x8>
 8013ee4:	f7ff bfeb 	b.w	8013ebe <xflow>
 8013ee8:	00000000 	.word	0x00000000
 8013eec:	10000000 	.word	0x10000000

08013ef0 <__math_oflow>:
 8013ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ef8 <__math_oflow+0x8>
 8013ef4:	f7ff bfe3 	b.w	8013ebe <xflow>
 8013ef8:	00000000 	.word	0x00000000
 8013efc:	70000000 	.word	0x70000000

08013f00 <__math_divzero>:
 8013f00:	b082      	sub	sp, #8
 8013f02:	2800      	cmp	r0, #0
 8013f04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013f08:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013f0c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013f10:	ed8d 7b00 	vstr	d7, [sp]
 8013f14:	ed9d 0b00 	vldr	d0, [sp]
 8013f18:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013f28 <__math_divzero+0x28>
 8013f1c:	2022      	movs	r0, #34	; 0x22
 8013f1e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013f22:	b002      	add	sp, #8
 8013f24:	f7ff bfc0 	b.w	8013ea8 <with_errno>
	...

08013f30 <__math_invalid>:
 8013f30:	eeb0 7b40 	vmov.f64	d7, d0
 8013f34:	eeb4 7b47 	vcmp.f64	d7, d7
 8013f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013f40:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013f44:	d602      	bvs.n	8013f4c <__math_invalid+0x1c>
 8013f46:	2021      	movs	r0, #33	; 0x21
 8013f48:	f7ff bfae 	b.w	8013ea8 <with_errno>
 8013f4c:	4770      	bx	lr

08013f4e <__math_check_uflow>:
 8013f4e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f56:	d102      	bne.n	8013f5e <__math_check_uflow+0x10>
 8013f58:	2022      	movs	r0, #34	; 0x22
 8013f5a:	f7ff bfa5 	b.w	8013ea8 <with_errno>
 8013f5e:	4770      	bx	lr

08013f60 <__math_check_oflow>:
 8013f60:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8013f80 <__math_check_oflow+0x20>
 8013f64:	eeb0 7bc0 	vabs.f64	d7, d0
 8013f68:	eeb4 7b46 	vcmp.f64	d7, d6
 8013f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f70:	dd02      	ble.n	8013f78 <__math_check_oflow+0x18>
 8013f72:	2022      	movs	r0, #34	; 0x22
 8013f74:	f7ff bf98 	b.w	8013ea8 <with_errno>
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	f3af 8000 	nop.w
 8013f80:	ffffffff 	.word	0xffffffff
 8013f84:	7fefffff 	.word	0x7fefffff

08013f88 <checkint>:
 8013f88:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013f8c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8013f90:	429a      	cmp	r2, r3
 8013f92:	b570      	push	{r4, r5, r6, lr}
 8013f94:	dd2a      	ble.n	8013fec <checkint+0x64>
 8013f96:	f240 4333 	movw	r3, #1075	; 0x433
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	dc24      	bgt.n	8013fe8 <checkint+0x60>
 8013f9e:	1a9b      	subs	r3, r3, r2
 8013fa0:	f1a3 0620 	sub.w	r6, r3, #32
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fa8:	fa02 f403 	lsl.w	r4, r2, r3
 8013fac:	fa02 f606 	lsl.w	r6, r2, r6
 8013fb0:	f1c3 0520 	rsb	r5, r3, #32
 8013fb4:	fa22 f505 	lsr.w	r5, r2, r5
 8013fb8:	4334      	orrs	r4, r6
 8013fba:	432c      	orrs	r4, r5
 8013fbc:	409a      	lsls	r2, r3
 8013fbe:	ea20 0202 	bic.w	r2, r0, r2
 8013fc2:	ea21 0404 	bic.w	r4, r1, r4
 8013fc6:	4322      	orrs	r2, r4
 8013fc8:	f1a3 0420 	sub.w	r4, r3, #32
 8013fcc:	f1c3 0220 	rsb	r2, r3, #32
 8013fd0:	d10c      	bne.n	8013fec <checkint+0x64>
 8013fd2:	40d8      	lsrs	r0, r3
 8013fd4:	fa01 f302 	lsl.w	r3, r1, r2
 8013fd8:	4318      	orrs	r0, r3
 8013fda:	40e1      	lsrs	r1, r4
 8013fdc:	4308      	orrs	r0, r1
 8013fde:	f000 0001 	and.w	r0, r0, #1
 8013fe2:	f1d0 0002 	rsbs	r0, r0, #2
 8013fe6:	bd70      	pop	{r4, r5, r6, pc}
 8013fe8:	2002      	movs	r0, #2
 8013fea:	e7fc      	b.n	8013fe6 <checkint+0x5e>
 8013fec:	2000      	movs	r0, #0
 8013fee:	e7fa      	b.n	8013fe6 <checkint+0x5e>

08013ff0 <pow>:
 8013ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff4:	ee10 4a90 	vmov	r4, s1
 8013ff8:	ed2d 8b0a 	vpush	{d8-d12}
 8013ffc:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8014000:	ee11 7a90 	vmov	r7, s3
 8014004:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8014008:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801400c:	429a      	cmp	r2, r3
 801400e:	ee10 6a10 	vmov	r6, s0
 8014012:	ee11 0a10 	vmov	r0, s2
 8014016:	b086      	sub	sp, #24
 8014018:	46d4      	mov	ip, sl
 801401a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801401e:	d806      	bhi.n	801402e <pow+0x3e>
 8014020:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8014024:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8014028:	2b7f      	cmp	r3, #127	; 0x7f
 801402a:	f240 8156 	bls.w	80142da <pow+0x2ea>
 801402e:	1802      	adds	r2, r0, r0
 8014030:	eb47 0107 	adc.w	r1, r7, r7
 8014034:	f06f 0e01 	mvn.w	lr, #1
 8014038:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 801403c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8014040:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8014044:	45ce      	cmp	lr, r9
 8014046:	eb73 0808 	sbcs.w	r8, r3, r8
 801404a:	d23f      	bcs.n	80140cc <pow+0xdc>
 801404c:	ea52 0301 	orrs.w	r3, r2, r1
 8014050:	f04f 0300 	mov.w	r3, #0
 8014054:	d10c      	bne.n	8014070 <pow+0x80>
 8014056:	19b6      	adds	r6, r6, r6
 8014058:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801405c:	4164      	adcs	r4, r4
 801405e:	42b3      	cmp	r3, r6
 8014060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014064:	41a3      	sbcs	r3, r4
 8014066:	f0c0 808c 	bcc.w	8014182 <pow+0x192>
 801406a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801406e:	e028      	b.n	80140c2 <pow+0xd2>
 8014070:	4da3      	ldr	r5, [pc, #652]	; (8014300 <pow+0x310>)
 8014072:	42ac      	cmp	r4, r5
 8014074:	bf08      	it	eq
 8014076:	429e      	cmpeq	r6, r3
 8014078:	d107      	bne.n	801408a <pow+0x9a>
 801407a:	1800      	adds	r0, r0, r0
 801407c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8014080:	417f      	adcs	r7, r7
 8014082:	4283      	cmp	r3, r0
 8014084:	4b9f      	ldr	r3, [pc, #636]	; (8014304 <pow+0x314>)
 8014086:	41bb      	sbcs	r3, r7
 8014088:	e7ed      	b.n	8014066 <pow+0x76>
 801408a:	19b6      	adds	r6, r6, r6
 801408c:	489e      	ldr	r0, [pc, #632]	; (8014308 <pow+0x318>)
 801408e:	4164      	adcs	r4, r4
 8014090:	42b3      	cmp	r3, r6
 8014092:	eb70 0504 	sbcs.w	r5, r0, r4
 8014096:	d374      	bcc.n	8014182 <pow+0x192>
 8014098:	4281      	cmp	r1, r0
 801409a:	bf08      	it	eq
 801409c:	429a      	cmpeq	r2, r3
 801409e:	d170      	bne.n	8014182 <pow+0x192>
 80140a0:	4a9a      	ldr	r2, [pc, #616]	; (801430c <pow+0x31c>)
 80140a2:	4294      	cmp	r4, r2
 80140a4:	bf08      	it	eq
 80140a6:	429e      	cmpeq	r6, r3
 80140a8:	d0df      	beq.n	801406a <pow+0x7a>
 80140aa:	4294      	cmp	r4, r2
 80140ac:	ea6f 0707 	mvn.w	r7, r7
 80140b0:	bf34      	ite	cc
 80140b2:	2400      	movcc	r4, #0
 80140b4:	2401      	movcs	r4, #1
 80140b6:	0fff      	lsrs	r7, r7, #31
 80140b8:	42bc      	cmp	r4, r7
 80140ba:	f040 81d9 	bne.w	8014470 <pow+0x480>
 80140be:	ee21 0b01 	vmul.f64	d0, d1, d1
 80140c2:	b006      	add	sp, #24
 80140c4:	ecbd 8b0a 	vpop	{d8-d12}
 80140c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140cc:	eb16 0806 	adds.w	r8, r6, r6
 80140d0:	eb44 0904 	adc.w	r9, r4, r4
 80140d4:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 80140d8:	f169 0200 	sbc.w	r2, r9, #0
 80140dc:	458e      	cmp	lr, r1
 80140de:	4193      	sbcs	r3, r2
 80140e0:	d223      	bcs.n	801412a <pow+0x13a>
 80140e2:	ee20 0b00 	vmul.f64	d0, d0, d0
 80140e6:	2c00      	cmp	r4, #0
 80140e8:	da12      	bge.n	8014110 <pow+0x120>
 80140ea:	4639      	mov	r1, r7
 80140ec:	f7ff ff4c 	bl	8013f88 <checkint>
 80140f0:	2801      	cmp	r0, #1
 80140f2:	d10d      	bne.n	8014110 <pow+0x120>
 80140f4:	eeb1 0b40 	vneg.f64	d0, d0
 80140f8:	ea58 0309 	orrs.w	r3, r8, r9
 80140fc:	d10a      	bne.n	8014114 <pow+0x124>
 80140fe:	2f00      	cmp	r7, #0
 8014100:	dadf      	bge.n	80140c2 <pow+0xd2>
 8014102:	b006      	add	sp, #24
 8014104:	ecbd 8b0a 	vpop	{d8-d12}
 8014108:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801410c:	f7ff bef8 	b.w	8013f00 <__math_divzero>
 8014110:	2000      	movs	r0, #0
 8014112:	e7f1      	b.n	80140f8 <pow+0x108>
 8014114:	2f00      	cmp	r7, #0
 8014116:	dad4      	bge.n	80140c2 <pow+0xd2>
 8014118:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801411c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014120:	ed8d 7b00 	vstr	d7, [sp]
 8014124:	ed9d 0b00 	vldr	d0, [sp]
 8014128:	e7cb      	b.n	80140c2 <pow+0xd2>
 801412a:	2c00      	cmp	r4, #0
 801412c:	da2c      	bge.n	8014188 <pow+0x198>
 801412e:	4639      	mov	r1, r7
 8014130:	f7ff ff2a 	bl	8013f88 <checkint>
 8014134:	b930      	cbnz	r0, 8014144 <pow+0x154>
 8014136:	b006      	add	sp, #24
 8014138:	ecbd 8b0a 	vpop	{d8-d12}
 801413c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014140:	f7ff bef6 	b.w	8013f30 <__math_invalid>
 8014144:	2801      	cmp	r0, #1
 8014146:	bf14      	ite	ne
 8014148:	2000      	movne	r0, #0
 801414a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801414e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8014152:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8014156:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801415a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801415e:	2b7f      	cmp	r3, #127	; 0x7f
 8014160:	d92d      	bls.n	80141be <pow+0x1ce>
 8014162:	4b67      	ldr	r3, [pc, #412]	; (8014300 <pow+0x310>)
 8014164:	2000      	movs	r0, #0
 8014166:	429c      	cmp	r4, r3
 8014168:	bf08      	it	eq
 801416a:	4286      	cmpeq	r6, r0
 801416c:	f43f af7d 	beq.w	801406a <pow+0x7a>
 8014170:	f240 31bd 	movw	r1, #957	; 0x3bd
 8014174:	428a      	cmp	r2, r1
 8014176:	d80c      	bhi.n	8014192 <pow+0x1a2>
 8014178:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801417c:	42b0      	cmp	r0, r6
 801417e:	41a3      	sbcs	r3, r4
 8014180:	d204      	bcs.n	801418c <pow+0x19c>
 8014182:	ee31 0b00 	vadd.f64	d0, d1, d0
 8014186:	e79c      	b.n	80140c2 <pow+0xd2>
 8014188:	2000      	movs	r0, #0
 801418a:	e7e4      	b.n	8014156 <pow+0x166>
 801418c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014190:	e797      	b.n	80140c2 <pow+0xd2>
 8014192:	2e01      	cmp	r6, #1
 8014194:	eb74 0303 	sbcs.w	r3, r4, r3
 8014198:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801419c:	bf34      	ite	cc
 801419e:	2301      	movcc	r3, #1
 80141a0:	2300      	movcs	r3, #0
 80141a2:	4295      	cmp	r5, r2
 80141a4:	bf8c      	ite	hi
 80141a6:	2500      	movhi	r5, #0
 80141a8:	2501      	movls	r5, #1
 80141aa:	42ab      	cmp	r3, r5
 80141ac:	f000 809d 	beq.w	80142ea <pow+0x2fa>
 80141b0:	b006      	add	sp, #24
 80141b2:	ecbd 8b0a 	vpop	{d8-d12}
 80141b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ba:	f7ff be99 	b.w	8013ef0 <__math_oflow>
 80141be:	f1bc 0f00 	cmp.w	ip, #0
 80141c2:	d10b      	bne.n	80141dc <pow+0x1ec>
 80141c4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80142f8 <pow+0x308>
 80141c8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80141cc:	ec53 2b17 	vmov	r2, r3, d7
 80141d0:	ee17 6a10 	vmov	r6, s14
 80141d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80141d8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80141dc:	4b4c      	ldr	r3, [pc, #304]	; (8014310 <pow+0x320>)
 80141de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80141e2:	4423      	add	r3, r4
 80141e4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80141e8:	1519      	asrs	r1, r3, #20
 80141ea:	0d1b      	lsrs	r3, r3, #20
 80141ec:	051b      	lsls	r3, r3, #20
 80141ee:	eba4 0903 	sub.w	r9, r4, r3
 80141f2:	4b48      	ldr	r3, [pc, #288]	; (8014314 <pow+0x324>)
 80141f4:	ee04 1a10 	vmov	s8, r1
 80141f8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80141fc:	f1b6 0800 	subs.w	r8, r6, #0
 8014200:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8014204:	ec49 8b15 	vmov	d5, r8, r9
 8014208:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801420c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8014210:	ed93 7b00 	vldr	d7, [r3]
 8014214:	ed93 5b02 	vldr	d5, [r3, #8]
 8014218:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801421c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8014220:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8014224:	ee36 ab02 	vadd.f64	d10, d6, d2
 8014228:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801422c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014230:	ed93 5b04 	vldr	d5, [r3, #16]
 8014234:	ee32 2b06 	vadd.f64	d2, d2, d6
 8014238:	ee37 7b02 	vadd.f64	d7, d7, d2
 801423c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8014240:	ed93 4b08 	vldr	d4, [r3, #32]
 8014244:	ee26 0b05 	vmul.f64	d0, d6, d5
 8014248:	eeb0 9b40 	vmov.f64	d9, d0
 801424c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8014250:	ed93 5b06 	vldr	d5, [r3, #24]
 8014254:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8014258:	ee26 bb00 	vmul.f64	d11, d6, d0
 801425c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8014260:	eea6 5b04 	vfma.f64	d5, d6, d4
 8014264:	ee3a ab48 	vsub.f64	d10, d10, d8
 8014268:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801426c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8014270:	ee3a ab00 	vadd.f64	d10, d10, d0
 8014274:	eea6 4b03 	vfma.f64	d4, d6, d3
 8014278:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801427c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8014280:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8014284:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8014288:	eea0 4b03 	vfma.f64	d4, d0, d3
 801428c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014290:	eeab ab05 	vfma.f64	d10, d11, d5
 8014294:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8014298:	ee21 7b06 	vmul.f64	d7, d1, d6
 801429c:	ee17 3a90 	vmov	r3, s15
 80142a0:	eeb0 5b47 	vmov.f64	d5, d7
 80142a4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80142a8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80142ac:	18b2      	adds	r2, r6, r2
 80142ae:	2a3e      	cmp	r2, #62	; 0x3e
 80142b0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80142b4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80142b8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80142bc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80142c0:	d92b      	bls.n	801431a <pow+0x32a>
 80142c2:	2a00      	cmp	r2, #0
 80142c4:	da0b      	bge.n	80142de <pow+0x2ee>
 80142c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80142ca:	ee37 0b00 	vadd.f64	d0, d7, d0
 80142ce:	2800      	cmp	r0, #0
 80142d0:	f43f aef7 	beq.w	80140c2 <pow+0xd2>
 80142d4:	eeb1 0b40 	vneg.f64	d0, d0
 80142d8:	e6f3      	b.n	80140c2 <pow+0xd2>
 80142da:	2000      	movs	r0, #0
 80142dc:	e77e      	b.n	80141dc <pow+0x1ec>
 80142de:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80142e2:	d919      	bls.n	8014318 <pow+0x328>
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f6bf af63 	bge.w	80141b0 <pow+0x1c0>
 80142ea:	b006      	add	sp, #24
 80142ec:	ecbd 8b0a 	vpop	{d8-d12}
 80142f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142f4:	f7ff bdf4 	b.w	8013ee0 <__math_uflow>
 80142f8:	00000000 	.word	0x00000000
 80142fc:	43300000 	.word	0x43300000
 8014300:	3ff00000 	.word	0x3ff00000
 8014304:	fff00000 	.word	0xfff00000
 8014308:	ffe00000 	.word	0xffe00000
 801430c:	7fe00000 	.word	0x7fe00000
 8014310:	c0196aab 	.word	0xc0196aab
 8014314:	080162a8 	.word	0x080162a8
 8014318:	2600      	movs	r6, #0
 801431a:	495d      	ldr	r1, [pc, #372]	; (8014490 <pow+0x4a0>)
 801431c:	ed91 4b02 	vldr	d4, [r1, #8]
 8014320:	ed91 3b00 	vldr	d3, [r1]
 8014324:	eeb0 6b44 	vmov.f64	d6, d4
 8014328:	eea7 6b03 	vfma.f64	d6, d7, d3
 801432c:	ee16 5a10 	vmov	r5, s12
 8014330:	ee36 6b44 	vsub.f64	d6, d6, d4
 8014334:	ed91 4b04 	vldr	d4, [r1, #16]
 8014338:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801433c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014340:	eeb0 0b47 	vmov.f64	d0, d7
 8014344:	ed91 7b06 	vldr	d7, [r1, #24]
 8014348:	18dc      	adds	r4, r3, r3
 801434a:	f104 030f 	add.w	r3, r4, #15
 801434e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8014352:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014356:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801435a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801435e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014362:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8014366:	ed91 5b08 	vldr	d5, [r1, #32]
 801436a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801436e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8014372:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014376:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801437a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801437e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8014382:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8014386:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801438a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801438e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014392:	1940      	adds	r0, r0, r5
 8014394:	2700      	movs	r7, #0
 8014396:	eb17 020c 	adds.w	r2, r7, ip
 801439a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801439e:	eea6 7b05 	vfma.f64	d7, d6, d5
 80143a2:	2e00      	cmp	r6, #0
 80143a4:	d15f      	bne.n	8014466 <pow+0x476>
 80143a6:	42bd      	cmp	r5, r7
 80143a8:	db13      	blt.n	80143d2 <pow+0x3e2>
 80143aa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80143ae:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80143b2:	4610      	mov	r0, r2
 80143b4:	ec41 0b10 	vmov	d0, r0, r1
 80143b8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80143bc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014478 <pow+0x488>
 80143c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80143c4:	b006      	add	sp, #24
 80143c6:	ecbd 8b0a 	vpop	{d8-d12}
 80143ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143ce:	f7ff bdc7 	b.w	8013f60 <__math_check_oflow>
 80143d2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80143d6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80143da:	4610      	mov	r0, r2
 80143dc:	ec41 0b15 	vmov	d5, r0, r1
 80143e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80143e4:	ee27 6b05 	vmul.f64	d6, d7, d5
 80143e8:	ee35 7b06 	vadd.f64	d7, d5, d6
 80143ec:	eeb0 3bc7 	vabs.f64	d3, d7
 80143f0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80143f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014480 <pow+0x490>
 80143fc:	d52a      	bpl.n	8014454 <pow+0x464>
 80143fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014402:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801440e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8014412:	bf48      	it	mi
 8014414:	eeb0 4b43 	vmovmi.f64	d4, d3
 8014418:	ee37 3b04 	vadd.f64	d3, d7, d4
 801441c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8014420:	ee35 7b07 	vadd.f64	d7, d5, d7
 8014424:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014428:	ee37 7b03 	vadd.f64	d7, d7, d3
 801442c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014430:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014438:	d104      	bne.n	8014444 <pow+0x454>
 801443a:	4632      	mov	r2, r6
 801443c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8014440:	ec43 2b17 	vmov	d7, r2, r3
 8014444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014448:	ed9d 6b02 	vldr	d6, [sp, #8]
 801444c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8014450:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014454:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014458:	b006      	add	sp, #24
 801445a:	ecbd 8b0a 	vpop	{d8-d12}
 801445e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014462:	f7ff bd74 	b.w	8013f4e <__math_check_uflow>
 8014466:	ec43 2b10 	vmov	d0, r2, r3
 801446a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801446e:	e628      	b.n	80140c2 <pow+0xd2>
 8014470:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014488 <pow+0x498>
 8014474:	e625      	b.n	80140c2 <pow+0xd2>
 8014476:	bf00      	nop
 8014478:	00000000 	.word	0x00000000
 801447c:	7f000000 	.word	0x7f000000
 8014480:	00000000 	.word	0x00000000
 8014484:	00100000 	.word	0x00100000
	...
 8014490:	080151a8 	.word	0x080151a8
 8014494:	00000000 	.word	0x00000000

08014498 <sqrt>:
 8014498:	b508      	push	{r3, lr}
 801449a:	ed2d 8b04 	vpush	{d8-d9}
 801449e:	eeb0 8b40 	vmov.f64	d8, d0
 80144a2:	f000 f819 	bl	80144d8 <__ieee754_sqrt>
 80144a6:	eeb4 8b48 	vcmp.f64	d8, d8
 80144aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ae:	d60c      	bvs.n	80144ca <sqrt+0x32>
 80144b0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80144d0 <sqrt+0x38>
 80144b4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80144b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144bc:	d505      	bpl.n	80144ca <sqrt+0x32>
 80144be:	f000 f815 	bl	80144ec <__errno>
 80144c2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80144c6:	2321      	movs	r3, #33	; 0x21
 80144c8:	6003      	str	r3, [r0, #0]
 80144ca:	ecbd 8b04 	vpop	{d8-d9}
 80144ce:	bd08      	pop	{r3, pc}
	...

080144d8 <__ieee754_sqrt>:
 80144d8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80144dc:	4770      	bx	lr

080144de <abort>:
 80144de:	b508      	push	{r3, lr}
 80144e0:	2006      	movs	r0, #6
 80144e2:	f000 f96b 	bl	80147bc <raise>
 80144e6:	2001      	movs	r0, #1
 80144e8:	f7f4 fa98 	bl	8008a1c <_exit>

080144ec <__errno>:
 80144ec:	4b01      	ldr	r3, [pc, #4]	; (80144f4 <__errno+0x8>)
 80144ee:	6818      	ldr	r0, [r3, #0]
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	24000040 	.word	0x24000040

080144f8 <__libc_init_array>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	4d0d      	ldr	r5, [pc, #52]	; (8014530 <__libc_init_array+0x38>)
 80144fc:	4c0d      	ldr	r4, [pc, #52]	; (8014534 <__libc_init_array+0x3c>)
 80144fe:	1b64      	subs	r4, r4, r5
 8014500:	10a4      	asrs	r4, r4, #2
 8014502:	2600      	movs	r6, #0
 8014504:	42a6      	cmp	r6, r4
 8014506:	d109      	bne.n	801451c <__libc_init_array+0x24>
 8014508:	4d0b      	ldr	r5, [pc, #44]	; (8014538 <__libc_init_array+0x40>)
 801450a:	4c0c      	ldr	r4, [pc, #48]	; (801453c <__libc_init_array+0x44>)
 801450c:	f000 fce2 	bl	8014ed4 <_init>
 8014510:	1b64      	subs	r4, r4, r5
 8014512:	10a4      	asrs	r4, r4, #2
 8014514:	2600      	movs	r6, #0
 8014516:	42a6      	cmp	r6, r4
 8014518:	d105      	bne.n	8014526 <__libc_init_array+0x2e>
 801451a:	bd70      	pop	{r4, r5, r6, pc}
 801451c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014520:	4798      	blx	r3
 8014522:	3601      	adds	r6, #1
 8014524:	e7ee      	b.n	8014504 <__libc_init_array+0xc>
 8014526:	f855 3b04 	ldr.w	r3, [r5], #4
 801452a:	4798      	blx	r3
 801452c:	3601      	adds	r6, #1
 801452e:	e7f2      	b.n	8014516 <__libc_init_array+0x1e>
 8014530:	0801738c 	.word	0x0801738c
 8014534:	0801738c 	.word	0x0801738c
 8014538:	0801738c 	.word	0x0801738c
 801453c:	08017394 	.word	0x08017394

08014540 <malloc>:
 8014540:	4b02      	ldr	r3, [pc, #8]	; (801454c <malloc+0xc>)
 8014542:	4601      	mov	r1, r0
 8014544:	6818      	ldr	r0, [r3, #0]
 8014546:	f000 b88d 	b.w	8014664 <_malloc_r>
 801454a:	bf00      	nop
 801454c:	24000040 	.word	0x24000040

08014550 <free>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <free+0xc>)
 8014552:	4601      	mov	r1, r0
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	f000 b819 	b.w	801458c <_free_r>
 801455a:	bf00      	nop
 801455c:	24000040 	.word	0x24000040

08014560 <memcpy>:
 8014560:	440a      	add	r2, r1
 8014562:	4291      	cmp	r1, r2
 8014564:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014568:	d100      	bne.n	801456c <memcpy+0xc>
 801456a:	4770      	bx	lr
 801456c:	b510      	push	{r4, lr}
 801456e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014576:	4291      	cmp	r1, r2
 8014578:	d1f9      	bne.n	801456e <memcpy+0xe>
 801457a:	bd10      	pop	{r4, pc}

0801457c <memset>:
 801457c:	4402      	add	r2, r0
 801457e:	4603      	mov	r3, r0
 8014580:	4293      	cmp	r3, r2
 8014582:	d100      	bne.n	8014586 <memset+0xa>
 8014584:	4770      	bx	lr
 8014586:	f803 1b01 	strb.w	r1, [r3], #1
 801458a:	e7f9      	b.n	8014580 <memset+0x4>

0801458c <_free_r>:
 801458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801458e:	2900      	cmp	r1, #0
 8014590:	d044      	beq.n	801461c <_free_r+0x90>
 8014592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014596:	9001      	str	r0, [sp, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	f1a1 0404 	sub.w	r4, r1, #4
 801459e:	bfb8      	it	lt
 80145a0:	18e4      	addlt	r4, r4, r3
 80145a2:	f000 f947 	bl	8014834 <__malloc_lock>
 80145a6:	4a1e      	ldr	r2, [pc, #120]	; (8014620 <_free_r+0x94>)
 80145a8:	9801      	ldr	r0, [sp, #4]
 80145aa:	6813      	ldr	r3, [r2, #0]
 80145ac:	b933      	cbnz	r3, 80145bc <_free_r+0x30>
 80145ae:	6063      	str	r3, [r4, #4]
 80145b0:	6014      	str	r4, [r2, #0]
 80145b2:	b003      	add	sp, #12
 80145b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145b8:	f000 b942 	b.w	8014840 <__malloc_unlock>
 80145bc:	42a3      	cmp	r3, r4
 80145be:	d908      	bls.n	80145d2 <_free_r+0x46>
 80145c0:	6825      	ldr	r5, [r4, #0]
 80145c2:	1961      	adds	r1, r4, r5
 80145c4:	428b      	cmp	r3, r1
 80145c6:	bf01      	itttt	eq
 80145c8:	6819      	ldreq	r1, [r3, #0]
 80145ca:	685b      	ldreq	r3, [r3, #4]
 80145cc:	1949      	addeq	r1, r1, r5
 80145ce:	6021      	streq	r1, [r4, #0]
 80145d0:	e7ed      	b.n	80145ae <_free_r+0x22>
 80145d2:	461a      	mov	r2, r3
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	b10b      	cbz	r3, 80145dc <_free_r+0x50>
 80145d8:	42a3      	cmp	r3, r4
 80145da:	d9fa      	bls.n	80145d2 <_free_r+0x46>
 80145dc:	6811      	ldr	r1, [r2, #0]
 80145de:	1855      	adds	r5, r2, r1
 80145e0:	42a5      	cmp	r5, r4
 80145e2:	d10b      	bne.n	80145fc <_free_r+0x70>
 80145e4:	6824      	ldr	r4, [r4, #0]
 80145e6:	4421      	add	r1, r4
 80145e8:	1854      	adds	r4, r2, r1
 80145ea:	42a3      	cmp	r3, r4
 80145ec:	6011      	str	r1, [r2, #0]
 80145ee:	d1e0      	bne.n	80145b2 <_free_r+0x26>
 80145f0:	681c      	ldr	r4, [r3, #0]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	6053      	str	r3, [r2, #4]
 80145f6:	4421      	add	r1, r4
 80145f8:	6011      	str	r1, [r2, #0]
 80145fa:	e7da      	b.n	80145b2 <_free_r+0x26>
 80145fc:	d902      	bls.n	8014604 <_free_r+0x78>
 80145fe:	230c      	movs	r3, #12
 8014600:	6003      	str	r3, [r0, #0]
 8014602:	e7d6      	b.n	80145b2 <_free_r+0x26>
 8014604:	6825      	ldr	r5, [r4, #0]
 8014606:	1961      	adds	r1, r4, r5
 8014608:	428b      	cmp	r3, r1
 801460a:	bf04      	itt	eq
 801460c:	6819      	ldreq	r1, [r3, #0]
 801460e:	685b      	ldreq	r3, [r3, #4]
 8014610:	6063      	str	r3, [r4, #4]
 8014612:	bf04      	itt	eq
 8014614:	1949      	addeq	r1, r1, r5
 8014616:	6021      	streq	r1, [r4, #0]
 8014618:	6054      	str	r4, [r2, #4]
 801461a:	e7ca      	b.n	80145b2 <_free_r+0x26>
 801461c:	b003      	add	sp, #12
 801461e:	bd30      	pop	{r4, r5, pc}
 8014620:	240465b0 	.word	0x240465b0

08014624 <sbrk_aligned>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	4e0e      	ldr	r6, [pc, #56]	; (8014660 <sbrk_aligned+0x3c>)
 8014628:	460c      	mov	r4, r1
 801462a:	6831      	ldr	r1, [r6, #0]
 801462c:	4605      	mov	r5, r0
 801462e:	b911      	cbnz	r1, 8014636 <sbrk_aligned+0x12>
 8014630:	f000 f88c 	bl	801474c <_sbrk_r>
 8014634:	6030      	str	r0, [r6, #0]
 8014636:	4621      	mov	r1, r4
 8014638:	4628      	mov	r0, r5
 801463a:	f000 f887 	bl	801474c <_sbrk_r>
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	d00a      	beq.n	8014658 <sbrk_aligned+0x34>
 8014642:	1cc4      	adds	r4, r0, #3
 8014644:	f024 0403 	bic.w	r4, r4, #3
 8014648:	42a0      	cmp	r0, r4
 801464a:	d007      	beq.n	801465c <sbrk_aligned+0x38>
 801464c:	1a21      	subs	r1, r4, r0
 801464e:	4628      	mov	r0, r5
 8014650:	f000 f87c 	bl	801474c <_sbrk_r>
 8014654:	3001      	adds	r0, #1
 8014656:	d101      	bne.n	801465c <sbrk_aligned+0x38>
 8014658:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801465c:	4620      	mov	r0, r4
 801465e:	bd70      	pop	{r4, r5, r6, pc}
 8014660:	240465b4 	.word	0x240465b4

08014664 <_malloc_r>:
 8014664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014668:	1ccd      	adds	r5, r1, #3
 801466a:	f025 0503 	bic.w	r5, r5, #3
 801466e:	3508      	adds	r5, #8
 8014670:	2d0c      	cmp	r5, #12
 8014672:	bf38      	it	cc
 8014674:	250c      	movcc	r5, #12
 8014676:	2d00      	cmp	r5, #0
 8014678:	4607      	mov	r7, r0
 801467a:	db01      	blt.n	8014680 <_malloc_r+0x1c>
 801467c:	42a9      	cmp	r1, r5
 801467e:	d905      	bls.n	801468c <_malloc_r+0x28>
 8014680:	230c      	movs	r3, #12
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	2600      	movs	r6, #0
 8014686:	4630      	mov	r0, r6
 8014688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801468c:	4e2e      	ldr	r6, [pc, #184]	; (8014748 <_malloc_r+0xe4>)
 801468e:	f000 f8d1 	bl	8014834 <__malloc_lock>
 8014692:	6833      	ldr	r3, [r6, #0]
 8014694:	461c      	mov	r4, r3
 8014696:	bb34      	cbnz	r4, 80146e6 <_malloc_r+0x82>
 8014698:	4629      	mov	r1, r5
 801469a:	4638      	mov	r0, r7
 801469c:	f7ff ffc2 	bl	8014624 <sbrk_aligned>
 80146a0:	1c43      	adds	r3, r0, #1
 80146a2:	4604      	mov	r4, r0
 80146a4:	d14d      	bne.n	8014742 <_malloc_r+0xde>
 80146a6:	6834      	ldr	r4, [r6, #0]
 80146a8:	4626      	mov	r6, r4
 80146aa:	2e00      	cmp	r6, #0
 80146ac:	d140      	bne.n	8014730 <_malloc_r+0xcc>
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	4631      	mov	r1, r6
 80146b2:	4638      	mov	r0, r7
 80146b4:	eb04 0803 	add.w	r8, r4, r3
 80146b8:	f000 f848 	bl	801474c <_sbrk_r>
 80146bc:	4580      	cmp	r8, r0
 80146be:	d13a      	bne.n	8014736 <_malloc_r+0xd2>
 80146c0:	6821      	ldr	r1, [r4, #0]
 80146c2:	3503      	adds	r5, #3
 80146c4:	1a6d      	subs	r5, r5, r1
 80146c6:	f025 0503 	bic.w	r5, r5, #3
 80146ca:	3508      	adds	r5, #8
 80146cc:	2d0c      	cmp	r5, #12
 80146ce:	bf38      	it	cc
 80146d0:	250c      	movcc	r5, #12
 80146d2:	4629      	mov	r1, r5
 80146d4:	4638      	mov	r0, r7
 80146d6:	f7ff ffa5 	bl	8014624 <sbrk_aligned>
 80146da:	3001      	adds	r0, #1
 80146dc:	d02b      	beq.n	8014736 <_malloc_r+0xd2>
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	442b      	add	r3, r5
 80146e2:	6023      	str	r3, [r4, #0]
 80146e4:	e00e      	b.n	8014704 <_malloc_r+0xa0>
 80146e6:	6822      	ldr	r2, [r4, #0]
 80146e8:	1b52      	subs	r2, r2, r5
 80146ea:	d41e      	bmi.n	801472a <_malloc_r+0xc6>
 80146ec:	2a0b      	cmp	r2, #11
 80146ee:	d916      	bls.n	801471e <_malloc_r+0xba>
 80146f0:	1961      	adds	r1, r4, r5
 80146f2:	42a3      	cmp	r3, r4
 80146f4:	6025      	str	r5, [r4, #0]
 80146f6:	bf18      	it	ne
 80146f8:	6059      	strne	r1, [r3, #4]
 80146fa:	6863      	ldr	r3, [r4, #4]
 80146fc:	bf08      	it	eq
 80146fe:	6031      	streq	r1, [r6, #0]
 8014700:	5162      	str	r2, [r4, r5]
 8014702:	604b      	str	r3, [r1, #4]
 8014704:	4638      	mov	r0, r7
 8014706:	f104 060b 	add.w	r6, r4, #11
 801470a:	f000 f899 	bl	8014840 <__malloc_unlock>
 801470e:	f026 0607 	bic.w	r6, r6, #7
 8014712:	1d23      	adds	r3, r4, #4
 8014714:	1af2      	subs	r2, r6, r3
 8014716:	d0b6      	beq.n	8014686 <_malloc_r+0x22>
 8014718:	1b9b      	subs	r3, r3, r6
 801471a:	50a3      	str	r3, [r4, r2]
 801471c:	e7b3      	b.n	8014686 <_malloc_r+0x22>
 801471e:	6862      	ldr	r2, [r4, #4]
 8014720:	42a3      	cmp	r3, r4
 8014722:	bf0c      	ite	eq
 8014724:	6032      	streq	r2, [r6, #0]
 8014726:	605a      	strne	r2, [r3, #4]
 8014728:	e7ec      	b.n	8014704 <_malloc_r+0xa0>
 801472a:	4623      	mov	r3, r4
 801472c:	6864      	ldr	r4, [r4, #4]
 801472e:	e7b2      	b.n	8014696 <_malloc_r+0x32>
 8014730:	4634      	mov	r4, r6
 8014732:	6876      	ldr	r6, [r6, #4]
 8014734:	e7b9      	b.n	80146aa <_malloc_r+0x46>
 8014736:	230c      	movs	r3, #12
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	4638      	mov	r0, r7
 801473c:	f000 f880 	bl	8014840 <__malloc_unlock>
 8014740:	e7a1      	b.n	8014686 <_malloc_r+0x22>
 8014742:	6025      	str	r5, [r4, #0]
 8014744:	e7de      	b.n	8014704 <_malloc_r+0xa0>
 8014746:	bf00      	nop
 8014748:	240465b0 	.word	0x240465b0

0801474c <_sbrk_r>:
 801474c:	b538      	push	{r3, r4, r5, lr}
 801474e:	4d06      	ldr	r5, [pc, #24]	; (8014768 <_sbrk_r+0x1c>)
 8014750:	2300      	movs	r3, #0
 8014752:	4604      	mov	r4, r0
 8014754:	4608      	mov	r0, r1
 8014756:	602b      	str	r3, [r5, #0]
 8014758:	f7f4 f96a 	bl	8008a30 <_sbrk>
 801475c:	1c43      	adds	r3, r0, #1
 801475e:	d102      	bne.n	8014766 <_sbrk_r+0x1a>
 8014760:	682b      	ldr	r3, [r5, #0]
 8014762:	b103      	cbz	r3, 8014766 <_sbrk_r+0x1a>
 8014764:	6023      	str	r3, [r4, #0]
 8014766:	bd38      	pop	{r3, r4, r5, pc}
 8014768:	240465b8 	.word	0x240465b8

0801476c <_raise_r>:
 801476c:	291f      	cmp	r1, #31
 801476e:	b538      	push	{r3, r4, r5, lr}
 8014770:	4604      	mov	r4, r0
 8014772:	460d      	mov	r5, r1
 8014774:	d904      	bls.n	8014780 <_raise_r+0x14>
 8014776:	2316      	movs	r3, #22
 8014778:	6003      	str	r3, [r0, #0]
 801477a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801477e:	bd38      	pop	{r3, r4, r5, pc}
 8014780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014782:	b112      	cbz	r2, 801478a <_raise_r+0x1e>
 8014784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014788:	b94b      	cbnz	r3, 801479e <_raise_r+0x32>
 801478a:	4620      	mov	r0, r4
 801478c:	f000 f830 	bl	80147f0 <_getpid_r>
 8014790:	462a      	mov	r2, r5
 8014792:	4601      	mov	r1, r0
 8014794:	4620      	mov	r0, r4
 8014796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801479a:	f000 b817 	b.w	80147cc <_kill_r>
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d00a      	beq.n	80147b8 <_raise_r+0x4c>
 80147a2:	1c59      	adds	r1, r3, #1
 80147a4:	d103      	bne.n	80147ae <_raise_r+0x42>
 80147a6:	2316      	movs	r3, #22
 80147a8:	6003      	str	r3, [r0, #0]
 80147aa:	2001      	movs	r0, #1
 80147ac:	e7e7      	b.n	801477e <_raise_r+0x12>
 80147ae:	2400      	movs	r4, #0
 80147b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80147b4:	4628      	mov	r0, r5
 80147b6:	4798      	blx	r3
 80147b8:	2000      	movs	r0, #0
 80147ba:	e7e0      	b.n	801477e <_raise_r+0x12>

080147bc <raise>:
 80147bc:	4b02      	ldr	r3, [pc, #8]	; (80147c8 <raise+0xc>)
 80147be:	4601      	mov	r1, r0
 80147c0:	6818      	ldr	r0, [r3, #0]
 80147c2:	f7ff bfd3 	b.w	801476c <_raise_r>
 80147c6:	bf00      	nop
 80147c8:	24000040 	.word	0x24000040

080147cc <_kill_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d07      	ldr	r5, [pc, #28]	; (80147ec <_kill_r+0x20>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	4611      	mov	r1, r2
 80147d8:	602b      	str	r3, [r5, #0]
 80147da:	f7f4 f90f 	bl	80089fc <_kill>
 80147de:	1c43      	adds	r3, r0, #1
 80147e0:	d102      	bne.n	80147e8 <_kill_r+0x1c>
 80147e2:	682b      	ldr	r3, [r5, #0]
 80147e4:	b103      	cbz	r3, 80147e8 <_kill_r+0x1c>
 80147e6:	6023      	str	r3, [r4, #0]
 80147e8:	bd38      	pop	{r3, r4, r5, pc}
 80147ea:	bf00      	nop
 80147ec:	240465b8 	.word	0x240465b8

080147f0 <_getpid_r>:
 80147f0:	f7f4 b8fc 	b.w	80089ec <_getpid>

080147f4 <siprintf>:
 80147f4:	b40e      	push	{r1, r2, r3}
 80147f6:	b500      	push	{lr}
 80147f8:	b09c      	sub	sp, #112	; 0x70
 80147fa:	ab1d      	add	r3, sp, #116	; 0x74
 80147fc:	9002      	str	r0, [sp, #8]
 80147fe:	9006      	str	r0, [sp, #24]
 8014800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014804:	4809      	ldr	r0, [pc, #36]	; (801482c <siprintf+0x38>)
 8014806:	9107      	str	r1, [sp, #28]
 8014808:	9104      	str	r1, [sp, #16]
 801480a:	4909      	ldr	r1, [pc, #36]	; (8014830 <siprintf+0x3c>)
 801480c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014810:	9105      	str	r1, [sp, #20]
 8014812:	6800      	ldr	r0, [r0, #0]
 8014814:	9301      	str	r3, [sp, #4]
 8014816:	a902      	add	r1, sp, #8
 8014818:	f000 f874 	bl	8014904 <_svfiprintf_r>
 801481c:	9b02      	ldr	r3, [sp, #8]
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
 8014822:	b01c      	add	sp, #112	; 0x70
 8014824:	f85d eb04 	ldr.w	lr, [sp], #4
 8014828:	b003      	add	sp, #12
 801482a:	4770      	bx	lr
 801482c:	24000040 	.word	0x24000040
 8014830:	ffff0208 	.word	0xffff0208

08014834 <__malloc_lock>:
 8014834:	4801      	ldr	r0, [pc, #4]	; (801483c <__malloc_lock+0x8>)
 8014836:	f000 baf9 	b.w	8014e2c <__retarget_lock_acquire_recursive>
 801483a:	bf00      	nop
 801483c:	240465bc 	.word	0x240465bc

08014840 <__malloc_unlock>:
 8014840:	4801      	ldr	r0, [pc, #4]	; (8014848 <__malloc_unlock+0x8>)
 8014842:	f000 baf4 	b.w	8014e2e <__retarget_lock_release_recursive>
 8014846:	bf00      	nop
 8014848:	240465bc 	.word	0x240465bc

0801484c <__ssputs_r>:
 801484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014850:	688e      	ldr	r6, [r1, #8]
 8014852:	429e      	cmp	r6, r3
 8014854:	4682      	mov	sl, r0
 8014856:	460c      	mov	r4, r1
 8014858:	4690      	mov	r8, r2
 801485a:	461f      	mov	r7, r3
 801485c:	d838      	bhi.n	80148d0 <__ssputs_r+0x84>
 801485e:	898a      	ldrh	r2, [r1, #12]
 8014860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014864:	d032      	beq.n	80148cc <__ssputs_r+0x80>
 8014866:	6825      	ldr	r5, [r4, #0]
 8014868:	6909      	ldr	r1, [r1, #16]
 801486a:	eba5 0901 	sub.w	r9, r5, r1
 801486e:	6965      	ldr	r5, [r4, #20]
 8014870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014878:	3301      	adds	r3, #1
 801487a:	444b      	add	r3, r9
 801487c:	106d      	asrs	r5, r5, #1
 801487e:	429d      	cmp	r5, r3
 8014880:	bf38      	it	cc
 8014882:	461d      	movcc	r5, r3
 8014884:	0553      	lsls	r3, r2, #21
 8014886:	d531      	bpl.n	80148ec <__ssputs_r+0xa0>
 8014888:	4629      	mov	r1, r5
 801488a:	f7ff feeb 	bl	8014664 <_malloc_r>
 801488e:	4606      	mov	r6, r0
 8014890:	b950      	cbnz	r0, 80148a8 <__ssputs_r+0x5c>
 8014892:	230c      	movs	r3, #12
 8014894:	f8ca 3000 	str.w	r3, [sl]
 8014898:	89a3      	ldrh	r3, [r4, #12]
 801489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801489e:	81a3      	strh	r3, [r4, #12]
 80148a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148a8:	6921      	ldr	r1, [r4, #16]
 80148aa:	464a      	mov	r2, r9
 80148ac:	f7ff fe58 	bl	8014560 <memcpy>
 80148b0:	89a3      	ldrh	r3, [r4, #12]
 80148b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148ba:	81a3      	strh	r3, [r4, #12]
 80148bc:	6126      	str	r6, [r4, #16]
 80148be:	6165      	str	r5, [r4, #20]
 80148c0:	444e      	add	r6, r9
 80148c2:	eba5 0509 	sub.w	r5, r5, r9
 80148c6:	6026      	str	r6, [r4, #0]
 80148c8:	60a5      	str	r5, [r4, #8]
 80148ca:	463e      	mov	r6, r7
 80148cc:	42be      	cmp	r6, r7
 80148ce:	d900      	bls.n	80148d2 <__ssputs_r+0x86>
 80148d0:	463e      	mov	r6, r7
 80148d2:	6820      	ldr	r0, [r4, #0]
 80148d4:	4632      	mov	r2, r6
 80148d6:	4641      	mov	r1, r8
 80148d8:	f000 faaa 	bl	8014e30 <memmove>
 80148dc:	68a3      	ldr	r3, [r4, #8]
 80148de:	1b9b      	subs	r3, r3, r6
 80148e0:	60a3      	str	r3, [r4, #8]
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	4433      	add	r3, r6
 80148e6:	6023      	str	r3, [r4, #0]
 80148e8:	2000      	movs	r0, #0
 80148ea:	e7db      	b.n	80148a4 <__ssputs_r+0x58>
 80148ec:	462a      	mov	r2, r5
 80148ee:	f000 fab9 	bl	8014e64 <_realloc_r>
 80148f2:	4606      	mov	r6, r0
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d1e1      	bne.n	80148bc <__ssputs_r+0x70>
 80148f8:	6921      	ldr	r1, [r4, #16]
 80148fa:	4650      	mov	r0, sl
 80148fc:	f7ff fe46 	bl	801458c <_free_r>
 8014900:	e7c7      	b.n	8014892 <__ssputs_r+0x46>
	...

08014904 <_svfiprintf_r>:
 8014904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014908:	4698      	mov	r8, r3
 801490a:	898b      	ldrh	r3, [r1, #12]
 801490c:	061b      	lsls	r3, r3, #24
 801490e:	b09d      	sub	sp, #116	; 0x74
 8014910:	4607      	mov	r7, r0
 8014912:	460d      	mov	r5, r1
 8014914:	4614      	mov	r4, r2
 8014916:	d50e      	bpl.n	8014936 <_svfiprintf_r+0x32>
 8014918:	690b      	ldr	r3, [r1, #16]
 801491a:	b963      	cbnz	r3, 8014936 <_svfiprintf_r+0x32>
 801491c:	2140      	movs	r1, #64	; 0x40
 801491e:	f7ff fea1 	bl	8014664 <_malloc_r>
 8014922:	6028      	str	r0, [r5, #0]
 8014924:	6128      	str	r0, [r5, #16]
 8014926:	b920      	cbnz	r0, 8014932 <_svfiprintf_r+0x2e>
 8014928:	230c      	movs	r3, #12
 801492a:	603b      	str	r3, [r7, #0]
 801492c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014930:	e0d1      	b.n	8014ad6 <_svfiprintf_r+0x1d2>
 8014932:	2340      	movs	r3, #64	; 0x40
 8014934:	616b      	str	r3, [r5, #20]
 8014936:	2300      	movs	r3, #0
 8014938:	9309      	str	r3, [sp, #36]	; 0x24
 801493a:	2320      	movs	r3, #32
 801493c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014940:	f8cd 800c 	str.w	r8, [sp, #12]
 8014944:	2330      	movs	r3, #48	; 0x30
 8014946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014af0 <_svfiprintf_r+0x1ec>
 801494a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801494e:	f04f 0901 	mov.w	r9, #1
 8014952:	4623      	mov	r3, r4
 8014954:	469a      	mov	sl, r3
 8014956:	f813 2b01 	ldrb.w	r2, [r3], #1
 801495a:	b10a      	cbz	r2, 8014960 <_svfiprintf_r+0x5c>
 801495c:	2a25      	cmp	r2, #37	; 0x25
 801495e:	d1f9      	bne.n	8014954 <_svfiprintf_r+0x50>
 8014960:	ebba 0b04 	subs.w	fp, sl, r4
 8014964:	d00b      	beq.n	801497e <_svfiprintf_r+0x7a>
 8014966:	465b      	mov	r3, fp
 8014968:	4622      	mov	r2, r4
 801496a:	4629      	mov	r1, r5
 801496c:	4638      	mov	r0, r7
 801496e:	f7ff ff6d 	bl	801484c <__ssputs_r>
 8014972:	3001      	adds	r0, #1
 8014974:	f000 80aa 	beq.w	8014acc <_svfiprintf_r+0x1c8>
 8014978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801497a:	445a      	add	r2, fp
 801497c:	9209      	str	r2, [sp, #36]	; 0x24
 801497e:	f89a 3000 	ldrb.w	r3, [sl]
 8014982:	2b00      	cmp	r3, #0
 8014984:	f000 80a2 	beq.w	8014acc <_svfiprintf_r+0x1c8>
 8014988:	2300      	movs	r3, #0
 801498a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014992:	f10a 0a01 	add.w	sl, sl, #1
 8014996:	9304      	str	r3, [sp, #16]
 8014998:	9307      	str	r3, [sp, #28]
 801499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801499e:	931a      	str	r3, [sp, #104]	; 0x68
 80149a0:	4654      	mov	r4, sl
 80149a2:	2205      	movs	r2, #5
 80149a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149a8:	4851      	ldr	r0, [pc, #324]	; (8014af0 <_svfiprintf_r+0x1ec>)
 80149aa:	f7eb fcb1 	bl	8000310 <memchr>
 80149ae:	9a04      	ldr	r2, [sp, #16]
 80149b0:	b9d8      	cbnz	r0, 80149ea <_svfiprintf_r+0xe6>
 80149b2:	06d0      	lsls	r0, r2, #27
 80149b4:	bf44      	itt	mi
 80149b6:	2320      	movmi	r3, #32
 80149b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149bc:	0711      	lsls	r1, r2, #28
 80149be:	bf44      	itt	mi
 80149c0:	232b      	movmi	r3, #43	; 0x2b
 80149c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149c6:	f89a 3000 	ldrb.w	r3, [sl]
 80149ca:	2b2a      	cmp	r3, #42	; 0x2a
 80149cc:	d015      	beq.n	80149fa <_svfiprintf_r+0xf6>
 80149ce:	9a07      	ldr	r2, [sp, #28]
 80149d0:	4654      	mov	r4, sl
 80149d2:	2000      	movs	r0, #0
 80149d4:	f04f 0c0a 	mov.w	ip, #10
 80149d8:	4621      	mov	r1, r4
 80149da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149de:	3b30      	subs	r3, #48	; 0x30
 80149e0:	2b09      	cmp	r3, #9
 80149e2:	d94e      	bls.n	8014a82 <_svfiprintf_r+0x17e>
 80149e4:	b1b0      	cbz	r0, 8014a14 <_svfiprintf_r+0x110>
 80149e6:	9207      	str	r2, [sp, #28]
 80149e8:	e014      	b.n	8014a14 <_svfiprintf_r+0x110>
 80149ea:	eba0 0308 	sub.w	r3, r0, r8
 80149ee:	fa09 f303 	lsl.w	r3, r9, r3
 80149f2:	4313      	orrs	r3, r2
 80149f4:	9304      	str	r3, [sp, #16]
 80149f6:	46a2      	mov	sl, r4
 80149f8:	e7d2      	b.n	80149a0 <_svfiprintf_r+0x9c>
 80149fa:	9b03      	ldr	r3, [sp, #12]
 80149fc:	1d19      	adds	r1, r3, #4
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	9103      	str	r1, [sp, #12]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	bfbb      	ittet	lt
 8014a06:	425b      	neglt	r3, r3
 8014a08:	f042 0202 	orrlt.w	r2, r2, #2
 8014a0c:	9307      	strge	r3, [sp, #28]
 8014a0e:	9307      	strlt	r3, [sp, #28]
 8014a10:	bfb8      	it	lt
 8014a12:	9204      	strlt	r2, [sp, #16]
 8014a14:	7823      	ldrb	r3, [r4, #0]
 8014a16:	2b2e      	cmp	r3, #46	; 0x2e
 8014a18:	d10c      	bne.n	8014a34 <_svfiprintf_r+0x130>
 8014a1a:	7863      	ldrb	r3, [r4, #1]
 8014a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8014a1e:	d135      	bne.n	8014a8c <_svfiprintf_r+0x188>
 8014a20:	9b03      	ldr	r3, [sp, #12]
 8014a22:	1d1a      	adds	r2, r3, #4
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	9203      	str	r2, [sp, #12]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	bfb8      	it	lt
 8014a2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014a30:	3402      	adds	r4, #2
 8014a32:	9305      	str	r3, [sp, #20]
 8014a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014b00 <_svfiprintf_r+0x1fc>
 8014a38:	7821      	ldrb	r1, [r4, #0]
 8014a3a:	2203      	movs	r2, #3
 8014a3c:	4650      	mov	r0, sl
 8014a3e:	f7eb fc67 	bl	8000310 <memchr>
 8014a42:	b140      	cbz	r0, 8014a56 <_svfiprintf_r+0x152>
 8014a44:	2340      	movs	r3, #64	; 0x40
 8014a46:	eba0 000a 	sub.w	r0, r0, sl
 8014a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8014a4e:	9b04      	ldr	r3, [sp, #16]
 8014a50:	4303      	orrs	r3, r0
 8014a52:	3401      	adds	r4, #1
 8014a54:	9304      	str	r3, [sp, #16]
 8014a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a5a:	4826      	ldr	r0, [pc, #152]	; (8014af4 <_svfiprintf_r+0x1f0>)
 8014a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a60:	2206      	movs	r2, #6
 8014a62:	f7eb fc55 	bl	8000310 <memchr>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d038      	beq.n	8014adc <_svfiprintf_r+0x1d8>
 8014a6a:	4b23      	ldr	r3, [pc, #140]	; (8014af8 <_svfiprintf_r+0x1f4>)
 8014a6c:	bb1b      	cbnz	r3, 8014ab6 <_svfiprintf_r+0x1b2>
 8014a6e:	9b03      	ldr	r3, [sp, #12]
 8014a70:	3307      	adds	r3, #7
 8014a72:	f023 0307 	bic.w	r3, r3, #7
 8014a76:	3308      	adds	r3, #8
 8014a78:	9303      	str	r3, [sp, #12]
 8014a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7c:	4433      	add	r3, r6
 8014a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a80:	e767      	b.n	8014952 <_svfiprintf_r+0x4e>
 8014a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a86:	460c      	mov	r4, r1
 8014a88:	2001      	movs	r0, #1
 8014a8a:	e7a5      	b.n	80149d8 <_svfiprintf_r+0xd4>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	3401      	adds	r4, #1
 8014a90:	9305      	str	r3, [sp, #20]
 8014a92:	4619      	mov	r1, r3
 8014a94:	f04f 0c0a 	mov.w	ip, #10
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a9e:	3a30      	subs	r2, #48	; 0x30
 8014aa0:	2a09      	cmp	r2, #9
 8014aa2:	d903      	bls.n	8014aac <_svfiprintf_r+0x1a8>
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d0c5      	beq.n	8014a34 <_svfiprintf_r+0x130>
 8014aa8:	9105      	str	r1, [sp, #20]
 8014aaa:	e7c3      	b.n	8014a34 <_svfiprintf_r+0x130>
 8014aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	e7f0      	b.n	8014a98 <_svfiprintf_r+0x194>
 8014ab6:	ab03      	add	r3, sp, #12
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	462a      	mov	r2, r5
 8014abc:	4b0f      	ldr	r3, [pc, #60]	; (8014afc <_svfiprintf_r+0x1f8>)
 8014abe:	a904      	add	r1, sp, #16
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	f3af 8000 	nop.w
 8014ac6:	1c42      	adds	r2, r0, #1
 8014ac8:	4606      	mov	r6, r0
 8014aca:	d1d6      	bne.n	8014a7a <_svfiprintf_r+0x176>
 8014acc:	89ab      	ldrh	r3, [r5, #12]
 8014ace:	065b      	lsls	r3, r3, #25
 8014ad0:	f53f af2c 	bmi.w	801492c <_svfiprintf_r+0x28>
 8014ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ad6:	b01d      	add	sp, #116	; 0x74
 8014ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014adc:	ab03      	add	r3, sp, #12
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	462a      	mov	r2, r5
 8014ae2:	4b06      	ldr	r3, [pc, #24]	; (8014afc <_svfiprintf_r+0x1f8>)
 8014ae4:	a904      	add	r1, sp, #16
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	f000 f87a 	bl	8014be0 <_printf_i>
 8014aec:	e7eb      	b.n	8014ac6 <_svfiprintf_r+0x1c2>
 8014aee:	bf00      	nop
 8014af0:	080172f0 	.word	0x080172f0
 8014af4:	080172fa 	.word	0x080172fa
 8014af8:	00000000 	.word	0x00000000
 8014afc:	0801484d 	.word	0x0801484d
 8014b00:	080172f6 	.word	0x080172f6

08014b04 <_printf_common>:
 8014b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b08:	4616      	mov	r6, r2
 8014b0a:	4699      	mov	r9, r3
 8014b0c:	688a      	ldr	r2, [r1, #8]
 8014b0e:	690b      	ldr	r3, [r1, #16]
 8014b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b14:	4293      	cmp	r3, r2
 8014b16:	bfb8      	it	lt
 8014b18:	4613      	movlt	r3, r2
 8014b1a:	6033      	str	r3, [r6, #0]
 8014b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b20:	4607      	mov	r7, r0
 8014b22:	460c      	mov	r4, r1
 8014b24:	b10a      	cbz	r2, 8014b2a <_printf_common+0x26>
 8014b26:	3301      	adds	r3, #1
 8014b28:	6033      	str	r3, [r6, #0]
 8014b2a:	6823      	ldr	r3, [r4, #0]
 8014b2c:	0699      	lsls	r1, r3, #26
 8014b2e:	bf42      	ittt	mi
 8014b30:	6833      	ldrmi	r3, [r6, #0]
 8014b32:	3302      	addmi	r3, #2
 8014b34:	6033      	strmi	r3, [r6, #0]
 8014b36:	6825      	ldr	r5, [r4, #0]
 8014b38:	f015 0506 	ands.w	r5, r5, #6
 8014b3c:	d106      	bne.n	8014b4c <_printf_common+0x48>
 8014b3e:	f104 0a19 	add.w	sl, r4, #25
 8014b42:	68e3      	ldr	r3, [r4, #12]
 8014b44:	6832      	ldr	r2, [r6, #0]
 8014b46:	1a9b      	subs	r3, r3, r2
 8014b48:	42ab      	cmp	r3, r5
 8014b4a:	dc26      	bgt.n	8014b9a <_printf_common+0x96>
 8014b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014b50:	1e13      	subs	r3, r2, #0
 8014b52:	6822      	ldr	r2, [r4, #0]
 8014b54:	bf18      	it	ne
 8014b56:	2301      	movne	r3, #1
 8014b58:	0692      	lsls	r2, r2, #26
 8014b5a:	d42b      	bmi.n	8014bb4 <_printf_common+0xb0>
 8014b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b60:	4649      	mov	r1, r9
 8014b62:	4638      	mov	r0, r7
 8014b64:	47c0      	blx	r8
 8014b66:	3001      	adds	r0, #1
 8014b68:	d01e      	beq.n	8014ba8 <_printf_common+0xa4>
 8014b6a:	6823      	ldr	r3, [r4, #0]
 8014b6c:	68e5      	ldr	r5, [r4, #12]
 8014b6e:	6832      	ldr	r2, [r6, #0]
 8014b70:	f003 0306 	and.w	r3, r3, #6
 8014b74:	2b04      	cmp	r3, #4
 8014b76:	bf08      	it	eq
 8014b78:	1aad      	subeq	r5, r5, r2
 8014b7a:	68a3      	ldr	r3, [r4, #8]
 8014b7c:	6922      	ldr	r2, [r4, #16]
 8014b7e:	bf0c      	ite	eq
 8014b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b84:	2500      	movne	r5, #0
 8014b86:	4293      	cmp	r3, r2
 8014b88:	bfc4      	itt	gt
 8014b8a:	1a9b      	subgt	r3, r3, r2
 8014b8c:	18ed      	addgt	r5, r5, r3
 8014b8e:	2600      	movs	r6, #0
 8014b90:	341a      	adds	r4, #26
 8014b92:	42b5      	cmp	r5, r6
 8014b94:	d11a      	bne.n	8014bcc <_printf_common+0xc8>
 8014b96:	2000      	movs	r0, #0
 8014b98:	e008      	b.n	8014bac <_printf_common+0xa8>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	4652      	mov	r2, sl
 8014b9e:	4649      	mov	r1, r9
 8014ba0:	4638      	mov	r0, r7
 8014ba2:	47c0      	blx	r8
 8014ba4:	3001      	adds	r0, #1
 8014ba6:	d103      	bne.n	8014bb0 <_printf_common+0xac>
 8014ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb0:	3501      	adds	r5, #1
 8014bb2:	e7c6      	b.n	8014b42 <_printf_common+0x3e>
 8014bb4:	18e1      	adds	r1, r4, r3
 8014bb6:	1c5a      	adds	r2, r3, #1
 8014bb8:	2030      	movs	r0, #48	; 0x30
 8014bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014bbe:	4422      	add	r2, r4
 8014bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014bc8:	3302      	adds	r3, #2
 8014bca:	e7c7      	b.n	8014b5c <_printf_common+0x58>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	4622      	mov	r2, r4
 8014bd0:	4649      	mov	r1, r9
 8014bd2:	4638      	mov	r0, r7
 8014bd4:	47c0      	blx	r8
 8014bd6:	3001      	adds	r0, #1
 8014bd8:	d0e6      	beq.n	8014ba8 <_printf_common+0xa4>
 8014bda:	3601      	adds	r6, #1
 8014bdc:	e7d9      	b.n	8014b92 <_printf_common+0x8e>
	...

08014be0 <_printf_i>:
 8014be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014be4:	7e0f      	ldrb	r7, [r1, #24]
 8014be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014be8:	2f78      	cmp	r7, #120	; 0x78
 8014bea:	4691      	mov	r9, r2
 8014bec:	4680      	mov	r8, r0
 8014bee:	460c      	mov	r4, r1
 8014bf0:	469a      	mov	sl, r3
 8014bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014bf6:	d807      	bhi.n	8014c08 <_printf_i+0x28>
 8014bf8:	2f62      	cmp	r7, #98	; 0x62
 8014bfa:	d80a      	bhi.n	8014c12 <_printf_i+0x32>
 8014bfc:	2f00      	cmp	r7, #0
 8014bfe:	f000 80d8 	beq.w	8014db2 <_printf_i+0x1d2>
 8014c02:	2f58      	cmp	r7, #88	; 0x58
 8014c04:	f000 80a3 	beq.w	8014d4e <_printf_i+0x16e>
 8014c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014c10:	e03a      	b.n	8014c88 <_printf_i+0xa8>
 8014c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014c16:	2b15      	cmp	r3, #21
 8014c18:	d8f6      	bhi.n	8014c08 <_printf_i+0x28>
 8014c1a:	a101      	add	r1, pc, #4	; (adr r1, 8014c20 <_printf_i+0x40>)
 8014c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c20:	08014c79 	.word	0x08014c79
 8014c24:	08014c8d 	.word	0x08014c8d
 8014c28:	08014c09 	.word	0x08014c09
 8014c2c:	08014c09 	.word	0x08014c09
 8014c30:	08014c09 	.word	0x08014c09
 8014c34:	08014c09 	.word	0x08014c09
 8014c38:	08014c8d 	.word	0x08014c8d
 8014c3c:	08014c09 	.word	0x08014c09
 8014c40:	08014c09 	.word	0x08014c09
 8014c44:	08014c09 	.word	0x08014c09
 8014c48:	08014c09 	.word	0x08014c09
 8014c4c:	08014d99 	.word	0x08014d99
 8014c50:	08014cbd 	.word	0x08014cbd
 8014c54:	08014d7b 	.word	0x08014d7b
 8014c58:	08014c09 	.word	0x08014c09
 8014c5c:	08014c09 	.word	0x08014c09
 8014c60:	08014dbb 	.word	0x08014dbb
 8014c64:	08014c09 	.word	0x08014c09
 8014c68:	08014cbd 	.word	0x08014cbd
 8014c6c:	08014c09 	.word	0x08014c09
 8014c70:	08014c09 	.word	0x08014c09
 8014c74:	08014d83 	.word	0x08014d83
 8014c78:	682b      	ldr	r3, [r5, #0]
 8014c7a:	1d1a      	adds	r2, r3, #4
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	602a      	str	r2, [r5, #0]
 8014c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e0a3      	b.n	8014dd4 <_printf_i+0x1f4>
 8014c8c:	6820      	ldr	r0, [r4, #0]
 8014c8e:	6829      	ldr	r1, [r5, #0]
 8014c90:	0606      	lsls	r6, r0, #24
 8014c92:	f101 0304 	add.w	r3, r1, #4
 8014c96:	d50a      	bpl.n	8014cae <_printf_i+0xce>
 8014c98:	680e      	ldr	r6, [r1, #0]
 8014c9a:	602b      	str	r3, [r5, #0]
 8014c9c:	2e00      	cmp	r6, #0
 8014c9e:	da03      	bge.n	8014ca8 <_printf_i+0xc8>
 8014ca0:	232d      	movs	r3, #45	; 0x2d
 8014ca2:	4276      	negs	r6, r6
 8014ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ca8:	485e      	ldr	r0, [pc, #376]	; (8014e24 <_printf_i+0x244>)
 8014caa:	230a      	movs	r3, #10
 8014cac:	e019      	b.n	8014ce2 <_printf_i+0x102>
 8014cae:	680e      	ldr	r6, [r1, #0]
 8014cb0:	602b      	str	r3, [r5, #0]
 8014cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014cb6:	bf18      	it	ne
 8014cb8:	b236      	sxthne	r6, r6
 8014cba:	e7ef      	b.n	8014c9c <_printf_i+0xbc>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	6820      	ldr	r0, [r4, #0]
 8014cc0:	1d19      	adds	r1, r3, #4
 8014cc2:	6029      	str	r1, [r5, #0]
 8014cc4:	0601      	lsls	r1, r0, #24
 8014cc6:	d501      	bpl.n	8014ccc <_printf_i+0xec>
 8014cc8:	681e      	ldr	r6, [r3, #0]
 8014cca:	e002      	b.n	8014cd2 <_printf_i+0xf2>
 8014ccc:	0646      	lsls	r6, r0, #25
 8014cce:	d5fb      	bpl.n	8014cc8 <_printf_i+0xe8>
 8014cd0:	881e      	ldrh	r6, [r3, #0]
 8014cd2:	4854      	ldr	r0, [pc, #336]	; (8014e24 <_printf_i+0x244>)
 8014cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8014cd6:	bf0c      	ite	eq
 8014cd8:	2308      	moveq	r3, #8
 8014cda:	230a      	movne	r3, #10
 8014cdc:	2100      	movs	r1, #0
 8014cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ce2:	6865      	ldr	r5, [r4, #4]
 8014ce4:	60a5      	str	r5, [r4, #8]
 8014ce6:	2d00      	cmp	r5, #0
 8014ce8:	bfa2      	ittt	ge
 8014cea:	6821      	ldrge	r1, [r4, #0]
 8014cec:	f021 0104 	bicge.w	r1, r1, #4
 8014cf0:	6021      	strge	r1, [r4, #0]
 8014cf2:	b90e      	cbnz	r6, 8014cf8 <_printf_i+0x118>
 8014cf4:	2d00      	cmp	r5, #0
 8014cf6:	d04d      	beq.n	8014d94 <_printf_i+0x1b4>
 8014cf8:	4615      	mov	r5, r2
 8014cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8014cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8014d02:	5dc7      	ldrb	r7, [r0, r7]
 8014d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014d08:	4637      	mov	r7, r6
 8014d0a:	42bb      	cmp	r3, r7
 8014d0c:	460e      	mov	r6, r1
 8014d0e:	d9f4      	bls.n	8014cfa <_printf_i+0x11a>
 8014d10:	2b08      	cmp	r3, #8
 8014d12:	d10b      	bne.n	8014d2c <_printf_i+0x14c>
 8014d14:	6823      	ldr	r3, [r4, #0]
 8014d16:	07de      	lsls	r6, r3, #31
 8014d18:	d508      	bpl.n	8014d2c <_printf_i+0x14c>
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	6861      	ldr	r1, [r4, #4]
 8014d1e:	4299      	cmp	r1, r3
 8014d20:	bfde      	ittt	le
 8014d22:	2330      	movle	r3, #48	; 0x30
 8014d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014d2c:	1b52      	subs	r2, r2, r5
 8014d2e:	6122      	str	r2, [r4, #16]
 8014d30:	f8cd a000 	str.w	sl, [sp]
 8014d34:	464b      	mov	r3, r9
 8014d36:	aa03      	add	r2, sp, #12
 8014d38:	4621      	mov	r1, r4
 8014d3a:	4640      	mov	r0, r8
 8014d3c:	f7ff fee2 	bl	8014b04 <_printf_common>
 8014d40:	3001      	adds	r0, #1
 8014d42:	d14c      	bne.n	8014dde <_printf_i+0x1fe>
 8014d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d48:	b004      	add	sp, #16
 8014d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d4e:	4835      	ldr	r0, [pc, #212]	; (8014e24 <_printf_i+0x244>)
 8014d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014d54:	6829      	ldr	r1, [r5, #0]
 8014d56:	6823      	ldr	r3, [r4, #0]
 8014d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8014d5c:	6029      	str	r1, [r5, #0]
 8014d5e:	061d      	lsls	r5, r3, #24
 8014d60:	d514      	bpl.n	8014d8c <_printf_i+0x1ac>
 8014d62:	07df      	lsls	r7, r3, #31
 8014d64:	bf44      	itt	mi
 8014d66:	f043 0320 	orrmi.w	r3, r3, #32
 8014d6a:	6023      	strmi	r3, [r4, #0]
 8014d6c:	b91e      	cbnz	r6, 8014d76 <_printf_i+0x196>
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	f023 0320 	bic.w	r3, r3, #32
 8014d74:	6023      	str	r3, [r4, #0]
 8014d76:	2310      	movs	r3, #16
 8014d78:	e7b0      	b.n	8014cdc <_printf_i+0xfc>
 8014d7a:	6823      	ldr	r3, [r4, #0]
 8014d7c:	f043 0320 	orr.w	r3, r3, #32
 8014d80:	6023      	str	r3, [r4, #0]
 8014d82:	2378      	movs	r3, #120	; 0x78
 8014d84:	4828      	ldr	r0, [pc, #160]	; (8014e28 <_printf_i+0x248>)
 8014d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d8a:	e7e3      	b.n	8014d54 <_printf_i+0x174>
 8014d8c:	0659      	lsls	r1, r3, #25
 8014d8e:	bf48      	it	mi
 8014d90:	b2b6      	uxthmi	r6, r6
 8014d92:	e7e6      	b.n	8014d62 <_printf_i+0x182>
 8014d94:	4615      	mov	r5, r2
 8014d96:	e7bb      	b.n	8014d10 <_printf_i+0x130>
 8014d98:	682b      	ldr	r3, [r5, #0]
 8014d9a:	6826      	ldr	r6, [r4, #0]
 8014d9c:	6961      	ldr	r1, [r4, #20]
 8014d9e:	1d18      	adds	r0, r3, #4
 8014da0:	6028      	str	r0, [r5, #0]
 8014da2:	0635      	lsls	r5, r6, #24
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	d501      	bpl.n	8014dac <_printf_i+0x1cc>
 8014da8:	6019      	str	r1, [r3, #0]
 8014daa:	e002      	b.n	8014db2 <_printf_i+0x1d2>
 8014dac:	0670      	lsls	r0, r6, #25
 8014dae:	d5fb      	bpl.n	8014da8 <_printf_i+0x1c8>
 8014db0:	8019      	strh	r1, [r3, #0]
 8014db2:	2300      	movs	r3, #0
 8014db4:	6123      	str	r3, [r4, #16]
 8014db6:	4615      	mov	r5, r2
 8014db8:	e7ba      	b.n	8014d30 <_printf_i+0x150>
 8014dba:	682b      	ldr	r3, [r5, #0]
 8014dbc:	1d1a      	adds	r2, r3, #4
 8014dbe:	602a      	str	r2, [r5, #0]
 8014dc0:	681d      	ldr	r5, [r3, #0]
 8014dc2:	6862      	ldr	r2, [r4, #4]
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f7eb faa2 	bl	8000310 <memchr>
 8014dcc:	b108      	cbz	r0, 8014dd2 <_printf_i+0x1f2>
 8014dce:	1b40      	subs	r0, r0, r5
 8014dd0:	6060      	str	r0, [r4, #4]
 8014dd2:	6863      	ldr	r3, [r4, #4]
 8014dd4:	6123      	str	r3, [r4, #16]
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ddc:	e7a8      	b.n	8014d30 <_printf_i+0x150>
 8014dde:	6923      	ldr	r3, [r4, #16]
 8014de0:	462a      	mov	r2, r5
 8014de2:	4649      	mov	r1, r9
 8014de4:	4640      	mov	r0, r8
 8014de6:	47d0      	blx	sl
 8014de8:	3001      	adds	r0, #1
 8014dea:	d0ab      	beq.n	8014d44 <_printf_i+0x164>
 8014dec:	6823      	ldr	r3, [r4, #0]
 8014dee:	079b      	lsls	r3, r3, #30
 8014df0:	d413      	bmi.n	8014e1a <_printf_i+0x23a>
 8014df2:	68e0      	ldr	r0, [r4, #12]
 8014df4:	9b03      	ldr	r3, [sp, #12]
 8014df6:	4298      	cmp	r0, r3
 8014df8:	bfb8      	it	lt
 8014dfa:	4618      	movlt	r0, r3
 8014dfc:	e7a4      	b.n	8014d48 <_printf_i+0x168>
 8014dfe:	2301      	movs	r3, #1
 8014e00:	4632      	mov	r2, r6
 8014e02:	4649      	mov	r1, r9
 8014e04:	4640      	mov	r0, r8
 8014e06:	47d0      	blx	sl
 8014e08:	3001      	adds	r0, #1
 8014e0a:	d09b      	beq.n	8014d44 <_printf_i+0x164>
 8014e0c:	3501      	adds	r5, #1
 8014e0e:	68e3      	ldr	r3, [r4, #12]
 8014e10:	9903      	ldr	r1, [sp, #12]
 8014e12:	1a5b      	subs	r3, r3, r1
 8014e14:	42ab      	cmp	r3, r5
 8014e16:	dcf2      	bgt.n	8014dfe <_printf_i+0x21e>
 8014e18:	e7eb      	b.n	8014df2 <_printf_i+0x212>
 8014e1a:	2500      	movs	r5, #0
 8014e1c:	f104 0619 	add.w	r6, r4, #25
 8014e20:	e7f5      	b.n	8014e0e <_printf_i+0x22e>
 8014e22:	bf00      	nop
 8014e24:	08017301 	.word	0x08017301
 8014e28:	08017312 	.word	0x08017312

08014e2c <__retarget_lock_acquire_recursive>:
 8014e2c:	4770      	bx	lr

08014e2e <__retarget_lock_release_recursive>:
 8014e2e:	4770      	bx	lr

08014e30 <memmove>:
 8014e30:	4288      	cmp	r0, r1
 8014e32:	b510      	push	{r4, lr}
 8014e34:	eb01 0402 	add.w	r4, r1, r2
 8014e38:	d902      	bls.n	8014e40 <memmove+0x10>
 8014e3a:	4284      	cmp	r4, r0
 8014e3c:	4623      	mov	r3, r4
 8014e3e:	d807      	bhi.n	8014e50 <memmove+0x20>
 8014e40:	1e43      	subs	r3, r0, #1
 8014e42:	42a1      	cmp	r1, r4
 8014e44:	d008      	beq.n	8014e58 <memmove+0x28>
 8014e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e4e:	e7f8      	b.n	8014e42 <memmove+0x12>
 8014e50:	4402      	add	r2, r0
 8014e52:	4601      	mov	r1, r0
 8014e54:	428a      	cmp	r2, r1
 8014e56:	d100      	bne.n	8014e5a <memmove+0x2a>
 8014e58:	bd10      	pop	{r4, pc}
 8014e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e62:	e7f7      	b.n	8014e54 <memmove+0x24>

08014e64 <_realloc_r>:
 8014e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e68:	4680      	mov	r8, r0
 8014e6a:	4614      	mov	r4, r2
 8014e6c:	460e      	mov	r6, r1
 8014e6e:	b921      	cbnz	r1, 8014e7a <_realloc_r+0x16>
 8014e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e74:	4611      	mov	r1, r2
 8014e76:	f7ff bbf5 	b.w	8014664 <_malloc_r>
 8014e7a:	b92a      	cbnz	r2, 8014e88 <_realloc_r+0x24>
 8014e7c:	f7ff fb86 	bl	801458c <_free_r>
 8014e80:	4625      	mov	r5, r4
 8014e82:	4628      	mov	r0, r5
 8014e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e88:	f000 f81b 	bl	8014ec2 <_malloc_usable_size_r>
 8014e8c:	4284      	cmp	r4, r0
 8014e8e:	4607      	mov	r7, r0
 8014e90:	d802      	bhi.n	8014e98 <_realloc_r+0x34>
 8014e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e96:	d812      	bhi.n	8014ebe <_realloc_r+0x5a>
 8014e98:	4621      	mov	r1, r4
 8014e9a:	4640      	mov	r0, r8
 8014e9c:	f7ff fbe2 	bl	8014664 <_malloc_r>
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d0ed      	beq.n	8014e82 <_realloc_r+0x1e>
 8014ea6:	42bc      	cmp	r4, r7
 8014ea8:	4622      	mov	r2, r4
 8014eaa:	4631      	mov	r1, r6
 8014eac:	bf28      	it	cs
 8014eae:	463a      	movcs	r2, r7
 8014eb0:	f7ff fb56 	bl	8014560 <memcpy>
 8014eb4:	4631      	mov	r1, r6
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	f7ff fb68 	bl	801458c <_free_r>
 8014ebc:	e7e1      	b.n	8014e82 <_realloc_r+0x1e>
 8014ebe:	4635      	mov	r5, r6
 8014ec0:	e7df      	b.n	8014e82 <_realloc_r+0x1e>

08014ec2 <_malloc_usable_size_r>:
 8014ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ec6:	1f18      	subs	r0, r3, #4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	bfbc      	itt	lt
 8014ecc:	580b      	ldrlt	r3, [r1, r0]
 8014ece:	18c0      	addlt	r0, r0, r3
 8014ed0:	4770      	bx	lr
	...

08014ed4 <_init>:
 8014ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed6:	bf00      	nop
 8014ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eda:	bc08      	pop	{r3}
 8014edc:	469e      	mov	lr, r3
 8014ede:	4770      	bx	lr

08014ee0 <_fini>:
 8014ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ee2:	bf00      	nop
 8014ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ee6:	bc08      	pop	{r3}
 8014ee8:	469e      	mov	lr, r3
 8014eea:	4770      	bx	lr
