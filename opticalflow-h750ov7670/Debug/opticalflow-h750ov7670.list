
opticalflow-h750ov7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d13c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800d3d4  0800d3d4  0001d3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d4a0  0800d4a0  0001d4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  24000000  0800d4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000446b8  24000040  0800d4e8  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240446f8  0800d4e8  000246f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fbf1  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033d7  00000000  00000000  0003fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017c8  00000000  00000000  00043038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001690  00000000  00000000  00044800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038fd0  00000000  00000000  00045e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f816  00000000  00000000  0007ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a78d  00000000  00000000  0009e676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00208e03  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065e4  00000000  00000000  00208e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d3bc 	.word	0x0800d3bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800d3bc 	.word	0x0800d3bc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <OV7670_Init>:
static uint8_t mtx_yuv[]={0x80, 0x80, 0x00, 0x22, 0x5E, 0x80};
static uint8_t mtx_rgb[]={0xB3, 0xB3, 0x00, 0x3D, 0xB0, 0xE4};


void OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c, LPTIM_HandleTypeDef *p_hlptim)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
	sp_hdcmi=p_hdcmi;
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <OV7670_Init+0x34>)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi=p_hdma_dcmi;
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <OV7670_Init+0x38>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	6013      	str	r3, [r2, #0]
	sp_hi2c=p_hi2c;
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <OV7670_Init+0x3c>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
	sp_hlptim=p_hlptim;
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <OV7670_Init+0x40>)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2400005c 	.word	0x2400005c
 8000614:	24000060 	.word	0x24000060
 8000618:	24000064 	.word	0x24000064
 800061c:	24000068 	.word	0x24000068

08000620 <OV7670_Power>:

void OV7670_Power(uint8_t en)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if(en)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <OV7670_Power+0x1e>
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <OV7670_Power+0x38>)
 8000638:	f006 f9ca 	bl	80069d0 <HAL_GPIO_WritePin>
 800063c:	e005      	b.n	800064a <OV7670_Power+0x2a>
	else
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <OV7670_Power+0x38>)
 8000646:	f006 f9c3 	bl	80069d0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f002 f8dc 	bl	8002808 <HAL_Delay>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58020c00 	.word	0x58020c00

0800065c <OV7670_ResetHW>:

void OV7670_ResetHW(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <OV7670_ResetHW+0x2c>)
 8000668:	f006 f9b2 	bl	80069d0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f002 f8cb 	bl	8002808 <HAL_Delay>
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <OV7670_ResetHW+0x2c>)
 800067a:	f006 f9a9 	bl	80069d0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800067e:	2032      	movs	r0, #50	; 0x32
 8000680:	f002 f8c2 	bl	8002808 <HAL_Delay>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	58020c00 	.word	0x58020c00

0800068c <OV7670_XCLK>:

void OV7670_XCLK(uint8_t en)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	if(en)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d007      	beq.n	80006ac <OV7670_XCLK+0x20>
		HAL_LPTIM_PWM_Start(sp_hlptim, 6,3);//6 3 8mhz
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <OV7670_XCLK+0x34>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2203      	movs	r2, #3
 80006a2:	2106      	movs	r1, #6
 80006a4:	4618      	mov	r0, r3
 80006a6:	f007 f801 	bl	80076ac <HAL_LPTIM_PWM_Start>
	else
		HAL_LPTIM_PWM_Stop(sp_hlptim);
}
 80006aa:	e004      	b.n	80006b6 <OV7670_XCLK+0x2a>
		HAL_LPTIM_PWM_Stop(sp_hlptim);
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <OV7670_XCLK+0x34>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f007 f848 	bl	8007746 <HAL_LPTIM_PWM_Stop>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	24000068 	.word	0x24000068

080006c4 <OV7670_WriteSCCB>:

void OV7670_WriteSCCB(uint8_t regAddr, uint8_t val)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2]={regAddr, val};
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	733b      	strb	r3, [r7, #12]
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, (uint8_t *)txbuf, 2, OV7670_TIMEOUT);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <OV7670_WriteSCCB+0x38>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f107 020c 	add.w	r2, r7, #12
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2302      	movs	r3, #2
 80006ec:	2142      	movs	r1, #66	; 0x42
 80006ee:	f006 fa33 	bl	8006b58 <HAL_I2C_Master_Transmit>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000064 	.word	0x24000064

08000700 <OV7670_ReadSCCB>:

void OV7670_ReadSCCB(uint8_t regAddr, uint8_t *data)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, OV7670_TIMEOUT);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <OV7670_ReadSCCB+0x3c>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	1dfa      	adds	r2, r7, #7
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	2142      	movs	r1, #66	; 0x42
 800071c:	f006 fa1c 	bl	8006b58 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, OV7670_TIMEOUT);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <OV7670_ReadSCCB+0x3c>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	2142      	movs	r1, #66	; 0x42
 8000730:	f006 fb06 	bl	8006d40 <HAL_I2C_Master_Receive>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24000064 	.word	0x24000064

08000740 <OV7670_Start>:

void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <OV7670_Start+0x74>)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <OV7670_Start+0x78>)
 8000756:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <OV7670_Start+0x74>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d112      	bne.n	8000786 <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <OV7670_Start+0x7c>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <OV7670_Start+0x78>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <OV7670_Start+0x80>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <OV7670_Start+0x84>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	fb01 f303 	mul.w	r3, r1, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	da00      	bge.n	800077c <OV7670_Start+0x3c>
 800077a:	3301      	adds	r3, #1
 800077c:	105b      	asrs	r3, r3, #1
 800077e:	2102      	movs	r1, #2
 8000780:	f002 fa78 	bl	8002c74 <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 8000784:	e011      	b.n	80007aa <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <OV7670_Start+0x7c>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <OV7670_Start+0x78>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <OV7670_Start+0x80>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <OV7670_Start+0x84>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	fb01 f303 	mul.w	r3, r1, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	da00      	bge.n	80007a2 <OV7670_Start+0x62>
 80007a0:	3301      	adds	r3, #1
 80007a2:	105b      	asrs	r3, r3, #1
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 fa65 	bl	8002c74 <HAL_DCMI_Start_DMA>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2400006c 	.word	0x2400006c
 80007b8:	24000070 	.word	0x24000070
 80007bc:	2400005c 	.word	0x2400005c
 80007c0:	24000000 	.word	0x24000000
 80007c4:	24000002 	.word	0x24000002

080007c8 <OV7670_ResetSW>:
{
	HAL_DCMI_Stop(sp_hdcmi);
}

void OV7670_ResetSW(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	OV7670_WriteSCCB(REG_COM7, 0x80);
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	2012      	movs	r0, #18
 80007d0:	f7ff ff78 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(30);
 80007d4:	201e      	movs	r0, #30
 80007d6:	f002 f817 	bl	8002808 <HAL_Delay>
	OV7670_Config(defaults);
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <OV7670_ResetSW+0x24>)
 80007dc:	f000 f808 	bl	80007f0 <OV7670_Config>
	HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f002 f811 	bl	8002808 <HAL_Delay>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	0800d444 	.word	0x0800d444

080007f0 <OV7670_Config>:

void OV7670_Config(const uint8_t params[][2])
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e012      	b.n	8000824 <OV7670_Config+0x34>
	{
		OV7670_WriteSCCB(params[i][0], params[i][1]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	7818      	ldrb	r0, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	4619      	mov	r1, r3
 8000814:	f7ff ff56 	bl	80006c4 <OV7670_WriteSCCB>
		HAL_Delay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f001 fff5 	bl	8002808 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2bff      	cmp	r3, #255	; 0xff
 8000830:	d1e5      	bne.n	80007fe <OV7670_Config+0xe>
	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <OV7670_SetBrightness>:

void OV7670_SetBrightness(uint8_t brightness)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	if(brightness>=127)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b7e      	cmp	r3, #126	; 0x7e
 800084a:	d903      	bls.n	8000854 <OV7670_SetBrightness+0x18>
		brightness=brightness-127;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3b7f      	subs	r3, #127	; 0x7f
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e002      	b.n	800085a <OV7670_SetBrightness+0x1e>
	else
		brightness=255-brightness;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	43db      	mvns	r3, r3
 8000858:	71fb      	strb	r3, [r7, #7]

	OV7670_WriteSCCB(REG_BRIGHT, brightness);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4619      	mov	r1, r3
 800085e:	2055      	movs	r0, #85	; 0x55
 8000860:	f7ff ff30 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <OV7670_SetContrast>:

void OV7670_SetContrast(uint8_t contrast)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_CONTRAS, contrast);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4619      	mov	r1, r3
 800087a:	2056      	movs	r0, #86	; 0x56
 800087c:	f7ff ff22 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <OV7670_SetSaturation>:

void OV7670_SetSaturation(uint8_t saturation)//0-100, default 80
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	float temp=0.0f;
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	saturation+=20;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	3314      	adds	r3, #20
 800089c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	72fb      	strb	r3, [r7, #11]
 80008a2:	e03b      	b.n	800091c <OV7670_SetSaturation+0x94>
	{
		if(img_format==YUV422)temp=(float)mtx_yuv[i];
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <OV7670_SetSaturation+0xac>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <OV7670_SetSaturation+0x38>
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	4a22      	ldr	r2, [pc, #136]	; (8000938 <OV7670_SetSaturation+0xb0>)
 80008b0:	5cd3      	ldrb	r3, [r2, r3]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80008be:	e008      	b.n	80008d2 <OV7670_SetSaturation+0x4a>
		else temp=(float)mtx_rgb[i];
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <OV7670_SetSaturation+0xb4>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ce:	edc7 7a03 	vstr	s15, [r7, #12]
		temp*=saturation;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	edc7 7a03 	vstr	s15, [r7, #12]
		temp/=100;
 80008e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80008ec:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000940 <OV7670_SetSaturation+0xb8>
 80008f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f4:	edc7 7a03 	vstr	s15, [r7, #12]
		OV7670_WriteSCCB(REG_MTX1+i, (uint8_t)temp);
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	334f      	adds	r3, #79	; 0x4f
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000906:	edc7 7a00 	vstr	s15, [r7]
 800090a:	783a      	ldrb	r2, [r7, #0]
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fed7 	bl	80006c4 <OV7670_WriteSCCB>
	for(i=0;i<6;i++)
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	3301      	adds	r3, #1
 800091a:	72fb      	strb	r3, [r7, #11]
 800091c:	7afb      	ldrb	r3, [r7, #11]
 800091e:	2b05      	cmp	r3, #5
 8000920:	d9c0      	bls.n	80008a4 <OV7670_SetSaturation+0x1c>
	}
	OV7670_WriteSCCB(REG_MTX_SIGN, 0x9E);
 8000922:	219e      	movs	r1, #158	; 0x9e
 8000924:	2058      	movs	r0, #88	; 0x58
 8000926:	f7ff fecd 	bl	80006c4 <OV7670_WriteSCCB>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	24000074 	.word	0x24000074
 8000938:	24000004 	.word	0x24000004
 800093c:	2400000c 	.word	0x2400000c
 8000940:	42c80000 	.word	0x42c80000

08000944 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b06      	cmp	r3, #6
 8000952:	f200 808f 	bhi.w	8000a74 <OV7670_SetResolution+0x130>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <OV7670_SetResolution+0x18>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000979 	.word	0x08000979
 8000960:	0800099f 	.word	0x0800099f
 8000964:	080009c3 	.word	0x080009c3
 8000968:	080009e5 	.word	0x080009e5
 800096c:	08000a07 	.word	0x08000a07
 8000970:	08000a2d 	.word	0x08000a2d
 8000974:	08000a51 	.word	0x08000a51
	{
		case VGA:	//NOT TESTED
			OV7670_Config(RES_VGA);
 8000978:	4840      	ldr	r0, [pc, #256]	; (8000a7c <OV7670_SetResolution+0x138>)
 800097a:	f7ff ff39 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(158,14,10,490);
 800097e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8000982:	220a      	movs	r2, #10
 8000984:	210e      	movs	r1, #14
 8000986:	209e      	movs	r0, #158	; 0x9e
 8000988:	f000 fd2a 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=640;
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <OV7670_SetResolution+0x13c>)
 800098e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000992:	801a      	strh	r2, [r3, #0]
			img_height=480;
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000996:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800099a:	801a      	strh	r2, [r3, #0]
			break;
 800099c:	e06a      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 800099e:	483a      	ldr	r0, [pc, #232]	; (8000a88 <OV7670_SetResolution+0x144>)
 80009a0:	f7ff ff26 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 80009a4:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009a8:	220c      	movs	r2, #12
 80009aa:	2118      	movs	r1, #24
 80009ac:	20a8      	movs	r0, #168	; 0xa8
 80009ae:	f000 fd17 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=320;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009b8:	801a      	strh	r2, [r3, #0]
			img_height=240;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <OV7670_SetResolution+0x140>)
 80009bc:	22f0      	movs	r2, #240	; 0xf0
 80009be:	801a      	strh	r2, [r3, #0]
			break;
 80009c0:	e058      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 80009c2:	4832      	ldr	r0, [pc, #200]	; (8000a8c <OV7670_SetResolution+0x148>)
 80009c4:	f7ff ff14 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 80009c8:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009cc:	220c      	movs	r2, #12
 80009ce:	211e      	movs	r1, #30
 80009d0:	20ae      	movs	r0, #174	; 0xae
 80009d2:	f000 fd05 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=160;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009d8:	22a0      	movs	r2, #160	; 0xa0
 80009da:	801a      	strh	r2, [r3, #0]
			img_height=120;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <OV7670_SetResolution+0x140>)
 80009de:	2278      	movs	r2, #120	; 0x78
 80009e0:	801a      	strh	r2, [r3, #0]
			break;
 80009e2:	e047      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 80009e4:	482a      	ldr	r0, [pc, #168]	; (8000a90 <OV7670_SetResolution+0x14c>)
 80009e6:	f7ff ff03 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 80009ea:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009ee:	220c      	movs	r2, #12
 80009f0:	2134      	movs	r1, #52	; 0x34
 80009f2:	20c4      	movs	r0, #196	; 0xc4
 80009f4:	f000 fcf4 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=80;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009fa:	2250      	movs	r2, #80	; 0x50
 80009fc:	801a      	strh	r2, [r3, #0]
			img_height=60;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a00:	223c      	movs	r2, #60	; 0x3c
 8000a02:	801a      	strh	r2, [r3, #0]
			break;
 8000a04:	e036      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <OV7670_SetResolution+0x150>)
 8000a08:	f7ff fef2 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8000a0c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8000a10:	220c      	movs	r2, #12
 8000a12:	215e      	movs	r1, #94	; 0x5e
 8000a14:	20ae      	movs	r0, #174	; 0xae
 8000a16:	f000 fce3 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=352;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a1c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8000a20:	801a      	strh	r2, [r3, #0]
			img_height=288;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a24:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000a28:	801a      	strh	r2, [r3, #0]
			break;
 8000a2a:	e023      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8000a2c:	481a      	ldr	r0, [pc, #104]	; (8000a98 <OV7670_SetResolution+0x154>)
 8000a2e:	f7ff fedf 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 8000a32:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000a36:	220c      	movs	r2, #12
 8000a38:	2116      	movs	r1, #22
 8000a3a:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 8000a3e:	f000 fccf 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=176;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a44:	22b0      	movs	r2, #176	; 0xb0
 8000a46:	801a      	strh	r2, [r3, #0]
			img_height=144;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a4a:	2290      	movs	r2, #144	; 0x90
 8000a4c:	801a      	strh	r2, [r3, #0]
			break;
 8000a4e:	e011      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <OV7670_SetResolution+0x158>)
 8000a52:	f7ff fecd 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 8000a56:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	212a      	movs	r1, #42	; 0x2a
 8000a5e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8000a62:	f000 fcbd 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=88;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a68:	2258      	movs	r2, #88	; 0x58
 8000a6a:	801a      	strh	r2, [r3, #0]
			img_height=72;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a6e:	2248      	movs	r2, #72	; 0x48
 8000a70:	801a      	strh	r2, [r3, #0]
			break;
 8000a72:	bf00      	nop
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800d3d4 	.word	0x0800d3d4
 8000a80:	24000000 	.word	0x24000000
 8000a84:	24000002 	.word	0x24000002
 8000a88:	0800d3e4 	.word	0x0800d3e4
 8000a8c:	0800d3f4 	.word	0x0800d3f4
 8000a90:	0800d404 	.word	0x0800d404
 8000a94:	0800d414 	.word	0x0800d414
 8000a98:	0800d424 	.word	0x0800d424
 8000a9c:	0800d434 	.word	0x0800d434

08000aa0 <OV7670_SetColorFormat>:

void OV7670_SetColorFormat(Camera_format format)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_ReadSCCB(REG_COM7, &temp[0]);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2012      	movs	r0, #18
 8000ab2:	f7ff fe25 	bl	8000700 <OV7670_ReadSCCB>
	temp[0]&=0b11111010;
 8000ab6:	7b3b      	ldrb	r3, [r7, #12]
 8000ab8:	f023 0305 	bic.w	r3, r3, #5
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	733b      	strb	r3, [r7, #12]
	OV7670_ReadSCCB(REG_COM15, &temp[1]);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2040      	movs	r0, #64	; 0x40
 8000aca:	f7ff fe19 	bl	8000700 <OV7670_ReadSCCB>
	temp[1]&=0b00001111;
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f001 fe95 	bl	8002808 <HAL_Delay>
	switch(format)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <OV7670_SetColorFormat+0x4a>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d00e      	beq.n	8000b06 <OV7670_SetColorFormat+0x66>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
			//???
			img_format=RGB565;
			break;
	}
}
 8000ae8:	e021      	b.n	8000b2e <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x00);
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2012      	movs	r0, #18
 8000af0:	f7ff fde8 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x00);
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2040      	movs	r0, #64	; 0x40
 8000afa:	f7ff fde3 	bl	80006c4 <OV7670_WriteSCCB>
			img_format=YUV422;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <OV7670_SetColorFormat+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
			break;
 8000b04:	e013      	b.n	8000b2e <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x04);//RGB
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2012      	movs	r0, #18
 8000b12:	f7ff fdd7 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2040      	movs	r0, #64	; 0x40
 8000b22:	f7ff fdcf 	bl	80006c4 <OV7670_WriteSCCB>
			img_format=RGB565;
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <OV7670_SetColorFormat+0x98>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
			break;
 8000b2c:	bf00      	nop
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24000074 	.word	0x24000074

08000b3c <OV7670_AutoExposureMode>:

void OV7670_AutoExposureMode(Camera_state en)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000b4a:	f107 030f 	add.w	r3, r7, #15
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2013      	movs	r0, #19
 8000b52:	f7ff fdd5 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <OV7670_AutoExposureMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x01);	//enable AEC
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4619      	mov	r1, r3
 8000b66:	2013      	movs	r0, #19
 8000b68:	f7ff fdac 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
}
 8000b6c:	e007      	b.n	8000b7e <OV7670_AutoExposureMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	2013      	movs	r0, #19
 8000b7a:	f7ff fda3 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <OV7670_SetAECAlgorithm>:

void OV7670_SetAECAlgorithm(Camera_algorithm algorithm)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_HAECC7, &temp);
 8000b94:	f107 030f 	add.w	r3, r7, #15
 8000b98:	4619      	mov	r1, r3
 8000b9a:	20aa      	movs	r0, #170	; 0xaa
 8000b9c:	f7ff fdb0 	bl	8000700 <OV7670_ReadSCCB>

	if(algorithm)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d008      	beq.n	8000bb8 <OV7670_SetAECAlgorithm+0x32>

		OV7670_WriteSCCB(REG_HAECC7, temp | 0x80);// Histogram-based
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	20aa      	movs	r0, #170	; 0xaa
 8000bb2:	f7ff fd87 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
}
 8000bb6:	e007      	b.n	8000bc8 <OV7670_SetAECAlgorithm+0x42>
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	20aa      	movs	r0, #170	; 0xaa
 8000bc4:	f7ff fd7e 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <OV7670_SetExposureTime>:

void OV7670_SetExposureTime(uint16_t time) //AEC must be off
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	OV7670_WriteSCCB(REG_AECHH, (time>>10) & 0x3F);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	0a9b      	lsrs	r3, r3, #10
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2007      	movs	r0, #7
 8000bec:	f7ff fd6a 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_AECH, (time>>2) & 0xFF);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f7ff fd62 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_COM1, (time) & 0x03);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fd59 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <OV7670_SetGainCeiling>:

void OV7670_SetGainCeiling(Camera_gain value)//value 0-6 [2x-128x]
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM9, &temp);
 8000c28:	f107 030f 	add.w	r3, r7, #15
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2014      	movs	r0, #20
 8000c30:	f7ff fd66 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0x8F;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_COM9, temp | (value<<4));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2014      	movs	r0, #20
 8000c52:	f7ff fd37 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <OV7670_AutoGainMode>:

void OV7670_AutoGainMode(Camera_state en)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000c6c:	f107 030f 	add.w	r3, r7, #15
 8000c70:	4619      	mov	r1, r3
 8000c72:	2013      	movs	r0, #19
 8000c74:	f7ff fd44 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <OV7670_AutoGainMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x04); //enable AGC
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	2013      	movs	r0, #19
 8000c8a:	f7ff fd1b 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
}
 8000c8e:	e007      	b.n	8000ca0 <OV7670_AutoGainMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	f023 0304 	bic.w	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2013      	movs	r0, #19
 8000c9c:	f7ff fd12 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <OV7670_SetGain>:

void OV7670_SetGain(uint8_t gain)//value 0-7 [1x-128x], AGC must be off
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_VREF, &temp);
 8000cb6:	f107 030f 	add.w	r3, r7, #15
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f7ff fd1f 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0x3F;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]

	//According to OV7670/7171 implementation guide v1.0 - Table 4-1
	switch(gain)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b07      	cmp	r3, #7
 8000cd0:	d86b      	bhi.n	8000daa <OV7670_SetGain+0x102>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <OV7670_SetGain+0x30>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000cf9 	.word	0x08000cf9
 8000cdc:	08000d0d 	.word	0x08000d0d
 8000ce0:	08000d21 	.word	0x08000d21
 8000ce4:	08000d35 	.word	0x08000d35
 8000ce8:	08000d49 	.word	0x08000d49
 8000cec:	08000d5d 	.word	0x08000d5d
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000d91 	.word	0x08000d91
	{
		case 0: //1x
			OV7670_WriteSCCB(REG_GAIN, 0x00);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fce2 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4619      	mov	r1, r3
 8000d04:	2003      	movs	r0, #3
 8000d06:	f7ff fcdd 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d0a:	e04e      	b.n	8000daa <OV7670_SetGain+0x102>
		case 1: //2x
			OV7670_WriteSCCB(REG_GAIN, 0x10);
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fcd8 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f7ff fcd3 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d1e:	e044      	b.n	8000daa <OV7670_SetGain+0x102>
		case 2: //4x
			OV7670_WriteSCCB(REG_GAIN, 0x30);
 8000d20:	2130      	movs	r1, #48	; 0x30
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fcce 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fcc9 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d32:	e03a      	b.n	8000daa <OV7670_SetGain+0x102>
		case 3: //8x
			OV7670_WriteSCCB(REG_GAIN, 0x70);
 8000d34:	2170      	movs	r1, #112	; 0x70
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fcc4 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2003      	movs	r0, #3
 8000d42:	f7ff fcbf 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d46:	e030      	b.n	8000daa <OV7670_SetGain+0x102>
		case 4: //16x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d48:	21f0      	movs	r1, #240	; 0xf0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fcba 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff fcb5 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d5a:	e026      	b.n	8000daa <OV7670_SetGain+0x102>
		case 5: //32x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d5c:	21f0      	movs	r1, #240	; 0xf0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fcb0 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x40);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff fca8 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d74:	e019      	b.n	8000daa <OV7670_SetGain+0x102>
		case 6: //64x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d76:	21f0      	movs	r1, #240	; 0xf0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fca3 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f7ff fc9b 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d8e:	e00c      	b.n	8000daa <OV7670_SetGain+0x102>
		case 7: //~128x
			OV7670_WriteSCCB(REG_GAIN, 0xFF);
 8000d90:	21ff      	movs	r1, #255	; 0xff
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fc96 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	2003      	movs	r0, #3
 8000da4:	f7ff fc8e 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000da8:	bf00      	nop
	}
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop

08000db4 <OV7670_AutoWhiteBalanceMode>:

void OV7670_AutoWhiteBalanceMode(Camera_state en)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2013      	movs	r0, #19
 8000dca:	f7ff fc99 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <OV7670_AutoWhiteBalanceMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x02); //enable AWB
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2013      	movs	r0, #19
 8000de0:	f7ff fc70 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
}
 8000de4:	e007      	b.n	8000df6 <OV7670_AutoWhiteBalanceMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	f023 0302 	bic.w	r3, r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	2013      	movs	r0, #19
 8000df2:	f7ff fc67 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <OV7670_SetChannelsGain>:

void OV7670_SetChannelsGain(uint8_t r_ch, uint8_t g_ch, uint8_t b_ch) //AWB must be off
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	71bb      	strb	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
	OV7670_WriteSCCB(REG_RED, r_ch);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4619      	mov	r1, r3
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fc55 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_GGAIN, g_ch);
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	206a      	movs	r0, #106	; 0x6a
 8000e20:	f7ff fc50 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_BLUE, b_ch);
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	4619      	mov	r1, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fc4b 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <OV7670_ShowColorBar>:

void OV7670_ShowColorBar(Camera_state en)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM17, &temp);
 8000e44:	f107 030f 	add.w	r3, r7, #15
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2042      	movs	r0, #66	; 0x42
 8000e4c:	f7ff fc58 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <OV7670_ShowColorBar+0x32>
		OV7670_WriteSCCB(REG_COM17, temp | 0x08);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2042      	movs	r0, #66	; 0x42
 8000e62:	f7ff fc2f 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
}
 8000e66:	e007      	b.n	8000e78 <OV7670_ShowColorBar+0x42>
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f023 0308 	bic.w	r3, r3, #8
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	2042      	movs	r0, #66	; 0x42
 8000e74:	f7ff fc26 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <OV7670_FlipHorizontal>:

void OV7670_FlipHorizontal(Camera_state flipH)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000e8e:	f107 030f 	add.w	r3, r7, #15
 8000e92:	4619      	mov	r1, r3
 8000e94:	201e      	movs	r0, #30
 8000e96:	f7ff fc33 	bl	8000700 <OV7670_ReadSCCB>

	if(flipH)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <OV7670_FlipHorizontal+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x20);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	201e      	movs	r0, #30
 8000eac:	f7ff fc0a 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
}
 8000eb0:	e007      	b.n	8000ec2 <OV7670_FlipHorizontal+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f023 0320 	bic.w	r3, r3, #32
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	201e      	movs	r0, #30
 8000ebe:	f7ff fc01 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <OV7670_FlipVertical>:

void OV7670_FlipVertical(Camera_state flipV)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	4619      	mov	r1, r3
 8000ede:	201e      	movs	r0, #30
 8000ee0:	f7ff fc0e 	bl	8000700 <OV7670_ReadSCCB>

	if(flipV)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <OV7670_FlipVertical+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x10);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	201e      	movs	r0, #30
 8000ef6:	f7ff fbe5 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
}
 8000efa:	e007      	b.n	8000f0c <OV7670_FlipVertical+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f023 0310 	bic.w	r3, r3, #16
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	201e      	movs	r0, #30
 8000f08:	f7ff fbdc 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <OV7670_NightMode>:

void OV7670_NightMode(Camera_state en,	Camera_fps min_fps)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM11, &temp);
 8000f28:	f107 030f 	add.w	r3, r7, #15
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	203b      	movs	r0, #59	; 0x3b
 8000f30:	f7ff fbe6 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d011      	beq.n	8000f5e <OV7670_NightMode+0x4a>
	{
		temp|=(min_fps<<5);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	015b      	lsls	r3, r3, #5
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	73fb      	strb	r3, [r7, #15]
		OV7670_WriteSCCB(REG_COM11, temp | 0x80);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	203b      	movs	r0, #59	; 0x3b
 8000f58:	f7ff fbb4 	bl	80006c4 <OV7670_WriteSCCB>
	}
	else
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
}
 8000f5c:	e007      	b.n	8000f6e <OV7670_NightMode+0x5a>
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	203b      	movs	r0, #59	; 0x3b
 8000f6a:	f7ff fbab 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <OV7670_AutoSharpness>:

void OV7670_AutoSharpness(Camera_state en)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8000f84:	f107 030f 	add.w	r3, r7, #15
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2041      	movs	r0, #65	; 0x41
 8000f8c:	f7ff fbb8 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <OV7670_AutoSharpness+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x20);// enable Auto Sharpness
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2041      	movs	r0, #65	; 0x41
 8000fa2:	f7ff fb8f 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
}
 8000fa6:	e007      	b.n	8000fb8 <OV7670_AutoSharpness+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f023 0320 	bic.w	r3, r3, #32
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2041      	movs	r0, #65	; 0x41
 8000fb4:	f7ff fb86 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <OV7670_SetSharpness>:

void OV7670_SetSharpness(uint8_t sharpness)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_EDGE, &temp);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	203f      	movs	r0, #63	; 0x3f
 8000fd6:	f7ff fb93 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0xE0;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f023 031f 	bic.w	r3, r3, #31
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_EDGE, temp | sharpness);
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	203f      	movs	r0, #63	; 0x3f
 8000ff0:	f7ff fb68 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <OV7670_AutoDeNoise>:

void OV7670_AutoDeNoise(Camera_state en)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 800100a:	f107 030f 	add.w	r3, r7, #15
 800100e:	4619      	mov	r1, r3
 8001010:	2041      	movs	r0, #65	; 0x41
 8001012:	f7ff fb75 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <OV7670_AutoDeNoise+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x10);// enable Auto Sharpness
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	2041      	movs	r0, #65	; 0x41
 8001028:	f7ff fb4c 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
}
 800102c:	e007      	b.n	800103e <OV7670_AutoDeNoise+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f023 0310 	bic.w	r3, r3, #16
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	2041      	movs	r0, #65	; 0x41
 800103a:	f7ff fb43 	bl	80006c4 <OV7670_WriteSCCB>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <OV7670_SetDeNoiseStrength>:

void OV7670_SetDeNoiseStrength(uint8_t strength)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_DNSTH, strength);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4619      	mov	r1, r3
 8001054:	204c      	movs	r0, #76	; 0x4c
 8001056:	f7ff fb35 	bl	80006c4 <OV7670_WriteSCCB>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <OV7670_BandingFilter>:

void OV7670_BandingFilter(Camera_state en, Camera_filter filter)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	460a      	mov	r2, r1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4613      	mov	r3, r2
 8001070:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001076:	f107 030f 	add.w	r3, r7, #15
 800107a:	4619      	mov	r1, r3
 800107c:	2013      	movs	r0, #19
 800107e:	f7ff fb3f 	bl	8000700 <OV7670_ReadSCCB>
	if(en)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03f      	beq.n	8001108 <OV7670_BandingFilter+0xa6>
	{
		OV7670_WriteSCCB(REG_BD50ST, BF_50Hz_VALUE); //50Hz banding filter
 8001088:	21cc      	movs	r1, #204	; 0xcc
 800108a:	209d      	movs	r0, #157	; 0x9d
 800108c:	f7ff fb1a 	bl	80006c4 <OV7670_WriteSCCB>
		OV7670_WriteSCCB(REG_BD60ST, BF_60Hz_VALUE); //60Hz banding filter
 8001090:	21aa      	movs	r1, #170	; 0xaa
 8001092:	209e      	movs	r0, #158	; 0x9e
 8001094:	f7ff fb16 	bl	80006c4 <OV7670_WriteSCCB>

		OV7670_WriteSCCB(REG_COM8, temp | 0x20); //banding filter enable
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	2013      	movs	r0, #19
 80010a4:	f7ff fb0e 	bl	80006c4 <OV7670_WriteSCCB>

		OV7670_ReadSCCB(REG_COM11, &temp);
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	4619      	mov	r1, r3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f7ff fb26 	bl	8000700 <OV7670_ReadSCCB>
		temp&=0xE7;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0318 	bic.w	r3, r3, #24
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
		switch(filter)
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d018      	beq.n	80010f6 <OV7670_BandingFilter+0x94>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	dc28      	bgt.n	800111a <OV7670_BandingFilter+0xb8>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <OV7670_BandingFilter+0x70>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d009      	beq.n	80010e4 <OV7670_BandingFilter+0x82>
				break;
		}
	}
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
}
 80010d0:	e023      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x0A);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	f043 030a 	orr.w	r3, r3, #10
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	203b      	movs	r0, #59	; 0x3b
 80010de:	f7ff faf1 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 80010e2:	e01a      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x02);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	203b      	movs	r0, #59	; 0x3b
 80010f0:	f7ff fae8 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 80010f4:	e011      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x12);
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f043 0312 	orr.w	r3, r3, #18
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	203b      	movs	r0, #59	; 0x3b
 8001102:	f7ff fadf 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 8001106:	e008      	b.n	800111a <OV7670_BandingFilter+0xb8>
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	2013      	movs	r0, #19
 8001114:	f7ff fad6 	bl	80006c4 <OV7670_WriteSCCB>
}
 8001118:	e7ff      	b.n	800111a <OV7670_BandingFilter+0xb8>
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <OV7670_SpecialEffect>:

void OV7670_SpecialEffect(Camera_effect effect)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_TSLB, &temp);
 8001132:	f107 030f 	add.w	r3, r7, #15
 8001136:	4619      	mov	r1, r3
 8001138:	203a      	movs	r0, #58	; 0x3a
 800113a:	f7ff fae1 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0xCB;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f023 0334 	bic.w	r3, r3, #52	; 0x34
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73fb      	strb	r3, [r7, #15]

	switch(effect)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b07      	cmp	r3, #7
 800114c:	f200 808c 	bhi.w	8001268 <OV7670_SpecialEffect+0x144>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <OV7670_SpecialEffect+0x34>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001179 	.word	0x08001179
 800115c:	0800118b 	.word	0x0800118b
 8001160:	080011ad 	.word	0x080011ad
 8001164:	080011cf 	.word	0x080011cf
 8001168:	080011e1 	.word	0x080011e1
 800116c:	08001203 	.word	0x08001203
 8001170:	08001225 	.word	0x08001225
 8001174:	08001247 	.word	0x08001247
	{
		case NORMAL:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x04);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	203a      	movs	r0, #58	; 0x3a
 8001184:	f7ff fa9e 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001188:	e06e      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case ANTIQUE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0314 	orr.w	r3, r3, #20
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4619      	mov	r1, r3
 8001194:	203a      	movs	r0, #58	; 0x3a
 8001196:	f7ff fa95 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xA0);
 800119a:	21a0      	movs	r1, #160	; 0xa0
 800119c:	2067      	movs	r0, #103	; 0x67
 800119e:	f7ff fa91 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	2068      	movs	r0, #104	; 0x68
 80011a6:	f7ff fa8d 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011aa:	e05d      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BW:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f043 0314 	orr.w	r3, r3, #20
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	203a      	movs	r0, #58	; 0x3a
 80011b8:	f7ff fa84 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	2067      	movs	r0, #103	; 0x67
 80011c0:	f7ff fa80 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	2068      	movs	r0, #104	; 0x68
 80011c8:	f7ff fa7c 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011cc:	e04c      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x24);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	203a      	movs	r0, #58	; 0x3a
 80011da:	f7ff fa73 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011de:	e043      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BW_NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x34);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	203a      	movs	r0, #58	; 0x3a
 80011ec:	f7ff fa6a 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	2067      	movs	r0, #103	; 0x67
 80011f4:	f7ff fa66 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	2068      	movs	r0, #104	; 0x68
 80011fc:	f7ff fa62 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001200:	e032      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BLUISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0314 	orr.w	r3, r3, #20
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	203a      	movs	r0, #58	; 0x3a
 800120e:	f7ff fa59 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	2067      	movs	r0, #103	; 0x67
 8001216:	f7ff fa55 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0xC0);
 800121a:	21c0      	movs	r1, #192	; 0xc0
 800121c:	2068      	movs	r0, #104	; 0x68
 800121e:	f7ff fa51 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001222:	e021      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case GREENISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f043 0314 	orr.w	r3, r3, #20
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	203a      	movs	r0, #58	; 0x3a
 8001230:	f7ff fa48 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x40);
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	2067      	movs	r0, #103	; 0x67
 8001238:	f7ff fa44 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	2068      	movs	r0, #104	; 0x68
 8001240:	f7ff fa40 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001244:	e010      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case REDDISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f043 0314 	orr.w	r3, r3, #20
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	203a      	movs	r0, #58	; 0x3a
 8001252:	f7ff fa37 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xC0);
 8001256:	21c0      	movs	r1, #192	; 0xc0
 8001258:	2067      	movs	r0, #103	; 0x67
 800125a:	f7ff fa33 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	2068      	movs	r0, #104	; 0x68
 8001262:	f7ff fa2f 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001266:	bf00      	nop
	}
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <OV7670_SetFrameRate>:

void OV7670_SetFrameRate(uint8_t div, uint8_t mul)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
	OV7670_WriteSCCB(REG_CLKRC, 0x80 | div);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	2011      	movs	r0, #17
 800128c:	f7ff fa1a 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 fab9 	bl	8002808 <HAL_Delay>
	OV7670_WriteSCCB(REG_DBLV, 0x08 | mul);
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	206b      	movs	r0, #107	; 0x6b
 80012a2:	f7ff fa0f 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 faae 	bl	8002808 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <OV7670_PowerUp>:
	OV7670_XCLK(OFF);
	OV7670_Power(OFF);
}

void OV7670_PowerUp(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	OV7670_Power(ON);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff f9b1 	bl	8000620 <OV7670_Power>
	OV7670_XCLK(ON);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff f9e4 	bl	800068c <OV7670_XCLK>
	OV7670_ResetHW();
 80012c4:	f7ff f9ca 	bl	800065c <OV7670_ResetHW>
	OV7670_ResetSW();
 80012c8:	f7ff fa7e 	bl	80007c8 <OV7670_ResetSW>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <OV7670_UpdateSettings>:

void OV7670_UpdateSettings(Camera_settings OV7670)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	f107 0c08 	add.w	ip, r7, #8
 80012da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	OV7670_SetResolution(OV7670.resolution);
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fb2f 	bl	8000944 <OV7670_SetResolution>

	if(OV7670.format) OV7670_SetColorFormat(RGB565);
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <OV7670_UpdateSettings+0x24>
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fbd7 	bl	8000aa0 <OV7670_SetColorFormat>
 80012f2:	e002      	b.n	80012fa <OV7670_UpdateSettings+0x2a>
	else OV7670_SetColorFormat(YUV422);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fbd3 	bl	8000aa0 <OV7670_SetColorFormat>

	OV7670_SpecialEffect(OV7670.effect);
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff11 	bl	8001124 <OV7670_SpecialEffect>
	OV7670_AutoExposureMode(OV7670.AEC);
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc19 	bl	8000b3c <OV7670_AutoExposureMode>
	if(!OV7670.AEC) OV7670_SetExposureTime(OV7670.exposure);
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <OV7670_UpdateSettings+0x48>
 8001310:	8b3b      	ldrh	r3, [r7, #24]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fc5c 	bl	8000bd0 <OV7670_SetExposureTime>
	OV7670_SetAECAlgorithm(OV7670.algorithm);
 8001318:	7d7b      	ldrb	r3, [r7, #21]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc33 	bl	8000b86 <OV7670_SetAECAlgorithm>

	OV7670_AutoGainMode(OV7670.AGC);
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc9b 	bl	8000c5e <OV7670_AutoGainMode>
	if(!OV7670.AGC) OV7670_SetGain(OV7670.gain);
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <OV7670_UpdateSettings+0x66>
 800132e:	7ebb      	ldrb	r3, [r7, #26]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fcb9 	bl	8000ca8 <OV7670_SetGain>

	OV7670_AutoWhiteBalanceMode(OV7670.AWB);
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd3b 	bl	8000db4 <OV7670_AutoWhiteBalanceMode>
	if(!OV7670.AWB) OV7670_SetChannelsGain(OV7670.rch_gain, OV7670.gch_gain, OV7670.bch_gain);
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <OV7670_UpdateSettings+0x86>
 8001344:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001348:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800134c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd54 	bl	8000dfe <OV7670_SetChannelsGain>

	OV7670_SetBrightness(OV7670.brightness);
 8001356:	7efb      	ldrb	r3, [r7, #27]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fa6f 	bl	800083c <OV7670_SetBrightness>
	OV7670_SetContrast(OV7670.contrast);
 800135e:	7f3b      	ldrb	r3, [r7, #28]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa83 	bl	800086c <OV7670_SetContrast>
	OV7670_SetSaturation(OV7670.saturation);
 8001366:	7f7b      	ldrb	r3, [r7, #29]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa8d 	bl	8000888 <OV7670_SetSaturation>

	OV7670_AutoSharpness(OV7670.ASC);
 800136e:	7cbb      	ldrb	r3, [r7, #18]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe00 	bl	8000f76 <OV7670_AutoSharpness>
	if(!OV7670.ASC) OV7670_SetSharpness(OV7670.sharpness);
 8001376:	7cbb      	ldrb	r3, [r7, #18]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d103      	bne.n	8001384 <OV7670_UpdateSettings+0xb4>
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe1e 	bl	8000fc0 <OV7670_SetSharpness>

	OV7670_SetGainCeiling(OV7670.gain_ceiling);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc46 	bl	8000c1a <OV7670_SetGainCeiling>

	OV7670_FlipHorizontal(OV7670.h_flip);
 800138e:	7c3b      	ldrb	r3, [r7, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fd75 	bl	8000e80 <OV7670_FlipHorizontal>
	OV7670_FlipVertical(OV7670.v_flip);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fd96 	bl	8000eca <OV7670_FlipVertical>
	OV7670_ShowColorBar(OV7670.cbar);
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd48 	bl	8000e36 <OV7670_ShowColorBar>
	OV7670_NightMode(OV7670.night_mode, OV7670.night_mode_fps);
 80013a6:	7c7b      	ldrb	r3, [r7, #17]
 80013a8:	7dba      	ldrb	r2, [r7, #22]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fdb1 	bl	8000f14 <OV7670_NightMode>

	OV7670_AutoDeNoise(OV7670.ADN);
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe21 	bl	8000ffc <OV7670_AutoDeNoise>
	if(!OV7670.ADN)OV7670_SetDeNoiseStrength(OV7670.strength);
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <OV7670_UpdateSettings+0xf8>
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe3f 	bl	8001046 <OV7670_SetDeNoiseStrength>

	OV7670_BandingFilter(OV7670.BDF, OV7670.bd_filter_value);
 80013c8:	7d3b      	ldrb	r3, [r7, #20]
 80013ca:	7dfa      	ldrb	r2, [r7, #23]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fe47 	bl	8001062 <OV7670_BandingFilter>
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013dc:	b004      	add	sp, #16
 80013de:	4770      	bx	lr

080013e0 <OV7670_SetFrameControl>:

void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	4603      	mov	r3, r0
 80013f4:	80bb      	strh	r3, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	4613      	mov	r3, r2
 80013fc:	803b      	strh	r3, [r7, #0]
	OV7670_WriteSCCB(REG_HSTART, (hstart >> 3) & 0xff);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	2017      	movs	r0, #23
 800140a:	f7ff f95b 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HSTOP, (hstop >> 3) & 0xff);
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	2018      	movs	r0, #24
 800141a:	f7ff f953 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001428:	b25a      	sxtb	r2, r3
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	2032      	movs	r0, #50	; 0x32
 800143e:	f7ff f941 	bl	80006c4 <OV7670_WriteSCCB>

	OV7670_WriteSCCB(REG_VSTART, (vstart >> 2) & 0xff);
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2019      	movs	r0, #25
 800144e:	f7ff f939 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VSTOP, (vstop >> 2) & 0xff);
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	201a      	movs	r0, #26
 800145e:	f7ff f931 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 8001462:	883b      	ldrh	r3, [r7, #0]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	b25a      	sxtb	r2, r3
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	2003      	movs	r0, #3
 8001482:	f7ff f91f 	bl	80006c4 <OV7670_WriteSCCB>
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
	...

08001490 <OV7670_getImageInfo>:
	*time_num=(int)(time);
	*time_fract=(int)((time-(*time_num))*10);
}

void OV7670_getImageInfo(uint16_t *width, uint16_t *height, uint8_t *format)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	*width=img_width;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <OV7670_getImageInfo+0x30>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	801a      	strh	r2, [r3, #0]
	*height=img_height;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <OV7670_getImageInfo+0x34>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	801a      	strh	r2, [r3, #0]
	*format=img_format;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <OV7670_getImageInfo+0x38>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	24000000 	.word	0x24000000
 80014c4:	24000002 	.word	0x24000002
 80014c8:	24000074 	.word	0x24000074

080014cc <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(capture_mode==CONTINUOUS)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_DCMI_FrameEventCallback+0x44>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d115      	bne.n	8001508 <HAL_DCMI_FrameEventCallback+0x3c>
		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	461c      	mov	r4, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_DCMI_FrameEventCallback+0x48>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_DCMI_FrameEventCallback+0x4c>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_DCMI_FrameEventCallback+0x50>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da00      	bge.n	8001500 <HAL_DCMI_FrameEventCallback+0x34>
 80014fe:	3301      	adds	r3, #1
 8001500:	105b      	asrs	r3, r3, #1
 8001502:	4621      	mov	r1, r4
 8001504:	f002 f924 	bl	8003750 <HAL_DMA_Start_IT>

}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	2400006c 	.word	0x2400006c
 8001514:	24000070 	.word	0x24000070
 8001518:	24000000 	.word	0x24000000
 800151c:	24000002 	.word	0x24000002

08001520 <YUVtoRGB888>:
#include "color_conversion.h"

#define LIMIT(x) (x > 255 ? 255 : (x < 0 ? 0 : x))

uint32_t YUVtoRGB888(int16_t Y, int16_t U, int16_t V)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	460b      	mov	r3, r1
 800152c:	80bb      	strh	r3, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	807b      	strh	r3, [r7, #2]
	uint8_t R=0, G=0, B=0;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	2300      	movs	r3, #0
 8001538:	73bb      	strb	r3, [r7, #14]
 800153a:	2300      	movs	r3, #0
 800153c:	737b      	strb	r3, [r7, #13]
	R = LIMIT(Y + V + ((V * 103) >> 8));					//RED
 800153e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001546:	441a      	add	r2, r3
 8001548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800154c:	2167      	movs	r1, #103	; 0x67
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	4413      	add	r3, r2
 8001556:	2bff      	cmp	r3, #255	; 0xff
 8001558:	dc0f      	bgt.n	800157a <YUVtoRGB888+0x5a>
 800155a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001562:	441a      	add	r2, r3
 8001564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001568:	2167      	movs	r1, #103	; 0x67
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	4413      	add	r3, r2
 8001572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001576:	b2db      	uxtb	r3, r3
 8001578:	e000      	b.n	800157c <YUVtoRGB888+0x5c>
 800157a:	23ff      	movs	r3, #255	; 0xff
 800157c:	73fb      	strb	r3, [r7, #15]
	G = LIMIT(Y - ((U * 88) >> 8) - ((V * 183) >> 8));		//GREEN
 800157e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001586:	2158      	movs	r1, #88	; 0x58
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	121b      	asrs	r3, r3, #8
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001594:	21b7      	movs	r1, #183	; 0xb7
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2bff      	cmp	r3, #255	; 0xff
 80015a0:	dc13      	bgt.n	80015ca <YUVtoRGB888+0xaa>
 80015a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015aa:	2158      	movs	r1, #88	; 0x58
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	121b      	asrs	r3, r3, #8
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015b8:	21b7      	movs	r1, #183	; 0xb7
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	121b      	asrs	r3, r3, #8
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	e000      	b.n	80015cc <YUVtoRGB888+0xac>
 80015ca:	23ff      	movs	r3, #255	; 0xff
 80015cc:	73bb      	strb	r3, [r7, #14]
	B = LIMIT(Y + U + ((U * 198) >> 8));					//BLUE
 80015ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	441a      	add	r2, r3
 80015d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015dc:	21c6      	movs	r1, #198	; 0xc6
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	121b      	asrs	r3, r3, #8
 80015e4:	4413      	add	r3, r2
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	dc0f      	bgt.n	800160a <YUVtoRGB888+0xea>
 80015ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015f2:	441a      	add	r2, r3
 80015f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015f8:	21c6      	movs	r1, #198	; 0xc6
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	121b      	asrs	r3, r3, #8
 8001600:	4413      	add	r3, r2
 8001602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001606:	b2db      	uxtb	r3, r3
 8001608:	e000      	b.n	800160c <YUVtoRGB888+0xec>
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	431a      	orrs	r2, r3
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	4313      	orrs	r3, r2
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <RGB565toRGB888>:

    return (uint16_t)RGB;
}

uint32_t RGB565toRGB888(uint16_t RGB)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
	uint8_t R=0, G=0, B=0;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]
 800163a:	2300      	movs	r3, #0
 800163c:	737b      	strb	r3, [r7, #13]

	R = ((RGB >> 11) << 3);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	0adb      	lsrs	r3, r3, #11
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	73fb      	strb	r3, [r7, #15]
	G = ((RGB >> 5) << 2);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	b29b      	uxth	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	73bb      	strb	r3, [r7, #14]
	B = ((RGB & 0x1F)<<3);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	431a      	orrs	r2, r3
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	4313      	orrs	r3, r2
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e010      	b.n	80016aa <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001688:	2102      	movs	r1, #2
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <flash+0x48>)
 800168c:	f005 f9b9 	bl	8006a02 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f001 f8b9 	bl	8002808 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001696:	2102      	movs	r1, #2
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <flash+0x48>)
 800169a:	f005 f9b2 	bl	8006a02 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800169e:	2032      	movs	r0, #50	; 0x32
 80016a0:	f001 f8b2 	bl	8002808 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbea      	blt.n	8001688 <flash+0x10>
  }

  HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f001 f8a8 	bl	8002808 <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58020000 	.word	0x58020000

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016ca:	f000 fae3 	bl	8001c94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f001 f809 	bl	80026e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f851 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f000 fa45 	bl	8001b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80016da:	f000 fa23 	bl	8001b24 <MX_DMA_Init>
  MX_DCMI_Init();
 80016de:	f000 f8c7 	bl	8001870 <MX_DCMI_Init>
  MX_I2C1_Init();
 80016e2:	f000 f8f9 	bl	80018d8 <MX_I2C1_Init>
  MX_TIM6_Init();
 80016e6:	f000 f963 	bl	80019b0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80016ea:	f000 f9cf 	bl	8001a8c <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 80016ee:	f000 f933 	bl	8001958 <MX_LPTIM1_Init>
  MX_TIM7_Init();
 80016f2:	f000 f993 	bl	8001a1c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  flash(5);
 80016f6:	2005      	movs	r0, #5
 80016f8:	f7ff ffbe 	bl	8001678 <flash>

  OV7670_Power(DISABLE);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7fe ff8f 	bl	8000620 <OV7670_Power>
  OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1, &hlptim1);
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <main+0x94>)
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <main+0x98>)
 8001706:	4916      	ldr	r1, [pc, #88]	; (8001760 <main+0x9c>)
 8001708:	4816      	ldr	r0, [pc, #88]	; (8001764 <main+0xa0>)
 800170a:	f7fe ff67 	bl	80005dc <OV7670_Init>
  OV7670_PowerUp();
 800170e:	f7ff fdd1 	bl	80012b4 <OV7670_PowerUp>
  OV7670_UpdateSettings(OV7670_settings);
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <main+0xa4>)
 8001714:	466c      	mov	r4, sp
 8001716:	f103 0210 	add.w	r2, r3, #16
 800171a:	ca07      	ldmia	r2, {r0, r1, r2}
 800171c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001722:	f7ff fdd5 	bl	80012d0 <OV7670_UpdateSettings>
  OV7670_SetFrameRate(XCLK_DIV(1), PLL_x4);
 8001726:	2140      	movs	r1, #64	; 0x40
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fda1 	bl	8001270 <OV7670_SetFrameRate>
  HAL_Delay(10);
 800172e:	200a      	movs	r0, #10
 8001730:	f001 f86a 	bl	8002808 <HAL_Delay>
  OV7670_Start(CONTINUOUS, g_image_data);
 8001734:	490d      	ldr	r1, [pc, #52]	; (800176c <main+0xa8>)
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff f802 	bl	8000740 <OV7670_Start>
  HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	f001 f863 	bl	8002808 <HAL_Delay>

  // 50hz timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <main+0xac>)
 8001744:	f008 fde2 	bl	800a30c <HAL_TIM_Base_Start_IT>

  // 5hz timer
  HAL_TIM_Base_Start_IT(&htim7);
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <main+0xb0>)
 800174a:	f008 fddf 	bl	800a30c <HAL_TIM_Base_Start_IT>

  flash(5);
 800174e:	2005      	movs	r0, #5
 8001750:	f7ff ff92 	bl	8001678 <flash>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001754:	e7fe      	b.n	8001754 <main+0x90>
 8001756:	bf00      	nop
 8001758:	2400018c 	.word	0x2400018c
 800175c:	24000140 	.word	0x24000140
 8001760:	240000c8 	.word	0x240000c8
 8001764:	24000078 	.word	0x24000078
 8001768:	24000014 	.word	0x24000014
 800176c:	240002ec 	.word	0x240002ec
 8001770:	240001c4 	.word	0x240001c4
 8001774:	24000210 	.word	0x24000210

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b09c      	sub	sp, #112	; 0x70
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	224c      	movs	r2, #76	; 0x4c
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f00b fe10 	bl	800d3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2220      	movs	r2, #32
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00b fe0a 	bl	800d3ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001798:	2002      	movs	r0, #2
 800179a:	f006 fa03 	bl	8007ba4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <SystemClock_Config+0xf0>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <SystemClock_Config+0xf0>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <SystemClock_Config+0xf0>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <SystemClock_Config+0xf4>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <SystemClock_Config+0xf4>)
 80017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <SystemClock_Config+0xf4>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017d4:	bf00      	nop
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <SystemClock_Config+0xf4>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e2:	d1f8      	bne.n	80017d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f6:	2308      	movs	r3, #8
 80017f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 128;
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80017fe:	2304      	movs	r3, #4
 8001800:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800180a:	2304      	movs	r3, #4
 800180c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800180e:	2300      	movs	r3, #0
 8001810:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f006 f9fc 	bl	8007c18 <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001826:	f000 fa61 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	233f      	movs	r3, #63	; 0x3f
 800182c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2303      	movs	r3, #3
 8001830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2101      	movs	r1, #1
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fe0f 	bl	8008474 <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800185c:	f000 fa46 	bl	8001cec <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	3770      	adds	r7, #112	; 0x70
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58000400 	.word	0x58000400
 800186c:	58024800 	.word	0x58024800

08001870 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <MX_DCMI_Init+0x64>)
 8001878:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_DCMI_Init+0x60>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001882:	2220      	movs	r2, #32
 8001884:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_DCMI_Init+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DCMI_Init+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018be:	f001 f95f 	bl	8002b80 <HAL_DCMI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80018c8:	f000 fa10 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	24000078 	.word	0x24000078
 80018d4:	48020000 	.word	0x48020000

080018d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_I2C1_Init+0x74>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <MX_I2C1_Init+0x78>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_I2C1_Init+0x74>)
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <MX_I2C1_Init+0x7c>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_I2C1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_I2C1_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_I2C1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_I2C1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <MX_I2C1_Init+0x74>)
 8001914:	f005 f890 	bl	8006a38 <HAL_I2C_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800191e:	f000 f9e5 	bl	8001cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001922:	2100      	movs	r1, #0
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <MX_I2C1_Init+0x74>)
 8001926:	f005 fd79 	bl	800741c <HAL_I2CEx_ConfigAnalogFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001930:	f000 f9dc 	bl	8001cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_I2C1_Init+0x74>)
 8001938:	f005 fdbb 	bl	80074b2 <HAL_I2CEx_ConfigDigitalFilter>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001942:	f000 f9d3 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000140 	.word	0x24000140
 8001950:	40005400 	.word	0x40005400
 8001954:	00c0eaff 	.word	0x00c0eaff

08001958 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <MX_LPTIM1_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001974:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_LPTIM1_Init+0x50>)
 8001996:	f005 fdd9 	bl	800754c <HAL_LPTIM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80019a0:	f000 f9a4 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2400018c 	.word	0x2400018c
 80019ac:	40002400 	.word	0x40002400

080019b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_TIM6_Init+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019c8:	2232      	movs	r2, #50	; 0x32
 80019ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019d4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019e2:	f008 fc3b 	bl	800a25c <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019ec:	f000 f97e 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM6_Init+0x64>)
 80019fe:	f008 fee9 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a08:	f000 f970 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	240001c4 	.word	0x240001c4
 8001a18:	40001000 	.word	0x40001000

08001a1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a2e:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <MX_TIM7_Init+0x6c>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 500;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a38:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a42:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a46:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a50:	f008 fc04 	bl	800a25c <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001a5a:	f000 f947 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_TIM7_Init+0x68>)
 8001a6c:	f008 feb2 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001a76:	f000 f939 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000210 	.word	0x24000210
 8001a88:	40001400 	.word	0x40001400

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad4:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ad6:	f008 ff29 	bl	800a92c <HAL_UART_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ae0:	f000 f904 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001ae8:	f00b fb71 	bl	800d1ce <HAL_UARTEx_SetTxFifoThreshold>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001af2:	f000 f8fb 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001afa:	f00b fba6 	bl	800d24a <HAL_UARTEx_SetRxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 f8f2 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_USART1_UART_Init+0x90>)
 8001b0a:	f00b fb27 	bl	800d15c <HAL_UARTEx_DisableFifoMode>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b14:	f000 f8ea 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2400025c 	.word	0x2400025c
 8001b20:	40011000 	.word	0x40011000

08001b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_DMA_Init+0x3c>)
 8001b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <MX_DMA_Init+0x3c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_DMA_Init+0x3c>)
 8001b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f000 ff66 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b52:	200b      	movs	r0, #11
 8001b54:	f000 ff7d 	bl	8002a52 <HAL_NVIC_EnableIRQ>

}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	58024400 	.word	0x58024400

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a32      	ldr	r2, [pc, #200]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_GPIO_Init+0x124>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2102      	movs	r1, #2
 8001c32:	4816      	ldr	r0, [pc, #88]	; (8001c8c <MX_GPIO_Init+0x128>)
 8001c34:	f004 fecc 	bl	80069d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <MX_GPIO_Init+0x12c>)
 8001c40:	f004 fec6 	bl	80069d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_GPIO_Init+0x128>)
 8001c5c:	f004 fd08 	bl	8006670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001c60:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_GPIO_Init+0x12c>)
 8001c7a:	f004 fcf9 	bl	8006670 <HAL_GPIO_Init>

}
 8001c7e:	bf00      	nop
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	58020000 	.word	0x58020000
 8001c90:	58020c00 	.word	0x58020c00

08001c94 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ca6:	f000 feef 	bl	8002a88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cb6:	231f      	movs	r3, #31
 8001cb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cba:	2387      	movs	r3, #135	; 0x87
 8001cbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 ff0d 	bl	8002af8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cde:	2004      	movs	r0, #4
 8001ce0:	f000 feea 	bl	8002ab8 <HAL_MPU_Enable>

}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_MspInit+0x30>)
 8001d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_MspInit+0x30>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_MspInit+0x30>)
 8001d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	58024400 	.word	0x58024400

08001d2c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	; 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <HAL_DCMI_MspInit+0x1f0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 80e2 	bne.w	8001f14 <HAL_DCMI_MspInit+0x1e8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d50:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d56:	4a72      	ldr	r2, [pc, #456]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6e:	4b6c      	ldr	r3, [pc, #432]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d92:	4a63      	ldr	r2, [pc, #396]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9c:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	4a5b      	ldr	r2, [pc, #364]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dba:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc8:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_DCMI_MspInit+0x1f4>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e04:	2370      	movs	r3, #112	; 0x70
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e14:	230d      	movs	r3, #13
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4841      	ldr	r0, [pc, #260]	; (8001f24 <HAL_DCMI_MspInit+0x1f8>)
 8001e20:	f004 fc26 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e24:	2350      	movs	r3, #80	; 0x50
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e34:	230d      	movs	r3, #13
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	483a      	ldr	r0, [pc, #232]	; (8001f28 <HAL_DCMI_MspInit+0x1fc>)
 8001e40:	f004 fc16 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e56:	230d      	movs	r3, #13
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4832      	ldr	r0, [pc, #200]	; (8001f2c <HAL_DCMI_MspInit+0x200>)
 8001e62:	f004 fc05 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e66:	2308      	movs	r3, #8
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e76:	230d      	movs	r3, #13
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	482b      	ldr	r0, [pc, #172]	; (8001f30 <HAL_DCMI_MspInit+0x204>)
 8001e82:	f004 fbf5 	bl	8006670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e96:	230d      	movs	r3, #13
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4824      	ldr	r0, [pc, #144]	; (8001f34 <HAL_DCMI_MspInit+0x208>)
 8001ea2:	f004 fbe5 	bl	8006670 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_DCMI_MspInit+0x210>)
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001eae:	224b      	movs	r2, #75	; 0x4b
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ecc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ed0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001ee8:	4813      	ldr	r0, [pc, #76]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001eea:	f001 f8d5 	bl	8003098 <HAL_DMA_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_DCMI_MspInit+0x1cc>
    {
      Error_Handler();
 8001ef4:	f7ff fefa 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001efc:	649a      	str	r2, [r3, #72]	; 0x48
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_DCMI_MspInit+0x20c>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	204e      	movs	r0, #78	; 0x4e
 8001f0a:	f000 fd88 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001f0e:	204e      	movs	r0, #78	; 0x4e
 8001f10:	f000 fd9f 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3738      	adds	r7, #56	; 0x38
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	48020000 	.word	0x48020000
 8001f20:	58024400 	.word	0x58024400
 8001f24:	58021000 	.word	0x58021000
 8001f28:	58020000 	.word	0x58020000
 8001f2c:	58020800 	.word	0x58020800
 8001f30:	58020c00 	.word	0x58020c00
 8001f34:	58020400 	.word	0x58020400
 8001f38:	240000c8 	.word	0x240000c8
 8001f3c:	40020010 	.word	0x40020010

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0b8      	sub	sp, #224	; 0xe0
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	22bc      	movs	r2, #188	; 0xbc
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00b fa23 	bl	800d3ac <memset>
  if(hi2c->Instance==I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a25      	ldr	r2, [pc, #148]	; (8002000 <HAL_I2C_MspInit+0xc0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d142      	bne.n	8001ff6 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f70:	2308      	movs	r3, #8
 8001f72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fe04 	bl	8008b8c <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f8a:	f7ff feaf 	bl	8001cec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001fac:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <HAL_I2C_MspInit+0xc8>)
 8001fd4:	f004 fb4c 	bl	8006670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	37e0      	adds	r7, #224	; 0xe0
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40005400 	.word	0x40005400
 8002004:	58024400 	.word	0x58024400
 8002008:	58020400 	.word	0x58020400

0800200c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b8      	sub	sp, #224	; 0xe0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	22bc      	movs	r2, #188	; 0xbc
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f00b f9bd 	bl	800d3ac <memset>
  if(hlptim->Instance==LPTIM1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_LPTIM_MspInit+0xc0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d142      	bne.n	80020c2 <HAL_LPTIM_MspInit+0xb6>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800203c:	2320      	movs	r3, #32
 800203e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f006 fd9e 	bl	8008b8c <HAL_RCCEx_PeriphCLKConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8002056:	f7ff fe49 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 8002062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_LPTIM_MspInit+0xc4>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_LPTIM_MspInit+0xc8>)
 80020be:	f004 fad7 	bl	8006670 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	37e0      	adds	r7, #224	; 0xe0
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40002400 	.word	0x40002400
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58020c00 	.word	0x58020c00

080020d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_TIM_Base_MspInit+0x84>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d117      	bne.n	800211a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 80020ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 80020fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	2036      	movs	r0, #54	; 0x36
 800210e:	f000 fc86 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002112:	2036      	movs	r0, #54	; 0x36
 8002114:	f000 fc9d 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002118:	e01b      	b.n	8002152 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_TIM_Base_MspInit+0x8c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d116      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 8002126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x88>)
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2037      	movs	r0, #55	; 0x37
 8002148:	f000 fc69 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800214c:	2037      	movs	r0, #55	; 0x37
 800214e:	f000 fc80 	bl	8002a52 <HAL_NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40001000 	.word	0x40001000
 8002160:	58024400 	.word	0x58024400
 8002164:	40001400 	.word	0x40001400

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0b8      	sub	sp, #224	; 0xe0
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	22bc      	movs	r2, #188	; 0xbc
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f00b f90f 	bl	800d3ac <memset>
  if(huart->Instance==USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <HAL_UART_MspInit+0xd0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d14a      	bne.n	800222e <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 fcf0 	bl	8008b8c <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021b2:	f7ff fd9b 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	4a18      	ldr	r2, [pc, #96]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0xd4>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800220c:	2304      	movs	r3, #4
 800220e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002216:	4619      	mov	r1, r3
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <HAL_UART_MspInit+0xd8>)
 800221a:	f004 fa29 	bl	8006670 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2025      	movs	r0, #37	; 0x25
 8002224:	f000 fbfb 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002228:	2025      	movs	r0, #37	; 0x25
 800222a:	f000 fc12 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	37e0      	adds	r7, #224	; 0xe0
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40011000 	.word	0x40011000
 800223c:	58024400 	.word	0x58024400
 8002240:	58020400 	.word	0x58020400

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <NMI_Handler+0x4>

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler+0x4>

08002256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <UsageFault_Handler+0x4>

08002262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002290:	f000 fa9a 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Stream0_IRQHandler+0x10>)
 800229e:	f002 fa25 	bl	80046ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	240000c8 	.word	0x240000c8

080022ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <USART1_IRQHandler+0x10>)
 80022b2:	f008 fc89 	bl	800abc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2400025c 	.word	0x2400025c

080022c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_50hz();
 80022c4:	f000 f830 	bl	8002328 <schedule_50hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM6_DAC_IRQHandler+0x14>)
 80022ca:	f008 f897 	bl	800a3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	240001c4 	.word	0x240001c4

080022d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_5hz();
 80022dc:	f000 f82c 	bl	8002338 <schedule_5hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM7_IRQHandler+0x14>)
 80022e2:	f008 f88b 	bl	800a3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000210 	.word	0x24000210

080022f0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DCMI_IRQHandler+0x10>)
 80022f6:	f000 fd7f 	bl	8002df8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	24000078 	.word	0x24000078

08002304 <log_data>:

void log_string(const char *str) {
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
}

void log_data(const uint8_t *data, uint16_t size) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)data, (uint16_t)size);
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	461a      	mov	r2, r3
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4803      	ldr	r0, [pc, #12]	; (8002324 <log_data+0x20>)
 8002318:	f008 fb58 	bl	800a9cc <HAL_UART_Transmit_IT>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2400025c 	.word	0x2400025c

08002328 <schedule_50hz>:

void schedule_50hz(void) {
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <schedule_5hz>:

void schedule_5hz(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 800233c:	2201      	movs	r2, #1
 800233e:	4903      	ldr	r1, [pc, #12]	; (800234c <schedule_5hz+0x14>)
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <schedule_5hz+0x18>)
 8002342:	f008 fbeb 	bl	800ab1c <HAL_UART_Receive_IT>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24031aec 	.word	0x24031aec
 8002350:	2400025c 	.word	0x2400025c

08002354 <view_image>:

void view_image() {
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0
  static uint16_t width, height;
  static uint8_t format;
  static uint8_t data[240*320];
  OV7670_getImageInfo(&width, &height, &format);
 800235a:	4a7b      	ldr	r2, [pc, #492]	; (8002548 <view_image+0x1f4>)
 800235c:	497b      	ldr	r1, [pc, #492]	; (800254c <view_image+0x1f8>)
 800235e:	487c      	ldr	r0, [pc, #496]	; (8002550 <view_image+0x1fc>)
 8002360:	f7ff f896 	bl	8001490 <OV7670_getImageInfo>
  memset(data, 100, height*width);
 8002364:	4b79      	ldr	r3, [pc, #484]	; (800254c <view_image+0x1f8>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <view_image+0x1fc>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	461a      	mov	r2, r3
 8002374:	2164      	movs	r1, #100	; 0x64
 8002376:	4877      	ldr	r0, [pc, #476]	; (8002554 <view_image+0x200>)
 8002378:	f00b f818 	bl	800d3ac <memset>

  for (int k = 0; k < 2; k += 1) {
 800237c:	2300      	movs	r3, #0
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
 8002380:	e0cf      	b.n	8002522 <view_image+0x1ce>
    for (int i = k; i < height; i += 2) {
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
 8002386:	e0c2      	b.n	800250e <view_image+0x1ba>
      for (int j = 0; j < (int)width/2; j += 1) {
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238c:	e0b3      	b.n	80024f6 <view_image+0x1a2>
        int idx = i*(width/2) + j;
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <view_image+0x1fc>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a0:	4413      	add	r3, r2
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t temp = g_image_data[idx];
 80023a4:	4a6c      	ldr	r2, [pc, #432]	; (8002558 <view_image+0x204>)
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
        if (format == YUV422) {
 80023ae:	4b66      	ldr	r3, [pc, #408]	; (8002548 <view_image+0x1f4>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15a      	bne.n	800246c <view_image+0x118>
          int16_t Y2 = (temp >> 24) & 0x00FF;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	0e1b      	lsrs	r3, r3, #24
 80023ba:	827b      	strh	r3, [r7, #18]
          int16_t U = ((temp >> 16) & 0x00FF) - 128;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b80      	subs	r3, #128	; 0x80
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	823b      	strh	r3, [r7, #16]
          int16_t Y1 = (temp >> 8) & 0x00FF;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	81fb      	strh	r3, [r7, #14]
          int16_t V = (temp & 0x00FF) - 128;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b80      	subs	r3, #128	; 0x80
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	81bb      	strh	r3, [r7, #12]
          uint32_t pix = YUVtoRGB888(Y1, U, V);
 80023e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023e8:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80023ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f895 	bl	8001520 <YUVtoRGB888>
 80023f6:	60b8      	str	r0, [r7, #8]
          uint32_t next_pix = YUVtoRGB888(Y2, U, V);
 80023f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023fc:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f88b 	bl	8001520 <YUVtoRGB888>
 800240a:	6078      	str	r0, [r7, #4]

          uint8_t r = (pix >> (0)) & 0xff;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	70fb      	strb	r3, [r7, #3]
          uint8_t g = (pix >> (8)) & 0xff;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	70bb      	strb	r3, [r7, #2]
          uint8_t b = (pix >> (16)) & 0xff;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	707b      	strb	r3, [r7, #1]
          data[2*idx] = (uint8_t)((r + g + b)/3);
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	441a      	add	r2, r3
 8002422:	787b      	ldrb	r3, [r7, #1]
 8002424:	4413      	add	r3, r2
 8002426:	4a4d      	ldr	r2, [pc, #308]	; (800255c <view_image+0x208>)
 8002428:	fb82 1203 	smull	r1, r2, r2, r3
 800242c:	17db      	asrs	r3, r3, #31
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	b2d1      	uxtb	r1, r2
 8002436:	4a47      	ldr	r2, [pc, #284]	; (8002554 <view_image+0x200>)
 8002438:	54d1      	strb	r1, [r2, r3]

          r = (next_pix >> (0)) & 0xff;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	70fb      	strb	r3, [r7, #3]
          g = (next_pix >> (8)) & 0xff;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	70bb      	strb	r3, [r7, #2]
          b = (next_pix >> (16)) & 0xff;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	707b      	strb	r3, [r7, #1]
          data[2*idx + 1] = (uint8_t)((r + g + b)/3);
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	78bb      	ldrb	r3, [r7, #2]
 800244e:	441a      	add	r2, r3
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	4413      	add	r3, r2
 8002454:	4a41      	ldr	r2, [pc, #260]	; (800255c <view_image+0x208>)
 8002456:	fb82 1203 	smull	r1, r2, r2, r3
 800245a:	17db      	asrs	r3, r3, #31
 800245c:	1ad2      	subs	r2, r2, r3
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	3301      	adds	r3, #1
 8002464:	b2d1      	uxtb	r1, r2
 8002466:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <view_image+0x200>)
 8002468:	54d1      	strb	r1, [r2, r3]
 800246a:	e041      	b.n	80024f0 <view_image+0x19c>
        }
        else {
          uint16_t rbg1 = (temp >> 0) & 0x00FF;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	b29b      	uxth	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t rbg2 = (temp >> 16) & 0x00FF;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	843b      	strh	r3, [r7, #32]
          uint32_t pix = RGB565toRGB888(rbg1);
 800247e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f8d1 	bl	8001628 <RGB565toRGB888>
 8002486:	61f8      	str	r0, [r7, #28]
          uint32_t next_pix = RGB565toRGB888(rbg2);
 8002488:	8c3b      	ldrh	r3, [r7, #32]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f8cc 	bl	8001628 <RGB565toRGB888>
 8002490:	61b8      	str	r0, [r7, #24]

          uint8_t r = (pix >> (0)) & 0xff;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	75fb      	strb	r3, [r7, #23]
          uint8_t g = (pix >> (8)) & 0xff;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	75bb      	strb	r3, [r7, #22]
          uint8_t b = (pix >> (16)) & 0xff;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	757b      	strb	r3, [r7, #21]
          data[2*idx] = (uint8_t)((r + g + b)/3);
 80024a2:	7dfa      	ldrb	r2, [r7, #23]
 80024a4:	7dbb      	ldrb	r3, [r7, #22]
 80024a6:	441a      	add	r2, r3
 80024a8:	7d7b      	ldrb	r3, [r7, #21]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a2b      	ldr	r2, [pc, #172]	; (800255c <view_image+0x208>)
 80024ae:	fb82 1203 	smull	r1, r2, r2, r3
 80024b2:	17db      	asrs	r3, r3, #31
 80024b4:	1ad2      	subs	r2, r2, r3
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b2d1      	uxtb	r1, r2
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <view_image+0x200>)
 80024be:	54d1      	strb	r1, [r2, r3]

          r = (next_pix >> (0)) & 0xff;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	75fb      	strb	r3, [r7, #23]
          g = (next_pix >> (8)) & 0xff;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	75bb      	strb	r3, [r7, #22]
          b = (next_pix >> (16)) & 0xff;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	757b      	strb	r3, [r7, #21]
          data[2*idx + 1] = (uint8_t)((r + g + b)/3);
 80024d0:	7dfa      	ldrb	r2, [r7, #23]
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	441a      	add	r2, r3
 80024d6:	7d7b      	ldrb	r3, [r7, #21]
 80024d8:	4413      	add	r3, r2
 80024da:	4a20      	ldr	r2, [pc, #128]	; (800255c <view_image+0x208>)
 80024dc:	fb82 1203 	smull	r1, r2, r2, r3
 80024e0:	17db      	asrs	r3, r3, #31
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	3301      	adds	r3, #1
 80024ea:	b2d1      	uxtb	r1, r2
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <view_image+0x200>)
 80024ee:	54d1      	strb	r1, [r2, r3]
      for (int j = 0; j < (int)width/2; j += 1) {
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	3301      	adds	r3, #1
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <view_image+0x1fc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	4293      	cmp	r3, r2
 8002504:	f6ff af43 	blt.w	800238e <view_image+0x3a>
    for (int i = k; i < height; i += 2) {
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	3302      	adds	r3, #2
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <view_image+0x1f8>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	4293      	cmp	r3, r2
 8002518:	f6ff af36 	blt.w	8002388 <view_image+0x34>
  for (int k = 0; k < 2; k += 1) {
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	3301      	adds	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	2b01      	cmp	r3, #1
 8002526:	f77f af2c 	ble.w	8002382 <view_image+0x2e>
        }
      }
    }
  }

  log_data(data, height*width);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <view_image+0x1f8>)
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <view_image+0x1fc>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	fb12 f303 	smulbb	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <view_image+0x200>)
 800253c:	f7ff fee2 	bl	8002304 <log_data>
}
 8002540:	bf00      	nop
 8002542:	3738      	adds	r7, #56	; 0x38
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	24031af2 	.word	0x24031af2
 800254c:	24031af0 	.word	0x24031af0
 8002550:	24031aee 	.word	0x24031aee
 8002554:	24031af4 	.word	0x24031af4
 8002558:	240002ec 	.word	0x240002ec
 800255c:	55555556 	.word	0x55555556

08002560 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002568:	2102      	movs	r1, #2
 800256a:	4804      	ldr	r0, [pc, #16]	; (800257c <HAL_UART_RxCpltCallback+0x1c>)
 800256c:	f004 fa49 	bl	8006a02 <HAL_GPIO_TogglePin>
  view_image();
 8002570:	f7ff fef0 	bl	8002354 <view_image>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	58020000 	.word	0x58020000

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <SystemInit+0xe4>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a36      	ldr	r2, [pc, #216]	; (8002664 <SystemInit+0xe4>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <SystemInit+0xe8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	2b06      	cmp	r3, #6
 800259e:	d807      	bhi.n	80025b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a0:	4b31      	ldr	r3, [pc, #196]	; (8002668 <SystemInit+0xe8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <SystemInit+0xe8>)
 80025aa:	f043 0307 	orr.w	r3, r3, #7
 80025ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <SystemInit+0xec>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2d      	ldr	r2, [pc, #180]	; (800266c <SystemInit+0xec>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <SystemInit+0xec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <SystemInit+0xec>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4929      	ldr	r1, [pc, #164]	; (800266c <SystemInit+0xec>)
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <SystemInit+0xf0>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <SystemInit+0xe8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <SystemInit+0xe8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 030f 	bic.w	r3, r3, #15
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <SystemInit+0xe8>)
 80025e4:	f043 0307 	orr.w	r3, r3, #7
 80025e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <SystemInit+0xec>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <SystemInit+0xec>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <SystemInit+0xec>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <SystemInit+0xec>)
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <SystemInit+0xf4>)
 8002600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <SystemInit+0xec>)
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <SystemInit+0xf8>)
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <SystemInit+0xec>)
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <SystemInit+0xfc>)
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <SystemInit+0xec>)
 8002610:	2200      	movs	r2, #0
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <SystemInit+0xec>)
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <SystemInit+0xfc>)
 8002618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <SystemInit+0xec>)
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <SystemInit+0xec>)
 8002622:	4a16      	ldr	r2, [pc, #88]	; (800267c <SystemInit+0xfc>)
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <SystemInit+0xec>)
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <SystemInit+0xec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <SystemInit+0xec>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <SystemInit+0xec>)
 800263a:	2200      	movs	r2, #0
 800263c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <SystemInit+0x100>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <SystemInit+0x104>)
 8002644:	4013      	ands	r3, r2
 8002646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264a:	d202      	bcs.n	8002652 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <SystemInit+0x108>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <SystemInit+0x10c>)
 8002654:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002658:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00
 8002668:	52002000 	.word	0x52002000
 800266c:	58024400 	.word	0x58024400
 8002670:	eaf6ed7f 	.word	0xeaf6ed7f
 8002674:	02020200 	.word	0x02020200
 8002678:	01ff0000 	.word	0x01ff0000
 800267c:	01010280 	.word	0x01010280
 8002680:	5c001000 	.word	0x5c001000
 8002684:	ffff0000 	.word	0xffff0000
 8002688:	51008108 	.word	0x51008108
 800268c:	52004000 	.word	0x52004000

08002690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002694:	f7ff ff74 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800269a:	490d      	ldr	r1, [pc, #52]	; (80026d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026be:	f00a fe51 	bl	800d364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7fe ffff 	bl	80016c4 <main>
  bx  lr
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026d0:	24000040 	.word	0x24000040
  ldr r2, =_sidata
 80026d4:	0800d4a8 	.word	0x0800d4a8
  ldr r2, =_sbss
 80026d8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 80026dc:	240446f8 	.word	0x240446f8

080026e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC3_IRQHandler>
	...

080026e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f000 f98c 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f0:	f006 f876 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_Init+0x68>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4913      	ldr	r1, [pc, #76]	; (8002750 <HAL_Init+0x6c>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_Init+0x68>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_Init+0x6c>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_Init+0x70>)
 8002726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_Init+0x74>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272e:	200f      	movs	r0, #15
 8002730:	f000 f814 	bl	800275c <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e002      	b.n	8002744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800273e:	f7ff fadb 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	0800d458 	.word	0x0800d458
 8002754:	24000034 	.word	0x24000034
 8002758:	24000030 	.word	0x24000030

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_InitTick+0x60>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e021      	b.n	80027b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_InitTick+0x64>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_InitTick+0x60>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f971 	bl	8002a6e <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a4:	f000 f93b 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_InitTick+0x68>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2400003c 	.word	0x2400003c
 80027c0:	24000030 	.word	0x24000030
 80027c4:	24000038 	.word	0x24000038

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	2400003c 	.word	0x2400003c
 80027ec:	240446f4 	.word	0x240446f4

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	240446f4 	.word	0x240446f4

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2400003c 	.word	0x2400003c

08002850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetREVID+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0c1b      	lsrs	r3, r3, #16
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	5c001000 	.word	0x5c001000

08002868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <__NVIC_SetPriorityGrouping+0x40>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	4313      	orrs	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00
 80028ac:	05fa0000 	.word	0x05fa0000

080028b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <__NVIC_GetPriorityGrouping+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 0307 	and.w	r3, r3, #7
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	db0b      	blt.n	80028f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <__NVIC_EnableIRQ+0x38>)
 80028e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2001      	movs	r0, #1
 80028ee:	fa00 f202 	lsl.w	r2, r0, r2
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e8:	f7ff ff8e 	bl	8002908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff29 	bl	8002868 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2c:	f7ff ff40 	bl	80028b0 <__NVIC_GetPriorityGrouping>
 8002a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f7ff ff90 	bl	800295c <NVIC_EncodePriority>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff5f 	bl	8002908 <__NVIC_SetPriority>
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff33 	bl	80028cc <__NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ffa4 	bl	80029c4 <SysTick_Config>
 8002a7c:	4603      	mov	r3, r0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a8c:	f3bf 8f5f 	dmb	sy
}
 8002a90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_MPU_Disable+0x28>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_MPU_Disable+0x28>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_MPU_Disable+0x2c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00
 8002ab4:	e000ed90 	.word	0xe000ed90

08002ab8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_MPU_Enable+0x38>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_MPU_Enable+0x3c>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_MPU_Enable+0x3c>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002ad6:	f3bf 8f4f 	dsb	sy
}
 8002ada:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002adc:	f3bf 8f6f 	isb	sy
}
 8002ae0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed90 	.word	0xe000ed90
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785a      	ldrb	r2, [r3, #1]
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_MPU_ConfigRegion+0x84>)
 8002b06:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d029      	beq.n	8002b64 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_MPU_ConfigRegion+0x84>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7b1b      	ldrb	r3, [r3, #12]
 8002b1c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7adb      	ldrb	r3, [r3, #11]
 8002b22:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7a9b      	ldrb	r3, [r3, #10]
 8002b2a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7b5b      	ldrb	r3, [r3, #13]
 8002b32:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7b9b      	ldrb	r3, [r3, #14]
 8002b3a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7bdb      	ldrb	r3, [r3, #15]
 8002b42:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7a5b      	ldrb	r3, [r3, #9]
 8002b4a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7a1b      	ldrb	r3, [r3, #8]
 8002b52:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b54:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b5e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b60:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002b62:	e005      	b.n	8002b70 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_MPU_ConfigRegion+0x84>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_MPU_ConfigRegion+0x84>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed90 	.word	0xe000ed90

08002b80 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e069      	b.n	8002c66 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f8c4 	bl	8001d2c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_DCMI_Init+0xf0>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002bde:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002bea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002bf6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002c02:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002c0e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d112      	bne.n	8002c46 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7f1b      	ldrb	r3, [r3, #28]
 8002c24:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7f5b      	ldrb	r3, [r3, #29]
 8002c2a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c2c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7f9b      	ldrb	r3, [r3, #30]
 8002c32:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002c34:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7fdb      	ldrb	r3, [r3, #31]
 8002c3c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002c42:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002c44:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 021e 	orr.w	r2, r2, #30
 8002c54:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	ffe0f007 	.word	0xffe0f007

08002c74 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_DCMI_Start_DMA+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0ab      	b.n	8002de8 <HAL_DCMI_Start_DMA+0x174>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cae:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0202 	bic.w	r2, r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd4:	4a46      	ldr	r2, [pc, #280]	; (8002df0 <HAL_DCMI_Start_DMA+0x17c>)
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cdc:	4a45      	ldr	r2, [pc, #276]	; (8002df4 <HAL_DCMI_Start_DMA+0x180>)
 8002cde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d219      	bcs.n	8002d3c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3328      	adds	r3, #40	; 0x28
 8002d12:	4619      	mov	r1, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	f000 fd1a 	bl	8003750 <HAL_DMA_Start_IT>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d055      	beq.n	8002dce <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e055      	b.n	8002de8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_DCMI_Start_DMA+0x17c>)
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002d56:	e009      	b.n	8002d6c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	085a      	lsrs	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	005a      	lsls	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d2f0      	bcs.n	8002d58 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	1e9a      	subs	r2, r3, #2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3328      	adds	r3, #40	; 0x28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	f002 ffb1 	bl	8005d10 <HAL_DMAEx_MultiBufferStart_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00c      	b.n	8002de8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	08002f39 	.word	0x08002f39
 8002df4:	0800305f 	.word	0x0800305f

08002df8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2204      	movs	r2, #4
 8002e18:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_DCMI_IRQHandler+0x100>)
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fa10 	bl	8004260 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <HAL_DCMI_IRQHandler+0x100>)
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 f9f4 	bl	8004260 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f840 	bl	8002f10 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f83e 	bl	8002f24 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d107      	bne.n	8002ed0 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 021e 	bic.w	r2, r2, #30
 8002ece:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fe faef 	bl	80014cc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	0800305f 	.word	0x0800305f

08002efc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d043      	beq.n	8002fd6 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d118      	bne.n	8002f9a <DCMI_DMAXferCplt+0x62>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	00da      	lsls	r2, r3, #3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	2200      	movs	r2, #0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f003 fa1f 	bl	80063cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
 8002f98:	e044      	b.n	8003024 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d13c      	bne.n	8003024 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	00da      	lsls	r2, r3, #3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f003 fa01 	bl	80063cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd4:	e026      	b.n	8003024 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e017      	b.n	8003024 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10f      	bne.n	8003024 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	440a      	add	r2, r1
 800301a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	429a      	cmp	r2, r3
 800302e:	d112      	bne.n	8003056 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d103      	bne.n	8003056 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	2b02      	cmp	r3, #2
 8003074:	d009      	beq.n	800308a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff36 	bl	8002efc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff fba6 	bl	80027f0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e316      	b.n	80036de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_DMA_Init+0x1b8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d04a      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a65      	ldr	r2, [pc, #404]	; (8003254 <HAL_DMA_Init+0x1bc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d045      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a63      	ldr	r2, [pc, #396]	; (8003258 <HAL_DMA_Init+0x1c0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a62      	ldr	r2, [pc, #392]	; (800325c <HAL_DMA_Init+0x1c4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d03b      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a60      	ldr	r2, [pc, #384]	; (8003260 <HAL_DMA_Init+0x1c8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d036      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5f      	ldr	r2, [pc, #380]	; (8003264 <HAL_DMA_Init+0x1cc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d031      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5d      	ldr	r2, [pc, #372]	; (8003268 <HAL_DMA_Init+0x1d0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02c      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5c      	ldr	r2, [pc, #368]	; (800326c <HAL_DMA_Init+0x1d4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d027      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <HAL_DMA_Init+0x1d8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a59      	ldr	r2, [pc, #356]	; (8003274 <HAL_DMA_Init+0x1dc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01d      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a57      	ldr	r2, [pc, #348]	; (8003278 <HAL_DMA_Init+0x1e0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a56      	ldr	r2, [pc, #344]	; (800327c <HAL_DMA_Init+0x1e4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_DMA_Init+0x1e8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_DMA_Init+0x1ec>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a51      	ldr	r2, [pc, #324]	; (8003288 <HAL_DMA_Init+0x1f0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_Init+0xb8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a50      	ldr	r2, [pc, #320]	; (800328c <HAL_DMA_Init+0x1f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Init+0xbc>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_DMA_Init+0xbe>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 813b 	beq.w	80033d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <HAL_DMA_Init+0x1b8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04a      	beq.n	800320c <HAL_DMA_Init+0x174>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_DMA_Init+0x1bc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d045      	beq.n	800320c <HAL_DMA_Init+0x174>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a34      	ldr	r2, [pc, #208]	; (8003258 <HAL_DMA_Init+0x1c0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d040      	beq.n	800320c <HAL_DMA_Init+0x174>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a33      	ldr	r2, [pc, #204]	; (800325c <HAL_DMA_Init+0x1c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d03b      	beq.n	800320c <HAL_DMA_Init+0x174>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_DMA_Init+0x1c8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d036      	beq.n	800320c <HAL_DMA_Init+0x174>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_DMA_Init+0x1cc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d031      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <HAL_DMA_Init+0x1d0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02c      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_DMA_Init+0x1d4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d027      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <HAL_DMA_Init+0x1d8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d022      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_DMA_Init+0x1dc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d01d      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_DMA_Init+0x1e0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d018      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_DMA_Init+0x1e4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	; (8003280 <HAL_DMA_Init+0x1e8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00e      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_DMA_Init+0x1ec>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_DMA_Init+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_Init+0x1f0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_DMA_Init+0x174>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_DMA_Init+0x1f4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d108      	bne.n	800321e <HAL_DMA_Init+0x186>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e007      	b.n	800322e <HAL_DMA_Init+0x196>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800322e:	e02f      	b.n	8003290 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003230:	f7ff fade 	bl	80027f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b05      	cmp	r3, #5
 800323c:	d928      	bls.n	8003290 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e246      	b.n	80036de <HAL_DMA_Init+0x646>
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1c8      	bne.n	8003230 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <HAL_DMA_Init+0x420>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4313      	orrs	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <HAL_DMA_Init+0x424>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b71      	ldr	r3, [pc, #452]	; (80034c0 <HAL_DMA_Init+0x428>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003300:	d328      	bcc.n	8003354 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b28      	cmp	r3, #40	; 0x28
 8003308:	d903      	bls.n	8003312 <HAL_DMA_Init+0x27a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b2e      	cmp	r3, #46	; 0x2e
 8003310:	d917      	bls.n	8003342 <HAL_DMA_Init+0x2aa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b3e      	cmp	r3, #62	; 0x3e
 8003318:	d903      	bls.n	8003322 <HAL_DMA_Init+0x28a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b42      	cmp	r3, #66	; 0x42
 8003320:	d90f      	bls.n	8003342 <HAL_DMA_Init+0x2aa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b46      	cmp	r3, #70	; 0x46
 8003328:	d903      	bls.n	8003332 <HAL_DMA_Init+0x29a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b48      	cmp	r3, #72	; 0x48
 8003330:	d907      	bls.n	8003342 <HAL_DMA_Init+0x2aa>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b4e      	cmp	r3, #78	; 0x4e
 8003338:	d905      	bls.n	8003346 <HAL_DMA_Init+0x2ae>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b52      	cmp	r3, #82	; 0x52
 8003340:	d801      	bhi.n	8003346 <HAL_DMA_Init+0x2ae>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_DMA_Init+0x2b0>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003352:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b04      	cmp	r3, #4
 800337c:	d117      	bne.n	80033ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f002 fb33 	bl	80059fc <DMA_CheckFifoParam>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e197      	b.n	80036de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f002 fa6e 	bl	8005898 <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	223f      	movs	r2, #63	; 0x3f
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e0cd      	b.n	800356e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3b      	ldr	r2, [pc, #236]	; (80034c4 <HAL_DMA_Init+0x42c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_DMA_Init+0x430>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a38      	ldr	r2, [pc, #224]	; (80034cc <HAL_DMA_Init+0x434>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a36      	ldr	r2, [pc, #216]	; (80034d0 <HAL_DMA_Init+0x438>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a35      	ldr	r2, [pc, #212]	; (80034d4 <HAL_DMA_Init+0x43c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <HAL_DMA_Init+0x440>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_DMA_Init+0x444>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Init+0x38a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <HAL_DMA_Init+0x448>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_DMA_Init+0x38e>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_DMA_Init+0x390>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8097 	beq.w	800355c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_DMA_Init+0x42c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d021      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <HAL_DMA_Init+0x430>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01c      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_DMA_Init+0x434>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d017      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_DMA_Init+0x438>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d012      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_DMA_Init+0x43c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00d      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_DMA_Init+0x440>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d008      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_DMA_Init+0x444>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <HAL_DMA_Init+0x3e4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_DMA_Init+0x448>)
 800347a:	4293      	cmp	r3, r2
 800347c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_DMA_Init+0x44c>)
 800349a:	4013      	ands	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d020      	beq.n	80034e8 <HAL_DMA_Init+0x450>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d102      	bne.n	80034b4 <HAL_DMA_Init+0x41c>
 80034ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034b2:	e01a      	b.n	80034ea <HAL_DMA_Init+0x452>
 80034b4:	2300      	movs	r3, #0
 80034b6:	e018      	b.n	80034ea <HAL_DMA_Init+0x452>
 80034b8:	fe10803f 	.word	0xfe10803f
 80034bc:	5c001000 	.word	0x5c001000
 80034c0:	ffff0000 	.word	0xffff0000
 80034c4:	58025408 	.word	0x58025408
 80034c8:	5802541c 	.word	0x5802541c
 80034cc:	58025430 	.word	0x58025430
 80034d0:	58025444 	.word	0x58025444
 80034d4:	58025458 	.word	0x58025458
 80034d8:	5802546c 	.word	0x5802546c
 80034dc:	58025480 	.word	0x58025480
 80034e0:	58025494 	.word	0x58025494
 80034e4:	fffe000f 	.word	0xfffe000f
 80034e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68d2      	ldr	r2, [r2, #12]
 80034ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003510:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003518:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b6e      	ldr	r3, [pc, #440]	; (80036e8 <HAL_DMA_Init+0x650>)
 8003530:	4413      	add	r3, r2
 8003532:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_DMA_Init+0x654>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f002 f9a9 	bl	8005898 <DMA_CalcBaseAndBitshift>
 8003546:	4603      	mov	r3, r0
 8003548:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e008      	b.n	800356e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0b7      	b.n	80036de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5f      	ldr	r2, [pc, #380]	; (80036f0 <HAL_DMA_Init+0x658>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d072      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <HAL_DMA_Init+0x65c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d06d      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5c      	ldr	r2, [pc, #368]	; (80036f8 <HAL_DMA_Init+0x660>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d068      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5a      	ldr	r2, [pc, #360]	; (80036fc <HAL_DMA_Init+0x664>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d063      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a59      	ldr	r2, [pc, #356]	; (8003700 <HAL_DMA_Init+0x668>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d05e      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a57      	ldr	r2, [pc, #348]	; (8003704 <HAL_DMA_Init+0x66c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d059      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a56      	ldr	r2, [pc, #344]	; (8003708 <HAL_DMA_Init+0x670>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d054      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <HAL_DMA_Init+0x674>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04f      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a53      	ldr	r2, [pc, #332]	; (8003710 <HAL_DMA_Init+0x678>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d04a      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a51      	ldr	r2, [pc, #324]	; (8003714 <HAL_DMA_Init+0x67c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d045      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a50      	ldr	r2, [pc, #320]	; (8003718 <HAL_DMA_Init+0x680>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d040      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4e      	ldr	r2, [pc, #312]	; (800371c <HAL_DMA_Init+0x684>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d03b      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <HAL_DMA_Init+0x688>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d036      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4b      	ldr	r2, [pc, #300]	; (8003724 <HAL_DMA_Init+0x68c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4a      	ldr	r2, [pc, #296]	; (8003728 <HAL_DMA_Init+0x690>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02c      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a48      	ldr	r2, [pc, #288]	; (800372c <HAL_DMA_Init+0x694>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d027      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a47      	ldr	r2, [pc, #284]	; (8003730 <HAL_DMA_Init+0x698>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a45      	ldr	r2, [pc, #276]	; (8003734 <HAL_DMA_Init+0x69c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a44      	ldr	r2, [pc, #272]	; (8003738 <HAL_DMA_Init+0x6a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a42      	ldr	r2, [pc, #264]	; (800373c <HAL_DMA_Init+0x6a4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a41      	ldr	r2, [pc, #260]	; (8003740 <HAL_DMA_Init+0x6a8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3f      	ldr	r2, [pc, #252]	; (8003744 <HAL_DMA_Init+0x6ac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3e      	ldr	r2, [pc, #248]	; (8003748 <HAL_DMA_Init+0x6b0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_DMA_Init+0x5c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3c      	ldr	r2, [pc, #240]	; (800374c <HAL_DMA_Init+0x6b4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_DMA_Init+0x5ca>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_DMA_Init+0x5cc>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d032      	beq.n	80036ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f002 fa43 	bl	8005af4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d102      	bne.n	800367c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003690:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_DMA_Init+0x624>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d80c      	bhi.n	80036bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f002 fac0 	bl	8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e008      	b.n	80036ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	a7fdabf8 	.word	0xa7fdabf8
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	40020010 	.word	0x40020010
 80036f4:	40020028 	.word	0x40020028
 80036f8:	40020040 	.word	0x40020040
 80036fc:	40020058 	.word	0x40020058
 8003700:	40020070 	.word	0x40020070
 8003704:	40020088 	.word	0x40020088
 8003708:	400200a0 	.word	0x400200a0
 800370c:	400200b8 	.word	0x400200b8
 8003710:	40020410 	.word	0x40020410
 8003714:	40020428 	.word	0x40020428
 8003718:	40020440 	.word	0x40020440
 800371c:	40020458 	.word	0x40020458
 8003720:	40020470 	.word	0x40020470
 8003724:	40020488 	.word	0x40020488
 8003728:	400204a0 	.word	0x400204a0
 800372c:	400204b8 	.word	0x400204b8
 8003730:	58025408 	.word	0x58025408
 8003734:	5802541c 	.word	0x5802541c
 8003738:	58025430 	.word	0x58025430
 800373c:	58025444 	.word	0x58025444
 8003740:	58025458 	.word	0x58025458
 8003744:	5802546c 	.word	0x5802546c
 8003748:	58025480 	.word	0x58025480
 800374c:	58025494 	.word	0x58025494

08003750 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e226      	b.n	8003bba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_DMA_Start_IT+0x2a>
 8003776:	2302      	movs	r3, #2
 8003778:	e21f      	b.n	8003bba <HAL_DMA_Start_IT+0x46a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	f040 820a 	bne.w	8003ba4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_DMA_Start_IT+0x1f4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04a      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a66      	ldr	r2, [pc, #408]	; (8003948 <HAL_DMA_Start_IT+0x1f8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d045      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_DMA_Start_IT+0x1fc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d040      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a63      	ldr	r2, [pc, #396]	; (8003950 <HAL_DMA_Start_IT+0x200>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a62      	ldr	r2, [pc, #392]	; (8003954 <HAL_DMA_Start_IT+0x204>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d036      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a60      	ldr	r2, [pc, #384]	; (8003958 <HAL_DMA_Start_IT+0x208>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d031      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5f      	ldr	r2, [pc, #380]	; (800395c <HAL_DMA_Start_IT+0x20c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d02c      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <HAL_DMA_Start_IT+0x210>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5c      	ldr	r2, [pc, #368]	; (8003964 <HAL_DMA_Start_IT+0x214>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5a      	ldr	r2, [pc, #360]	; (8003968 <HAL_DMA_Start_IT+0x218>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a59      	ldr	r2, [pc, #356]	; (800396c <HAL_DMA_Start_IT+0x21c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_DMA_Start_IT+0x220>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a56      	ldr	r2, [pc, #344]	; (8003974 <HAL_DMA_Start_IT+0x224>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a54      	ldr	r2, [pc, #336]	; (8003978 <HAL_DMA_Start_IT+0x228>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a53      	ldr	r2, [pc, #332]	; (800397c <HAL_DMA_Start_IT+0x22c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_DMA_Start_IT+0xee>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_DMA_Start_IT+0x230>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <HAL_DMA_Start_IT+0x100>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e007      	b.n	8003860 <HAL_DMA_Start_IT+0x110>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f001 fe6a 	bl	8005540 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a34      	ldr	r2, [pc, #208]	; (8003944 <HAL_DMA_Start_IT+0x1f4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a33      	ldr	r2, [pc, #204]	; (8003948 <HAL_DMA_Start_IT+0x1f8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <HAL_DMA_Start_IT+0x1fc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a30      	ldr	r2, [pc, #192]	; (8003950 <HAL_DMA_Start_IT+0x200>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <HAL_DMA_Start_IT+0x204>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <HAL_DMA_Start_IT+0x208>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	; (800395c <HAL_DMA_Start_IT+0x20c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <HAL_DMA_Start_IT+0x210>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <HAL_DMA_Start_IT+0x214>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a27      	ldr	r2, [pc, #156]	; (8003968 <HAL_DMA_Start_IT+0x218>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_DMA_Start_IT+0x21c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_DMA_Start_IT+0x220>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <HAL_DMA_Start_IT+0x224>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_DMA_Start_IT+0x228>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_DMA_Start_IT+0x22c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_Start_IT+0x1bc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_DMA_Start_IT+0x230>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_DMA_Start_IT+0x1c0>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_DMA_Start_IT+0x1c2>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 021e 	bic.w	r2, r3, #30
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0216 	orr.w	r2, r2, #22
 8003928:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03e      	beq.n	80039b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e035      	b.n	80039b0 <HAL_DMA_Start_IT+0x260>
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 020e 	bic.w	r2, r3, #14
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 020a 	orr.w	r2, r2, #10
 8003996:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0204 	orr.w	r2, r2, #4
 80039ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_DMA_Start_IT+0x474>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d072      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a82      	ldr	r2, [pc, #520]	; (8003bc8 <HAL_DMA_Start_IT+0x478>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d06d      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_DMA_Start_IT+0x47c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d068      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_DMA_Start_IT+0x480>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d063      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7d      	ldr	r2, [pc, #500]	; (8003bd4 <HAL_DMA_Start_IT+0x484>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d05e      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_DMA_Start_IT+0x488>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d059      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7a      	ldr	r2, [pc, #488]	; (8003bdc <HAL_DMA_Start_IT+0x48c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d054      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <HAL_DMA_Start_IT+0x490>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d04f      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_DMA_Start_IT+0x494>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_DMA_Start_IT+0x498>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a74      	ldr	r2, [pc, #464]	; (8003bec <HAL_DMA_Start_IT+0x49c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_DMA_Start_IT+0x4a0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a71      	ldr	r2, [pc, #452]	; (8003bf4 <HAL_DMA_Start_IT+0x4a4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a70      	ldr	r2, [pc, #448]	; (8003bf8 <HAL_DMA_Start_IT+0x4a8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_DMA_Start_IT+0x4ac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6d      	ldr	r2, [pc, #436]	; (8003c00 <HAL_DMA_Start_IT+0x4b0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6b      	ldr	r2, [pc, #428]	; (8003c04 <HAL_DMA_Start_IT+0x4b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_DMA_Start_IT+0x4b8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_DMA_Start_IT+0x4bc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a67      	ldr	r2, [pc, #412]	; (8003c10 <HAL_DMA_Start_IT+0x4c0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_DMA_Start_IT+0x4c4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a64      	ldr	r2, [pc, #400]	; (8003c18 <HAL_DMA_Start_IT+0x4c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a62      	ldr	r2, [pc, #392]	; (8003c1c <HAL_DMA_Start_IT+0x4cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x350>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a61      	ldr	r2, [pc, #388]	; (8003c20 <HAL_DMA_Start_IT+0x4d0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Start_IT+0x354>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_Start_IT+0x356>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01a      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ade:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <HAL_DMA_Start_IT+0x474>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d04a      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a36      	ldr	r2, [pc, #216]	; (8003bc8 <HAL_DMA_Start_IT+0x478>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d045      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_DMA_Start_IT+0x47c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d040      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a33      	ldr	r2, [pc, #204]	; (8003bd0 <HAL_DMA_Start_IT+0x480>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d03b      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_DMA_Start_IT+0x484>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d036      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_DMA_Start_IT+0x488>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d031      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2e      	ldr	r2, [pc, #184]	; (8003bdc <HAL_DMA_Start_IT+0x48c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02c      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <HAL_DMA_Start_IT+0x490>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d027      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_DMA_Start_IT+0x494>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <HAL_DMA_Start_IT+0x498>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01d      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <HAL_DMA_Start_IT+0x49c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <HAL_DMA_Start_IT+0x4a0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_DMA_Start_IT+0x4a4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <HAL_DMA_Start_IT+0x4a8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_DMA_Start_IT+0x4ac>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_Start_IT+0x430>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_DMA_Start_IT+0x4b0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <HAL_DMA_Start_IT+0x442>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e012      	b.n	8003bb8 <HAL_DMA_Start_IT+0x468>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e009      	b.n	8003bb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
 8003c04:	58025408 	.word	0x58025408
 8003c08:	5802541c 	.word	0x5802541c
 8003c0c:	58025430 	.word	0x58025430
 8003c10:	58025444 	.word	0x58025444
 8003c14:	58025458 	.word	0x58025458
 8003c18:	5802546c 	.word	0x5802546c
 8003c1c:	58025480 	.word	0x58025480
 8003c20:	58025494 	.word	0x58025494

08003c24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7fe fde0 	bl	80027f0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e2dc      	b.n	80041f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e2cd      	b.n	80041f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a76      	ldr	r2, [pc, #472]	; (8003e38 <HAL_DMA_Abort+0x214>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a74      	ldr	r2, [pc, #464]	; (8003e3c <HAL_DMA_Abort+0x218>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_DMA_Abort+0x21c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a71      	ldr	r2, [pc, #452]	; (8003e44 <HAL_DMA_Abort+0x220>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a70      	ldr	r2, [pc, #448]	; (8003e48 <HAL_DMA_Abort+0x224>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_DMA_Abort+0x228>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_DMA_Abort+0x22c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6b      	ldr	r2, [pc, #428]	; (8003e54 <HAL_DMA_Abort+0x230>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_DMA_Abort+0x234>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_DMA_Abort+0x238>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a67      	ldr	r2, [pc, #412]	; (8003e60 <HAL_DMA_Abort+0x23c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_DMA_Abort+0x240>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a64      	ldr	r2, [pc, #400]	; (8003e68 <HAL_DMA_Abort+0x244>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a62      	ldr	r2, [pc, #392]	; (8003e6c <HAL_DMA_Abort+0x248>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a61      	ldr	r2, [pc, #388]	; (8003e70 <HAL_DMA_Abort+0x24c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_Abort+0xd6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a5f      	ldr	r2, [pc, #380]	; (8003e74 <HAL_DMA_Abort+0x250>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_DMA_Abort+0xda>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_DMA_Abort+0xdc>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 021e 	bic.w	r2, r2, #30
 8003d12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e00a      	b.n	8003d42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020e 	bic.w	r2, r2, #14
 8003d3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <HAL_DMA_Abort+0x214>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d072      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <HAL_DMA_Abort+0x218>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d06d      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <HAL_DMA_Abort+0x21c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d068      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <HAL_DMA_Abort+0x220>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d063      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a36      	ldr	r2, [pc, #216]	; (8003e48 <HAL_DMA_Abort+0x224>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d05e      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_DMA_Abort+0x228>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d059      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <HAL_DMA_Abort+0x22c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d054      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <HAL_DMA_Abort+0x230>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04f      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_DMA_Abort+0x234>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04a      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <HAL_DMA_Abort+0x238>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d045      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <HAL_DMA_Abort+0x23c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d040      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <HAL_DMA_Abort+0x240>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <HAL_DMA_Abort+0x244>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d036      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_DMA_Abort+0x248>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d031      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <HAL_DMA_Abort+0x24c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d02c      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_DMA_Abort+0x250>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d027      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <HAL_DMA_Abort+0x254>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_DMA_Abort+0x258>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_DMA_Abort+0x25c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_DMA_Abort+0x260>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_DMA_Abort+0x264>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_DMA_Abort+0x268>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_DMA_Abort+0x26c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_DMA_Abort+0x20e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <HAL_DMA_Abort+0x270>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d132      	bne.n	8003e98 <HAL_DMA_Abort+0x274>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e031      	b.n	8003e9a <HAL_DMA_Abort+0x276>
 8003e36:	bf00      	nop
 8003e38:	40020010 	.word	0x40020010
 8003e3c:	40020028 	.word	0x40020028
 8003e40:	40020040 	.word	0x40020040
 8003e44:	40020058 	.word	0x40020058
 8003e48:	40020070 	.word	0x40020070
 8003e4c:	40020088 	.word	0x40020088
 8003e50:	400200a0 	.word	0x400200a0
 8003e54:	400200b8 	.word	0x400200b8
 8003e58:	40020410 	.word	0x40020410
 8003e5c:	40020428 	.word	0x40020428
 8003e60:	40020440 	.word	0x40020440
 8003e64:	40020458 	.word	0x40020458
 8003e68:	40020470 	.word	0x40020470
 8003e6c:	40020488 	.word	0x40020488
 8003e70:	400204a0 	.word	0x400204a0
 8003e74:	400204b8 	.word	0x400204b8
 8003e78:	58025408 	.word	0x58025408
 8003e7c:	5802541c 	.word	0x5802541c
 8003e80:	58025430 	.word	0x58025430
 8003e84:	58025444 	.word	0x58025444
 8003e88:	58025458 	.word	0x58025458
 8003e8c:	5802546c 	.word	0x5802546c
 8003e90:	58025480 	.word	0x58025480
 8003e94:	58025494 	.word	0x58025494
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6d      	ldr	r2, [pc, #436]	; (8004068 <HAL_DMA_Abort+0x444>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6b      	ldr	r2, [pc, #428]	; (800406c <HAL_DMA_Abort+0x448>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <HAL_DMA_Abort+0x44c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a68      	ldr	r2, [pc, #416]	; (8004074 <HAL_DMA_Abort+0x450>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_DMA_Abort+0x454>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_DMA_Abort+0x458>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a64      	ldr	r2, [pc, #400]	; (8004080 <HAL_DMA_Abort+0x45c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a62      	ldr	r2, [pc, #392]	; (8004084 <HAL_DMA_Abort+0x460>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a61      	ldr	r2, [pc, #388]	; (8004088 <HAL_DMA_Abort+0x464>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_DMA_Abort+0x468>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5e      	ldr	r2, [pc, #376]	; (8004090 <HAL_DMA_Abort+0x46c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_DMA_Abort+0x470>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_DMA_Abort+0x474>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a59      	ldr	r2, [pc, #356]	; (800409c <HAL_DMA_Abort+0x478>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a58      	ldr	r2, [pc, #352]	; (80040a0 <HAL_DMA_Abort+0x47c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Abort+0x32a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_DMA_Abort+0x480>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <HAL_DMA_Abort+0x33c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_DMA_Abort+0x34c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f70:	e013      	b.n	8003f9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f72:	f7fe fc3d 	bl	80027f0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d90c      	bls.n	8003f9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e12d      	b.n	80041f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <HAL_DMA_Abort+0x444>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2d      	ldr	r2, [pc, #180]	; (800406c <HAL_DMA_Abort+0x448>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <HAL_DMA_Abort+0x44c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_DMA_Abort+0x450>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_DMA_Abort+0x454>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_DMA_Abort+0x458>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_DMA_Abort+0x45c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <HAL_DMA_Abort+0x460>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a23      	ldr	r2, [pc, #140]	; (8004088 <HAL_DMA_Abort+0x464>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a21      	ldr	r2, [pc, #132]	; (800408c <HAL_DMA_Abort+0x468>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_DMA_Abort+0x46c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_DMA_Abort+0x470>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_DMA_Abort+0x474>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_DMA_Abort+0x478>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HAL_DMA_Abort+0x47c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Abort+0x422>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_DMA_Abort+0x480>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_DMA_Abort+0x426>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Abort+0x428>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02b      	beq.n	80040a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	223f      	movs	r2, #63	; 0x3f
 8004060:	409a      	lsls	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	e02a      	b.n	80040be <HAL_DMA_Abort+0x49a>
 8004068:	40020010 	.word	0x40020010
 800406c:	40020028 	.word	0x40020028
 8004070:	40020040 	.word	0x40020040
 8004074:	40020058 	.word	0x40020058
 8004078:	40020070 	.word	0x40020070
 800407c:	40020088 	.word	0x40020088
 8004080:	400200a0 	.word	0x400200a0
 8004084:	400200b8 	.word	0x400200b8
 8004088:	40020410 	.word	0x40020410
 800408c:	40020428 	.word	0x40020428
 8004090:	40020440 	.word	0x40020440
 8004094:	40020458 	.word	0x40020458
 8004098:	40020470 	.word	0x40020470
 800409c:	40020488 	.word	0x40020488
 80040a0:	400204a0 	.word	0x400204a0
 80040a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a4f      	ldr	r2, [pc, #316]	; (8004200 <HAL_DMA_Abort+0x5dc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d072      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a4d      	ldr	r2, [pc, #308]	; (8004204 <HAL_DMA_Abort+0x5e0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d06d      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a4c      	ldr	r2, [pc, #304]	; (8004208 <HAL_DMA_Abort+0x5e4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d068      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <HAL_DMA_Abort+0x5e8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d063      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a49      	ldr	r2, [pc, #292]	; (8004210 <HAL_DMA_Abort+0x5ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d05e      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a47      	ldr	r2, [pc, #284]	; (8004214 <HAL_DMA_Abort+0x5f0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d059      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a46      	ldr	r2, [pc, #280]	; (8004218 <HAL_DMA_Abort+0x5f4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d054      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a44      	ldr	r2, [pc, #272]	; (800421c <HAL_DMA_Abort+0x5f8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04f      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a43      	ldr	r2, [pc, #268]	; (8004220 <HAL_DMA_Abort+0x5fc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d04a      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a41      	ldr	r2, [pc, #260]	; (8004224 <HAL_DMA_Abort+0x600>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d045      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a40      	ldr	r2, [pc, #256]	; (8004228 <HAL_DMA_Abort+0x604>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d040      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3e      	ldr	r2, [pc, #248]	; (800422c <HAL_DMA_Abort+0x608>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d03b      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <HAL_DMA_Abort+0x60c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d036      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <HAL_DMA_Abort+0x610>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d031      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_DMA_Abort+0x614>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d02c      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a38      	ldr	r2, [pc, #224]	; (800423c <HAL_DMA_Abort+0x618>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d027      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a37      	ldr	r2, [pc, #220]	; (8004240 <HAL_DMA_Abort+0x61c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a35      	ldr	r2, [pc, #212]	; (8004244 <HAL_DMA_Abort+0x620>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01d      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <HAL_DMA_Abort+0x624>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a32      	ldr	r2, [pc, #200]	; (800424c <HAL_DMA_Abort+0x628>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a31      	ldr	r2, [pc, #196]	; (8004250 <HAL_DMA_Abort+0x62c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_DMA_Abort+0x630>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <HAL_DMA_Abort+0x634>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_Abort+0x58a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <HAL_DMA_Abort+0x638>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Abort+0x58e>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_DMA_Abort+0x590>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40020010 	.word	0x40020010
 8004204:	40020028 	.word	0x40020028
 8004208:	40020040 	.word	0x40020040
 800420c:	40020058 	.word	0x40020058
 8004210:	40020070 	.word	0x40020070
 8004214:	40020088 	.word	0x40020088
 8004218:	400200a0 	.word	0x400200a0
 800421c:	400200b8 	.word	0x400200b8
 8004220:	40020410 	.word	0x40020410
 8004224:	40020428 	.word	0x40020428
 8004228:	40020440 	.word	0x40020440
 800422c:	40020458 	.word	0x40020458
 8004230:	40020470 	.word	0x40020470
 8004234:	40020488 	.word	0x40020488
 8004238:	400204a0 	.word	0x400204a0
 800423c:	400204b8 	.word	0x400204b8
 8004240:	58025408 	.word	0x58025408
 8004244:	5802541c 	.word	0x5802541c
 8004248:	58025430 	.word	0x58025430
 800424c:	58025444 	.word	0x58025444
 8004250:	58025458 	.word	0x58025458
 8004254:	5802546c 	.word	0x5802546c
 8004258:	58025480 	.word	0x58025480
 800425c:	58025494 	.word	0x58025494

08004260 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e237      	b.n	80046e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e22c      	b.n	80046e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5c      	ldr	r2, [pc, #368]	; (8004400 <HAL_DMA_Abort_IT+0x1a0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d04a      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <HAL_DMA_Abort_IT+0x1a4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d045      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a59      	ldr	r2, [pc, #356]	; (8004408 <HAL_DMA_Abort_IT+0x1a8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d040      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a58      	ldr	r2, [pc, #352]	; (800440c <HAL_DMA_Abort_IT+0x1ac>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d03b      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a56      	ldr	r2, [pc, #344]	; (8004410 <HAL_DMA_Abort_IT+0x1b0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d036      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a55      	ldr	r2, [pc, #340]	; (8004414 <HAL_DMA_Abort_IT+0x1b4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d031      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a53      	ldr	r2, [pc, #332]	; (8004418 <HAL_DMA_Abort_IT+0x1b8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02c      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_DMA_Abort_IT+0x1bc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d027      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a50      	ldr	r2, [pc, #320]	; (8004420 <HAL_DMA_Abort_IT+0x1c0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d022      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a4f      	ldr	r2, [pc, #316]	; (8004424 <HAL_DMA_Abort_IT+0x1c4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01d      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a4d      	ldr	r2, [pc, #308]	; (8004428 <HAL_DMA_Abort_IT+0x1c8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4c      	ldr	r2, [pc, #304]	; (800442c <HAL_DMA_Abort_IT+0x1cc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_DMA_Abort_IT+0x1d0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a49      	ldr	r2, [pc, #292]	; (8004434 <HAL_DMA_Abort_IT+0x1d4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a47      	ldr	r2, [pc, #284]	; (8004438 <HAL_DMA_Abort_IT+0x1d8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_DMA_Abort_IT+0xc8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a46      	ldr	r2, [pc, #280]	; (800443c <HAL_DMA_Abort_IT+0x1dc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_DMA_Abort_IT+0xcc>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_DMA_Abort_IT+0xce>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8086 	beq.w	8004440 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <HAL_DMA_Abort_IT+0x1a0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2e      	ldr	r2, [pc, #184]	; (8004404 <HAL_DMA_Abort_IT+0x1a4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2c      	ldr	r2, [pc, #176]	; (8004408 <HAL_DMA_Abort_IT+0x1a8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2b      	ldr	r2, [pc, #172]	; (800440c <HAL_DMA_Abort_IT+0x1ac>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a29      	ldr	r2, [pc, #164]	; (8004410 <HAL_DMA_Abort_IT+0x1b0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <HAL_DMA_Abort_IT+0x1b4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a26      	ldr	r2, [pc, #152]	; (8004418 <HAL_DMA_Abort_IT+0x1b8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a25      	ldr	r2, [pc, #148]	; (800441c <HAL_DMA_Abort_IT+0x1bc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a23      	ldr	r2, [pc, #140]	; (8004420 <HAL_DMA_Abort_IT+0x1c0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_DMA_Abort_IT+0x1c4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a20      	ldr	r2, [pc, #128]	; (8004428 <HAL_DMA_Abort_IT+0x1c8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_DMA_Abort_IT+0x1cc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_DMA_Abort_IT+0x1d0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_DMA_Abort_IT+0x1d4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_DMA_Abort_IT+0x1d8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_Abort_IT+0x17c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_DMA_Abort_IT+0x1dc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_Abort_IT+0x18e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e178      	b.n	80046e0 <HAL_DMA_Abort_IT+0x480>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e16f      	b.n	80046e0 <HAL_DMA_Abort_IT+0x480>
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020e 	bic.w	r2, r2, #14
 800444e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6c      	ldr	r2, [pc, #432]	; (8004608 <HAL_DMA_Abort_IT+0x3a8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d04a      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6b      	ldr	r2, [pc, #428]	; (800460c <HAL_DMA_Abort_IT+0x3ac>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d045      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a69      	ldr	r2, [pc, #420]	; (8004610 <HAL_DMA_Abort_IT+0x3b0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d040      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a68      	ldr	r2, [pc, #416]	; (8004614 <HAL_DMA_Abort_IT+0x3b4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d03b      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a66      	ldr	r2, [pc, #408]	; (8004618 <HAL_DMA_Abort_IT+0x3b8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d036      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a65      	ldr	r2, [pc, #404]	; (800461c <HAL_DMA_Abort_IT+0x3bc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d031      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a63      	ldr	r2, [pc, #396]	; (8004620 <HAL_DMA_Abort_IT+0x3c0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02c      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a62      	ldr	r2, [pc, #392]	; (8004624 <HAL_DMA_Abort_IT+0x3c4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d027      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a60      	ldr	r2, [pc, #384]	; (8004628 <HAL_DMA_Abort_IT+0x3c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5f      	ldr	r2, [pc, #380]	; (800462c <HAL_DMA_Abort_IT+0x3cc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01d      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5d      	ldr	r2, [pc, #372]	; (8004630 <HAL_DMA_Abort_IT+0x3d0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	; (8004634 <HAL_DMA_Abort_IT+0x3d4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5a      	ldr	r2, [pc, #360]	; (8004638 <HAL_DMA_Abort_IT+0x3d8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a59      	ldr	r2, [pc, #356]	; (800463c <HAL_DMA_Abort_IT+0x3dc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a57      	ldr	r2, [pc, #348]	; (8004640 <HAL_DMA_Abort_IT+0x3e0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x290>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a56      	ldr	r2, [pc, #344]	; (8004644 <HAL_DMA_Abort_IT+0x3e4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <HAL_DMA_Abort_IT+0x2a2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <HAL_DMA_Abort_IT+0x2b2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3c      	ldr	r2, [pc, #240]	; (8004608 <HAL_DMA_Abort_IT+0x3a8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d072      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3a      	ldr	r2, [pc, #232]	; (800460c <HAL_DMA_Abort_IT+0x3ac>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d06d      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a39      	ldr	r2, [pc, #228]	; (8004610 <HAL_DMA_Abort_IT+0x3b0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d068      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a37      	ldr	r2, [pc, #220]	; (8004614 <HAL_DMA_Abort_IT+0x3b4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d063      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a36      	ldr	r2, [pc, #216]	; (8004618 <HAL_DMA_Abort_IT+0x3b8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d05e      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a34      	ldr	r2, [pc, #208]	; (800461c <HAL_DMA_Abort_IT+0x3bc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d059      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a33      	ldr	r2, [pc, #204]	; (8004620 <HAL_DMA_Abort_IT+0x3c0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d054      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a31      	ldr	r2, [pc, #196]	; (8004624 <HAL_DMA_Abort_IT+0x3c4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04f      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a30      	ldr	r2, [pc, #192]	; (8004628 <HAL_DMA_Abort_IT+0x3c8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2e      	ldr	r2, [pc, #184]	; (800462c <HAL_DMA_Abort_IT+0x3cc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2d      	ldr	r2, [pc, #180]	; (8004630 <HAL_DMA_Abort_IT+0x3d0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <HAL_DMA_Abort_IT+0x3d4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <HAL_DMA_Abort_IT+0x3d8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a28      	ldr	r2, [pc, #160]	; (800463c <HAL_DMA_Abort_IT+0x3dc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a27      	ldr	r2, [pc, #156]	; (8004640 <HAL_DMA_Abort_IT+0x3e0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a25      	ldr	r2, [pc, #148]	; (8004644 <HAL_DMA_Abort_IT+0x3e4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <HAL_DMA_Abort_IT+0x3e8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a22      	ldr	r2, [pc, #136]	; (800464c <HAL_DMA_Abort_IT+0x3ec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	; (8004650 <HAL_DMA_Abort_IT+0x3f0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_DMA_Abort_IT+0x3f4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_DMA_Abort_IT+0x3f8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_DMA_Abort_IT+0x3fc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_DMA_Abort_IT+0x400>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_Abort_IT+0x3a2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_DMA_Abort_IT+0x404>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d132      	bne.n	8004668 <HAL_DMA_Abort_IT+0x408>
 8004602:	2301      	movs	r3, #1
 8004604:	e031      	b.n	800466a <HAL_DMA_Abort_IT+0x40a>
 8004606:	bf00      	nop
 8004608:	40020010 	.word	0x40020010
 800460c:	40020028 	.word	0x40020028
 8004610:	40020040 	.word	0x40020040
 8004614:	40020058 	.word	0x40020058
 8004618:	40020070 	.word	0x40020070
 800461c:	40020088 	.word	0x40020088
 8004620:	400200a0 	.word	0x400200a0
 8004624:	400200b8 	.word	0x400200b8
 8004628:	40020410 	.word	0x40020410
 800462c:	40020428 	.word	0x40020428
 8004630:	40020440 	.word	0x40020440
 8004634:	40020458 	.word	0x40020458
 8004638:	40020470 	.word	0x40020470
 800463c:	40020488 	.word	0x40020488
 8004640:	400204a0 	.word	0x400204a0
 8004644:	400204b8 	.word	0x400204b8
 8004648:	58025408 	.word	0x58025408
 800464c:	5802541c 	.word	0x5802541c
 8004650:	58025430 	.word	0x58025430
 8004654:	58025444 	.word	0x58025444
 8004658:	58025458 	.word	0x58025458
 800465c:	5802546c 	.word	0x5802546c
 8004660:	58025480 	.word	0x58025480
 8004664:	58025494 	.word	0x58025494
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800467c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800469c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop

080046ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046f8:	4b67      	ldr	r3, [pc, #412]	; (8004898 <HAL_DMA_IRQHandler+0x1ac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a67      	ldr	r2, [pc, #412]	; (800489c <HAL_DMA_IRQHandler+0x1b0>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a5f      	ldr	r2, [pc, #380]	; (80048a0 <HAL_DMA_IRQHandler+0x1b4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <HAL_DMA_IRQHandler+0x1b8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a5c      	ldr	r2, [pc, #368]	; (80048a8 <HAL_DMA_IRQHandler+0x1bc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a5a      	ldr	r2, [pc, #360]	; (80048ac <HAL_DMA_IRQHandler+0x1c0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a59      	ldr	r2, [pc, #356]	; (80048b0 <HAL_DMA_IRQHandler+0x1c4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a57      	ldr	r2, [pc, #348]	; (80048b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a56      	ldr	r2, [pc, #344]	; (80048b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a54      	ldr	r2, [pc, #336]	; (80048bc <HAL_DMA_IRQHandler+0x1d0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a53      	ldr	r2, [pc, #332]	; (80048c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <HAL_DMA_IRQHandler+0x1d8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a50      	ldr	r2, [pc, #320]	; (80048c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a4e      	ldr	r2, [pc, #312]	; (80048cc <HAL_DMA_IRQHandler+0x1e0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4d      	ldr	r2, [pc, #308]	; (80048d0 <HAL_DMA_IRQHandler+0x1e4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a4b      	ldr	r2, [pc, #300]	; (80048d4 <HAL_DMA_IRQHandler+0x1e8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <HAL_DMA_IRQHandler+0x1ec>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0xd2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a48      	ldr	r2, [pc, #288]	; (80048dc <HAL_DMA_IRQHandler+0x1f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_DMA_IRQHandler+0xd6>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_DMA_IRQHandler+0xd8>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 842b 	beq.w	8005020 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2208      	movs	r2, #8
 80047d4:	409a      	lsls	r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a2 	beq.w	8004924 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <HAL_DMA_IRQHandler+0x1b4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <HAL_DMA_IRQHandler+0x1b8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2b      	ldr	r2, [pc, #172]	; (80048a8 <HAL_DMA_IRQHandler+0x1bc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <HAL_DMA_IRQHandler+0x1c0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <HAL_DMA_IRQHandler+0x1c4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_DMA_IRQHandler+0x1d0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_DMA_IRQHandler+0x1dc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <HAL_DMA_IRQHandler+0x1e0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <HAL_DMA_IRQHandler+0x1e4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_DMA_IRQHandler+0x1ec>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_IRQHandler+0x194>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_DMA_IRQHandler+0x1f0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d12f      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x1f4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e02e      	b.n	80048f4 <HAL_DMA_IRQHandler+0x208>
 8004896:	bf00      	nop
 8004898:	24000030 	.word	0x24000030
 800489c:	1b4e81b5 	.word	0x1b4e81b5
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0204 	bic.w	r2, r2, #4
 8004906:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2208      	movs	r2, #8
 8004912:	409a      	lsls	r2, r3
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d06e      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a69      	ldr	r2, [pc, #420]	; (8004ae4 <HAL_DMA_IRQHandler+0x3f8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d04a      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_DMA_IRQHandler+0x3fc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d045      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a66      	ldr	r2, [pc, #408]	; (8004aec <HAL_DMA_IRQHandler+0x400>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d040      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a64      	ldr	r2, [pc, #400]	; (8004af0 <HAL_DMA_IRQHandler+0x404>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d03b      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a63      	ldr	r2, [pc, #396]	; (8004af4 <HAL_DMA_IRQHandler+0x408>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d036      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a61      	ldr	r2, [pc, #388]	; (8004af8 <HAL_DMA_IRQHandler+0x40c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d031      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a60      	ldr	r2, [pc, #384]	; (8004afc <HAL_DMA_IRQHandler+0x410>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d02c      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5e      	ldr	r2, [pc, #376]	; (8004b00 <HAL_DMA_IRQHandler+0x414>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d027      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_DMA_IRQHandler+0x418>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <HAL_DMA_IRQHandler+0x41c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_DMA_IRQHandler+0x420>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_DMA_IRQHandler+0x424>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a57      	ldr	r2, [pc, #348]	; (8004b14 <HAL_DMA_IRQHandler+0x428>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a55      	ldr	r2, [pc, #340]	; (8004b18 <HAL_DMA_IRQHandler+0x42c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a54      	ldr	r2, [pc, #336]	; (8004b1c <HAL_DMA_IRQHandler+0x430>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_DMA_IRQHandler+0x2ee>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a52      	ldr	r2, [pc, #328]	; (8004b20 <HAL_DMA_IRQHandler+0x434>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10a      	bne.n	80049f0 <HAL_DMA_IRQHandler+0x304>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e003      	b.n	80049f8 <HAL_DMA_IRQHandler+0x30c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2201      	movs	r2, #1
 8004a06:	409a      	lsls	r2, r3
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2204      	movs	r2, #4
 8004a22:	409a      	lsls	r2, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 808f 	beq.w	8004b4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <HAL_DMA_IRQHandler+0x3f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <HAL_DMA_IRQHandler+0x3fc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_DMA_IRQHandler+0x400>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a27      	ldr	r2, [pc, #156]	; (8004af0 <HAL_DMA_IRQHandler+0x404>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a26      	ldr	r2, [pc, #152]	; (8004af4 <HAL_DMA_IRQHandler+0x408>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <HAL_DMA_IRQHandler+0x40c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a23      	ldr	r2, [pc, #140]	; (8004afc <HAL_DMA_IRQHandler+0x410>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_DMA_IRQHandler+0x414>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <HAL_DMA_IRQHandler+0x418>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1e      	ldr	r2, [pc, #120]	; (8004b08 <HAL_DMA_IRQHandler+0x41c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_DMA_IRQHandler+0x420>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <HAL_DMA_IRQHandler+0x424>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_DMA_IRQHandler+0x428>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <HAL_DMA_IRQHandler+0x42c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_DMA_IRQHandler+0x430>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_IRQHandler+0x3e2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <HAL_DMA_IRQHandler+0x434>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d12a      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x438>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e023      	b.n	8004b2c <HAL_DMA_IRQHandler+0x440>
 8004ae4:	40020010 	.word	0x40020010
 8004ae8:	40020028 	.word	0x40020028
 8004aec:	40020040 	.word	0x40020040
 8004af0:	40020058 	.word	0x40020058
 8004af4:	40020070 	.word	0x40020070
 8004af8:	40020088 	.word	0x40020088
 8004afc:	400200a0 	.word	0x400200a0
 8004b00:	400200b8 	.word	0x400200b8
 8004b04:	40020410 	.word	0x40020410
 8004b08:	40020428 	.word	0x40020428
 8004b0c:	40020440 	.word	0x40020440
 8004b10:	40020458 	.word	0x40020458
 8004b14:	40020470 	.word	0x40020470
 8004b18:	40020488 	.word	0x40020488
 8004b1c:	400204a0 	.word	0x400204a0
 8004b20:	400204b8 	.word	0x400204b8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2204      	movs	r2, #4
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f043 0204 	orr.w	r2, r3, #4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2210      	movs	r2, #16
 8004b56:	409a      	lsls	r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a6 	beq.w	8004cae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a85      	ldr	r2, [pc, #532]	; (8004d7c <HAL_DMA_IRQHandler+0x690>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d04a      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a83      	ldr	r2, [pc, #524]	; (8004d80 <HAL_DMA_IRQHandler+0x694>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d045      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a82      	ldr	r2, [pc, #520]	; (8004d84 <HAL_DMA_IRQHandler+0x698>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d040      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a80      	ldr	r2, [pc, #512]	; (8004d88 <HAL_DMA_IRQHandler+0x69c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d03b      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a7f      	ldr	r2, [pc, #508]	; (8004d8c <HAL_DMA_IRQHandler+0x6a0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d036      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a7d      	ldr	r2, [pc, #500]	; (8004d90 <HAL_DMA_IRQHandler+0x6a4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7c      	ldr	r2, [pc, #496]	; (8004d94 <HAL_DMA_IRQHandler+0x6a8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d02c      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a7a      	ldr	r2, [pc, #488]	; (8004d98 <HAL_DMA_IRQHandler+0x6ac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d027      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a79      	ldr	r2, [pc, #484]	; (8004d9c <HAL_DMA_IRQHandler+0x6b0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a77      	ldr	r2, [pc, #476]	; (8004da0 <HAL_DMA_IRQHandler+0x6b4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a76      	ldr	r2, [pc, #472]	; (8004da4 <HAL_DMA_IRQHandler+0x6b8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a74      	ldr	r2, [pc, #464]	; (8004da8 <HAL_DMA_IRQHandler+0x6bc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a73      	ldr	r2, [pc, #460]	; (8004dac <HAL_DMA_IRQHandler+0x6c0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a71      	ldr	r2, [pc, #452]	; (8004db0 <HAL_DMA_IRQHandler+0x6c4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a70      	ldr	r2, [pc, #448]	; (8004db4 <HAL_DMA_IRQHandler+0x6c8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x516>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6e      	ldr	r2, [pc, #440]	; (8004db8 <HAL_DMA_IRQHandler+0x6cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10a      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x52c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e009      	b.n	8004c2c <HAL_DMA_IRQHandler+0x540>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d03e      	beq.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2210      	movs	r2, #16
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d024      	beq.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	e01f      	b.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01b      	beq.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
 8004c7e:	e016      	b.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0208 	bic.w	r2, r2, #8
 8004c9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8110 	beq.w	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <HAL_DMA_IRQHandler+0x690>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2b      	ldr	r2, [pc, #172]	; (8004d80 <HAL_DMA_IRQHandler+0x694>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <HAL_DMA_IRQHandler+0x698>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <HAL_DMA_IRQHandler+0x69c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <HAL_DMA_IRQHandler+0x6a0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <HAL_DMA_IRQHandler+0x6a4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <HAL_DMA_IRQHandler+0x6a8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <HAL_DMA_IRQHandler+0x6ac>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_DMA_IRQHandler+0x6b0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_DMA_IRQHandler+0x6b4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_DMA_IRQHandler+0x6b8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <HAL_DMA_IRQHandler+0x6bc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <HAL_DMA_IRQHandler+0x6c0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <HAL_DMA_IRQHandler+0x6c4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_DMA_IRQHandler+0x6c8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x678>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <HAL_DMA_IRQHandler+0x6cc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d12b      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x6d0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e02a      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x6e4>
 8004d7a:	bf00      	nop
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf14      	ite	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	2300      	moveq	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8087 	beq.w	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2220      	movs	r2, #32
 8004de0:	409a      	lsls	r2, r3
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d139      	bne.n	8004e66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0216 	bic.w	r2, r2, #22
 8004e00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x736>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0208 	bic.w	r2, r2, #8
 8004e30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	223f      	movs	r2, #63	; 0x3f
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 834a 	beq.w	80054f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
          }
          return;
 8004e64:	e344      	b.n	80054f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d018      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02c      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
 8004e92:	e027      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d023      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
 8004ea4:	e01e      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0210 	bic.w	r2, r2, #16
 8004ec2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8306 	beq.w	80054fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8088 	beq.w	800500c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2204      	movs	r2, #4
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a7a      	ldr	r2, [pc, #488]	; (80050f4 <HAL_DMA_IRQHandler+0xa08>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d04a      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a79      	ldr	r2, [pc, #484]	; (80050f8 <HAL_DMA_IRQHandler+0xa0c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d045      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a77      	ldr	r2, [pc, #476]	; (80050fc <HAL_DMA_IRQHandler+0xa10>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d040      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a76      	ldr	r2, [pc, #472]	; (8005100 <HAL_DMA_IRQHandler+0xa14>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d03b      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a74      	ldr	r2, [pc, #464]	; (8005104 <HAL_DMA_IRQHandler+0xa18>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d036      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a73      	ldr	r2, [pc, #460]	; (8005108 <HAL_DMA_IRQHandler+0xa1c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d031      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a71      	ldr	r2, [pc, #452]	; (800510c <HAL_DMA_IRQHandler+0xa20>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02c      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a70      	ldr	r2, [pc, #448]	; (8005110 <HAL_DMA_IRQHandler+0xa24>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d027      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a6e      	ldr	r2, [pc, #440]	; (8005114 <HAL_DMA_IRQHandler+0xa28>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d022      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6d      	ldr	r2, [pc, #436]	; (8005118 <HAL_DMA_IRQHandler+0xa2c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01d      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6b      	ldr	r2, [pc, #428]	; (800511c <HAL_DMA_IRQHandler+0xa30>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d018      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6a      	ldr	r2, [pc, #424]	; (8005120 <HAL_DMA_IRQHandler+0xa34>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a68      	ldr	r2, [pc, #416]	; (8005124 <HAL_DMA_IRQHandler+0xa38>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00e      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a67      	ldr	r2, [pc, #412]	; (8005128 <HAL_DMA_IRQHandler+0xa3c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_DMA_IRQHandler+0xa40>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x8b8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a64      	ldr	r2, [pc, #400]	; (8005130 <HAL_DMA_IRQHandler+0xa44>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d108      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x8ca>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e007      	b.n	8004fc6 <HAL_DMA_IRQHandler+0x8da>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d307      	bcc.n	8004fe2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f2      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x8da>
 8004fe0:	e000      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004fe2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ffa:	e003      	b.n	8005004 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8272 	beq.w	80054fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	e26c      	b.n	80054fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_DMA_IRQHandler+0xa48>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a42      	ldr	r2, [pc, #264]	; (8005138 <HAL_DMA_IRQHandler+0xa4c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a40      	ldr	r2, [pc, #256]	; (800513c <HAL_DMA_IRQHandler+0xa50>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <HAL_DMA_IRQHandler+0xa54>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <HAL_DMA_IRQHandler+0xa58>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <HAL_DMA_IRQHandler+0xa5c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_DMA_IRQHandler+0xa60>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_DMA_IRQHandler+0x984>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a39      	ldr	r2, [pc, #228]	; (8005150 <HAL_DMA_IRQHandler+0xa64>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <HAL_DMA_IRQHandler+0x988>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <HAL_DMA_IRQHandler+0x98a>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 823f 	beq.w	80054fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2204      	movs	r2, #4
 800508e:	409a      	lsls	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80cd 	beq.w	8005234 <HAL_DMA_IRQHandler+0xb48>
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80c7 	beq.w	8005234 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2204      	movs	r2, #4
 80050b0:	409a      	lsls	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d049      	beq.n	8005154 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8210 	beq.w	80054f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050dc:	e20a      	b.n	80054f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8206 	beq.w	80054f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050f0:	e200      	b.n	80054f4 <HAL_DMA_IRQHandler+0xe08>
 80050f2:	bf00      	nop
 80050f4:	40020010 	.word	0x40020010
 80050f8:	40020028 	.word	0x40020028
 80050fc:	40020040 	.word	0x40020040
 8005100:	40020058 	.word	0x40020058
 8005104:	40020070 	.word	0x40020070
 8005108:	40020088 	.word	0x40020088
 800510c:	400200a0 	.word	0x400200a0
 8005110:	400200b8 	.word	0x400200b8
 8005114:	40020410 	.word	0x40020410
 8005118:	40020428 	.word	0x40020428
 800511c:	40020440 	.word	0x40020440
 8005120:	40020458 	.word	0x40020458
 8005124:	40020470 	.word	0x40020470
 8005128:	40020488 	.word	0x40020488
 800512c:	400204a0 	.word	0x400204a0
 8005130:	400204b8 	.word	0x400204b8
 8005134:	58025408 	.word	0x58025408
 8005138:	5802541c 	.word	0x5802541c
 800513c:	58025430 	.word	0x58025430
 8005140:	58025444 	.word	0x58025444
 8005144:	58025458 	.word	0x58025458
 8005148:	5802546c 	.word	0x5802546c
 800514c:	58025480 	.word	0x58025480
 8005150:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d160      	bne.n	8005220 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a7f      	ldr	r2, [pc, #508]	; (8005360 <HAL_DMA_IRQHandler+0xc74>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d04a      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a7d      	ldr	r2, [pc, #500]	; (8005364 <HAL_DMA_IRQHandler+0xc78>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d045      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7c      	ldr	r2, [pc, #496]	; (8005368 <HAL_DMA_IRQHandler+0xc7c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d040      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7a      	ldr	r2, [pc, #488]	; (800536c <HAL_DMA_IRQHandler+0xc80>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d03b      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a79      	ldr	r2, [pc, #484]	; (8005370 <HAL_DMA_IRQHandler+0xc84>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d036      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a77      	ldr	r2, [pc, #476]	; (8005374 <HAL_DMA_IRQHandler+0xc88>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d031      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a76      	ldr	r2, [pc, #472]	; (8005378 <HAL_DMA_IRQHandler+0xc8c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d02c      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	; (800537c <HAL_DMA_IRQHandler+0xc90>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d027      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a73      	ldr	r2, [pc, #460]	; (8005380 <HAL_DMA_IRQHandler+0xc94>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d022      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a71      	ldr	r2, [pc, #452]	; (8005384 <HAL_DMA_IRQHandler+0xc98>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01d      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a70      	ldr	r2, [pc, #448]	; (8005388 <HAL_DMA_IRQHandler+0xc9c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d018      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_DMA_IRQHandler+0xca0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6d      	ldr	r2, [pc, #436]	; (8005390 <HAL_DMA_IRQHandler+0xca4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a6b      	ldr	r2, [pc, #428]	; (8005394 <HAL_DMA_IRQHandler+0xca8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6a      	ldr	r2, [pc, #424]	; (8005398 <HAL_DMA_IRQHandler+0xcac>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_DMA_IRQHandler+0xb12>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a68      	ldr	r2, [pc, #416]	; (800539c <HAL_DMA_IRQHandler+0xcb0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <HAL_DMA_IRQHandler+0xb24>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0208 	bic.w	r2, r2, #8
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e007      	b.n	8005220 <HAL_DMA_IRQHandler+0xb34>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8165 	beq.w	80054f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005232:	e15f      	b.n	80054f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2202      	movs	r2, #2
 800523e:	409a      	lsls	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80c5 	beq.w	80053d4 <HAL_DMA_IRQHandler+0xce8>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80bf 	beq.w	80053d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2202      	movs	r2, #2
 8005260:	409a      	lsls	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 813a 	beq.w	80054f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800528c:	e134      	b.n	80054f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8130 	beq.w	80054f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a0:	e12a      	b.n	80054f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 8089 	bne.w	80053c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <HAL_DMA_IRQHandler+0xc74>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_DMA_IRQHandler+0xc78>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a28      	ldr	r2, [pc, #160]	; (8005368 <HAL_DMA_IRQHandler+0xc7c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <HAL_DMA_IRQHandler+0xc80>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <HAL_DMA_IRQHandler+0xc84>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a23      	ldr	r2, [pc, #140]	; (8005374 <HAL_DMA_IRQHandler+0xc88>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a22      	ldr	r2, [pc, #136]	; (8005378 <HAL_DMA_IRQHandler+0xc8c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <HAL_DMA_IRQHandler+0xc90>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_DMA_IRQHandler+0xc94>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_DMA_IRQHandler+0xc98>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_DMA_IRQHandler+0xc9c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_DMA_IRQHandler+0xca0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_DMA_IRQHandler+0xca4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a17      	ldr	r2, [pc, #92]	; (8005394 <HAL_DMA_IRQHandler+0xca8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a16      	ldr	r2, [pc, #88]	; (8005398 <HAL_DMA_IRQHandler+0xcac>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_IRQHandler+0xc62>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a14      	ldr	r2, [pc, #80]	; (800539c <HAL_DMA_IRQHandler+0xcb0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d128      	bne.n	80053a0 <HAL_DMA_IRQHandler+0xcb4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0214 	bic.w	r2, r2, #20
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e027      	b.n	80053b0 <HAL_DMA_IRQHandler+0xcc4>
 8005360:	40020010 	.word	0x40020010
 8005364:	40020028 	.word	0x40020028
 8005368:	40020040 	.word	0x40020040
 800536c:	40020058 	.word	0x40020058
 8005370:	40020070 	.word	0x40020070
 8005374:	40020088 	.word	0x40020088
 8005378:	400200a0 	.word	0x400200a0
 800537c:	400200b8 	.word	0x400200b8
 8005380:	40020410 	.word	0x40020410
 8005384:	40020428 	.word	0x40020428
 8005388:	40020440 	.word	0x40020440
 800538c:	40020458 	.word	0x40020458
 8005390:	40020470 	.word	0x40020470
 8005394:	40020488 	.word	0x40020488
 8005398:	400204a0 	.word	0x400204a0
 800539c:	400204b8 	.word	0x400204b8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 020a 	bic.w	r2, r2, #10
 80053ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8097 	beq.w	80054f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053d2:	e091      	b.n	80054f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2208      	movs	r2, #8
 80053de:	409a      	lsls	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8088 	beq.w	80054fa <HAL_DMA_IRQHandler+0xe0e>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8082 	beq.w	80054fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a41      	ldr	r2, [pc, #260]	; (8005500 <HAL_DMA_IRQHandler+0xe14>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <HAL_DMA_IRQHandler+0xe18>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3e      	ldr	r2, [pc, #248]	; (8005508 <HAL_DMA_IRQHandler+0xe1c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3c      	ldr	r2, [pc, #240]	; (800550c <HAL_DMA_IRQHandler+0xe20>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3b      	ldr	r2, [pc, #236]	; (8005510 <HAL_DMA_IRQHandler+0xe24>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a39      	ldr	r2, [pc, #228]	; (8005514 <HAL_DMA_IRQHandler+0xe28>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a38      	ldr	r2, [pc, #224]	; (8005518 <HAL_DMA_IRQHandler+0xe2c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a36      	ldr	r2, [pc, #216]	; (800551c <HAL_DMA_IRQHandler+0xe30>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a35      	ldr	r2, [pc, #212]	; (8005520 <HAL_DMA_IRQHandler+0xe34>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <HAL_DMA_IRQHandler+0xe38>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <HAL_DMA_IRQHandler+0xe3c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a30      	ldr	r2, [pc, #192]	; (800552c <HAL_DMA_IRQHandler+0xe40>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <HAL_DMA_IRQHandler+0xe44>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <HAL_DMA_IRQHandler+0xe48>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <HAL_DMA_IRQHandler+0xe4c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_IRQHandler+0xdaa>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <HAL_DMA_IRQHandler+0xe50>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <HAL_DMA_IRQHandler+0xdbc>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 021c 	bic.w	r2, r2, #28
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e007      	b.n	80054b8 <HAL_DMA_IRQHandler+0xdcc>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 020e 	bic.w	r2, r2, #14
 80054b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2201      	movs	r2, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
 80054ee:	e004      	b.n	80054fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054f0:	bf00      	nop
 80054f2:	e002      	b.n	80054fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054fa:	3728      	adds	r7, #40	; 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40020010 	.word	0x40020010
 8005504:	40020028 	.word	0x40020028
 8005508:	40020040 	.word	0x40020040
 800550c:	40020058 	.word	0x40020058
 8005510:	40020070 	.word	0x40020070
 8005514:	40020088 	.word	0x40020088
 8005518:	400200a0 	.word	0x400200a0
 800551c:	400200b8 	.word	0x400200b8
 8005520:	40020410 	.word	0x40020410
 8005524:	40020428 	.word	0x40020428
 8005528:	40020440 	.word	0x40020440
 800552c:	40020458 	.word	0x40020458
 8005530:	40020470 	.word	0x40020470
 8005534:	40020488 	.word	0x40020488
 8005538:	400204a0 	.word	0x400204a0
 800553c:	400204b8 	.word	0x400204b8

08005540 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005552:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7f      	ldr	r2, [pc, #508]	; (800575c <DMA_SetConfig+0x21c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d072      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <DMA_SetConfig+0x220>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d06d      	beq.n	800564a <DMA_SetConfig+0x10a>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7c      	ldr	r2, [pc, #496]	; (8005764 <DMA_SetConfig+0x224>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d068      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	; (8005768 <DMA_SetConfig+0x228>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d063      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	; (800576c <DMA_SetConfig+0x22c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d05e      	beq.n	800564a <DMA_SetConfig+0x10a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a77      	ldr	r2, [pc, #476]	; (8005770 <DMA_SetConfig+0x230>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d059      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a76      	ldr	r2, [pc, #472]	; (8005774 <DMA_SetConfig+0x234>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d054      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a74      	ldr	r2, [pc, #464]	; (8005778 <DMA_SetConfig+0x238>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04f      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a73      	ldr	r2, [pc, #460]	; (800577c <DMA_SetConfig+0x23c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a71      	ldr	r2, [pc, #452]	; (8005780 <DMA_SetConfig+0x240>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a70      	ldr	r2, [pc, #448]	; (8005784 <DMA_SetConfig+0x244>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	; (8005788 <DMA_SetConfig+0x248>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6d      	ldr	r2, [pc, #436]	; (800578c <DMA_SetConfig+0x24c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6b      	ldr	r2, [pc, #428]	; (8005790 <DMA_SetConfig+0x250>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6a      	ldr	r2, [pc, #424]	; (8005794 <DMA_SetConfig+0x254>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	; (8005798 <DMA_SetConfig+0x258>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a67      	ldr	r2, [pc, #412]	; (800579c <DMA_SetConfig+0x25c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a65      	ldr	r2, [pc, #404]	; (80057a0 <DMA_SetConfig+0x260>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <DMA_SetConfig+0x10a>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a64      	ldr	r2, [pc, #400]	; (80057a4 <DMA_SetConfig+0x264>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a62      	ldr	r2, [pc, #392]	; (80057a8 <DMA_SetConfig+0x268>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a61      	ldr	r2, [pc, #388]	; (80057ac <DMA_SetConfig+0x26c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <DMA_SetConfig+0x10a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5f      	ldr	r2, [pc, #380]	; (80057b0 <DMA_SetConfig+0x270>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5e      	ldr	r2, [pc, #376]	; (80057b4 <DMA_SetConfig+0x274>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5c      	ldr	r2, [pc, #368]	; (80057b8 <DMA_SetConfig+0x278>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <DMA_SetConfig+0x10e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <DMA_SetConfig+0x110>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800565c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800566e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a39      	ldr	r2, [pc, #228]	; (800575c <DMA_SetConfig+0x21c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d04a      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a38      	ldr	r2, [pc, #224]	; (8005760 <DMA_SetConfig+0x220>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d045      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a36      	ldr	r2, [pc, #216]	; (8005764 <DMA_SetConfig+0x224>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d040      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a35      	ldr	r2, [pc, #212]	; (8005768 <DMA_SetConfig+0x228>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d03b      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a33      	ldr	r2, [pc, #204]	; (800576c <DMA_SetConfig+0x22c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d036      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a32      	ldr	r2, [pc, #200]	; (8005770 <DMA_SetConfig+0x230>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d031      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a30      	ldr	r2, [pc, #192]	; (8005774 <DMA_SetConfig+0x234>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02c      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <DMA_SetConfig+0x238>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d027      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2d      	ldr	r2, [pc, #180]	; (800577c <DMA_SetConfig+0x23c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d022      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <DMA_SetConfig+0x240>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01d      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <DMA_SetConfig+0x244>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d018      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a29      	ldr	r2, [pc, #164]	; (8005788 <DMA_SetConfig+0x248>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a27      	ldr	r2, [pc, #156]	; (800578c <DMA_SetConfig+0x24c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <DMA_SetConfig+0x250>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <DMA_SetConfig+0x254>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a23      	ldr	r2, [pc, #140]	; (8005798 <DMA_SetConfig+0x258>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d101      	bne.n	8005714 <DMA_SetConfig+0x1d4>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <DMA_SetConfig+0x1d6>
 8005714:	2300      	movs	r3, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d059      	beq.n	80057ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	223f      	movs	r2, #63	; 0x3f
 8005724:	409a      	lsls	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005738:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d138      	bne.n	80057bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800575a:	e086      	b.n	800586a <DMA_SetConfig+0x32a>
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	58025408 	.word	0x58025408
 80057a0:	5802541c 	.word	0x5802541c
 80057a4:	58025430 	.word	0x58025430
 80057a8:	58025444 	.word	0x58025444
 80057ac:	58025458 	.word	0x58025458
 80057b0:	5802546c 	.word	0x5802546c
 80057b4:	58025480 	.word	0x58025480
 80057b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
}
 80057cc:	e04d      	b.n	800586a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a29      	ldr	r2, [pc, #164]	; (8005878 <DMA_SetConfig+0x338>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a27      	ldr	r2, [pc, #156]	; (800587c <DMA_SetConfig+0x33c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <DMA_SetConfig+0x340>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <DMA_SetConfig+0x344>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <DMA_SetConfig+0x348>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <DMA_SetConfig+0x2de>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <DMA_SetConfig+0x34c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <DMA_SetConfig+0x2de>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a20      	ldr	r2, [pc, #128]	; (8005890 <DMA_SetConfig+0x350>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <DMA_SetConfig+0x2de>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <DMA_SetConfig+0x354>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <DMA_SetConfig+0x2e2>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <DMA_SetConfig+0x2e4>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2201      	movs	r2, #1
 8005832:	409a      	lsls	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d108      	bne.n	800585a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	60da      	str	r2, [r3, #12]
}
 8005858:	e007      	b.n	800586a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494

08005898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a42      	ldr	r2, [pc, #264]	; (80059b0 <DMA_CalcBaseAndBitshift+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d04a      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a41      	ldr	r2, [pc, #260]	; (80059b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d045      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3f      	ldr	r2, [pc, #252]	; (80059b8 <DMA_CalcBaseAndBitshift+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d040      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a3e      	ldr	r2, [pc, #248]	; (80059bc <DMA_CalcBaseAndBitshift+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d03b      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3c      	ldr	r2, [pc, #240]	; (80059c0 <DMA_CalcBaseAndBitshift+0x128>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d036      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3b      	ldr	r2, [pc, #236]	; (80059c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d031      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a39      	ldr	r2, [pc, #228]	; (80059c8 <DMA_CalcBaseAndBitshift+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02c      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a38      	ldr	r2, [pc, #224]	; (80059cc <DMA_CalcBaseAndBitshift+0x134>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d027      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a36      	ldr	r2, [pc, #216]	; (80059d0 <DMA_CalcBaseAndBitshift+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d022      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a35      	ldr	r2, [pc, #212]	; (80059d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d01d      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a33      	ldr	r2, [pc, #204]	; (80059d8 <DMA_CalcBaseAndBitshift+0x140>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d018      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a32      	ldr	r2, [pc, #200]	; (80059dc <DMA_CalcBaseAndBitshift+0x144>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	; (80059e0 <DMA_CalcBaseAndBitshift+0x148>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <DMA_CalcBaseAndBitshift+0x150>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <DMA_CalcBaseAndBitshift+0x154>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <DMA_CalcBaseAndBitshift+0xac>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <DMA_CalcBaseAndBitshift+0xae>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d024      	beq.n	8005994 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	3b10      	subs	r3, #16
 8005952:	4a27      	ldr	r2, [pc, #156]	; (80059f0 <DMA_CalcBaseAndBitshift+0x158>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d908      	bls.n	8005984 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <DMA_CalcBaseAndBitshift+0x160>)
 800597a:	4013      	ands	r3, r2
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	; 0x58
 8005982:	e00d      	b.n	80059a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <DMA_CalcBaseAndBitshift+0x160>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6593      	str	r3, [r2, #88]	; 0x58
 8005992:	e005      	b.n	80059a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	aaaaaaab 	.word	0xaaaaaaab
 80059f4:	0800d468 	.word	0x0800d468
 80059f8:	fffffc00 	.word	0xfffffc00

080059fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d120      	bne.n	8005a52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d858      	bhi.n	8005aca <DMA_CheckFifoParam+0xce>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <DMA_CheckFifoParam+0x24>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a43 	.word	0x08005a43
 8005a28:	08005a31 	.word	0x08005a31
 8005a2c:	08005acb 	.word	0x08005acb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d048      	beq.n	8005ace <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a40:	e045      	b.n	8005ace <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a4a:	d142      	bne.n	8005ad2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a50:	e03f      	b.n	8005ad2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	d123      	bne.n	8005aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d838      	bhi.n	8005ad6 <DMA_CheckFifoParam+0xda>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <DMA_CheckFifoParam+0x70>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a83 	.word	0x08005a83
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005a95 	.word	0x08005a95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
        break;
 8005a80:	e030      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a92:	e022      	b.n	8005ada <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a9c:	d11f      	bne.n	8005ade <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aa2:	e01c      	b.n	8005ade <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d902      	bls.n	8005ab2 <DMA_CheckFifoParam+0xb6>
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d003      	beq.n	8005ab8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ab0:	e018      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ab6:	e015      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ac8:	e00b      	b.n	8005ae2 <DMA_CheckFifoParam+0xe6>
        break;
 8005aca:	bf00      	nop
 8005acc:	e00a      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e008      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e006      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
    break;
 8005ae2:	bf00      	nop
    }
  }

  return status;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a38      	ldr	r2, [pc, #224]	; (8005be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a36      	ldr	r2, [pc, #216]	; (8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a33      	ldr	r2, [pc, #204]	; (8005bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a32      	ldr	r2, [pc, #200]	; (8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a30      	ldr	r2, [pc, #192]	; (8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01a      	beq.n	8005b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3b08      	subs	r3, #8
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a24      	ldr	r2, [pc, #144]	; (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b90:	e024      	b.n	8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3b10      	subs	r3, #16
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d806      	bhi.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d902      	bls.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	58025408 	.word	0x58025408
 8005bec:	5802541c 	.word	0x5802541c
 8005bf0:	58025430 	.word	0x58025430
 8005bf4:	58025444 	.word	0x58025444
 8005bf8:	58025458 	.word	0x58025458
 8005bfc:	5802546c 	.word	0x5802546c
 8005c00:	58025480 	.word	0x58025480
 8005c04:	58025494 	.word	0x58025494
 8005c08:	cccccccd 	.word	0xcccccccd
 8005c0c:	16009600 	.word	0x16009600
 8005c10:	58025880 	.word	0x58025880
 8005c14:	aaaaaaab 	.word	0xaaaaaaab
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	4002040f 	.word	0x4002040f
 8005c20:	10008200 	.word	0x10008200
 8005c24:	40020880 	.word	0x40020880

08005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d04a      	beq.n	8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d847      	bhi.n	8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d022      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	; (8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01d      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cb0:	671a      	str	r2, [r3, #112]	; 0x70
 8005cb2:	e009      	b.n	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cc6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	2201      	movs	r2, #1
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	58025408 	.word	0x58025408
 8005ce4:	5802541c 	.word	0x5802541c
 8005ce8:	58025430 	.word	0x58025430
 8005cec:	58025444 	.word	0x58025444
 8005cf0:	58025458 	.word	0x58025458
 8005cf4:	5802546c 	.word	0x5802546c
 8005cf8:	58025480 	.word	0x58025480
 8005cfc:	58025494 	.word	0x58025494
 8005d00:	1600963f 	.word	0x1600963f
 8005d04:	58025940 	.word	0x58025940
 8005d08:	1000823f 	.word	0x1000823f
 8005d0c:	40020940 	.word	0x40020940

08005d10 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d105      	bne.n	8005d36 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e315      	b.n	8006362 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e30e      	b.n	8006362 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f040 82fd 	bne.w	8006354 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a82      	ldr	r2, [pc, #520]	; (8005f78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d04a      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a81      	ldr	r2, [pc, #516]	; (8005f7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d045      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7f      	ldr	r2, [pc, #508]	; (8005f80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d040      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7e      	ldr	r2, [pc, #504]	; (8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d03b      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7c      	ldr	r2, [pc, #496]	; (8005f88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d036      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7b      	ldr	r2, [pc, #492]	; (8005f8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d031      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a79      	ldr	r2, [pc, #484]	; (8005f90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02c      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a78      	ldr	r2, [pc, #480]	; (8005f94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d027      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a76      	ldr	r2, [pc, #472]	; (8005f98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d022      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a75      	ldr	r2, [pc, #468]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d01d      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a73      	ldr	r2, [pc, #460]	; (8005fa0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d018      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a72      	ldr	r2, [pc, #456]	; (8005fa4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a70      	ldr	r2, [pc, #448]	; (8005fa8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00e      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6f      	ldr	r2, [pc, #444]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d009      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6d      	ldr	r2, [pc, #436]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6c      	ldr	r2, [pc, #432]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d101      	bne.n	8005e0c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e20:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	3308      	adds	r3, #8
 8005e30:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	223f      	movs	r2, #63	; 0x3f
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e018      	b.n	8005e76 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f248 0320 	movw	r3, #32800	; 0x8020
 8005e52:	430b      	orrs	r3, r1
 8005e54:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	3304      	adds	r3, #4
 8005e64:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2201      	movs	r2, #1
 8005e70:	409a      	lsls	r2, r3
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb41 	bl	8006504 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3c      	ldr	r2, [pc, #240]	; (8005f78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d072      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3a      	ldr	r2, [pc, #232]	; (8005f7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d06d      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a39      	ldr	r2, [pc, #228]	; (8005f80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d068      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a37      	ldr	r2, [pc, #220]	; (8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d063      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a36      	ldr	r2, [pc, #216]	; (8005f88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d05e      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d059      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a33      	ldr	r2, [pc, #204]	; (8005f90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d054      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a31      	ldr	r2, [pc, #196]	; (8005f94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d04f      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a30      	ldr	r2, [pc, #192]	; (8005f98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d04a      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2e      	ldr	r2, [pc, #184]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d045      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d040      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d03b      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d036      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a28      	ldr	r2, [pc, #160]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d02c      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d027      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d132      	bne.n	8005fd8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e031      	b.n	8005fda <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005f76:	bf00      	nop
 8005f78:	40020010 	.word	0x40020010
 8005f7c:	40020028 	.word	0x40020028
 8005f80:	40020040 	.word	0x40020040
 8005f84:	40020058 	.word	0x40020058
 8005f88:	40020070 	.word	0x40020070
 8005f8c:	40020088 	.word	0x40020088
 8005f90:	400200a0 	.word	0x400200a0
 8005f94:	400200b8 	.word	0x400200b8
 8005f98:	40020410 	.word	0x40020410
 8005f9c:	40020428 	.word	0x40020428
 8005fa0:	40020440 	.word	0x40020440
 8005fa4:	40020458 	.word	0x40020458
 8005fa8:	40020470 	.word	0x40020470
 8005fac:	40020488 	.word	0x40020488
 8005fb0:	400204a0 	.word	0x400204a0
 8005fb4:	400204b8 	.word	0x400204b8
 8005fb8:	58025408 	.word	0x58025408
 8005fbc:	5802541c 	.word	0x5802541c
 8005fc0:	58025430 	.word	0x58025430
 8005fc4:	58025444 	.word	0x58025444
 8005fc8:	58025458 	.word	0x58025458
 8005fcc:	5802546c 	.word	0x5802546c
 8005fd0:	58025480 	.word	0x58025480
 8005fd4:	58025494 	.word	0x58025494
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fe6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ff8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	; (80060ec <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d04a      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a39      	ldr	r2, [pc, #228]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d045      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a38      	ldr	r2, [pc, #224]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d040      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a36      	ldr	r2, [pc, #216]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a35      	ldr	r2, [pc, #212]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d036      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a33      	ldr	r2, [pc, #204]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d031      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a32      	ldr	r2, [pc, #200]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d02c      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a30      	ldr	r2, [pc, #192]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d027      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2f      	ldr	r2, [pc, #188]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d022      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2d      	ldr	r2, [pc, #180]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2c      	ldr	r2, [pc, #176]	; (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a26      	ldr	r2, [pc, #152]	; (8006124 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d101      	bne.n	800609e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d043      	beq.n	800612c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f023 021e 	bic.w	r2, r3, #30
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0216 	orr.w	r2, r2, #22
 80060b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060c6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d043      	beq.n	8006160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0208 	orr.w	r2, r2, #8
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e03a      	b.n	8006160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80060ea:	bf00      	nop
 80060ec:	40020010 	.word	0x40020010
 80060f0:	40020028 	.word	0x40020028
 80060f4:	40020040 	.word	0x40020040
 80060f8:	40020058 	.word	0x40020058
 80060fc:	40020070 	.word	0x40020070
 8006100:	40020088 	.word	0x40020088
 8006104:	400200a0 	.word	0x400200a0
 8006108:	400200b8 	.word	0x400200b8
 800610c:	40020410 	.word	0x40020410
 8006110:	40020428 	.word	0x40020428
 8006114:	40020440 	.word	0x40020440
 8006118:	40020458 	.word	0x40020458
 800611c:	40020470 	.word	0x40020470
 8006120:	40020488 	.word	0x40020488
 8006124:	400204a0 	.word	0x400204a0
 8006128:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 020e 	bic.w	r2, r3, #14
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 020a 	orr.w	r2, r2, #10
 800613e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0204 	orr.w	r2, r2, #4
 800615e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a81      	ldr	r2, [pc, #516]	; (800636c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d072      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a80      	ldr	r2, [pc, #512]	; (8006370 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d06d      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7e      	ldr	r2, [pc, #504]	; (8006374 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d068      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a7d      	ldr	r2, [pc, #500]	; (8006378 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d063      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7b      	ldr	r2, [pc, #492]	; (800637c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d05e      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d059      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a78      	ldr	r2, [pc, #480]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d054      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a77      	ldr	r2, [pc, #476]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d04f      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a75      	ldr	r2, [pc, #468]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d04a      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a74      	ldr	r2, [pc, #464]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d045      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a72      	ldr	r2, [pc, #456]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d040      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a71      	ldr	r2, [pc, #452]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d03b      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6f      	ldr	r2, [pc, #444]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d036      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6e      	ldr	r2, [pc, #440]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d031      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a6c      	ldr	r2, [pc, #432]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d02c      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6b      	ldr	r2, [pc, #428]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d027      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a69      	ldr	r2, [pc, #420]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d022      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a68      	ldr	r2, [pc, #416]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d01d      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a66      	ldr	r2, [pc, #408]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a65      	ldr	r2, [pc, #404]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a63      	ldr	r2, [pc, #396]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a62      	ldr	r2, [pc, #392]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a60      	ldr	r2, [pc, #384]	; (80063c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5f      	ldr	r2, [pc, #380]	; (80063c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d101      	bne.n	8006254 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01a      	beq.n	8006290 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006276:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800628e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a35      	ldr	r2, [pc, #212]	; (800636c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d04a      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a34      	ldr	r2, [pc, #208]	; (8006370 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d045      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a32      	ldr	r2, [pc, #200]	; (8006374 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d040      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a31      	ldr	r2, [pc, #196]	; (8006378 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d03b      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2f      	ldr	r2, [pc, #188]	; (800637c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d036      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2e      	ldr	r2, [pc, #184]	; (8006380 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d031      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02c      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d027      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a29      	ldr	r2, [pc, #164]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d022      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a28      	ldr	r2, [pc, #160]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d01d      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a26      	ldr	r2, [pc, #152]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a25      	ldr	r2, [pc, #148]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a23      	ldr	r2, [pc, #140]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d108      	bne.n	8006342 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e00e      	b.n	8006360 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e005      	b.n	8006360 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800635a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40020010 	.word	0x40020010
 8006370:	40020028 	.word	0x40020028
 8006374:	40020040 	.word	0x40020040
 8006378:	40020058 	.word	0x40020058
 800637c:	40020070 	.word	0x40020070
 8006380:	40020088 	.word	0x40020088
 8006384:	400200a0 	.word	0x400200a0
 8006388:	400200b8 	.word	0x400200b8
 800638c:	40020410 	.word	0x40020410
 8006390:	40020428 	.word	0x40020428
 8006394:	40020440 	.word	0x40020440
 8006398:	40020458 	.word	0x40020458
 800639c:	40020470 	.word	0x40020470
 80063a0:	40020488 	.word	0x40020488
 80063a4:	400204a0 	.word	0x400204a0
 80063a8:	400204b8 	.word	0x400204b8
 80063ac:	58025408 	.word	0x58025408
 80063b0:	5802541c 	.word	0x5802541c
 80063b4:	58025430 	.word	0x58025430
 80063b8:	58025444 	.word	0x58025444
 80063bc:	58025458 	.word	0x58025458
 80063c0:	5802546c 	.word	0x5802546c
 80063c4:	58025480 	.word	0x58025480
 80063c8:	58025494 	.word	0x58025494

080063cc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a39      	ldr	r2, [pc, #228]	; (80064c4 <HAL_DMAEx_ChangeMemory+0xf8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d04a      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <HAL_DMAEx_ChangeMemory+0xfc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d045      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a36      	ldr	r2, [pc, #216]	; (80064cc <HAL_DMAEx_ChangeMemory+0x100>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d040      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <HAL_DMAEx_ChangeMemory+0x104>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d03b      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <HAL_DMAEx_ChangeMemory+0x108>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d036      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a31      	ldr	r2, [pc, #196]	; (80064d8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d031      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a30      	ldr	r2, [pc, #192]	; (80064dc <HAL_DMAEx_ChangeMemory+0x110>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d02c      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_DMAEx_ChangeMemory+0x114>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d027      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <HAL_DMAEx_ChangeMemory+0x118>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01d      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <HAL_DMAEx_ChangeMemory+0x120>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <HAL_DMAEx_ChangeMemory+0x124>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <HAL_DMAEx_ChangeMemory+0x128>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <HAL_DMAEx_ChangeMemory+0x130>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_DMAEx_ChangeMemory+0xae>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_DMAEx_ChangeMemory+0x134>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d101      	bne.n	800647e <HAL_DMAEx_ChangeMemory+0xb2>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_DMAEx_ChangeMemory+0xb4>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	e010      	b.n	80064b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	611a      	str	r2, [r3, #16]
 800649c:	e00b      	b.n	80064b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e003      	b.n	80064b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8

08006504 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a46      	ldr	r2, [pc, #280]	; (8006630 <DMA_MultiBufferSetConfig+0x12c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d04a      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a44      	ldr	r2, [pc, #272]	; (8006634 <DMA_MultiBufferSetConfig+0x130>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d045      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a43      	ldr	r2, [pc, #268]	; (8006638 <DMA_MultiBufferSetConfig+0x134>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d040      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a41      	ldr	r2, [pc, #260]	; (800663c <DMA_MultiBufferSetConfig+0x138>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d03b      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a40      	ldr	r2, [pc, #256]	; (8006640 <DMA_MultiBufferSetConfig+0x13c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d036      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a3e      	ldr	r2, [pc, #248]	; (8006644 <DMA_MultiBufferSetConfig+0x140>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d031      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a3d      	ldr	r2, [pc, #244]	; (8006648 <DMA_MultiBufferSetConfig+0x144>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d02c      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a3b      	ldr	r2, [pc, #236]	; (800664c <DMA_MultiBufferSetConfig+0x148>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d027      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a3a      	ldr	r2, [pc, #232]	; (8006650 <DMA_MultiBufferSetConfig+0x14c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d022      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a38      	ldr	r2, [pc, #224]	; (8006654 <DMA_MultiBufferSetConfig+0x150>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01d      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a37      	ldr	r2, [pc, #220]	; (8006658 <DMA_MultiBufferSetConfig+0x154>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d018      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a35      	ldr	r2, [pc, #212]	; (800665c <DMA_MultiBufferSetConfig+0x158>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a34      	ldr	r2, [pc, #208]	; (8006660 <DMA_MultiBufferSetConfig+0x15c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00e      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a32      	ldr	r2, [pc, #200]	; (8006664 <DMA_MultiBufferSetConfig+0x160>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d009      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a31      	ldr	r2, [pc, #196]	; (8006668 <DMA_MultiBufferSetConfig+0x164>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <DMA_MultiBufferSetConfig+0xae>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2f      	ldr	r2, [pc, #188]	; (800666c <DMA_MultiBufferSetConfig+0x168>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <DMA_MultiBufferSetConfig+0xb2>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <DMA_MultiBufferSetConfig+0xb4>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d019      	beq.n	80065f0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b40      	cmp	r3, #64	; 0x40
 80065ca:	d108      	bne.n	80065de <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80065dc:	e021      	b.n	8006622 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
}
 80065ee:	e018      	b.n	8006622 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d108      	bne.n	8006612 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	60da      	str	r2, [r3, #12]
}
 8006610:	e007      	b.n	8006622 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	60da      	str	r2, [r3, #12]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40020010 	.word	0x40020010
 8006634:	40020028 	.word	0x40020028
 8006638:	40020040 	.word	0x40020040
 800663c:	40020058 	.word	0x40020058
 8006640:	40020070 	.word	0x40020070
 8006644:	40020088 	.word	0x40020088
 8006648:	400200a0 	.word	0x400200a0
 800664c:	400200b8 	.word	0x400200b8
 8006650:	40020410 	.word	0x40020410
 8006654:	40020428 	.word	0x40020428
 8006658:	40020440 	.word	0x40020440
 800665c:	40020458 	.word	0x40020458
 8006660:	40020470 	.word	0x40020470
 8006664:	40020488 	.word	0x40020488
 8006668:	400204a0 	.word	0x400204a0
 800666c:	400204b8 	.word	0x400204b8

08006670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800667e:	4b89      	ldr	r3, [pc, #548]	; (80068a4 <HAL_GPIO_Init+0x234>)
 8006680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006682:	e194      	b.n	80069ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	2101      	movs	r1, #1
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	fa01 f303 	lsl.w	r3, r1, r3
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8186 	beq.w	80069a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d005      	beq.n	80066b4 <HAL_GPIO_Init+0x44>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d130      	bne.n	8006716 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	2203      	movs	r2, #3
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ea:	2201      	movs	r2, #1
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 0201 	and.w	r2, r3, #1
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d017      	beq.n	8006752 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	2203      	movs	r2, #3
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43db      	mvns	r3, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4013      	ands	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4313      	orrs	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d123      	bne.n	80067a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	08da      	lsrs	r2, r3, #3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3208      	adds	r2, #8
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	220f      	movs	r2, #15
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4313      	orrs	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	08da      	lsrs	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3208      	adds	r2, #8
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	2203      	movs	r2, #3
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4013      	ands	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f003 0203 	and.w	r2, r3, #3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80e0 	beq.w	80069a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e8:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <HAL_GPIO_Init+0x238>)
 80067ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067ee:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <HAL_GPIO_Init+0x238>)
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067f8:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <HAL_GPIO_Init+0x238>)
 80067fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006806:	4a29      	ldr	r2, [pc, #164]	; (80068ac <HAL_GPIO_Init+0x23c>)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	3302      	adds	r3, #2
 800680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	220f      	movs	r2, #15
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4013      	ands	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <HAL_GPIO_Init+0x240>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d052      	beq.n	80068d8 <HAL_GPIO_Init+0x268>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_GPIO_Init+0x244>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d031      	beq.n	800689e <HAL_GPIO_Init+0x22e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <HAL_GPIO_Init+0x248>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d02b      	beq.n	800689a <HAL_GPIO_Init+0x22a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_GPIO_Init+0x24c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d025      	beq.n	8006896 <HAL_GPIO_Init+0x226>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_GPIO_Init+0x250>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01f      	beq.n	8006892 <HAL_GPIO_Init+0x222>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_GPIO_Init+0x254>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d019      	beq.n	800688e <HAL_GPIO_Init+0x21e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_GPIO_Init+0x258>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_GPIO_Init+0x21a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <HAL_GPIO_Init+0x25c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00d      	beq.n	8006886 <HAL_GPIO_Init+0x216>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <HAL_GPIO_Init+0x260>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d007      	beq.n	8006882 <HAL_GPIO_Init+0x212>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <HAL_GPIO_Init+0x264>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_GPIO_Init+0x20e>
 800687a:	2309      	movs	r3, #9
 800687c:	e02d      	b.n	80068da <HAL_GPIO_Init+0x26a>
 800687e:	230a      	movs	r3, #10
 8006880:	e02b      	b.n	80068da <HAL_GPIO_Init+0x26a>
 8006882:	2308      	movs	r3, #8
 8006884:	e029      	b.n	80068da <HAL_GPIO_Init+0x26a>
 8006886:	2307      	movs	r3, #7
 8006888:	e027      	b.n	80068da <HAL_GPIO_Init+0x26a>
 800688a:	2306      	movs	r3, #6
 800688c:	e025      	b.n	80068da <HAL_GPIO_Init+0x26a>
 800688e:	2305      	movs	r3, #5
 8006890:	e023      	b.n	80068da <HAL_GPIO_Init+0x26a>
 8006892:	2304      	movs	r3, #4
 8006894:	e021      	b.n	80068da <HAL_GPIO_Init+0x26a>
 8006896:	2303      	movs	r3, #3
 8006898:	e01f      	b.n	80068da <HAL_GPIO_Init+0x26a>
 800689a:	2302      	movs	r3, #2
 800689c:	e01d      	b.n	80068da <HAL_GPIO_Init+0x26a>
 800689e:	2301      	movs	r3, #1
 80068a0:	e01b      	b.n	80068da <HAL_GPIO_Init+0x26a>
 80068a2:	bf00      	nop
 80068a4:	58000080 	.word	0x58000080
 80068a8:	58024400 	.word	0x58024400
 80068ac:	58000400 	.word	0x58000400
 80068b0:	58020000 	.word	0x58020000
 80068b4:	58020400 	.word	0x58020400
 80068b8:	58020800 	.word	0x58020800
 80068bc:	58020c00 	.word	0x58020c00
 80068c0:	58021000 	.word	0x58021000
 80068c4:	58021400 	.word	0x58021400
 80068c8:	58021800 	.word	0x58021800
 80068cc:	58021c00 	.word	0x58021c00
 80068d0:	58022000 	.word	0x58022000
 80068d4:	58022400 	.word	0x58022400
 80068d8:	2300      	movs	r3, #0
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	f002 0203 	and.w	r2, r2, #3
 80068e0:	0092      	lsls	r2, r2, #2
 80068e2:	4093      	lsls	r3, r2
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ea:	4938      	ldr	r1, [pc, #224]	; (80069cc <HAL_GPIO_Init+0x35c>)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	3302      	adds	r3, #2
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	43db      	mvns	r3, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4013      	ands	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800691e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	43db      	mvns	r3, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4013      	ands	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800694c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	43db      	mvns	r3, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4013      	ands	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	43db      	mvns	r3, r3
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	4013      	ands	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f ae63 	bne.w	8006684 <HAL_GPIO_Init+0x14>
  }
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3724      	adds	r7, #36	; 0x24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	58000400 	.word	0x58000400

080069d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	807b      	strh	r3, [r7, #2]
 80069dc:	4613      	mov	r3, r2
 80069de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069e0:	787b      	ldrb	r3, [r7, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069ec:	e003      	b.n	80069f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069ee:	887b      	ldrh	r3, [r7, #2]
 80069f0:	041a      	lsls	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	619a      	str	r2, [r3, #24]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a14:	887a      	ldrh	r2, [r7, #2]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	041a      	lsls	r2, r3, #16
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	43d9      	mvns	r1, r3
 8006a20:	887b      	ldrh	r3, [r7, #2]
 8006a22:	400b      	ands	r3, r1
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	619a      	str	r2, [r3, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e07f      	b.n	8006b4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fb fa6e 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	; 0x24
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d107      	bne.n	8006ab2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	e006      	b.n	8006ac0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d104      	bne.n	8006ad2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_I2C_Init+0x11c>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	02008000 	.word	0x02008000

08006b58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	461a      	mov	r2, r3
 8006b64:	460b      	mov	r3, r1
 8006b66:	817b      	strh	r3, [r7, #10]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	f040 80da 	bne.w	8006d2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_I2C_Master_Transmit+0x30>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0d3      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b90:	f7fb fe2e 	bl	80027f0 <HAL_GetTick>
 8006b94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2319      	movs	r3, #25
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f9e6 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0be      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2221      	movs	r2, #33	; 0x21
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	893a      	ldrh	r2, [r7, #8]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2bff      	cmp	r3, #255	; 0xff
 8006be2:	d90e      	bls.n	8006c02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	22ff      	movs	r2, #255	; 0xff
 8006be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	8979      	ldrh	r1, [r7, #10]
 8006bf2:	4b51      	ldr	r3, [pc, #324]	; (8006d38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fbdc 	bl	80073b8 <I2C_TransferConfig>
 8006c00:	e06c      	b.n	8006cdc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8979      	ldrh	r1, [r7, #10]
 8006c14:	4b48      	ldr	r3, [pc, #288]	; (8006d38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fbcb 	bl	80073b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c22:	e05b      	b.n	8006cdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	6a39      	ldr	r1, [r7, #32]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f9e3 	bl	8006ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e07b      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d034      	beq.n	8006cdc <HAL_I2C_Master_Transmit+0x184>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d130      	bne.n	8006cdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2180      	movs	r1, #128	; 0x80
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f975 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e04d      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d90e      	bls.n	8006cbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	22ff      	movs	r2, #255	; 0xff
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	8979      	ldrh	r1, [r7, #10]
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fb7f 	bl	80073b8 <I2C_TransferConfig>
 8006cba:	e00f      	b.n	8006cdc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	8979      	ldrh	r1, [r7, #10]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb6e 	bl	80073b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d19e      	bne.n	8006c24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	6a39      	ldr	r1, [r7, #32]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f9c2 	bl	8007074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e01a      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <HAL_I2C_Master_Transmit+0x1e4>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
  }
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	80002000 	.word	0x80002000
 8006d3c:	fe00e800 	.word	0xfe00e800

08006d40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	817b      	strh	r3, [r7, #10]
 8006d50:	4613      	mov	r3, r2
 8006d52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	f040 80db 	bne.w	8006f18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_I2C_Master_Receive+0x30>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e0d4      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d78:	f7fb fd3a 	bl	80027f0 <HAL_GetTick>
 8006d7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	2319      	movs	r3, #25
 8006d84:	2201      	movs	r2, #1
 8006d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f8f2 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e0bf      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2222      	movs	r2, #34	; 0x22
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2210      	movs	r2, #16
 8006da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	893a      	ldrh	r2, [r7, #8]
 8006dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2bff      	cmp	r3, #255	; 0xff
 8006dca:	d90e      	bls.n	8006dea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	8979      	ldrh	r1, [r7, #10]
 8006dda:	4b52      	ldr	r3, [pc, #328]	; (8006f24 <HAL_I2C_Master_Receive+0x1e4>)
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fae8 	bl	80073b8 <I2C_TransferConfig>
 8006de8:	e06d      	b.n	8006ec6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	8979      	ldrh	r1, [r7, #10]
 8006dfc:	4b49      	ldr	r3, [pc, #292]	; (8006f24 <HAL_I2C_Master_Receive+0x1e4>)
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fad7 	bl	80073b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006e0a:	e05c      	b.n	8006ec6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	6a39      	ldr	r1, [r7, #32]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f96b 	bl	80070ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e07c      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d034      	beq.n	8006ec6 <HAL_I2C_Master_Receive+0x186>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d130      	bne.n	8006ec6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f880 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e04d      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2bff      	cmp	r3, #255	; 0xff
 8006e86:	d90e      	bls.n	8006ea6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	22ff      	movs	r2, #255	; 0xff
 8006e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	8979      	ldrh	r1, [r7, #10]
 8006e96:	2300      	movs	r3, #0
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fa8a 	bl	80073b8 <I2C_TransferConfig>
 8006ea4:	e00f      	b.n	8006ec6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	8979      	ldrh	r1, [r7, #10]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fa79 	bl	80073b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d19d      	bne.n	8006e0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	6a39      	ldr	r1, [r7, #32]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f8cd 	bl	8007074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e01a      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6859      	ldr	r1, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <HAL_I2C_Master_Receive+0x1e8>)
 8006ef8:	400b      	ands	r3, r1
 8006efa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	80002400 	.word	0x80002400
 8006f28:	fe00e800 	.word	0xfe00e800

08006f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d103      	bne.n	8006f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d007      	beq.n	8006f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	619a      	str	r2, [r3, #24]
  }
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f84:	e022      	b.n	8006fcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8c:	d01e      	beq.n	8006fcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8e:	f7fb fc2f 	bl	80027f0 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d302      	bcc.n	8006fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d113      	bne.n	8006fcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	f043 0220 	orr.w	r2, r3, #32
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e00f      	b.n	8006fec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d0cd      	beq.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007000:	e02c      	b.n	800705c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f8ea 	bl	80071e0 <I2C_IsErrorOccurred>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e02a      	b.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701c:	d01e      	beq.n	800705c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fb fbe7 	bl	80027f0 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d113      	bne.n	800705c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f043 0220 	orr.w	r2, r3, #32
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e007      	b.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d1cb      	bne.n	8007002 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007080:	e028      	b.n	80070d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f8aa 	bl	80071e0 <I2C_IsErrorOccurred>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e026      	b.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007096:	f7fb fbab 	bl	80027f0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d302      	bcc.n	80070ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d113      	bne.n	80070d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	f043 0220 	orr.w	r2, r3, #32
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e007      	b.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d1cf      	bne.n	8007082 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070f8:	e064      	b.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f86e 	bl	80071e0 <I2C_IsErrorOccurred>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e062      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b20      	cmp	r3, #32
 800711a:	d138      	bne.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b04      	cmp	r3, #4
 8007128:	d105      	bne.n	8007136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e04e      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d107      	bne.n	8007154 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2210      	movs	r2, #16
 800714a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2204      	movs	r2, #4
 8007150:	645a      	str	r2, [r3, #68]	; 0x44
 8007152:	e002      	b.n	800715a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2220      	movs	r2, #32
 8007160:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800716e:	400b      	ands	r3, r1
 8007170:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e022      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fb fb2f 	bl	80027f0 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10f      	bne.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e007      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d193      	bne.n	80070fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	fe00e800 	.word	0xfe00e800

080071e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d075      	beq.n	80072f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2210      	movs	r2, #16
 8007212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007214:	e056      	b.n	80072c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800721c:	d052      	beq.n	80072c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800721e:	f7fb fae7 	bl	80027f0 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <I2C_IsErrorOccurred+0x54>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d147      	bne.n	80072c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007256:	d12e      	bne.n	80072b6 <I2C_IsErrorOccurred+0xd6>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725e:	d02a      	beq.n	80072b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007260:	7cfb      	ldrb	r3, [r7, #19]
 8007262:	2b20      	cmp	r3, #32
 8007264:	d027      	beq.n	80072b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007274:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007276:	f7fb fabb 	bl	80027f0 <HAL_GetTick>
 800727a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727c:	e01b      	b.n	80072b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800727e:	f7fb fab7 	bl	80027f0 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b19      	cmp	r3, #25
 800728a:	d914      	bls.n	80072b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d1dc      	bne.n	800727e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d003      	beq.n	80072da <I2C_IsErrorOccurred+0xfa>
 80072d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d09d      	beq.n	8007216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2220      	movs	r2, #32
 80072e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800731a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f043 0308 	orr.w	r3, r3, #8
 8007332:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800733c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01c      	beq.n	80073a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fddc 	bl	8006f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <I2C_IsErrorOccurred+0x1d4>)
 8007380:	400b      	ands	r3, r1
 8007382:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	431a      	orrs	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3728      	adds	r7, #40	; 0x28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	fe00e800 	.word	0xfe00e800

080073b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	817b      	strh	r3, [r7, #10]
 80073c6:	4613      	mov	r3, r2
 80073c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073ca:	897b      	ldrh	r3, [r7, #10]
 80073cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073d0:	7a7b      	ldrb	r3, [r7, #9]
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	0d5b      	lsrs	r3, r3, #21
 80073f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <I2C_TransferConfig+0x60>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	43db      	mvns	r3, r3
 80073fc:	ea02 0103 	and.w	r1, r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	03ff63ff 	.word	0x03ff63ff

0800741c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b20      	cmp	r3, #32
 8007430:	d138      	bne.n	80074a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800743c:	2302      	movs	r3, #2
 800743e:	e032      	b.n	80074a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	; 0x24
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800746e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6819      	ldr	r1, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e000      	b.n	80074a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d139      	bne.n	800753c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e033      	b.n	800753e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2224      	movs	r2, #36	; 0x24
 80074e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0201 	bic.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007504:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	e000      	b.n	800753e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800753c:	2302      	movs	r3, #2
  }
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e097      	b.n	800768e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fa fd47 	bl	800200c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d004      	beq.n	80075a0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800759e:	d103      	bne.n	80075a8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 031e 	bic.w	r3, r3, #30
 80075a6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4b38      	ldr	r3, [pc, #224]	; (8007698 <HAL_LPTIM_Init+0x14c>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4b37      	ldr	r3, [pc, #220]	; (800769c <HAL_LPTIM_Init+0x150>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80075cc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80075d2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80075d8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80075de:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80075f6:	4313      	orrs	r3, r2
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d004      	beq.n	8007610 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800760e:	d107      	bne.n	8007620 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007618:	4313      	orrs	r3, r2
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007628:	4293      	cmp	r3, r2
 800762a:	d00a      	beq.n	8007642 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007634:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800763a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <HAL_LPTIM_Init+0x154>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_LPTIM_Init+0x112>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a12      	ldr	r2, [pc, #72]	; (80076a4 <HAL_LPTIM_Init+0x158>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	625a      	str	r2, [r3, #36]	; 0x24
 800766e:	e009      	b.n	8007684 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <HAL_LPTIM_Init+0x15c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d104      	bne.n	8007684 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	ffff1f3f 	.word	0xffff1f3f
 800769c:	ff19f1fe 	.word	0xff19f1fe
 80076a0:	40002400 	.word	0x40002400
 80076a4:	58002400 	.word	0x58002400
 80076a8:	58002800 	.word	0x58002800

080076ac <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80076ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2210      	movs	r2, #16
 80076e6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80076f0:	2110      	movs	r1, #16
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f852 	bl	800779c <LPTIM_WaitForFlag>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d101      	bne.n	8007702 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e01d      	b.n	800773e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2208      	movs	r2, #8
 8007708:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007712:	2108      	movs	r1, #8
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f841 	bl	800779c <LPTIM_WaitForFlag>
 800771a:	4603      	mov	r3, r0
 800771c:	2b03      	cmp	r3, #3
 800771e:	d101      	bne.n	8007724 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e00c      	b.n	800773e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0204 	orr.w	r2, r2, #4
 8007732:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_LPTIM_PWM_Stop>:
  * @brief  Stop the LPTIM PWM generation.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f850 	bl	80077fc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f80e 	bl	800777e <HAL_LPTIM_GetState>
 8007762:	4603      	mov	r3, r0
 8007764:	2b03      	cmp	r3, #3
 8007766:	d101      	bne.n	800776c <HAL_LPTIM_PWM_Stop+0x26>
  {
    return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e004      	b.n	8007776 <HAL_LPTIM_PWM_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800778c:	b2db      	uxtb	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <LPTIM_WaitForFlag+0x58>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <LPTIM_WaitForFlag+0x5c>)
 80077b0:	fba2 2303 	umull	r2, r3, r2, r3
 80077b4:	0b9b      	lsrs	r3, r3, #14
 80077b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4013      	ands	r3, r2
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d002      	beq.n	80077e6 <LPTIM_WaitForFlag+0x4a>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ec      	bne.n	80077c0 <LPTIM_WaitForFlag+0x24>

  return result;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	24000030 	.word	0x24000030
 80077f8:	d1b71759 	.word	0xd1b71759

080077fc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08c      	sub	sp, #48	; 0x30
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007808:	f3ef 8310 	mrs	r3, PRIMASK
 800780c:	60fb      	str	r3, [r7, #12]
  return(result);
 800780e:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
 8007812:	2301      	movs	r3, #1
 8007814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f383 8810 	msr	PRIMASK, r3
}
 800781c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a81      	ldr	r2, [pc, #516]	; (8007a28 <LPTIM_Disable+0x22c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d02d      	beq.n	8007884 <LPTIM_Disable+0x88>
 8007828:	4a7f      	ldr	r2, [pc, #508]	; (8007a28 <LPTIM_Disable+0x22c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d830      	bhi.n	8007890 <LPTIM_Disable+0x94>
 800782e:	4a7f      	ldr	r2, [pc, #508]	; (8007a2c <LPTIM_Disable+0x230>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d021      	beq.n	8007878 <LPTIM_Disable+0x7c>
 8007834:	4a7d      	ldr	r2, [pc, #500]	; (8007a2c <LPTIM_Disable+0x230>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d82a      	bhi.n	8007890 <LPTIM_Disable+0x94>
 800783a:	4a7d      	ldr	r2, [pc, #500]	; (8007a30 <LPTIM_Disable+0x234>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d015      	beq.n	800786c <LPTIM_Disable+0x70>
 8007840:	4a7b      	ldr	r2, [pc, #492]	; (8007a30 <LPTIM_Disable+0x234>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d824      	bhi.n	8007890 <LPTIM_Disable+0x94>
 8007846:	4a7b      	ldr	r2, [pc, #492]	; (8007a34 <LPTIM_Disable+0x238>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <LPTIM_Disable+0x58>
 800784c:	4a7a      	ldr	r2, [pc, #488]	; (8007a38 <LPTIM_Disable+0x23c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d006      	beq.n	8007860 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8007852:	e01d      	b.n	8007890 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007854:	4b79      	ldr	r3, [pc, #484]	; (8007a3c <LPTIM_Disable+0x240>)
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800785e:	e018      	b.n	8007892 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007860:	4b76      	ldr	r3, [pc, #472]	; (8007a3c <LPTIM_Disable+0x240>)
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800786a:	e012      	b.n	8007892 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800786c:	4b73      	ldr	r3, [pc, #460]	; (8007a3c <LPTIM_Disable+0x240>)
 800786e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007876:	e00c      	b.n	8007892 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007878:	4b70      	ldr	r3, [pc, #448]	; (8007a3c <LPTIM_Disable+0x240>)
 800787a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007882:	e006      	b.n	8007892 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007884:	4b6d      	ldr	r3, [pc, #436]	; (8007a3c <LPTIM_Disable+0x240>)
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800788e:	e000      	b.n	8007892 <LPTIM_Disable+0x96>
      break;
 8007890:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a5a      	ldr	r2, [pc, #360]	; (8007a28 <LPTIM_Disable+0x22c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d059      	beq.n	8007978 <LPTIM_Disable+0x17c>
 80078c4:	4a58      	ldr	r2, [pc, #352]	; (8007a28 <LPTIM_Disable+0x22c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d867      	bhi.n	800799a <LPTIM_Disable+0x19e>
 80078ca:	4a58      	ldr	r2, [pc, #352]	; (8007a2c <LPTIM_Disable+0x230>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d042      	beq.n	8007956 <LPTIM_Disable+0x15a>
 80078d0:	4a56      	ldr	r2, [pc, #344]	; (8007a2c <LPTIM_Disable+0x230>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d861      	bhi.n	800799a <LPTIM_Disable+0x19e>
 80078d6:	4a56      	ldr	r2, [pc, #344]	; (8007a30 <LPTIM_Disable+0x234>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d02b      	beq.n	8007934 <LPTIM_Disable+0x138>
 80078dc:	4a54      	ldr	r2, [pc, #336]	; (8007a30 <LPTIM_Disable+0x234>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d85b      	bhi.n	800799a <LPTIM_Disable+0x19e>
 80078e2:	4a54      	ldr	r2, [pc, #336]	; (8007a34 <LPTIM_Disable+0x238>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <LPTIM_Disable+0xf4>
 80078e8:	4a53      	ldr	r2, [pc, #332]	; (8007a38 <LPTIM_Disable+0x23c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d011      	beq.n	8007912 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80078ee:	e054      	b.n	800799a <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80078f0:	4b52      	ldr	r3, [pc, #328]	; (8007a3c <LPTIM_Disable+0x240>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	4a51      	ldr	r2, [pc, #324]	; (8007a3c <LPTIM_Disable+0x240>)
 80078f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007900:	4b4e      	ldr	r3, [pc, #312]	; (8007a3c <LPTIM_Disable+0x240>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007906:	4a4d      	ldr	r2, [pc, #308]	; (8007a3c <LPTIM_Disable+0x240>)
 8007908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800790c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8007910:	e044      	b.n	800799c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8007912:	4b4a      	ldr	r3, [pc, #296]	; (8007a3c <LPTIM_Disable+0x240>)
 8007914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007918:	4a48      	ldr	r2, [pc, #288]	; (8007a3c <LPTIM_Disable+0x240>)
 800791a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800791e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8007922:	4b46      	ldr	r3, [pc, #280]	; (8007a3c <LPTIM_Disable+0x240>)
 8007924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007928:	4a44      	ldr	r2, [pc, #272]	; (8007a3c <LPTIM_Disable+0x240>)
 800792a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800792e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007932:	e033      	b.n	800799c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8007934:	4b41      	ldr	r3, [pc, #260]	; (8007a3c <LPTIM_Disable+0x240>)
 8007936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800793a:	4a40      	ldr	r2, [pc, #256]	; (8007a3c <LPTIM_Disable+0x240>)
 800793c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007940:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8007944:	4b3d      	ldr	r3, [pc, #244]	; (8007a3c <LPTIM_Disable+0x240>)
 8007946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800794a:	4a3c      	ldr	r2, [pc, #240]	; (8007a3c <LPTIM_Disable+0x240>)
 800794c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007950:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007954:	e022      	b.n	800799c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <LPTIM_Disable+0x240>)
 8007958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800795c:	4a37      	ldr	r2, [pc, #220]	; (8007a3c <LPTIM_Disable+0x240>)
 800795e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007962:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8007966:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <LPTIM_Disable+0x240>)
 8007968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800796c:	4a33      	ldr	r2, [pc, #204]	; (8007a3c <LPTIM_Disable+0x240>)
 800796e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007972:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007976:	e011      	b.n	800799c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <LPTIM_Disable+0x240>)
 800797a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800797e:	4a2f      	ldr	r2, [pc, #188]	; (8007a3c <LPTIM_Disable+0x240>)
 8007980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007984:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8007988:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <LPTIM_Disable+0x240>)
 800798a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800798e:	4a2b      	ldr	r2, [pc, #172]	; (8007a3c <LPTIM_Disable+0x240>)
 8007990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007994:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007998:	e000      	b.n	800799c <LPTIM_Disable+0x1a0>
      break;
 800799a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <LPTIM_Disable+0x1ae>
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80d0 	beq.w	8007b4a <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <LPTIM_Disable+0x22c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d031      	beq.n	8007a18 <LPTIM_Disable+0x21c>
 80079b4:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <LPTIM_Disable+0x22c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d842      	bhi.n	8007a40 <LPTIM_Disable+0x244>
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <LPTIM_Disable+0x230>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d024      	beq.n	8007a0a <LPTIM_Disable+0x20e>
 80079c0:	4a1a      	ldr	r2, [pc, #104]	; (8007a2c <LPTIM_Disable+0x230>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d83c      	bhi.n	8007a40 <LPTIM_Disable+0x244>
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <LPTIM_Disable+0x234>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d017      	beq.n	80079fc <LPTIM_Disable+0x200>
 80079cc:	4a18      	ldr	r2, [pc, #96]	; (8007a30 <LPTIM_Disable+0x234>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d836      	bhi.n	8007a40 <LPTIM_Disable+0x244>
 80079d2:	4a18      	ldr	r2, [pc, #96]	; (8007a34 <LPTIM_Disable+0x238>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d003      	beq.n	80079e0 <LPTIM_Disable+0x1e4>
 80079d8:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <LPTIM_Disable+0x23c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80079de:	e02f      	b.n	8007a40 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80079e0:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <LPTIM_Disable+0x240>)
 80079e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e4:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <LPTIM_Disable+0x240>)
 80079e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80079ea:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80079ec:	e029      	b.n	8007a42 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <LPTIM_Disable+0x240>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	4a12      	ldr	r2, [pc, #72]	; (8007a3c <LPTIM_Disable+0x240>)
 80079f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80079f8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80079fa:	e022      	b.n	8007a42 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <LPTIM_Disable+0x240>)
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	4a0e      	ldr	r2, [pc, #56]	; (8007a3c <LPTIM_Disable+0x240>)
 8007a02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a06:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a08:	e01b      	b.n	8007a42 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <LPTIM_Disable+0x240>)
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0e:	4a0b      	ldr	r2, [pc, #44]	; (8007a3c <LPTIM_Disable+0x240>)
 8007a10:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a14:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a16:	e014      	b.n	8007a42 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8007a18:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <LPTIM_Disable+0x240>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	4a07      	ldr	r2, [pc, #28]	; (8007a3c <LPTIM_Disable+0x240>)
 8007a1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a22:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a24:	e00d      	b.n	8007a42 <LPTIM_Disable+0x246>
 8007a26:	bf00      	nop
 8007a28:	58003000 	.word	0x58003000
 8007a2c:	58002c00 	.word	0x58002c00
 8007a30:	58002800 	.word	0x58002800
 8007a34:	40002400 	.word	0x40002400
 8007a38:	58002400 	.word	0x58002400
 8007a3c:	58024400 	.word	0x58024400
        break;
 8007a40:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007a60:	2108      	movs	r1, #8
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fe9a 	bl	800779c <LPTIM_WaitForFlag>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d103      	bne.n	8007a76 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2203      	movs	r2, #3
 8007a72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01a      	beq.n	8007aba <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007a9c:	2110      	movs	r1, #16
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe7c 	bl	800779c <LPTIM_WaitForFlag>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d103      	bne.n	8007ab2 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2203      	movs	r2, #3
 8007aae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a33      	ldr	r2, [pc, #204]	; (8007b8c <LPTIM_Disable+0x390>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d039      	beq.n	8007b38 <LPTIM_Disable+0x33c>
 8007ac4:	4a31      	ldr	r2, [pc, #196]	; (8007b8c <LPTIM_Disable+0x390>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d841      	bhi.n	8007b4e <LPTIM_Disable+0x352>
 8007aca:	4a31      	ldr	r2, [pc, #196]	; (8007b90 <LPTIM_Disable+0x394>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02a      	beq.n	8007b26 <LPTIM_Disable+0x32a>
 8007ad0:	4a2f      	ldr	r2, [pc, #188]	; (8007b90 <LPTIM_Disable+0x394>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d83b      	bhi.n	8007b4e <LPTIM_Disable+0x352>
 8007ad6:	4a2f      	ldr	r2, [pc, #188]	; (8007b94 <LPTIM_Disable+0x398>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d01b      	beq.n	8007b14 <LPTIM_Disable+0x318>
 8007adc:	4a2d      	ldr	r2, [pc, #180]	; (8007b94 <LPTIM_Disable+0x398>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d835      	bhi.n	8007b4e <LPTIM_Disable+0x352>
 8007ae2:	4a2d      	ldr	r2, [pc, #180]	; (8007b98 <LPTIM_Disable+0x39c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <LPTIM_Disable+0x2f4>
 8007ae8:	4a2c      	ldr	r2, [pc, #176]	; (8007b9c <LPTIM_Disable+0x3a0>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007aee:	e02e      	b.n	8007b4e <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007af0:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007af8:	4929      	ldr	r1, [pc, #164]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	4313      	orrs	r3, r2
 8007afe:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8007b00:	e026      	b.n	8007b50 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b0a:	4925      	ldr	r1, [pc, #148]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b12:	e01d      	b.n	8007b50 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8007b14:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b1c:	4920      	ldr	r1, [pc, #128]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	4313      	orrs	r3, r2
 8007b22:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b24:	e014      	b.n	8007b50 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8007b26:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b2e:	491c      	ldr	r1, [pc, #112]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	4313      	orrs	r3, r2
 8007b34:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b36:	e00b      	b.n	8007b50 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8007b38:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b40:	4917      	ldr	r1, [pc, #92]	; (8007ba0 <LPTIM_Disable+0x3a4>)
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	4313      	orrs	r3, r2
 8007b46:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b48:	e002      	b.n	8007b50 <LPTIM_Disable+0x354>
    }
  }
 8007b4a:	bf00      	nop
 8007b4c:	e000      	b.n	8007b50 <LPTIM_Disable+0x354>
        break;
 8007b4e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b66:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6a3a      	ldr	r2, [r7, #32]
 8007b6e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f383 8810 	msr	PRIMASK, r3
}
 8007b82:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007b84:	bf00      	nop
 8007b86:	3730      	adds	r7, #48	; 0x30
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	58003000 	.word	0x58003000
 8007b90:	58002c00 	.word	0x58002c00
 8007b94:	58002800 	.word	0x58002800
 8007b98:	40002400 	.word	0x40002400
 8007b9c:	58002400 	.word	0x58002400
 8007ba0:	58024400 	.word	0x58024400

08007ba4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007bac:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_PWREx_ConfigSupply+0x70>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d00a      	beq.n	8007bce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bb8:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <HAL_PWREx_ConfigSupply+0x70>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d001      	beq.n	8007bca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e01f      	b.n	8007c0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e01d      	b.n	8007c0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bce:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <HAL_PWREx_ConfigSupply+0x70>)
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f023 0207 	bic.w	r2, r3, #7
 8007bd6:	490f      	ldr	r1, [pc, #60]	; (8007c14 <HAL_PWREx_ConfigSupply+0x70>)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bde:	f7fa fe07 	bl	80027f0 <HAL_GetTick>
 8007be2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007be4:	e009      	b.n	8007bfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007be6:	f7fa fe03 	bl	80027f0 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf4:	d901      	bls.n	8007bfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e007      	b.n	8007c0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <HAL_PWREx_ConfigSupply+0x70>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c06:	d1ee      	bne.n	8007be6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	58024800 	.word	0x58024800

08007c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08c      	sub	sp, #48	; 0x30
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d102      	bne.n	8007c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f000 bc1d 	b.w	8008466 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8087 	beq.w	8007d48 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c3a:	4b99      	ldr	r3, [pc, #612]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c44:	4b96      	ldr	r3, [pc, #600]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d007      	beq.n	8007c60 <HAL_RCC_OscConfig+0x48>
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	2b18      	cmp	r3, #24
 8007c54:	d110      	bne.n	8007c78 <HAL_RCC_OscConfig+0x60>
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d10b      	bne.n	8007c78 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c60:	4b8f      	ldr	r3, [pc, #572]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d06c      	beq.n	8007d46 <HAL_RCC_OscConfig+0x12e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d168      	bne.n	8007d46 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e3f6      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c80:	d106      	bne.n	8007c90 <HAL_RCC_OscConfig+0x78>
 8007c82:	4b87      	ldr	r3, [pc, #540]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a86      	ldr	r2, [pc, #536]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	e02e      	b.n	8007cee <HAL_RCC_OscConfig+0xd6>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x9a>
 8007c98:	4b81      	ldr	r3, [pc, #516]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a80      	ldr	r2, [pc, #512]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	4b7e      	ldr	r3, [pc, #504]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a7d      	ldr	r2, [pc, #500]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	e01d      	b.n	8007cee <HAL_RCC_OscConfig+0xd6>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cba:	d10c      	bne.n	8007cd6 <HAL_RCC_OscConfig+0xbe>
 8007cbc:	4b78      	ldr	r3, [pc, #480]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a77      	ldr	r2, [pc, #476]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	4b75      	ldr	r3, [pc, #468]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a74      	ldr	r2, [pc, #464]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	e00b      	b.n	8007cee <HAL_RCC_OscConfig+0xd6>
 8007cd6:	4b72      	ldr	r3, [pc, #456]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a71      	ldr	r2, [pc, #452]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	4b6f      	ldr	r3, [pc, #444]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a6e      	ldr	r2, [pc, #440]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d013      	beq.n	8007d1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf6:	f7fa fd7b 	bl	80027f0 <HAL_GetTick>
 8007cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cfe:	f7fa fd77 	bl	80027f0 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b64      	cmp	r3, #100	; 0x64
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e3aa      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d10:	4b63      	ldr	r3, [pc, #396]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0f0      	beq.n	8007cfe <HAL_RCC_OscConfig+0xe6>
 8007d1c:	e014      	b.n	8007d48 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1e:	f7fa fd67 	bl	80027f0 <HAL_GetTick>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d26:	f7fa fd63 	bl	80027f0 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b64      	cmp	r3, #100	; 0x64
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e396      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d38:	4b59      	ldr	r3, [pc, #356]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCC_OscConfig+0x10e>
 8007d44:	e000      	b.n	8007d48 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80cb 	beq.w	8007eec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d56:	4b52      	ldr	r3, [pc, #328]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d60:	4b4f      	ldr	r3, [pc, #316]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <HAL_RCC_OscConfig+0x164>
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	2b18      	cmp	r3, #24
 8007d70:	d156      	bne.n	8007e20 <HAL_RCC_OscConfig+0x208>
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d151      	bne.n	8007e20 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d7c:	4b48      	ldr	r3, [pc, #288]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_RCC_OscConfig+0x17c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e368      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d94:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f023 0219 	bic.w	r2, r3, #25
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	493f      	ldr	r1, [pc, #252]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007da6:	f7fa fd23 	bl	80027f0 <HAL_GetTick>
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dae:	f7fa fd1f 	bl	80027f0 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e352      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dc0:	4b37      	ldr	r3, [pc, #220]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dcc:	f7fa fd40 	bl	8002850 <HAL_GetREVID>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d817      	bhi.n	8007e0a <HAL_RCC_OscConfig+0x1f2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d108      	bne.n	8007df4 <HAL_RCC_OscConfig+0x1dc>
 8007de2:	4b2f      	ldr	r3, [pc, #188]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007dea:	4a2d      	ldr	r2, [pc, #180]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007df2:	e07b      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df4:	4b2a      	ldr	r3, [pc, #168]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	031b      	lsls	r3, r3, #12
 8007e02:	4927      	ldr	r1, [pc, #156]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e08:	e070      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0a:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	061b      	lsls	r3, r3, #24
 8007e18:	4921      	ldr	r1, [pc, #132]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e1e:	e065      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d048      	beq.n	8007eba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e28:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f023 0219 	bic.w	r2, r3, #25
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	491a      	ldr	r1, [pc, #104]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3a:	f7fa fcd9 	bl	80027f0 <HAL_GetTick>
 8007e3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e40:	e008      	b.n	8007e54 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e42:	f7fa fcd5 	bl	80027f0 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e308      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e60:	f7fa fcf6 	bl	8002850 <HAL_GetREVID>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d81a      	bhi.n	8007ea4 <HAL_RCC_OscConfig+0x28c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d108      	bne.n	8007e88 <HAL_RCC_OscConfig+0x270>
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e7e:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e84:	6053      	str	r3, [r2, #4]
 8007e86:	e031      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	031b      	lsls	r3, r3, #12
 8007e96:	4902      	ldr	r1, [pc, #8]	; (8007ea0 <HAL_RCC_OscConfig+0x288>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	604b      	str	r3, [r1, #4]
 8007e9c:	e026      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
 8007e9e:	bf00      	nop
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	4b9a      	ldr	r3, [pc, #616]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	4997      	ldr	r1, [pc, #604]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	604b      	str	r3, [r1, #4]
 8007eb8:	e018      	b.n	8007eec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eba:	4b95      	ldr	r3, [pc, #596]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a94      	ldr	r2, [pc, #592]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec6:	f7fa fc93 	bl	80027f0 <HAL_GetTick>
 8007eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ecc:	e008      	b.n	8007ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ece:	f7fa fc8f 	bl	80027f0 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e2c2      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ee0:	4b8b      	ldr	r3, [pc, #556]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1f0      	bne.n	8007ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80a9 	beq.w	800804c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007efa:	4b85      	ldr	r3, [pc, #532]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f04:	4b82      	ldr	r3, [pc, #520]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d007      	beq.n	8007f20 <HAL_RCC_OscConfig+0x308>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b18      	cmp	r3, #24
 8007f14:	d13a      	bne.n	8007f8c <HAL_RCC_OscConfig+0x374>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d135      	bne.n	8007f8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f20:	4b7b      	ldr	r3, [pc, #492]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RCC_OscConfig+0x320>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	2b80      	cmp	r3, #128	; 0x80
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e296      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f38:	f7fa fc8a 	bl	8002850 <HAL_GetREVID>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d817      	bhi.n	8007f76 <HAL_RCC_OscConfig+0x35e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d108      	bne.n	8007f60 <HAL_RCC_OscConfig+0x348>
 8007f4e:	4b70      	ldr	r3, [pc, #448]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f56:	4a6e      	ldr	r2, [pc, #440]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f5e:	e075      	b.n	800804c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f60:	4b6b      	ldr	r3, [pc, #428]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	069b      	lsls	r3, r3, #26
 8007f6e:	4968      	ldr	r1, [pc, #416]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f74:	e06a      	b.n	800804c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f76:	4b66      	ldr	r3, [pc, #408]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	061b      	lsls	r3, r3, #24
 8007f84:	4962      	ldr	r1, [pc, #392]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f8a:	e05f      	b.n	800804c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d042      	beq.n	800801a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f94:	4b5e      	ldr	r3, [pc, #376]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a5d      	ldr	r2, [pc, #372]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fa fc26 	bl	80027f0 <HAL_GetTick>
 8007fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fa8:	f7fa fc22 	bl	80027f0 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e255      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fba:	4b55      	ldr	r3, [pc, #340]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f0      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fc6:	f7fa fc43 	bl	8002850 <HAL_GetREVID>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d817      	bhi.n	8008004 <HAL_RCC_OscConfig+0x3ec>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d108      	bne.n	8007fee <HAL_RCC_OscConfig+0x3d6>
 8007fdc:	4b4c      	ldr	r3, [pc, #304]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007fe4:	4a4a      	ldr	r2, [pc, #296]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fea:	6053      	str	r3, [r2, #4]
 8007fec:	e02e      	b.n	800804c <HAL_RCC_OscConfig+0x434>
 8007fee:	4b48      	ldr	r3, [pc, #288]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	069b      	lsls	r3, r3, #26
 8007ffc:	4944      	ldr	r1, [pc, #272]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
 8008002:	e023      	b.n	800804c <HAL_RCC_OscConfig+0x434>
 8008004:	4b42      	ldr	r3, [pc, #264]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	493f      	ldr	r1, [pc, #252]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008014:	4313      	orrs	r3, r2
 8008016:	60cb      	str	r3, [r1, #12]
 8008018:	e018      	b.n	800804c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800801a:	4b3d      	ldr	r3, [pc, #244]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a3c      	ldr	r2, [pc, #240]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fa fbe3 	bl	80027f0 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800802c:	e008      	b.n	8008040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800802e:	f7fa fbdf 	bl	80027f0 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e212      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008040:	4b33      	ldr	r3, [pc, #204]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f0      	bne.n	800802e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d036      	beq.n	80080c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d019      	beq.n	8008094 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008060:	4b2b      	ldr	r3, [pc, #172]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008064:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800806c:	f7fa fbc0 	bl	80027f0 <HAL_GetTick>
 8008070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008074:	f7fa fbbc 	bl	80027f0 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e1ef      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008086:	4b22      	ldr	r3, [pc, #136]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCC_OscConfig+0x45c>
 8008092:	e018      	b.n	80080c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008098:	4a1d      	ldr	r2, [pc, #116]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a0:	f7fa fba6 	bl	80027f0 <HAL_GetTick>
 80080a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a8:	f7fa fba2 	bl	80027f0 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e1d5      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 80080bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f0      	bne.n	80080a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d039      	beq.n	8008146 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01c      	beq.n	8008114 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a0c      	ldr	r2, [pc, #48]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 80080e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080e6:	f7fa fb83 	bl	80027f0 <HAL_GetTick>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080ee:	f7fa fb7f 	bl	80027f0 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e1b2      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <HAL_RCC_OscConfig+0x4f8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0f0      	beq.n	80080ee <HAL_RCC_OscConfig+0x4d6>
 800810c:	e01b      	b.n	8008146 <HAL_RCC_OscConfig+0x52e>
 800810e:	bf00      	nop
 8008110:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008114:	4b9b      	ldr	r3, [pc, #620]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a9a      	ldr	r2, [pc, #616]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800811a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800811e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008120:	f7fa fb66 	bl	80027f0 <HAL_GetTick>
 8008124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008128:	f7fa fb62 	bl	80027f0 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e195      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800813a:	4b92      	ldr	r3, [pc, #584]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8081 	beq.w	8008256 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008154:	4b8c      	ldr	r3, [pc, #560]	; (8008388 <HAL_RCC_OscConfig+0x770>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a8b      	ldr	r2, [pc, #556]	; (8008388 <HAL_RCC_OscConfig+0x770>)
 800815a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800815e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008160:	f7fa fb46 	bl	80027f0 <HAL_GetTick>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008168:	f7fa fb42 	bl	80027f0 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	; 0x64
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e175      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800817a:	4b83      	ldr	r3, [pc, #524]	; (8008388 <HAL_RCC_OscConfig+0x770>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f0      	beq.n	8008168 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d106      	bne.n	800819c <HAL_RCC_OscConfig+0x584>
 800818e:	4b7d      	ldr	r3, [pc, #500]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	4a7c      	ldr	r2, [pc, #496]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6713      	str	r3, [r2, #112]	; 0x70
 800819a:	e02d      	b.n	80081f8 <HAL_RCC_OscConfig+0x5e0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10c      	bne.n	80081be <HAL_RCC_OscConfig+0x5a6>
 80081a4:	4b77      	ldr	r3, [pc, #476]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	4a76      	ldr	r2, [pc, #472]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	6713      	str	r3, [r2, #112]	; 0x70
 80081b0:	4b74      	ldr	r3, [pc, #464]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	4a73      	ldr	r2, [pc, #460]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081b6:	f023 0304 	bic.w	r3, r3, #4
 80081ba:	6713      	str	r3, [r2, #112]	; 0x70
 80081bc:	e01c      	b.n	80081f8 <HAL_RCC_OscConfig+0x5e0>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCC_OscConfig+0x5c8>
 80081c6:	4b6f      	ldr	r3, [pc, #444]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4a6e      	ldr	r2, [pc, #440]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081cc:	f043 0304 	orr.w	r3, r3, #4
 80081d0:	6713      	str	r3, [r2, #112]	; 0x70
 80081d2:	4b6c      	ldr	r3, [pc, #432]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	4a6b      	ldr	r2, [pc, #428]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	; 0x70
 80081de:	e00b      	b.n	80081f8 <HAL_RCC_OscConfig+0x5e0>
 80081e0:	4b68      	ldr	r3, [pc, #416]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4a67      	ldr	r2, [pc, #412]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	; 0x70
 80081ec:	4b65      	ldr	r3, [pc, #404]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4a64      	ldr	r2, [pc, #400]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80081f2:	f023 0304 	bic.w	r3, r3, #4
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d015      	beq.n	800822c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008200:	f7fa faf6 	bl	80027f0 <HAL_GetTick>
 8008204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008206:	e00a      	b.n	800821e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008208:	f7fa faf2 	bl	80027f0 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	f241 3288 	movw	r2, #5000	; 0x1388
 8008216:	4293      	cmp	r3, r2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e123      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800821e:	4b59      	ldr	r3, [pc, #356]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0ee      	beq.n	8008208 <HAL_RCC_OscConfig+0x5f0>
 800822a:	e014      	b.n	8008256 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822c:	f7fa fae0 	bl	80027f0 <HAL_GetTick>
 8008230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008232:	e00a      	b.n	800824a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008234:	f7fa fadc 	bl	80027f0 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e10d      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800824a:	4b4e      	ldr	r3, [pc, #312]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ee      	bne.n	8008234 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8102 	beq.w	8008464 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008260:	4b48      	ldr	r3, [pc, #288]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008268:	2b18      	cmp	r3, #24
 800826a:	f000 80bd 	beq.w	80083e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b02      	cmp	r3, #2
 8008274:	f040 809e 	bne.w	80083b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008278:	4b42      	ldr	r3, [pc, #264]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a41      	ldr	r2, [pc, #260]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800827e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fa fab4 	bl	80027f0 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800828c:	f7fa fab0 	bl	80027f0 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e0e3      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800829e:	4b39      	ldr	r3, [pc, #228]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f0      	bne.n	800828c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80082ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ae:	4b37      	ldr	r3, [pc, #220]	; (800838c <HAL_RCC_OscConfig+0x774>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082ba:	0112      	lsls	r2, r2, #4
 80082bc:	430a      	orrs	r2, r1
 80082be:	4931      	ldr	r1, [pc, #196]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	628b      	str	r3, [r1, #40]	; 0x28
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	3b01      	subs	r3, #1
 80082ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	3b01      	subs	r3, #1
 80082d4:	025b      	lsls	r3, r3, #9
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	3b01      	subs	r3, #1
 80082e0:	041b      	lsls	r3, r3, #16
 80082e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ec:	3b01      	subs	r3, #1
 80082ee:	061b      	lsls	r3, r3, #24
 80082f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082f4:	4923      	ldr	r1, [pc, #140]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80082fa:	4b22      	ldr	r3, [pc, #136]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	4a21      	ldr	r2, [pc, #132]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008306:	4b1f      	ldr	r3, [pc, #124]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830a:	4b21      	ldr	r3, [pc, #132]	; (8008390 <HAL_RCC_OscConfig+0x778>)
 800830c:	4013      	ands	r3, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008312:	00d2      	lsls	r2, r2, #3
 8008314:	491b      	ldr	r1, [pc, #108]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008316:	4313      	orrs	r3, r2
 8008318:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800831a:	4b1a      	ldr	r3, [pc, #104]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	f023 020c 	bic.w	r2, r3, #12
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	4917      	ldr	r1, [pc, #92]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008328:	4313      	orrs	r3, r2
 800832a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800832c:	4b15      	ldr	r3, [pc, #84]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f023 0202 	bic.w	r2, r3, #2
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008338:	4912      	ldr	r1, [pc, #72]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800833e:	4b11      	ldr	r3, [pc, #68]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4a10      	ldr	r2, [pc, #64]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008348:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834a:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 800835c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008362:	4b08      	ldr	r3, [pc, #32]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a07      	ldr	r2, [pc, #28]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a04      	ldr	r2, [pc, #16]	; (8008384 <HAL_RCC_OscConfig+0x76c>)
 8008374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837a:	f7fa fa39 	bl	80027f0 <HAL_GetTick>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008380:	e011      	b.n	80083a6 <HAL_RCC_OscConfig+0x78e>
 8008382:	bf00      	nop
 8008384:	58024400 	.word	0x58024400
 8008388:	58024800 	.word	0x58024800
 800838c:	fffffc0c 	.word	0xfffffc0c
 8008390:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008394:	f7fa fa2c 	bl	80027f0 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e05f      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083a6:	4b32      	ldr	r3, [pc, #200]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x77c>
 80083b2:	e057      	b.n	8008464 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b4:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fa fa16 	bl	80027f0 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c8:	f7fa fa12 	bl	80027f0 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e045      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083da:	4b25      	ldr	r3, [pc, #148]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x7b0>
 80083e6:	e03d      	b.n	8008464 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083e8:	4b21      	ldr	r3, [pc, #132]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083ee:	4b20      	ldr	r3, [pc, #128]	; (8008470 <HAL_RCC_OscConfig+0x858>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d031      	beq.n	8008460 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f003 0203 	and.w	r2, r3, #3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008406:	429a      	cmp	r2, r3
 8008408:	d12a      	bne.n	8008460 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008416:	429a      	cmp	r2, r3
 8008418:	d122      	bne.n	8008460 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008426:	429a      	cmp	r2, r3
 8008428:	d11a      	bne.n	8008460 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	0a5b      	lsrs	r3, r3, #9
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d111      	bne.n	8008460 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800844a:	429a      	cmp	r2, r3
 800844c:	d108      	bne.n	8008460 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	0e1b      	lsrs	r3, r3, #24
 8008452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800845c:	429a      	cmp	r2, r3
 800845e:	d001      	beq.n	8008464 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3730      	adds	r7, #48	; 0x30
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	58024400 	.word	0x58024400

08008474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e19c      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008488:	4b8a      	ldr	r3, [pc, #552]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d910      	bls.n	80084b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008496:	4b87      	ldr	r3, [pc, #540]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f023 020f 	bic.w	r2, r3, #15
 800849e:	4985      	ldr	r1, [pc, #532]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a6:	4b83      	ldr	r3, [pc, #524]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d001      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e184      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d010      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	4b7b      	ldr	r3, [pc, #492]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d908      	bls.n	80084e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084d4:	4b78      	ldr	r3, [pc, #480]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	4975      	ldr	r1, [pc, #468]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d010      	beq.n	8008514 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	4b70      	ldr	r3, [pc, #448]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084fe:	429a      	cmp	r2, r3
 8008500:	d908      	bls.n	8008514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008502:	4b6d      	ldr	r3, [pc, #436]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	496a      	ldr	r1, [pc, #424]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008510:	4313      	orrs	r3, r2
 8008512:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b64      	ldr	r3, [pc, #400]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800852c:	429a      	cmp	r2, r3
 800852e:	d908      	bls.n	8008542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008530:	4b61      	ldr	r3, [pc, #388]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	495e      	ldr	r1, [pc, #376]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 800853e:	4313      	orrs	r3, r2
 8008540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69da      	ldr	r2, [r3, #28]
 8008552:	4b59      	ldr	r3, [pc, #356]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800855a:	429a      	cmp	r2, r3
 800855c:	d908      	bls.n	8008570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800855e:	4b56      	ldr	r3, [pc, #344]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4953      	ldr	r1, [pc, #332]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 800856c:	4313      	orrs	r3, r2
 800856e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d010      	beq.n	800859e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	4b4d      	ldr	r3, [pc, #308]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	429a      	cmp	r2, r3
 800858a:	d908      	bls.n	800859e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800858c:	4b4a      	ldr	r3, [pc, #296]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f023 020f 	bic.w	r2, r3, #15
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	4947      	ldr	r1, [pc, #284]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 800859a:	4313      	orrs	r3, r2
 800859c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d055      	beq.n	8008656 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085aa:	4b43      	ldr	r3, [pc, #268]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	4940      	ldr	r1, [pc, #256]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d107      	bne.n	80085d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085c4:	4b3c      	ldr	r3, [pc, #240]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d121      	bne.n	8008614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e0f6      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d107      	bne.n	80085ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085dc:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d115      	bne.n	8008614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0ea      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d107      	bne.n	8008604 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085f4:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e0de      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008604:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e0d6      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008614:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f023 0207 	bic.w	r2, r3, #7
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4925      	ldr	r1, [pc, #148]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008622:	4313      	orrs	r3, r2
 8008624:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008626:	f7fa f8e3 	bl	80027f0 <HAL_GetTick>
 800862a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862c:	e00a      	b.n	8008644 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800862e:	f7fa f8df 	bl	80027f0 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	f241 3288 	movw	r2, #5000	; 0x1388
 800863c:	4293      	cmp	r3, r2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e0be      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	429a      	cmp	r2, r3
 8008654:	d1eb      	bne.n	800862e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d010      	beq.n	8008684 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	429a      	cmp	r2, r3
 8008670:	d208      	bcs.n	8008684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f023 020f 	bic.w	r2, r3, #15
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	490e      	ldr	r1, [pc, #56]	; (80086b8 <HAL_RCC_ClockConfig+0x244>)
 8008680:	4313      	orrs	r3, r2
 8008682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 030f 	and.w	r3, r3, #15
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d214      	bcs.n	80086bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f023 020f 	bic.w	r2, r3, #15
 800869a:	4906      	ldr	r1, [pc, #24]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	4313      	orrs	r3, r2
 80086a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086a2:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_RCC_ClockConfig+0x240>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 030f 	and.w	r3, r3, #15
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d005      	beq.n	80086bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e086      	b.n	80087c2 <HAL_RCC_ClockConfig+0x34e>
 80086b4:	52002000 	.word	0x52002000
 80086b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	4b3f      	ldr	r3, [pc, #252]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d208      	bcs.n	80086ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086d8:	4b3c      	ldr	r3, [pc, #240]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4939      	ldr	r1, [pc, #228]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d010      	beq.n	8008718 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695a      	ldr	r2, [r3, #20]
 80086fa:	4b34      	ldr	r3, [pc, #208]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008702:	429a      	cmp	r2, r3
 8008704:	d208      	bcs.n	8008718 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008706:	4b31      	ldr	r3, [pc, #196]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	492e      	ldr	r1, [pc, #184]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008714:	4313      	orrs	r3, r2
 8008716:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008730:	429a      	cmp	r2, r3
 8008732:	d208      	bcs.n	8008746 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008734:	4b25      	ldr	r3, [pc, #148]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	4922      	ldr	r1, [pc, #136]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008742:	4313      	orrs	r3, r2
 8008744:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d010      	beq.n	8008774 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800875e:	429a      	cmp	r2, r3
 8008760:	d208      	bcs.n	8008774 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008762:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	4917      	ldr	r1, [pc, #92]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008770:	4313      	orrs	r3, r2
 8008772:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008774:	f000 f834 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 8008778:	4602      	mov	r2, r0
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	4912      	ldr	r1, [pc, #72]	; (80087d0 <HAL_RCC_ClockConfig+0x35c>)
 8008786:	5ccb      	ldrb	r3, [r1, r3]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
 8008790:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008792:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <HAL_RCC_ClockConfig+0x358>)
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	4a0d      	ldr	r2, [pc, #52]	; (80087d0 <HAL_RCC_ClockConfig+0x35c>)
 800879c:	5cd3      	ldrb	r3, [r2, r3]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	fa22 f303 	lsr.w	r3, r2, r3
 80087a8:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <HAL_RCC_ClockConfig+0x360>)
 80087aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087ac:	4a0a      	ldr	r2, [pc, #40]	; (80087d8 <HAL_RCC_ClockConfig+0x364>)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <HAL_RCC_ClockConfig+0x368>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f9 ffd0 	bl	800275c <HAL_InitTick>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	58024400 	.word	0x58024400
 80087d0:	0800d458 	.word	0x0800d458
 80087d4:	24000034 	.word	0x24000034
 80087d8:	24000030 	.word	0x24000030
 80087dc:	24000038 	.word	0x24000038

080087e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087e6:	4bb3      	ldr	r3, [pc, #716]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087ee:	2b18      	cmp	r3, #24
 80087f0:	f200 8155 	bhi.w	8008a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	08008861 	.word	0x08008861
 8008800:	08008a9f 	.word	0x08008a9f
 8008804:	08008a9f 	.word	0x08008a9f
 8008808:	08008a9f 	.word	0x08008a9f
 800880c:	08008a9f 	.word	0x08008a9f
 8008810:	08008a9f 	.word	0x08008a9f
 8008814:	08008a9f 	.word	0x08008a9f
 8008818:	08008a9f 	.word	0x08008a9f
 800881c:	08008887 	.word	0x08008887
 8008820:	08008a9f 	.word	0x08008a9f
 8008824:	08008a9f 	.word	0x08008a9f
 8008828:	08008a9f 	.word	0x08008a9f
 800882c:	08008a9f 	.word	0x08008a9f
 8008830:	08008a9f 	.word	0x08008a9f
 8008834:	08008a9f 	.word	0x08008a9f
 8008838:	08008a9f 	.word	0x08008a9f
 800883c:	0800888d 	.word	0x0800888d
 8008840:	08008a9f 	.word	0x08008a9f
 8008844:	08008a9f 	.word	0x08008a9f
 8008848:	08008a9f 	.word	0x08008a9f
 800884c:	08008a9f 	.word	0x08008a9f
 8008850:	08008a9f 	.word	0x08008a9f
 8008854:	08008a9f 	.word	0x08008a9f
 8008858:	08008a9f 	.word	0x08008a9f
 800885c:	08008893 	.word	0x08008893
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008860:	4b94      	ldr	r3, [pc, #592]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800886c:	4b91      	ldr	r3, [pc, #580]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	08db      	lsrs	r3, r3, #3
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	4a90      	ldr	r2, [pc, #576]	; (8008ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800887e:	e111      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008880:	4b8d      	ldr	r3, [pc, #564]	; (8008ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008882:	61bb      	str	r3, [r7, #24]
    break;
 8008884:	e10e      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008886:	4b8d      	ldr	r3, [pc, #564]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008888:	61bb      	str	r3, [r7, #24]
    break;
 800888a:	e10b      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800888c:	4b8c      	ldr	r3, [pc, #560]	; (8008ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800888e:	61bb      	str	r3, [r7, #24]
    break;
 8008890:	e108      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008892:	4b88      	ldr	r3, [pc, #544]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800889c:	4b85      	ldr	r3, [pc, #532]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088a8:	4b82      	ldr	r3, [pc, #520]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80088b2:	4b80      	ldr	r3, [pc, #512]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b6:	08db      	lsrs	r3, r3, #3
 80088b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80e1 	beq.w	8008a98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	f000 8083 	beq.w	80089e4 <HAL_RCC_GetSysClockFreq+0x204>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f200 80a1 	bhi.w	8008a28 <HAL_RCC_GetSysClockFreq+0x248>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_RCC_GetSysClockFreq+0x114>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d056      	beq.n	80089a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80088f2:	e099      	b.n	8008a28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f4:	4b6f      	ldr	r3, [pc, #444]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02d      	beq.n	800895c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008900:	4b6c      	ldr	r3, [pc, #432]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	08db      	lsrs	r3, r3, #3
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	4a6b      	ldr	r2, [pc, #428]	; (8008ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800890c:	fa22 f303 	lsr.w	r3, r2, r3
 8008910:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892a:	4b62      	ldr	r3, [pc, #392]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893a:	ed97 6a02 	vldr	s12, [r7, #8]
 800893e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800895a:	e087      	b.n	8008a6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800896a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896e:	4b51      	ldr	r3, [pc, #324]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008982:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800898e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800899e:	e065      	b.n	8008a6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80089ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b2:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089e2:	e043      	b.n	8008a6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80089f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f6:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a26:	e021      	b.n	8008a6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3a:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	0a5b      	lsrs	r3, r3, #9
 8008a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a76:	3301      	adds	r3, #1
 8008a78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a90:	ee17 3a90 	vmov	r3, s15
 8008a94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a96:	e005      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61bb      	str	r3, [r7, #24]
    break;
 8008a9c:	e002      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008a9e:	4b07      	ldr	r3, [pc, #28]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aa0:	61bb      	str	r3, [r7, #24]
    break;
 8008aa2:	bf00      	nop
  }

  return sysclockfreq;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3724      	adds	r7, #36	; 0x24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	03d09000 	.word	0x03d09000
 8008abc:	003d0900 	.word	0x003d0900
 8008ac0:	017d7840 	.word	0x017d7840
 8008ac4:	46000000 	.word	0x46000000
 8008ac8:	4c742400 	.word	0x4c742400
 8008acc:	4a742400 	.word	0x4a742400
 8008ad0:	4bbebc20 	.word	0x4bbebc20

08008ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ada:	f7ff fe81 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	490f      	ldr	r1, [pc, #60]	; (8008b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008aec:	5ccb      	ldrb	r3, [r1, r3]
 8008aee:	f003 031f 	and.w	r3, r3, #31
 8008af2:	fa22 f303 	lsr.w	r3, r2, r3
 8008af6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b02:	5cd3      	ldrb	r3, [r2, r3]
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0e:	4a07      	ldr	r2, [pc, #28]	; (8008b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b12:	4a07      	ldr	r2, [pc, #28]	; (8008b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	58024400 	.word	0x58024400
 8008b28:	0800d458 	.word	0x0800d458
 8008b2c:	24000034 	.word	0x24000034
 8008b30:	24000030 	.word	0x24000030

08008b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b38:	f7ff ffcc 	bl	8008ad4 <HAL_RCC_GetHCLKFreq>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	091b      	lsrs	r3, r3, #4
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	4904      	ldr	r1, [pc, #16]	; (8008b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b4a:	5ccb      	ldrb	r3, [r1, r3]
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	58024400 	.word	0x58024400
 8008b5c:	0800d458 	.word	0x0800d458

08008b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b64:	f7ff ffb6 	bl	8008ad4 <HAL_RCC_GetHCLKFreq>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	4904      	ldr	r1, [pc, #16]	; (8008b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b76:	5ccb      	ldrb	r3, [r1, r3]
 8008b78:	f003 031f 	and.w	r3, r3, #31
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	58024400 	.word	0x58024400
 8008b88:	0800d458 	.word	0x0800d458

08008b8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d03f      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bb0:	d02a      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bb6:	d824      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bbc:	d018      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc2:	d81e      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bcc:	d007      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008bce:	e018      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd0:	4ba3      	ldr	r3, [pc, #652]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4aa2      	ldr	r2, [pc, #648]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bdc:	e015      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	2102      	movs	r1, #2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f9d5 	bl	8009f94 <RCCEx_PLL2_Config>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bee:	e00c      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3324      	adds	r3, #36	; 0x24
 8008bf4:	2102      	movs	r1, #2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fa7e 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c00:	e003      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]
      break;
 8008c06:	e000      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c10:	4b93      	ldr	r3, [pc, #588]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c1c:	4990      	ldr	r1, [pc, #576]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	650b      	str	r3, [r1, #80]	; 0x50
 8008c22:	e001      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03d      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d826      	bhi.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c59 	.word	0x08008c59
 8008c48:	08008c67 	.word	0x08008c67
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	08008c91 	.word	0x08008c91
 8008c54:	08008c91 	.word	0x08008c91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c58:	4b81      	ldr	r3, [pc, #516]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a80      	ldr	r2, [pc, #512]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c64:	e015      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 f991 	bl	8009f94 <RCCEx_PLL2_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c76:	e00c      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3324      	adds	r3, #36	; 0x24
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fa3a 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c88:	e003      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8e:	e000      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c98:	4b71      	ldr	r3, [pc, #452]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9c:	f023 0207 	bic.w	r2, r3, #7
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca4:	496e      	ldr	r1, [pc, #440]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8008caa:	e001      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d042      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc4:	d02b      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cca:	d825      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ccc:	2bc0      	cmp	r3, #192	; 0xc0
 8008cce:	d028      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008cd0:	2bc0      	cmp	r3, #192	; 0xc0
 8008cd2:	d821      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008cd4:	2b80      	cmp	r3, #128	; 0x80
 8008cd6:	d016      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008cd8:	2b80      	cmp	r3, #128	; 0x80
 8008cda:	d81d      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d007      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008ce4:	e018      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce6:	4b5e      	ldr	r3, [pc, #376]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	4a5d      	ldr	r2, [pc, #372]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008cf2:	e017      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 f94a 	bl	8009f94 <RCCEx_PLL2_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d04:	e00e      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3324      	adds	r3, #36	; 0x24
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f9f3 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d16:	e005      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1c:	e002      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d2a:	4b4d      	ldr	r3, [pc, #308]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d36:	494a      	ldr	r1, [pc, #296]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	650b      	str	r3, [r1, #80]	; 0x50
 8008d3c:	e001      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d049      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d58:	d030      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d5e:	d82a      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d64:	d02c      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008d66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d6a:	d824      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d70:	d018      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d76:	d81e      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d80:	d007      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d82:	e018      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b36      	ldr	r3, [pc, #216]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a35      	ldr	r2, [pc, #212]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d90:	e017      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3304      	adds	r3, #4
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f8fb 	bl	8009f94 <RCCEx_PLL2_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008da2:	e00e      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 f9a4 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008db4:	e005      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dc8:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dd6:	4922      	ldr	r1, [pc, #136]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	658b      	str	r3, [r1, #88]	; 0x58
 8008ddc:	e001      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d04b      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008df8:	d030      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dfe:	d82a      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e04:	d02e      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008e06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e0a:	d824      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e10:	d018      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e16:	d81e      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e20:	d007      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e22:	e018      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a0d      	ldr	r2, [pc, #52]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e30:	e019      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3304      	adds	r3, #4
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 f8ab 	bl	8009f94 <RCCEx_PLL2_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e42:	e010      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3324      	adds	r3, #36	; 0x24
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 f954 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e54:	e007      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5a:	e004      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e002      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008e60:	58024400 	.word	0x58024400
      break;
 8008e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e6c:	4b99      	ldr	r3, [pc, #612]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e7a:	4996      	ldr	r1, [pc, #600]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	658b      	str	r3, [r1, #88]	; 0x58
 8008e80:	e001      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d032      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e96:	2b30      	cmp	r3, #48	; 0x30
 8008e98:	d01c      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008e9a:	2b30      	cmp	r3, #48	; 0x30
 8008e9c:	d817      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d00c      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	d813      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d016      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008eaa:	2b10      	cmp	r3, #16
 8008eac:	d10f      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eae:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a88      	ldr	r2, [pc, #544]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008eba:	e00e      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	2102      	movs	r1, #2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 f866 	bl	8009f94 <RCCEx_PLL2_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008ecc:	e005      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed2:	e002      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ee0:	4b7c      	ldr	r3, [pc, #496]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eec:	4979      	ldr	r1, [pc, #484]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ef2:	e001      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d047      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f0c:	d030      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f12:	d82a      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f18:	d02c      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008f1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f1e:	d824      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f24:	d018      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f2a:	d81e      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f34:	d007      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008f36:	e018      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4b66      	ldr	r3, [pc, #408]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4a65      	ldr	r2, [pc, #404]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f44:	e017      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 f821 	bl	8009f94 <RCCEx_PLL2_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f56:	e00e      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3324      	adds	r3, #36	; 0x24
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 f8ca 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f68:	e005      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6e:	e002      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008f70:	bf00      	nop
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f7c:	4b55      	ldr	r3, [pc, #340]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f88:	4952      	ldr	r1, [pc, #328]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f8e:	e001      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d049      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fa8:	d02e      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fae:	d828      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fb4:	d02a      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fba:	d822      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008fbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fc0:	d026      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008fc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fc6:	d81c      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fcc:	d010      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd2:	d816      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01d      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fdc:	d111      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 ffd5 	bl	8009f94 <RCCEx_PLL2_Config>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008fee:	e012      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3324      	adds	r3, #36	; 0x24
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f87e 	bl	800a0f8 <RCCEx_PLL3_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009000:	e009      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	e006      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009008:	bf00      	nop
 800900a:	e004      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800900c:	bf00      	nop
 800900e:	e002      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009010:	bf00      	nop
 8009012:	e000      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009028:	492a      	ldr	r1, [pc, #168]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800902a:	4313      	orrs	r3, r2
 800902c:	650b      	str	r3, [r1, #80]	; 0x50
 800902e:	e001      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d04d      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800904a:	d02e      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800904c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009050:	d828      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009056:	d02a      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905c:	d822      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800905e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009062:	d026      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009068:	d81c      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906e:	d010      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009074:	d816      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01d      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800907a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800907e:	d111      	bne.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3304      	adds	r3, #4
 8009084:	2101      	movs	r1, #1
 8009086:	4618      	mov	r0, r3
 8009088:	f000 ff84 	bl	8009f94 <RCCEx_PLL2_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009090:	e012      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3324      	adds	r3, #36	; 0x24
 8009096:	2101      	movs	r1, #1
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f82d 	bl	800a0f8 <RCCEx_PLL3_Config>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090a2:	e009      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
      break;
 80090a8:	e006      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80090aa:	bf00      	nop
 80090ac:	e004      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80090ae:	bf00      	nop
 80090b0:	e002      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80090b2:	bf00      	nop
 80090b4:	e000      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80090b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10c      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090cc:	4901      	ldr	r1, [pc, #4]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	658b      	str	r3, [r1, #88]	; 0x58
 80090d2:	e003      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80090d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d02f      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f0:	d00e      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80090f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f6:	d814      	bhi.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d015      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80090fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009100:	d10f      	bne.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009102:	4baf      	ldr	r3, [pc, #700]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4aae      	ldr	r2, [pc, #696]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800910e:	e00c      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	2101      	movs	r1, #1
 8009116:	4618      	mov	r0, r3
 8009118:	f000 ff3c 	bl	8009f94 <RCCEx_PLL2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009120:	e003      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	75fb      	strb	r3, [r7, #23]
      break;
 8009126:	e000      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009130:	4ba3      	ldr	r3, [pc, #652]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	49a0      	ldr	r1, [pc, #640]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800913e:	4313      	orrs	r3, r2
 8009140:	650b      	str	r3, [r1, #80]	; 0x50
 8009142:	e001      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d032      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009158:	2b03      	cmp	r3, #3
 800915a:	d81b      	bhi.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800915c:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	0800919b 	.word	0x0800919b
 8009168:	08009175 	.word	0x08009175
 800916c:	08009183 	.word	0x08009183
 8009170:	0800919b 	.word	0x0800919b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009174:	4b92      	ldr	r3, [pc, #584]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	4a91      	ldr	r2, [pc, #580]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800917a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009180:	e00c      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3304      	adds	r3, #4
 8009186:	2102      	movs	r1, #2
 8009188:	4618      	mov	r0, r3
 800918a:	f000 ff03 	bl	8009f94 <RCCEx_PLL2_Config>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
      break;
 8009198:	e000      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800919a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091a2:	4b87      	ldr	r3, [pc, #540]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	f023 0203 	bic.w	r2, r3, #3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	4984      	ldr	r1, [pc, #528]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091b4:	e001      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8086 	beq.w	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091c8:	4b7e      	ldr	r3, [pc, #504]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7d      	ldr	r2, [pc, #500]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80091ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091d4:	f7f9 fb0c 	bl	80027f0 <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091da:	e009      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091dc:	f7f9 fb08 	bl	80027f0 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b64      	cmp	r3, #100	; 0x64
 80091e8:	d902      	bls.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	75fb      	strb	r3, [r7, #23]
        break;
 80091ee:	e005      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091f0:	4b74      	ldr	r3, [pc, #464]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0ef      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d166      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009202:	4b6f      	ldr	r3, [pc, #444]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800920c:	4053      	eors	r3, r2
 800920e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009212:	2b00      	cmp	r3, #0
 8009214:	d013      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009216:	4b6a      	ldr	r3, [pc, #424]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800921e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009220:	4b67      	ldr	r3, [pc, #412]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009224:	4a66      	ldr	r2, [pc, #408]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800922a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800922c:	4b64      	ldr	r3, [pc, #400]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009230:	4a63      	ldr	r2, [pc, #396]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009236:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009238:	4a61      	ldr	r2, [pc, #388]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009248:	d115      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924a:	f7f9 fad1 	bl	80027f0 <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009250:	e00b      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009252:	f7f9 facd 	bl	80027f0 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009260:	4293      	cmp	r3, r2
 8009262:	d902      	bls.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	75fb      	strb	r3, [r7, #23]
            break;
 8009268:	e005      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800926a:	4b55      	ldr	r3, [pc, #340]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0ed      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d126      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800928a:	d10d      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800928c:	4b4c      	ldr	r3, [pc, #304]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800929a:	0919      	lsrs	r1, r3, #4
 800929c:	4b4a      	ldr	r3, [pc, #296]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800929e:	400b      	ands	r3, r1
 80092a0:	4947      	ldr	r1, [pc, #284]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	610b      	str	r3, [r1, #16]
 80092a6:	e005      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80092a8:	4b45      	ldr	r3, [pc, #276]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	4a44      	ldr	r2, [pc, #272]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092b2:	6113      	str	r3, [r2, #16]
 80092b4:	4b42      	ldr	r3, [pc, #264]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c2:	493f      	ldr	r1, [pc, #252]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	670b      	str	r3, [r1, #112]	; 0x70
 80092c8:	e004      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	75bb      	strb	r3, [r7, #22]
 80092ce:	e001      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 8085 	beq.w	80093ec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e6:	2b28      	cmp	r3, #40	; 0x28
 80092e8:	d866      	bhi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80092ea:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f0:	080093cd 	.word	0x080093cd
 80092f4:	080093b9 	.word	0x080093b9
 80092f8:	080093b9 	.word	0x080093b9
 80092fc:	080093b9 	.word	0x080093b9
 8009300:	080093b9 	.word	0x080093b9
 8009304:	080093b9 	.word	0x080093b9
 8009308:	080093b9 	.word	0x080093b9
 800930c:	080093b9 	.word	0x080093b9
 8009310:	08009395 	.word	0x08009395
 8009314:	080093b9 	.word	0x080093b9
 8009318:	080093b9 	.word	0x080093b9
 800931c:	080093b9 	.word	0x080093b9
 8009320:	080093b9 	.word	0x080093b9
 8009324:	080093b9 	.word	0x080093b9
 8009328:	080093b9 	.word	0x080093b9
 800932c:	080093b9 	.word	0x080093b9
 8009330:	080093a7 	.word	0x080093a7
 8009334:	080093b9 	.word	0x080093b9
 8009338:	080093b9 	.word	0x080093b9
 800933c:	080093b9 	.word	0x080093b9
 8009340:	080093b9 	.word	0x080093b9
 8009344:	080093b9 	.word	0x080093b9
 8009348:	080093b9 	.word	0x080093b9
 800934c:	080093b9 	.word	0x080093b9
 8009350:	080093cd 	.word	0x080093cd
 8009354:	080093b9 	.word	0x080093b9
 8009358:	080093b9 	.word	0x080093b9
 800935c:	080093b9 	.word	0x080093b9
 8009360:	080093b9 	.word	0x080093b9
 8009364:	080093b9 	.word	0x080093b9
 8009368:	080093b9 	.word	0x080093b9
 800936c:	080093b9 	.word	0x080093b9
 8009370:	080093cd 	.word	0x080093cd
 8009374:	080093b9 	.word	0x080093b9
 8009378:	080093b9 	.word	0x080093b9
 800937c:	080093b9 	.word	0x080093b9
 8009380:	080093b9 	.word	0x080093b9
 8009384:	080093b9 	.word	0x080093b9
 8009388:	080093b9 	.word	0x080093b9
 800938c:	080093b9 	.word	0x080093b9
 8009390:	080093cd 	.word	0x080093cd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3304      	adds	r3, #4
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fdfa 	bl	8009f94 <RCCEx_PLL2_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093a4:	e013      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3324      	adds	r3, #36	; 0x24
 80093aa:	2101      	movs	r1, #1
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 fea3 	bl	800a0f8 <RCCEx_PLL3_Config>
 80093b2:	4603      	mov	r3, r0
 80093b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093b6:	e00a      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
      break;
 80093bc:	e007      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	58024800 	.word	0x58024800
 80093c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80093cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80093d4:	4b96      	ldr	r3, [pc, #600]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e0:	4993      	ldr	r1, [pc, #588]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	654b      	str	r3, [r1, #84]	; 0x54
 80093e6:	e001      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d038      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fc:	2b05      	cmp	r3, #5
 80093fe:	d821      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	0800944b 	.word	0x0800944b
 800940c:	08009421 	.word	0x08009421
 8009410:	08009433 	.word	0x08009433
 8009414:	0800944b 	.word	0x0800944b
 8009418:	0800944b 	.word	0x0800944b
 800941c:	0800944b 	.word	0x0800944b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	2101      	movs	r1, #1
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fdb4 	bl	8009f94 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009430:	e00c      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2101      	movs	r1, #1
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fe5d 	bl	800a0f8 <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009442:	e003      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800944a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009452:	4b77      	ldr	r3, [pc, #476]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009456:	f023 0207 	bic.w	r2, r3, #7
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945e:	4974      	ldr	r1, [pc, #464]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009460:	4313      	orrs	r3, r2
 8009462:	654b      	str	r3, [r1, #84]	; 0x54
 8009464:	e001      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d03a      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947c:	2b05      	cmp	r3, #5
 800947e:	d821      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	080094cb 	.word	0x080094cb
 800948c:	080094a1 	.word	0x080094a1
 8009490:	080094b3 	.word	0x080094b3
 8009494:	080094cb 	.word	0x080094cb
 8009498:	080094cb 	.word	0x080094cb
 800949c:	080094cb 	.word	0x080094cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3304      	adds	r3, #4
 80094a4:	2101      	movs	r1, #1
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd74 	bl	8009f94 <RCCEx_PLL2_Config>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094b0:	e00c      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3324      	adds	r3, #36	; 0x24
 80094b6:	2101      	movs	r1, #1
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fe1d 	bl	800a0f8 <RCCEx_PLL3_Config>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
      break;
 80094c8:	e000      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80094ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094d2:	4b57      	ldr	r3, [pc, #348]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d6:	f023 0207 	bic.w	r2, r3, #7
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e0:	4953      	ldr	r1, [pc, #332]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	658b      	str	r3, [r1, #88]	; 0x58
 80094e6:	e001      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d04b      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009502:	d02e      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009508:	d828      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800950a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950e:	d02a      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009514:	d822      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800951a:	d026      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800951c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009520:	d81c      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009526:	d010      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952c:	d816      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01d      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009536:	d111      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3304      	adds	r3, #4
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fd28 	bl	8009f94 <RCCEx_PLL2_Config>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009548:	e012      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3324      	adds	r3, #36	; 0x24
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fdd1 	bl	800a0f8 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800955a:	e009      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
      break;
 8009560:	e006      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009562:	bf00      	nop
 8009564:	e004      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800956a:	bf00      	nop
 800956c:	e000      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800956e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009576:	4b2e      	ldr	r3, [pc, #184]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009584:	492a      	ldr	r1, [pc, #168]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009586:	4313      	orrs	r3, r2
 8009588:	654b      	str	r3, [r1, #84]	; 0x54
 800958a:	e001      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d04d      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095a6:	d02e      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80095a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095ac:	d828      	bhi.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80095ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095b2:	d02a      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80095b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095b8:	d822      	bhi.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80095ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095be:	d026      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80095c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095c4:	d81c      	bhi.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80095c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ca:	d010      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80095cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095d0:	d816      	bhi.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01d      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80095d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095da:	d111      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3304      	adds	r3, #4
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fcd6 	bl	8009f94 <RCCEx_PLL2_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80095ec:	e012      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3324      	adds	r3, #36	; 0x24
 80095f2:	2102      	movs	r1, #2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fd7f 	bl	800a0f8 <RCCEx_PLL3_Config>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80095fe:	e009      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
      break;
 8009604:	e006      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009606:	bf00      	nop
 8009608:	e004      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800960a:	bf00      	nop
 800960c:	e002      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800960e:	bf00      	nop
 8009610:	e000      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009614:	7dfb      	ldrb	r3, [r7, #23]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10c      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800961c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009628:	4901      	ldr	r1, [pc, #4]	; (8009630 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800962a:	4313      	orrs	r3, r2
 800962c:	658b      	str	r3, [r1, #88]	; 0x58
 800962e:	e003      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009640:	2b00      	cmp	r3, #0
 8009642:	d04b      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800964a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800964e:	d02e      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009650:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009654:	d828      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800965a:	d02a      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800965c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009660:	d822      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009662:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009666:	d026      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009668:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800966c:	d81c      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800966e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009672:	d010      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	d816      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01d      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800967e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009682:	d111      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fc82 	bl	8009f94 <RCCEx_PLL2_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009694:	e012      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3324      	adds	r3, #36	; 0x24
 800969a:	2102      	movs	r1, #2
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fd2b 	bl	800a0f8 <RCCEx_PLL3_Config>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096a6:	e009      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
      break;
 80096ac:	e006      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80096ae:	bf00      	nop
 80096b0:	e004      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80096b2:	bf00      	nop
 80096b4:	e002      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80096ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10a      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096c2:	4b9d      	ldr	r3, [pc, #628]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096d0:	4999      	ldr	r1, [pc, #612]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	658b      	str	r3, [r1, #88]	; 0x58
 80096d6:	e001      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01a      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f2:	d10a      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	2102      	movs	r1, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fcfc 	bl	800a0f8 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800970a:	4b8b      	ldr	r3, [pc, #556]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800970c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009718:	4987      	ldr	r1, [pc, #540]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800971a:	4313      	orrs	r3, r2
 800971c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01a      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009734:	d10a      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3324      	adds	r3, #36	; 0x24
 800973a:	2102      	movs	r1, #2
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fcdb 	bl	800a0f8 <RCCEx_PLL3_Config>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800974c:	4b7a      	ldr	r3, [pc, #488]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800975a:	4977      	ldr	r1, [pc, #476]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800975c:	4313      	orrs	r3, r2
 800975e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d034      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009776:	d01d      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800977c:	d817      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009786:	d009      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009788:	e011      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fbff 	bl	8009f94 <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800979a:	e00c      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	2102      	movs	r1, #2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fca8 	bl	800a0f8 <RCCEx_PLL3_Config>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
      break;
 80097b2:	e000      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80097b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097bc:	4b5e      	ldr	r3, [pc, #376]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097ca:	495b      	ldr	r1, [pc, #364]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	658b      	str	r3, [r1, #88]	; 0x58
 80097d0:	e001      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d033      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097ec:	d01c      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80097ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097f2:	d816      	bhi.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80097f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f8:	d003      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80097fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097fe:	d007      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009800:	e00f      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009802:	4b4d      	ldr	r3, [pc, #308]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	4a4c      	ldr	r2, [pc, #304]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800980e:	e00c      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3324      	adds	r3, #36	; 0x24
 8009814:	2101      	movs	r1, #1
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fc6e 	bl	800a0f8 <RCCEx_PLL3_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009820:	e003      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
      break;
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009830:	4b41      	ldr	r3, [pc, #260]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800983e:	493e      	ldr	r1, [pc, #248]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009840:	4313      	orrs	r3, r2
 8009842:	654b      	str	r3, [r1, #84]	; 0x54
 8009844:	e001      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d029      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800985e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009862:	d007      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009864:	e00f      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009866:	4b34      	ldr	r3, [pc, #208]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	4a33      	ldr	r2, [pc, #204]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800986c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009872:	e00b      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	2102      	movs	r1, #2
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fb8a 	bl	8009f94 <RCCEx_PLL2_Config>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009884:	e002      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
      break;
 800988a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009892:	4b29      	ldr	r3, [pc, #164]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009896:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989e:	4926      	ldr	r1, [pc, #152]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098a4:	e001      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3324      	adds	r3, #36	; 0x24
 80098ba:	2102      	movs	r1, #2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fc1b 	bl	800a0f8 <RCCEx_PLL3_Config>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d033      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e0:	d017      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80098e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e6:	d811      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80098e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ec:	d013      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80098ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f2:	d80b      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d010      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80098f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098fc:	d106      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fe:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009902:	4a0d      	ldr	r2, [pc, #52]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800990a:	e007      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	75fb      	strb	r3, [r7, #23]
      break;
 8009910:	e004      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009912:	bf00      	nop
 8009914:	e002      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800991a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10c      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992e:	4902      	ldr	r1, [pc, #8]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009930:	4313      	orrs	r3, r2
 8009932:	654b      	str	r3, [r1, #84]	; 0x54
 8009934:	e004      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009936:	bf00      	nop
 8009938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800994c:	4b31      	ldr	r3, [pc, #196]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800994e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	492e      	ldr	r1, [pc, #184]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800995a:	4313      	orrs	r3, r2
 800995c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d009      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800996a:	4b2a      	ldr	r3, [pc, #168]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009978:	4926      	ldr	r1, [pc, #152]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800997a:	4313      	orrs	r3, r2
 800997c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d008      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800998a:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800998c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009996:	491f      	ldr	r1, [pc, #124]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009998:	4313      	orrs	r3, r2
 800999a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099b2:	6113      	str	r3, [r2, #16]
 80099b4:	4b17      	ldr	r3, [pc, #92]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099b6:	691a      	ldr	r2, [r3, #16]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099be:	4915      	ldr	r1, [pc, #84]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da08      	bge.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099cc:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d8:	490e      	ldr	r1, [pc, #56]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f8:	4906      	ldr	r1, [pc, #24]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80099fe:	7dbb      	ldrb	r3, [r7, #22]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	58024400 	.word	0x58024400

08009a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a1c:	f7ff f85a 	bl	8008ad4 <HAL_RCC_GetHCLKFreq>
 8009a20:	4602      	mov	r2, r0
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	091b      	lsrs	r3, r3, #4
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	4904      	ldr	r1, [pc, #16]	; (8009a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a2e:	5ccb      	ldrb	r3, [r1, r3]
 8009a30:	f003 031f 	and.w	r3, r3, #31
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	0800d458 	.word	0x0800d458

08009a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b089      	sub	sp, #36	; 0x24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a4c:	4ba1      	ldr	r3, [pc, #644]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	f003 0303 	and.w	r3, r3, #3
 8009a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a56:	4b9f      	ldr	r3, [pc, #636]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	0b1b      	lsrs	r3, r3, #12
 8009a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a62:	4b9c      	ldr	r3, [pc, #624]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	091b      	lsrs	r3, r3, #4
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a6e:	4b99      	ldr	r3, [pc, #612]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8111 	beq.w	8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f000 8083 	beq.w	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	f200 80a1 	bhi.w	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d056      	beq.n	8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009aae:	e099      	b.n	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab0:	4b88      	ldr	r3, [pc, #544]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02d      	beq.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009abc:	4b85      	ldr	r3, [pc, #532]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	08db      	lsrs	r3, r3, #3
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	4a84      	ldr	r2, [pc, #528]	; (8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b7b      	ldr	r3, [pc, #492]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b16:	e087      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b6a      	ldr	r3, [pc, #424]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b5a:	e065      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b59      	ldr	r3, [pc, #356]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b9e:	e043      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b48      	ldr	r3, [pc, #288]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be2:	e021      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c28:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	0a5b      	lsrs	r3, r3, #9
 8009c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c4e:	ee17 2a90 	vmov	r2, s15
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c56:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7c:	ee17 2a90 	vmov	r2, s15
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c84:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009caa:	ee17 2a90 	vmov	r2, s15
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	609a      	str	r2, [r3, #8]
}
 8009cc6:	bf00      	nop
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	46000000 	.word	0x46000000
 8009ce0:	4c742400 	.word	0x4c742400
 8009ce4:	4a742400 	.word	0x4a742400
 8009ce8:	4bbebc20 	.word	0x4bbebc20

08009cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	; 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cf4:	4ba1      	ldr	r3, [pc, #644]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009cfe:	4b9f      	ldr	r3, [pc, #636]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d02:	0d1b      	lsrs	r3, r3, #20
 8009d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d0a:	4b9c      	ldr	r3, [pc, #624]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d16:	4b99      	ldr	r3, [pc, #612]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8111 	beq.w	8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	f000 8083 	beq.w	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f200 80a1 	bhi.w	8009e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d056      	beq.n	8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d56:	e099      	b.n	8009e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d58:	4b88      	ldr	r3, [pc, #544]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02d      	beq.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d64:	4b85      	ldr	r3, [pc, #532]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	08db      	lsrs	r3, r3, #3
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	4a84      	ldr	r2, [pc, #528]	; (8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d70:	fa22 f303 	lsr.w	r3, r2, r3
 8009d74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b7b      	ldr	r3, [pc, #492]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009dbe:	e087      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b6a      	ldr	r3, [pc, #424]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e02:	e065      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b59      	ldr	r3, [pc, #356]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e46:	e043      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b48      	ldr	r3, [pc, #288]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e8a:	e021      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9e:	4b37      	ldr	r3, [pc, #220]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ed0:	4b2a      	ldr	r3, [pc, #168]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 2a90 	vmov	r2, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009efe:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	0c1b      	lsrs	r3, r3, #16
 8009f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 2a90 	vmov	r2, s15
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f2c:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	0e1b      	lsrs	r3, r3, #24
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f52:	ee17 2a90 	vmov	r2, s15
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f5a:	e008      	b.n	8009f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	3724      	adds	r7, #36	; 0x24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	03d09000 	.word	0x03d09000
 8009f84:	46000000 	.word	0x46000000
 8009f88:	4c742400 	.word	0x4c742400
 8009f8c:	4a742400 	.word	0x4a742400
 8009f90:	4bbebc20 	.word	0x4bbebc20

08009f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fa2:	4b53      	ldr	r3, [pc, #332]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d101      	bne.n	8009fb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e099      	b.n	800a0e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fb2:	4b4f      	ldr	r3, [pc, #316]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a4e      	ldr	r2, [pc, #312]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fbe:	f7f8 fc17 	bl	80027f0 <HAL_GetTick>
 8009fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fc4:	e008      	b.n	8009fd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fc6:	f7f8 fc13 	bl	80027f0 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d901      	bls.n	8009fd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e086      	b.n	800a0e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fd8:	4b45      	ldr	r3, [pc, #276]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1f0      	bne.n	8009fc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fe4:	4b42      	ldr	r3, [pc, #264]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	031b      	lsls	r3, r3, #12
 8009ff2:	493f      	ldr	r1, [pc, #252]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	628b      	str	r3, [r1, #40]	; 0x28
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	3b01      	subs	r3, #1
 800a008:	025b      	lsls	r3, r3, #9
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	431a      	orrs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	3b01      	subs	r3, #1
 800a014:	041b      	lsls	r3, r3, #16
 800a016:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	061b      	lsls	r3, r3, #24
 800a024:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a028:	4931      	ldr	r1, [pc, #196]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a02e:	4b30      	ldr	r3, [pc, #192]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	492d      	ldr	r1, [pc, #180]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a040:	4b2b      	ldr	r3, [pc, #172]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	f023 0220 	bic.w	r2, r3, #32
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	4928      	ldr	r1, [pc, #160]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a052:	4b27      	ldr	r3, [pc, #156]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	4a26      	ldr	r2, [pc, #152]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a05e:	4b24      	ldr	r3, [pc, #144]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a062:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <RCCEx_PLL2_Config+0x160>)
 800a064:	4013      	ands	r3, r2
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	69d2      	ldr	r2, [r2, #28]
 800a06a:	00d2      	lsls	r2, r2, #3
 800a06c:	4920      	ldr	r1, [pc, #128]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a072:	4b1f      	ldr	r3, [pc, #124]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	4a1e      	ldr	r2, [pc, #120]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a078:	f043 0310 	orr.w	r3, r3, #16
 800a07c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a084:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	4a19      	ldr	r2, [pc, #100]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a08a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a08e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a090:	e00f      	b.n	800a0b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d106      	bne.n	800a0a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a098:	4b15      	ldr	r3, [pc, #84]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	4a14      	ldr	r2, [pc, #80]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a09e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0a4:	e005      	b.n	800a0b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a0e      	ldr	r2, [pc, #56]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0be:	f7f8 fb97 	bl	80027f0 <HAL_GetTick>
 800a0c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0c4:	e008      	b.n	800a0d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0c6:	f7f8 fb93 	bl	80027f0 <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d901      	bls.n	800a0d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e006      	b.n	800a0e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0f0      	beq.n	800a0c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	58024400 	.word	0x58024400
 800a0f4:	ffff0007 	.word	0xffff0007

0800a0f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a106:	4b53      	ldr	r3, [pc, #332]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d101      	bne.n	800a116 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e099      	b.n	800a24a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a116:	4b4f      	ldr	r3, [pc, #316]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a4e      	ldr	r2, [pc, #312]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a11c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a122:	f7f8 fb65 	bl	80027f0 <HAL_GetTick>
 800a126:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a128:	e008      	b.n	800a13c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a12a:	f7f8 fb61 	bl	80027f0 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b02      	cmp	r3, #2
 800a136:	d901      	bls.n	800a13c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e086      	b.n	800a24a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a13c:	4b45      	ldr	r3, [pc, #276]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f0      	bne.n	800a12a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a148:	4b42      	ldr	r3, [pc, #264]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	051b      	lsls	r3, r3, #20
 800a156:	493f      	ldr	r1, [pc, #252]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	628b      	str	r3, [r1, #40]	; 0x28
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	3b01      	subs	r3, #1
 800a162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	025b      	lsls	r3, r3, #9
 800a16e:	b29b      	uxth	r3, r3
 800a170:	431a      	orrs	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	3b01      	subs	r3, #1
 800a178:	041b      	lsls	r3, r3, #16
 800a17a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	3b01      	subs	r3, #1
 800a186:	061b      	lsls	r3, r3, #24
 800a188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a18c:	4931      	ldr	r1, [pc, #196]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a192:	4b30      	ldr	r3, [pc, #192]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	492d      	ldr	r1, [pc, #180]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1a4:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	4928      	ldr	r1, [pc, #160]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a26      	ldr	r2, [pc, #152]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1c2:	4b24      	ldr	r3, [pc, #144]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1c6:	4b24      	ldr	r3, [pc, #144]	; (800a258 <RCCEx_PLL3_Config+0x160>)
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	69d2      	ldr	r2, [r2, #28]
 800a1ce:	00d2      	lsls	r2, r2, #3
 800a1d0:	4920      	ldr	r1, [pc, #128]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	4a1e      	ldr	r2, [pc, #120]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1e8:	4b1a      	ldr	r3, [pc, #104]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	4a19      	ldr	r2, [pc, #100]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1f4:	e00f      	b.n	800a216 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d106      	bne.n	800a20a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1fc:	4b15      	ldr	r3, [pc, #84]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4a14      	ldr	r2, [pc, #80]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a206:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a208:	e005      	b.n	800a216 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a20a:	4b12      	ldr	r3, [pc, #72]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4a11      	ldr	r2, [pc, #68]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a216:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a0e      	ldr	r2, [pc, #56]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a222:	f7f8 fae5 	bl	80027f0 <HAL_GetTick>
 800a226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a228:	e008      	b.n	800a23c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a22a:	f7f8 fae1 	bl	80027f0 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d901      	bls.n	800a23c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e006      	b.n	800a24a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0f0      	beq.n	800a22a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	58024400 	.word	0x58024400
 800a258:	ffff0007 	.word	0xffff0007

0800a25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e049      	b.n	800a302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f7 ff28 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fa00 	bl	800a6a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d001      	beq.n	800a324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e054      	b.n	800a3ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a26      	ldr	r2, [pc, #152]	; (800a3dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d022      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a34e:	d01d      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a22      	ldr	r2, [pc, #136]	; (800a3e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d018      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a21      	ldr	r2, [pc, #132]	; (800a3e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d013      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1f      	ldr	r2, [pc, #124]	; (800a3e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d00e      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a1e      	ldr	r2, [pc, #120]	; (800a3ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d009      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d004      	beq.n	800a38c <HAL_TIM_Base_Start_IT+0x80>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a1b      	ldr	r2, [pc, #108]	; (800a3f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d115      	bne.n	800a3b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	4b19      	ldr	r3, [pc, #100]	; (800a3f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a394:	4013      	ands	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b06      	cmp	r3, #6
 800a39c:	d015      	beq.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a4:	d011      	beq.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b6:	e008      	b.n	800a3ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e000      	b.n	800a3cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40010000 	.word	0x40010000
 800a3e0:	40000400 	.word	0x40000400
 800a3e4:	40000800 	.word	0x40000800
 800a3e8:	40000c00 	.word	0x40000c00
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40001800 	.word	0x40001800
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	00010007 	.word	0x00010007

0800a3fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d122      	bne.n	800a458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d11b      	bne.n	800a458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0202 	mvn.w	r2, #2
 800a428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f90f 	bl	800a662 <HAL_TIM_IC_CaptureCallback>
 800a444:	e005      	b.n	800a452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f901 	bl	800a64e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f912 	bl	800a676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0304 	and.w	r3, r3, #4
 800a462:	2b04      	cmp	r3, #4
 800a464:	d122      	bne.n	800a4ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b04      	cmp	r3, #4
 800a472:	d11b      	bne.n	800a4ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0204 	mvn.w	r2, #4
 800a47c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f8e5 	bl	800a662 <HAL_TIM_IC_CaptureCallback>
 800a498:	e005      	b.n	800a4a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f8d7 	bl	800a64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f8e8 	bl	800a676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b08      	cmp	r3, #8
 800a4b8:	d122      	bne.n	800a500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	d11b      	bne.n	800a500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f06f 0208 	mvn.w	r2, #8
 800a4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f8bb 	bl	800a662 <HAL_TIM_IC_CaptureCallback>
 800a4ec:	e005      	b.n	800a4fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f8ad 	bl	800a64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8be 	bl	800a676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	f003 0310 	and.w	r3, r3, #16
 800a50a:	2b10      	cmp	r3, #16
 800a50c:	d122      	bne.n	800a554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d11b      	bne.n	800a554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0210 	mvn.w	r2, #16
 800a524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2208      	movs	r2, #8
 800a52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f891 	bl	800a662 <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f883 	bl	800a64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f894 	bl	800a676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d10e      	bne.n	800a580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d107      	bne.n	800a580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f06f 0201 	mvn.w	r2, #1
 800a578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f85d 	bl	800a63a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a58a:	2b80      	cmp	r3, #128	; 0x80
 800a58c:	d10e      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a598:	2b80      	cmp	r3, #128	; 0x80
 800a59a:	d107      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f9ac 	bl	800a904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ba:	d10e      	bne.n	800a5da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	d107      	bne.n	800a5da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f99f 	bl	800a918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d10e      	bne.n	800a606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f2:	2b40      	cmp	r3, #64	; 0x40
 800a5f4:	d107      	bne.n	800a606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f842 	bl	800a68a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0320 	and.w	r3, r3, #32
 800a610:	2b20      	cmp	r3, #32
 800a612:	d10e      	bne.n	800a632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b20      	cmp	r3, #32
 800a620:	d107      	bne.n	800a632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0220 	mvn.w	r2, #32
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f95f 	bl	800a8f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a642:	bf00      	nop
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a40      	ldr	r2, [pc, #256]	; (800a7b4 <TIM_Base_SetConfig+0x114>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d013      	beq.n	800a6e0 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6be:	d00f      	beq.n	800a6e0 <TIM_Base_SetConfig+0x40>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a3d      	ldr	r2, [pc, #244]	; (800a7b8 <TIM_Base_SetConfig+0x118>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00b      	beq.n	800a6e0 <TIM_Base_SetConfig+0x40>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a3c      	ldr	r2, [pc, #240]	; (800a7bc <TIM_Base_SetConfig+0x11c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d007      	beq.n	800a6e0 <TIM_Base_SetConfig+0x40>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a3b      	ldr	r2, [pc, #236]	; (800a7c0 <TIM_Base_SetConfig+0x120>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_Base_SetConfig+0x40>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a3a      	ldr	r2, [pc, #232]	; (800a7c4 <TIM_Base_SetConfig+0x124>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d108      	bne.n	800a6f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <TIM_Base_SetConfig+0x114>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d01f      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a700:	d01b      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a2c      	ldr	r2, [pc, #176]	; (800a7b8 <TIM_Base_SetConfig+0x118>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d017      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a2b      	ldr	r2, [pc, #172]	; (800a7bc <TIM_Base_SetConfig+0x11c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d013      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a2a      	ldr	r2, [pc, #168]	; (800a7c0 <TIM_Base_SetConfig+0x120>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00f      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a29      	ldr	r2, [pc, #164]	; (800a7c4 <TIM_Base_SetConfig+0x124>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00b      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a28      	ldr	r2, [pc, #160]	; (800a7c8 <TIM_Base_SetConfig+0x128>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a27      	ldr	r2, [pc, #156]	; (800a7cc <TIM_Base_SetConfig+0x12c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d003      	beq.n	800a73a <TIM_Base_SetConfig+0x9a>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a26      	ldr	r2, [pc, #152]	; (800a7d0 <TIM_Base_SetConfig+0x130>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d108      	bne.n	800a74c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a10      	ldr	r2, [pc, #64]	; (800a7b4 <TIM_Base_SetConfig+0x114>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00f      	beq.n	800a798 <TIM_Base_SetConfig+0xf8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a12      	ldr	r2, [pc, #72]	; (800a7c4 <TIM_Base_SetConfig+0x124>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00b      	beq.n	800a798 <TIM_Base_SetConfig+0xf8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a11      	ldr	r2, [pc, #68]	; (800a7c8 <TIM_Base_SetConfig+0x128>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_Base_SetConfig+0xf8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a10      	ldr	r2, [pc, #64]	; (800a7cc <TIM_Base_SetConfig+0x12c>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_Base_SetConfig+0xf8>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <TIM_Base_SetConfig+0x130>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d103      	bne.n	800a7a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	615a      	str	r2, [r3, #20]
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40000400 	.word	0x40000400
 800a7bc:	40000800 	.word	0x40000800
 800a7c0:	40000c00 	.word	0x40000c00
 800a7c4:	40010400 	.word	0x40010400
 800a7c8:	40014000 	.word	0x40014000
 800a7cc:	40014400 	.word	0x40014400
 800a7d0:	40014800 	.word	0x40014800

0800a7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e06d      	b.n	800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a30      	ldr	r2, [pc, #192]	; (800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d004      	beq.n	800a820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a2f      	ldr	r2, [pc, #188]	; (800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d108      	bne.n	800a832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a20      	ldr	r2, [pc, #128]	; (800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d022      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85e:	d01d      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a1d      	ldr	r2, [pc, #116]	; (800a8dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d018      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a1c      	ldr	r2, [pc, #112]	; (800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d013      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a1a      	ldr	r2, [pc, #104]	; (800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00e      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a15      	ldr	r2, [pc, #84]	; (800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d009      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a16      	ldr	r2, [pc, #88]	; (800a8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d004      	beq.n	800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a15      	ldr	r2, [pc, #84]	; (800a8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d10c      	bne.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	40010000 	.word	0x40010000
 800a8d8:	40010400 	.word	0x40010400
 800a8dc:	40000400 	.word	0x40000400
 800a8e0:	40000800 	.word	0x40000800
 800a8e4:	40000c00 	.word	0x40000c00
 800a8e8:	40001800 	.word	0x40001800
 800a8ec:	40014000 	.word	0x40014000

0800a8f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e042      	b.n	800a9c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7f7 fc09 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	; 0x24
 800a95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fce8 	bl	800b344 <UART_SetConfig>
 800a974:	4603      	mov	r3, r0
 800a976:	2b01      	cmp	r3, #1
 800a978:	d101      	bne.n	800a97e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e022      	b.n	800a9c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 fa44 	bl	800be14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a99a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 facb 	bl	800bf58 <UART_CheckIdleState>
 800a9c2:	4603      	mov	r3, r0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b091      	sub	sp, #68	; 0x44
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	f040 808c 	bne.w	800aafe <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <HAL_UART_Transmit_IT+0x26>
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e084      	b.n	800ab00 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_UART_Transmit_IT+0x38>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e07d      	b.n	800ab00 <HAL_UART_Transmit_IT+0x134>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	88fa      	ldrh	r2, [r7, #6]
 800aa16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	88fa      	ldrh	r2, [r7, #6]
 800aa1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2221      	movs	r2, #33	; 0x21
 800aa34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa40:	d12e      	bne.n	800aaa0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa4a:	d107      	bne.n	800aa5c <HAL_UART_Transmit_IT+0x90>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4a2d      	ldr	r2, [pc, #180]	; (800ab0c <HAL_UART_Transmit_IT+0x140>)
 800aa58:	675a      	str	r2, [r3, #116]	; 0x74
 800aa5a:	e002      	b.n	800aa62 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4a2c      	ldr	r2, [pc, #176]	; (800ab10 <HAL_UART_Transmit_IT+0x144>)
 800aa60:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3308      	adds	r3, #8
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa80:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3308      	adds	r3, #8
 800aa88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa8a:	637a      	str	r2, [r7, #52]	; 0x34
 800aa8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e5      	bne.n	800aa6a <HAL_UART_Transmit_IT+0x9e>
 800aa9e:	e02c      	b.n	800aafa <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa8:	d107      	bne.n	800aaba <HAL_UART_Transmit_IT+0xee>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4a17      	ldr	r2, [pc, #92]	; (800ab14 <HAL_UART_Transmit_IT+0x148>)
 800aab6:	675a      	str	r2, [r3, #116]	; 0x74
 800aab8:	e002      	b.n	800aac0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4a16      	ldr	r2, [pc, #88]	; (800ab18 <HAL_UART_Transmit_IT+0x14c>)
 800aabe:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	613b      	str	r3, [r7, #16]
   return(result);
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae6:	623b      	str	r3, [r7, #32]
 800aae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaea:	69f9      	ldr	r1, [r7, #28]
 800aaec:	6a3a      	ldr	r2, [r7, #32]
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e6      	bne.n	800aac8 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e000      	b.n	800ab00 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aafe:	2302      	movs	r3, #2
  }
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3744      	adds	r7, #68	; 0x44
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	0800c727 	.word	0x0800c727
 800ab10:	0800c647 	.word	0x0800c647
 800ab14:	0800c585 	.word	0x0800c585
 800ab18:	0800c4cd 	.word	0x0800c4cd

0800ab1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	; 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab30:	2b20      	cmp	r3, #32
 800ab32:	d142      	bne.n	800abba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <HAL_UART_Receive_IT+0x24>
 800ab3a:	88fb      	ldrh	r3, [r7, #6]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e03b      	b.n	800abbc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d101      	bne.n	800ab52 <HAL_UART_Receive_IT+0x36>
 800ab4e:	2302      	movs	r3, #2
 800ab50:	e034      	b.n	800abbc <HAL_UART_Receive_IT+0xa0>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a17      	ldr	r2, [pc, #92]	; (800abc4 <HAL_UART_Receive_IT+0xa8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01f      	beq.n	800abaa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d018      	beq.n	800abaa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	613b      	str	r3, [r7, #16]
   return(result);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	623b      	str	r3, [r7, #32]
 800ab98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	69f9      	ldr	r1, [r7, #28]
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e6      	bne.n	800ab78 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abaa:	88fb      	ldrh	r3, [r7, #6]
 800abac:	461a      	mov	r2, r3
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f001 fae5 	bl	800c180 <UART_Start_Receive_IT>
 800abb6:	4603      	mov	r3, r0
 800abb8:	e000      	b.n	800abbc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800abba:	2302      	movs	r3, #2
  }
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3728      	adds	r7, #40	; 0x28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	58000c00 	.word	0x58000c00

0800abc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b0ba      	sub	sp, #232	; 0xe8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800abee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800abf2:	f640 030f 	movw	r3, #2063	; 0x80f
 800abf6:	4013      	ands	r3, r2
 800abf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800abfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11b      	bne.n	800ac3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d015      	beq.n	800ac3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 835a 	beq.w	800b2e6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
      }
      return;
 800ac3a:	e354      	b.n	800b2e6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 811f 	beq.w	800ae84 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac4a:	4b8b      	ldr	r3, [pc, #556]	; (800ae78 <HAL_UART_IRQHandler+0x2b0>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ac56:	4b89      	ldr	r3, [pc, #548]	; (800ae7c <HAL_UART_IRQHandler+0x2b4>)
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8112 	beq.w	800ae84 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d011      	beq.n	800ac90 <HAL_UART_IRQHandler+0xc8>
 800ac6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac86:	f043 0201 	orr.w	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d011      	beq.n	800acc0 <HAL_UART_IRQHandler+0xf8>
 800ac9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2202      	movs	r2, #2
 800acae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acb6:	f043 0204 	orr.w	r2, r3, #4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d011      	beq.n	800acf0 <HAL_UART_IRQHandler+0x128>
 800accc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2204      	movs	r2, #4
 800acde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace6:	f043 0202 	orr.w	r2, r3, #2
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800acf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d017      	beq.n	800ad2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d105      	bne.n	800ad14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad0c:	4b5a      	ldr	r3, [pc, #360]	; (800ae78 <HAL_UART_IRQHandler+0x2b0>)
 800ad0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2208      	movs	r2, #8
 800ad1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad22:	f043 0208 	orr.w	r2, r3, #8
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d012      	beq.n	800ad5e <HAL_UART_IRQHandler+0x196>
 800ad38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad54:	f043 0220 	orr.w	r2, r3, #32
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 82c0 	beq.w	800b2ea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6e:	f003 0320 	and.w	r3, r3, #32
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d013      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	d005      	beq.n	800adc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800adb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d04f      	beq.n	800ae62 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 fb06 	bl	800c3d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add2:	2b40      	cmp	r3, #64	; 0x40
 800add4:	d141      	bne.n	800ae5a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ade4:	e853 3f00 	ldrex	r3, [r3]
 800ade8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800adec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3308      	adds	r3, #8
 800adfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1d9      	bne.n	800add6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d013      	beq.n	800ae52 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2e:	4a14      	ldr	r2, [pc, #80]	; (800ae80 <HAL_UART_IRQHandler+0x2b8>)
 800ae30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f9 fa12 	bl	8004260 <HAL_DMA_Abort_IT>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d017      	beq.n	800ae72 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae50:	e00f      	b.n	800ae72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa60 	bl	800b318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae58:	e00b      	b.n	800ae72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa5c 	bl	800b318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae60:	e007      	b.n	800ae72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa58 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ae70:	e23b      	b.n	800b2ea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae72:	bf00      	nop
    return;
 800ae74:	e239      	b.n	800b2ea <HAL_UART_IRQHandler+0x722>
 800ae76:	bf00      	nop
 800ae78:	10000001 	.word	0x10000001
 800ae7c:	04000120 	.word	0x04000120
 800ae80:	0800c4a1 	.word	0x0800c4a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	f040 81ce 	bne.w	800b22a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae92:	f003 0310 	and.w	r3, r3, #16
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 81c7 	beq.w	800b22a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 81c0 	beq.w	800b22a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2210      	movs	r2, #16
 800aeb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aebc:	2b40      	cmp	r3, #64	; 0x40
 800aebe:	f040 813b 	bne.w	800b138 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a8b      	ldr	r2, [pc, #556]	; (800b0f8 <HAL_UART_IRQHandler+0x530>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d059      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a89      	ldr	r2, [pc, #548]	; (800b0fc <HAL_UART_IRQHandler+0x534>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d053      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a87      	ldr	r2, [pc, #540]	; (800b100 <HAL_UART_IRQHandler+0x538>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d04d      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a85      	ldr	r2, [pc, #532]	; (800b104 <HAL_UART_IRQHandler+0x53c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d047      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a83      	ldr	r2, [pc, #524]	; (800b108 <HAL_UART_IRQHandler+0x540>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d041      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a81      	ldr	r2, [pc, #516]	; (800b10c <HAL_UART_IRQHandler+0x544>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d03b      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a7f      	ldr	r2, [pc, #508]	; (800b110 <HAL_UART_IRQHandler+0x548>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d035      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a7d      	ldr	r2, [pc, #500]	; (800b114 <HAL_UART_IRQHandler+0x54c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d02f      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a7b      	ldr	r2, [pc, #492]	; (800b118 <HAL_UART_IRQHandler+0x550>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d029      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a79      	ldr	r2, [pc, #484]	; (800b11c <HAL_UART_IRQHandler+0x554>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d023      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a77      	ldr	r2, [pc, #476]	; (800b120 <HAL_UART_IRQHandler+0x558>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d01d      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a75      	ldr	r2, [pc, #468]	; (800b124 <HAL_UART_IRQHandler+0x55c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d017      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a73      	ldr	r2, [pc, #460]	; (800b128 <HAL_UART_IRQHandler+0x560>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d011      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a71      	ldr	r2, [pc, #452]	; (800b12c <HAL_UART_IRQHandler+0x564>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d00b      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a6f      	ldr	r2, [pc, #444]	; (800b130 <HAL_UART_IRQHandler+0x568>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d005      	beq.n	800af82 <HAL_UART_IRQHandler+0x3ba>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a6d      	ldr	r2, [pc, #436]	; (800b134 <HAL_UART_IRQHandler+0x56c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d105      	bne.n	800af8e <HAL_UART_IRQHandler+0x3c6>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	e004      	b.n	800af98 <HAL_UART_IRQHandler+0x3d0>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	b29b      	uxth	r3, r3
 800af98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 81a4 	beq.w	800b2ee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afb0:	429a      	cmp	r2, r3
 800afb2:	f080 819c 	bcs.w	800b2ee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afca:	f000 8086 	beq.w	800b0da <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800afe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800affc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b004:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1da      	bne.n	800afce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3308      	adds	r3, #8
 800b01e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b02a:	f023 0301 	bic.w	r3, r3, #1
 800b02e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b03c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b040:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b044:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b048:	e841 2300 	strex	r3, r2, [r1]
 800b04c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b04e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e1      	bne.n	800b018 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3308      	adds	r3, #8
 800b05a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b05e:	e853 3f00 	ldrex	r3, [r3]
 800b062:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b06a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b078:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b07a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b07e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e3      	bne.n	800b054 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0a2:	e853 3f00 	ldrex	r3, [r3]
 800b0a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0aa:	f023 0310 	bic.w	r3, r3, #16
 800b0ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e4      	bne.n	800b09a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7f8 fda5 	bl	8003c24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f91c 	bl	800b32c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0f4:	e0fb      	b.n	800b2ee <HAL_UART_IRQHandler+0x726>
 800b0f6:	bf00      	nop
 800b0f8:	40020010 	.word	0x40020010
 800b0fc:	40020028 	.word	0x40020028
 800b100:	40020040 	.word	0x40020040
 800b104:	40020058 	.word	0x40020058
 800b108:	40020070 	.word	0x40020070
 800b10c:	40020088 	.word	0x40020088
 800b110:	400200a0 	.word	0x400200a0
 800b114:	400200b8 	.word	0x400200b8
 800b118:	40020410 	.word	0x40020410
 800b11c:	40020428 	.word	0x40020428
 800b120:	40020440 	.word	0x40020440
 800b124:	40020458 	.word	0x40020458
 800b128:	40020470 	.word	0x40020470
 800b12c:	40020488 	.word	0x40020488
 800b130:	400204a0 	.word	0x400204a0
 800b134:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b144:	b29b      	uxth	r3, r3
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 80cc 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b15a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 80c7 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b186:	647b      	str	r3, [r7, #68]	; 0x44
 800b188:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e4      	bne.n	800b164 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1aa:	6a3a      	ldr	r2, [r7, #32]
 800b1ac:	4b54      	ldr	r3, [pc, #336]	; (800b300 <HAL_UART_IRQHandler+0x738>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1be:	633a      	str	r2, [r7, #48]	; 0x30
 800b1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e3      	bne.n	800b19a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	e853 3f00 	ldrex	r3, [r3]
 800b1f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 0310 	bic.w	r3, r3, #16
 800b1fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b208:	61fb      	str	r3, [r7, #28]
 800b20a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	69b9      	ldr	r1, [r7, #24]
 800b20e:	69fa      	ldr	r2, [r7, #28]
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	617b      	str	r3, [r7, #20]
   return(result);
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e4      	bne.n	800b1e6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f882 	bl	800b32c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b228:	e063      	b.n	800b2f2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00e      	beq.n	800b254 <HAL_UART_IRQHandler+0x68c>
 800b236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d008      	beq.n	800b254 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b24a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 ff67 	bl	800d120 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b252:	e051      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d014      	beq.n	800b28a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d03a      	beq.n	800b2f6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	4798      	blx	r3
    }
    return;
 800b288:	e035      	b.n	800b2f6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <HAL_UART_IRQHandler+0x6e2>
 800b296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fab4 	bl	800c810 <UART_EndTransmit_IT>
    return;
 800b2a8:	e026      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <HAL_UART_IRQHandler+0x702>
 800b2b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 ff40 	bl	800d148 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2c8:	e016      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d010      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x730>
 800b2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	da0c      	bge.n	800b2f8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 ff28 	bl	800d134 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2e4:	e008      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
      return;
 800b2e6:	bf00      	nop
 800b2e8:	e006      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
    return;
 800b2ea:	bf00      	nop
 800b2ec:	e004      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
      return;
 800b2ee:	bf00      	nop
 800b2f0:	e002      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
      return;
 800b2f2:	bf00      	nop
 800b2f4:	e000      	b.n	800b2f8 <HAL_UART_IRQHandler+0x730>
    return;
 800b2f6:	bf00      	nop
  }
}
 800b2f8:	37e8      	adds	r7, #232	; 0xe8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	effffffe 	.word	0xeffffffe

0800b304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b348:	b092      	sub	sp, #72	; 0x48
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	431a      	orrs	r2, r3
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	431a      	orrs	r2, r3
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	4313      	orrs	r3, r2
 800b36a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4bbe      	ldr	r3, [pc, #760]	; (800b66c <UART_SetConfig+0x328>)
 800b374:	4013      	ands	r3, r2
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	6812      	ldr	r2, [r2, #0]
 800b37a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b37c:	430b      	orrs	r3, r1
 800b37e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4ab3      	ldr	r2, [pc, #716]	; (800b670 <UART_SetConfig+0x32c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d004      	beq.n	800b3b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689a      	ldr	r2, [r3, #8]
 800b3b6:	4baf      	ldr	r3, [pc, #700]	; (800b674 <UART_SetConfig+0x330>)
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	6812      	ldr	r2, [r2, #0]
 800b3be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	f023 010f 	bic.w	r1, r3, #15
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4aa6      	ldr	r2, [pc, #664]	; (800b678 <UART_SetConfig+0x334>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d177      	bne.n	800b4d4 <UART_SetConfig+0x190>
 800b3e4:	4ba5      	ldr	r3, [pc, #660]	; (800b67c <UART_SetConfig+0x338>)
 800b3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3ec:	2b28      	cmp	r3, #40	; 0x28
 800b3ee:	d86d      	bhi.n	800b4cc <UART_SetConfig+0x188>
 800b3f0:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <UART_SetConfig+0xb4>)
 800b3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f6:	bf00      	nop
 800b3f8:	0800b49d 	.word	0x0800b49d
 800b3fc:	0800b4cd 	.word	0x0800b4cd
 800b400:	0800b4cd 	.word	0x0800b4cd
 800b404:	0800b4cd 	.word	0x0800b4cd
 800b408:	0800b4cd 	.word	0x0800b4cd
 800b40c:	0800b4cd 	.word	0x0800b4cd
 800b410:	0800b4cd 	.word	0x0800b4cd
 800b414:	0800b4cd 	.word	0x0800b4cd
 800b418:	0800b4a5 	.word	0x0800b4a5
 800b41c:	0800b4cd 	.word	0x0800b4cd
 800b420:	0800b4cd 	.word	0x0800b4cd
 800b424:	0800b4cd 	.word	0x0800b4cd
 800b428:	0800b4cd 	.word	0x0800b4cd
 800b42c:	0800b4cd 	.word	0x0800b4cd
 800b430:	0800b4cd 	.word	0x0800b4cd
 800b434:	0800b4cd 	.word	0x0800b4cd
 800b438:	0800b4ad 	.word	0x0800b4ad
 800b43c:	0800b4cd 	.word	0x0800b4cd
 800b440:	0800b4cd 	.word	0x0800b4cd
 800b444:	0800b4cd 	.word	0x0800b4cd
 800b448:	0800b4cd 	.word	0x0800b4cd
 800b44c:	0800b4cd 	.word	0x0800b4cd
 800b450:	0800b4cd 	.word	0x0800b4cd
 800b454:	0800b4cd 	.word	0x0800b4cd
 800b458:	0800b4b5 	.word	0x0800b4b5
 800b45c:	0800b4cd 	.word	0x0800b4cd
 800b460:	0800b4cd 	.word	0x0800b4cd
 800b464:	0800b4cd 	.word	0x0800b4cd
 800b468:	0800b4cd 	.word	0x0800b4cd
 800b46c:	0800b4cd 	.word	0x0800b4cd
 800b470:	0800b4cd 	.word	0x0800b4cd
 800b474:	0800b4cd 	.word	0x0800b4cd
 800b478:	0800b4bd 	.word	0x0800b4bd
 800b47c:	0800b4cd 	.word	0x0800b4cd
 800b480:	0800b4cd 	.word	0x0800b4cd
 800b484:	0800b4cd 	.word	0x0800b4cd
 800b488:	0800b4cd 	.word	0x0800b4cd
 800b48c:	0800b4cd 	.word	0x0800b4cd
 800b490:	0800b4cd 	.word	0x0800b4cd
 800b494:	0800b4cd 	.word	0x0800b4cd
 800b498:	0800b4c5 	.word	0x0800b4c5
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e222      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e21e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4ac:	2308      	movs	r3, #8
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e21a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e216      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e212      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4c4:	2340      	movs	r3, #64	; 0x40
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e20e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e20a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a69      	ldr	r2, [pc, #420]	; (800b680 <UART_SetConfig+0x33c>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d130      	bne.n	800b540 <UART_SetConfig+0x1fc>
 800b4de:	4b67      	ldr	r3, [pc, #412]	; (800b67c <UART_SetConfig+0x338>)
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	d826      	bhi.n	800b538 <UART_SetConfig+0x1f4>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <UART_SetConfig+0x1ac>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b511 	.word	0x0800b511
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b521 	.word	0x0800b521
 800b500:	0800b529 	.word	0x0800b529
 800b504:	0800b531 	.word	0x0800b531
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50e:	e1ec      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b510:	2304      	movs	r3, #4
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b516:	e1e8      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b518:	2308      	movs	r3, #8
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51e:	e1e4      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b520:	2310      	movs	r3, #16
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b526:	e1e0      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b528:	2320      	movs	r3, #32
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52e:	e1dc      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b536:	e1d8      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b538:	2380      	movs	r3, #128	; 0x80
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e1d4      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a4f      	ldr	r2, [pc, #316]	; (800b684 <UART_SetConfig+0x340>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d130      	bne.n	800b5ac <UART_SetConfig+0x268>
 800b54a:	4b4c      	ldr	r3, [pc, #304]	; (800b67c <UART_SetConfig+0x338>)
 800b54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	2b05      	cmp	r3, #5
 800b554:	d826      	bhi.n	800b5a4 <UART_SetConfig+0x260>
 800b556:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <UART_SetConfig+0x218>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b575 	.word	0x0800b575
 800b560:	0800b57d 	.word	0x0800b57d
 800b564:	0800b585 	.word	0x0800b585
 800b568:	0800b58d 	.word	0x0800b58d
 800b56c:	0800b595 	.word	0x0800b595
 800b570:	0800b59d 	.word	0x0800b59d
 800b574:	2300      	movs	r3, #0
 800b576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b57a:	e1b6      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b57c:	2304      	movs	r3, #4
 800b57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b582:	e1b2      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b584:	2308      	movs	r3, #8
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58a:	e1ae      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b58c:	2310      	movs	r3, #16
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b592:	e1aa      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b594:	2320      	movs	r3, #32
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59a:	e1a6      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b59c:	2340      	movs	r3, #64	; 0x40
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e1a2      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b5a4:	2380      	movs	r3, #128	; 0x80
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e19e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a35      	ldr	r2, [pc, #212]	; (800b688 <UART_SetConfig+0x344>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d130      	bne.n	800b618 <UART_SetConfig+0x2d4>
 800b5b6:	4b31      	ldr	r3, [pc, #196]	; (800b67c <UART_SetConfig+0x338>)
 800b5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ba:	f003 0307 	and.w	r3, r3, #7
 800b5be:	2b05      	cmp	r3, #5
 800b5c0:	d826      	bhi.n	800b610 <UART_SetConfig+0x2cc>
 800b5c2:	a201      	add	r2, pc, #4	; (adr r2, 800b5c8 <UART_SetConfig+0x284>)
 800b5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c8:	0800b5e1 	.word	0x0800b5e1
 800b5cc:	0800b5e9 	.word	0x0800b5e9
 800b5d0:	0800b5f1 	.word	0x0800b5f1
 800b5d4:	0800b5f9 	.word	0x0800b5f9
 800b5d8:	0800b601 	.word	0x0800b601
 800b5dc:	0800b609 	.word	0x0800b609
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e6:	e180      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ee:	e17c      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b5f0:	2308      	movs	r3, #8
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f6:	e178      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fe:	e174      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b600:	2320      	movs	r3, #32
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b606:	e170      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60e:	e16c      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b610:	2380      	movs	r3, #128	; 0x80
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b616:	e168      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a1b      	ldr	r2, [pc, #108]	; (800b68c <UART_SetConfig+0x348>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d142      	bne.n	800b6a8 <UART_SetConfig+0x364>
 800b622:	4b16      	ldr	r3, [pc, #88]	; (800b67c <UART_SetConfig+0x338>)
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b05      	cmp	r3, #5
 800b62c:	d838      	bhi.n	800b6a0 <UART_SetConfig+0x35c>
 800b62e:	a201      	add	r2, pc, #4	; (adr r2, 800b634 <UART_SetConfig+0x2f0>)
 800b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b634:	0800b64d 	.word	0x0800b64d
 800b638:	0800b655 	.word	0x0800b655
 800b63c:	0800b65d 	.word	0x0800b65d
 800b640:	0800b665 	.word	0x0800b665
 800b644:	0800b691 	.word	0x0800b691
 800b648:	0800b699 	.word	0x0800b699
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b652:	e14a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b654:	2304      	movs	r3, #4
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65a:	e146      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b65c:	2308      	movs	r3, #8
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b662:	e142      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b664:	2310      	movs	r3, #16
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66a:	e13e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b66c:	cfff69f3 	.word	0xcfff69f3
 800b670:	58000c00 	.word	0x58000c00
 800b674:	11fff4ff 	.word	0x11fff4ff
 800b678:	40011000 	.word	0x40011000
 800b67c:	58024400 	.word	0x58024400
 800b680:	40004400 	.word	0x40004400
 800b684:	40004800 	.word	0x40004800
 800b688:	40004c00 	.word	0x40004c00
 800b68c:	40005000 	.word	0x40005000
 800b690:	2320      	movs	r3, #32
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b696:	e128      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b698:	2340      	movs	r3, #64	; 0x40
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69e:	e124      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b6a0:	2380      	movs	r3, #128	; 0x80
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a6:	e120      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4acb      	ldr	r2, [pc, #812]	; (800b9dc <UART_SetConfig+0x698>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d176      	bne.n	800b7a0 <UART_SetConfig+0x45c>
 800b6b2:	4bcb      	ldr	r3, [pc, #812]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6ba:	2b28      	cmp	r3, #40	; 0x28
 800b6bc:	d86c      	bhi.n	800b798 <UART_SetConfig+0x454>
 800b6be:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <UART_SetConfig+0x380>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b769 	.word	0x0800b769
 800b6c8:	0800b799 	.word	0x0800b799
 800b6cc:	0800b799 	.word	0x0800b799
 800b6d0:	0800b799 	.word	0x0800b799
 800b6d4:	0800b799 	.word	0x0800b799
 800b6d8:	0800b799 	.word	0x0800b799
 800b6dc:	0800b799 	.word	0x0800b799
 800b6e0:	0800b799 	.word	0x0800b799
 800b6e4:	0800b771 	.word	0x0800b771
 800b6e8:	0800b799 	.word	0x0800b799
 800b6ec:	0800b799 	.word	0x0800b799
 800b6f0:	0800b799 	.word	0x0800b799
 800b6f4:	0800b799 	.word	0x0800b799
 800b6f8:	0800b799 	.word	0x0800b799
 800b6fc:	0800b799 	.word	0x0800b799
 800b700:	0800b799 	.word	0x0800b799
 800b704:	0800b779 	.word	0x0800b779
 800b708:	0800b799 	.word	0x0800b799
 800b70c:	0800b799 	.word	0x0800b799
 800b710:	0800b799 	.word	0x0800b799
 800b714:	0800b799 	.word	0x0800b799
 800b718:	0800b799 	.word	0x0800b799
 800b71c:	0800b799 	.word	0x0800b799
 800b720:	0800b799 	.word	0x0800b799
 800b724:	0800b781 	.word	0x0800b781
 800b728:	0800b799 	.word	0x0800b799
 800b72c:	0800b799 	.word	0x0800b799
 800b730:	0800b799 	.word	0x0800b799
 800b734:	0800b799 	.word	0x0800b799
 800b738:	0800b799 	.word	0x0800b799
 800b73c:	0800b799 	.word	0x0800b799
 800b740:	0800b799 	.word	0x0800b799
 800b744:	0800b789 	.word	0x0800b789
 800b748:	0800b799 	.word	0x0800b799
 800b74c:	0800b799 	.word	0x0800b799
 800b750:	0800b799 	.word	0x0800b799
 800b754:	0800b799 	.word	0x0800b799
 800b758:	0800b799 	.word	0x0800b799
 800b75c:	0800b799 	.word	0x0800b799
 800b760:	0800b799 	.word	0x0800b799
 800b764:	0800b791 	.word	0x0800b791
 800b768:	2301      	movs	r3, #1
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76e:	e0bc      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b770:	2304      	movs	r3, #4
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b776:	e0b8      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b778:	2308      	movs	r3, #8
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77e:	e0b4      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b780:	2310      	movs	r3, #16
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b786:	e0b0      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b788:	2320      	movs	r3, #32
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78e:	e0ac      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b796:	e0a8      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b798:	2380      	movs	r3, #128	; 0x80
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79e:	e0a4      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a8f      	ldr	r2, [pc, #572]	; (800b9e4 <UART_SetConfig+0x6a0>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d130      	bne.n	800b80c <UART_SetConfig+0x4c8>
 800b7aa:	4b8d      	ldr	r3, [pc, #564]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d826      	bhi.n	800b804 <UART_SetConfig+0x4c0>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <UART_SetConfig+0x478>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7d5 	.word	0x0800b7d5
 800b7c0:	0800b7dd 	.word	0x0800b7dd
 800b7c4:	0800b7e5 	.word	0x0800b7e5
 800b7c8:	0800b7ed 	.word	0x0800b7ed
 800b7cc:	0800b7f5 	.word	0x0800b7f5
 800b7d0:	0800b7fd 	.word	0x0800b7fd
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7da:	e086      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e2:	e082      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ea:	e07e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7ec:	2310      	movs	r3, #16
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f2:	e07a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7f4:	2320      	movs	r3, #32
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fa:	e076      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b802:	e072      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b804:	2380      	movs	r3, #128	; 0x80
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b80a:	e06e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a75      	ldr	r2, [pc, #468]	; (800b9e8 <UART_SetConfig+0x6a4>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d130      	bne.n	800b878 <UART_SetConfig+0x534>
 800b816:	4b72      	ldr	r3, [pc, #456]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d826      	bhi.n	800b870 <UART_SetConfig+0x52c>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <UART_SetConfig+0x4e4>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b841 	.word	0x0800b841
 800b82c:	0800b849 	.word	0x0800b849
 800b830:	0800b851 	.word	0x0800b851
 800b834:	0800b859 	.word	0x0800b859
 800b838:	0800b861 	.word	0x0800b861
 800b83c:	0800b869 	.word	0x0800b869
 800b840:	2300      	movs	r3, #0
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b846:	e050      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b848:	2304      	movs	r3, #4
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84e:	e04c      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b850:	2308      	movs	r3, #8
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b856:	e048      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b858:	2310      	movs	r3, #16
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85e:	e044      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b860:	2320      	movs	r3, #32
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b866:	e040      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86e:	e03c      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b870:	2380      	movs	r3, #128	; 0x80
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b876:	e038      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a5b      	ldr	r2, [pc, #364]	; (800b9ec <UART_SetConfig+0x6a8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d130      	bne.n	800b8e4 <UART_SetConfig+0x5a0>
 800b882:	4b57      	ldr	r3, [pc, #348]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	2b05      	cmp	r3, #5
 800b88c:	d826      	bhi.n	800b8dc <UART_SetConfig+0x598>
 800b88e:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <UART_SetConfig+0x550>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b8ad 	.word	0x0800b8ad
 800b898:	0800b8b5 	.word	0x0800b8b5
 800b89c:	0800b8bd 	.word	0x0800b8bd
 800b8a0:	0800b8c5 	.word	0x0800b8c5
 800b8a4:	0800b8cd 	.word	0x0800b8cd
 800b8a8:	0800b8d5 	.word	0x0800b8d5
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e01a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ba:	e016      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c2:	e012      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ca:	e00e      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8cc:	2320      	movs	r3, #32
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8d2:	e00a      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8d4:	2340      	movs	r3, #64	; 0x40
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8da:	e006      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8e2:	e002      	b.n	800b8ea <UART_SetConfig+0x5a6>
 800b8e4:	2380      	movs	r3, #128	; 0x80
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a3f      	ldr	r2, [pc, #252]	; (800b9ec <UART_SetConfig+0x6a8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	f040 80f8 	bne.w	800bae6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	dc46      	bgt.n	800b98c <UART_SetConfig+0x648>
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	f2c0 8082 	blt.w	800ba08 <UART_SetConfig+0x6c4>
 800b904:	3b02      	subs	r3, #2
 800b906:	2b1e      	cmp	r3, #30
 800b908:	d87e      	bhi.n	800ba08 <UART_SetConfig+0x6c4>
 800b90a:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <UART_SetConfig+0x5cc>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b993 	.word	0x0800b993
 800b914:	0800ba09 	.word	0x0800ba09
 800b918:	0800b99b 	.word	0x0800b99b
 800b91c:	0800ba09 	.word	0x0800ba09
 800b920:	0800ba09 	.word	0x0800ba09
 800b924:	0800ba09 	.word	0x0800ba09
 800b928:	0800b9ab 	.word	0x0800b9ab
 800b92c:	0800ba09 	.word	0x0800ba09
 800b930:	0800ba09 	.word	0x0800ba09
 800b934:	0800ba09 	.word	0x0800ba09
 800b938:	0800ba09 	.word	0x0800ba09
 800b93c:	0800ba09 	.word	0x0800ba09
 800b940:	0800ba09 	.word	0x0800ba09
 800b944:	0800ba09 	.word	0x0800ba09
 800b948:	0800b9bb 	.word	0x0800b9bb
 800b94c:	0800ba09 	.word	0x0800ba09
 800b950:	0800ba09 	.word	0x0800ba09
 800b954:	0800ba09 	.word	0x0800ba09
 800b958:	0800ba09 	.word	0x0800ba09
 800b95c:	0800ba09 	.word	0x0800ba09
 800b960:	0800ba09 	.word	0x0800ba09
 800b964:	0800ba09 	.word	0x0800ba09
 800b968:	0800ba09 	.word	0x0800ba09
 800b96c:	0800ba09 	.word	0x0800ba09
 800b970:	0800ba09 	.word	0x0800ba09
 800b974:	0800ba09 	.word	0x0800ba09
 800b978:	0800ba09 	.word	0x0800ba09
 800b97c:	0800ba09 	.word	0x0800ba09
 800b980:	0800ba09 	.word	0x0800ba09
 800b984:	0800ba09 	.word	0x0800ba09
 800b988:	0800b9fb 	.word	0x0800b9fb
 800b98c:	2b40      	cmp	r3, #64	; 0x40
 800b98e:	d037      	beq.n	800ba00 <UART_SetConfig+0x6bc>
 800b990:	e03a      	b.n	800ba08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b992:	f7fe f841 	bl	8009a18 <HAL_RCCEx_GetD3PCLK1Freq>
 800b996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b998:	e03c      	b.n	800ba14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe f850 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a8:	e034      	b.n	800ba14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9aa:	f107 0318 	add.w	r3, r7, #24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe f99c 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b8:	e02c      	b.n	800ba14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9ba:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d016      	beq.n	800b9f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9c6:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <UART_SetConfig+0x69c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	08db      	lsrs	r3, r3, #3
 800b9cc:	f003 0303 	and.w	r3, r3, #3
 800b9d0:	4a07      	ldr	r2, [pc, #28]	; (800b9f0 <UART_SetConfig+0x6ac>)
 800b9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9d8:	e01c      	b.n	800ba14 <UART_SetConfig+0x6d0>
 800b9da:	bf00      	nop
 800b9dc:	40011400 	.word	0x40011400
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	40007800 	.word	0x40007800
 800b9e8:	40007c00 	.word	0x40007c00
 800b9ec:	58000c00 	.word	0x58000c00
 800b9f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b9f4:	4b9d      	ldr	r3, [pc, #628]	; (800bc6c <UART_SetConfig+0x928>)
 800b9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9f8:	e00c      	b.n	800ba14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9fa:	4b9d      	ldr	r3, [pc, #628]	; (800bc70 <UART_SetConfig+0x92c>)
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9fe:	e009      	b.n	800ba14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba06:	e005      	b.n	800ba14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 81de 	beq.w	800bdd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	4a94      	ldr	r2, [pc, #592]	; (800bc74 <UART_SetConfig+0x930>)
 800ba22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba26:	461a      	mov	r2, r3
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d305      	bcc.n	800ba4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d903      	bls.n	800ba54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ba52:	e1c1      	b.n	800bdd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba56:	2200      	movs	r2, #0
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	60fa      	str	r2, [r7, #12]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	4a84      	ldr	r2, [pc, #528]	; (800bc74 <UART_SetConfig+0x930>)
 800ba62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	2200      	movs	r2, #0
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	607a      	str	r2, [r7, #4]
 800ba6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba76:	f7f4 fc2f 	bl	80002d8 <__aeabi_uldivmod>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4610      	mov	r0, r2
 800ba80:	4619      	mov	r1, r3
 800ba82:	f04f 0200 	mov.w	r2, #0
 800ba86:	f04f 0300 	mov.w	r3, #0
 800ba8a:	020b      	lsls	r3, r1, #8
 800ba8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba90:	0202      	lsls	r2, r0, #8
 800ba92:	6979      	ldr	r1, [r7, #20]
 800ba94:	6849      	ldr	r1, [r1, #4]
 800ba96:	0849      	lsrs	r1, r1, #1
 800ba98:	2000      	movs	r0, #0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	eb12 0804 	adds.w	r8, r2, r4
 800baa2:	eb43 0905 	adc.w	r9, r3, r5
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	469a      	mov	sl, r3
 800baae:	4693      	mov	fp, r2
 800bab0:	4652      	mov	r2, sl
 800bab2:	465b      	mov	r3, fp
 800bab4:	4640      	mov	r0, r8
 800bab6:	4649      	mov	r1, r9
 800bab8:	f7f4 fc0e 	bl	80002d8 <__aeabi_uldivmod>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4613      	mov	r3, r2
 800bac2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baca:	d308      	bcc.n	800bade <UART_SetConfig+0x79a>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bad2:	d204      	bcs.n	800bade <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bada:	60da      	str	r2, [r3, #12]
 800badc:	e17c      	b.n	800bdd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bae4:	e178      	b.n	800bdd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baee:	f040 80c5 	bne.w	800bc7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800baf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	dc48      	bgt.n	800bb8c <UART_SetConfig+0x848>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	db7b      	blt.n	800bbf6 <UART_SetConfig+0x8b2>
 800bafe:	2b20      	cmp	r3, #32
 800bb00:	d879      	bhi.n	800bbf6 <UART_SetConfig+0x8b2>
 800bb02:	a201      	add	r2, pc, #4	; (adr r2, 800bb08 <UART_SetConfig+0x7c4>)
 800bb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb08:	0800bb93 	.word	0x0800bb93
 800bb0c:	0800bb9b 	.word	0x0800bb9b
 800bb10:	0800bbf7 	.word	0x0800bbf7
 800bb14:	0800bbf7 	.word	0x0800bbf7
 800bb18:	0800bba3 	.word	0x0800bba3
 800bb1c:	0800bbf7 	.word	0x0800bbf7
 800bb20:	0800bbf7 	.word	0x0800bbf7
 800bb24:	0800bbf7 	.word	0x0800bbf7
 800bb28:	0800bbb3 	.word	0x0800bbb3
 800bb2c:	0800bbf7 	.word	0x0800bbf7
 800bb30:	0800bbf7 	.word	0x0800bbf7
 800bb34:	0800bbf7 	.word	0x0800bbf7
 800bb38:	0800bbf7 	.word	0x0800bbf7
 800bb3c:	0800bbf7 	.word	0x0800bbf7
 800bb40:	0800bbf7 	.word	0x0800bbf7
 800bb44:	0800bbf7 	.word	0x0800bbf7
 800bb48:	0800bbc3 	.word	0x0800bbc3
 800bb4c:	0800bbf7 	.word	0x0800bbf7
 800bb50:	0800bbf7 	.word	0x0800bbf7
 800bb54:	0800bbf7 	.word	0x0800bbf7
 800bb58:	0800bbf7 	.word	0x0800bbf7
 800bb5c:	0800bbf7 	.word	0x0800bbf7
 800bb60:	0800bbf7 	.word	0x0800bbf7
 800bb64:	0800bbf7 	.word	0x0800bbf7
 800bb68:	0800bbf7 	.word	0x0800bbf7
 800bb6c:	0800bbf7 	.word	0x0800bbf7
 800bb70:	0800bbf7 	.word	0x0800bbf7
 800bb74:	0800bbf7 	.word	0x0800bbf7
 800bb78:	0800bbf7 	.word	0x0800bbf7
 800bb7c:	0800bbf7 	.word	0x0800bbf7
 800bb80:	0800bbf7 	.word	0x0800bbf7
 800bb84:	0800bbf7 	.word	0x0800bbf7
 800bb88:	0800bbe9 	.word	0x0800bbe9
 800bb8c:	2b40      	cmp	r3, #64	; 0x40
 800bb8e:	d02e      	beq.n	800bbee <UART_SetConfig+0x8aa>
 800bb90:	e031      	b.n	800bbf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb92:	f7fc ffcf 	bl	8008b34 <HAL_RCC_GetPCLK1Freq>
 800bb96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb98:	e033      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb9a:	f7fc ffe1 	bl	8008b60 <HAL_RCC_GetPCLK2Freq>
 800bb9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bba0:	e02f      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd ff4c 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbb0:	e027      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbb2:	f107 0318 	add.w	r3, r7, #24
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe f898 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc0:	e01f      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc2:	4b2d      	ldr	r3, [pc, #180]	; (800bc78 <UART_SetConfig+0x934>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 0320 	and.w	r3, r3, #32
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d009      	beq.n	800bbe2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbce:	4b2a      	ldr	r3, [pc, #168]	; (800bc78 <UART_SetConfig+0x934>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	08db      	lsrs	r3, r3, #3
 800bbd4:	f003 0303 	and.w	r3, r3, #3
 800bbd8:	4a24      	ldr	r2, [pc, #144]	; (800bc6c <UART_SetConfig+0x928>)
 800bbda:	fa22 f303 	lsr.w	r3, r2, r3
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbe0:	e00f      	b.n	800bc02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bbe2:	4b22      	ldr	r3, [pc, #136]	; (800bc6c <UART_SetConfig+0x928>)
 800bbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe6:	e00c      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbe8:	4b21      	ldr	r3, [pc, #132]	; (800bc70 <UART_SetConfig+0x92c>)
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbec:	e009      	b.n	800bc02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf4:	e005      	b.n	800bc02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80e7 	beq.w	800bdd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0e:	4a19      	ldr	r2, [pc, #100]	; (800bc74 <UART_SetConfig+0x930>)
 800bc10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc14:	461a      	mov	r2, r3
 800bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc1c:	005a      	lsls	r2, r3, #1
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	085b      	lsrs	r3, r3, #1
 800bc24:	441a      	add	r2, r3
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	2b0f      	cmp	r3, #15
 800bc34:	d916      	bls.n	800bc64 <UART_SetConfig+0x920>
 800bc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc3c:	d212      	bcs.n	800bc64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f023 030f 	bic.w	r3, r3, #15
 800bc46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	f003 0307 	and.w	r3, r3, #7
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc56:	4313      	orrs	r3, r2
 800bc58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bc60:	60da      	str	r2, [r3, #12]
 800bc62:	e0b9      	b.n	800bdd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bc6a:	e0b5      	b.n	800bdd8 <UART_SetConfig+0xa94>
 800bc6c:	03d09000 	.word	0x03d09000
 800bc70:	003d0900 	.word	0x003d0900
 800bc74:	0800d470 	.word	0x0800d470
 800bc78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc80:	2b20      	cmp	r3, #32
 800bc82:	dc49      	bgt.n	800bd18 <UART_SetConfig+0x9d4>
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	db7c      	blt.n	800bd82 <UART_SetConfig+0xa3e>
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d87a      	bhi.n	800bd82 <UART_SetConfig+0xa3e>
 800bc8c:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <UART_SetConfig+0x950>)
 800bc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc92:	bf00      	nop
 800bc94:	0800bd1f 	.word	0x0800bd1f
 800bc98:	0800bd27 	.word	0x0800bd27
 800bc9c:	0800bd83 	.word	0x0800bd83
 800bca0:	0800bd83 	.word	0x0800bd83
 800bca4:	0800bd2f 	.word	0x0800bd2f
 800bca8:	0800bd83 	.word	0x0800bd83
 800bcac:	0800bd83 	.word	0x0800bd83
 800bcb0:	0800bd83 	.word	0x0800bd83
 800bcb4:	0800bd3f 	.word	0x0800bd3f
 800bcb8:	0800bd83 	.word	0x0800bd83
 800bcbc:	0800bd83 	.word	0x0800bd83
 800bcc0:	0800bd83 	.word	0x0800bd83
 800bcc4:	0800bd83 	.word	0x0800bd83
 800bcc8:	0800bd83 	.word	0x0800bd83
 800bccc:	0800bd83 	.word	0x0800bd83
 800bcd0:	0800bd83 	.word	0x0800bd83
 800bcd4:	0800bd4f 	.word	0x0800bd4f
 800bcd8:	0800bd83 	.word	0x0800bd83
 800bcdc:	0800bd83 	.word	0x0800bd83
 800bce0:	0800bd83 	.word	0x0800bd83
 800bce4:	0800bd83 	.word	0x0800bd83
 800bce8:	0800bd83 	.word	0x0800bd83
 800bcec:	0800bd83 	.word	0x0800bd83
 800bcf0:	0800bd83 	.word	0x0800bd83
 800bcf4:	0800bd83 	.word	0x0800bd83
 800bcf8:	0800bd83 	.word	0x0800bd83
 800bcfc:	0800bd83 	.word	0x0800bd83
 800bd00:	0800bd83 	.word	0x0800bd83
 800bd04:	0800bd83 	.word	0x0800bd83
 800bd08:	0800bd83 	.word	0x0800bd83
 800bd0c:	0800bd83 	.word	0x0800bd83
 800bd10:	0800bd83 	.word	0x0800bd83
 800bd14:	0800bd75 	.word	0x0800bd75
 800bd18:	2b40      	cmp	r3, #64	; 0x40
 800bd1a:	d02e      	beq.n	800bd7a <UART_SetConfig+0xa36>
 800bd1c:	e031      	b.n	800bd82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd1e:	f7fc ff09 	bl	8008b34 <HAL_RCC_GetPCLK1Freq>
 800bd22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd24:	e033      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd26:	f7fc ff1b 	bl	8008b60 <HAL_RCC_GetPCLK2Freq>
 800bd2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd2c:	e02f      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fd fe86 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd3c:	e027      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd3e:	f107 0318 	add.w	r3, r7, #24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd ffd2 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd4c:	e01f      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd4e:	4b2d      	ldr	r3, [pc, #180]	; (800be04 <UART_SetConfig+0xac0>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 0320 	and.w	r3, r3, #32
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d009      	beq.n	800bd6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd5a:	4b2a      	ldr	r3, [pc, #168]	; (800be04 <UART_SetConfig+0xac0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	08db      	lsrs	r3, r3, #3
 800bd60:	f003 0303 	and.w	r3, r3, #3
 800bd64:	4a28      	ldr	r2, [pc, #160]	; (800be08 <UART_SetConfig+0xac4>)
 800bd66:	fa22 f303 	lsr.w	r3, r2, r3
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd6c:	e00f      	b.n	800bd8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bd6e:	4b26      	ldr	r3, [pc, #152]	; (800be08 <UART_SetConfig+0xac4>)
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd72:	e00c      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd74:	4b25      	ldr	r3, [pc, #148]	; (800be0c <UART_SetConfig+0xac8>)
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd78:	e009      	b.n	800bd8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd80:	e005      	b.n	800bd8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bd8c:	bf00      	nop
    }

    if (pclk != 0U)
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d021      	beq.n	800bdd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	4a1d      	ldr	r2, [pc, #116]	; (800be10 <UART_SetConfig+0xacc>)
 800bd9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	085b      	lsrs	r3, r3, #1
 800bdac:	441a      	add	r2, r3
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	2b0f      	cmp	r3, #15
 800bdbc:	d909      	bls.n	800bdd2 <UART_SetConfig+0xa8e>
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc4:	d205      	bcs.n	800bdd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60da      	str	r2, [r3, #12]
 800bdd0:	e002      	b.n	800bdd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2200      	movs	r2, #0
 800bdec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bdf4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3748      	adds	r7, #72	; 0x48
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be02:	bf00      	nop
 800be04:	58024400 	.word	0x58024400
 800be08:	03d09000 	.word	0x03d09000
 800be0c:	003d0900 	.word	0x003d0900
 800be10:	0800d470 	.word	0x0800d470

0800be14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	f003 0302 	and.w	r3, r3, #2
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	f003 0310 	and.w	r3, r3, #16
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00a      	beq.n	800bec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beca:	f003 0320 	and.w	r3, r3, #32
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01a      	beq.n	800bf2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf12:	d10a      	bne.n	800bf2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	605a      	str	r2, [r3, #4]
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf68:	f7f6 fc42 	bl	80027f0 <HAL_GetTick>
 800bf6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0308 	and.w	r3, r3, #8
 800bf78:	2b08      	cmp	r3, #8
 800bf7a:	d10e      	bne.n	800bf9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f82f 	bl	800bfee <UART_WaitOnFlagUntilTimeout>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e025      	b.n	800bfe6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0304 	and.w	r3, r3, #4
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d10e      	bne.n	800bfc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f819 	bl	800bfee <UART_WaitOnFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	e00f      	b.n	800bfe6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b09c      	sub	sp, #112	; 0x70
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	60f8      	str	r0, [r7, #12]
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	603b      	str	r3, [r7, #0]
 800bffa:	4613      	mov	r3, r2
 800bffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bffe:	e0a9      	b.n	800c154 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c006:	f000 80a5 	beq.w	800c154 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c00a:	f7f6 fbf1 	bl	80027f0 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c016:	429a      	cmp	r2, r3
 800c018:	d302      	bcc.n	800c020 <UART_WaitOnFlagUntilTimeout+0x32>
 800c01a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d140      	bne.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c034:	667b      	str	r3, [r7, #100]	; 0x64
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c040:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e6      	bne.n	800c020 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	663b      	str	r3, [r7, #96]	; 0x60
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c072:	64ba      	str	r2, [r7, #72]	; 0x48
 800c074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e5      	bne.n	800c052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e069      	b.n	800c176 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d051      	beq.n	800c154 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0be:	d149      	bne.n	800c154 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e6      	bne.n	800c0ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3308      	adds	r3, #8
 800c102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	e853 3f00 	ldrex	r3, [r3]
 800c10a:	613b      	str	r3, [r7, #16]
   return(result);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	f023 0301 	bic.w	r3, r3, #1
 800c112:	66bb      	str	r3, [r7, #104]	; 0x68
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	3308      	adds	r3, #8
 800c11a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c11c:	623a      	str	r2, [r7, #32]
 800c11e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	69f9      	ldr	r1, [r7, #28]
 800c122:	6a3a      	ldr	r2, [r7, #32]
 800c124:	e841 2300 	strex	r3, r2, [r1]
 800c128:	61bb      	str	r3, [r7, #24]
   return(result);
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e5      	bne.n	800c0fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2220      	movs	r2, #32
 800c134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2220      	movs	r2, #32
 800c13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2220      	movs	r2, #32
 800c144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e010      	b.n	800c176 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	69da      	ldr	r2, [r3, #28]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	429a      	cmp	r2, r3
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	429a      	cmp	r2, r3
 800c170:	f43f af46 	beq.w	800c000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3770      	adds	r7, #112	; 0x70
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c180:	b480      	push	{r7}
 800c182:	b0a3      	sub	sp, #140	; 0x8c
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	4613      	mov	r3, r2
 800c18c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	88fa      	ldrh	r2, [r7, #6]
 800c198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	88fa      	ldrh	r2, [r7, #6]
 800c1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b2:	d10e      	bne.n	800c1d2 <UART_Start_Receive_IT+0x52>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d105      	bne.n	800c1c8 <UART_Start_Receive_IT+0x48>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c1c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1c6:	e02d      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	22ff      	movs	r2, #255	; 0xff
 800c1cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1d0:	e028      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10d      	bne.n	800c1f6 <UART_Start_Receive_IT+0x76>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d104      	bne.n	800c1ec <UART_Start_Receive_IT+0x6c>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	22ff      	movs	r2, #255	; 0xff
 800c1e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1ea:	e01b      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	227f      	movs	r2, #127	; 0x7f
 800c1f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1f4:	e016      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1fe:	d10d      	bne.n	800c21c <UART_Start_Receive_IT+0x9c>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d104      	bne.n	800c212 <UART_Start_Receive_IT+0x92>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	227f      	movs	r2, #127	; 0x7f
 800c20c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c210:	e008      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	223f      	movs	r2, #63	; 0x3f
 800c216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c21a:	e003      	b.n	800c224 <UART_Start_Receive_IT+0xa4>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2222      	movs	r2, #34	; 0x22
 800c230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3308      	adds	r3, #8
 800c23a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c246:	f043 0301 	orr.w	r3, r3, #1
 800c24a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3308      	adds	r3, #8
 800c254:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c258:	673a      	str	r2, [r7, #112]	; 0x70
 800c25a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c25e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e3      	bne.n	800c234 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c274:	d153      	bne.n	800c31e <UART_Start_Receive_IT+0x19e>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c27c:	88fa      	ldrh	r2, [r7, #6]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d34d      	bcc.n	800c31e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c28a:	d107      	bne.n	800c29c <UART_Start_Receive_IT+0x11c>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d103      	bne.n	800c29c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4a4b      	ldr	r2, [pc, #300]	; (800c3c4 <UART_Start_Receive_IT+0x244>)
 800c298:	671a      	str	r2, [r3, #112]	; 0x70
 800c29a:	e002      	b.n	800c2a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4a4a      	ldr	r2, [pc, #296]	; (800c3c8 <UART_Start_Receive_IT+0x248>)
 800c2a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01a      	beq.n	800c2e8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2dc:	e841 2300 	strex	r3, r2, [r1]
 800c2e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e4      	bne.n	800c2b2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3308      	adds	r3, #8
 800c306:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c308:	64ba      	str	r2, [r7, #72]	; 0x48
 800c30a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c30e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e5      	bne.n	800c2e8 <UART_Start_Receive_IT+0x168>
 800c31c:	e04a      	b.n	800c3b4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c326:	d107      	bne.n	800c338 <UART_Start_Receive_IT+0x1b8>
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a26      	ldr	r2, [pc, #152]	; (800c3cc <UART_Start_Receive_IT+0x24c>)
 800c334:	671a      	str	r2, [r3, #112]	; 0x70
 800c336:	e002      	b.n	800c33e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4a25      	ldr	r2, [pc, #148]	; (800c3d0 <UART_Start_Receive_IT+0x250>)
 800c33c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d019      	beq.n	800c382 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c362:	677b      	str	r3, [r7, #116]	; 0x74
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
 800c36e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e6      	bne.n	800c34e <UART_Start_Receive_IT+0x1ce>
 800c380:	e018      	b.n	800c3b4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	613b      	str	r3, [r7, #16]
   return(result);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f043 0320 	orr.w	r3, r3, #32
 800c396:	67bb      	str	r3, [r7, #120]	; 0x78
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a0:	623b      	str	r3, [r7, #32]
 800c3a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a4:	69f9      	ldr	r1, [r7, #28]
 800c3a6:	6a3a      	ldr	r2, [r7, #32]
 800c3a8:	e841 2300 	strex	r3, r2, [r1]
 800c3ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e6      	bne.n	800c382 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	378c      	adds	r7, #140	; 0x8c
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	0800ce21 	.word	0x0800ce21
 800c3c8:	0800cb29 	.word	0x0800cb29
 800c3cc:	0800c9c7 	.word	0x0800c9c7
 800c3d0:	0800c867 	.word	0x0800c867

0800c3d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b095      	sub	sp, #84	; 0x54
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c3fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e6      	bne.n	800c3dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <UART_EndRxTransfer+0xc8>)
 800c422:	4013      	ands	r3, r2
 800c424:	64bb      	str	r3, [r7, #72]	; 0x48
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c42e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e5      	bne.n	800c40e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c446:	2b01      	cmp	r3, #1
 800c448:	d118      	bne.n	800c47c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	e853 3f00 	ldrex	r3, [r3]
 800c456:	60bb      	str	r3, [r7, #8]
   return(result);
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f023 0310 	bic.w	r3, r3, #16
 800c45e:	647b      	str	r3, [r7, #68]	; 0x44
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	461a      	mov	r2, r3
 800c466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c468:	61bb      	str	r3, [r7, #24]
 800c46a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46c:	6979      	ldr	r1, [r7, #20]
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	e841 2300 	strex	r3, r2, [r1]
 800c474:	613b      	str	r3, [r7, #16]
   return(result);
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1e6      	bne.n	800c44a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2220      	movs	r2, #32
 800c480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c490:	bf00      	nop
 800c492:	3754      	adds	r7, #84	; 0x54
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	effffffe 	.word	0xeffffffe

0800c4a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7fe ff2a 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b08f      	sub	sp, #60	; 0x3c
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4da:	2b21      	cmp	r3, #33	; 0x21
 800c4dc:	d14c      	bne.n	800c578 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d132      	bne.n	800c550 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	e853 3f00 	ldrex	r3, [r3]
 800c4f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c50a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c510:	e841 2300 	strex	r3, r2, [r1]
 800c514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e6      	bne.n	800c4ea <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	e853 3f00 	ldrex	r3, [r3]
 800c528:	60bb      	str	r3, [r7, #8]
   return(result);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c530:	633b      	str	r3, [r7, #48]	; 0x30
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	61bb      	str	r3, [r7, #24]
 800c53c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	6979      	ldr	r1, [r7, #20]
 800c540:	69ba      	ldr	r2, [r7, #24]
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	613b      	str	r3, [r7, #16]
   return(result);
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e6      	bne.n	800c51c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c54e:	e013      	b.n	800c578 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	b29a      	uxth	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c578:	bf00      	nop
 800c57a:	373c      	adds	r7, #60	; 0x3c
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c584:	b480      	push	{r7}
 800c586:	b091      	sub	sp, #68	; 0x44
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c592:	2b21      	cmp	r3, #33	; 0x21
 800c594:	d151      	bne.n	800c63a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d132      	bne.n	800c608 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	e853 3f00 	ldrex	r3, [r3]
 800c5ae:	623b      	str	r3, [r7, #32]
   return(result);
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c5c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5c8:	e841 2300 	strex	r3, r2, [r1]
 800c5cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1e6      	bne.n	800c5a2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	61fb      	str	r3, [r7, #28]
 800c5f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	69b9      	ldr	r1, [r7, #24]
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	617b      	str	r3, [r7, #20]
   return(result);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e6      	bne.n	800c5d4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c606:	e018      	b.n	800c63a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c61c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c622:	1c9a      	adds	r2, r3, #2
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c62e:	b29b      	uxth	r3, r3
 800c630:	3b01      	subs	r3, #1
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c63a:	bf00      	nop
 800c63c:	3744      	adds	r7, #68	; 0x44
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c646:	b480      	push	{r7}
 800c648:	b091      	sub	sp, #68	; 0x44
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c654:	2b21      	cmp	r3, #33	; 0x21
 800c656:	d160      	bne.n	800c71a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c65e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c660:	e057      	b.n	800c712 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c668:	b29b      	uxth	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d133      	bne.n	800c6d6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3308      	adds	r3, #8
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	e853 3f00 	ldrex	r3, [r3]
 800c67c:	623b      	str	r3, [r7, #32]
   return(result);
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c684:	63bb      	str	r3, [r7, #56]	; 0x38
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3308      	adds	r3, #8
 800c68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c68e:	633a      	str	r2, [r7, #48]	; 0x30
 800c690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c696:	e841 2300 	strex	r3, r2, [r1]
 800c69a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1e5      	bne.n	800c66e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c4:	69b9      	ldr	r1, [r7, #24]
 800c6c6:	69fa      	ldr	r2, [r7, #28]
 800c6c8:	e841 2300 	strex	r3, r2, [r1]
 800c6cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e6      	bne.n	800c6a2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c6d4:	e021      	b.n	800c71a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d013      	beq.n	800c70c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e8:	781a      	ldrb	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c700:	b29b      	uxth	r3, r3
 800c702:	3b01      	subs	r3, #1
 800c704:	b29a      	uxth	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c70c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c70e:	3b01      	subs	r3, #1
 800c710:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c712:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1a4      	bne.n	800c662 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c718:	e7ff      	b.n	800c71a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c71a:	bf00      	nop
 800c71c:	3744      	adds	r7, #68	; 0x44
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c726:	b480      	push	{r7}
 800c728:	b091      	sub	sp, #68	; 0x44
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c734:	2b21      	cmp	r3, #33	; 0x21
 800c736:	d165      	bne.n	800c804 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c73e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c740:	e05c      	b.n	800c7fc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d133      	bne.n	800c7b6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3308      	adds	r3, #8
 800c754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3308      	adds	r3, #8
 800c76c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c76e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c776:	e841 2300 	strex	r3, r2, [r1]
 800c77a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1e5      	bne.n	800c74e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c796:	633b      	str	r3, [r7, #48]	; 0x30
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	6979      	ldr	r1, [r7, #20]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e6      	bne.n	800c782 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c7b4:	e026      	b.n	800c804 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	69db      	ldr	r3, [r3, #28]
 800c7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d018      	beq.n	800c7f6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7c8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7d8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7de:	1c9a      	adds	r2, r3, #2
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c7fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d19f      	bne.n	800c742 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c802:	e7ff      	b.n	800c804 <UART_TxISR_16BIT_FIFOEN+0xde>
 800c804:	bf00      	nop
 800c806:	3744      	adds	r7, #68	; 0x44
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	60bb      	str	r3, [r7, #8]
   return(result);
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c82c:	61fb      	str	r3, [r7, #28]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	61bb      	str	r3, [r7, #24]
 800c838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83a:	6979      	ldr	r1, [r7, #20]
 800c83c:	69ba      	ldr	r2, [r7, #24]
 800c83e:	e841 2300 	strex	r3, r2, [r1]
 800c842:	613b      	str	r3, [r7, #16]
   return(result);
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e6      	bne.n	800c818 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2220      	movs	r2, #32
 800c84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7fe fd53 	bl	800b304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c85e:	bf00      	nop
 800c860:	3720      	adds	r7, #32
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b096      	sub	sp, #88	; 0x58
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c874:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c87e:	2b22      	cmp	r3, #34	; 0x22
 800c880:	f040 8095 	bne.w	800c9ae <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c88e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c892:	b2d9      	uxtb	r1, r3
 800c894:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c89e:	400a      	ands	r2, r1
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a8:	1c5a      	adds	r2, r3, #1
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d178      	bne.n	800c9be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	e853 3f00 	ldrex	r3, [r3]
 800c8d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8e0:	653b      	str	r3, [r7, #80]	; 0x50
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f2:	e841 2300 	strex	r3, r2, [r1]
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e6      	bne.n	800c8cc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3308      	adds	r3, #8
 800c904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c908:	e853 3f00 	ldrex	r3, [r3]
 800c90c:	623b      	str	r3, [r7, #32]
   return(result);
 800c90e:	6a3b      	ldr	r3, [r7, #32]
 800c910:	f023 0301 	bic.w	r3, r3, #1
 800c914:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3308      	adds	r3, #8
 800c91c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c91e:	633a      	str	r2, [r7, #48]	; 0x30
 800c920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c926:	e841 2300 	strex	r3, r2, [r1]
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1e5      	bne.n	800c8fe <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2220      	movs	r2, #32
 800c936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d12e      	bne.n	800c9a6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 0310 	bic.w	r3, r3, #16
 800c962:	64bb      	str	r3, [r7, #72]	; 0x48
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	461a      	mov	r2, r3
 800c96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c970:	69b9      	ldr	r1, [r7, #24]
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	e841 2300 	strex	r3, r2, [r1]
 800c978:	617b      	str	r3, [r7, #20]
   return(result);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e6      	bne.n	800c94e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	f003 0310 	and.w	r3, r3, #16
 800c98a:	2b10      	cmp	r3, #16
 800c98c:	d103      	bne.n	800c996 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2210      	movs	r2, #16
 800c994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe fcc4 	bl	800b32c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9a4:	e00b      	b.n	800c9be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7f5 fdda 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800c9ac:	e007      	b.n	800c9be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	699a      	ldr	r2, [r3, #24]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f042 0208 	orr.w	r2, r2, #8
 800c9bc:	619a      	str	r2, [r3, #24]
}
 800c9be:	bf00      	nop
 800c9c0:	3758      	adds	r7, #88	; 0x58
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b096      	sub	sp, #88	; 0x58
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9de:	2b22      	cmp	r3, #34	; 0x22
 800c9e0:	f040 8095 	bne.w	800cb0e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9f4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c9f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca08:	1c9a      	adds	r2, r3, #2
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	3b01      	subs	r3, #1
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d178      	bne.n	800cb1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4a:	643b      	str	r3, [r7, #64]	; 0x40
 800ca4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca52:	e841 2300 	strex	r3, r2, [r1]
 800ca56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1e6      	bne.n	800ca2c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3308      	adds	r3, #8
 800ca64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	e853 3f00 	ldrex	r3, [r3]
 800ca6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	f023 0301 	bic.w	r3, r3, #1
 800ca74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca86:	e841 2300 	strex	r3, r2, [r1]
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1e5      	bne.n	800ca5e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2220      	movs	r2, #32
 800ca96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d12e      	bne.n	800cb06 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	e853 3f00 	ldrex	r3, [r3]
 800caba:	60bb      	str	r3, [r7, #8]
   return(result);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	f023 0310 	bic.w	r3, r3, #16
 800cac2:	647b      	str	r3, [r7, #68]	; 0x44
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	461a      	mov	r2, r3
 800caca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cacc:	61bb      	str	r3, [r7, #24]
 800cace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad0:	6979      	ldr	r1, [r7, #20]
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	e841 2300 	strex	r3, r2, [r1]
 800cad8:	613b      	str	r3, [r7, #16]
   return(result);
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1e6      	bne.n	800caae <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f003 0310 	and.w	r3, r3, #16
 800caea:	2b10      	cmp	r3, #16
 800caec:	d103      	bne.n	800caf6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2210      	movs	r2, #16
 800caf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7fe fc14 	bl	800b32c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb04:	e00b      	b.n	800cb1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f5 fd2a 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800cb0c:	e007      	b.n	800cb1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	699a      	ldr	r2, [r3, #24]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f042 0208 	orr.w	r2, r2, #8
 800cb1c:	619a      	str	r2, [r3, #24]
}
 800cb1e:	bf00      	nop
 800cb20:	3758      	adds	r7, #88	; 0x58
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b0a6      	sub	sp, #152	; 0x98
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb36:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb5e:	2b22      	cmp	r3, #34	; 0x22
 800cb60:	f040 814d 	bne.w	800cdfe <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb6e:	e0f4      	b.n	800cd5a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb76:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb7a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800cb7e:	b2d9      	uxtb	r1, r3
 800cb80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb8a:	400a      	ands	r2, r1
 800cb8c:	b2d2      	uxtb	r2, r2
 800cb8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	3b01      	subs	r3, #1
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cbb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d053      	beq.n	800cc6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d011      	beq.n	800cbf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cbce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00b      	beq.n	800cbf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbe8:	f043 0201 	orr.w	r2, r3, #1
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d011      	beq.n	800cc22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cbfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00b      	beq.n	800cc22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2202      	movs	r2, #2
 800cc10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc18:	f043 0204 	orr.w	r2, r3, #4
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d011      	beq.n	800cc52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cc2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc32:	f003 0301 	and.w	r3, r3, #1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00b      	beq.n	800cc52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2204      	movs	r2, #4
 800cc40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc48:	f043 0202 	orr.w	r2, r3, #2
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7fe fb5b 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d171      	bne.n	800cd5a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc7e:	e853 3f00 	ldrex	r3, [r3]
 800cc82:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cc84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc98:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc9a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cc9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cca0:	e841 2300 	strex	r3, r2, [r1]
 800cca4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1e4      	bne.n	800cc76 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccb6:	e853 3f00 	ldrex	r3, [r3]
 800ccba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ccbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccbe:	4b56      	ldr	r3, [pc, #344]	; (800ce18 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3308      	adds	r3, #8
 800ccca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cccc:	657a      	str	r2, [r7, #84]	; 0x54
 800ccce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccd4:	e841 2300 	strex	r3, r2, [r1]
 800ccd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ccda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1e5      	bne.n	800ccac <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d12e      	bne.n	800cd54 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	f023 0310 	bic.w	r3, r3, #16
 800cd10:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd1a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e6      	bne.n	800ccfc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	69db      	ldr	r3, [r3, #28]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d103      	bne.n	800cd44 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2210      	movs	r2, #16
 800cd42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7fe faed 	bl	800b32c <HAL_UARTEx_RxEventCallback>
 800cd52:	e002      	b.n	800cd5a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7f5 fc03 	bl	8002560 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d006      	beq.n	800cd70 <UART_RxISR_8BIT_FIFOEN+0x248>
 800cd62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd66:	f003 0320 	and.w	r3, r3, #32
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f47f af00 	bne.w	800cb70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d045      	beq.n	800ce0e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d23e      	bcs.n	800ce0e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3308      	adds	r3, #8
 800cd96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	e853 3f00 	ldrex	r3, [r3]
 800cd9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cda6:	673b      	str	r3, [r7, #112]	; 0x70
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	3308      	adds	r3, #8
 800cdae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb8:	e841 2300 	strex	r3, r2, [r1]
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1e5      	bne.n	800cd90 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a15      	ldr	r2, [pc, #84]	; (800ce1c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800cdc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	e853 3f00 	ldrex	r3, [r3]
 800cdd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f043 0320 	orr.w	r3, r3, #32
 800cdde:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde8:	61bb      	str	r3, [r7, #24]
 800cdea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdec:	6979      	ldr	r1, [r7, #20]
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	e841 2300 	strex	r3, r2, [r1]
 800cdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e6      	bne.n	800cdca <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdfc:	e007      	b.n	800ce0e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	699a      	ldr	r2, [r3, #24]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f042 0208 	orr.w	r2, r2, #8
 800ce0c:	619a      	str	r2, [r3, #24]
}
 800ce0e:	bf00      	nop
 800ce10:	3798      	adds	r7, #152	; 0x98
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	effffffe 	.word	0xeffffffe
 800ce1c:	0800c867 	.word	0x0800c867

0800ce20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b0a8      	sub	sp, #160	; 0xa0
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce2e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce56:	2b22      	cmp	r3, #34	; 0x22
 800ce58:	f040 8151 	bne.w	800d0fe <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce66:	e0f8      	b.n	800d05a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ce7a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ce7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ce82:	4013      	ands	r3, r2
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce90:	1c9a      	adds	r2, r3, #2
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ceb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ceb6:	f003 0307 	and.w	r3, r3, #7
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d053      	beq.n	800cf66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d011      	beq.n	800ceee <UART_RxISR_16BIT_FIFOEN+0xce>
 800ceca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00b      	beq.n	800ceee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2201      	movs	r2, #1
 800cedc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee4:	f043 0201 	orr.w	r2, r3, #1
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ceee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cef2:	f003 0302 	and.w	r3, r3, #2
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d011      	beq.n	800cf1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cefa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00b      	beq.n	800cf1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf14:	f043 0204 	orr.w	r2, r3, #4
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf22:	f003 0304 	and.w	r3, r3, #4
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d011      	beq.n	800cf4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cf2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00b      	beq.n	800cf4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2204      	movs	r2, #4
 800cf3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf44:	f043 0202 	orr.w	r2, r3, #2
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7fe f9dd 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d173      	bne.n	800d05a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf7a:	e853 3f00 	ldrex	r3, [r3]
 800cf7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf96:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e4      	bne.n	800cf72 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	3308      	adds	r3, #8
 800cfae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb2:	e853 3f00 	ldrex	r3, [r3]
 800cfb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cfb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfba:	4b57      	ldr	r3, [pc, #348]	; (800d118 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3308      	adds	r3, #8
 800cfc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfcc:	65ba      	str	r2, [r7, #88]	; 0x58
 800cfce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfd4:	e841 2300 	strex	r3, r2, [r1]
 800cfd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cfda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1e3      	bne.n	800cfa8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d12e      	bne.n	800d054 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d004:	e853 3f00 	ldrex	r3, [r3]
 800d008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00c:	f023 0310 	bic.w	r3, r3, #16
 800d010:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d01a:	647b      	str	r3, [r7, #68]	; 0x44
 800d01c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d022:	e841 2300 	strex	r3, r2, [r1]
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1e6      	bne.n	800cffc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69db      	ldr	r3, [r3, #28]
 800d034:	f003 0310 	and.w	r3, r3, #16
 800d038:	2b10      	cmp	r3, #16
 800d03a:	d103      	bne.n	800d044 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2210      	movs	r2, #16
 800d042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7fe f96d 	bl	800b32c <HAL_UARTEx_RxEventCallback>
 800d052:	e002      	b.n	800d05a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7f5 fa83 	bl	8002560 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d05a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d006      	beq.n	800d070 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d066:	f003 0320 	and.w	r3, r3, #32
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f47f aefc 	bne.w	800ce68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d076:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d07a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d045      	beq.n	800d10e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d088:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d23e      	bcs.n	800d10e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3308      	adds	r3, #8
 800d096:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	e853 3f00 	ldrex	r3, [r3]
 800d09e:	623b      	str	r3, [r7, #32]
   return(result);
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0a6:	677b      	str	r3, [r7, #116]	; 0x74
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0b0:	633a      	str	r2, [r7, #48]	; 0x30
 800d0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0b8:	e841 2300 	strex	r3, r2, [r1]
 800d0bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1e5      	bne.n	800d090 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a15      	ldr	r2, [pc, #84]	; (800d11c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d0c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	e853 3f00 	ldrex	r3, [r3]
 800d0d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f043 0320 	orr.w	r3, r3, #32
 800d0de:	673b      	str	r3, [r7, #112]	; 0x70
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0e8:	61fb      	str	r3, [r7, #28]
 800d0ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ec:	69b9      	ldr	r1, [r7, #24]
 800d0ee:	69fa      	ldr	r2, [r7, #28]
 800d0f0:	e841 2300 	strex	r3, r2, [r1]
 800d0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1e6      	bne.n	800d0ca <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0fc:	e007      	b.n	800d10e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	699a      	ldr	r2, [r3, #24]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f042 0208 	orr.w	r2, r2, #8
 800d10c:	619a      	str	r2, [r3, #24]
}
 800d10e:	bf00      	nop
 800d110:	37a0      	adds	r7, #160	; 0xa0
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	effffffe 	.word	0xeffffffe
 800d11c:	0800c9c7 	.word	0x0800c9c7

0800d120 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <HAL_UARTEx_DisableFifoMode+0x16>
 800d16e:	2302      	movs	r3, #2
 800d170:	e027      	b.n	800d1c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2224      	movs	r2, #36	; 0x24
 800d17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f022 0201 	bic.w	r2, r2, #1
 800d198:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2220      	movs	r2, #32
 800d1b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d101      	bne.n	800d1e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	e02d      	b.n	800d242 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2224      	movs	r2, #36	; 0x24
 800d1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f022 0201 	bic.w	r2, r2, #1
 800d20c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f850 	bl	800d2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2220      	movs	r2, #32
 800d234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b084      	sub	sp, #16
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d101      	bne.n	800d262 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d25e:	2302      	movs	r3, #2
 800d260:	e02d      	b.n	800d2be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2224      	movs	r2, #36	; 0x24
 800d26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f022 0201 	bic.w	r2, r2, #1
 800d288:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	683a      	ldr	r2, [r7, #0]
 800d29a:	430a      	orrs	r2, r1
 800d29c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f812 	bl	800d2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d108      	bne.n	800d2ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2e8:	e031      	b.n	800d34e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2ea:	2310      	movs	r3, #16
 800d2ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2ee:	2310      	movs	r3, #16
 800d2f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	0e5b      	lsrs	r3, r3, #25
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f003 0307 	and.w	r3, r3, #7
 800d300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	0f5b      	lsrs	r3, r3, #29
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d312:	7bbb      	ldrb	r3, [r7, #14]
 800d314:	7b3a      	ldrb	r2, [r7, #12]
 800d316:	4911      	ldr	r1, [pc, #68]	; (800d35c <UARTEx_SetNbDataToProcess+0x94>)
 800d318:	5c8a      	ldrb	r2, [r1, r2]
 800d31a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d31e:	7b3a      	ldrb	r2, [r7, #12]
 800d320:	490f      	ldr	r1, [pc, #60]	; (800d360 <UARTEx_SetNbDataToProcess+0x98>)
 800d322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d324:	fb93 f3f2 	sdiv	r3, r3, r2
 800d328:	b29a      	uxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	7b7a      	ldrb	r2, [r7, #13]
 800d334:	4909      	ldr	r1, [pc, #36]	; (800d35c <UARTEx_SetNbDataToProcess+0x94>)
 800d336:	5c8a      	ldrb	r2, [r1, r2]
 800d338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d33c:	7b7a      	ldrb	r2, [r7, #13]
 800d33e:	4908      	ldr	r1, [pc, #32]	; (800d360 <UARTEx_SetNbDataToProcess+0x98>)
 800d340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d342:	fb93 f3f2 	sdiv	r3, r3, r2
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d34e:	bf00      	nop
 800d350:	3714      	adds	r7, #20
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	0800d488 	.word	0x0800d488
 800d360:	0800d490 	.word	0x0800d490

0800d364 <__libc_init_array>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	4d0d      	ldr	r5, [pc, #52]	; (800d39c <__libc_init_array+0x38>)
 800d368:	4c0d      	ldr	r4, [pc, #52]	; (800d3a0 <__libc_init_array+0x3c>)
 800d36a:	1b64      	subs	r4, r4, r5
 800d36c:	10a4      	asrs	r4, r4, #2
 800d36e:	2600      	movs	r6, #0
 800d370:	42a6      	cmp	r6, r4
 800d372:	d109      	bne.n	800d388 <__libc_init_array+0x24>
 800d374:	4d0b      	ldr	r5, [pc, #44]	; (800d3a4 <__libc_init_array+0x40>)
 800d376:	4c0c      	ldr	r4, [pc, #48]	; (800d3a8 <__libc_init_array+0x44>)
 800d378:	f000 f820 	bl	800d3bc <_init>
 800d37c:	1b64      	subs	r4, r4, r5
 800d37e:	10a4      	asrs	r4, r4, #2
 800d380:	2600      	movs	r6, #0
 800d382:	42a6      	cmp	r6, r4
 800d384:	d105      	bne.n	800d392 <__libc_init_array+0x2e>
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	f855 3b04 	ldr.w	r3, [r5], #4
 800d38c:	4798      	blx	r3
 800d38e:	3601      	adds	r6, #1
 800d390:	e7ee      	b.n	800d370 <__libc_init_array+0xc>
 800d392:	f855 3b04 	ldr.w	r3, [r5], #4
 800d396:	4798      	blx	r3
 800d398:	3601      	adds	r6, #1
 800d39a:	e7f2      	b.n	800d382 <__libc_init_array+0x1e>
 800d39c:	0800d4a0 	.word	0x0800d4a0
 800d3a0:	0800d4a0 	.word	0x0800d4a0
 800d3a4:	0800d4a0 	.word	0x0800d4a0
 800d3a8:	0800d4a4 	.word	0x0800d4a4

0800d3ac <memset>:
 800d3ac:	4402      	add	r2, r0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d100      	bne.n	800d3b6 <memset+0xa>
 800d3b4:	4770      	bx	lr
 800d3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ba:	e7f9      	b.n	800d3b0 <memset+0x4>

0800d3bc <_init>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr

0800d3c8 <_fini>:
 800d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ca:	bf00      	nop
 800d3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ce:	bc08      	pop	{r3}
 800d3d0:	469e      	mov	lr, r3
 800d3d2:	4770      	bx	lr
